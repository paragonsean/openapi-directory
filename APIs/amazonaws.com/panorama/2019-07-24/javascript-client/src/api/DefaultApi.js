/**
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateApplicationInstanceRequest from '../model/CreateApplicationInstanceRequest';
import CreateApplicationInstanceResponse from '../model/CreateApplicationInstanceResponse';
import CreateJobForDevicesRequest from '../model/CreateJobForDevicesRequest';
import CreateJobForDevicesResponse from '../model/CreateJobForDevicesResponse';
import CreateNodeFromTemplateJobRequest from '../model/CreateNodeFromTemplateJobRequest';
import CreateNodeFromTemplateJobResponse from '../model/CreateNodeFromTemplateJobResponse';
import CreatePackageImportJobRequest from '../model/CreatePackageImportJobRequest';
import CreatePackageImportJobResponse from '../model/CreatePackageImportJobResponse';
import CreatePackageRequest from '../model/CreatePackageRequest';
import CreatePackageResponse from '../model/CreatePackageResponse';
import DeleteDeviceResponse from '../model/DeleteDeviceResponse';
import DescribeApplicationInstanceDetailsResponse from '../model/DescribeApplicationInstanceDetailsResponse';
import DescribeApplicationInstanceResponse from '../model/DescribeApplicationInstanceResponse';
import DescribeDeviceJobResponse from '../model/DescribeDeviceJobResponse';
import DescribeDeviceResponse from '../model/DescribeDeviceResponse';
import DescribeNodeFromTemplateJobResponse from '../model/DescribeNodeFromTemplateJobResponse';
import DescribeNodeResponse from '../model/DescribeNodeResponse';
import DescribePackageImportJobResponse from '../model/DescribePackageImportJobResponse';
import DescribePackageResponse from '../model/DescribePackageResponse';
import DescribePackageVersionResponse from '../model/DescribePackageVersionResponse';
import ListApplicationInstanceDependenciesResponse from '../model/ListApplicationInstanceDependenciesResponse';
import ListApplicationInstanceNodeInstancesResponse from '../model/ListApplicationInstanceNodeInstancesResponse';
import ListApplicationInstancesResponse from '../model/ListApplicationInstancesResponse';
import ListDevicesJobsResponse from '../model/ListDevicesJobsResponse';
import ListDevicesResponse from '../model/ListDevicesResponse';
import ListNodeFromTemplateJobsResponse from '../model/ListNodeFromTemplateJobsResponse';
import ListNodesResponse from '../model/ListNodesResponse';
import ListPackageImportJobsResponse from '../model/ListPackageImportJobsResponse';
import ListPackagesResponse from '../model/ListPackagesResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import ProvisionDeviceRequest from '../model/ProvisionDeviceRequest';
import ProvisionDeviceResponse from '../model/ProvisionDeviceResponse';
import RegisterPackageVersionRequest from '../model/RegisterPackageVersionRequest';
import SignalApplicationInstanceNodeInstancesRequest from '../model/SignalApplicationInstanceNodeInstancesRequest';
import SignalApplicationInstanceNodeInstancesResponse from '../model/SignalApplicationInstanceNodeInstancesResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UpdateDeviceMetadataRequest from '../model/UpdateDeviceMetadataRequest';
import UpdateDeviceMetadataResponse from '../model/UpdateDeviceMetadataResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2019-07-24
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createApplicationInstance operation.
     * @callback module:api/DefaultApi~createApplicationInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateApplicationInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an application instance and deploys it to a device.
     * @param {module:model/CreateApplicationInstanceRequest} createApplicationInstanceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createApplicationInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateApplicationInstanceResponse}
     */
    createApplicationInstance(createApplicationInstanceRequest, opts, callback) {
      opts = opts || {};
      let postBody = createApplicationInstanceRequest;
      // verify the required parameter 'createApplicationInstanceRequest' is set
      if (createApplicationInstanceRequest === undefined || createApplicationInstanceRequest === null) {
        throw new Error("Missing the required parameter 'createApplicationInstanceRequest' when calling createApplicationInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateApplicationInstanceResponse;
      return this.apiClient.callApi(
        '/application-instances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createJobForDevices operation.
     * @callback module:api/DefaultApi~createJobForDevicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateJobForDevicesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a job to run on a device. A job can update a device's software or reboot it.
     * @param {module:model/CreateJobForDevicesRequest} createJobForDevicesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createJobForDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateJobForDevicesResponse}
     */
    createJobForDevices(createJobForDevicesRequest, opts, callback) {
      opts = opts || {};
      let postBody = createJobForDevicesRequest;
      // verify the required parameter 'createJobForDevicesRequest' is set
      if (createJobForDevicesRequest === undefined || createJobForDevicesRequest === null) {
        throw new Error("Missing the required parameter 'createJobForDevicesRequest' when calling createJobForDevices");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateJobForDevicesResponse;
      return this.apiClient.callApi(
        '/jobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNodeFromTemplateJob operation.
     * @callback module:api/DefaultApi~createNodeFromTemplateJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateNodeFromTemplateJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a camera stream node.
     * @param {module:model/CreateNodeFromTemplateJobRequest} createNodeFromTemplateJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createNodeFromTemplateJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateNodeFromTemplateJobResponse}
     */
    createNodeFromTemplateJob(createNodeFromTemplateJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = createNodeFromTemplateJobRequest;
      // verify the required parameter 'createNodeFromTemplateJobRequest' is set
      if (createNodeFromTemplateJobRequest === undefined || createNodeFromTemplateJobRequest === null) {
        throw new Error("Missing the required parameter 'createNodeFromTemplateJobRequest' when calling createNodeFromTemplateJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateNodeFromTemplateJobResponse;
      return this.apiClient.callApi(
        '/packages/template-job', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPackage operation.
     * @callback module:api/DefaultApi~createPackageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePackageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a package and storage location in an Amazon S3 access point.
     * @param {module:model/CreatePackageRequest} createPackageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createPackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePackageResponse}
     */
    createPackage(createPackageRequest, opts, callback) {
      opts = opts || {};
      let postBody = createPackageRequest;
      // verify the required parameter 'createPackageRequest' is set
      if (createPackageRequest === undefined || createPackageRequest === null) {
        throw new Error("Missing the required parameter 'createPackageRequest' when calling createPackage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePackageResponse;
      return this.apiClient.callApi(
        '/packages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPackageImportJob operation.
     * @callback module:api/DefaultApi~createPackageImportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePackageImportJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Imports a node package.
     * @param {module:model/CreatePackageImportJobRequest} createPackageImportJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createPackageImportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePackageImportJobResponse}
     */
    createPackageImportJob(createPackageImportJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = createPackageImportJobRequest;
      // verify the required parameter 'createPackageImportJobRequest' is set
      if (createPackageImportJobRequest === undefined || createPackageImportJobRequest === null) {
        throw new Error("Missing the required parameter 'createPackageImportJobRequest' when calling createPackageImportJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePackageImportJobResponse;
      return this.apiClient.callApi(
        '/packages/import-jobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDevice operation.
     * @callback module:api/DefaultApi~deleteDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteDeviceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a device.
     * @param {String} deviceId The device's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteDeviceResponse}
     */
    deleteDevice(deviceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling deleteDevice");
      }

      let pathParams = {
        'DeviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteDeviceResponse;
      return this.apiClient.callApi(
        '/devices/{DeviceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePackage operation.
     * @callback module:api/DefaultApi~deletePackageCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a package.</p> <note> <p>To delete a package, you need permission to call <code>s3:DeleteObject</code> in addition to permissions for the AWS Panorama API.</p> </note>
     * @param {String} packageId The package's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [forceDelete] Delete the package even if it has artifacts stored in its access point. Deletes the package's artifacts from Amazon S3.
     * @param {module:api/DefaultApi~deletePackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deletePackage(packageId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageId' is set
      if (packageId === undefined || packageId === null) {
        throw new Error("Missing the required parameter 'packageId' when calling deletePackage");
      }

      let pathParams = {
        'PackageId': packageId
      };
      let queryParams = {
        'ForceDelete': opts['forceDelete']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/packages/{PackageId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deregisterPackageVersion operation.
     * @callback module:api/DefaultApi~deregisterPackageVersionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deregisters a package version.
     * @param {String} packageId A package ID.
     * @param {String} packageVersion A package version.
     * @param {String} patchVersion A patch version.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [ownerAccount] An owner account.
     * @param {String} [updatedLatestPatchVersion] If the version was marked latest, the new version to maker as latest.
     * @param {module:api/DefaultApi~deregisterPackageVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deregisterPackageVersion(packageId, packageVersion, patchVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageId' is set
      if (packageId === undefined || packageId === null) {
        throw new Error("Missing the required parameter 'packageId' when calling deregisterPackageVersion");
      }
      // verify the required parameter 'packageVersion' is set
      if (packageVersion === undefined || packageVersion === null) {
        throw new Error("Missing the required parameter 'packageVersion' when calling deregisterPackageVersion");
      }
      // verify the required parameter 'patchVersion' is set
      if (patchVersion === undefined || patchVersion === null) {
        throw new Error("Missing the required parameter 'patchVersion' when calling deregisterPackageVersion");
      }

      let pathParams = {
        'PackageId': packageId,
        'PackageVersion': packageVersion,
        'PatchVersion': patchVersion
      };
      let queryParams = {
        'OwnerAccount': opts['ownerAccount'],
        'UpdatedLatestPatchVersion': opts['updatedLatestPatchVersion']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/packages/{PackageId}/versions/{PackageVersion}/patch/{PatchVersion}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeApplicationInstance operation.
     * @callback module:api/DefaultApi~describeApplicationInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeApplicationInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about an application instance on a device.
     * @param {String} applicationInstanceId The application instance's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeApplicationInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeApplicationInstanceResponse}
     */
    describeApplicationInstance(applicationInstanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationInstanceId' is set
      if (applicationInstanceId === undefined || applicationInstanceId === null) {
        throw new Error("Missing the required parameter 'applicationInstanceId' when calling describeApplicationInstance");
      }

      let pathParams = {
        'ApplicationInstanceId': applicationInstanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeApplicationInstanceResponse;
      return this.apiClient.callApi(
        '/application-instances/{ApplicationInstanceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeApplicationInstanceDetails operation.
     * @callback module:api/DefaultApi~describeApplicationInstanceDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeApplicationInstanceDetailsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about an application instance's configuration manifest.
     * @param {String} applicationInstanceId The application instance's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeApplicationInstanceDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeApplicationInstanceDetailsResponse}
     */
    describeApplicationInstanceDetails(applicationInstanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationInstanceId' is set
      if (applicationInstanceId === undefined || applicationInstanceId === null) {
        throw new Error("Missing the required parameter 'applicationInstanceId' when calling describeApplicationInstanceDetails");
      }

      let pathParams = {
        'ApplicationInstanceId': applicationInstanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeApplicationInstanceDetailsResponse;
      return this.apiClient.callApi(
        '/application-instances/{ApplicationInstanceId}/details', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeDevice operation.
     * @callback module:api/DefaultApi~describeDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDeviceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about a device.
     * @param {String} deviceId The device's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDeviceResponse}
     */
    describeDevice(deviceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling describeDevice");
      }

      let pathParams = {
        'DeviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeDeviceResponse;
      return this.apiClient.callApi(
        '/devices/{DeviceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeDeviceJob operation.
     * @callback module:api/DefaultApi~describeDeviceJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDeviceJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about a device job.
     * @param {String} jobId The job's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeDeviceJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDeviceJobResponse}
     */
    describeDeviceJob(jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling describeDeviceJob");
      }

      let pathParams = {
        'JobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeDeviceJobResponse;
      return this.apiClient.callApi(
        '/jobs/{JobId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeNode operation.
     * @callback module:api/DefaultApi~describeNodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeNodeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about a node.
     * @param {String} nodeId The node's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [ownerAccount] The account ID of the node's owner.
     * @param {module:api/DefaultApi~describeNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeNodeResponse}
     */
    describeNode(nodeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling describeNode");
      }

      let pathParams = {
        'NodeId': nodeId
      };
      let queryParams = {
        'OwnerAccount': opts['ownerAccount']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeNodeResponse;
      return this.apiClient.callApi(
        '/nodes/{NodeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeNodeFromTemplateJob operation.
     * @callback module:api/DefaultApi~describeNodeFromTemplateJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeNodeFromTemplateJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about a job to create a camera stream node.
     * @param {String} jobId The job's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeNodeFromTemplateJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeNodeFromTemplateJobResponse}
     */
    describeNodeFromTemplateJob(jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling describeNodeFromTemplateJob");
      }

      let pathParams = {
        'JobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeNodeFromTemplateJobResponse;
      return this.apiClient.callApi(
        '/packages/template-job/{JobId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describePackage operation.
     * @callback module:api/DefaultApi~describePackageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribePackageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about a package.
     * @param {String} packageId The package's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describePackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribePackageResponse}
     */
    describePackage(packageId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageId' is set
      if (packageId === undefined || packageId === null) {
        throw new Error("Missing the required parameter 'packageId' when calling describePackage");
      }

      let pathParams = {
        'PackageId': packageId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribePackageResponse;
      return this.apiClient.callApi(
        '/packages/metadata/{PackageId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describePackageImportJob operation.
     * @callback module:api/DefaultApi~describePackageImportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribePackageImportJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about a package import job.
     * @param {String} jobId The job's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describePackageImportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribePackageImportJobResponse}
     */
    describePackageImportJob(jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling describePackageImportJob");
      }

      let pathParams = {
        'JobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribePackageImportJobResponse;
      return this.apiClient.callApi(
        '/packages/import-jobs/{JobId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describePackageVersion operation.
     * @callback module:api/DefaultApi~describePackageVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribePackageVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about a package version.
     * @param {String} packageId The version's ID.
     * @param {String} packageVersion The version's version.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [ownerAccount] The version's owner account.
     * @param {String} [patchVersion] The version's patch version.
     * @param {module:api/DefaultApi~describePackageVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribePackageVersionResponse}
     */
    describePackageVersion(packageId, packageVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageId' is set
      if (packageId === undefined || packageId === null) {
        throw new Error("Missing the required parameter 'packageId' when calling describePackageVersion");
      }
      // verify the required parameter 'packageVersion' is set
      if (packageVersion === undefined || packageVersion === null) {
        throw new Error("Missing the required parameter 'packageVersion' when calling describePackageVersion");
      }

      let pathParams = {
        'PackageId': packageId,
        'PackageVersion': packageVersion
      };
      let queryParams = {
        'OwnerAccount': opts['ownerAccount'],
        'PatchVersion': opts['patchVersion']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribePackageVersionResponse;
      return this.apiClient.callApi(
        '/packages/metadata/{PackageId}/versions/{PackageVersion}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listApplicationInstanceDependencies operation.
     * @callback module:api/DefaultApi~listApplicationInstanceDependenciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListApplicationInstanceDependenciesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of application instance dependencies.
     * @param {String} applicationInstanceId The application instance's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of application instance dependencies to return in one page of results.
     * @param {String} [nextToken] Specify the pagination token from a previous request to retrieve the next page of results.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listApplicationInstanceDependenciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListApplicationInstanceDependenciesResponse}
     */
    listApplicationInstanceDependencies(applicationInstanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationInstanceId' is set
      if (applicationInstanceId === undefined || applicationInstanceId === null) {
        throw new Error("Missing the required parameter 'applicationInstanceId' when calling listApplicationInstanceDependencies");
      }

      let pathParams = {
        'ApplicationInstanceId': applicationInstanceId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListApplicationInstanceDependenciesResponse;
      return this.apiClient.callApi(
        '/application-instances/{ApplicationInstanceId}/package-dependencies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listApplicationInstanceNodeInstances operation.
     * @callback module:api/DefaultApi~listApplicationInstanceNodeInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListApplicationInstanceNodeInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of application node instances.
     * @param {String} applicationInstanceId The node instances' application instance ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of node instances to return in one page of results.
     * @param {String} [nextToken] Specify the pagination token from a previous request to retrieve the next page of results.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listApplicationInstanceNodeInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListApplicationInstanceNodeInstancesResponse}
     */
    listApplicationInstanceNodeInstances(applicationInstanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationInstanceId' is set
      if (applicationInstanceId === undefined || applicationInstanceId === null) {
        throw new Error("Missing the required parameter 'applicationInstanceId' when calling listApplicationInstanceNodeInstances");
      }

      let pathParams = {
        'ApplicationInstanceId': applicationInstanceId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListApplicationInstanceNodeInstancesResponse;
      return this.apiClient.callApi(
        '/application-instances/{ApplicationInstanceId}/node-instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listApplicationInstances operation.
     * @callback module:api/DefaultApi~listApplicationInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListApplicationInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of application instances.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [deviceId] The application instances' device ID.
     * @param {Number} [maxResults] The maximum number of application instances to return in one page of results.
     * @param {String} [nextToken] Specify the pagination token from a previous request to retrieve the next page of results.
     * @param {module:model/String} [statusFilter] Only include instances with a specific status.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listApplicationInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListApplicationInstancesResponse}
     */
    listApplicationInstances(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'deviceId': opts['deviceId'],
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'statusFilter': opts['statusFilter'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListApplicationInstancesResponse;
      return this.apiClient.callApi(
        '/application-instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDevices operation.
     * @callback module:api/DefaultApi~listDevicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDevicesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of devices.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [deviceAggregatedStatusFilter] Filter based on a device's status.
     * @param {Number} [maxResults] The maximum number of devices to return in one page of results.
     * @param {String} [nameFilter] Filter based on device's name. Prefixes supported.
     * @param {String} [nextToken] Specify the pagination token from a previous request to retrieve the next page of results.
     * @param {module:model/String} [sortBy] The target column to be sorted on. Default column sort is CREATED_TIME.
     * @param {module:model/String} [sortOrder] The sorting order for the returned list. SortOrder is DESCENDING by default based on CREATED_TIME. Otherwise, SortOrder is ASCENDING.
     * @param {module:api/DefaultApi~listDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDevicesResponse}
     */
    listDevices(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'DeviceAggregatedStatusFilter': opts['deviceAggregatedStatusFilter'],
        'MaxResults': opts['maxResults'],
        'NameFilter': opts['nameFilter'],
        'NextToken': opts['nextToken'],
        'SortBy': opts['sortBy'],
        'SortOrder': opts['sortOrder']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListDevicesResponse;
      return this.apiClient.callApi(
        '/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDevicesJobs operation.
     * @callback module:api/DefaultApi~listDevicesJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDevicesJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of jobs.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [deviceId] Filter results by the job's target device ID.
     * @param {Number} [maxResults] The maximum number of device jobs to return in one page of results.
     * @param {String} [nextToken] Specify the pagination token from a previous request to retrieve the next page of results.
     * @param {module:api/DefaultApi~listDevicesJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDevicesJobsResponse}
     */
    listDevicesJobs(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'DeviceId': opts['deviceId'],
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListDevicesJobsResponse;
      return this.apiClient.callApi(
        '/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listNodeFromTemplateJobs operation.
     * @callback module:api/DefaultApi~listNodeFromTemplateJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListNodeFromTemplateJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of camera stream node jobs.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of node from template jobs to return in one page of results.
     * @param {String} [nextToken] Specify the pagination token from a previous request to retrieve the next page of results.
     * @param {module:api/DefaultApi~listNodeFromTemplateJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListNodeFromTemplateJobsResponse}
     */
    listNodeFromTemplateJobs(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListNodeFromTemplateJobsResponse;
      return this.apiClient.callApi(
        '/packages/template-job', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listNodes operation.
     * @callback module:api/DefaultApi~listNodesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListNodesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of nodes.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [category] Search for nodes by category.
     * @param {Number} [maxResults] The maximum number of nodes to return in one page of results.
     * @param {String} [nextToken] Specify the pagination token from a previous request to retrieve the next page of results.
     * @param {String} [ownerAccount] Search for nodes by the account ID of the nodes' owner.
     * @param {String} [packageName] Search for nodes by name.
     * @param {String} [packageVersion] Search for nodes by version.
     * @param {String} [patchVersion] Search for nodes by patch version.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listNodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListNodesResponse}
     */
    listNodes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'category': opts['category'],
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'ownerAccount': opts['ownerAccount'],
        'packageName': opts['packageName'],
        'packageVersion': opts['packageVersion'],
        'patchVersion': opts['patchVersion'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListNodesResponse;
      return this.apiClient.callApi(
        '/nodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPackageImportJobs operation.
     * @callback module:api/DefaultApi~listPackageImportJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPackageImportJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of package import jobs.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of package import jobs to return in one page of results.
     * @param {String} [nextToken] Specify the pagination token from a previous request to retrieve the next page of results.
     * @param {module:api/DefaultApi~listPackageImportJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPackageImportJobsResponse}
     */
    listPackageImportJobs(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListPackageImportJobsResponse;
      return this.apiClient.callApi(
        '/packages/import-jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPackages operation.
     * @callback module:api/DefaultApi~listPackagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPackagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of packages.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of packages to return in one page of results.
     * @param {String} [nextToken] Specify the pagination token from a previous request to retrieve the next page of results.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listPackagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPackagesResponse}
     */
    listPackages(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListPackagesResponse;
      return this.apiClient.callApi(
        '/packages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of tags for a resource.
     * @param {String} resourceArn The resource's ARN.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
        'ResourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/tags/{ResourceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the provisionDevice operation.
     * @callback module:api/DefaultApi~provisionDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProvisionDeviceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a device and returns a configuration archive. The configuration archive is a ZIP file that contains a provisioning certificate that is valid for 5 minutes. Name the configuration archive <code>certificates-omni_<i>device-name</i>.zip</code> and transfer it to the device within 5 minutes. Use the included USB storage device and connect it to the USB 3.0 port next to the HDMI output.
     * @param {module:model/ProvisionDeviceRequest} provisionDeviceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~provisionDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProvisionDeviceResponse}
     */
    provisionDevice(provisionDeviceRequest, opts, callback) {
      opts = opts || {};
      let postBody = provisionDeviceRequest;
      // verify the required parameter 'provisionDeviceRequest' is set
      if (provisionDeviceRequest === undefined || provisionDeviceRequest === null) {
        throw new Error("Missing the required parameter 'provisionDeviceRequest' when calling provisionDevice");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProvisionDeviceResponse;
      return this.apiClient.callApi(
        '/devices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerPackageVersion operation.
     * @callback module:api/DefaultApi~registerPackageVersionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registers a package version.
     * @param {String} packageId A package ID.
     * @param {String} packageVersion A package version.
     * @param {String} patchVersion A patch version.
     * @param {module:model/RegisterPackageVersionRequest} registerPackageVersionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~registerPackageVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    registerPackageVersion(packageId, packageVersion, patchVersion, registerPackageVersionRequest, opts, callback) {
      opts = opts || {};
      let postBody = registerPackageVersionRequest;
      // verify the required parameter 'packageId' is set
      if (packageId === undefined || packageId === null) {
        throw new Error("Missing the required parameter 'packageId' when calling registerPackageVersion");
      }
      // verify the required parameter 'packageVersion' is set
      if (packageVersion === undefined || packageVersion === null) {
        throw new Error("Missing the required parameter 'packageVersion' when calling registerPackageVersion");
      }
      // verify the required parameter 'patchVersion' is set
      if (patchVersion === undefined || patchVersion === null) {
        throw new Error("Missing the required parameter 'patchVersion' when calling registerPackageVersion");
      }
      // verify the required parameter 'registerPackageVersionRequest' is set
      if (registerPackageVersionRequest === undefined || registerPackageVersionRequest === null) {
        throw new Error("Missing the required parameter 'registerPackageVersionRequest' when calling registerPackageVersion");
      }

      let pathParams = {
        'PackageId': packageId,
        'PackageVersion': packageVersion,
        'PatchVersion': patchVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/packages/{PackageId}/versions/{PackageVersion}/patch/{PatchVersion}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeApplicationInstance operation.
     * @callback module:api/DefaultApi~removeApplicationInstanceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an application instance.
     * @param {String} applicationInstanceId An application instance ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~removeApplicationInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    removeApplicationInstance(applicationInstanceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationInstanceId' is set
      if (applicationInstanceId === undefined || applicationInstanceId === null) {
        throw new Error("Missing the required parameter 'applicationInstanceId' when calling removeApplicationInstance");
      }

      let pathParams = {
        'ApplicationInstanceId': applicationInstanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/application-instances/{ApplicationInstanceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the signalApplicationInstanceNodeInstances operation.
     * @callback module:api/DefaultApi~signalApplicationInstanceNodeInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SignalApplicationInstanceNodeInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Signal camera nodes to stop or resume.
     * @param {String} applicationInstanceId An application instance ID.
     * @param {module:model/SignalApplicationInstanceNodeInstancesRequest} signalApplicationInstanceNodeInstancesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~signalApplicationInstanceNodeInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SignalApplicationInstanceNodeInstancesResponse}
     */
    signalApplicationInstanceNodeInstances(applicationInstanceId, signalApplicationInstanceNodeInstancesRequest, opts, callback) {
      opts = opts || {};
      let postBody = signalApplicationInstanceNodeInstancesRequest;
      // verify the required parameter 'applicationInstanceId' is set
      if (applicationInstanceId === undefined || applicationInstanceId === null) {
        throw new Error("Missing the required parameter 'applicationInstanceId' when calling signalApplicationInstanceNodeInstances");
      }
      // verify the required parameter 'signalApplicationInstanceNodeInstancesRequest' is set
      if (signalApplicationInstanceNodeInstancesRequest === undefined || signalApplicationInstanceNodeInstancesRequest === null) {
        throw new Error("Missing the required parameter 'signalApplicationInstanceNodeInstancesRequest' when calling signalApplicationInstanceNodeInstances");
      }

      let pathParams = {
        'ApplicationInstanceId': applicationInstanceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SignalApplicationInstanceNodeInstancesResponse;
      return this.apiClient.callApi(
        '/application-instances/{ApplicationInstanceId}/node-signals', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tags a resource.
     * @param {String} resourceArn The resource's ARN.
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'ResourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{ResourceArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes tags from a resource.
     * @param {String} resourceArn The resource's ARN.
     * @param {Array.<String>} tagKeys Tag keys to remove.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'ResourceArn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{ResourceArn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceMetadata operation.
     * @callback module:api/DefaultApi~updateDeviceMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateDeviceMetadataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a device's metadata.
     * @param {String} deviceId The device's ID.
     * @param {module:model/UpdateDeviceMetadataRequest} updateDeviceMetadataRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateDeviceMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateDeviceMetadataResponse}
     */
    updateDeviceMetadata(deviceId, updateDeviceMetadataRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateDeviceMetadataRequest;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling updateDeviceMetadata");
      }
      // verify the required parameter 'updateDeviceMetadataRequest' is set
      if (updateDeviceMetadataRequest === undefined || updateDeviceMetadataRequest === null) {
        throw new Error("Missing the required parameter 'updateDeviceMetadataRequest' when calling updateDeviceMetadata");
      }

      let pathParams = {
        'DeviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateDeviceMetadataResponse;
      return this.apiClient.callApi(
        '/devices/{DeviceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
