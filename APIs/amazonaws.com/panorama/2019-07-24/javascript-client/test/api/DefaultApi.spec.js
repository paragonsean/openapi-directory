/**
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsPanorama);
  }
}(this, function(expect, AwsPanorama) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsPanorama.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('createApplicationInstance', function() {
      it('should call createApplicationInstance successfully', function(done) {
        //uncomment below and update the code to test createApplicationInstance
        //instance.createApplicationInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createJobForDevices', function() {
      it('should call createJobForDevices successfully', function(done) {
        //uncomment below and update the code to test createJobForDevices
        //instance.createJobForDevices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNodeFromTemplateJob', function() {
      it('should call createNodeFromTemplateJob successfully', function(done) {
        //uncomment below and update the code to test createNodeFromTemplateJob
        //instance.createNodeFromTemplateJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPackage', function() {
      it('should call createPackage successfully', function(done) {
        //uncomment below and update the code to test createPackage
        //instance.createPackage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPackageImportJob', function() {
      it('should call createPackageImportJob successfully', function(done) {
        //uncomment below and update the code to test createPackageImportJob
        //instance.createPackageImportJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDevice', function() {
      it('should call deleteDevice successfully', function(done) {
        //uncomment below and update the code to test deleteDevice
        //instance.deleteDevice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePackage', function() {
      it('should call deletePackage successfully', function(done) {
        //uncomment below and update the code to test deletePackage
        //instance.deletePackage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deregisterPackageVersion', function() {
      it('should call deregisterPackageVersion successfully', function(done) {
        //uncomment below and update the code to test deregisterPackageVersion
        //instance.deregisterPackageVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeApplicationInstance', function() {
      it('should call describeApplicationInstance successfully', function(done) {
        //uncomment below and update the code to test describeApplicationInstance
        //instance.describeApplicationInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeApplicationInstanceDetails', function() {
      it('should call describeApplicationInstanceDetails successfully', function(done) {
        //uncomment below and update the code to test describeApplicationInstanceDetails
        //instance.describeApplicationInstanceDetails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeDevice', function() {
      it('should call describeDevice successfully', function(done) {
        //uncomment below and update the code to test describeDevice
        //instance.describeDevice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeDeviceJob', function() {
      it('should call describeDeviceJob successfully', function(done) {
        //uncomment below and update the code to test describeDeviceJob
        //instance.describeDeviceJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeNode', function() {
      it('should call describeNode successfully', function(done) {
        //uncomment below and update the code to test describeNode
        //instance.describeNode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeNodeFromTemplateJob', function() {
      it('should call describeNodeFromTemplateJob successfully', function(done) {
        //uncomment below and update the code to test describeNodeFromTemplateJob
        //instance.describeNodeFromTemplateJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describePackage', function() {
      it('should call describePackage successfully', function(done) {
        //uncomment below and update the code to test describePackage
        //instance.describePackage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describePackageImportJob', function() {
      it('should call describePackageImportJob successfully', function(done) {
        //uncomment below and update the code to test describePackageImportJob
        //instance.describePackageImportJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describePackageVersion', function() {
      it('should call describePackageVersion successfully', function(done) {
        //uncomment below and update the code to test describePackageVersion
        //instance.describePackageVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listApplicationInstanceDependencies', function() {
      it('should call listApplicationInstanceDependencies successfully', function(done) {
        //uncomment below and update the code to test listApplicationInstanceDependencies
        //instance.listApplicationInstanceDependencies(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listApplicationInstanceNodeInstances', function() {
      it('should call listApplicationInstanceNodeInstances successfully', function(done) {
        //uncomment below and update the code to test listApplicationInstanceNodeInstances
        //instance.listApplicationInstanceNodeInstances(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listApplicationInstances', function() {
      it('should call listApplicationInstances successfully', function(done) {
        //uncomment below and update the code to test listApplicationInstances
        //instance.listApplicationInstances(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDevices', function() {
      it('should call listDevices successfully', function(done) {
        //uncomment below and update the code to test listDevices
        //instance.listDevices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDevicesJobs', function() {
      it('should call listDevicesJobs successfully', function(done) {
        //uncomment below and update the code to test listDevicesJobs
        //instance.listDevicesJobs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNodeFromTemplateJobs', function() {
      it('should call listNodeFromTemplateJobs successfully', function(done) {
        //uncomment below and update the code to test listNodeFromTemplateJobs
        //instance.listNodeFromTemplateJobs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNodes', function() {
      it('should call listNodes successfully', function(done) {
        //uncomment below and update the code to test listNodes
        //instance.listNodes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPackageImportJobs', function() {
      it('should call listPackageImportJobs successfully', function(done) {
        //uncomment below and update the code to test listPackageImportJobs
        //instance.listPackageImportJobs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPackages', function() {
      it('should call listPackages successfully', function(done) {
        //uncomment below and update the code to test listPackages
        //instance.listPackages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('provisionDevice', function() {
      it('should call provisionDevice successfully', function(done) {
        //uncomment below and update the code to test provisionDevice
        //instance.provisionDevice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('registerPackageVersion', function() {
      it('should call registerPackageVersion successfully', function(done) {
        //uncomment below and update the code to test registerPackageVersion
        //instance.registerPackageVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeApplicationInstance', function() {
      it('should call removeApplicationInstance successfully', function(done) {
        //uncomment below and update the code to test removeApplicationInstance
        //instance.removeApplicationInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('signalApplicationInstanceNodeInstances', function() {
      it('should call signalApplicationInstanceNodeInstances successfully', function(done) {
        //uncomment below and update the code to test signalApplicationInstanceNodeInstances
        //instance.signalApplicationInstanceNodeInstances(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDeviceMetadata', function() {
      it('should call updateDeviceMetadata successfully', function(done) {
        //uncomment below and update the code to test updateDeviceMetadata
        //instance.updateDeviceMetadata(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
