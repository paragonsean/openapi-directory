/**
 * Amazon S3 on Outposts
 * Amazon S3 on Outposts provides access to S3 on Outposts operations.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutpost.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutpost::OAIOutpost(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutpost::OAIOutpost() {
    this->initializeModel();
}

OAIOutpost::~OAIOutpost() {}

void OAIOutpost::initializeModel() {

    m_outpost_arn_isSet = false;
    m_outpost_arn_isValid = false;

    m_outpost_id_isSet = false;
    m_outpost_id_isValid = false;

    m_owner_id_isSet = false;
    m_owner_id_isValid = false;

    m_capacity_in_bytes_isSet = false;
    m_capacity_in_bytes_isValid = false;
}

void OAIOutpost::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutpost::fromJsonObject(QJsonObject json) {

    m_outpost_arn_isValid = ::OpenAPI::fromJsonValue(m_outpost_arn, json[QString("OutpostArn")]);
    m_outpost_arn_isSet = !json[QString("OutpostArn")].isNull() && m_outpost_arn_isValid;

    m_outpost_id_isValid = ::OpenAPI::fromJsonValue(m_outpost_id, json[QString("OutpostId")]);
    m_outpost_id_isSet = !json[QString("OutpostId")].isNull() && m_outpost_id_isValid;

    m_owner_id_isValid = ::OpenAPI::fromJsonValue(m_owner_id, json[QString("OwnerId")]);
    m_owner_id_isSet = !json[QString("OwnerId")].isNull() && m_owner_id_isValid;

    m_capacity_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_capacity_in_bytes, json[QString("CapacityInBytes")]);
    m_capacity_in_bytes_isSet = !json[QString("CapacityInBytes")].isNull() && m_capacity_in_bytes_isValid;
}

QString OAIOutpost::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutpost::asJsonObject() const {
    QJsonObject obj;
    if (m_outpost_arn_isSet) {
        obj.insert(QString("OutpostArn"), ::OpenAPI::toJsonValue(m_outpost_arn));
    }
    if (m_outpost_id_isSet) {
        obj.insert(QString("OutpostId"), ::OpenAPI::toJsonValue(m_outpost_id));
    }
    if (m_owner_id_isSet) {
        obj.insert(QString("OwnerId"), ::OpenAPI::toJsonValue(m_owner_id));
    }
    if (m_capacity_in_bytes_isSet) {
        obj.insert(QString("CapacityInBytes"), ::OpenAPI::toJsonValue(m_capacity_in_bytes));
    }
    return obj;
}

QString OAIOutpost::getOutpostArn() const {
    return m_outpost_arn;
}
void OAIOutpost::setOutpostArn(const QString &outpost_arn) {
    m_outpost_arn = outpost_arn;
    m_outpost_arn_isSet = true;
}

bool OAIOutpost::is_outpost_arn_Set() const{
    return m_outpost_arn_isSet;
}

bool OAIOutpost::is_outpost_arn_Valid() const{
    return m_outpost_arn_isValid;
}

QString OAIOutpost::getOutpostId() const {
    return m_outpost_id;
}
void OAIOutpost::setOutpostId(const QString &outpost_id) {
    m_outpost_id = outpost_id;
    m_outpost_id_isSet = true;
}

bool OAIOutpost::is_outpost_id_Set() const{
    return m_outpost_id_isSet;
}

bool OAIOutpost::is_outpost_id_Valid() const{
    return m_outpost_id_isValid;
}

QString OAIOutpost::getOwnerId() const {
    return m_owner_id;
}
void OAIOutpost::setOwnerId(const QString &owner_id) {
    m_owner_id = owner_id;
    m_owner_id_isSet = true;
}

bool OAIOutpost::is_owner_id_Set() const{
    return m_owner_id_isSet;
}

bool OAIOutpost::is_owner_id_Valid() const{
    return m_owner_id_isValid;
}

qint32 OAIOutpost::getCapacityInBytes() const {
    return m_capacity_in_bytes;
}
void OAIOutpost::setCapacityInBytes(const qint32 &capacity_in_bytes) {
    m_capacity_in_bytes = capacity_in_bytes;
    m_capacity_in_bytes_isSet = true;
}

bool OAIOutpost::is_capacity_in_bytes_Set() const{
    return m_capacity_in_bytes_isSet;
}

bool OAIOutpost::is_capacity_in_bytes_Valid() const{
    return m_capacity_in_bytes_isValid;
}

bool OAIOutpost::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_outpost_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outpost_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutpost::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
