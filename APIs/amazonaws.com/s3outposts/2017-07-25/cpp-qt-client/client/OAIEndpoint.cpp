/**
 * Amazon S3 on Outposts
 * Amazon S3 on Outposts provides access to S3 on Outposts operations.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndpoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndpoint::OAIEndpoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndpoint::OAIEndpoint() {
    this->initializeModel();
}

OAIEndpoint::~OAIEndpoint() {}

void OAIEndpoint::initializeModel() {

    m_endpoint_arn_isSet = false;
    m_endpoint_arn_isValid = false;

    m_outposts_id_isSet = false;
    m_outposts_id_isValid = false;

    m_cidr_block_isSet = false;
    m_cidr_block_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_network_interfaces_isSet = false;
    m_network_interfaces_isValid = false;

    m_vpc_id_isSet = false;
    m_vpc_id_isValid = false;

    m_subnet_id_isSet = false;
    m_subnet_id_isValid = false;

    m_security_group_id_isSet = false;
    m_security_group_id_isValid = false;

    m_access_type_isSet = false;
    m_access_type_isValid = false;

    m_customer_owned_ipv4_pool_isSet = false;
    m_customer_owned_ipv4_pool_isValid = false;

    m_failed_reason_isSet = false;
    m_failed_reason_isValid = false;
}

void OAIEndpoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndpoint::fromJsonObject(QJsonObject json) {

    m_endpoint_arn_isValid = ::OpenAPI::fromJsonValue(m_endpoint_arn, json[QString("EndpointArn")]);
    m_endpoint_arn_isSet = !json[QString("EndpointArn")].isNull() && m_endpoint_arn_isValid;

    m_outposts_id_isValid = ::OpenAPI::fromJsonValue(m_outposts_id, json[QString("OutpostsId")]);
    m_outposts_id_isSet = !json[QString("OutpostsId")].isNull() && m_outposts_id_isValid;

    m_cidr_block_isValid = ::OpenAPI::fromJsonValue(m_cidr_block, json[QString("CidrBlock")]);
    m_cidr_block_isSet = !json[QString("CidrBlock")].isNull() && m_cidr_block_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_network_interfaces_isValid = ::OpenAPI::fromJsonValue(m_network_interfaces, json[QString("NetworkInterfaces")]);
    m_network_interfaces_isSet = !json[QString("NetworkInterfaces")].isNull() && m_network_interfaces_isValid;

    m_vpc_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_id, json[QString("VpcId")]);
    m_vpc_id_isSet = !json[QString("VpcId")].isNull() && m_vpc_id_isValid;

    m_subnet_id_isValid = ::OpenAPI::fromJsonValue(m_subnet_id, json[QString("SubnetId")]);
    m_subnet_id_isSet = !json[QString("SubnetId")].isNull() && m_subnet_id_isValid;

    m_security_group_id_isValid = ::OpenAPI::fromJsonValue(m_security_group_id, json[QString("SecurityGroupId")]);
    m_security_group_id_isSet = !json[QString("SecurityGroupId")].isNull() && m_security_group_id_isValid;

    m_access_type_isValid = ::OpenAPI::fromJsonValue(m_access_type, json[QString("AccessType")]);
    m_access_type_isSet = !json[QString("AccessType")].isNull() && m_access_type_isValid;

    m_customer_owned_ipv4_pool_isValid = ::OpenAPI::fromJsonValue(m_customer_owned_ipv4_pool, json[QString("CustomerOwnedIpv4Pool")]);
    m_customer_owned_ipv4_pool_isSet = !json[QString("CustomerOwnedIpv4Pool")].isNull() && m_customer_owned_ipv4_pool_isValid;

    m_failed_reason_isValid = ::OpenAPI::fromJsonValue(m_failed_reason, json[QString("FailedReason")]);
    m_failed_reason_isSet = !json[QString("FailedReason")].isNull() && m_failed_reason_isValid;
}

QString OAIEndpoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndpoint::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoint_arn_isSet) {
        obj.insert(QString("EndpointArn"), ::OpenAPI::toJsonValue(m_endpoint_arn));
    }
    if (m_outposts_id_isSet) {
        obj.insert(QString("OutpostsId"), ::OpenAPI::toJsonValue(m_outposts_id));
    }
    if (m_cidr_block_isSet) {
        obj.insert(QString("CidrBlock"), ::OpenAPI::toJsonValue(m_cidr_block));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_network_interfaces.isSet()) {
        obj.insert(QString("NetworkInterfaces"), ::OpenAPI::toJsonValue(m_network_interfaces));
    }
    if (m_vpc_id_isSet) {
        obj.insert(QString("VpcId"), ::OpenAPI::toJsonValue(m_vpc_id));
    }
    if (m_subnet_id_isSet) {
        obj.insert(QString("SubnetId"), ::OpenAPI::toJsonValue(m_subnet_id));
    }
    if (m_security_group_id_isSet) {
        obj.insert(QString("SecurityGroupId"), ::OpenAPI::toJsonValue(m_security_group_id));
    }
    if (m_access_type.isSet()) {
        obj.insert(QString("AccessType"), ::OpenAPI::toJsonValue(m_access_type));
    }
    if (m_customer_owned_ipv4_pool_isSet) {
        obj.insert(QString("CustomerOwnedIpv4Pool"), ::OpenAPI::toJsonValue(m_customer_owned_ipv4_pool));
    }
    if (m_failed_reason.isSet()) {
        obj.insert(QString("FailedReason"), ::OpenAPI::toJsonValue(m_failed_reason));
    }
    return obj;
}

QString OAIEndpoint::getEndpointArn() const {
    return m_endpoint_arn;
}
void OAIEndpoint::setEndpointArn(const QString &endpoint_arn) {
    m_endpoint_arn = endpoint_arn;
    m_endpoint_arn_isSet = true;
}

bool OAIEndpoint::is_endpoint_arn_Set() const{
    return m_endpoint_arn_isSet;
}

bool OAIEndpoint::is_endpoint_arn_Valid() const{
    return m_endpoint_arn_isValid;
}

QString OAIEndpoint::getOutpostsId() const {
    return m_outposts_id;
}
void OAIEndpoint::setOutpostsId(const QString &outposts_id) {
    m_outposts_id = outposts_id;
    m_outposts_id_isSet = true;
}

bool OAIEndpoint::is_outposts_id_Set() const{
    return m_outposts_id_isSet;
}

bool OAIEndpoint::is_outposts_id_Valid() const{
    return m_outposts_id_isValid;
}

QString OAIEndpoint::getCidrBlock() const {
    return m_cidr_block;
}
void OAIEndpoint::setCidrBlock(const QString &cidr_block) {
    m_cidr_block = cidr_block;
    m_cidr_block_isSet = true;
}

bool OAIEndpoint::is_cidr_block_Set() const{
    return m_cidr_block_isSet;
}

bool OAIEndpoint::is_cidr_block_Valid() const{
    return m_cidr_block_isValid;
}

OAIEndpointStatus OAIEndpoint::getStatus() const {
    return m_status;
}
void OAIEndpoint::setStatus(const OAIEndpointStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIEndpoint::is_status_Set() const{
    return m_status_isSet;
}

bool OAIEndpoint::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIEndpoint::getCreationTime() const {
    return m_creation_time;
}
void OAIEndpoint::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIEndpoint::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIEndpoint::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QList OAIEndpoint::getNetworkInterfaces() const {
    return m_network_interfaces;
}
void OAIEndpoint::setNetworkInterfaces(const QList &network_interfaces) {
    m_network_interfaces = network_interfaces;
    m_network_interfaces_isSet = true;
}

bool OAIEndpoint::is_network_interfaces_Set() const{
    return m_network_interfaces_isSet;
}

bool OAIEndpoint::is_network_interfaces_Valid() const{
    return m_network_interfaces_isValid;
}

QString OAIEndpoint::getVpcId() const {
    return m_vpc_id;
}
void OAIEndpoint::setVpcId(const QString &vpc_id) {
    m_vpc_id = vpc_id;
    m_vpc_id_isSet = true;
}

bool OAIEndpoint::is_vpc_id_Set() const{
    return m_vpc_id_isSet;
}

bool OAIEndpoint::is_vpc_id_Valid() const{
    return m_vpc_id_isValid;
}

QString OAIEndpoint::getSubnetId() const {
    return m_subnet_id;
}
void OAIEndpoint::setSubnetId(const QString &subnet_id) {
    m_subnet_id = subnet_id;
    m_subnet_id_isSet = true;
}

bool OAIEndpoint::is_subnet_id_Set() const{
    return m_subnet_id_isSet;
}

bool OAIEndpoint::is_subnet_id_Valid() const{
    return m_subnet_id_isValid;
}

QString OAIEndpoint::getSecurityGroupId() const {
    return m_security_group_id;
}
void OAIEndpoint::setSecurityGroupId(const QString &security_group_id) {
    m_security_group_id = security_group_id;
    m_security_group_id_isSet = true;
}

bool OAIEndpoint::is_security_group_id_Set() const{
    return m_security_group_id_isSet;
}

bool OAIEndpoint::is_security_group_id_Valid() const{
    return m_security_group_id_isValid;
}

OAIEndpointAccessType OAIEndpoint::getAccessType() const {
    return m_access_type;
}
void OAIEndpoint::setAccessType(const OAIEndpointAccessType &access_type) {
    m_access_type = access_type;
    m_access_type_isSet = true;
}

bool OAIEndpoint::is_access_type_Set() const{
    return m_access_type_isSet;
}

bool OAIEndpoint::is_access_type_Valid() const{
    return m_access_type_isValid;
}

QString OAIEndpoint::getCustomerOwnedIpv4Pool() const {
    return m_customer_owned_ipv4_pool;
}
void OAIEndpoint::setCustomerOwnedIpv4Pool(const QString &customer_owned_ipv4_pool) {
    m_customer_owned_ipv4_pool = customer_owned_ipv4_pool;
    m_customer_owned_ipv4_pool_isSet = true;
}

bool OAIEndpoint::is_customer_owned_ipv4_pool_Set() const{
    return m_customer_owned_ipv4_pool_isSet;
}

bool OAIEndpoint::is_customer_owned_ipv4_pool_Valid() const{
    return m_customer_owned_ipv4_pool_isValid;
}

OAIEndpoint_FailedReason OAIEndpoint::getFailedReason() const {
    return m_failed_reason;
}
void OAIEndpoint::setFailedReason(const OAIEndpoint_FailedReason &failed_reason) {
    m_failed_reason = failed_reason;
    m_failed_reason_isSet = true;
}

bool OAIEndpoint::is_failed_reason_Set() const{
    return m_failed_reason_isSet;
}

bool OAIEndpoint::is_failed_reason_Valid() const{
    return m_failed_reason_isValid;
}

bool OAIEndpoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoint_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outposts_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cidr_block_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_interfaces.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_owned_ipv4_pool_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndpoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
