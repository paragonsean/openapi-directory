/**
 * Amazon S3 on Outposts
 * Amazon S3 on Outposts provides access to S3 on Outposts operations.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateEndpoint_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateEndpoint_request::OAICreateEndpoint_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateEndpoint_request::OAICreateEndpoint_request() {
    this->initializeModel();
}

OAICreateEndpoint_request::~OAICreateEndpoint_request() {}

void OAICreateEndpoint_request::initializeModel() {

    m_outpost_id_isSet = false;
    m_outpost_id_isValid = false;

    m_subnet_id_isSet = false;
    m_subnet_id_isValid = false;

    m_security_group_id_isSet = false;
    m_security_group_id_isValid = false;

    m_access_type_isSet = false;
    m_access_type_isValid = false;

    m_customer_owned_ipv4_pool_isSet = false;
    m_customer_owned_ipv4_pool_isValid = false;
}

void OAICreateEndpoint_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateEndpoint_request::fromJsonObject(QJsonObject json) {

    m_outpost_id_isValid = ::OpenAPI::fromJsonValue(m_outpost_id, json[QString("OutpostId")]);
    m_outpost_id_isSet = !json[QString("OutpostId")].isNull() && m_outpost_id_isValid;

    m_subnet_id_isValid = ::OpenAPI::fromJsonValue(m_subnet_id, json[QString("SubnetId")]);
    m_subnet_id_isSet = !json[QString("SubnetId")].isNull() && m_subnet_id_isValid;

    m_security_group_id_isValid = ::OpenAPI::fromJsonValue(m_security_group_id, json[QString("SecurityGroupId")]);
    m_security_group_id_isSet = !json[QString("SecurityGroupId")].isNull() && m_security_group_id_isValid;

    m_access_type_isValid = ::OpenAPI::fromJsonValue(m_access_type, json[QString("AccessType")]);
    m_access_type_isSet = !json[QString("AccessType")].isNull() && m_access_type_isValid;

    m_customer_owned_ipv4_pool_isValid = ::OpenAPI::fromJsonValue(m_customer_owned_ipv4_pool, json[QString("CustomerOwnedIpv4Pool")]);
    m_customer_owned_ipv4_pool_isSet = !json[QString("CustomerOwnedIpv4Pool")].isNull() && m_customer_owned_ipv4_pool_isValid;
}

QString OAICreateEndpoint_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateEndpoint_request::asJsonObject() const {
    QJsonObject obj;
    if (m_outpost_id_isSet) {
        obj.insert(QString("OutpostId"), ::OpenAPI::toJsonValue(m_outpost_id));
    }
    if (m_subnet_id_isSet) {
        obj.insert(QString("SubnetId"), ::OpenAPI::toJsonValue(m_subnet_id));
    }
    if (m_security_group_id_isSet) {
        obj.insert(QString("SecurityGroupId"), ::OpenAPI::toJsonValue(m_security_group_id));
    }
    if (m_access_type_isSet) {
        obj.insert(QString("AccessType"), ::OpenAPI::toJsonValue(m_access_type));
    }
    if (m_customer_owned_ipv4_pool_isSet) {
        obj.insert(QString("CustomerOwnedIpv4Pool"), ::OpenAPI::toJsonValue(m_customer_owned_ipv4_pool));
    }
    return obj;
}

QString OAICreateEndpoint_request::getOutpostId() const {
    return m_outpost_id;
}
void OAICreateEndpoint_request::setOutpostId(const QString &outpost_id) {
    m_outpost_id = outpost_id;
    m_outpost_id_isSet = true;
}

bool OAICreateEndpoint_request::is_outpost_id_Set() const{
    return m_outpost_id_isSet;
}

bool OAICreateEndpoint_request::is_outpost_id_Valid() const{
    return m_outpost_id_isValid;
}

QString OAICreateEndpoint_request::getSubnetId() const {
    return m_subnet_id;
}
void OAICreateEndpoint_request::setSubnetId(const QString &subnet_id) {
    m_subnet_id = subnet_id;
    m_subnet_id_isSet = true;
}

bool OAICreateEndpoint_request::is_subnet_id_Set() const{
    return m_subnet_id_isSet;
}

bool OAICreateEndpoint_request::is_subnet_id_Valid() const{
    return m_subnet_id_isValid;
}

QString OAICreateEndpoint_request::getSecurityGroupId() const {
    return m_security_group_id;
}
void OAICreateEndpoint_request::setSecurityGroupId(const QString &security_group_id) {
    m_security_group_id = security_group_id;
    m_security_group_id_isSet = true;
}

bool OAICreateEndpoint_request::is_security_group_id_Set() const{
    return m_security_group_id_isSet;
}

bool OAICreateEndpoint_request::is_security_group_id_Valid() const{
    return m_security_group_id_isValid;
}

QString OAICreateEndpoint_request::getAccessType() const {
    return m_access_type;
}
void OAICreateEndpoint_request::setAccessType(const QString &access_type) {
    m_access_type = access_type;
    m_access_type_isSet = true;
}

bool OAICreateEndpoint_request::is_access_type_Set() const{
    return m_access_type_isSet;
}

bool OAICreateEndpoint_request::is_access_type_Valid() const{
    return m_access_type_isValid;
}

QString OAICreateEndpoint_request::getCustomerOwnedIpv4Pool() const {
    return m_customer_owned_ipv4_pool;
}
void OAICreateEndpoint_request::setCustomerOwnedIpv4Pool(const QString &customer_owned_ipv4_pool) {
    m_customer_owned_ipv4_pool = customer_owned_ipv4_pool;
    m_customer_owned_ipv4_pool_isSet = true;
}

bool OAICreateEndpoint_request::is_customer_owned_ipv4_pool_Set() const{
    return m_customer_owned_ipv4_pool_isSet;
}

bool OAICreateEndpoint_request::is_customer_owned_ipv4_pool_Valid() const{
    return m_customer_owned_ipv4_pool_isValid;
}

bool OAICreateEndpoint_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_outpost_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_owned_ipv4_pool_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateEndpoint_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_outpost_id_isValid && m_subnet_id_isValid && m_security_group_id_isValid && true;
}

} // namespace OpenAPI
