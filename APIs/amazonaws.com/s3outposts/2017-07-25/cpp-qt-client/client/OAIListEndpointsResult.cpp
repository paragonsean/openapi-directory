/**
 * Amazon S3 on Outposts
 * Amazon S3 on Outposts provides access to S3 on Outposts operations.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListEndpointsResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListEndpointsResult::OAIListEndpointsResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListEndpointsResult::OAIListEndpointsResult() {
    this->initializeModel();
}

OAIListEndpointsResult::~OAIListEndpointsResult() {}

void OAIListEndpointsResult::initializeModel() {

    m_endpoints_isSet = false;
    m_endpoints_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListEndpointsResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListEndpointsResult::fromJsonObject(QJsonObject json) {

    m_endpoints_isValid = ::OpenAPI::fromJsonValue(m_endpoints, json[QString("Endpoints")]);
    m_endpoints_isSet = !json[QString("Endpoints")].isNull() && m_endpoints_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListEndpointsResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListEndpointsResult::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoints.isSet()) {
        obj.insert(QString("Endpoints"), ::OpenAPI::toJsonValue(m_endpoints));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListEndpointsResult::getEndpoints() const {
    return m_endpoints;
}
void OAIListEndpointsResult::setEndpoints(const QList &endpoints) {
    m_endpoints = endpoints;
    m_endpoints_isSet = true;
}

bool OAIListEndpointsResult::is_endpoints_Set() const{
    return m_endpoints_isSet;
}

bool OAIListEndpointsResult::is_endpoints_Valid() const{
    return m_endpoints_isValid;
}

QString OAIListEndpointsResult::getNextToken() const {
    return m_next_token;
}
void OAIListEndpointsResult::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListEndpointsResult::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListEndpointsResult::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListEndpointsResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListEndpointsResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
