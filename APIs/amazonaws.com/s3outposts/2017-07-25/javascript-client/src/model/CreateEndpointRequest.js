/**
 * Amazon S3 on Outposts
 * Amazon S3 on Outposts provides access to S3 on Outposts operations.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateEndpointRequest model module.
 * @module model/CreateEndpointRequest
 * @version 2017-07-25
 */
class CreateEndpointRequest {
    /**
     * Constructs a new <code>CreateEndpointRequest</code>.
     * @alias module:model/CreateEndpointRequest
     * @param outpostId {String} The ID of the Outposts. 
     * @param subnetId {String} The ID of the subnet in the selected VPC. The endpoint subnet must belong to the Outpost that has Amazon S3 on Outposts provisioned.
     * @param securityGroupId {String} The ID of the security group to use with the endpoint.
     */
    constructor(outpostId, subnetId, securityGroupId) { 
        
        CreateEndpointRequest.initialize(this, outpostId, subnetId, securityGroupId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, outpostId, subnetId, securityGroupId) { 
        obj['OutpostId'] = outpostId;
        obj['SubnetId'] = subnetId;
        obj['SecurityGroupId'] = securityGroupId;
    }

    /**
     * Constructs a <code>CreateEndpointRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateEndpointRequest} obj Optional instance to populate.
     * @return {module:model/CreateEndpointRequest} The populated <code>CreateEndpointRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateEndpointRequest();

            if (data.hasOwnProperty('OutpostId')) {
                obj['OutpostId'] = ApiClient.convertToType(data['OutpostId'], 'String');
            }
            if (data.hasOwnProperty('SubnetId')) {
                obj['SubnetId'] = ApiClient.convertToType(data['SubnetId'], 'String');
            }
            if (data.hasOwnProperty('SecurityGroupId')) {
                obj['SecurityGroupId'] = ApiClient.convertToType(data['SecurityGroupId'], 'String');
            }
            if (data.hasOwnProperty('AccessType')) {
                obj['AccessType'] = ApiClient.convertToType(data['AccessType'], 'String');
            }
            if (data.hasOwnProperty('CustomerOwnedIpv4Pool')) {
                obj['CustomerOwnedIpv4Pool'] = ApiClient.convertToType(data['CustomerOwnedIpv4Pool'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateEndpointRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateEndpointRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateEndpointRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['OutpostId'] && !(typeof data['OutpostId'] === 'string' || data['OutpostId'] instanceof String)) {
            throw new Error("Expected the field `OutpostId` to be a primitive type in the JSON string but got " + data['OutpostId']);
        }
        // ensure the json data is a string
        if (data['SubnetId'] && !(typeof data['SubnetId'] === 'string' || data['SubnetId'] instanceof String)) {
            throw new Error("Expected the field `SubnetId` to be a primitive type in the JSON string but got " + data['SubnetId']);
        }
        // ensure the json data is a string
        if (data['SecurityGroupId'] && !(typeof data['SecurityGroupId'] === 'string' || data['SecurityGroupId'] instanceof String)) {
            throw new Error("Expected the field `SecurityGroupId` to be a primitive type in the JSON string but got " + data['SecurityGroupId']);
        }
        // ensure the json data is a string
        if (data['AccessType'] && !(typeof data['AccessType'] === 'string' || data['AccessType'] instanceof String)) {
            throw new Error("Expected the field `AccessType` to be a primitive type in the JSON string but got " + data['AccessType']);
        }
        // ensure the json data is a string
        if (data['CustomerOwnedIpv4Pool'] && !(typeof data['CustomerOwnedIpv4Pool'] === 'string' || data['CustomerOwnedIpv4Pool'] instanceof String)) {
            throw new Error("Expected the field `CustomerOwnedIpv4Pool` to be a primitive type in the JSON string but got " + data['CustomerOwnedIpv4Pool']);
        }

        return true;
    }


}

CreateEndpointRequest.RequiredProperties = ["OutpostId", "SubnetId", "SecurityGroupId"];

/**
 * The ID of the Outposts. 
 * @member {String} OutpostId
 */
CreateEndpointRequest.prototype['OutpostId'] = undefined;

/**
 * The ID of the subnet in the selected VPC. The endpoint subnet must belong to the Outpost that has Amazon S3 on Outposts provisioned.
 * @member {String} SubnetId
 */
CreateEndpointRequest.prototype['SubnetId'] = undefined;

/**
 * The ID of the security group to use with the endpoint.
 * @member {String} SecurityGroupId
 */
CreateEndpointRequest.prototype['SecurityGroupId'] = undefined;

/**
 * <p>The type of access for the network connectivity for the Amazon S3 on Outposts endpoint. To use the Amazon Web Services VPC, choose <code>Private</code>. To use the endpoint with an on-premises network, choose <code>CustomerOwnedIp</code>. If you choose <code>CustomerOwnedIp</code>, you must also provide the customer-owned IP address pool (CoIP pool).</p> <note> <p> <code>Private</code> is the default access type value.</p> </note>
 * @member {module:model/CreateEndpointRequest.AccessTypeEnum} AccessType
 */
CreateEndpointRequest.prototype['AccessType'] = undefined;

/**
 * The ID of the customer-owned IPv4 address pool (CoIP pool) for the endpoint. IP addresses are allocated from this pool for the endpoint.
 * @member {String} CustomerOwnedIpv4Pool
 */
CreateEndpointRequest.prototype['CustomerOwnedIpv4Pool'] = undefined;





/**
 * Allowed values for the <code>AccessType</code> property.
 * @enum {String}
 * @readonly
 */
CreateEndpointRequest['AccessTypeEnum'] = {

    /**
     * value: "Private"
     * @const
     */
    "Private": "Private",

    /**
     * value: "CustomerOwnedIp"
     * @const
     */
    "CustomerOwnedIp": "CustomerOwnedIp"
};



export default CreateEndpointRequest;

