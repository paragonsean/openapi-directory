/**
 * Amazon S3 on Outposts
 * Amazon S3 on Outposts provides access to S3 on Outposts operations.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonS3OnOutposts);
  }
}(this, function(expect, AmazonS3OnOutposts) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonS3OnOutposts.CreateEndpointRequest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CreateEndpointRequest', function() {
    it('should create an instance of CreateEndpointRequest', function() {
      // uncomment below and update the code to test CreateEndpointRequest
      //var instance = new AmazonS3OnOutposts.CreateEndpointRequest();
      //expect(instance).to.be.a(AmazonS3OnOutposts.CreateEndpointRequest);
    });

    it('should have the property outpostId (base name: "OutpostId")', function() {
      // uncomment below and update the code to test the property outpostId
      //var instance = new AmazonS3OnOutposts.CreateEndpointRequest();
      //expect(instance).to.be();
    });

    it('should have the property subnetId (base name: "SubnetId")', function() {
      // uncomment below and update the code to test the property subnetId
      //var instance = new AmazonS3OnOutposts.CreateEndpointRequest();
      //expect(instance).to.be();
    });

    it('should have the property securityGroupId (base name: "SecurityGroupId")', function() {
      // uncomment below and update the code to test the property securityGroupId
      //var instance = new AmazonS3OnOutposts.CreateEndpointRequest();
      //expect(instance).to.be();
    });

    it('should have the property accessType (base name: "AccessType")', function() {
      // uncomment below and update the code to test the property accessType
      //var instance = new AmazonS3OnOutposts.CreateEndpointRequest();
      //expect(instance).to.be();
    });

    it('should have the property customerOwnedIpv4Pool (base name: "CustomerOwnedIpv4Pool")', function() {
      // uncomment below and update the code to test the property customerOwnedIpv4Pool
      //var instance = new AmazonS3OnOutposts.CreateEndpointRequest();
      //expect(instance).to.be();
    });

  });

}));
