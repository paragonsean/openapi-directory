# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateEndpointRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, outpost_id: str=None, subnet_id: str=None, security_group_id: str=None, access_type: str=None, customer_owned_ipv4_pool: str=None):
        """CreateEndpointRequest - a model defined in OpenAPI

        :param outpost_id: The outpost_id of this CreateEndpointRequest.
        :param subnet_id: The subnet_id of this CreateEndpointRequest.
        :param security_group_id: The security_group_id of this CreateEndpointRequest.
        :param access_type: The access_type of this CreateEndpointRequest.
        :param customer_owned_ipv4_pool: The customer_owned_ipv4_pool of this CreateEndpointRequest.
        """
        self.openapi_types = {
            'outpost_id': str,
            'subnet_id': str,
            'security_group_id': str,
            'access_type': str,
            'customer_owned_ipv4_pool': str
        }

        self.attribute_map = {
            'outpost_id': 'OutpostId',
            'subnet_id': 'SubnetId',
            'security_group_id': 'SecurityGroupId',
            'access_type': 'AccessType',
            'customer_owned_ipv4_pool': 'CustomerOwnedIpv4Pool'
        }

        self._outpost_id = outpost_id
        self._subnet_id = subnet_id
        self._security_group_id = security_group_id
        self._access_type = access_type
        self._customer_owned_ipv4_pool = customer_owned_ipv4_pool

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateEndpointRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateEndpoint_request of this CreateEndpointRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def outpost_id(self):
        """Gets the outpost_id of this CreateEndpointRequest.

        The ID of the Outposts. 

        :return: The outpost_id of this CreateEndpointRequest.
        :rtype: str
        """
        return self._outpost_id

    @outpost_id.setter
    def outpost_id(self, outpost_id):
        """Sets the outpost_id of this CreateEndpointRequest.

        The ID of the Outposts. 

        :param outpost_id: The outpost_id of this CreateEndpointRequest.
        :type outpost_id: str
        """
        if outpost_id is None:
            raise ValueError("Invalid value for `outpost_id`, must not be `None`")
        if outpost_id is not None and not re.search(r'^(op-[a-f0-9]{17}|\d{12}|ec2)$', outpost_id):
            raise ValueError("Invalid value for `outpost_id`, must be a follow pattern or equal to `/^(op-[a-f0-9]{17}|\d{12}|ec2)$/`")

        self._outpost_id = outpost_id

    @property
    def subnet_id(self):
        """Gets the subnet_id of this CreateEndpointRequest.

        The ID of the subnet in the selected VPC. The endpoint subnet must belong to the Outpost that has Amazon S3 on Outposts provisioned.

        :return: The subnet_id of this CreateEndpointRequest.
        :rtype: str
        """
        return self._subnet_id

    @subnet_id.setter
    def subnet_id(self, subnet_id):
        """Sets the subnet_id of this CreateEndpointRequest.

        The ID of the subnet in the selected VPC. The endpoint subnet must belong to the Outpost that has Amazon S3 on Outposts provisioned.

        :param subnet_id: The subnet_id of this CreateEndpointRequest.
        :type subnet_id: str
        """
        if subnet_id is None:
            raise ValueError("Invalid value for `subnet_id`, must not be `None`")
        if subnet_id is not None and not re.search(r'^subnet-([0-9a-f]{8}|[0-9a-f]{17})$', subnet_id):
            raise ValueError("Invalid value for `subnet_id`, must be a follow pattern or equal to `/^subnet-([0-9a-f]{8}|[0-9a-f]{17})$/`")

        self._subnet_id = subnet_id

    @property
    def security_group_id(self):
        """Gets the security_group_id of this CreateEndpointRequest.

        The ID of the security group to use with the endpoint.

        :return: The security_group_id of this CreateEndpointRequest.
        :rtype: str
        """
        return self._security_group_id

    @security_group_id.setter
    def security_group_id(self, security_group_id):
        """Sets the security_group_id of this CreateEndpointRequest.

        The ID of the security group to use with the endpoint.

        :param security_group_id: The security_group_id of this CreateEndpointRequest.
        :type security_group_id: str
        """
        if security_group_id is None:
            raise ValueError("Invalid value for `security_group_id`, must not be `None`")
        if security_group_id is not None and not re.search(r'^sg-([0-9a-f]{8}|[0-9a-f]{17})$', security_group_id):
            raise ValueError("Invalid value for `security_group_id`, must be a follow pattern or equal to `/^sg-([0-9a-f]{8}|[0-9a-f]{17})$/`")

        self._security_group_id = security_group_id

    @property
    def access_type(self):
        """Gets the access_type of this CreateEndpointRequest.

        <p>The type of access for the network connectivity for the Amazon S3 on Outposts endpoint. To use the Amazon Web Services VPC, choose <code>Private</code>. To use the endpoint with an on-premises network, choose <code>CustomerOwnedIp</code>. If you choose <code>CustomerOwnedIp</code>, you must also provide the customer-owned IP address pool (CoIP pool).</p> <note> <p> <code>Private</code> is the default access type value.</p> </note>

        :return: The access_type of this CreateEndpointRequest.
        :rtype: str
        """
        return self._access_type

    @access_type.setter
    def access_type(self, access_type):
        """Sets the access_type of this CreateEndpointRequest.

        <p>The type of access for the network connectivity for the Amazon S3 on Outposts endpoint. To use the Amazon Web Services VPC, choose <code>Private</code>. To use the endpoint with an on-premises network, choose <code>CustomerOwnedIp</code>. If you choose <code>CustomerOwnedIp</code>, you must also provide the customer-owned IP address pool (CoIP pool).</p> <note> <p> <code>Private</code> is the default access type value.</p> </note>

        :param access_type: The access_type of this CreateEndpointRequest.
        :type access_type: str
        """
        allowed_values = ["Private", "CustomerOwnedIp"]  # noqa: E501
        if access_type not in allowed_values:
            raise ValueError(
                "Invalid value for `access_type` ({0}), must be one of {1}"
                .format(access_type, allowed_values)
            )

        self._access_type = access_type

    @property
    def customer_owned_ipv4_pool(self):
        """Gets the customer_owned_ipv4_pool of this CreateEndpointRequest.

        The ID of the customer-owned IPv4 address pool (CoIP pool) for the endpoint. IP addresses are allocated from this pool for the endpoint.

        :return: The customer_owned_ipv4_pool of this CreateEndpointRequest.
        :rtype: str
        """
        return self._customer_owned_ipv4_pool

    @customer_owned_ipv4_pool.setter
    def customer_owned_ipv4_pool(self, customer_owned_ipv4_pool):
        """Sets the customer_owned_ipv4_pool of this CreateEndpointRequest.

        The ID of the customer-owned IPv4 address pool (CoIP pool) for the endpoint. IP addresses are allocated from this pool for the endpoint.

        :param customer_owned_ipv4_pool: The customer_owned_ipv4_pool of this CreateEndpointRequest.
        :type customer_owned_ipv4_pool: str
        """
        if customer_owned_ipv4_pool is not None and not re.search(r'^ipv4pool-coip-([0-9a-f]{17})$', customer_owned_ipv4_pool):
            raise ValueError("Invalid value for `customer_owned_ipv4_pool`, must be a follow pattern or equal to `/^ipv4pool-coip-([0-9a-f]{17})$/`")

        self._customer_owned_ipv4_pool = customer_owned_ipv4_pool
