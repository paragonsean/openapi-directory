# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.endpoint_access_type import EndpointAccessType
from openapi_server.models.endpoint_failed_reason import EndpointFailedReason
from openapi_server.models.endpoint_status import EndpointStatus
from openapi_server import util


class Endpoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, endpoint_arn: str=None, outposts_id: str=None, cidr_block: str=None, status: EndpointStatus=None, creation_time: datetime=None, network_interfaces: List=None, vpc_id: str=None, subnet_id: str=None, security_group_id: str=None, access_type: EndpointAccessType=None, customer_owned_ipv4_pool: str=None, failed_reason: EndpointFailedReason=None):
        """Endpoint - a model defined in OpenAPI

        :param endpoint_arn: The endpoint_arn of this Endpoint.
        :param outposts_id: The outposts_id of this Endpoint.
        :param cidr_block: The cidr_block of this Endpoint.
        :param status: The status of this Endpoint.
        :param creation_time: The creation_time of this Endpoint.
        :param network_interfaces: The network_interfaces of this Endpoint.
        :param vpc_id: The vpc_id of this Endpoint.
        :param subnet_id: The subnet_id of this Endpoint.
        :param security_group_id: The security_group_id of this Endpoint.
        :param access_type: The access_type of this Endpoint.
        :param customer_owned_ipv4_pool: The customer_owned_ipv4_pool of this Endpoint.
        :param failed_reason: The failed_reason of this Endpoint.
        """
        self.openapi_types = {
            'endpoint_arn': str,
            'outposts_id': str,
            'cidr_block': str,
            'status': EndpointStatus,
            'creation_time': datetime,
            'network_interfaces': List,
            'vpc_id': str,
            'subnet_id': str,
            'security_group_id': str,
            'access_type': EndpointAccessType,
            'customer_owned_ipv4_pool': str,
            'failed_reason': EndpointFailedReason
        }

        self.attribute_map = {
            'endpoint_arn': 'EndpointArn',
            'outposts_id': 'OutpostsId',
            'cidr_block': 'CidrBlock',
            'status': 'Status',
            'creation_time': 'CreationTime',
            'network_interfaces': 'NetworkInterfaces',
            'vpc_id': 'VpcId',
            'subnet_id': 'SubnetId',
            'security_group_id': 'SecurityGroupId',
            'access_type': 'AccessType',
            'customer_owned_ipv4_pool': 'CustomerOwnedIpv4Pool',
            'failed_reason': 'FailedReason'
        }

        self._endpoint_arn = endpoint_arn
        self._outposts_id = outposts_id
        self._cidr_block = cidr_block
        self._status = status
        self._creation_time = creation_time
        self._network_interfaces = network_interfaces
        self._vpc_id = vpc_id
        self._subnet_id = subnet_id
        self._security_group_id = security_group_id
        self._access_type = access_type
        self._customer_owned_ipv4_pool = customer_owned_ipv4_pool
        self._failed_reason = failed_reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Endpoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Endpoint of this Endpoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def endpoint_arn(self):
        """Gets the endpoint_arn of this Endpoint.


        :return: The endpoint_arn of this Endpoint.
        :rtype: str
        """
        return self._endpoint_arn

    @endpoint_arn.setter
    def endpoint_arn(self, endpoint_arn):
        """Sets the endpoint_arn of this Endpoint.


        :param endpoint_arn: The endpoint_arn of this Endpoint.
        :type endpoint_arn: str
        """

        self._endpoint_arn = endpoint_arn

    @property
    def outposts_id(self):
        """Gets the outposts_id of this Endpoint.


        :return: The outposts_id of this Endpoint.
        :rtype: str
        """
        return self._outposts_id

    @outposts_id.setter
    def outposts_id(self, outposts_id):
        """Sets the outposts_id of this Endpoint.


        :param outposts_id: The outposts_id of this Endpoint.
        :type outposts_id: str
        """

        self._outposts_id = outposts_id

    @property
    def cidr_block(self):
        """Gets the cidr_block of this Endpoint.


        :return: The cidr_block of this Endpoint.
        :rtype: str
        """
        return self._cidr_block

    @cidr_block.setter
    def cidr_block(self, cidr_block):
        """Sets the cidr_block of this Endpoint.


        :param cidr_block: The cidr_block of this Endpoint.
        :type cidr_block: str
        """

        self._cidr_block = cidr_block

    @property
    def status(self):
        """Gets the status of this Endpoint.


        :return: The status of this Endpoint.
        :rtype: EndpointStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Endpoint.


        :param status: The status of this Endpoint.
        :type status: EndpointStatus
        """

        self._status = status

    @property
    def creation_time(self):
        """Gets the creation_time of this Endpoint.


        :return: The creation_time of this Endpoint.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this Endpoint.


        :param creation_time: The creation_time of this Endpoint.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def network_interfaces(self):
        """Gets the network_interfaces of this Endpoint.


        :return: The network_interfaces of this Endpoint.
        :rtype: List
        """
        return self._network_interfaces

    @network_interfaces.setter
    def network_interfaces(self, network_interfaces):
        """Sets the network_interfaces of this Endpoint.


        :param network_interfaces: The network_interfaces of this Endpoint.
        :type network_interfaces: List
        """

        self._network_interfaces = network_interfaces

    @property
    def vpc_id(self):
        """Gets the vpc_id of this Endpoint.


        :return: The vpc_id of this Endpoint.
        :rtype: str
        """
        return self._vpc_id

    @vpc_id.setter
    def vpc_id(self, vpc_id):
        """Sets the vpc_id of this Endpoint.


        :param vpc_id: The vpc_id of this Endpoint.
        :type vpc_id: str
        """

        self._vpc_id = vpc_id

    @property
    def subnet_id(self):
        """Gets the subnet_id of this Endpoint.


        :return: The subnet_id of this Endpoint.
        :rtype: str
        """
        return self._subnet_id

    @subnet_id.setter
    def subnet_id(self, subnet_id):
        """Sets the subnet_id of this Endpoint.


        :param subnet_id: The subnet_id of this Endpoint.
        :type subnet_id: str
        """

        self._subnet_id = subnet_id

    @property
    def security_group_id(self):
        """Gets the security_group_id of this Endpoint.


        :return: The security_group_id of this Endpoint.
        :rtype: str
        """
        return self._security_group_id

    @security_group_id.setter
    def security_group_id(self, security_group_id):
        """Sets the security_group_id of this Endpoint.


        :param security_group_id: The security_group_id of this Endpoint.
        :type security_group_id: str
        """

        self._security_group_id = security_group_id

    @property
    def access_type(self):
        """Gets the access_type of this Endpoint.


        :return: The access_type of this Endpoint.
        :rtype: EndpointAccessType
        """
        return self._access_type

    @access_type.setter
    def access_type(self, access_type):
        """Sets the access_type of this Endpoint.


        :param access_type: The access_type of this Endpoint.
        :type access_type: EndpointAccessType
        """

        self._access_type = access_type

    @property
    def customer_owned_ipv4_pool(self):
        """Gets the customer_owned_ipv4_pool of this Endpoint.


        :return: The customer_owned_ipv4_pool of this Endpoint.
        :rtype: str
        """
        return self._customer_owned_ipv4_pool

    @customer_owned_ipv4_pool.setter
    def customer_owned_ipv4_pool(self, customer_owned_ipv4_pool):
        """Sets the customer_owned_ipv4_pool of this Endpoint.


        :param customer_owned_ipv4_pool: The customer_owned_ipv4_pool of this Endpoint.
        :type customer_owned_ipv4_pool: str
        """

        self._customer_owned_ipv4_pool = customer_owned_ipv4_pool

    @property
    def failed_reason(self):
        """Gets the failed_reason of this Endpoint.


        :return: The failed_reason of this Endpoint.
        :rtype: EndpointFailedReason
        """
        return self._failed_reason

    @failed_reason.setter
    def failed_reason(self, failed_reason):
        """Sets the failed_reason of this Endpoint.


        :param failed_reason: The failed_reason of this Endpoint.
        :type failed_reason: EndpointFailedReason
        """

        self._failed_reason = failed_reason
