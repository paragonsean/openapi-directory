/*
 * Amazon S3 on Outposts
 * Amazon S3 on Outposts provides access to S3 on Outposts operations.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateEndpointRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:15.857837-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateEndpointRequest {
  public static final String SERIALIZED_NAME_OUTPOST_ID = "OutpostId";
  @SerializedName(SERIALIZED_NAME_OUTPOST_ID)
  private String outpostId;

  public static final String SERIALIZED_NAME_SUBNET_ID = "SubnetId";
  @SerializedName(SERIALIZED_NAME_SUBNET_ID)
  private String subnetId;

  public static final String SERIALIZED_NAME_SECURITY_GROUP_ID = "SecurityGroupId";
  @SerializedName(SERIALIZED_NAME_SECURITY_GROUP_ID)
  private String securityGroupId;

  /**
   * &lt;p&gt;The type of access for the network connectivity for the Amazon S3 on Outposts endpoint. To use the Amazon Web Services VPC, choose &lt;code&gt;Private&lt;/code&gt;. To use the endpoint with an on-premises network, choose &lt;code&gt;CustomerOwnedIp&lt;/code&gt;. If you choose &lt;code&gt;CustomerOwnedIp&lt;/code&gt;, you must also provide the customer-owned IP address pool (CoIP pool).&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;Private&lt;/code&gt; is the default access type value.&lt;/p&gt; &lt;/note&gt;
   */
  @JsonAdapter(AccessTypeEnum.Adapter.class)
  public enum AccessTypeEnum {
    PRIVATE("Private"),
    
    CUSTOMER_OWNED_IP("CustomerOwnedIp");

    private String value;

    AccessTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccessTypeEnum fromValue(String value) {
      for (AccessTypeEnum b : AccessTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccessTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccessTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccessTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccessTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AccessTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCESS_TYPE = "AccessType";
  @SerializedName(SERIALIZED_NAME_ACCESS_TYPE)
  private AccessTypeEnum accessType;

  public static final String SERIALIZED_NAME_CUSTOMER_OWNED_IPV4_POOL = "CustomerOwnedIpv4Pool";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_OWNED_IPV4_POOL)
  private String customerOwnedIpv4Pool;

  public CreateEndpointRequest() {
  }

  public CreateEndpointRequest outpostId(String outpostId) {
    this.outpostId = outpostId;
    return this;
  }

  /**
   * The ID of the Outposts. 
   * @return outpostId
   */
  @javax.annotation.Nonnull
  public String getOutpostId() {
    return outpostId;
  }

  public void setOutpostId(String outpostId) {
    this.outpostId = outpostId;
  }


  public CreateEndpointRequest subnetId(String subnetId) {
    this.subnetId = subnetId;
    return this;
  }

  /**
   * The ID of the subnet in the selected VPC. The endpoint subnet must belong to the Outpost that has Amazon S3 on Outposts provisioned.
   * @return subnetId
   */
  @javax.annotation.Nonnull
  public String getSubnetId() {
    return subnetId;
  }

  public void setSubnetId(String subnetId) {
    this.subnetId = subnetId;
  }


  public CreateEndpointRequest securityGroupId(String securityGroupId) {
    this.securityGroupId = securityGroupId;
    return this;
  }

  /**
   * The ID of the security group to use with the endpoint.
   * @return securityGroupId
   */
  @javax.annotation.Nonnull
  public String getSecurityGroupId() {
    return securityGroupId;
  }

  public void setSecurityGroupId(String securityGroupId) {
    this.securityGroupId = securityGroupId;
  }


  public CreateEndpointRequest accessType(AccessTypeEnum accessType) {
    this.accessType = accessType;
    return this;
  }

  /**
   * &lt;p&gt;The type of access for the network connectivity for the Amazon S3 on Outposts endpoint. To use the Amazon Web Services VPC, choose &lt;code&gt;Private&lt;/code&gt;. To use the endpoint with an on-premises network, choose &lt;code&gt;CustomerOwnedIp&lt;/code&gt;. If you choose &lt;code&gt;CustomerOwnedIp&lt;/code&gt;, you must also provide the customer-owned IP address pool (CoIP pool).&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;Private&lt;/code&gt; is the default access type value.&lt;/p&gt; &lt;/note&gt;
   * @return accessType
   */
  @javax.annotation.Nullable
  public AccessTypeEnum getAccessType() {
    return accessType;
  }

  public void setAccessType(AccessTypeEnum accessType) {
    this.accessType = accessType;
  }


  public CreateEndpointRequest customerOwnedIpv4Pool(String customerOwnedIpv4Pool) {
    this.customerOwnedIpv4Pool = customerOwnedIpv4Pool;
    return this;
  }

  /**
   * The ID of the customer-owned IPv4 address pool (CoIP pool) for the endpoint. IP addresses are allocated from this pool for the endpoint.
   * @return customerOwnedIpv4Pool
   */
  @javax.annotation.Nullable
  public String getCustomerOwnedIpv4Pool() {
    return customerOwnedIpv4Pool;
  }

  public void setCustomerOwnedIpv4Pool(String customerOwnedIpv4Pool) {
    this.customerOwnedIpv4Pool = customerOwnedIpv4Pool;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateEndpointRequest createEndpointRequest = (CreateEndpointRequest) o;
    return Objects.equals(this.outpostId, createEndpointRequest.outpostId) &&
        Objects.equals(this.subnetId, createEndpointRequest.subnetId) &&
        Objects.equals(this.securityGroupId, createEndpointRequest.securityGroupId) &&
        Objects.equals(this.accessType, createEndpointRequest.accessType) &&
        Objects.equals(this.customerOwnedIpv4Pool, createEndpointRequest.customerOwnedIpv4Pool);
  }

  @Override
  public int hashCode() {
    return Objects.hash(outpostId, subnetId, securityGroupId, accessType, customerOwnedIpv4Pool);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateEndpointRequest {\n");
    sb.append("    outpostId: ").append(toIndentedString(outpostId)).append("\n");
    sb.append("    subnetId: ").append(toIndentedString(subnetId)).append("\n");
    sb.append("    securityGroupId: ").append(toIndentedString(securityGroupId)).append("\n");
    sb.append("    accessType: ").append(toIndentedString(accessType)).append("\n");
    sb.append("    customerOwnedIpv4Pool: ").append(toIndentedString(customerOwnedIpv4Pool)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("OutpostId");
    openapiFields.add("SubnetId");
    openapiFields.add("SecurityGroupId");
    openapiFields.add("AccessType");
    openapiFields.add("CustomerOwnedIpv4Pool");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("OutpostId");
    openapiRequiredFields.add("SubnetId");
    openapiRequiredFields.add("SecurityGroupId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateEndpointRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateEndpointRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateEndpointRequest is not found in the empty JSON string", CreateEndpointRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateEndpointRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateEndpointRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateEndpointRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("OutpostId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OutpostId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OutpostId").toString()));
      }
      if (!jsonObj.get("SubnetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SubnetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SubnetId").toString()));
      }
      if (!jsonObj.get("SecurityGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SecurityGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SecurityGroupId").toString()));
      }
      if ((jsonObj.get("AccessType") != null && !jsonObj.get("AccessType").isJsonNull()) && !jsonObj.get("AccessType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccessType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccessType").toString()));
      }
      // validate the optional field `AccessType`
      if (jsonObj.get("AccessType") != null && !jsonObj.get("AccessType").isJsonNull()) {
        AccessTypeEnum.validateJsonElement(jsonObj.get("AccessType"));
      }
      if ((jsonObj.get("CustomerOwnedIpv4Pool") != null && !jsonObj.get("CustomerOwnedIpv4Pool").isJsonNull()) && !jsonObj.get("CustomerOwnedIpv4Pool").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CustomerOwnedIpv4Pool` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CustomerOwnedIpv4Pool").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateEndpointRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateEndpointRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateEndpointRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateEndpointRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateEndpointRequest>() {
           @Override
           public void write(JsonWriter out, CreateEndpointRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateEndpointRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateEndpointRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateEndpointRequest
   * @throws IOException if the JSON string is invalid with respect to CreateEndpointRequest
   */
  public static CreateEndpointRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateEndpointRequest.class);
  }

  /**
   * Convert an instance of CreateEndpointRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

