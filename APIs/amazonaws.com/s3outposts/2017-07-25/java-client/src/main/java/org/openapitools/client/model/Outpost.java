/*
 * Amazon S3 on Outposts
 * Amazon S3 on Outposts provides access to S3 on Outposts operations.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the details for the Outpost object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:15.857837-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Outpost {
  public static final String SERIALIZED_NAME_OUTPOST_ARN = "OutpostArn";
  @SerializedName(SERIALIZED_NAME_OUTPOST_ARN)
  private String outpostArn;

  public static final String SERIALIZED_NAME_OUTPOST_ID = "OutpostId";
  @SerializedName(SERIALIZED_NAME_OUTPOST_ID)
  private String outpostId;

  public static final String SERIALIZED_NAME_OWNER_ID = "OwnerId";
  @SerializedName(SERIALIZED_NAME_OWNER_ID)
  private String ownerId;

  public static final String SERIALIZED_NAME_CAPACITY_IN_BYTES = "CapacityInBytes";
  @SerializedName(SERIALIZED_NAME_CAPACITY_IN_BYTES)
  private Integer capacityInBytes;

  public Outpost() {
  }

  public Outpost outpostArn(String outpostArn) {
    this.outpostArn = outpostArn;
    return this;
  }

  /**
   * Get outpostArn
   * @return outpostArn
   */
  @javax.annotation.Nullable
  public String getOutpostArn() {
    return outpostArn;
  }

  public void setOutpostArn(String outpostArn) {
    this.outpostArn = outpostArn;
  }


  public Outpost outpostId(String outpostId) {
    this.outpostId = outpostId;
    return this;
  }

  /**
   * Get outpostId
   * @return outpostId
   */
  @javax.annotation.Nullable
  public String getOutpostId() {
    return outpostId;
  }

  public void setOutpostId(String outpostId) {
    this.outpostId = outpostId;
  }


  public Outpost ownerId(String ownerId) {
    this.ownerId = ownerId;
    return this;
  }

  /**
   * Get ownerId
   * @return ownerId
   */
  @javax.annotation.Nullable
  public String getOwnerId() {
    return ownerId;
  }

  public void setOwnerId(String ownerId) {
    this.ownerId = ownerId;
  }


  public Outpost capacityInBytes(Integer capacityInBytes) {
    this.capacityInBytes = capacityInBytes;
    return this;
  }

  /**
   * Get capacityInBytes
   * @return capacityInBytes
   */
  @javax.annotation.Nullable
  public Integer getCapacityInBytes() {
    return capacityInBytes;
  }

  public void setCapacityInBytes(Integer capacityInBytes) {
    this.capacityInBytes = capacityInBytes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Outpost outpost = (Outpost) o;
    return Objects.equals(this.outpostArn, outpost.outpostArn) &&
        Objects.equals(this.outpostId, outpost.outpostId) &&
        Objects.equals(this.ownerId, outpost.ownerId) &&
        Objects.equals(this.capacityInBytes, outpost.capacityInBytes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(outpostArn, outpostId, ownerId, capacityInBytes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Outpost {\n");
    sb.append("    outpostArn: ").append(toIndentedString(outpostArn)).append("\n");
    sb.append("    outpostId: ").append(toIndentedString(outpostId)).append("\n");
    sb.append("    ownerId: ").append(toIndentedString(ownerId)).append("\n");
    sb.append("    capacityInBytes: ").append(toIndentedString(capacityInBytes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("OutpostArn");
    openapiFields.add("OutpostId");
    openapiFields.add("OwnerId");
    openapiFields.add("CapacityInBytes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Outpost
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Outpost.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Outpost is not found in the empty JSON string", Outpost.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Outpost.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Outpost` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `OutpostArn`
      if (jsonObj.get("OutpostArn") != null && !jsonObj.get("OutpostArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OutpostArn"));
      }
      // validate the optional field `OutpostId`
      if (jsonObj.get("OutpostId") != null && !jsonObj.get("OutpostId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OutpostId"));
      }
      // validate the optional field `OwnerId`
      if (jsonObj.get("OwnerId") != null && !jsonObj.get("OwnerId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OwnerId"));
      }
      // validate the optional field `CapacityInBytes`
      if (jsonObj.get("CapacityInBytes") != null && !jsonObj.get("CapacityInBytes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("CapacityInBytes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Outpost.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Outpost' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Outpost> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Outpost.class));

       return (TypeAdapter<T>) new TypeAdapter<Outpost>() {
           @Override
           public void write(JsonWriter out, Outpost value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Outpost read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Outpost given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Outpost
   * @throws IOException if the JSON string is invalid with respect to Outpost
   */
  public static Outpost fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Outpost.class);
  }

  /**
   * Convert an instance of Outpost to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

