/*
 * Amazon S3 on Outposts
 * Amazon S3 on Outposts provides access to S3 on Outposts operations.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EndpointAccessType;
import org.openapitools.client.model.EndpointFailedReason;
import org.openapitools.client.model.EndpointStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Amazon S3 on Outposts Access Points simplify managing data access at scale for shared datasets in S3 on Outposts. S3 on Outposts uses endpoints to connect to Outposts buckets so that you can perform actions within your virtual private cloud (VPC). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonS3/latest/userguide/WorkingWithS3Outposts.html\&quot;&gt; Accessing S3 on Outposts using VPC-only access points&lt;/a&gt; in the &lt;i&gt;Amazon Simple Storage Service User Guide&lt;/i&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:15.857837-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Endpoint {
  public static final String SERIALIZED_NAME_ENDPOINT_ARN = "EndpointArn";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_ARN)
  private String endpointArn;

  public static final String SERIALIZED_NAME_OUTPOSTS_ID = "OutpostsId";
  @SerializedName(SERIALIZED_NAME_OUTPOSTS_ID)
  private String outpostsId;

  public static final String SERIALIZED_NAME_CIDR_BLOCK = "CidrBlock";
  @SerializedName(SERIALIZED_NAME_CIDR_BLOCK)
  private String cidrBlock;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private EndpointStatus status;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_NETWORK_INTERFACES = "NetworkInterfaces";
  @SerializedName(SERIALIZED_NAME_NETWORK_INTERFACES)
  private List networkInterfaces;

  public static final String SERIALIZED_NAME_VPC_ID = "VpcId";
  @SerializedName(SERIALIZED_NAME_VPC_ID)
  private String vpcId;

  public static final String SERIALIZED_NAME_SUBNET_ID = "SubnetId";
  @SerializedName(SERIALIZED_NAME_SUBNET_ID)
  private String subnetId;

  public static final String SERIALIZED_NAME_SECURITY_GROUP_ID = "SecurityGroupId";
  @SerializedName(SERIALIZED_NAME_SECURITY_GROUP_ID)
  private String securityGroupId;

  public static final String SERIALIZED_NAME_ACCESS_TYPE = "AccessType";
  @SerializedName(SERIALIZED_NAME_ACCESS_TYPE)
  private EndpointAccessType accessType;

  public static final String SERIALIZED_NAME_CUSTOMER_OWNED_IPV4_POOL = "CustomerOwnedIpv4Pool";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_OWNED_IPV4_POOL)
  private String customerOwnedIpv4Pool;

  public static final String SERIALIZED_NAME_FAILED_REASON = "FailedReason";
  @SerializedName(SERIALIZED_NAME_FAILED_REASON)
  private EndpointFailedReason failedReason;

  public Endpoint() {
  }

  public Endpoint endpointArn(String endpointArn) {
    this.endpointArn = endpointArn;
    return this;
  }

  /**
   * Get endpointArn
   * @return endpointArn
   */
  @javax.annotation.Nullable
  public String getEndpointArn() {
    return endpointArn;
  }

  public void setEndpointArn(String endpointArn) {
    this.endpointArn = endpointArn;
  }


  public Endpoint outpostsId(String outpostsId) {
    this.outpostsId = outpostsId;
    return this;
  }

  /**
   * Get outpostsId
   * @return outpostsId
   */
  @javax.annotation.Nullable
  public String getOutpostsId() {
    return outpostsId;
  }

  public void setOutpostsId(String outpostsId) {
    this.outpostsId = outpostsId;
  }


  public Endpoint cidrBlock(String cidrBlock) {
    this.cidrBlock = cidrBlock;
    return this;
  }

  /**
   * Get cidrBlock
   * @return cidrBlock
   */
  @javax.annotation.Nullable
  public String getCidrBlock() {
    return cidrBlock;
  }

  public void setCidrBlock(String cidrBlock) {
    this.cidrBlock = cidrBlock;
  }


  public Endpoint status(EndpointStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public EndpointStatus getStatus() {
    return status;
  }

  public void setStatus(EndpointStatus status) {
    this.status = status;
  }


  public Endpoint creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public Endpoint networkInterfaces(List networkInterfaces) {
    this.networkInterfaces = networkInterfaces;
    return this;
  }

  /**
   * Get networkInterfaces
   * @return networkInterfaces
   */
  @javax.annotation.Nullable
  public List getNetworkInterfaces() {
    return networkInterfaces;
  }

  public void setNetworkInterfaces(List networkInterfaces) {
    this.networkInterfaces = networkInterfaces;
  }


  public Endpoint vpcId(String vpcId) {
    this.vpcId = vpcId;
    return this;
  }

  /**
   * Get vpcId
   * @return vpcId
   */
  @javax.annotation.Nullable
  public String getVpcId() {
    return vpcId;
  }

  public void setVpcId(String vpcId) {
    this.vpcId = vpcId;
  }


  public Endpoint subnetId(String subnetId) {
    this.subnetId = subnetId;
    return this;
  }

  /**
   * Get subnetId
   * @return subnetId
   */
  @javax.annotation.Nullable
  public String getSubnetId() {
    return subnetId;
  }

  public void setSubnetId(String subnetId) {
    this.subnetId = subnetId;
  }


  public Endpoint securityGroupId(String securityGroupId) {
    this.securityGroupId = securityGroupId;
    return this;
  }

  /**
   * Get securityGroupId
   * @return securityGroupId
   */
  @javax.annotation.Nullable
  public String getSecurityGroupId() {
    return securityGroupId;
  }

  public void setSecurityGroupId(String securityGroupId) {
    this.securityGroupId = securityGroupId;
  }


  public Endpoint accessType(EndpointAccessType accessType) {
    this.accessType = accessType;
    return this;
  }

  /**
   * Get accessType
   * @return accessType
   */
  @javax.annotation.Nullable
  public EndpointAccessType getAccessType() {
    return accessType;
  }

  public void setAccessType(EndpointAccessType accessType) {
    this.accessType = accessType;
  }


  public Endpoint customerOwnedIpv4Pool(String customerOwnedIpv4Pool) {
    this.customerOwnedIpv4Pool = customerOwnedIpv4Pool;
    return this;
  }

  /**
   * Get customerOwnedIpv4Pool
   * @return customerOwnedIpv4Pool
   */
  @javax.annotation.Nullable
  public String getCustomerOwnedIpv4Pool() {
    return customerOwnedIpv4Pool;
  }

  public void setCustomerOwnedIpv4Pool(String customerOwnedIpv4Pool) {
    this.customerOwnedIpv4Pool = customerOwnedIpv4Pool;
  }


  public Endpoint failedReason(EndpointFailedReason failedReason) {
    this.failedReason = failedReason;
    return this;
  }

  /**
   * Get failedReason
   * @return failedReason
   */
  @javax.annotation.Nullable
  public EndpointFailedReason getFailedReason() {
    return failedReason;
  }

  public void setFailedReason(EndpointFailedReason failedReason) {
    this.failedReason = failedReason;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Endpoint endpoint = (Endpoint) o;
    return Objects.equals(this.endpointArn, endpoint.endpointArn) &&
        Objects.equals(this.outpostsId, endpoint.outpostsId) &&
        Objects.equals(this.cidrBlock, endpoint.cidrBlock) &&
        Objects.equals(this.status, endpoint.status) &&
        Objects.equals(this.creationTime, endpoint.creationTime) &&
        Objects.equals(this.networkInterfaces, endpoint.networkInterfaces) &&
        Objects.equals(this.vpcId, endpoint.vpcId) &&
        Objects.equals(this.subnetId, endpoint.subnetId) &&
        Objects.equals(this.securityGroupId, endpoint.securityGroupId) &&
        Objects.equals(this.accessType, endpoint.accessType) &&
        Objects.equals(this.customerOwnedIpv4Pool, endpoint.customerOwnedIpv4Pool) &&
        Objects.equals(this.failedReason, endpoint.failedReason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endpointArn, outpostsId, cidrBlock, status, creationTime, networkInterfaces, vpcId, subnetId, securityGroupId, accessType, customerOwnedIpv4Pool, failedReason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Endpoint {\n");
    sb.append("    endpointArn: ").append(toIndentedString(endpointArn)).append("\n");
    sb.append("    outpostsId: ").append(toIndentedString(outpostsId)).append("\n");
    sb.append("    cidrBlock: ").append(toIndentedString(cidrBlock)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    networkInterfaces: ").append(toIndentedString(networkInterfaces)).append("\n");
    sb.append("    vpcId: ").append(toIndentedString(vpcId)).append("\n");
    sb.append("    subnetId: ").append(toIndentedString(subnetId)).append("\n");
    sb.append("    securityGroupId: ").append(toIndentedString(securityGroupId)).append("\n");
    sb.append("    accessType: ").append(toIndentedString(accessType)).append("\n");
    sb.append("    customerOwnedIpv4Pool: ").append(toIndentedString(customerOwnedIpv4Pool)).append("\n");
    sb.append("    failedReason: ").append(toIndentedString(failedReason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EndpointArn");
    openapiFields.add("OutpostsId");
    openapiFields.add("CidrBlock");
    openapiFields.add("Status");
    openapiFields.add("CreationTime");
    openapiFields.add("NetworkInterfaces");
    openapiFields.add("VpcId");
    openapiFields.add("SubnetId");
    openapiFields.add("SecurityGroupId");
    openapiFields.add("AccessType");
    openapiFields.add("CustomerOwnedIpv4Pool");
    openapiFields.add("FailedReason");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Endpoint
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Endpoint.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Endpoint is not found in the empty JSON string", Endpoint.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Endpoint.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Endpoint` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `EndpointArn`
      if (jsonObj.get("EndpointArn") != null && !jsonObj.get("EndpointArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EndpointArn"));
      }
      // validate the optional field `OutpostsId`
      if (jsonObj.get("OutpostsId") != null && !jsonObj.get("OutpostsId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OutpostsId"));
      }
      // validate the optional field `CidrBlock`
      if (jsonObj.get("CidrBlock") != null && !jsonObj.get("CidrBlock").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CidrBlock"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        EndpointStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
      // validate the optional field `NetworkInterfaces`
      if (jsonObj.get("NetworkInterfaces") != null && !jsonObj.get("NetworkInterfaces").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("NetworkInterfaces"));
      }
      // validate the optional field `VpcId`
      if (jsonObj.get("VpcId") != null && !jsonObj.get("VpcId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VpcId"));
      }
      // validate the optional field `SubnetId`
      if (jsonObj.get("SubnetId") != null && !jsonObj.get("SubnetId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SubnetId"));
      }
      // validate the optional field `SecurityGroupId`
      if (jsonObj.get("SecurityGroupId") != null && !jsonObj.get("SecurityGroupId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SecurityGroupId"));
      }
      // validate the optional field `AccessType`
      if (jsonObj.get("AccessType") != null && !jsonObj.get("AccessType").isJsonNull()) {
        EndpointAccessType.validateJsonElement(jsonObj.get("AccessType"));
      }
      // validate the optional field `CustomerOwnedIpv4Pool`
      if (jsonObj.get("CustomerOwnedIpv4Pool") != null && !jsonObj.get("CustomerOwnedIpv4Pool").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CustomerOwnedIpv4Pool"));
      }
      // validate the optional field `FailedReason`
      if (jsonObj.get("FailedReason") != null && !jsonObj.get("FailedReason").isJsonNull()) {
        EndpointFailedReason.validateJsonElement(jsonObj.get("FailedReason"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Endpoint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Endpoint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Endpoint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Endpoint.class));

       return (TypeAdapter<T>) new TypeAdapter<Endpoint>() {
           @Override
           public void write(JsonWriter out, Endpoint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Endpoint read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Endpoint given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Endpoint
   * @throws IOException if the JSON string is invalid with respect to Endpoint
   */
  public static Endpoint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Endpoint.class);
  }

  /**
   * Convert an instance of Endpoint to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

