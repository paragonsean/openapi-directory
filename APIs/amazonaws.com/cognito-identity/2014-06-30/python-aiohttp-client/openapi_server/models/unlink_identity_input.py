# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UnlinkIdentityInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identity_id: str=None, logins: Dict=None, logins_to_remove: List=None):
        """UnlinkIdentityInput - a model defined in OpenAPI

        :param identity_id: The identity_id of this UnlinkIdentityInput.
        :param logins: The logins of this UnlinkIdentityInput.
        :param logins_to_remove: The logins_to_remove of this UnlinkIdentityInput.
        """
        self.openapi_types = {
            'identity_id': str,
            'logins': Dict,
            'logins_to_remove': List
        }

        self.attribute_map = {
            'identity_id': 'IdentityId',
            'logins': 'Logins',
            'logins_to_remove': 'LoginsToRemove'
        }

        self._identity_id = identity_id
        self._logins = logins
        self._logins_to_remove = logins_to_remove

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UnlinkIdentityInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UnlinkIdentityInput of this UnlinkIdentityInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identity_id(self):
        """Gets the identity_id of this UnlinkIdentityInput.


        :return: The identity_id of this UnlinkIdentityInput.
        :rtype: str
        """
        return self._identity_id

    @identity_id.setter
    def identity_id(self, identity_id):
        """Sets the identity_id of this UnlinkIdentityInput.


        :param identity_id: The identity_id of this UnlinkIdentityInput.
        :type identity_id: str
        """
        if identity_id is None:
            raise ValueError("Invalid value for `identity_id`, must not be `None`")

        self._identity_id = identity_id

    @property
    def logins(self):
        """Gets the logins of this UnlinkIdentityInput.


        :return: The logins of this UnlinkIdentityInput.
        :rtype: Dict
        """
        return self._logins

    @logins.setter
    def logins(self, logins):
        """Sets the logins of this UnlinkIdentityInput.


        :param logins: The logins of this UnlinkIdentityInput.
        :type logins: Dict
        """
        if logins is None:
            raise ValueError("Invalid value for `logins`, must not be `None`")

        self._logins = logins

    @property
    def logins_to_remove(self):
        """Gets the logins_to_remove of this UnlinkIdentityInput.


        :return: The logins_to_remove of this UnlinkIdentityInput.
        :rtype: List
        """
        return self._logins_to_remove

    @logins_to_remove.setter
    def logins_to_remove(self, logins_to_remove):
        """Sets the logins_to_remove of this UnlinkIdentityInput.


        :param logins_to_remove: The logins_to_remove of this UnlinkIdentityInput.
        :type logins_to_remove: List
        """
        if logins_to_remove is None:
            raise ValueError("Invalid value for `logins_to_remove`, must not be `None`")

        self._logins_to_remove = logins_to_remove
