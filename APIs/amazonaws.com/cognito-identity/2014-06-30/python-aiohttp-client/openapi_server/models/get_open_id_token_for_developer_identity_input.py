# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetOpenIdTokenForDeveloperIdentityInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identity_pool_id: str=None, identity_id: str=None, logins: Dict=None, principal_tags: Dict=None, token_duration: int=None):
        """GetOpenIdTokenForDeveloperIdentityInput - a model defined in OpenAPI

        :param identity_pool_id: The identity_pool_id of this GetOpenIdTokenForDeveloperIdentityInput.
        :param identity_id: The identity_id of this GetOpenIdTokenForDeveloperIdentityInput.
        :param logins: The logins of this GetOpenIdTokenForDeveloperIdentityInput.
        :param principal_tags: The principal_tags of this GetOpenIdTokenForDeveloperIdentityInput.
        :param token_duration: The token_duration of this GetOpenIdTokenForDeveloperIdentityInput.
        """
        self.openapi_types = {
            'identity_pool_id': str,
            'identity_id': str,
            'logins': Dict,
            'principal_tags': Dict,
            'token_duration': int
        }

        self.attribute_map = {
            'identity_pool_id': 'IdentityPoolId',
            'identity_id': 'IdentityId',
            'logins': 'Logins',
            'principal_tags': 'PrincipalTags',
            'token_duration': 'TokenDuration'
        }

        self._identity_pool_id = identity_pool_id
        self._identity_id = identity_id
        self._logins = logins
        self._principal_tags = principal_tags
        self._token_duration = token_duration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetOpenIdTokenForDeveloperIdentityInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetOpenIdTokenForDeveloperIdentityInput of this GetOpenIdTokenForDeveloperIdentityInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identity_pool_id(self):
        """Gets the identity_pool_id of this GetOpenIdTokenForDeveloperIdentityInput.


        :return: The identity_pool_id of this GetOpenIdTokenForDeveloperIdentityInput.
        :rtype: str
        """
        return self._identity_pool_id

    @identity_pool_id.setter
    def identity_pool_id(self, identity_pool_id):
        """Sets the identity_pool_id of this GetOpenIdTokenForDeveloperIdentityInput.


        :param identity_pool_id: The identity_pool_id of this GetOpenIdTokenForDeveloperIdentityInput.
        :type identity_pool_id: str
        """
        if identity_pool_id is None:
            raise ValueError("Invalid value for `identity_pool_id`, must not be `None`")

        self._identity_pool_id = identity_pool_id

    @property
    def identity_id(self):
        """Gets the identity_id of this GetOpenIdTokenForDeveloperIdentityInput.


        :return: The identity_id of this GetOpenIdTokenForDeveloperIdentityInput.
        :rtype: str
        """
        return self._identity_id

    @identity_id.setter
    def identity_id(self, identity_id):
        """Sets the identity_id of this GetOpenIdTokenForDeveloperIdentityInput.


        :param identity_id: The identity_id of this GetOpenIdTokenForDeveloperIdentityInput.
        :type identity_id: str
        """

        self._identity_id = identity_id

    @property
    def logins(self):
        """Gets the logins of this GetOpenIdTokenForDeveloperIdentityInput.


        :return: The logins of this GetOpenIdTokenForDeveloperIdentityInput.
        :rtype: Dict
        """
        return self._logins

    @logins.setter
    def logins(self, logins):
        """Sets the logins of this GetOpenIdTokenForDeveloperIdentityInput.


        :param logins: The logins of this GetOpenIdTokenForDeveloperIdentityInput.
        :type logins: Dict
        """
        if logins is None:
            raise ValueError("Invalid value for `logins`, must not be `None`")

        self._logins = logins

    @property
    def principal_tags(self):
        """Gets the principal_tags of this GetOpenIdTokenForDeveloperIdentityInput.


        :return: The principal_tags of this GetOpenIdTokenForDeveloperIdentityInput.
        :rtype: Dict
        """
        return self._principal_tags

    @principal_tags.setter
    def principal_tags(self, principal_tags):
        """Sets the principal_tags of this GetOpenIdTokenForDeveloperIdentityInput.


        :param principal_tags: The principal_tags of this GetOpenIdTokenForDeveloperIdentityInput.
        :type principal_tags: Dict
        """

        self._principal_tags = principal_tags

    @property
    def token_duration(self):
        """Gets the token_duration of this GetOpenIdTokenForDeveloperIdentityInput.


        :return: The token_duration of this GetOpenIdTokenForDeveloperIdentityInput.
        :rtype: int
        """
        return self._token_duration

    @token_duration.setter
    def token_duration(self, token_duration):
        """Sets the token_duration of this GetOpenIdTokenForDeveloperIdentityInput.


        :param token_duration: The token_duration of this GetOpenIdTokenForDeveloperIdentityInput.
        :type token_duration: int
        """

        self._token_duration = token_duration
