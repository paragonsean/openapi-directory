# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SetPrincipalTagAttributeMapInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identity_pool_id: str=None, identity_provider_name: str=None, use_defaults: bool=None, principal_tags: Dict=None):
        """SetPrincipalTagAttributeMapInput - a model defined in OpenAPI

        :param identity_pool_id: The identity_pool_id of this SetPrincipalTagAttributeMapInput.
        :param identity_provider_name: The identity_provider_name of this SetPrincipalTagAttributeMapInput.
        :param use_defaults: The use_defaults of this SetPrincipalTagAttributeMapInput.
        :param principal_tags: The principal_tags of this SetPrincipalTagAttributeMapInput.
        """
        self.openapi_types = {
            'identity_pool_id': str,
            'identity_provider_name': str,
            'use_defaults': bool,
            'principal_tags': Dict
        }

        self.attribute_map = {
            'identity_pool_id': 'IdentityPoolId',
            'identity_provider_name': 'IdentityProviderName',
            'use_defaults': 'UseDefaults',
            'principal_tags': 'PrincipalTags'
        }

        self._identity_pool_id = identity_pool_id
        self._identity_provider_name = identity_provider_name
        self._use_defaults = use_defaults
        self._principal_tags = principal_tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SetPrincipalTagAttributeMapInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SetPrincipalTagAttributeMapInput of this SetPrincipalTagAttributeMapInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identity_pool_id(self):
        """Gets the identity_pool_id of this SetPrincipalTagAttributeMapInput.


        :return: The identity_pool_id of this SetPrincipalTagAttributeMapInput.
        :rtype: str
        """
        return self._identity_pool_id

    @identity_pool_id.setter
    def identity_pool_id(self, identity_pool_id):
        """Sets the identity_pool_id of this SetPrincipalTagAttributeMapInput.


        :param identity_pool_id: The identity_pool_id of this SetPrincipalTagAttributeMapInput.
        :type identity_pool_id: str
        """
        if identity_pool_id is None:
            raise ValueError("Invalid value for `identity_pool_id`, must not be `None`")

        self._identity_pool_id = identity_pool_id

    @property
    def identity_provider_name(self):
        """Gets the identity_provider_name of this SetPrincipalTagAttributeMapInput.


        :return: The identity_provider_name of this SetPrincipalTagAttributeMapInput.
        :rtype: str
        """
        return self._identity_provider_name

    @identity_provider_name.setter
    def identity_provider_name(self, identity_provider_name):
        """Sets the identity_provider_name of this SetPrincipalTagAttributeMapInput.


        :param identity_provider_name: The identity_provider_name of this SetPrincipalTagAttributeMapInput.
        :type identity_provider_name: str
        """
        if identity_provider_name is None:
            raise ValueError("Invalid value for `identity_provider_name`, must not be `None`")

        self._identity_provider_name = identity_provider_name

    @property
    def use_defaults(self):
        """Gets the use_defaults of this SetPrincipalTagAttributeMapInput.


        :return: The use_defaults of this SetPrincipalTagAttributeMapInput.
        :rtype: bool
        """
        return self._use_defaults

    @use_defaults.setter
    def use_defaults(self, use_defaults):
        """Sets the use_defaults of this SetPrincipalTagAttributeMapInput.


        :param use_defaults: The use_defaults of this SetPrincipalTagAttributeMapInput.
        :type use_defaults: bool
        """

        self._use_defaults = use_defaults

    @property
    def principal_tags(self):
        """Gets the principal_tags of this SetPrincipalTagAttributeMapInput.


        :return: The principal_tags of this SetPrincipalTagAttributeMapInput.
        :rtype: Dict
        """
        return self._principal_tags

    @principal_tags.setter
    def principal_tags(self, principal_tags):
        """Sets the principal_tags of this SetPrincipalTagAttributeMapInput.


        :param principal_tags: The principal_tags of this SetPrincipalTagAttributeMapInput.
        :type principal_tags: Dict
        """

        self._principal_tags = principal_tags
