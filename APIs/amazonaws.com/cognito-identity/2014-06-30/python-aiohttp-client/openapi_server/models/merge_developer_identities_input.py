# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MergeDeveloperIdentitiesInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source_user_identifier: str=None, destination_user_identifier: str=None, developer_provider_name: str=None, identity_pool_id: str=None):
        """MergeDeveloperIdentitiesInput - a model defined in OpenAPI

        :param source_user_identifier: The source_user_identifier of this MergeDeveloperIdentitiesInput.
        :param destination_user_identifier: The destination_user_identifier of this MergeDeveloperIdentitiesInput.
        :param developer_provider_name: The developer_provider_name of this MergeDeveloperIdentitiesInput.
        :param identity_pool_id: The identity_pool_id of this MergeDeveloperIdentitiesInput.
        """
        self.openapi_types = {
            'source_user_identifier': str,
            'destination_user_identifier': str,
            'developer_provider_name': str,
            'identity_pool_id': str
        }

        self.attribute_map = {
            'source_user_identifier': 'SourceUserIdentifier',
            'destination_user_identifier': 'DestinationUserIdentifier',
            'developer_provider_name': 'DeveloperProviderName',
            'identity_pool_id': 'IdentityPoolId'
        }

        self._source_user_identifier = source_user_identifier
        self._destination_user_identifier = destination_user_identifier
        self._developer_provider_name = developer_provider_name
        self._identity_pool_id = identity_pool_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MergeDeveloperIdentitiesInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MergeDeveloperIdentitiesInput of this MergeDeveloperIdentitiesInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_user_identifier(self):
        """Gets the source_user_identifier of this MergeDeveloperIdentitiesInput.


        :return: The source_user_identifier of this MergeDeveloperIdentitiesInput.
        :rtype: str
        """
        return self._source_user_identifier

    @source_user_identifier.setter
    def source_user_identifier(self, source_user_identifier):
        """Sets the source_user_identifier of this MergeDeveloperIdentitiesInput.


        :param source_user_identifier: The source_user_identifier of this MergeDeveloperIdentitiesInput.
        :type source_user_identifier: str
        """
        if source_user_identifier is None:
            raise ValueError("Invalid value for `source_user_identifier`, must not be `None`")

        self._source_user_identifier = source_user_identifier

    @property
    def destination_user_identifier(self):
        """Gets the destination_user_identifier of this MergeDeveloperIdentitiesInput.


        :return: The destination_user_identifier of this MergeDeveloperIdentitiesInput.
        :rtype: str
        """
        return self._destination_user_identifier

    @destination_user_identifier.setter
    def destination_user_identifier(self, destination_user_identifier):
        """Sets the destination_user_identifier of this MergeDeveloperIdentitiesInput.


        :param destination_user_identifier: The destination_user_identifier of this MergeDeveloperIdentitiesInput.
        :type destination_user_identifier: str
        """
        if destination_user_identifier is None:
            raise ValueError("Invalid value for `destination_user_identifier`, must not be `None`")

        self._destination_user_identifier = destination_user_identifier

    @property
    def developer_provider_name(self):
        """Gets the developer_provider_name of this MergeDeveloperIdentitiesInput.


        :return: The developer_provider_name of this MergeDeveloperIdentitiesInput.
        :rtype: str
        """
        return self._developer_provider_name

    @developer_provider_name.setter
    def developer_provider_name(self, developer_provider_name):
        """Sets the developer_provider_name of this MergeDeveloperIdentitiesInput.


        :param developer_provider_name: The developer_provider_name of this MergeDeveloperIdentitiesInput.
        :type developer_provider_name: str
        """
        if developer_provider_name is None:
            raise ValueError("Invalid value for `developer_provider_name`, must not be `None`")

        self._developer_provider_name = developer_provider_name

    @property
    def identity_pool_id(self):
        """Gets the identity_pool_id of this MergeDeveloperIdentitiesInput.


        :return: The identity_pool_id of this MergeDeveloperIdentitiesInput.
        :rtype: str
        """
        return self._identity_pool_id

    @identity_pool_id.setter
    def identity_pool_id(self, identity_pool_id):
        """Sets the identity_pool_id of this MergeDeveloperIdentitiesInput.


        :param identity_pool_id: The identity_pool_id of this MergeDeveloperIdentitiesInput.
        :type identity_pool_id: str
        """
        if identity_pool_id is None:
            raise ValueError("Invalid value for `identity_pool_id`, must not be `None`")

        self._identity_pool_id = identity_pool_id
