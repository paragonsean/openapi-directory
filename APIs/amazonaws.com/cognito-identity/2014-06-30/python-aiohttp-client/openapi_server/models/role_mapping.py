# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ambiguous_role_resolution_type import AmbiguousRoleResolutionType
from openapi_server.models.role_mapping_rules_configuration import RoleMappingRulesConfiguration
from openapi_server.models.role_mapping_type import RoleMappingType
from openapi_server import util


class RoleMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: RoleMappingType=None, ambiguous_role_resolution: AmbiguousRoleResolutionType=None, rules_configuration: RoleMappingRulesConfiguration=None):
        """RoleMapping - a model defined in OpenAPI

        :param type: The type of this RoleMapping.
        :param ambiguous_role_resolution: The ambiguous_role_resolution of this RoleMapping.
        :param rules_configuration: The rules_configuration of this RoleMapping.
        """
        self.openapi_types = {
            'type': RoleMappingType,
            'ambiguous_role_resolution': AmbiguousRoleResolutionType,
            'rules_configuration': RoleMappingRulesConfiguration
        }

        self.attribute_map = {
            'type': 'Type',
            'ambiguous_role_resolution': 'AmbiguousRoleResolution',
            'rules_configuration': 'RulesConfiguration'
        }

        self._type = type
        self._ambiguous_role_resolution = ambiguous_role_resolution
        self._rules_configuration = rules_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoleMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RoleMapping of this RoleMapping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this RoleMapping.


        :return: The type of this RoleMapping.
        :rtype: RoleMappingType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RoleMapping.


        :param type: The type of this RoleMapping.
        :type type: RoleMappingType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def ambiguous_role_resolution(self):
        """Gets the ambiguous_role_resolution of this RoleMapping.


        :return: The ambiguous_role_resolution of this RoleMapping.
        :rtype: AmbiguousRoleResolutionType
        """
        return self._ambiguous_role_resolution

    @ambiguous_role_resolution.setter
    def ambiguous_role_resolution(self, ambiguous_role_resolution):
        """Sets the ambiguous_role_resolution of this RoleMapping.


        :param ambiguous_role_resolution: The ambiguous_role_resolution of this RoleMapping.
        :type ambiguous_role_resolution: AmbiguousRoleResolutionType
        """

        self._ambiguous_role_resolution = ambiguous_role_resolution

    @property
    def rules_configuration(self):
        """Gets the rules_configuration of this RoleMapping.


        :return: The rules_configuration of this RoleMapping.
        :rtype: RoleMappingRulesConfiguration
        """
        return self._rules_configuration

    @rules_configuration.setter
    def rules_configuration(self, rules_configuration):
        """Sets the rules_configuration of this RoleMapping.


        :param rules_configuration: The rules_configuration of this RoleMapping.
        :type rules_configuration: RoleMappingRulesConfiguration
        """

        self._rules_configuration = rules_configuration
