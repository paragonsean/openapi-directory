# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LookupDeveloperIdentityInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identity_pool_id: str=None, identity_id: str=None, developer_user_identifier: str=None, max_results: int=None, next_token: str=None):
        """LookupDeveloperIdentityInput - a model defined in OpenAPI

        :param identity_pool_id: The identity_pool_id of this LookupDeveloperIdentityInput.
        :param identity_id: The identity_id of this LookupDeveloperIdentityInput.
        :param developer_user_identifier: The developer_user_identifier of this LookupDeveloperIdentityInput.
        :param max_results: The max_results of this LookupDeveloperIdentityInput.
        :param next_token: The next_token of this LookupDeveloperIdentityInput.
        """
        self.openapi_types = {
            'identity_pool_id': str,
            'identity_id': str,
            'developer_user_identifier': str,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'identity_pool_id': 'IdentityPoolId',
            'identity_id': 'IdentityId',
            'developer_user_identifier': 'DeveloperUserIdentifier',
            'max_results': 'MaxResults',
            'next_token': 'NextToken'
        }

        self._identity_pool_id = identity_pool_id
        self._identity_id = identity_id
        self._developer_user_identifier = developer_user_identifier
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LookupDeveloperIdentityInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LookupDeveloperIdentityInput of this LookupDeveloperIdentityInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identity_pool_id(self):
        """Gets the identity_pool_id of this LookupDeveloperIdentityInput.


        :return: The identity_pool_id of this LookupDeveloperIdentityInput.
        :rtype: str
        """
        return self._identity_pool_id

    @identity_pool_id.setter
    def identity_pool_id(self, identity_pool_id):
        """Sets the identity_pool_id of this LookupDeveloperIdentityInput.


        :param identity_pool_id: The identity_pool_id of this LookupDeveloperIdentityInput.
        :type identity_pool_id: str
        """
        if identity_pool_id is None:
            raise ValueError("Invalid value for `identity_pool_id`, must not be `None`")

        self._identity_pool_id = identity_pool_id

    @property
    def identity_id(self):
        """Gets the identity_id of this LookupDeveloperIdentityInput.


        :return: The identity_id of this LookupDeveloperIdentityInput.
        :rtype: str
        """
        return self._identity_id

    @identity_id.setter
    def identity_id(self, identity_id):
        """Sets the identity_id of this LookupDeveloperIdentityInput.


        :param identity_id: The identity_id of this LookupDeveloperIdentityInput.
        :type identity_id: str
        """

        self._identity_id = identity_id

    @property
    def developer_user_identifier(self):
        """Gets the developer_user_identifier of this LookupDeveloperIdentityInput.


        :return: The developer_user_identifier of this LookupDeveloperIdentityInput.
        :rtype: str
        """
        return self._developer_user_identifier

    @developer_user_identifier.setter
    def developer_user_identifier(self, developer_user_identifier):
        """Sets the developer_user_identifier of this LookupDeveloperIdentityInput.


        :param developer_user_identifier: The developer_user_identifier of this LookupDeveloperIdentityInput.
        :type developer_user_identifier: str
        """

        self._developer_user_identifier = developer_user_identifier

    @property
    def max_results(self):
        """Gets the max_results of this LookupDeveloperIdentityInput.


        :return: The max_results of this LookupDeveloperIdentityInput.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this LookupDeveloperIdentityInput.


        :param max_results: The max_results of this LookupDeveloperIdentityInput.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this LookupDeveloperIdentityInput.


        :return: The next_token of this LookupDeveloperIdentityInput.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this LookupDeveloperIdentityInput.


        :param next_token: The next_token of this LookupDeveloperIdentityInput.
        :type next_token: str
        """

        self._next_token = next_token
