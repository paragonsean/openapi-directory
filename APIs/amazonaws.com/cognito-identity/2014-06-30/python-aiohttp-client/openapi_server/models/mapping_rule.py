# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mapping_rule_match_type import MappingRuleMatchType
from openapi_server import util


class MappingRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, claim: str=None, match_type: MappingRuleMatchType=None, value: str=None, role_arn: str=None):
        """MappingRule - a model defined in OpenAPI

        :param claim: The claim of this MappingRule.
        :param match_type: The match_type of this MappingRule.
        :param value: The value of this MappingRule.
        :param role_arn: The role_arn of this MappingRule.
        """
        self.openapi_types = {
            'claim': str,
            'match_type': MappingRuleMatchType,
            'value': str,
            'role_arn': str
        }

        self.attribute_map = {
            'claim': 'Claim',
            'match_type': 'MatchType',
            'value': 'Value',
            'role_arn': 'RoleARN'
        }

        self._claim = claim
        self._match_type = match_type
        self._value = value
        self._role_arn = role_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MappingRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MappingRule of this MappingRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def claim(self):
        """Gets the claim of this MappingRule.


        :return: The claim of this MappingRule.
        :rtype: str
        """
        return self._claim

    @claim.setter
    def claim(self, claim):
        """Sets the claim of this MappingRule.


        :param claim: The claim of this MappingRule.
        :type claim: str
        """
        if claim is None:
            raise ValueError("Invalid value for `claim`, must not be `None`")

        self._claim = claim

    @property
    def match_type(self):
        """Gets the match_type of this MappingRule.


        :return: The match_type of this MappingRule.
        :rtype: MappingRuleMatchType
        """
        return self._match_type

    @match_type.setter
    def match_type(self, match_type):
        """Sets the match_type of this MappingRule.


        :param match_type: The match_type of this MappingRule.
        :type match_type: MappingRuleMatchType
        """
        if match_type is None:
            raise ValueError("Invalid value for `match_type`, must not be `None`")

        self._match_type = match_type

    @property
    def value(self):
        """Gets the value of this MappingRule.


        :return: The value of this MappingRule.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this MappingRule.


        :param value: The value of this MappingRule.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value

    @property
    def role_arn(self):
        """Gets the role_arn of this MappingRule.


        :return: The role_arn of this MappingRule.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this MappingRule.


        :param role_arn: The role_arn of this MappingRule.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn
