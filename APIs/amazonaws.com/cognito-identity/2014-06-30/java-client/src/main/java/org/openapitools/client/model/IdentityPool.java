/*
 * Amazon Cognito Identity
 * <fullname>Amazon Cognito Federated Identities</fullname> <p>Amazon Cognito Federated Identities is a web service that delivers scoped temporary credentials to mobile devices and other untrusted environments. It uniquely identifies a device and supplies the user with a consistent identity over the lifetime of an application.</p> <p>Using Amazon Cognito Federated Identities, you can enable authentication with one or more third-party identity providers (Facebook, Google, or Login with Amazon) or an Amazon Cognito user pool, and you can also choose to support unauthenticated access from your app. Cognito delivers a unique identifier for each user and acts as an OpenID token provider trusted by AWS Security Token Service (STS) to access temporary, limited-privilege AWS credentials.</p> <p>For a description of the authentication flow from the Amazon Cognito Developer Guide see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html\">Authentication Flow</a>.</p> <p>For more information see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html\">Amazon Cognito Federated Identities</a>.</p>
 *
 * The version of the OpenAPI document: 2014-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object representing an Amazon Cognito identity pool.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:09.240661-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IdentityPool {
  public static final String SERIALIZED_NAME_IDENTITY_POOL_ID = "IdentityPoolId";
  @SerializedName(SERIALIZED_NAME_IDENTITY_POOL_ID)
  private String identityPoolId;

  public static final String SERIALIZED_NAME_IDENTITY_POOL_NAME = "IdentityPoolName";
  @SerializedName(SERIALIZED_NAME_IDENTITY_POOL_NAME)
  private String identityPoolName;

  public static final String SERIALIZED_NAME_ALLOW_UNAUTHENTICATED_IDENTITIES = "AllowUnauthenticatedIdentities";
  @SerializedName(SERIALIZED_NAME_ALLOW_UNAUTHENTICATED_IDENTITIES)
  private Boolean allowUnauthenticatedIdentities;

  public static final String SERIALIZED_NAME_ALLOW_CLASSIC_FLOW = "AllowClassicFlow";
  @SerializedName(SERIALIZED_NAME_ALLOW_CLASSIC_FLOW)
  private Boolean allowClassicFlow;

  public static final String SERIALIZED_NAME_SUPPORTED_LOGIN_PROVIDERS = "SupportedLoginProviders";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_LOGIN_PROVIDERS)
  private Map supportedLoginProviders;

  public static final String SERIALIZED_NAME_DEVELOPER_PROVIDER_NAME = "DeveloperProviderName";
  @SerializedName(SERIALIZED_NAME_DEVELOPER_PROVIDER_NAME)
  private String developerProviderName;

  public static final String SERIALIZED_NAME_OPEN_ID_CONNECT_PROVIDER_A_R_NS = "OpenIdConnectProviderARNs";
  @SerializedName(SERIALIZED_NAME_OPEN_ID_CONNECT_PROVIDER_A_R_NS)
  private List openIdConnectProviderARNs;

  public static final String SERIALIZED_NAME_COGNITO_IDENTITY_PROVIDERS = "CognitoIdentityProviders";
  @SerializedName(SERIALIZED_NAME_COGNITO_IDENTITY_PROVIDERS)
  private List cognitoIdentityProviders;

  public static final String SERIALIZED_NAME_SAML_PROVIDER_A_R_NS = "SamlProviderARNs";
  @SerializedName(SERIALIZED_NAME_SAML_PROVIDER_A_R_NS)
  private List samlProviderARNs;

  public static final String SERIALIZED_NAME_IDENTITY_POOL_TAGS = "IdentityPoolTags";
  @SerializedName(SERIALIZED_NAME_IDENTITY_POOL_TAGS)
  private Map identityPoolTags;

  public IdentityPool() {
  }

  public IdentityPool identityPoolId(String identityPoolId) {
    this.identityPoolId = identityPoolId;
    return this;
  }

  /**
   * Get identityPoolId
   * @return identityPoolId
   */
  @javax.annotation.Nonnull
  public String getIdentityPoolId() {
    return identityPoolId;
  }

  public void setIdentityPoolId(String identityPoolId) {
    this.identityPoolId = identityPoolId;
  }


  public IdentityPool identityPoolName(String identityPoolName) {
    this.identityPoolName = identityPoolName;
    return this;
  }

  /**
   * Get identityPoolName
   * @return identityPoolName
   */
  @javax.annotation.Nonnull
  public String getIdentityPoolName() {
    return identityPoolName;
  }

  public void setIdentityPoolName(String identityPoolName) {
    this.identityPoolName = identityPoolName;
  }


  public IdentityPool allowUnauthenticatedIdentities(Boolean allowUnauthenticatedIdentities) {
    this.allowUnauthenticatedIdentities = allowUnauthenticatedIdentities;
    return this;
  }

  /**
   * Get allowUnauthenticatedIdentities
   * @return allowUnauthenticatedIdentities
   */
  @javax.annotation.Nonnull
  public Boolean getAllowUnauthenticatedIdentities() {
    return allowUnauthenticatedIdentities;
  }

  public void setAllowUnauthenticatedIdentities(Boolean allowUnauthenticatedIdentities) {
    this.allowUnauthenticatedIdentities = allowUnauthenticatedIdentities;
  }


  public IdentityPool allowClassicFlow(Boolean allowClassicFlow) {
    this.allowClassicFlow = allowClassicFlow;
    return this;
  }

  /**
   * Get allowClassicFlow
   * @return allowClassicFlow
   */
  @javax.annotation.Nullable
  public Boolean getAllowClassicFlow() {
    return allowClassicFlow;
  }

  public void setAllowClassicFlow(Boolean allowClassicFlow) {
    this.allowClassicFlow = allowClassicFlow;
  }


  public IdentityPool supportedLoginProviders(Map supportedLoginProviders) {
    this.supportedLoginProviders = supportedLoginProviders;
    return this;
  }

  /**
   * Get supportedLoginProviders
   * @return supportedLoginProviders
   */
  @javax.annotation.Nullable
  public Map getSupportedLoginProviders() {
    return supportedLoginProviders;
  }

  public void setSupportedLoginProviders(Map supportedLoginProviders) {
    this.supportedLoginProviders = supportedLoginProviders;
  }


  public IdentityPool developerProviderName(String developerProviderName) {
    this.developerProviderName = developerProviderName;
    return this;
  }

  /**
   * Get developerProviderName
   * @return developerProviderName
   */
  @javax.annotation.Nullable
  public String getDeveloperProviderName() {
    return developerProviderName;
  }

  public void setDeveloperProviderName(String developerProviderName) {
    this.developerProviderName = developerProviderName;
  }


  public IdentityPool openIdConnectProviderARNs(List openIdConnectProviderARNs) {
    this.openIdConnectProviderARNs = openIdConnectProviderARNs;
    return this;
  }

  /**
   * Get openIdConnectProviderARNs
   * @return openIdConnectProviderARNs
   */
  @javax.annotation.Nullable
  public List getOpenIdConnectProviderARNs() {
    return openIdConnectProviderARNs;
  }

  public void setOpenIdConnectProviderARNs(List openIdConnectProviderARNs) {
    this.openIdConnectProviderARNs = openIdConnectProviderARNs;
  }


  public IdentityPool cognitoIdentityProviders(List cognitoIdentityProviders) {
    this.cognitoIdentityProviders = cognitoIdentityProviders;
    return this;
  }

  /**
   * Get cognitoIdentityProviders
   * @return cognitoIdentityProviders
   */
  @javax.annotation.Nullable
  public List getCognitoIdentityProviders() {
    return cognitoIdentityProviders;
  }

  public void setCognitoIdentityProviders(List cognitoIdentityProviders) {
    this.cognitoIdentityProviders = cognitoIdentityProviders;
  }


  public IdentityPool samlProviderARNs(List samlProviderARNs) {
    this.samlProviderARNs = samlProviderARNs;
    return this;
  }

  /**
   * Get samlProviderARNs
   * @return samlProviderARNs
   */
  @javax.annotation.Nullable
  public List getSamlProviderARNs() {
    return samlProviderARNs;
  }

  public void setSamlProviderARNs(List samlProviderARNs) {
    this.samlProviderARNs = samlProviderARNs;
  }


  public IdentityPool identityPoolTags(Map identityPoolTags) {
    this.identityPoolTags = identityPoolTags;
    return this;
  }

  /**
   * Get identityPoolTags
   * @return identityPoolTags
   */
  @javax.annotation.Nullable
  public Map getIdentityPoolTags() {
    return identityPoolTags;
  }

  public void setIdentityPoolTags(Map identityPoolTags) {
    this.identityPoolTags = identityPoolTags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdentityPool identityPool = (IdentityPool) o;
    return Objects.equals(this.identityPoolId, identityPool.identityPoolId) &&
        Objects.equals(this.identityPoolName, identityPool.identityPoolName) &&
        Objects.equals(this.allowUnauthenticatedIdentities, identityPool.allowUnauthenticatedIdentities) &&
        Objects.equals(this.allowClassicFlow, identityPool.allowClassicFlow) &&
        Objects.equals(this.supportedLoginProviders, identityPool.supportedLoginProviders) &&
        Objects.equals(this.developerProviderName, identityPool.developerProviderName) &&
        Objects.equals(this.openIdConnectProviderARNs, identityPool.openIdConnectProviderARNs) &&
        Objects.equals(this.cognitoIdentityProviders, identityPool.cognitoIdentityProviders) &&
        Objects.equals(this.samlProviderARNs, identityPool.samlProviderARNs) &&
        Objects.equals(this.identityPoolTags, identityPool.identityPoolTags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(identityPoolId, identityPoolName, allowUnauthenticatedIdentities, allowClassicFlow, supportedLoginProviders, developerProviderName, openIdConnectProviderARNs, cognitoIdentityProviders, samlProviderARNs, identityPoolTags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdentityPool {\n");
    sb.append("    identityPoolId: ").append(toIndentedString(identityPoolId)).append("\n");
    sb.append("    identityPoolName: ").append(toIndentedString(identityPoolName)).append("\n");
    sb.append("    allowUnauthenticatedIdentities: ").append(toIndentedString(allowUnauthenticatedIdentities)).append("\n");
    sb.append("    allowClassicFlow: ").append(toIndentedString(allowClassicFlow)).append("\n");
    sb.append("    supportedLoginProviders: ").append(toIndentedString(supportedLoginProviders)).append("\n");
    sb.append("    developerProviderName: ").append(toIndentedString(developerProviderName)).append("\n");
    sb.append("    openIdConnectProviderARNs: ").append(toIndentedString(openIdConnectProviderARNs)).append("\n");
    sb.append("    cognitoIdentityProviders: ").append(toIndentedString(cognitoIdentityProviders)).append("\n");
    sb.append("    samlProviderARNs: ").append(toIndentedString(samlProviderARNs)).append("\n");
    sb.append("    identityPoolTags: ").append(toIndentedString(identityPoolTags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("IdentityPoolId");
    openapiFields.add("IdentityPoolName");
    openapiFields.add("AllowUnauthenticatedIdentities");
    openapiFields.add("AllowClassicFlow");
    openapiFields.add("SupportedLoginProviders");
    openapiFields.add("DeveloperProviderName");
    openapiFields.add("OpenIdConnectProviderARNs");
    openapiFields.add("CognitoIdentityProviders");
    openapiFields.add("SamlProviderARNs");
    openapiFields.add("IdentityPoolTags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("IdentityPoolId");
    openapiRequiredFields.add("IdentityPoolName");
    openapiRequiredFields.add("AllowUnauthenticatedIdentities");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IdentityPool
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IdentityPool.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IdentityPool is not found in the empty JSON string", IdentityPool.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IdentityPool.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IdentityPool` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IdentityPool.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `IdentityPoolId`
      String.validateJsonElement(jsonObj.get("IdentityPoolId"));
      // validate the required field `IdentityPoolName`
      String.validateJsonElement(jsonObj.get("IdentityPoolName"));
      // validate the required field `AllowUnauthenticatedIdentities`
      Boolean.validateJsonElement(jsonObj.get("AllowUnauthenticatedIdentities"));
      // validate the optional field `AllowClassicFlow`
      if (jsonObj.get("AllowClassicFlow") != null && !jsonObj.get("AllowClassicFlow").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AllowClassicFlow"));
      }
      // validate the optional field `SupportedLoginProviders`
      if (jsonObj.get("SupportedLoginProviders") != null && !jsonObj.get("SupportedLoginProviders").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("SupportedLoginProviders"));
      }
      // validate the optional field `DeveloperProviderName`
      if (jsonObj.get("DeveloperProviderName") != null && !jsonObj.get("DeveloperProviderName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DeveloperProviderName"));
      }
      // validate the optional field `OpenIdConnectProviderARNs`
      if (jsonObj.get("OpenIdConnectProviderARNs") != null && !jsonObj.get("OpenIdConnectProviderARNs").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("OpenIdConnectProviderARNs"));
      }
      // validate the optional field `CognitoIdentityProviders`
      if (jsonObj.get("CognitoIdentityProviders") != null && !jsonObj.get("CognitoIdentityProviders").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("CognitoIdentityProviders"));
      }
      // validate the optional field `SamlProviderARNs`
      if (jsonObj.get("SamlProviderARNs") != null && !jsonObj.get("SamlProviderARNs").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SamlProviderARNs"));
      }
      // validate the optional field `IdentityPoolTags`
      if (jsonObj.get("IdentityPoolTags") != null && !jsonObj.get("IdentityPoolTags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("IdentityPoolTags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IdentityPool.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IdentityPool' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IdentityPool> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IdentityPool.class));

       return (TypeAdapter<T>) new TypeAdapter<IdentityPool>() {
           @Override
           public void write(JsonWriter out, IdentityPool value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IdentityPool read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IdentityPool given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IdentityPool
   * @throws IOException if the JSON string is invalid with respect to IdentityPool
   */
  public static IdentityPool fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IdentityPool.class);
  }

  /**
   * Convert an instance of IdentityPool to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

