/*
 * Amazon Cognito Identity
 * <fullname>Amazon Cognito Federated Identities</fullname> <p>Amazon Cognito Federated Identities is a web service that delivers scoped temporary credentials to mobile devices and other untrusted environments. It uniquely identifies a device and supplies the user with a consistent identity over the lifetime of an application.</p> <p>Using Amazon Cognito Federated Identities, you can enable authentication with one or more third-party identity providers (Facebook, Google, or Login with Amazon) or an Amazon Cognito user pool, and you can also choose to support unauthenticated access from your app. Cognito delivers a unique identifier for each user and acts as an OpenID token provider trusted by AWS Security Token Service (STS) to access temporary, limited-privilege AWS credentials.</p> <p>For a description of the authentication flow from the Amazon Cognito Developer Guide see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html\">Authentication Flow</a>.</p> <p>For more information see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html\">Amazon Cognito Federated Identities</a>.</p>
 *
 * The version of the OpenAPI document: 2014-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A provider representing an Amazon Cognito user pool and its client ID.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:09.240661-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CognitoIdentityProvider {
  public static final String SERIALIZED_NAME_PROVIDER_NAME = "ProviderName";
  @SerializedName(SERIALIZED_NAME_PROVIDER_NAME)
  private String providerName;

  public static final String SERIALIZED_NAME_CLIENT_ID = "ClientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_SERVER_SIDE_TOKEN_CHECK = "ServerSideTokenCheck";
  @SerializedName(SERIALIZED_NAME_SERVER_SIDE_TOKEN_CHECK)
  private Boolean serverSideTokenCheck;

  public CognitoIdentityProvider() {
  }

  public CognitoIdentityProvider providerName(String providerName) {
    this.providerName = providerName;
    return this;
  }

  /**
   * Get providerName
   * @return providerName
   */
  @javax.annotation.Nullable
  public String getProviderName() {
    return providerName;
  }

  public void setProviderName(String providerName) {
    this.providerName = providerName;
  }


  public CognitoIdentityProvider clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public CognitoIdentityProvider serverSideTokenCheck(Boolean serverSideTokenCheck) {
    this.serverSideTokenCheck = serverSideTokenCheck;
    return this;
  }

  /**
   * Get serverSideTokenCheck
   * @return serverSideTokenCheck
   */
  @javax.annotation.Nullable
  public Boolean getServerSideTokenCheck() {
    return serverSideTokenCheck;
  }

  public void setServerSideTokenCheck(Boolean serverSideTokenCheck) {
    this.serverSideTokenCheck = serverSideTokenCheck;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CognitoIdentityProvider cognitoIdentityProvider = (CognitoIdentityProvider) o;
    return Objects.equals(this.providerName, cognitoIdentityProvider.providerName) &&
        Objects.equals(this.clientId, cognitoIdentityProvider.clientId) &&
        Objects.equals(this.serverSideTokenCheck, cognitoIdentityProvider.serverSideTokenCheck);
  }

  @Override
  public int hashCode() {
    return Objects.hash(providerName, clientId, serverSideTokenCheck);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CognitoIdentityProvider {\n");
    sb.append("    providerName: ").append(toIndentedString(providerName)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    serverSideTokenCheck: ").append(toIndentedString(serverSideTokenCheck)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ProviderName");
    openapiFields.add("ClientId");
    openapiFields.add("ServerSideTokenCheck");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CognitoIdentityProvider
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CognitoIdentityProvider.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CognitoIdentityProvider is not found in the empty JSON string", CognitoIdentityProvider.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CognitoIdentityProvider.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CognitoIdentityProvider` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ProviderName`
      if (jsonObj.get("ProviderName") != null && !jsonObj.get("ProviderName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ProviderName"));
      }
      // validate the optional field `ClientId`
      if (jsonObj.get("ClientId") != null && !jsonObj.get("ClientId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ClientId"));
      }
      // validate the optional field `ServerSideTokenCheck`
      if (jsonObj.get("ServerSideTokenCheck") != null && !jsonObj.get("ServerSideTokenCheck").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ServerSideTokenCheck"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CognitoIdentityProvider.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CognitoIdentityProvider' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CognitoIdentityProvider> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CognitoIdentityProvider.class));

       return (TypeAdapter<T>) new TypeAdapter<CognitoIdentityProvider>() {
           @Override
           public void write(JsonWriter out, CognitoIdentityProvider value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CognitoIdentityProvider read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CognitoIdentityProvider given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CognitoIdentityProvider
   * @throws IOException if the JSON string is invalid with respect to CognitoIdentityProvider
   */
  public static CognitoIdentityProvider fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CognitoIdentityProvider.class);
  }

  /**
   * Convert an instance of CognitoIdentityProvider to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

