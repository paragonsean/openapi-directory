/*
 * Amazon Cognito Identity
 * <fullname>Amazon Cognito Federated Identities</fullname> <p>Amazon Cognito Federated Identities is a web service that delivers scoped temporary credentials to mobile devices and other untrusted environments. It uniquely identifies a device and supplies the user with a consistent identity over the lifetime of an application.</p> <p>Using Amazon Cognito Federated Identities, you can enable authentication with one or more third-party identity providers (Facebook, Google, or Login with Amazon) or an Amazon Cognito user pool, and you can also choose to support unauthenticated access from your app. Cognito delivers a unique identifier for each user and acts as an OpenID token provider trusted by AWS Security Token Service (STS) to access temporary, limited-privilege AWS credentials.</p> <p>For a description of the authentication flow from the Amazon Cognito Developer Guide see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html\">Authentication Flow</a>.</p> <p>For more information see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html\">Amazon Cognito Federated Identities</a>.</p>
 *
 * The version of the OpenAPI document: 2014-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Returned in response to a successful &lt;code&gt;LookupDeveloperIdentity&lt;/code&gt; action.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:09.240661-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LookupDeveloperIdentityResponse {
  public static final String SERIALIZED_NAME_IDENTITY_ID = "IdentityId";
  @SerializedName(SERIALIZED_NAME_IDENTITY_ID)
  private String identityId;

  public static final String SERIALIZED_NAME_DEVELOPER_USER_IDENTIFIER_LIST = "DeveloperUserIdentifierList";
  @SerializedName(SERIALIZED_NAME_DEVELOPER_USER_IDENTIFIER_LIST)
  private List developerUserIdentifierList;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public LookupDeveloperIdentityResponse() {
  }

  public LookupDeveloperIdentityResponse identityId(String identityId) {
    this.identityId = identityId;
    return this;
  }

  /**
   * Get identityId
   * @return identityId
   */
  @javax.annotation.Nullable
  public String getIdentityId() {
    return identityId;
  }

  public void setIdentityId(String identityId) {
    this.identityId = identityId;
  }


  public LookupDeveloperIdentityResponse developerUserIdentifierList(List developerUserIdentifierList) {
    this.developerUserIdentifierList = developerUserIdentifierList;
    return this;
  }

  /**
   * Get developerUserIdentifierList
   * @return developerUserIdentifierList
   */
  @javax.annotation.Nullable
  public List getDeveloperUserIdentifierList() {
    return developerUserIdentifierList;
  }

  public void setDeveloperUserIdentifierList(List developerUserIdentifierList) {
    this.developerUserIdentifierList = developerUserIdentifierList;
  }


  public LookupDeveloperIdentityResponse nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Get nextToken
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LookupDeveloperIdentityResponse lookupDeveloperIdentityResponse = (LookupDeveloperIdentityResponse) o;
    return Objects.equals(this.identityId, lookupDeveloperIdentityResponse.identityId) &&
        Objects.equals(this.developerUserIdentifierList, lookupDeveloperIdentityResponse.developerUserIdentifierList) &&
        Objects.equals(this.nextToken, lookupDeveloperIdentityResponse.nextToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(identityId, developerUserIdentifierList, nextToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LookupDeveloperIdentityResponse {\n");
    sb.append("    identityId: ").append(toIndentedString(identityId)).append("\n");
    sb.append("    developerUserIdentifierList: ").append(toIndentedString(developerUserIdentifierList)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("IdentityId");
    openapiFields.add("DeveloperUserIdentifierList");
    openapiFields.add("NextToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LookupDeveloperIdentityResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LookupDeveloperIdentityResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LookupDeveloperIdentityResponse is not found in the empty JSON string", LookupDeveloperIdentityResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LookupDeveloperIdentityResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LookupDeveloperIdentityResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `IdentityId`
      if (jsonObj.get("IdentityId") != null && !jsonObj.get("IdentityId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IdentityId"));
      }
      // validate the optional field `DeveloperUserIdentifierList`
      if (jsonObj.get("DeveloperUserIdentifierList") != null && !jsonObj.get("DeveloperUserIdentifierList").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("DeveloperUserIdentifierList"));
      }
      // validate the optional field `NextToken`
      if (jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NextToken"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LookupDeveloperIdentityResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LookupDeveloperIdentityResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LookupDeveloperIdentityResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LookupDeveloperIdentityResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<LookupDeveloperIdentityResponse>() {
           @Override
           public void write(JsonWriter out, LookupDeveloperIdentityResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LookupDeveloperIdentityResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LookupDeveloperIdentityResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LookupDeveloperIdentityResponse
   * @throws IOException if the JSON string is invalid with respect to LookupDeveloperIdentityResponse
   */
  public static LookupDeveloperIdentityResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LookupDeveloperIdentityResponse.class);
  }

  /**
   * Convert an instance of LookupDeveloperIdentityResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

