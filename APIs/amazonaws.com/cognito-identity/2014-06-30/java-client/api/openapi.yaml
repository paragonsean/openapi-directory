openapi: 3.0.0
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  description: "<fullname>Amazon Cognito Federated Identities</fullname> <p>Amazon\
    \ Cognito Federated Identities is a web service that delivers scoped temporary\
    \ credentials to mobile devices and other untrusted environments. It uniquely\
    \ identifies a device and supplies the user with a consistent identity over the\
    \ lifetime of an application.</p> <p>Using Amazon Cognito Federated Identities,\
    \ you can enable authentication with one or more third-party identity providers\
    \ (Facebook, Google, or Login with Amazon) or an Amazon Cognito user pool, and\
    \ you can also choose to support unauthenticated access from your app. Cognito\
    \ delivers a unique identifier for each user and acts as an OpenID token provider\
    \ trusted by AWS Security Token Service (STS) to access temporary, limited-privilege\
    \ AWS credentials.</p> <p>For a description of the authentication flow from the\
    \ Amazon Cognito Developer Guide see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html\"\
    >Authentication Flow</a>.</p> <p>For more information see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html\"\
    >Amazon Cognito Federated Identities</a>.</p>"
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  termsOfService: https://aws.amazon.com/service-terms/
  title: Amazon Cognito Identity
  version: 2014-06-30
  x-release: v4
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: '#FFFFFF'
  x-providerName: amazonaws.com
  x-serviceName: cognito-identity
  x-origin:
  - contentType: application/json
    url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/cognito-identity-2014-06-30.normal.json
    converter:
      url: https://github.com/mermade/aws2openapi
      version: 1.0.0
    x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
  - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/cognito-identity/
servers:
- description: The Amazon Cognito Identity multi-region endpoint
  url: "http://cognito-identity.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The Amazon Cognito Identity multi-region endpoint
  url: "https://cognito-identity.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The Amazon Cognito Identity endpoint for China (Beijing) and China
    (Ningxia)
  url: "http://cognito-identity.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
- description: The Amazon Cognito Identity endpoint for China (Beijing) and China
    (Ningxia)
  url: "https://cognito-identity.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
security:
- hmac: []
paths:
  /#X-Amz-Target=AWSCognitoIdentityService.CreateIdentityPool:
    post:
      description: "<p>Creates a new identity pool. The identity pool is a store of\
        \ user identity information that is specific to your AWS account. The keys\
        \ for <code>SupportedLoginProviders</code> are as follows:</p> <ul> <li> <p>Facebook:\
        \ <code>graph.facebook.com</code> </p> </li> <li> <p>Google: <code>accounts.google.com</code>\
        \ </p> </li> <li> <p>Amazon: <code>www.amazon.com</code> </p> </li> <li> <p>Twitter:\
        \ <code>api.twitter.com</code> </p> </li> <li> <p>Digits: <code>www.digits.com</code>\
        \ </p> </li> </ul> <p>You must use AWS Developer credentials to call this\
        \ API.</p>"
      operationId: CreateIdentityPool
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AWSCognitoIdentityService.CreateIdentityPool
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIdentityPoolInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityPool'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
          description: NotAuthorizedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
          description: ResourceConflictException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
          description: InternalErrorException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=AWSCognitoIdentityService.DeleteIdentities:
    post:
      description: <p>Deletes identities from an identity pool. You can specify a
        list of 1-60 identities that you want to delete.</p> <p>You must use AWS Developer
        credentials to call this API.</p>
      operationId: DeleteIdentities
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AWSCognitoIdentityService.DeleteIdentities
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteIdentitiesInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteIdentitiesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
          description: InternalErrorException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=AWSCognitoIdentityService.DeleteIdentityPool:
    post:
      description: "<p>Deletes an identity pool. Once a pool is deleted, users will\
        \ not be able to authenticate with the pool.</p> <p>You must use AWS Developer\
        \ credentials to call this API.</p>"
      operationId: DeleteIdentityPool
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AWSCognitoIdentityService.DeleteIdentityPool
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteIdentityPoolInput'
        required: true
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
          description: NotAuthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
          description: InternalErrorException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=AWSCognitoIdentityService.DescribeIdentity:
    post:
      description: "<p>Returns metadata related to the given identity, including when\
        \ the identity was created and any associated linked logins.</p> <p>You must\
        \ use AWS Developer credentials to call this API.</p>"
      operationId: DescribeIdentity
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AWSCognitoIdentityService.DescribeIdentity
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeIdentityInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityDescription'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
          description: NotAuthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
          description: InternalErrorException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=AWSCognitoIdentityService.DescribeIdentityPool:
    post:
      description: "<p>Gets details about a particular identity pool, including the\
        \ pool name, ID description, creation date, and current number of users.</p>\
        \ <p>You must use AWS Developer credentials to call this API.</p>"
      operationId: DescribeIdentityPool
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AWSCognitoIdentityService.DescribeIdentityPool
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeIdentityPoolInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityPool'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
          description: NotAuthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
          description: InternalErrorException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=AWSCognitoIdentityService.GetCredentialsForIdentity:
    post:
      description: "<p>Returns credentials for the provided identity ID. Any provided\
        \ logins will be validated against supported login providers. If the token\
        \ is for cognito-identity.amazonaws.com, it will be passed through to AWS\
        \ Security Token Service with the appropriate role for the token.</p> <p>This\
        \ is a public API. You do not need any credentials to call this API.</p>"
      operationId: GetCredentialsForIdentity
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AWSCognitoIdentityService.GetCredentialsForIdentity
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCredentialsForIdentityInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCredentialsForIdentityResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
          description: NotAuthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
          description: ResourceConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidIdentityPoolConfigurationException'
          description: InvalidIdentityPoolConfigurationException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
          description: InternalErrorException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalServiceException'
          description: ExternalServiceException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=AWSCognitoIdentityService.GetId:
    post:
      description: <p>Generates (or retrieves) a Cognito ID. Supplying multiple logins
        will create an implicit linked account.</p> <p>This is a public API. You do
        not need any credentials to call this API.</p>
      operationId: GetId
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AWSCognitoIdentityService.GetId
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetIdInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIdResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
          description: NotAuthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
          description: ResourceConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
          description: InternalErrorException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalServiceException'
          description: ExternalServiceException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=AWSCognitoIdentityService.GetIdentityPoolRoles:
    post:
      description: <p>Gets the roles for an identity pool.</p> <p>You must use AWS
        Developer credentials to call this API.</p>
      operationId: GetIdentityPoolRoles
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AWSCognitoIdentityService.GetIdentityPoolRoles
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetIdentityPoolRolesInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIdentityPoolRolesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
          description: NotAuthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
          description: ResourceConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
          description: InternalErrorException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=AWSCognitoIdentityService.GetOpenIdToken:
    post:
      description: "<p>Gets an OpenID token, using a known Cognito ID. This known\
        \ Cognito ID is returned by <a>GetId</a>. You can optionally add additional\
        \ logins for the identity. Supplying multiple logins creates an implicit link.</p>\
        \ <p>The OpenID token is valid for 10 minutes.</p> <p>This is a public API.\
        \ You do not need any credentials to call this API.</p>"
      operationId: GetOpenIdToken
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AWSCognitoIdentityService.GetOpenIdToken
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetOpenIdTokenInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOpenIdTokenResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
          description: NotAuthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
          description: ResourceConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
          description: InternalErrorException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalServiceException'
          description: ExternalServiceException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=AWSCognitoIdentityService.GetOpenIdTokenForDeveloperIdentity:
    post:
      description: "<p>Registers (or retrieves) a Cognito <code>IdentityId</code>\
        \ and an OpenID Connect token for a user authenticated by your backend authentication\
        \ process. Supplying multiple logins will create an implicit linked account.\
        \ You can only specify one developer provider as part of the <code>Logins</code>\
        \ map, which is linked to the identity pool. The developer provider is the\
        \ \"domain\" by which Cognito will refer to your users.</p> <p>You can use\
        \ <code>GetOpenIdTokenForDeveloperIdentity</code> to create a new identity\
        \ and to link new logins (that is, user credentials issued by a public provider\
        \ or developer provider) to an existing identity. When you want to create\
        \ a new identity, the <code>IdentityId</code> should be null. When you want\
        \ to associate a new login with an existing authenticated/unauthenticated\
        \ identity, you can do so by providing the existing <code>IdentityId</code>.\
        \ This API will create the identity in the specified <code>IdentityPoolId</code>.</p>\
        \ <p>You must use AWS Developer credentials to call this API.</p>"
      operationId: GetOpenIdTokenForDeveloperIdentity
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AWSCognitoIdentityService.GetOpenIdTokenForDeveloperIdentity
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetOpenIdTokenForDeveloperIdentityInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOpenIdTokenForDeveloperIdentityResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
          description: NotAuthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
          description: ResourceConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
          description: InternalErrorException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeveloperUserAlreadyRegisteredException'
          description: DeveloperUserAlreadyRegisteredException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=AWSCognitoIdentityService.GetPrincipalTagAttributeMap:
    post:
      description: Use <code>GetPrincipalTagAttributeMap</code> to list all mappings
        between <code>PrincipalTags</code> and user attributes.
      operationId: GetPrincipalTagAttributeMap
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AWSCognitoIdentityService.GetPrincipalTagAttributeMap
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetPrincipalTagAttributeMapInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPrincipalTagAttributeMapResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
          description: NotAuthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
          description: InternalErrorException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=AWSCognitoIdentityService.ListIdentities:
    post:
      description: <p>Lists the identities in an identity pool.</p> <p>You must use
        AWS Developer credentials to call this API.</p>
      operationId: ListIdentities
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AWSCognitoIdentityService.ListIdentities
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListIdentitiesInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIdentitiesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
          description: NotAuthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
          description: InternalErrorException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=AWSCognitoIdentityService.ListIdentityPools:
    post:
      description: <p>Lists all of the Cognito identity pools registered for your
        account.</p> <p>You must use AWS Developer credentials to call this API.</p>
      operationId: ListIdentityPools
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: MaxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: NextToken
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AWSCognitoIdentityService.ListIdentityPools
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListIdentityPoolsInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIdentityPoolsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
          description: NotAuthorizedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
          description: InternalErrorException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=AWSCognitoIdentityService.ListTagsForResource:
    post:
      description: "<p>Lists the tags that are assigned to an Amazon Cognito identity\
        \ pool.</p> <p>A tag is a label that you can apply to identity pools to categorize\
        \ and manage them in different ways, such as by purpose, owner, environment,\
        \ or other criteria.</p> <p>You can use this action up to 10 times per second,\
        \ per account.</p>"
      operationId: ListTagsForResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AWSCognitoIdentityService.ListTagsForResource
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListTagsForResourceInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
          description: NotAuthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
          description: InternalErrorException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=AWSCognitoIdentityService.LookupDeveloperIdentity:
    post:
      description: "<p>Retrieves the <code>IdentityID</code> associated with a <code>DeveloperUserIdentifier</code>\
        \ or the list of <code>DeveloperUserIdentifier</code> values associated with\
        \ an <code>IdentityId</code> for an existing identity. Either <code>IdentityID</code>\
        \ or <code>DeveloperUserIdentifier</code> must not be null. If you supply\
        \ only one of these values, the other value will be searched in the database\
        \ and returned as a part of the response. If you supply both, <code>DeveloperUserIdentifier</code>\
        \ will be matched against <code>IdentityID</code>. If the values are verified\
        \ against the database, the response returns both values and is the same as\
        \ the request. Otherwise a <code>ResourceConflictException</code> is thrown.</p>\
        \ <p> <code>LookupDeveloperIdentity</code> is intended for low-throughput\
        \ control plane operations: for example, to enable customer service to locate\
        \ an identity ID by username. If you are using it for higher-volume operations\
        \ such as user authentication, your requests are likely to be throttled. <a>GetOpenIdTokenForDeveloperIdentity</a>\
        \ is a better option for higher-volume operations for user authentication.</p>\
        \ <p>You must use AWS Developer credentials to call this API.</p>"
      operationId: LookupDeveloperIdentity
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AWSCognitoIdentityService.LookupDeveloperIdentity
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LookupDeveloperIdentityInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupDeveloperIdentityResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
          description: NotAuthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
          description: ResourceConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
          description: InternalErrorException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=AWSCognitoIdentityService.MergeDeveloperIdentities:
    post:
      description: "<p>Merges two users having different <code>IdentityId</code>s,\
        \ existing in the same identity pool, and identified by the same developer\
        \ provider. You can use this action to request that discrete users be merged\
        \ and identified as a single user in the Cognito environment. Cognito associates\
        \ the given source user (<code>SourceUserIdentifier</code>) with the <code>IdentityId</code>\
        \ of the <code>DestinationUserIdentifier</code>. Only developer-authenticated\
        \ users can be merged. If the users to be merged are associated with the same\
        \ public provider, but as two different users, an exception will be thrown.</p>\
        \ <p>The number of linked logins is limited to 20. So, the number of linked\
        \ logins for the source user, <code>SourceUserIdentifier</code>, and the destination\
        \ user, <code>DestinationUserIdentifier</code>, together should not be larger\
        \ than 20. Otherwise, an exception will be thrown.</p> <p>You must use AWS\
        \ Developer credentials to call this API.</p>"
      operationId: MergeDeveloperIdentities
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AWSCognitoIdentityService.MergeDeveloperIdentities
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MergeDeveloperIdentitiesInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergeDeveloperIdentitiesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
          description: NotAuthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
          description: ResourceConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
          description: InternalErrorException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=AWSCognitoIdentityService.SetIdentityPoolRoles:
    post:
      description: <p>Sets the roles for an identity pool. These roles are used when
        making calls to <a>GetCredentialsForIdentity</a> action.</p> <p>You must use
        AWS Developer credentials to call this API.</p>
      operationId: SetIdentityPoolRoles
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AWSCognitoIdentityService.SetIdentityPoolRoles
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIdentityPoolRolesInput'
        required: true
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
          description: NotAuthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
          description: ResourceConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
          description: InternalErrorException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
          description: ConcurrentModificationException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=AWSCognitoIdentityService.SetPrincipalTagAttributeMap:
    post:
      description: You can use this operation to use default (username and clientID)
        attribute or custom attribute mappings.
      operationId: SetPrincipalTagAttributeMap
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AWSCognitoIdentityService.SetPrincipalTagAttributeMap
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPrincipalTagAttributeMapInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetPrincipalTagAttributeMapResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
          description: NotAuthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
          description: InternalErrorException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=AWSCognitoIdentityService.TagResource:
    post:
      description: "<p>Assigns a set of tags to the specified Amazon Cognito identity\
        \ pool. A tag is a label that you can use to categorize and manage identity\
        \ pools in different ways, such as by purpose, owner, environment, or other\
        \ criteria.</p> <p>Each tag consists of a key and value, both of which you\
        \ define. A key is a general category for more specific values. For example,\
        \ if you have two versions of an identity pool, one for testing and another\
        \ for production, you might assign an <code>Environment</code> tag key to\
        \ both identity pools. The value of this key might be <code>Test</code> for\
        \ one identity pool and <code>Production</code> for the other.</p> <p>Tags\
        \ are useful for cost tracking and access control. You can activate your tags\
        \ so that they appear on the Billing and Cost Management console, where you\
        \ can track the costs associated with your identity pools. In an IAM policy,\
        \ you can constrain permissions for identity pools based on specific tags\
        \ or tag values.</p> <p>You can use this action up to 5 times per second,\
        \ per account. An identity pool can have as many as 50 tags.</p>"
      operationId: TagResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AWSCognitoIdentityService.TagResource
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagResourceInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
          description: NotAuthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
          description: InternalErrorException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=AWSCognitoIdentityService.UnlinkDeveloperIdentity:
    post:
      description: "<p>Unlinks a <code>DeveloperUserIdentifier</code> from an existing\
        \ identity. Unlinked developer users will be considered new identities next\
        \ time they are seen. If, for a given Cognito identity, you remove all federated\
        \ identities as well as the developer user identifier, the Cognito identity\
        \ becomes inaccessible.</p> <p>You must use AWS Developer credentials to call\
        \ this API.</p>"
      operationId: UnlinkDeveloperIdentity
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AWSCognitoIdentityService.UnlinkDeveloperIdentity
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnlinkDeveloperIdentityInput'
        required: true
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
          description: NotAuthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
          description: ResourceConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
          description: InternalErrorException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=AWSCognitoIdentityService.UnlinkIdentity:
    post:
      description: <p>Unlinks a federated identity from an existing account. Unlinked
        logins will be considered new identities next time they are seen. Removing
        the last linked login will make this identity inaccessible.</p> <p>This is
        a public API. You do not need any credentials to call this API.</p>
      operationId: UnlinkIdentity
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AWSCognitoIdentityService.UnlinkIdentity
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnlinkIdentityInput'
        required: true
      responses:
        "200":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
          description: NotAuthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
          description: ResourceConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
          description: InternalErrorException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalServiceException'
          description: ExternalServiceException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=AWSCognitoIdentityService.UntagResource:
    post:
      description: "Removes the specified tags from the specified Amazon Cognito identity\
        \ pool. You can use this action up to 5 times per second, per account"
      operationId: UntagResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AWSCognitoIdentityService.UntagResource
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UntagResourceInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UntagResourceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
          description: NotAuthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
          description: InternalErrorException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=AWSCognitoIdentityService.UpdateIdentityPool:
    post:
      description: <p>Updates an identity pool.</p> <p>You must use AWS Developer
        credentials to call this API.</p>
      operationId: UpdateIdentityPool
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - AWSCognitoIdentityService.UpdateIdentityPool
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityPool'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityPool'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
          description: NotAuthorizedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
          description: ResourceConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
          description: InternalErrorException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
          description: ConcurrentModificationException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
      x-content-type: application/json
      x-accepts:
      - application/json
components:
  parameters:
    X-Amz-Content-Sha256:
      explode: false
      in: header
      name: X-Amz-Content-Sha256
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Date:
      explode: false
      in: header
      name: X-Amz-Date
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Algorithm:
      explode: false
      in: header
      name: X-Amz-Algorithm
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Credential:
      explode: false
      in: header
      name: X-Amz-Credential
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Security-Token:
      explode: false
      in: header
      name: X-Amz-Security-Token
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Signature:
      explode: false
      in: header
      name: X-Amz-Signature
      required: false
      schema:
        type: string
      style: simple
    X-Amz-SignedHeaders:
      explode: false
      in: header
      name: X-Amz-SignedHeaders
      required: false
      schema:
        type: string
      style: simple
  schemas:
    IdentityPool:
      description: An object representing an Amazon Cognito identity pool.
      example:
        CognitoIdentityProviders: ""
        DeveloperProviderName: ""
        IdentityPoolId: ""
        IdentityPoolName: ""
        AllowUnauthenticatedIdentities: ""
        SupportedLoginProviders: ""
        AllowClassicFlow: ""
        OpenIdConnectProviderARNs: ""
        SamlProviderARNs: ""
        IdentityPoolTags: ""
      properties:
        IdentityPoolId:
          allOf:
          - $ref: '#/components/schemas/IdentityPoolId'
          - description: An identity pool ID in the format REGION:GUID.
        IdentityPoolName:
          allOf:
          - $ref: '#/components/schemas/IdentityPoolName'
          - description: A string that you provide.
        AllowUnauthenticatedIdentities:
          allOf:
          - $ref: '#/components/schemas/IdentityPoolUnauthenticated'
          - description: TRUE if the identity pool supports unauthenticated logins.
        AllowClassicFlow:
          allOf:
          - $ref: '#/components/schemas/ClassicFlow'
          - description: "Enables or disables the Basic (Classic) authentication flow.\
              \ For more information, see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html\"\
              >Identity Pools (Federated Identities) Authentication Flow</a> in the\
              \ <i>Amazon Cognito Developer Guide</i>."
        SupportedLoginProviders:
          allOf:
          - $ref: '#/components/schemas/IdentityProviders'
          - description: Optional key:value pairs mapping provider names to provider
              app IDs.
        DeveloperProviderName:
          allOf:
          - $ref: '#/components/schemas/DeveloperProviderName'
          - description: The "domain" by which Cognito will refer to your users.
        OpenIdConnectProviderARNs:
          allOf:
          - $ref: '#/components/schemas/OIDCProviderList'
          - description: The ARNs of the OpenID Connect providers.
        CognitoIdentityProviders:
          allOf:
          - $ref: '#/components/schemas/CognitoIdentityProviderList'
          - description: A list representing an Amazon Cognito user pool and its client
              ID.
        SamlProviderARNs:
          allOf:
          - $ref: '#/components/schemas/SAMLProviderList'
          - description: An array of Amazon Resource Names (ARNs) of the SAML provider
              for your identity pool.
        IdentityPoolTags:
          allOf:
          - $ref: '#/components/schemas/IdentityPoolTagsType'
          - description: "The tags that are assigned to the identity pool. A tag is\
              \ a label that you can apply to identity pools to categorize and manage\
              \ them in different ways, such as by purpose, owner, environment, or\
              \ other criteria."
      required:
      - AllowUnauthenticatedIdentities
      - IdentityPoolId
      - IdentityPoolName
      title: IdentityPool
      type: object
    CreateIdentityPoolInput:
      description: Input to the CreateIdentityPool action.
      example:
        CognitoIdentityProviders: ""
        DeveloperProviderName: ""
        IdentityPoolName: ""
        AllowUnauthenticatedIdentities: ""
        SupportedLoginProviders: ""
        AllowClassicFlow: ""
        OpenIdConnectProviderARNs: ""
        SamlProviderARNs: ""
        IdentityPoolTags: ""
      properties:
        IdentityPoolName:
          allOf:
          - $ref: '#/components/schemas/IdentityPoolName'
          - description: A string that you provide.
        AllowUnauthenticatedIdentities:
          allOf:
          - $ref: '#/components/schemas/IdentityPoolUnauthenticated'
          - description: TRUE if the identity pool supports unauthenticated logins.
        AllowClassicFlow:
          allOf:
          - $ref: '#/components/schemas/ClassicFlow'
          - description: "Enables or disables the Basic (Classic) authentication flow.\
              \ For more information, see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html\"\
              >Identity Pools (Federated Identities) Authentication Flow</a> in the\
              \ <i>Amazon Cognito Developer Guide</i>."
        SupportedLoginProviders:
          allOf:
          - $ref: '#/components/schemas/IdentityProviders'
          - description: Optional key:value pairs mapping provider names to provider
              app IDs.
        DeveloperProviderName:
          allOf:
          - $ref: '#/components/schemas/DeveloperProviderName'
          - description: "<p>The \"domain\" by which Cognito will refer to your users.\
              \ This name acts as a placeholder that allows your backend and the Cognito\
              \ service to communicate about the developer provider. For the <code>DeveloperProviderName</code>,\
              \ you can use letters as well as period (<code>.</code>), underscore\
              \ (<code>_</code>), and dash (<code>-</code>).</p> <p>Once you have\
              \ set a developer provider name, you cannot change it. Please take care\
              \ in setting this parameter.</p>"
        OpenIdConnectProviderARNs:
          allOf:
          - $ref: '#/components/schemas/OIDCProviderList'
          - description: The Amazon Resource Names (ARN) of the OpenID Connect providers.
        CognitoIdentityProviders:
          allOf:
          - $ref: '#/components/schemas/CognitoIdentityProviderList'
          - description: An array of Amazon Cognito user pools and their client IDs.
        SamlProviderARNs:
          allOf:
          - $ref: '#/components/schemas/SAMLProviderList'
          - description: An array of Amazon Resource Names (ARNs) of the SAML provider
              for your identity pool.
        IdentityPoolTags:
          allOf:
          - $ref: '#/components/schemas/IdentityPoolTagsType'
          - description: "Tags to assign to the identity pool. A tag is a label that\
              \ you can apply to identity pools to categorize and manage them in different\
              \ ways, such as by purpose, owner, environment, or other criteria."
      required:
      - AllowUnauthenticatedIdentities
      - IdentityPoolName
      title: CreateIdentityPoolInput
      type: object
    InvalidParameterException: {}
    NotAuthorizedException: {}
    ResourceConflictException: {}
    TooManyRequestsException: {}
    InternalErrorException: {}
    LimitExceededException: {}
    DeleteIdentitiesResponse:
      description: Returned in response to a successful <code>DeleteIdentities</code>
        operation.
      example:
        UnprocessedIdentityIds: ""
      properties:
        UnprocessedIdentityIds:
          allOf:
          - $ref: '#/components/schemas/UnprocessedIdentityIdList'
          - description: "An array of UnprocessedIdentityId objects, each of which\
              \ contains an ErrorCode and IdentityId."
      type: object
    DeleteIdentitiesInput:
      description: Input to the <code>DeleteIdentities</code> action.
      example:
        IdentityIdsToDelete: ""
      properties:
        IdentityIdsToDelete:
          allOf:
          - $ref: '#/components/schemas/IdentityIdList'
          - description: A list of 1-60 identities that you want to delete.
      required:
      - IdentityIdsToDelete
      title: DeleteIdentitiesInput
      type: object
    DeleteIdentityPoolInput:
      description: Input to the DeleteIdentityPool action.
      example:
        IdentityPoolId: ""
      properties:
        IdentityPoolId:
          allOf:
          - $ref: '#/components/schemas/IdentityPoolId'
          - description: An identity pool ID in the format REGION:GUID.
      required:
      - IdentityPoolId
      title: DeleteIdentityPoolInput
      type: object
    ResourceNotFoundException: {}
    IdentityDescription:
      description: A description of the identity.
      example:
        CreationDate: ""
        LastModifiedDate: ""
        Logins: ""
        IdentityId: ""
      properties:
        IdentityId:
          allOf:
          - $ref: '#/components/schemas/IdentityId'
          - description: A unique identifier in the format REGION:GUID.
        Logins:
          allOf:
          - $ref: '#/components/schemas/LoginsList'
          - description: The provider names.
        CreationDate:
          allOf:
          - $ref: '#/components/schemas/DateType'
          - description: Date on which the identity was created.
        LastModifiedDate:
          allOf:
          - $ref: '#/components/schemas/DateType'
          - description: Date on which the identity was last modified.
      type: object
    DescribeIdentityInput:
      description: Input to the <code>DescribeIdentity</code> action.
      example:
        IdentityId: ""
      properties:
        IdentityId:
          allOf:
          - $ref: '#/components/schemas/IdentityId'
          - description: A unique identifier in the format REGION:GUID.
      required:
      - IdentityId
      title: DescribeIdentityInput
      type: object
    DescribeIdentityPoolInput:
      description: Input to the DescribeIdentityPool action.
      example:
        IdentityPoolId: ""
      properties:
        IdentityPoolId:
          allOf:
          - $ref: '#/components/schemas/IdentityPoolId'
          - description: An identity pool ID in the format REGION:GUID.
      required:
      - IdentityPoolId
      title: DescribeIdentityPoolInput
      type: object
    GetCredentialsForIdentityResponse:
      description: Returned in response to a successful <code>GetCredentialsForIdentity</code>
        operation.
      example:
        IdentityId: ""
        Credentials:
          SecretKey: ""
          SessionToken: ""
          AccessKeyId: ""
          Expiration: ""
      properties:
        IdentityId:
          allOf:
          - $ref: '#/components/schemas/IdentityId'
          - description: A unique identifier in the format REGION:GUID.
        Credentials:
          $ref: '#/components/schemas/GetCredentialsForIdentityResponse_Credentials'
      type: object
    GetCredentialsForIdentityInput:
      description: Input to the <code>GetCredentialsForIdentity</code> action.
      example:
        CustomRoleArn: ""
        Logins: ""
        IdentityId: ""
      properties:
        IdentityId:
          allOf:
          - $ref: '#/components/schemas/IdentityId'
          - description: A unique identifier in the format REGION:GUID.
        Logins:
          allOf:
          - $ref: '#/components/schemas/LoginsMap'
          - description: "<p>A set of optional name-value pairs that map provider\
              \ names to provider tokens. The name-value pair will follow the syntax\
              \ \"provider_name\": \"provider_user_identifier\".</p> <p>Logins should\
              \ not be specified when trying to get credentials for an unauthenticated\
              \ identity.</p> <p>The Logins parameter is required when using identities\
              \ associated with external identity providers such as Facebook. For\
              \ examples of <code>Logins</code> maps, see the code examples in the\
              \ <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/external-identity-providers.html\"\
              >External Identity Providers</a> section of the Amazon Cognito Developer\
              \ Guide.</p>"
        CustomRoleArn:
          allOf:
          - $ref: '#/components/schemas/ARNString'
          - description: "The Amazon Resource Name (ARN) of the role to be assumed\
              \ when multiple roles were received in the token from the identity provider.\
              \ For example, a SAML-based identity provider. This parameter is optional\
              \ for identity providers that do not support role customization."
      required:
      - IdentityId
      title: GetCredentialsForIdentityInput
      type: object
    InvalidIdentityPoolConfigurationException: {}
    ExternalServiceException: {}
    GetIdResponse:
      description: Returned in response to a GetId request.
      example:
        IdentityId: ""
      properties:
        IdentityId:
          allOf:
          - $ref: '#/components/schemas/IdentityId'
          - description: A unique identifier in the format REGION:GUID.
      type: object
    GetIdInput:
      description: Input to the GetId action.
      example:
        AccountId: ""
        Logins: ""
        IdentityPoolId: ""
      properties:
        AccountId:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          - description: A standard AWS account ID (9+ digits).
        IdentityPoolId:
          allOf:
          - $ref: '#/components/schemas/IdentityPoolId'
          - description: An identity pool ID in the format REGION:GUID.
        Logins:
          allOf:
          - $ref: '#/components/schemas/LoginsMap'
          - description: "<p>A set of optional name-value pairs that map provider\
              \ names to provider tokens. The available provider names for <code>Logins</code>\
              \ are as follows:</p> <ul> <li> <p>Facebook: <code>graph.facebook.com</code>\
              \ </p> </li> <li> <p>Amazon Cognito user pool: <code>cognito-idp.&lt;region&gt;.amazonaws.com/&lt;YOUR_USER_POOL_ID&gt;</code>,\
              \ for example, <code>cognito-idp.us-east-1.amazonaws.com/us-east-1_123456789</code>.\
              \ </p> </li> <li> <p>Google: <code>accounts.google.com</code> </p> </li>\
              \ <li> <p>Amazon: <code>www.amazon.com</code> </p> </li> <li> <p>Twitter:\
              \ <code>api.twitter.com</code> </p> </li> <li> <p>Digits: <code>www.digits.com</code>\
              \ </p> </li> </ul>"
      required:
      - IdentityPoolId
      title: GetIdInput
      type: object
    GetIdentityPoolRolesResponse:
      description: Returned in response to a successful <code>GetIdentityPoolRoles</code>
        operation.
      example:
        RoleMappings: ""
        IdentityPoolId: ""
        Roles: ""
      properties:
        IdentityPoolId:
          allOf:
          - $ref: '#/components/schemas/IdentityPoolId'
          - description: An identity pool ID in the format REGION:GUID.
        Roles:
          allOf:
          - $ref: '#/components/schemas/RolesMap'
          - description: The map of roles associated with this pool. Currently only
              authenticated and unauthenticated roles are supported.
        RoleMappings:
          allOf:
          - $ref: '#/components/schemas/RoleMappingMap'
          - description: "How users for a specific identity provider are to mapped\
              \ to roles. This is a String-to-<a>RoleMapping</a> object map. The string\
              \ identifies the identity provider, for example, \"graph.facebook.com\"\
              \ or \"cognito-idp.us-east-1.amazonaws.com/us-east-1_abcdefghi:app_client_id\"\
              ."
      type: object
    GetIdentityPoolRolesInput:
      description: Input to the <code>GetIdentityPoolRoles</code> action.
      example:
        IdentityPoolId: ""
      properties:
        IdentityPoolId:
          allOf:
          - $ref: '#/components/schemas/IdentityPoolId'
          - description: An identity pool ID in the format REGION:GUID.
      required:
      - IdentityPoolId
      title: GetIdentityPoolRolesInput
      type: object
    GetOpenIdTokenResponse:
      description: Returned in response to a successful GetOpenIdToken request.
      example:
        IdentityId: ""
        Token: ""
      properties:
        IdentityId:
          allOf:
          - $ref: '#/components/schemas/IdentityId'
          - description: A unique identifier in the format REGION:GUID. Note that
              the IdentityId returned may not match the one passed on input.
        Token:
          allOf:
          - $ref: '#/components/schemas/OIDCToken'
          - description: "An OpenID token, valid for 10 minutes."
      type: object
    GetOpenIdTokenInput:
      description: Input to the GetOpenIdToken action.
      example:
        Logins: ""
        IdentityId: ""
      properties:
        IdentityId:
          allOf:
          - $ref: '#/components/schemas/IdentityId'
          - description: A unique identifier in the format REGION:GUID.
        Logins:
          allOf:
          - $ref: '#/components/schemas/LoginsMap'
          - description: "A set of optional name-value pairs that map provider names\
              \ to provider tokens. When using graph.facebook.com and www.amazon.com,\
              \ supply the access_token returned from the provider's authflow. For\
              \ accounts.google.com, an Amazon Cognito user pool provider, or any\
              \ other OpenID Connect provider, always include the <code>id_token</code>."
      required:
      - IdentityId
      title: GetOpenIdTokenInput
      type: object
    GetOpenIdTokenForDeveloperIdentityResponse:
      description: Returned in response to a successful <code>GetOpenIdTokenForDeveloperIdentity</code>
        request.
      example:
        IdentityId: ""
        Token: ""
      properties:
        IdentityId:
          allOf:
          - $ref: '#/components/schemas/IdentityId'
          - description: A unique identifier in the format REGION:GUID.
        Token:
          allOf:
          - $ref: '#/components/schemas/OIDCToken'
          - description: An OpenID token.
      type: object
    GetOpenIdTokenForDeveloperIdentityInput:
      description: Input to the <code>GetOpenIdTokenForDeveloperIdentity</code> action.
      example:
        PrincipalTags: ""
        Logins: ""
        TokenDuration: ""
        IdentityId: ""
        IdentityPoolId: ""
      properties:
        IdentityPoolId:
          allOf:
          - $ref: '#/components/schemas/IdentityPoolId'
          - description: An identity pool ID in the format REGION:GUID.
        IdentityId:
          allOf:
          - $ref: '#/components/schemas/IdentityId'
          - description: A unique identifier in the format REGION:GUID.
        Logins:
          allOf:
          - $ref: '#/components/schemas/LoginsMap'
          - description: "A set of optional name-value pairs that map provider names\
              \ to provider tokens. Each name-value pair represents a user from a\
              \ public provider or developer provider. If the user is from a developer\
              \ provider, the name-value pair will follow the syntax <code>\"developer_provider_name\"\
              : \"developer_user_identifier\"</code>. The developer provider is the\
              \ \"domain\" by which Cognito will refer to your users; you provided\
              \ this domain while creating/updating the identity pool. The developer\
              \ user identifier is an identifier from your backend that uniquely identifies\
              \ a user. When you create an identity pool, you can specify the supported\
              \ logins."
        PrincipalTags:
          allOf:
          - $ref: '#/components/schemas/PrincipalTags'
          - description: 'Use this operation to configure attribute mappings for custom
              providers. '
        TokenDuration:
          allOf:
          - $ref: '#/components/schemas/TokenDuration'
          - description: "<p>The expiration time of the token, in seconds. You can\
              \ specify a custom expiration time for the token so that you can cache\
              \ it. If you don't provide an expiration time, the token is valid for\
              \ 15 minutes. You can exchange the token with Amazon STS for temporary\
              \ AWS credentials, which are valid for a maximum of one hour. The maximum\
              \ token duration you can set is 24 hours. You should take care in setting\
              \ the expiration time for a token, as there are significant security\
              \ implications: an attacker could use a leaked token to access your\
              \ AWS resources for the token's duration.</p> <note> <p>Please provide\
              \ for a small grace period, usually no more than 5 minutes, to account\
              \ for clock skew.</p> </note>"
      required:
      - IdentityPoolId
      - Logins
      title: GetOpenIdTokenForDeveloperIdentityInput
      type: object
    DeveloperUserAlreadyRegisteredException: {}
    GetPrincipalTagAttributeMapResponse:
      example:
        PrincipalTags: ""
        UseDefaults: ""
        IdentityProviderName: ""
        IdentityPoolId: ""
      properties:
        IdentityPoolId:
          allOf:
          - $ref: '#/components/schemas/IdentityPoolId'
          - description: You can use this operation to get the ID of the Identity
              Pool you setup attribute mappings for.
        IdentityProviderName:
          allOf:
          - $ref: '#/components/schemas/IdentityProviderName'
          - description: You can use this operation to get the provider name.
        UseDefaults:
          allOf:
          - $ref: '#/components/schemas/UseDefaults'
          - description: 'You can use this operation to list '
        PrincipalTags:
          allOf:
          - $ref: '#/components/schemas/PrincipalTags'
          - description: You can use this operation to add principal tags. The <code>PrincipalTags</code>operation
              enables you to reference user attributes in your IAM permissions policy.
      type: object
    GetPrincipalTagAttributeMapInput:
      example:
        IdentityProviderName: ""
        IdentityPoolId: ""
      properties:
        IdentityPoolId:
          allOf:
          - $ref: '#/components/schemas/IdentityPoolId'
          - description: You can use this operation to get the ID of the Identity
              Pool you setup attribute mappings for.
        IdentityProviderName:
          allOf:
          - $ref: '#/components/schemas/IdentityProviderName'
          - description: You can use this operation to get the provider name.
      required:
      - IdentityPoolId
      - IdentityProviderName
      title: GetPrincipalTagAttributeMapInput
      type: object
    ListIdentitiesResponse:
      description: The response to a ListIdentities request.
      example:
        NextToken: ""
        IdentityPoolId: ""
        Identities: ""
      properties:
        IdentityPoolId:
          allOf:
          - $ref: '#/components/schemas/IdentityPoolId'
          - description: An identity pool ID in the format REGION:GUID.
        Identities:
          allOf:
          - $ref: '#/components/schemas/IdentitiesList'
          - description: An object containing a set of identities and associated mappings.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationKey'
          - description: A pagination token.
      type: object
    ListIdentitiesInput:
      description: Input to the ListIdentities action.
      example:
        NextToken: ""
        MaxResults: ""
        IdentityPoolId: ""
        HideDisabled: ""
      properties:
        IdentityPoolId:
          allOf:
          - $ref: '#/components/schemas/IdentityPoolId'
          - description: An identity pool ID in the format REGION:GUID.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/QueryLimit'
          - description: The maximum number of identities to return.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationKey'
          - description: A pagination token.
        HideDisabled:
          allOf:
          - $ref: '#/components/schemas/HideDisabled'
          - description: "An optional boolean parameter that allows you to hide disabled\
              \ identities. If omitted, the ListIdentities API will include disabled\
              \ identities in the response."
      required:
      - IdentityPoolId
      - MaxResults
      title: ListIdentitiesInput
      type: object
    ListIdentityPoolsResponse:
      description: The result of a successful ListIdentityPools action.
      example:
        NextToken: ""
        IdentityPools: ""
      properties:
        IdentityPools:
          allOf:
          - $ref: '#/components/schemas/IdentityPoolsList'
          - description: The identity pools returned by the ListIdentityPools action.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationKey'
          - description: A pagination token.
      type: object
    ListIdentityPoolsInput:
      description: Input to the ListIdentityPools action.
      example:
        NextToken: ""
        MaxResults: ""
      properties:
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/QueryLimit'
          - description: The maximum number of identities to return.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationKey'
          - description: A pagination token.
      required:
      - MaxResults
      title: ListIdentityPoolsInput
      type: object
    ListTagsForResourceResponse:
      example:
        Tags: ""
      properties:
        Tags:
          allOf:
          - $ref: '#/components/schemas/IdentityPoolTagsType'
          - description: The tags that are assigned to the identity pool.
      type: object
    ListTagsForResourceInput:
      example:
        ResourceArn: ""
      properties:
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/ARNString'
          - description: The Amazon Resource Name (ARN) of the identity pool that
              the tags are assigned to.
      required:
      - ResourceArn
      title: ListTagsForResourceInput
      type: object
    LookupDeveloperIdentityResponse:
      description: Returned in response to a successful <code>LookupDeveloperIdentity</code>
        action.
      example:
        DeveloperUserIdentifierList: ""
        NextToken: ""
        IdentityId: ""
      properties:
        IdentityId:
          allOf:
          - $ref: '#/components/schemas/IdentityId'
          - description: A unique identifier in the format REGION:GUID.
        DeveloperUserIdentifierList:
          allOf:
          - $ref: '#/components/schemas/DeveloperUserIdentifierList'
          - description: This is the list of developer user identifiers associated
              with an identity ID. Cognito supports the association of multiple developer
              user identifiers with an identity ID.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationKey'
          - description: "A pagination token. The first call you make will have <code>NextToken</code>\
              \ set to null. After that the service will return <code>NextToken</code>\
              \ values as needed. For example, let's say you make a request with <code>MaxResults</code>\
              \ set to 10, and there are 20 matches in the database. The service will\
              \ return a pagination token as a part of the response. This token can\
              \ be used to call the API again and get results starting from the 11th\
              \ match."
      type: object
    LookupDeveloperIdentityInput:
      description: Input to the <code>LookupDeveloperIdentityInput</code> action.
      example:
        NextToken: ""
        MaxResults: ""
        IdentityId: ""
        DeveloperUserIdentifier: ""
        IdentityPoolId: ""
      properties:
        IdentityPoolId:
          allOf:
          - $ref: '#/components/schemas/IdentityPoolId'
          - description: An identity pool ID in the format REGION:GUID.
        IdentityId:
          allOf:
          - $ref: '#/components/schemas/IdentityId'
          - description: A unique identifier in the format REGION:GUID.
        DeveloperUserIdentifier:
          allOf:
          - $ref: '#/components/schemas/DeveloperUserIdentifier'
          - description: "A unique ID used by your backend authentication process\
              \ to identify a user. Typically, a developer identity provider would\
              \ issue many developer user identifiers, in keeping with the number\
              \ of users."
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/QueryLimit'
          - description: The maximum number of identities to return.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationKey'
          - description: "A pagination token. The first call you make will have <code>NextToken</code>\
              \ set to null. After that the service will return <code>NextToken</code>\
              \ values as needed. For example, let's say you make a request with <code>MaxResults</code>\
              \ set to 10, and there are 20 matches in the database. The service will\
              \ return a pagination token as a part of the response. This token can\
              \ be used to call the API again and get results starting from the 11th\
              \ match."
      required:
      - IdentityPoolId
      title: LookupDeveloperIdentityInput
      type: object
    MergeDeveloperIdentitiesResponse:
      description: Returned in response to a successful <code>MergeDeveloperIdentities</code>
        action.
      example:
        IdentityId: ""
      properties:
        IdentityId:
          allOf:
          - $ref: '#/components/schemas/IdentityId'
          - description: A unique identifier in the format REGION:GUID.
      type: object
    MergeDeveloperIdentitiesInput:
      description: Input to the <code>MergeDeveloperIdentities</code> action.
      example:
        SourceUserIdentifier: ""
        DeveloperProviderName: ""
        IdentityPoolId: ""
        DestinationUserIdentifier: ""
      properties:
        SourceUserIdentifier:
          allOf:
          - $ref: '#/components/schemas/DeveloperUserIdentifier'
          - description: User identifier for the source user. The value should be
              a <code>DeveloperUserIdentifier</code>.
        DestinationUserIdentifier:
          allOf:
          - $ref: '#/components/schemas/DeveloperUserIdentifier'
          - description: User identifier for the destination user. The value should
              be a <code>DeveloperUserIdentifier</code>.
        DeveloperProviderName:
          allOf:
          - $ref: '#/components/schemas/DeveloperProviderName'
          - description: "The \"domain\" by which Cognito will refer to your users.\
              \ This is a (pseudo) domain name that you provide while creating an\
              \ identity pool. This name acts as a placeholder that allows your backend\
              \ and the Cognito service to communicate about the developer provider.\
              \ For the <code>DeveloperProviderName</code>, you can use letters as\
              \ well as period (.), underscore (_), and dash (-)."
        IdentityPoolId:
          allOf:
          - $ref: '#/components/schemas/IdentityPoolId'
          - description: An identity pool ID in the format REGION:GUID.
      required:
      - DestinationUserIdentifier
      - DeveloperProviderName
      - IdentityPoolId
      - SourceUserIdentifier
      title: MergeDeveloperIdentitiesInput
      type: object
    SetIdentityPoolRolesInput:
      description: Input to the <code>SetIdentityPoolRoles</code> action.
      example:
        RoleMappings: ""
        IdentityPoolId: ""
        Roles: ""
      properties:
        IdentityPoolId:
          allOf:
          - $ref: '#/components/schemas/IdentityPoolId'
          - description: An identity pool ID in the format REGION:GUID.
        Roles:
          allOf:
          - $ref: '#/components/schemas/RolesMap'
          - description: "The map of roles associated with this pool. For a given\
              \ role, the key will be either \"authenticated\" or \"unauthenticated\"\
              \ and the value will be the Role ARN."
        RoleMappings:
          allOf:
          - $ref: '#/components/schemas/RoleMappingMap'
          - description: "<p>How users for a specific identity provider are to mapped\
              \ to roles. This is a string to <a>RoleMapping</a> object map. The string\
              \ identifies the identity provider, for example, \"graph.facebook.com\"\
              \ or \"cognito-idp.us-east-1.amazonaws.com/us-east-1_abcdefghi:app_client_id\"\
              .</p> <p>Up to 25 rules can be specified per identity provider.</p>"
      required:
      - IdentityPoolId
      - Roles
      title: SetIdentityPoolRolesInput
      type: object
    ConcurrentModificationException: {}
    SetPrincipalTagAttributeMapResponse:
      example:
        PrincipalTags: ""
        UseDefaults: ""
        IdentityProviderName: ""
        IdentityPoolId: ""
      properties:
        IdentityPoolId:
          allOf:
          - $ref: '#/components/schemas/IdentityPoolId'
          - description: The ID of the Identity Pool you want to set attribute mappings
              for.
        IdentityProviderName:
          allOf:
          - $ref: '#/components/schemas/IdentityProviderName'
          - description: The provider name you want to use for attribute mappings.
        UseDefaults:
          allOf:
          - $ref: '#/components/schemas/UseDefaults'
          - description: You can use this operation to select default (username and
              clientID) attribute mappings.
        PrincipalTags:
          allOf:
          - $ref: '#/components/schemas/PrincipalTags'
          - description: You can use this operation to add principal tags. The <code>PrincipalTags</code>operation
              enables you to reference user attributes in your IAM permissions policy.
      type: object
    SetPrincipalTagAttributeMapInput:
      example:
        PrincipalTags: ""
        UseDefaults: ""
        IdentityProviderName: ""
        IdentityPoolId: ""
      properties:
        IdentityPoolId:
          allOf:
          - $ref: '#/components/schemas/IdentityPoolId'
          - description: The ID of the Identity Pool you want to set attribute mappings
              for.
        IdentityProviderName:
          allOf:
          - $ref: '#/components/schemas/IdentityProviderName'
          - description: The provider name you want to use for attribute mappings.
        UseDefaults:
          allOf:
          - $ref: '#/components/schemas/UseDefaults'
          - description: You can use this operation to use default (username and clientID)
              attribute mappings.
        PrincipalTags:
          allOf:
          - $ref: '#/components/schemas/PrincipalTags'
          - description: You can use this operation to add principal tags.
      required:
      - IdentityPoolId
      - IdentityProviderName
      title: SetPrincipalTagAttributeMapInput
      type: object
    TagResourceResponse:
      properties: {}
      type: object
    TagResourceInput:
      example:
        ResourceArn: ""
        Tags: ""
      properties:
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/ARNString'
          - description: The Amazon Resource Name (ARN) of the identity pool.
        Tags:
          allOf:
          - $ref: '#/components/schemas/IdentityPoolTagsType'
          - description: The tags to assign to the identity pool.
      required:
      - ResourceArn
      - Tags
      title: TagResourceInput
      type: object
    UnlinkDeveloperIdentityInput:
      description: Input to the <code>UnlinkDeveloperIdentity</code> action.
      example:
        DeveloperProviderName: ""
        IdentityId: ""
        DeveloperUserIdentifier: ""
        IdentityPoolId: ""
      properties:
        IdentityId:
          allOf:
          - $ref: '#/components/schemas/IdentityId'
          - description: A unique identifier in the format REGION:GUID.
        IdentityPoolId:
          allOf:
          - $ref: '#/components/schemas/IdentityPoolId'
          - description: An identity pool ID in the format REGION:GUID.
        DeveloperProviderName:
          allOf:
          - $ref: '#/components/schemas/DeveloperProviderName'
          - description: The "domain" by which Cognito will refer to your users.
        DeveloperUserIdentifier:
          allOf:
          - $ref: '#/components/schemas/DeveloperUserIdentifier'
          - description: A unique ID used by your backend authentication process to
              identify a user.
      required:
      - DeveloperProviderName
      - DeveloperUserIdentifier
      - IdentityId
      - IdentityPoolId
      title: UnlinkDeveloperIdentityInput
      type: object
    UnlinkIdentityInput:
      description: Input to the UnlinkIdentity action.
      example:
        Logins: ""
        IdentityId: ""
        LoginsToRemove: ""
      properties:
        IdentityId:
          allOf:
          - $ref: '#/components/schemas/IdentityId'
          - description: A unique identifier in the format REGION:GUID.
        Logins:
          allOf:
          - $ref: '#/components/schemas/LoginsMap'
          - description: A set of optional name-value pairs that map provider names
              to provider tokens.
        LoginsToRemove:
          allOf:
          - $ref: '#/components/schemas/LoginsList'
          - description: Provider names to unlink from this identity.
      required:
      - IdentityId
      - Logins
      - LoginsToRemove
      title: UnlinkIdentityInput
      type: object
    UntagResourceResponse:
      properties: {}
      type: object
    UntagResourceInput:
      example:
        ResourceArn: ""
        TagKeys: ""
      properties:
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/ARNString'
          - description: The Amazon Resource Name (ARN) of the identity pool.
        TagKeys:
          allOf:
          - $ref: '#/components/schemas/IdentityPoolTagsListType'
          - description: The keys of the tags to remove from the user pool.
      required:
      - ResourceArn
      - TagKeys
      title: UntagResourceInput
      type: object
    ARNString:
      maxLength: 2048
      minLength: 20
      type: string
    AccessKeyString:
      type: string
    AccountId:
      maxLength: 15
      minLength: 1
      pattern: \d+
      type: string
    AmbiguousRoleResolutionType:
      enum:
      - AuthenticatedRole
      - Deny
      type: string
    ClaimName:
      maxLength: 64
      minLength: 1
      pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+"
      type: string
    ClaimValue:
      maxLength: 128
      minLength: 1
      type: string
    ClassicFlow:
      type: boolean
    CognitoIdentityProviderName:
      maxLength: 128
      minLength: 1
      pattern: "[\\w._:/-]+"
      type: string
    CognitoIdentityProviderClientId:
      maxLength: 128
      minLength: 1
      pattern: "[\\w_]+"
      type: string
    CognitoIdentityProviderTokenCheck:
      type: boolean
    CognitoIdentityProvider:
      description: A provider representing an Amazon Cognito user pool and its client
        ID.
      properties:
        ProviderName:
          allOf:
          - $ref: '#/components/schemas/CognitoIdentityProviderName'
          - description: "The provider name for an Amazon Cognito user pool. For example,\
              \ <code>cognito-idp.us-east-1.amazonaws.com/us-east-1_123456789</code>."
        ClientId:
          allOf:
          - $ref: '#/components/schemas/CognitoIdentityProviderClientId'
          - description: The client ID for the Amazon Cognito user pool.
        ServerSideTokenCheck:
          allOf:
          - $ref: '#/components/schemas/CognitoIdentityProviderTokenCheck'
          - description: "<p>TRUE if server-side token validation is enabled for the\
              \ identity provider’s token.</p> <p>Once you set <code>ServerSideTokenCheck</code>\
              \ to TRUE for an identity pool, that identity pool will check with the\
              \ integrated user pools to make sure that the user has not been globally\
              \ signed out or deleted before the identity pool provides an OIDC token\
              \ or AWS credentials for the user.</p> <p>If the user is signed out\
              \ or deleted, the identity pool will return a 400 Not Authorized error.</p>"
      type: object
    CognitoIdentityProviderList:
      items:
        $ref: '#/components/schemas/CognitoIdentityProvider'
      type: array
    IdentityPoolName:
      maxLength: 128
      minLength: 1
      pattern: "[\\w\\s+=,.@-]+"
      type: string
    IdentityPoolUnauthenticated:
      type: boolean
    IdentityProviders:
      additionalProperties:
        $ref: '#/components/schemas/IdentityProviderId'
      maxProperties: 10
      type: object
    DeveloperProviderName:
      maxLength: 128
      minLength: 1
      pattern: "[\\w._-]+"
      type: string
    OIDCProviderList:
      items:
        $ref: '#/components/schemas/ARNString'
      type: array
    SAMLProviderList:
      items:
        $ref: '#/components/schemas/ARNString'
      type: array
    IdentityPoolTagsType:
      additionalProperties:
        $ref: '#/components/schemas/TagValueType'
      type: object
    SecretKeyString:
      type: string
    SessionTokenString:
      type: string
    DateType:
      format: date-time
      type: string
    Credentials:
      description: Credentials for the provided identity ID.
      properties:
        AccessKeyId:
          allOf:
          - $ref: '#/components/schemas/AccessKeyString'
          - description: The Access Key portion of the credentials.
        SecretKey:
          allOf:
          - $ref: '#/components/schemas/SecretKeyString'
          - description: The Secret Access Key portion of the credentials
        SessionToken:
          allOf:
          - $ref: '#/components/schemas/SessionTokenString'
          - description: The Session Token portion of the credentials
        Expiration:
          allOf:
          - $ref: '#/components/schemas/DateType'
          - description: The date at which these credentials will expire.
      type: object
    IdentityIdList:
      items:
        $ref: '#/components/schemas/IdentityId'
      maxItems: 60
      minItems: 1
      type: array
    UnprocessedIdentityIdList:
      items:
        $ref: '#/components/schemas/UnprocessedIdentityId'
      maxItems: 60
      type: array
    IdentityPoolId:
      maxLength: 55
      minLength: 1
      pattern: "[\\w-]+:[0-9a-f-]+"
      type: string
    IdentityId:
      maxLength: 55
      minLength: 1
      pattern: "[\\w-]+:[0-9a-f-]+"
      type: string
    DeveloperUserIdentifier:
      maxLength: 1024
      minLength: 1
      type: string
    DeveloperUserIdentifierList:
      items:
        $ref: '#/components/schemas/DeveloperUserIdentifier'
      type: array
    ErrorCode:
      enum:
      - AccessDenied
      - InternalServerError
      type: string
    LoginsMap:
      additionalProperties:
        $ref: '#/components/schemas/IdentityProviderToken'
      maxProperties: 10
      type: object
    RolesMap:
      additionalProperties:
        $ref: '#/components/schemas/ARNString'
      maxProperties: 2
      type: object
    RoleMappingMap:
      additionalProperties:
        $ref: '#/components/schemas/RoleMapping'
      maxProperties: 10
      type: object
    PrincipalTags:
      additionalProperties:
        $ref: '#/components/schemas/PrincipalTagValue'
      maxProperties: 50
      type: object
    TokenDuration:
      maximum: 86400
      minimum: 1
      type: integer
    OIDCToken:
      type: string
    IdentityProviderName:
      maxLength: 128
      minLength: 1
      type: string
    UseDefaults:
      type: boolean
    HideDisabled:
      type: boolean
    IdentitiesList:
      items:
        $ref: '#/components/schemas/IdentityDescription'
      type: array
    LoginsList:
      items:
        $ref: '#/components/schemas/IdentityProviderName'
      type: array
    IdentityPoolShortDescription:
      description: A description of the identity pool.
      properties:
        IdentityPoolId:
          allOf:
          - $ref: '#/components/schemas/IdentityPoolId'
          - description: An identity pool ID in the format REGION:GUID.
        IdentityPoolName:
          allOf:
          - $ref: '#/components/schemas/IdentityPoolName'
          - description: A string that you provide.
      type: object
    TagKeysType:
      maxLength: 128
      minLength: 1
      type: string
    IdentityPoolTagsListType:
      items:
        $ref: '#/components/schemas/TagKeysType'
      type: array
    TagValueType:
      maxLength: 256
      minLength: 0
      type: string
    IdentityPoolsList:
      items:
        $ref: '#/components/schemas/IdentityPoolShortDescription'
      type: array
    IdentityProviderId:
      maxLength: 128
      minLength: 1
      pattern: "[\\w.;_/-]+"
      type: string
    IdentityProviderToken:
      maxLength: 50000
      minLength: 1
      type: string
    QueryLimit:
      maximum: 60
      minimum: 1
      type: integer
    PaginationKey:
      maxLength: 65535
      minLength: 1
      pattern: "[\\S]+"
      type: string
    MappingRuleMatchType:
      enum:
      - Equals
      - Contains
      - StartsWith
      - NotEqual
      type: string
    MappingRule:
      description: "A rule that maps a claim name, a claim value, and a match type\
        \ to a role ARN."
      properties:
        Claim:
          allOf:
          - $ref: '#/components/schemas/ClaimName'
          - description: "The claim name that must be present in the token, for example,\
              \ \"isAdmin\" or \"paid\"."
        MatchType:
          allOf:
          - $ref: '#/components/schemas/MappingRuleMatchType'
          - description: The match condition that specifies how closely the claim
              value in the IdP token must match <code>Value</code>.
        Value:
          allOf:
          - $ref: '#/components/schemas/ClaimValue'
          - description: "A brief string that the claim must match, for example, \"\
              paid\" or \"yes\"."
        RoleARN:
          allOf:
          - $ref: '#/components/schemas/ARNString'
          - description: The role ARN.
      required:
      - Claim
      - MatchType
      - RoleARN
      - Value
      type: object
    MappingRulesList:
      items:
        $ref: '#/components/schemas/MappingRule'
      maxItems: 400
      minItems: 1
      type: array
    PrincipalTagID:
      maxLength: 128
      minLength: 1
      type: string
    PrincipalTagValue:
      maxLength: 256
      minLength: 1
      type: string
    RoleMappingType:
      enum:
      - Token
      - Rules
      type: string
    RulesConfigurationType:
      description: A container for rules.
      properties:
        Rules:
          allOf:
          - $ref: '#/components/schemas/MappingRulesList'
          - description: <p>An array of rules. You can specify up to 25 rules per
              identity provider.</p> <p>Rules are evaluated in order. The first one
              to match specifies the role.</p>
      required:
      - Rules
      type: object
    RoleMapping:
      description: A role mapping.
      properties:
        Type:
          allOf:
          - $ref: '#/components/schemas/RoleMappingType'
          - description: The role mapping type. Token will use <code>cognito:roles</code>
              and <code>cognito:preferred_role</code> claims from the Cognito identity
              provider token to map groups to roles. Rules will attempt to match claims
              from the token to map to a role.
        AmbiguousRoleResolution:
          allOf:
          - $ref: '#/components/schemas/AmbiguousRoleResolutionType'
          - description: "<p>If you specify Token or Rules as the <code>Type</code>,\
              \ <code>AmbiguousRoleResolution</code> is required.</p> <p>Specifies\
              \ the action to be taken if either no rules match the claim value for\
              \ the <code>Rules</code> type, or there is no <code>cognito:preferred_role</code>\
              \ claim and there are multiple <code>cognito:roles</code> matches for\
              \ the <code>Token</code> type.</p>"
        RulesConfiguration:
          $ref: '#/components/schemas/RoleMapping_RulesConfiguration'
      required:
      - Type
      type: object
    RoleType:
      maxLength: 128
      minLength: 1
      pattern: (un)?authenticated
      type: string
    UnprocessedIdentityId:
      description: "An array of UnprocessedIdentityId objects, each of which contains\
        \ an ErrorCode and IdentityId."
      properties:
        IdentityId:
          allOf:
          - $ref: '#/components/schemas/IdentityId'
          - description: A unique identifier in the format REGION:GUID.
        ErrorCode:
          allOf:
          - $ref: '#/components/schemas/ErrorCode'
          - description: The error code indicating the type of error that occurred.
      type: object
    GetCredentialsForIdentityResponse_Credentials:
      allOf:
      - $ref: '#/components/schemas/Credentials'
      - description: Credentials for the provided identity ID.
      example:
        SecretKey: ""
        SessionToken: ""
        AccessKeyId: ""
        Expiration: ""
    RoleMapping_RulesConfiguration:
      allOf:
      - $ref: '#/components/schemas/RulesConfigurationType'
      - description: "<p>The rules to be used for mapping users to roles.</p> <p>If\
          \ you specify Rules as the role mapping type, <code>RulesConfiguration</code>\
          \ is required.</p>"
  securitySchemes:
    hmac:
      description: Amazon Signature authorization v4
      in: header
      name: Authorization
      type: apiKey
      x-amazon-apigateway-authtype: awsSigv4
x-hasEquivalentPaths: true

