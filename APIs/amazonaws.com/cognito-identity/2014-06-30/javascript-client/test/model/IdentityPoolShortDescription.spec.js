/**
 * Amazon Cognito Identity
 * <fullname>Amazon Cognito Federated Identities</fullname> <p>Amazon Cognito Federated Identities is a web service that delivers scoped temporary credentials to mobile devices and other untrusted environments. It uniquely identifies a device and supplies the user with a consistent identity over the lifetime of an application.</p> <p>Using Amazon Cognito Federated Identities, you can enable authentication with one or more third-party identity providers (Facebook, Google, or Login with Amazon) or an Amazon Cognito user pool, and you can also choose to support unauthenticated access from your app. Cognito delivers a unique identifier for each user and acts as an OpenID token provider trusted by AWS Security Token Service (STS) to access temporary, limited-privilege AWS credentials.</p> <p>For a description of the authentication flow from the Amazon Cognito Developer Guide see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html\">Authentication Flow</a>.</p> <p>For more information see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html\">Amazon Cognito Federated Identities</a>.</p>
 *
 * The version of the OpenAPI document: 2014-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonCognitoIdentity);
  }
}(this, function(expect, AmazonCognitoIdentity) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonCognitoIdentity.IdentityPoolShortDescription();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('IdentityPoolShortDescription', function() {
    it('should create an instance of IdentityPoolShortDescription', function() {
      // uncomment below and update the code to test IdentityPoolShortDescription
      //var instance = new AmazonCognitoIdentity.IdentityPoolShortDescription();
      //expect(instance).to.be.a(AmazonCognitoIdentity.IdentityPoolShortDescription);
    });

    it('should have the property identityPoolId (base name: "IdentityPoolId")', function() {
      // uncomment below and update the code to test the property identityPoolId
      //var instance = new AmazonCognitoIdentity.IdentityPoolShortDescription();
      //expect(instance).to.be();
    });

    it('should have the property identityPoolName (base name: "IdentityPoolName")', function() {
      // uncomment below and update the code to test the property identityPoolName
      //var instance = new AmazonCognitoIdentity.IdentityPoolShortDescription();
      //expect(instance).to.be();
    });

  });

}));
