/**
 * Amazon Cognito Identity
 * <fullname>Amazon Cognito Federated Identities</fullname> <p>Amazon Cognito Federated Identities is a web service that delivers scoped temporary credentials to mobile devices and other untrusted environments. It uniquely identifies a device and supplies the user with a consistent identity over the lifetime of an application.</p> <p>Using Amazon Cognito Federated Identities, you can enable authentication with one or more third-party identity providers (Facebook, Google, or Login with Amazon) or an Amazon Cognito user pool, and you can also choose to support unauthenticated access from your app. Cognito delivers a unique identifier for each user and acts as an OpenID token provider trusted by AWS Security Token Service (STS) to access temporary, limited-privilege AWS credentials.</p> <p>For a description of the authentication flow from the Amazon Cognito Developer Guide see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html\">Authentication Flow</a>.</p> <p>For more information see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html\">Amazon Cognito Federated Identities</a>.</p>
 *
 * The version of the OpenAPI document: 2014-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonCognitoIdentity);
  }
}(this, function(expect, AmazonCognitoIdentity) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonCognitoIdentity.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('createIdentityPool', function() {
      it('should call createIdentityPool successfully', function(done) {
        //uncomment below and update the code to test createIdentityPool
        //instance.createIdentityPool(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteIdentities', function() {
      it('should call deleteIdentities successfully', function(done) {
        //uncomment below and update the code to test deleteIdentities
        //instance.deleteIdentities(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteIdentityPool', function() {
      it('should call deleteIdentityPool successfully', function(done) {
        //uncomment below and update the code to test deleteIdentityPool
        //instance.deleteIdentityPool(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeIdentity', function() {
      it('should call describeIdentity successfully', function(done) {
        //uncomment below and update the code to test describeIdentity
        //instance.describeIdentity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeIdentityPool', function() {
      it('should call describeIdentityPool successfully', function(done) {
        //uncomment below and update the code to test describeIdentityPool
        //instance.describeIdentityPool(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCredentialsForIdentity', function() {
      it('should call getCredentialsForIdentity successfully', function(done) {
        //uncomment below and update the code to test getCredentialsForIdentity
        //instance.getCredentialsForIdentity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getId', function() {
      it('should call getId successfully', function(done) {
        //uncomment below and update the code to test getId
        //instance.getId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIdentityPoolRoles', function() {
      it('should call getIdentityPoolRoles successfully', function(done) {
        //uncomment below and update the code to test getIdentityPoolRoles
        //instance.getIdentityPoolRoles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOpenIdToken', function() {
      it('should call getOpenIdToken successfully', function(done) {
        //uncomment below and update the code to test getOpenIdToken
        //instance.getOpenIdToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOpenIdTokenForDeveloperIdentity', function() {
      it('should call getOpenIdTokenForDeveloperIdentity successfully', function(done) {
        //uncomment below and update the code to test getOpenIdTokenForDeveloperIdentity
        //instance.getOpenIdTokenForDeveloperIdentity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPrincipalTagAttributeMap', function() {
      it('should call getPrincipalTagAttributeMap successfully', function(done) {
        //uncomment below and update the code to test getPrincipalTagAttributeMap
        //instance.getPrincipalTagAttributeMap(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listIdentities', function() {
      it('should call listIdentities successfully', function(done) {
        //uncomment below and update the code to test listIdentities
        //instance.listIdentities(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listIdentityPools', function() {
      it('should call listIdentityPools successfully', function(done) {
        //uncomment below and update the code to test listIdentityPools
        //instance.listIdentityPools(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lookupDeveloperIdentity', function() {
      it('should call lookupDeveloperIdentity successfully', function(done) {
        //uncomment below and update the code to test lookupDeveloperIdentity
        //instance.lookupDeveloperIdentity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('mergeDeveloperIdentities', function() {
      it('should call mergeDeveloperIdentities successfully', function(done) {
        //uncomment below and update the code to test mergeDeveloperIdentities
        //instance.mergeDeveloperIdentities(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setIdentityPoolRoles', function() {
      it('should call setIdentityPoolRoles successfully', function(done) {
        //uncomment below and update the code to test setIdentityPoolRoles
        //instance.setIdentityPoolRoles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setPrincipalTagAttributeMap', function() {
      it('should call setPrincipalTagAttributeMap successfully', function(done) {
        //uncomment below and update the code to test setPrincipalTagAttributeMap
        //instance.setPrincipalTagAttributeMap(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unlinkDeveloperIdentity', function() {
      it('should call unlinkDeveloperIdentity successfully', function(done) {
        //uncomment below and update the code to test unlinkDeveloperIdentity
        //instance.unlinkDeveloperIdentity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unlinkIdentity', function() {
      it('should call unlinkIdentity successfully', function(done) {
        //uncomment below and update the code to test unlinkIdentity
        //instance.unlinkIdentity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateIdentityPool', function() {
      it('should call updateIdentityPool successfully', function(done) {
        //uncomment below and update the code to test updateIdentityPool
        //instance.updateIdentityPool(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
