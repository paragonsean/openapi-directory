/**
 * Amazon Cognito Identity
 * <fullname>Amazon Cognito Federated Identities</fullname> <p>Amazon Cognito Federated Identities is a web service that delivers scoped temporary credentials to mobile devices and other untrusted environments. It uniquely identifies a device and supplies the user with a consistent identity over the lifetime of an application.</p> <p>Using Amazon Cognito Federated Identities, you can enable authentication with one or more third-party identity providers (Facebook, Google, or Login with Amazon) or an Amazon Cognito user pool, and you can also choose to support unauthenticated access from your app. Cognito delivers a unique identifier for each user and acts as an OpenID token provider trusted by AWS Security Token Service (STS) to access temporary, limited-privilege AWS credentials.</p> <p>For a description of the authentication flow from the Amazon Cognito Developer Guide see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html\">Authentication Flow</a>.</p> <p>For more information see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html\">Amazon Cognito Federated Identities</a>.</p>
 *
 * The version of the OpenAPI document: 2014-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateIdentityPoolInput from '../model/CreateIdentityPoolInput';
import DeleteIdentitiesInput from '../model/DeleteIdentitiesInput';
import DeleteIdentitiesResponse from '../model/DeleteIdentitiesResponse';
import DeleteIdentityPoolInput from '../model/DeleteIdentityPoolInput';
import DescribeIdentityInput from '../model/DescribeIdentityInput';
import DescribeIdentityPoolInput from '../model/DescribeIdentityPoolInput';
import GetCredentialsForIdentityInput from '../model/GetCredentialsForIdentityInput';
import GetCredentialsForIdentityResponse from '../model/GetCredentialsForIdentityResponse';
import GetIdInput from '../model/GetIdInput';
import GetIdResponse from '../model/GetIdResponse';
import GetIdentityPoolRolesInput from '../model/GetIdentityPoolRolesInput';
import GetIdentityPoolRolesResponse from '../model/GetIdentityPoolRolesResponse';
import GetOpenIdTokenForDeveloperIdentityInput from '../model/GetOpenIdTokenForDeveloperIdentityInput';
import GetOpenIdTokenForDeveloperIdentityResponse from '../model/GetOpenIdTokenForDeveloperIdentityResponse';
import GetOpenIdTokenInput from '../model/GetOpenIdTokenInput';
import GetOpenIdTokenResponse from '../model/GetOpenIdTokenResponse';
import GetPrincipalTagAttributeMapInput from '../model/GetPrincipalTagAttributeMapInput';
import GetPrincipalTagAttributeMapResponse from '../model/GetPrincipalTagAttributeMapResponse';
import IdentityDescription from '../model/IdentityDescription';
import IdentityPool from '../model/IdentityPool';
import ListIdentitiesInput from '../model/ListIdentitiesInput';
import ListIdentitiesResponse from '../model/ListIdentitiesResponse';
import ListIdentityPoolsInput from '../model/ListIdentityPoolsInput';
import ListIdentityPoolsResponse from '../model/ListIdentityPoolsResponse';
import ListTagsForResourceInput from '../model/ListTagsForResourceInput';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import LookupDeveloperIdentityInput from '../model/LookupDeveloperIdentityInput';
import LookupDeveloperIdentityResponse from '../model/LookupDeveloperIdentityResponse';
import MergeDeveloperIdentitiesInput from '../model/MergeDeveloperIdentitiesInput';
import MergeDeveloperIdentitiesResponse from '../model/MergeDeveloperIdentitiesResponse';
import SetIdentityPoolRolesInput from '../model/SetIdentityPoolRolesInput';
import SetPrincipalTagAttributeMapInput from '../model/SetPrincipalTagAttributeMapInput';
import SetPrincipalTagAttributeMapResponse from '../model/SetPrincipalTagAttributeMapResponse';
import TagResourceInput from '../model/TagResourceInput';
import UnlinkDeveloperIdentityInput from '../model/UnlinkDeveloperIdentityInput';
import UnlinkIdentityInput from '../model/UnlinkIdentityInput';
import UntagResourceInput from '../model/UntagResourceInput';

/**
* Default service.
* @module api/DefaultApi
* @version 2014-06-30
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createIdentityPool operation.
     * @callback module:api/DefaultApi~createIdentityPoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdentityPool} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new identity pool. The identity pool is a store of user identity information that is specific to your AWS account. The keys for <code>SupportedLoginProviders</code> are as follows:</p> <ul> <li> <p>Facebook: <code>graph.facebook.com</code> </p> </li> <li> <p>Google: <code>accounts.google.com</code> </p> </li> <li> <p>Amazon: <code>www.amazon.com</code> </p> </li> <li> <p>Twitter: <code>api.twitter.com</code> </p> </li> <li> <p>Digits: <code>www.digits.com</code> </p> </li> </ul> <p>You must use AWS Developer credentials to call this API.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateIdentityPoolInput} createIdentityPoolInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createIdentityPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdentityPool}
     */
    createIdentityPool(xAmzTarget, createIdentityPoolInput, opts, callback) {
      opts = opts || {};
      let postBody = createIdentityPoolInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createIdentityPool");
      }
      // verify the required parameter 'createIdentityPoolInput' is set
      if (createIdentityPoolInput === undefined || createIdentityPoolInput === null) {
        throw new Error("Missing the required parameter 'createIdentityPoolInput' when calling createIdentityPool");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IdentityPool;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSCognitoIdentityService.CreateIdentityPool', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIdentities operation.
     * @callback module:api/DefaultApi~deleteIdentitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteIdentitiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes identities from an identity pool. You can specify a list of 1-60 identities that you want to delete.</p> <p>You must use AWS Developer credentials to call this API.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteIdentitiesInput} deleteIdentitiesInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteIdentitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteIdentitiesResponse}
     */
    deleteIdentities(xAmzTarget, deleteIdentitiesInput, opts, callback) {
      opts = opts || {};
      let postBody = deleteIdentitiesInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteIdentities");
      }
      // verify the required parameter 'deleteIdentitiesInput' is set
      if (deleteIdentitiesInput === undefined || deleteIdentitiesInput === null) {
        throw new Error("Missing the required parameter 'deleteIdentitiesInput' when calling deleteIdentities");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteIdentitiesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSCognitoIdentityService.DeleteIdentities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIdentityPool operation.
     * @callback module:api/DefaultApi~deleteIdentityPoolCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes an identity pool. Once a pool is deleted, users will not be able to authenticate with the pool.</p> <p>You must use AWS Developer credentials to call this API.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteIdentityPoolInput} deleteIdentityPoolInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteIdentityPoolCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteIdentityPool(xAmzTarget, deleteIdentityPoolInput, opts, callback) {
      opts = opts || {};
      let postBody = deleteIdentityPoolInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteIdentityPool");
      }
      // verify the required parameter 'deleteIdentityPoolInput' is set
      if (deleteIdentityPoolInput === undefined || deleteIdentityPoolInput === null) {
        throw new Error("Missing the required parameter 'deleteIdentityPoolInput' when calling deleteIdentityPool");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSCognitoIdentityService.DeleteIdentityPool', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeIdentity operation.
     * @callback module:api/DefaultApi~describeIdentityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdentityDescription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns metadata related to the given identity, including when the identity was created and any associated linked logins.</p> <p>You must use AWS Developer credentials to call this API.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeIdentityInput} describeIdentityInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeIdentityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdentityDescription}
     */
    describeIdentity(xAmzTarget, describeIdentityInput, opts, callback) {
      opts = opts || {};
      let postBody = describeIdentityInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeIdentity");
      }
      // verify the required parameter 'describeIdentityInput' is set
      if (describeIdentityInput === undefined || describeIdentityInput === null) {
        throw new Error("Missing the required parameter 'describeIdentityInput' when calling describeIdentity");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IdentityDescription;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSCognitoIdentityService.DescribeIdentity', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeIdentityPool operation.
     * @callback module:api/DefaultApi~describeIdentityPoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdentityPool} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets details about a particular identity pool, including the pool name, ID description, creation date, and current number of users.</p> <p>You must use AWS Developer credentials to call this API.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeIdentityPoolInput} describeIdentityPoolInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeIdentityPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdentityPool}
     */
    describeIdentityPool(xAmzTarget, describeIdentityPoolInput, opts, callback) {
      opts = opts || {};
      let postBody = describeIdentityPoolInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeIdentityPool");
      }
      // verify the required parameter 'describeIdentityPoolInput' is set
      if (describeIdentityPoolInput === undefined || describeIdentityPoolInput === null) {
        throw new Error("Missing the required parameter 'describeIdentityPoolInput' when calling describeIdentityPool");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IdentityPool;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSCognitoIdentityService.DescribeIdentityPool', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCredentialsForIdentity operation.
     * @callback module:api/DefaultApi~getCredentialsForIdentityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCredentialsForIdentityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns credentials for the provided identity ID. Any provided logins will be validated against supported login providers. If the token is for cognito-identity.amazonaws.com, it will be passed through to AWS Security Token Service with the appropriate role for the token.</p> <p>This is a public API. You do not need any credentials to call this API.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetCredentialsForIdentityInput} getCredentialsForIdentityInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getCredentialsForIdentityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCredentialsForIdentityResponse}
     */
    getCredentialsForIdentity(xAmzTarget, getCredentialsForIdentityInput, opts, callback) {
      opts = opts || {};
      let postBody = getCredentialsForIdentityInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getCredentialsForIdentity");
      }
      // verify the required parameter 'getCredentialsForIdentityInput' is set
      if (getCredentialsForIdentityInput === undefined || getCredentialsForIdentityInput === null) {
        throw new Error("Missing the required parameter 'getCredentialsForIdentityInput' when calling getCredentialsForIdentity");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetCredentialsForIdentityResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSCognitoIdentityService.GetCredentialsForIdentity', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getId operation.
     * @callback module:api/DefaultApi~getIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Generates (or retrieves) a Cognito ID. Supplying multiple logins will create an implicit linked account.</p> <p>This is a public API. You do not need any credentials to call this API.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetIdInput} getIdInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetIdResponse}
     */
    getId(xAmzTarget, getIdInput, opts, callback) {
      opts = opts || {};
      let postBody = getIdInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getId");
      }
      // verify the required parameter 'getIdInput' is set
      if (getIdInput === undefined || getIdInput === null) {
        throw new Error("Missing the required parameter 'getIdInput' when calling getId");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetIdResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSCognitoIdentityService.GetId', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIdentityPoolRoles operation.
     * @callback module:api/DefaultApi~getIdentityPoolRolesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetIdentityPoolRolesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets the roles for an identity pool.</p> <p>You must use AWS Developer credentials to call this API.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetIdentityPoolRolesInput} getIdentityPoolRolesInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getIdentityPoolRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetIdentityPoolRolesResponse}
     */
    getIdentityPoolRoles(xAmzTarget, getIdentityPoolRolesInput, opts, callback) {
      opts = opts || {};
      let postBody = getIdentityPoolRolesInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getIdentityPoolRoles");
      }
      // verify the required parameter 'getIdentityPoolRolesInput' is set
      if (getIdentityPoolRolesInput === undefined || getIdentityPoolRolesInput === null) {
        throw new Error("Missing the required parameter 'getIdentityPoolRolesInput' when calling getIdentityPoolRoles");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetIdentityPoolRolesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSCognitoIdentityService.GetIdentityPoolRoles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOpenIdToken operation.
     * @callback module:api/DefaultApi~getOpenIdTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOpenIdTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets an OpenID token, using a known Cognito ID. This known Cognito ID is returned by <a>GetId</a>. You can optionally add additional logins for the identity. Supplying multiple logins creates an implicit link.</p> <p>The OpenID token is valid for 10 minutes.</p> <p>This is a public API. You do not need any credentials to call this API.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetOpenIdTokenInput} getOpenIdTokenInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getOpenIdTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOpenIdTokenResponse}
     */
    getOpenIdToken(xAmzTarget, getOpenIdTokenInput, opts, callback) {
      opts = opts || {};
      let postBody = getOpenIdTokenInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getOpenIdToken");
      }
      // verify the required parameter 'getOpenIdTokenInput' is set
      if (getOpenIdTokenInput === undefined || getOpenIdTokenInput === null) {
        throw new Error("Missing the required parameter 'getOpenIdTokenInput' when calling getOpenIdToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetOpenIdTokenResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSCognitoIdentityService.GetOpenIdToken', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOpenIdTokenForDeveloperIdentity operation.
     * @callback module:api/DefaultApi~getOpenIdTokenForDeveloperIdentityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOpenIdTokenForDeveloperIdentityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Registers (or retrieves) a Cognito <code>IdentityId</code> and an OpenID Connect token for a user authenticated by your backend authentication process. Supplying multiple logins will create an implicit linked account. You can only specify one developer provider as part of the <code>Logins</code> map, which is linked to the identity pool. The developer provider is the \"domain\" by which Cognito will refer to your users.</p> <p>You can use <code>GetOpenIdTokenForDeveloperIdentity</code> to create a new identity and to link new logins (that is, user credentials issued by a public provider or developer provider) to an existing identity. When you want to create a new identity, the <code>IdentityId</code> should be null. When you want to associate a new login with an existing authenticated/unauthenticated identity, you can do so by providing the existing <code>IdentityId</code>. This API will create the identity in the specified <code>IdentityPoolId</code>.</p> <p>You must use AWS Developer credentials to call this API.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetOpenIdTokenForDeveloperIdentityInput} getOpenIdTokenForDeveloperIdentityInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getOpenIdTokenForDeveloperIdentityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOpenIdTokenForDeveloperIdentityResponse}
     */
    getOpenIdTokenForDeveloperIdentity(xAmzTarget, getOpenIdTokenForDeveloperIdentityInput, opts, callback) {
      opts = opts || {};
      let postBody = getOpenIdTokenForDeveloperIdentityInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getOpenIdTokenForDeveloperIdentity");
      }
      // verify the required parameter 'getOpenIdTokenForDeveloperIdentityInput' is set
      if (getOpenIdTokenForDeveloperIdentityInput === undefined || getOpenIdTokenForDeveloperIdentityInput === null) {
        throw new Error("Missing the required parameter 'getOpenIdTokenForDeveloperIdentityInput' when calling getOpenIdTokenForDeveloperIdentity");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetOpenIdTokenForDeveloperIdentityResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSCognitoIdentityService.GetOpenIdTokenForDeveloperIdentity', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPrincipalTagAttributeMap operation.
     * @callback module:api/DefaultApi~getPrincipalTagAttributeMapCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPrincipalTagAttributeMapResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use <code>GetPrincipalTagAttributeMap</code> to list all mappings between <code>PrincipalTags</code> and user attributes.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetPrincipalTagAttributeMapInput} getPrincipalTagAttributeMapInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getPrincipalTagAttributeMapCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPrincipalTagAttributeMapResponse}
     */
    getPrincipalTagAttributeMap(xAmzTarget, getPrincipalTagAttributeMapInput, opts, callback) {
      opts = opts || {};
      let postBody = getPrincipalTagAttributeMapInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getPrincipalTagAttributeMap");
      }
      // verify the required parameter 'getPrincipalTagAttributeMapInput' is set
      if (getPrincipalTagAttributeMapInput === undefined || getPrincipalTagAttributeMapInput === null) {
        throw new Error("Missing the required parameter 'getPrincipalTagAttributeMapInput' when calling getPrincipalTagAttributeMap");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetPrincipalTagAttributeMapResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSCognitoIdentityService.GetPrincipalTagAttributeMap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listIdentities operation.
     * @callback module:api/DefaultApi~listIdentitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListIdentitiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists the identities in an identity pool.</p> <p>You must use AWS Developer credentials to call this API.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListIdentitiesInput} listIdentitiesInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listIdentitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListIdentitiesResponse}
     */
    listIdentities(xAmzTarget, listIdentitiesInput, opts, callback) {
      opts = opts || {};
      let postBody = listIdentitiesInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listIdentities");
      }
      // verify the required parameter 'listIdentitiesInput' is set
      if (listIdentitiesInput === undefined || listIdentitiesInput === null) {
        throw new Error("Missing the required parameter 'listIdentitiesInput' when calling listIdentities");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListIdentitiesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSCognitoIdentityService.ListIdentities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listIdentityPools operation.
     * @callback module:api/DefaultApi~listIdentityPoolsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListIdentityPoolsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists all of the Cognito identity pools registered for your account.</p> <p>You must use AWS Developer credentials to call this API.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListIdentityPoolsInput} listIdentityPoolsInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listIdentityPoolsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListIdentityPoolsResponse}
     */
    listIdentityPools(xAmzTarget, listIdentityPoolsInput, opts, callback) {
      opts = opts || {};
      let postBody = listIdentityPoolsInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listIdentityPools");
      }
      // verify the required parameter 'listIdentityPoolsInput' is set
      if (listIdentityPoolsInput === undefined || listIdentityPoolsInput === null) {
        throw new Error("Missing the required parameter 'listIdentityPoolsInput' when calling listIdentityPools");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListIdentityPoolsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSCognitoIdentityService.ListIdentityPools', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists the tags that are assigned to an Amazon Cognito identity pool.</p> <p>A tag is a label that you can apply to identity pools to categorize and manage them in different ways, such as by purpose, owner, environment, or other criteria.</p> <p>You can use this action up to 10 times per second, per account.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTagsForResourceInput} listTagsForResourceInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(xAmzTarget, listTagsForResourceInput, opts, callback) {
      opts = opts || {};
      let postBody = listTagsForResourceInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTagsForResource");
      }
      // verify the required parameter 'listTagsForResourceInput' is set
      if (listTagsForResourceInput === undefined || listTagsForResourceInput === null) {
        throw new Error("Missing the required parameter 'listTagsForResourceInput' when calling listTagsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSCognitoIdentityService.ListTagsForResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lookupDeveloperIdentity operation.
     * @callback module:api/DefaultApi~lookupDeveloperIdentityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LookupDeveloperIdentityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves the <code>IdentityID</code> associated with a <code>DeveloperUserIdentifier</code> or the list of <code>DeveloperUserIdentifier</code> values associated with an <code>IdentityId</code> for an existing identity. Either <code>IdentityID</code> or <code>DeveloperUserIdentifier</code> must not be null. If you supply only one of these values, the other value will be searched in the database and returned as a part of the response. If you supply both, <code>DeveloperUserIdentifier</code> will be matched against <code>IdentityID</code>. If the values are verified against the database, the response returns both values and is the same as the request. Otherwise a <code>ResourceConflictException</code> is thrown.</p> <p> <code>LookupDeveloperIdentity</code> is intended for low-throughput control plane operations: for example, to enable customer service to locate an identity ID by username. If you are using it for higher-volume operations such as user authentication, your requests are likely to be throttled. <a>GetOpenIdTokenForDeveloperIdentity</a> is a better option for higher-volume operations for user authentication.</p> <p>You must use AWS Developer credentials to call this API.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/LookupDeveloperIdentityInput} lookupDeveloperIdentityInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~lookupDeveloperIdentityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LookupDeveloperIdentityResponse}
     */
    lookupDeveloperIdentity(xAmzTarget, lookupDeveloperIdentityInput, opts, callback) {
      opts = opts || {};
      let postBody = lookupDeveloperIdentityInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling lookupDeveloperIdentity");
      }
      // verify the required parameter 'lookupDeveloperIdentityInput' is set
      if (lookupDeveloperIdentityInput === undefined || lookupDeveloperIdentityInput === null) {
        throw new Error("Missing the required parameter 'lookupDeveloperIdentityInput' when calling lookupDeveloperIdentity");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LookupDeveloperIdentityResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSCognitoIdentityService.LookupDeveloperIdentity', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mergeDeveloperIdentities operation.
     * @callback module:api/DefaultApi~mergeDeveloperIdentitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MergeDeveloperIdentitiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Merges two users having different <code>IdentityId</code>s, existing in the same identity pool, and identified by the same developer provider. You can use this action to request that discrete users be merged and identified as a single user in the Cognito environment. Cognito associates the given source user (<code>SourceUserIdentifier</code>) with the <code>IdentityId</code> of the <code>DestinationUserIdentifier</code>. Only developer-authenticated users can be merged. If the users to be merged are associated with the same public provider, but as two different users, an exception will be thrown.</p> <p>The number of linked logins is limited to 20. So, the number of linked logins for the source user, <code>SourceUserIdentifier</code>, and the destination user, <code>DestinationUserIdentifier</code>, together should not be larger than 20. Otherwise, an exception will be thrown.</p> <p>You must use AWS Developer credentials to call this API.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/MergeDeveloperIdentitiesInput} mergeDeveloperIdentitiesInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~mergeDeveloperIdentitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MergeDeveloperIdentitiesResponse}
     */
    mergeDeveloperIdentities(xAmzTarget, mergeDeveloperIdentitiesInput, opts, callback) {
      opts = opts || {};
      let postBody = mergeDeveloperIdentitiesInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling mergeDeveloperIdentities");
      }
      // verify the required parameter 'mergeDeveloperIdentitiesInput' is set
      if (mergeDeveloperIdentitiesInput === undefined || mergeDeveloperIdentitiesInput === null) {
        throw new Error("Missing the required parameter 'mergeDeveloperIdentitiesInput' when calling mergeDeveloperIdentities");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MergeDeveloperIdentitiesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSCognitoIdentityService.MergeDeveloperIdentities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setIdentityPoolRoles operation.
     * @callback module:api/DefaultApi~setIdentityPoolRolesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Sets the roles for an identity pool. These roles are used when making calls to <a>GetCredentialsForIdentity</a> action.</p> <p>You must use AWS Developer credentials to call this API.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/SetIdentityPoolRolesInput} setIdentityPoolRolesInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~setIdentityPoolRolesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setIdentityPoolRoles(xAmzTarget, setIdentityPoolRolesInput, opts, callback) {
      opts = opts || {};
      let postBody = setIdentityPoolRolesInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling setIdentityPoolRoles");
      }
      // verify the required parameter 'setIdentityPoolRolesInput' is set
      if (setIdentityPoolRolesInput === undefined || setIdentityPoolRolesInput === null) {
        throw new Error("Missing the required parameter 'setIdentityPoolRolesInput' when calling setIdentityPoolRoles");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSCognitoIdentityService.SetIdentityPoolRoles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setPrincipalTagAttributeMap operation.
     * @callback module:api/DefaultApi~setPrincipalTagAttributeMapCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SetPrincipalTagAttributeMapResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * You can use this operation to use default (username and clientID) attribute or custom attribute mappings.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/SetPrincipalTagAttributeMapInput} setPrincipalTagAttributeMapInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~setPrincipalTagAttributeMapCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SetPrincipalTagAttributeMapResponse}
     */
    setPrincipalTagAttributeMap(xAmzTarget, setPrincipalTagAttributeMapInput, opts, callback) {
      opts = opts || {};
      let postBody = setPrincipalTagAttributeMapInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling setPrincipalTagAttributeMap");
      }
      // verify the required parameter 'setPrincipalTagAttributeMapInput' is set
      if (setPrincipalTagAttributeMapInput === undefined || setPrincipalTagAttributeMapInput === null) {
        throw new Error("Missing the required parameter 'setPrincipalTagAttributeMapInput' when calling setPrincipalTagAttributeMap");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SetPrincipalTagAttributeMapResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSCognitoIdentityService.SetPrincipalTagAttributeMap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Assigns a set of tags to the specified Amazon Cognito identity pool. A tag is a label that you can use to categorize and manage identity pools in different ways, such as by purpose, owner, environment, or other criteria.</p> <p>Each tag consists of a key and value, both of which you define. A key is a general category for more specific values. For example, if you have two versions of an identity pool, one for testing and another for production, you might assign an <code>Environment</code> tag key to both identity pools. The value of this key might be <code>Test</code> for one identity pool and <code>Production</code> for the other.</p> <p>Tags are useful for cost tracking and access control. You can activate your tags so that they appear on the Billing and Cost Management console, where you can track the costs associated with your identity pools. In an IAM policy, you can constrain permissions for identity pools based on specific tags or tag values.</p> <p>You can use this action up to 5 times per second, per account. An identity pool can have as many as 50 tags.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/TagResourceInput} tagResourceInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(xAmzTarget, tagResourceInput, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling tagResource");
      }
      // verify the required parameter 'tagResourceInput' is set
      if (tagResourceInput === undefined || tagResourceInput === null) {
        throw new Error("Missing the required parameter 'tagResourceInput' when calling tagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSCognitoIdentityService.TagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unlinkDeveloperIdentity operation.
     * @callback module:api/DefaultApi~unlinkDeveloperIdentityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Unlinks a <code>DeveloperUserIdentifier</code> from an existing identity. Unlinked developer users will be considered new identities next time they are seen. If, for a given Cognito identity, you remove all federated identities as well as the developer user identifier, the Cognito identity becomes inaccessible.</p> <p>You must use AWS Developer credentials to call this API.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UnlinkDeveloperIdentityInput} unlinkDeveloperIdentityInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~unlinkDeveloperIdentityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unlinkDeveloperIdentity(xAmzTarget, unlinkDeveloperIdentityInput, opts, callback) {
      opts = opts || {};
      let postBody = unlinkDeveloperIdentityInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling unlinkDeveloperIdentity");
      }
      // verify the required parameter 'unlinkDeveloperIdentityInput' is set
      if (unlinkDeveloperIdentityInput === undefined || unlinkDeveloperIdentityInput === null) {
        throw new Error("Missing the required parameter 'unlinkDeveloperIdentityInput' when calling unlinkDeveloperIdentity");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSCognitoIdentityService.UnlinkDeveloperIdentity', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unlinkIdentity operation.
     * @callback module:api/DefaultApi~unlinkIdentityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Unlinks a federated identity from an existing account. Unlinked logins will be considered new identities next time they are seen. Removing the last linked login will make this identity inaccessible.</p> <p>This is a public API. You do not need any credentials to call this API.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UnlinkIdentityInput} unlinkIdentityInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~unlinkIdentityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unlinkIdentity(xAmzTarget, unlinkIdentityInput, opts, callback) {
      opts = opts || {};
      let postBody = unlinkIdentityInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling unlinkIdentity");
      }
      // verify the required parameter 'unlinkIdentityInput' is set
      if (unlinkIdentityInput === undefined || unlinkIdentityInput === null) {
        throw new Error("Missing the required parameter 'unlinkIdentityInput' when calling unlinkIdentity");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSCognitoIdentityService.UnlinkIdentity', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the specified tags from the specified Amazon Cognito identity pool. You can use this action up to 5 times per second, per account
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UntagResourceInput} untagResourceInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(xAmzTarget, untagResourceInput, opts, callback) {
      opts = opts || {};
      let postBody = untagResourceInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling untagResource");
      }
      // verify the required parameter 'untagResourceInput' is set
      if (untagResourceInput === undefined || untagResourceInput === null) {
        throw new Error("Missing the required parameter 'untagResourceInput' when calling untagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSCognitoIdentityService.UntagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIdentityPool operation.
     * @callback module:api/DefaultApi~updateIdentityPoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdentityPool} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates an identity pool.</p> <p>You must use AWS Developer credentials to call this API.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/IdentityPool} identityPool 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateIdentityPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdentityPool}
     */
    updateIdentityPool(xAmzTarget, identityPool, opts, callback) {
      opts = opts || {};
      let postBody = identityPool;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateIdentityPool");
      }
      // verify the required parameter 'identityPool' is set
      if (identityPool === undefined || identityPool === null) {
        throw new Error("Missing the required parameter 'identityPool' when calling updateIdentityPool");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IdentityPool;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSCognitoIdentityService.UpdateIdentityPool', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
