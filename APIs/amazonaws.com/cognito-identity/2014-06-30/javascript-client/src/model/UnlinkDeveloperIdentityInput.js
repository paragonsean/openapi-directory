/**
 * Amazon Cognito Identity
 * <fullname>Amazon Cognito Federated Identities</fullname> <p>Amazon Cognito Federated Identities is a web service that delivers scoped temporary credentials to mobile devices and other untrusted environments. It uniquely identifies a device and supplies the user with a consistent identity over the lifetime of an application.</p> <p>Using Amazon Cognito Federated Identities, you can enable authentication with one or more third-party identity providers (Facebook, Google, or Login with Amazon) or an Amazon Cognito user pool, and you can also choose to support unauthenticated access from your app. Cognito delivers a unique identifier for each user and acts as an OpenID token provider trusted by AWS Security Token Service (STS) to access temporary, limited-privilege AWS credentials.</p> <p>For a description of the authentication flow from the Amazon Cognito Developer Guide see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html\">Authentication Flow</a>.</p> <p>For more information see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html\">Amazon Cognito Federated Identities</a>.</p>
 *
 * The version of the OpenAPI document: 2014-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UnlinkDeveloperIdentityInput model module.
 * @module model/UnlinkDeveloperIdentityInput
 * @version 2014-06-30
 */
class UnlinkDeveloperIdentityInput {
    /**
     * Constructs a new <code>UnlinkDeveloperIdentityInput</code>.
     * Input to the &lt;code&gt;UnlinkDeveloperIdentity&lt;/code&gt; action.
     * @alias module:model/UnlinkDeveloperIdentityInput
     * @param identityId {String} 
     * @param identityPoolId {String} 
     * @param developerProviderName {String} 
     * @param developerUserIdentifier {String} 
     */
    constructor(identityId, identityPoolId, developerProviderName, developerUserIdentifier) { 
        
        UnlinkDeveloperIdentityInput.initialize(this, identityId, identityPoolId, developerProviderName, developerUserIdentifier);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, identityId, identityPoolId, developerProviderName, developerUserIdentifier) { 
        obj['IdentityId'] = identityId;
        obj['IdentityPoolId'] = identityPoolId;
        obj['DeveloperProviderName'] = developerProviderName;
        obj['DeveloperUserIdentifier'] = developerUserIdentifier;
    }

    /**
     * Constructs a <code>UnlinkDeveloperIdentityInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UnlinkDeveloperIdentityInput} obj Optional instance to populate.
     * @return {module:model/UnlinkDeveloperIdentityInput} The populated <code>UnlinkDeveloperIdentityInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UnlinkDeveloperIdentityInput();

            if (data.hasOwnProperty('IdentityId')) {
                obj['IdentityId'] = ApiClient.convertToType(data['IdentityId'], 'String');
            }
            if (data.hasOwnProperty('IdentityPoolId')) {
                obj['IdentityPoolId'] = ApiClient.convertToType(data['IdentityPoolId'], 'String');
            }
            if (data.hasOwnProperty('DeveloperProviderName')) {
                obj['DeveloperProviderName'] = ApiClient.convertToType(data['DeveloperProviderName'], 'String');
            }
            if (data.hasOwnProperty('DeveloperUserIdentifier')) {
                obj['DeveloperUserIdentifier'] = ApiClient.convertToType(data['DeveloperUserIdentifier'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UnlinkDeveloperIdentityInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UnlinkDeveloperIdentityInput</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UnlinkDeveloperIdentityInput.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `IdentityId`
        if (data['IdentityId']) { // data not null
          String.validateJSON(data['IdentityId']);
        }
        // validate the optional field `IdentityPoolId`
        if (data['IdentityPoolId']) { // data not null
          String.validateJSON(data['IdentityPoolId']);
        }
        // validate the optional field `DeveloperProviderName`
        if (data['DeveloperProviderName']) { // data not null
          String.validateJSON(data['DeveloperProviderName']);
        }
        // validate the optional field `DeveloperUserIdentifier`
        if (data['DeveloperUserIdentifier']) { // data not null
          String.validateJSON(data['DeveloperUserIdentifier']);
        }

        return true;
    }


}

UnlinkDeveloperIdentityInput.RequiredProperties = ["IdentityId", "IdentityPoolId", "DeveloperProviderName", "DeveloperUserIdentifier"];

/**
 * @member {String} IdentityId
 */
UnlinkDeveloperIdentityInput.prototype['IdentityId'] = undefined;

/**
 * @member {String} IdentityPoolId
 */
UnlinkDeveloperIdentityInput.prototype['IdentityPoolId'] = undefined;

/**
 * @member {String} DeveloperProviderName
 */
UnlinkDeveloperIdentityInput.prototype['DeveloperProviderName'] = undefined;

/**
 * @member {String} DeveloperUserIdentifier
 */
UnlinkDeveloperIdentityInput.prototype['DeveloperUserIdentifier'] = undefined;






export default UnlinkDeveloperIdentityInput;

