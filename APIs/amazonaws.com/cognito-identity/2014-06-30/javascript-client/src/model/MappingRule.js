/**
 * Amazon Cognito Identity
 * <fullname>Amazon Cognito Federated Identities</fullname> <p>Amazon Cognito Federated Identities is a web service that delivers scoped temporary credentials to mobile devices and other untrusted environments. It uniquely identifies a device and supplies the user with a consistent identity over the lifetime of an application.</p> <p>Using Amazon Cognito Federated Identities, you can enable authentication with one or more third-party identity providers (Facebook, Google, or Login with Amazon) or an Amazon Cognito user pool, and you can also choose to support unauthenticated access from your app. Cognito delivers a unique identifier for each user and acts as an OpenID token provider trusted by AWS Security Token Service (STS) to access temporary, limited-privilege AWS credentials.</p> <p>For a description of the authentication flow from the Amazon Cognito Developer Guide see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html\">Authentication Flow</a>.</p> <p>For more information see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html\">Amazon Cognito Federated Identities</a>.</p>
 *
 * The version of the OpenAPI document: 2014-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MappingRuleMatchType from './MappingRuleMatchType';

/**
 * The MappingRule model module.
 * @module model/MappingRule
 * @version 2014-06-30
 */
class MappingRule {
    /**
     * Constructs a new <code>MappingRule</code>.
     * A rule that maps a claim name, a claim value, and a match type to a role ARN.
     * @alias module:model/MappingRule
     * @param claim {String} 
     * @param matchType {module:model/MappingRuleMatchType} 
     * @param value {String} 
     * @param roleARN {String} 
     */
    constructor(claim, matchType, value, roleARN) { 
        
        MappingRule.initialize(this, claim, matchType, value, roleARN);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, claim, matchType, value, roleARN) { 
        obj['Claim'] = claim;
        obj['MatchType'] = matchType;
        obj['Value'] = value;
        obj['RoleARN'] = roleARN;
    }

    /**
     * Constructs a <code>MappingRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MappingRule} obj Optional instance to populate.
     * @return {module:model/MappingRule} The populated <code>MappingRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MappingRule();

            if (data.hasOwnProperty('Claim')) {
                obj['Claim'] = ApiClient.convertToType(data['Claim'], 'String');
            }
            if (data.hasOwnProperty('MatchType')) {
                obj['MatchType'] = ApiClient.convertToType(data['MatchType'], MappingRuleMatchType);
            }
            if (data.hasOwnProperty('Value')) {
                obj['Value'] = ApiClient.convertToType(data['Value'], 'String');
            }
            if (data.hasOwnProperty('RoleARN')) {
                obj['RoleARN'] = ApiClient.convertToType(data['RoleARN'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MappingRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MappingRule</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MappingRule.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Claim`
        if (data['Claim']) { // data not null
          String.validateJSON(data['Claim']);
        }
        // validate the optional field `MatchType`
        if (data['MatchType']) { // data not null
          MappingRuleMatchType.validateJSON(data['MatchType']);
        }
        // validate the optional field `Value`
        if (data['Value']) { // data not null
          String.validateJSON(data['Value']);
        }
        // validate the optional field `RoleARN`
        if (data['RoleARN']) { // data not null
          String.validateJSON(data['RoleARN']);
        }

        return true;
    }


}

MappingRule.RequiredProperties = ["Claim", "MatchType", "Value", "RoleARN"];

/**
 * @member {String} Claim
 */
MappingRule.prototype['Claim'] = undefined;

/**
 * @member {module:model/MappingRuleMatchType} MatchType
 */
MappingRule.prototype['MatchType'] = undefined;

/**
 * @member {String} Value
 */
MappingRule.prototype['Value'] = undefined;

/**
 * @member {String} RoleARN
 */
MappingRule.prototype['RoleARN'] = undefined;






export default MappingRule;

