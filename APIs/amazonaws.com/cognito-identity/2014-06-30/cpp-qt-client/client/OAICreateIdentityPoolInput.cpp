/**
 * Amazon Cognito Identity
 * <fullname>Amazon Cognito Federated Identities</fullname> <p>Amazon Cognito Federated Identities is a web service that delivers scoped temporary credentials to mobile devices and other untrusted environments. It uniquely identifies a device and supplies the user with a consistent identity over the lifetime of an application.</p> <p>Using Amazon Cognito Federated Identities, you can enable authentication with one or more third-party identity providers (Facebook, Google, or Login with Amazon) or an Amazon Cognito user pool, and you can also choose to support unauthenticated access from your app. Cognito delivers a unique identifier for each user and acts as an OpenID token provider trusted by AWS Security Token Service (STS) to access temporary, limited-privilege AWS credentials.</p> <p>For a description of the authentication flow from the Amazon Cognito Developer Guide see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html\">Authentication Flow</a>.</p> <p>For more information see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html\">Amazon Cognito Federated Identities</a>.</p>
 *
 * The version of the OpenAPI document: 2014-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateIdentityPoolInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateIdentityPoolInput::OAICreateIdentityPoolInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateIdentityPoolInput::OAICreateIdentityPoolInput() {
    this->initializeModel();
}

OAICreateIdentityPoolInput::~OAICreateIdentityPoolInput() {}

void OAICreateIdentityPoolInput::initializeModel() {

    m_identity_pool_name_isSet = false;
    m_identity_pool_name_isValid = false;

    m_allow_unauthenticated_identities_isSet = false;
    m_allow_unauthenticated_identities_isValid = false;

    m_allow_classic_flow_isSet = false;
    m_allow_classic_flow_isValid = false;

    m_supported_login_providers_isSet = false;
    m_supported_login_providers_isValid = false;

    m_developer_provider_name_isSet = false;
    m_developer_provider_name_isValid = false;

    m_open_id_connect_provider_arns_isSet = false;
    m_open_id_connect_provider_arns_isValid = false;

    m_cognito_identity_providers_isSet = false;
    m_cognito_identity_providers_isValid = false;

    m_saml_provider_arns_isSet = false;
    m_saml_provider_arns_isValid = false;

    m_identity_pool_tags_isSet = false;
    m_identity_pool_tags_isValid = false;
}

void OAICreateIdentityPoolInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateIdentityPoolInput::fromJsonObject(QJsonObject json) {

    m_identity_pool_name_isValid = ::OpenAPI::fromJsonValue(m_identity_pool_name, json[QString("IdentityPoolName")]);
    m_identity_pool_name_isSet = !json[QString("IdentityPoolName")].isNull() && m_identity_pool_name_isValid;

    m_allow_unauthenticated_identities_isValid = ::OpenAPI::fromJsonValue(m_allow_unauthenticated_identities, json[QString("AllowUnauthenticatedIdentities")]);
    m_allow_unauthenticated_identities_isSet = !json[QString("AllowUnauthenticatedIdentities")].isNull() && m_allow_unauthenticated_identities_isValid;

    m_allow_classic_flow_isValid = ::OpenAPI::fromJsonValue(m_allow_classic_flow, json[QString("AllowClassicFlow")]);
    m_allow_classic_flow_isSet = !json[QString("AllowClassicFlow")].isNull() && m_allow_classic_flow_isValid;

    m_supported_login_providers_isValid = ::OpenAPI::fromJsonValue(m_supported_login_providers, json[QString("SupportedLoginProviders")]);
    m_supported_login_providers_isSet = !json[QString("SupportedLoginProviders")].isNull() && m_supported_login_providers_isValid;

    m_developer_provider_name_isValid = ::OpenAPI::fromJsonValue(m_developer_provider_name, json[QString("DeveloperProviderName")]);
    m_developer_provider_name_isSet = !json[QString("DeveloperProviderName")].isNull() && m_developer_provider_name_isValid;

    m_open_id_connect_provider_arns_isValid = ::OpenAPI::fromJsonValue(m_open_id_connect_provider_arns, json[QString("OpenIdConnectProviderARNs")]);
    m_open_id_connect_provider_arns_isSet = !json[QString("OpenIdConnectProviderARNs")].isNull() && m_open_id_connect_provider_arns_isValid;

    m_cognito_identity_providers_isValid = ::OpenAPI::fromJsonValue(m_cognito_identity_providers, json[QString("CognitoIdentityProviders")]);
    m_cognito_identity_providers_isSet = !json[QString("CognitoIdentityProviders")].isNull() && m_cognito_identity_providers_isValid;

    m_saml_provider_arns_isValid = ::OpenAPI::fromJsonValue(m_saml_provider_arns, json[QString("SamlProviderARNs")]);
    m_saml_provider_arns_isSet = !json[QString("SamlProviderARNs")].isNull() && m_saml_provider_arns_isValid;

    m_identity_pool_tags_isValid = ::OpenAPI::fromJsonValue(m_identity_pool_tags, json[QString("IdentityPoolTags")]);
    m_identity_pool_tags_isSet = !json[QString("IdentityPoolTags")].isNull() && m_identity_pool_tags_isValid;
}

QString OAICreateIdentityPoolInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateIdentityPoolInput::asJsonObject() const {
    QJsonObject obj;
    if (m_identity_pool_name_isSet) {
        obj.insert(QString("IdentityPoolName"), ::OpenAPI::toJsonValue(m_identity_pool_name));
    }
    if (m_allow_unauthenticated_identities_isSet) {
        obj.insert(QString("AllowUnauthenticatedIdentities"), ::OpenAPI::toJsonValue(m_allow_unauthenticated_identities));
    }
    if (m_allow_classic_flow_isSet) {
        obj.insert(QString("AllowClassicFlow"), ::OpenAPI::toJsonValue(m_allow_classic_flow));
    }
    if (m_supported_login_providers.isSet()) {
        obj.insert(QString("SupportedLoginProviders"), ::OpenAPI::toJsonValue(m_supported_login_providers));
    }
    if (m_developer_provider_name_isSet) {
        obj.insert(QString("DeveloperProviderName"), ::OpenAPI::toJsonValue(m_developer_provider_name));
    }
    if (m_open_id_connect_provider_arns.isSet()) {
        obj.insert(QString("OpenIdConnectProviderARNs"), ::OpenAPI::toJsonValue(m_open_id_connect_provider_arns));
    }
    if (m_cognito_identity_providers.isSet()) {
        obj.insert(QString("CognitoIdentityProviders"), ::OpenAPI::toJsonValue(m_cognito_identity_providers));
    }
    if (m_saml_provider_arns.isSet()) {
        obj.insert(QString("SamlProviderARNs"), ::OpenAPI::toJsonValue(m_saml_provider_arns));
    }
    if (m_identity_pool_tags.isSet()) {
        obj.insert(QString("IdentityPoolTags"), ::OpenAPI::toJsonValue(m_identity_pool_tags));
    }
    return obj;
}

QString OAICreateIdentityPoolInput::getIdentityPoolName() const {
    return m_identity_pool_name;
}
void OAICreateIdentityPoolInput::setIdentityPoolName(const QString &identity_pool_name) {
    m_identity_pool_name = identity_pool_name;
    m_identity_pool_name_isSet = true;
}

bool OAICreateIdentityPoolInput::is_identity_pool_name_Set() const{
    return m_identity_pool_name_isSet;
}

bool OAICreateIdentityPoolInput::is_identity_pool_name_Valid() const{
    return m_identity_pool_name_isValid;
}

bool OAICreateIdentityPoolInput::getAllowUnauthenticatedIdentities() const {
    return m_allow_unauthenticated_identities;
}
void OAICreateIdentityPoolInput::setAllowUnauthenticatedIdentities(const bool &allow_unauthenticated_identities) {
    m_allow_unauthenticated_identities = allow_unauthenticated_identities;
    m_allow_unauthenticated_identities_isSet = true;
}

bool OAICreateIdentityPoolInput::is_allow_unauthenticated_identities_Set() const{
    return m_allow_unauthenticated_identities_isSet;
}

bool OAICreateIdentityPoolInput::is_allow_unauthenticated_identities_Valid() const{
    return m_allow_unauthenticated_identities_isValid;
}

bool OAICreateIdentityPoolInput::getAllowClassicFlow() const {
    return m_allow_classic_flow;
}
void OAICreateIdentityPoolInput::setAllowClassicFlow(const bool &allow_classic_flow) {
    m_allow_classic_flow = allow_classic_flow;
    m_allow_classic_flow_isSet = true;
}

bool OAICreateIdentityPoolInput::is_allow_classic_flow_Set() const{
    return m_allow_classic_flow_isSet;
}

bool OAICreateIdentityPoolInput::is_allow_classic_flow_Valid() const{
    return m_allow_classic_flow_isValid;
}

QMap OAICreateIdentityPoolInput::getSupportedLoginProviders() const {
    return m_supported_login_providers;
}
void OAICreateIdentityPoolInput::setSupportedLoginProviders(const QMap &supported_login_providers) {
    m_supported_login_providers = supported_login_providers;
    m_supported_login_providers_isSet = true;
}

bool OAICreateIdentityPoolInput::is_supported_login_providers_Set() const{
    return m_supported_login_providers_isSet;
}

bool OAICreateIdentityPoolInput::is_supported_login_providers_Valid() const{
    return m_supported_login_providers_isValid;
}

QString OAICreateIdentityPoolInput::getDeveloperProviderName() const {
    return m_developer_provider_name;
}
void OAICreateIdentityPoolInput::setDeveloperProviderName(const QString &developer_provider_name) {
    m_developer_provider_name = developer_provider_name;
    m_developer_provider_name_isSet = true;
}

bool OAICreateIdentityPoolInput::is_developer_provider_name_Set() const{
    return m_developer_provider_name_isSet;
}

bool OAICreateIdentityPoolInput::is_developer_provider_name_Valid() const{
    return m_developer_provider_name_isValid;
}

QList OAICreateIdentityPoolInput::getOpenIdConnectProviderArns() const {
    return m_open_id_connect_provider_arns;
}
void OAICreateIdentityPoolInput::setOpenIdConnectProviderArns(const QList &open_id_connect_provider_arns) {
    m_open_id_connect_provider_arns = open_id_connect_provider_arns;
    m_open_id_connect_provider_arns_isSet = true;
}

bool OAICreateIdentityPoolInput::is_open_id_connect_provider_arns_Set() const{
    return m_open_id_connect_provider_arns_isSet;
}

bool OAICreateIdentityPoolInput::is_open_id_connect_provider_arns_Valid() const{
    return m_open_id_connect_provider_arns_isValid;
}

QList OAICreateIdentityPoolInput::getCognitoIdentityProviders() const {
    return m_cognito_identity_providers;
}
void OAICreateIdentityPoolInput::setCognitoIdentityProviders(const QList &cognito_identity_providers) {
    m_cognito_identity_providers = cognito_identity_providers;
    m_cognito_identity_providers_isSet = true;
}

bool OAICreateIdentityPoolInput::is_cognito_identity_providers_Set() const{
    return m_cognito_identity_providers_isSet;
}

bool OAICreateIdentityPoolInput::is_cognito_identity_providers_Valid() const{
    return m_cognito_identity_providers_isValid;
}

QList OAICreateIdentityPoolInput::getSamlProviderArns() const {
    return m_saml_provider_arns;
}
void OAICreateIdentityPoolInput::setSamlProviderArns(const QList &saml_provider_arns) {
    m_saml_provider_arns = saml_provider_arns;
    m_saml_provider_arns_isSet = true;
}

bool OAICreateIdentityPoolInput::is_saml_provider_arns_Set() const{
    return m_saml_provider_arns_isSet;
}

bool OAICreateIdentityPoolInput::is_saml_provider_arns_Valid() const{
    return m_saml_provider_arns_isValid;
}

QMap OAICreateIdentityPoolInput::getIdentityPoolTags() const {
    return m_identity_pool_tags;
}
void OAICreateIdentityPoolInput::setIdentityPoolTags(const QMap &identity_pool_tags) {
    m_identity_pool_tags = identity_pool_tags;
    m_identity_pool_tags_isSet = true;
}

bool OAICreateIdentityPoolInput::is_identity_pool_tags_Set() const{
    return m_identity_pool_tags_isSet;
}

bool OAICreateIdentityPoolInput::is_identity_pool_tags_Valid() const{
    return m_identity_pool_tags_isValid;
}

bool OAICreateIdentityPoolInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identity_pool_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_unauthenticated_identities_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_classic_flow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_login_providers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_developer_provider_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_id_connect_provider_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cognito_identity_providers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_saml_provider_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_pool_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateIdentityPoolInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_identity_pool_name_isValid && m_allow_unauthenticated_identities_isValid && true;
}

} // namespace OpenAPI
