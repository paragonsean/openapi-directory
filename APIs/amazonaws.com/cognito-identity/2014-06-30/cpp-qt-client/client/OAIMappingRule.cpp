/**
 * Amazon Cognito Identity
 * <fullname>Amazon Cognito Federated Identities</fullname> <p>Amazon Cognito Federated Identities is a web service that delivers scoped temporary credentials to mobile devices and other untrusted environments. It uniquely identifies a device and supplies the user with a consistent identity over the lifetime of an application.</p> <p>Using Amazon Cognito Federated Identities, you can enable authentication with one or more third-party identity providers (Facebook, Google, or Login with Amazon) or an Amazon Cognito user pool, and you can also choose to support unauthenticated access from your app. Cognito delivers a unique identifier for each user and acts as an OpenID token provider trusted by AWS Security Token Service (STS) to access temporary, limited-privilege AWS credentials.</p> <p>For a description of the authentication flow from the Amazon Cognito Developer Guide see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html\">Authentication Flow</a>.</p> <p>For more information see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html\">Amazon Cognito Federated Identities</a>.</p>
 *
 * The version of the OpenAPI document: 2014-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMappingRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMappingRule::OAIMappingRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMappingRule::OAIMappingRule() {
    this->initializeModel();
}

OAIMappingRule::~OAIMappingRule() {}

void OAIMappingRule::initializeModel() {

    m_claim_isSet = false;
    m_claim_isValid = false;

    m_match_type_isSet = false;
    m_match_type_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;
}

void OAIMappingRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMappingRule::fromJsonObject(QJsonObject json) {

    m_claim_isValid = ::OpenAPI::fromJsonValue(m_claim, json[QString("Claim")]);
    m_claim_isSet = !json[QString("Claim")].isNull() && m_claim_isValid;

    m_match_type_isValid = ::OpenAPI::fromJsonValue(m_match_type, json[QString("MatchType")]);
    m_match_type_isSet = !json[QString("MatchType")].isNull() && m_match_type_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleARN")]);
    m_role_arn_isSet = !json[QString("RoleARN")].isNull() && m_role_arn_isValid;
}

QString OAIMappingRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMappingRule::asJsonObject() const {
    QJsonObject obj;
    if (m_claim_isSet) {
        obj.insert(QString("Claim"), ::OpenAPI::toJsonValue(m_claim));
    }
    if (m_match_type.isSet()) {
        obj.insert(QString("MatchType"), ::OpenAPI::toJsonValue(m_match_type));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleARN"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    return obj;
}

QString OAIMappingRule::getClaim() const {
    return m_claim;
}
void OAIMappingRule::setClaim(const QString &claim) {
    m_claim = claim;
    m_claim_isSet = true;
}

bool OAIMappingRule::is_claim_Set() const{
    return m_claim_isSet;
}

bool OAIMappingRule::is_claim_Valid() const{
    return m_claim_isValid;
}

OAIMappingRuleMatchType OAIMappingRule::getMatchType() const {
    return m_match_type;
}
void OAIMappingRule::setMatchType(const OAIMappingRuleMatchType &match_type) {
    m_match_type = match_type;
    m_match_type_isSet = true;
}

bool OAIMappingRule::is_match_type_Set() const{
    return m_match_type_isSet;
}

bool OAIMappingRule::is_match_type_Valid() const{
    return m_match_type_isValid;
}

QString OAIMappingRule::getValue() const {
    return m_value;
}
void OAIMappingRule::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIMappingRule::is_value_Set() const{
    return m_value_isSet;
}

bool OAIMappingRule::is_value_Valid() const{
    return m_value_isValid;
}

QString OAIMappingRule::getRoleArn() const {
    return m_role_arn;
}
void OAIMappingRule::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIMappingRule::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIMappingRule::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

bool OAIMappingRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_claim_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMappingRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_claim_isValid && m_match_type_isValid && m_value_isValid && m_role_arn_isValid && true;
}

} // namespace OpenAPI
