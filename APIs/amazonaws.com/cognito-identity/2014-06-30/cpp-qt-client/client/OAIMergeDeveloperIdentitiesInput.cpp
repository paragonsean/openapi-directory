/**
 * Amazon Cognito Identity
 * <fullname>Amazon Cognito Federated Identities</fullname> <p>Amazon Cognito Federated Identities is a web service that delivers scoped temporary credentials to mobile devices and other untrusted environments. It uniquely identifies a device and supplies the user with a consistent identity over the lifetime of an application.</p> <p>Using Amazon Cognito Federated Identities, you can enable authentication with one or more third-party identity providers (Facebook, Google, or Login with Amazon) or an Amazon Cognito user pool, and you can also choose to support unauthenticated access from your app. Cognito delivers a unique identifier for each user and acts as an OpenID token provider trusted by AWS Security Token Service (STS) to access temporary, limited-privilege AWS credentials.</p> <p>For a description of the authentication flow from the Amazon Cognito Developer Guide see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html\">Authentication Flow</a>.</p> <p>For more information see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html\">Amazon Cognito Federated Identities</a>.</p>
 *
 * The version of the OpenAPI document: 2014-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMergeDeveloperIdentitiesInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMergeDeveloperIdentitiesInput::OAIMergeDeveloperIdentitiesInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMergeDeveloperIdentitiesInput::OAIMergeDeveloperIdentitiesInput() {
    this->initializeModel();
}

OAIMergeDeveloperIdentitiesInput::~OAIMergeDeveloperIdentitiesInput() {}

void OAIMergeDeveloperIdentitiesInput::initializeModel() {

    m_source_user_identifier_isSet = false;
    m_source_user_identifier_isValid = false;

    m_destination_user_identifier_isSet = false;
    m_destination_user_identifier_isValid = false;

    m_developer_provider_name_isSet = false;
    m_developer_provider_name_isValid = false;

    m_identity_pool_id_isSet = false;
    m_identity_pool_id_isValid = false;
}

void OAIMergeDeveloperIdentitiesInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMergeDeveloperIdentitiesInput::fromJsonObject(QJsonObject json) {

    m_source_user_identifier_isValid = ::OpenAPI::fromJsonValue(m_source_user_identifier, json[QString("SourceUserIdentifier")]);
    m_source_user_identifier_isSet = !json[QString("SourceUserIdentifier")].isNull() && m_source_user_identifier_isValid;

    m_destination_user_identifier_isValid = ::OpenAPI::fromJsonValue(m_destination_user_identifier, json[QString("DestinationUserIdentifier")]);
    m_destination_user_identifier_isSet = !json[QString("DestinationUserIdentifier")].isNull() && m_destination_user_identifier_isValid;

    m_developer_provider_name_isValid = ::OpenAPI::fromJsonValue(m_developer_provider_name, json[QString("DeveloperProviderName")]);
    m_developer_provider_name_isSet = !json[QString("DeveloperProviderName")].isNull() && m_developer_provider_name_isValid;

    m_identity_pool_id_isValid = ::OpenAPI::fromJsonValue(m_identity_pool_id, json[QString("IdentityPoolId")]);
    m_identity_pool_id_isSet = !json[QString("IdentityPoolId")].isNull() && m_identity_pool_id_isValid;
}

QString OAIMergeDeveloperIdentitiesInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMergeDeveloperIdentitiesInput::asJsonObject() const {
    QJsonObject obj;
    if (m_source_user_identifier_isSet) {
        obj.insert(QString("SourceUserIdentifier"), ::OpenAPI::toJsonValue(m_source_user_identifier));
    }
    if (m_destination_user_identifier_isSet) {
        obj.insert(QString("DestinationUserIdentifier"), ::OpenAPI::toJsonValue(m_destination_user_identifier));
    }
    if (m_developer_provider_name_isSet) {
        obj.insert(QString("DeveloperProviderName"), ::OpenAPI::toJsonValue(m_developer_provider_name));
    }
    if (m_identity_pool_id_isSet) {
        obj.insert(QString("IdentityPoolId"), ::OpenAPI::toJsonValue(m_identity_pool_id));
    }
    return obj;
}

QString OAIMergeDeveloperIdentitiesInput::getSourceUserIdentifier() const {
    return m_source_user_identifier;
}
void OAIMergeDeveloperIdentitiesInput::setSourceUserIdentifier(const QString &source_user_identifier) {
    m_source_user_identifier = source_user_identifier;
    m_source_user_identifier_isSet = true;
}

bool OAIMergeDeveloperIdentitiesInput::is_source_user_identifier_Set() const{
    return m_source_user_identifier_isSet;
}

bool OAIMergeDeveloperIdentitiesInput::is_source_user_identifier_Valid() const{
    return m_source_user_identifier_isValid;
}

QString OAIMergeDeveloperIdentitiesInput::getDestinationUserIdentifier() const {
    return m_destination_user_identifier;
}
void OAIMergeDeveloperIdentitiesInput::setDestinationUserIdentifier(const QString &destination_user_identifier) {
    m_destination_user_identifier = destination_user_identifier;
    m_destination_user_identifier_isSet = true;
}

bool OAIMergeDeveloperIdentitiesInput::is_destination_user_identifier_Set() const{
    return m_destination_user_identifier_isSet;
}

bool OAIMergeDeveloperIdentitiesInput::is_destination_user_identifier_Valid() const{
    return m_destination_user_identifier_isValid;
}

QString OAIMergeDeveloperIdentitiesInput::getDeveloperProviderName() const {
    return m_developer_provider_name;
}
void OAIMergeDeveloperIdentitiesInput::setDeveloperProviderName(const QString &developer_provider_name) {
    m_developer_provider_name = developer_provider_name;
    m_developer_provider_name_isSet = true;
}

bool OAIMergeDeveloperIdentitiesInput::is_developer_provider_name_Set() const{
    return m_developer_provider_name_isSet;
}

bool OAIMergeDeveloperIdentitiesInput::is_developer_provider_name_Valid() const{
    return m_developer_provider_name_isValid;
}

QString OAIMergeDeveloperIdentitiesInput::getIdentityPoolId() const {
    return m_identity_pool_id;
}
void OAIMergeDeveloperIdentitiesInput::setIdentityPoolId(const QString &identity_pool_id) {
    m_identity_pool_id = identity_pool_id;
    m_identity_pool_id_isSet = true;
}

bool OAIMergeDeveloperIdentitiesInput::is_identity_pool_id_Set() const{
    return m_identity_pool_id_isSet;
}

bool OAIMergeDeveloperIdentitiesInput::is_identity_pool_id_Valid() const{
    return m_identity_pool_id_isValid;
}

bool OAIMergeDeveloperIdentitiesInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_user_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_user_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_developer_provider_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_pool_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMergeDeveloperIdentitiesInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_user_identifier_isValid && m_destination_user_identifier_isValid && m_developer_provider_name_isValid && m_identity_pool_id_isValid && true;
}

} // namespace OpenAPI
