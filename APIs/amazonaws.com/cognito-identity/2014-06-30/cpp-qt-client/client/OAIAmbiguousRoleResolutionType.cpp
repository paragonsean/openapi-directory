/**
 * Amazon Cognito Identity
 * <fullname>Amazon Cognito Federated Identities</fullname> <p>Amazon Cognito Federated Identities is a web service that delivers scoped temporary credentials to mobile devices and other untrusted environments. It uniquely identifies a device and supplies the user with a consistent identity over the lifetime of an application.</p> <p>Using Amazon Cognito Federated Identities, you can enable authentication with one or more third-party identity providers (Facebook, Google, or Login with Amazon) or an Amazon Cognito user pool, and you can also choose to support unauthenticated access from your app. Cognito delivers a unique identifier for each user and acts as an OpenID token provider trusted by AWS Security Token Service (STS) to access temporary, limited-privilege AWS credentials.</p> <p>For a description of the authentication flow from the Amazon Cognito Developer Guide see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html\">Authentication Flow</a>.</p> <p>For more information see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html\">Amazon Cognito Federated Identities</a>.</p>
 *
 * The version of the OpenAPI document: 2014-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAmbiguousRoleResolutionType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAmbiguousRoleResolutionType::OAIAmbiguousRoleResolutionType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAmbiguousRoleResolutionType::OAIAmbiguousRoleResolutionType() {
    this->initializeModel();
}

OAIAmbiguousRoleResolutionType::~OAIAmbiguousRoleResolutionType() {}

void OAIAmbiguousRoleResolutionType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAmbiguousRoleResolutionType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAmbiguousRoleResolutionType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AuthenticatedRole", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAmbiguousRoleResolutionType::AUTHENTICATEDROLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Deny", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAmbiguousRoleResolutionType::DENY;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAmbiguousRoleResolutionType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAmbiguousRoleResolutionType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAmbiguousRoleResolutionType::AUTHENTICATEDROLE:
            val = "AuthenticatedRole";
            break;
        case eOAIAmbiguousRoleResolutionType::DENY:
            val = "Deny";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAmbiguousRoleResolutionType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAmbiguousRoleResolutionType::eOAIAmbiguousRoleResolutionType OAIAmbiguousRoleResolutionType::getValue() const {
    return m_value;
}

void OAIAmbiguousRoleResolutionType::setValue(const OAIAmbiguousRoleResolutionType::eOAIAmbiguousRoleResolutionType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAmbiguousRoleResolutionType::isSet() const {
    
    return m_value_isSet;
}

bool OAIAmbiguousRoleResolutionType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
