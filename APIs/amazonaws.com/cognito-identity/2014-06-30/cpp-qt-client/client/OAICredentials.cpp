/**
 * Amazon Cognito Identity
 * <fullname>Amazon Cognito Federated Identities</fullname> <p>Amazon Cognito Federated Identities is a web service that delivers scoped temporary credentials to mobile devices and other untrusted environments. It uniquely identifies a device and supplies the user with a consistent identity over the lifetime of an application.</p> <p>Using Amazon Cognito Federated Identities, you can enable authentication with one or more third-party identity providers (Facebook, Google, or Login with Amazon) or an Amazon Cognito user pool, and you can also choose to support unauthenticated access from your app. Cognito delivers a unique identifier for each user and acts as an OpenID token provider trusted by AWS Security Token Service (STS) to access temporary, limited-privilege AWS credentials.</p> <p>For a description of the authentication flow from the Amazon Cognito Developer Guide see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html\">Authentication Flow</a>.</p> <p>For more information see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html\">Amazon Cognito Federated Identities</a>.</p>
 *
 * The version of the OpenAPI document: 2014-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICredentials.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICredentials::OAICredentials(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICredentials::OAICredentials() {
    this->initializeModel();
}

OAICredentials::~OAICredentials() {}

void OAICredentials::initializeModel() {

    m_access_key_id_isSet = false;
    m_access_key_id_isValid = false;

    m_secret_key_isSet = false;
    m_secret_key_isValid = false;

    m_session_token_isSet = false;
    m_session_token_isValid = false;

    m_expiration_isSet = false;
    m_expiration_isValid = false;
}

void OAICredentials::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICredentials::fromJsonObject(QJsonObject json) {

    m_access_key_id_isValid = ::OpenAPI::fromJsonValue(m_access_key_id, json[QString("AccessKeyId")]);
    m_access_key_id_isSet = !json[QString("AccessKeyId")].isNull() && m_access_key_id_isValid;

    m_secret_key_isValid = ::OpenAPI::fromJsonValue(m_secret_key, json[QString("SecretKey")]);
    m_secret_key_isSet = !json[QString("SecretKey")].isNull() && m_secret_key_isValid;

    m_session_token_isValid = ::OpenAPI::fromJsonValue(m_session_token, json[QString("SessionToken")]);
    m_session_token_isSet = !json[QString("SessionToken")].isNull() && m_session_token_isValid;

    m_expiration_isValid = ::OpenAPI::fromJsonValue(m_expiration, json[QString("Expiration")]);
    m_expiration_isSet = !json[QString("Expiration")].isNull() && m_expiration_isValid;
}

QString OAICredentials::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICredentials::asJsonObject() const {
    QJsonObject obj;
    if (m_access_key_id_isSet) {
        obj.insert(QString("AccessKeyId"), ::OpenAPI::toJsonValue(m_access_key_id));
    }
    if (m_secret_key_isSet) {
        obj.insert(QString("SecretKey"), ::OpenAPI::toJsonValue(m_secret_key));
    }
    if (m_session_token_isSet) {
        obj.insert(QString("SessionToken"), ::OpenAPI::toJsonValue(m_session_token));
    }
    if (m_expiration_isSet) {
        obj.insert(QString("Expiration"), ::OpenAPI::toJsonValue(m_expiration));
    }
    return obj;
}

QString OAICredentials::getAccessKeyId() const {
    return m_access_key_id;
}
void OAICredentials::setAccessKeyId(const QString &access_key_id) {
    m_access_key_id = access_key_id;
    m_access_key_id_isSet = true;
}

bool OAICredentials::is_access_key_id_Set() const{
    return m_access_key_id_isSet;
}

bool OAICredentials::is_access_key_id_Valid() const{
    return m_access_key_id_isValid;
}

QString OAICredentials::getSecretKey() const {
    return m_secret_key;
}
void OAICredentials::setSecretKey(const QString &secret_key) {
    m_secret_key = secret_key;
    m_secret_key_isSet = true;
}

bool OAICredentials::is_secret_key_Set() const{
    return m_secret_key_isSet;
}

bool OAICredentials::is_secret_key_Valid() const{
    return m_secret_key_isValid;
}

QString OAICredentials::getSessionToken() const {
    return m_session_token;
}
void OAICredentials::setSessionToken(const QString &session_token) {
    m_session_token = session_token;
    m_session_token_isSet = true;
}

bool OAICredentials::is_session_token_Set() const{
    return m_session_token_isSet;
}

bool OAICredentials::is_session_token_Valid() const{
    return m_session_token_isValid;
}

QDateTime OAICredentials::getExpiration() const {
    return m_expiration;
}
void OAICredentials::setExpiration(const QDateTime &expiration) {
    m_expiration = expiration;
    m_expiration_isSet = true;
}

bool OAICredentials::is_expiration_Set() const{
    return m_expiration_isSet;
}

bool OAICredentials::is_expiration_Valid() const{
    return m_expiration_isValid;
}

bool OAICredentials::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICredentials::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
