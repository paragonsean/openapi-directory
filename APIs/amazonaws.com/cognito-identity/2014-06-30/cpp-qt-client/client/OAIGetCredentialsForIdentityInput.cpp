/**
 * Amazon Cognito Identity
 * <fullname>Amazon Cognito Federated Identities</fullname> <p>Amazon Cognito Federated Identities is a web service that delivers scoped temporary credentials to mobile devices and other untrusted environments. It uniquely identifies a device and supplies the user with a consistent identity over the lifetime of an application.</p> <p>Using Amazon Cognito Federated Identities, you can enable authentication with one or more third-party identity providers (Facebook, Google, or Login with Amazon) or an Amazon Cognito user pool, and you can also choose to support unauthenticated access from your app. Cognito delivers a unique identifier for each user and acts as an OpenID token provider trusted by AWS Security Token Service (STS) to access temporary, limited-privilege AWS credentials.</p> <p>For a description of the authentication flow from the Amazon Cognito Developer Guide see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html\">Authentication Flow</a>.</p> <p>For more information see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html\">Amazon Cognito Federated Identities</a>.</p>
 *
 * The version of the OpenAPI document: 2014-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetCredentialsForIdentityInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetCredentialsForIdentityInput::OAIGetCredentialsForIdentityInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetCredentialsForIdentityInput::OAIGetCredentialsForIdentityInput() {
    this->initializeModel();
}

OAIGetCredentialsForIdentityInput::~OAIGetCredentialsForIdentityInput() {}

void OAIGetCredentialsForIdentityInput::initializeModel() {

    m_identity_id_isSet = false;
    m_identity_id_isValid = false;

    m_logins_isSet = false;
    m_logins_isValid = false;

    m_custom_role_arn_isSet = false;
    m_custom_role_arn_isValid = false;
}

void OAIGetCredentialsForIdentityInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetCredentialsForIdentityInput::fromJsonObject(QJsonObject json) {

    m_identity_id_isValid = ::OpenAPI::fromJsonValue(m_identity_id, json[QString("IdentityId")]);
    m_identity_id_isSet = !json[QString("IdentityId")].isNull() && m_identity_id_isValid;

    m_logins_isValid = ::OpenAPI::fromJsonValue(m_logins, json[QString("Logins")]);
    m_logins_isSet = !json[QString("Logins")].isNull() && m_logins_isValid;

    m_custom_role_arn_isValid = ::OpenAPI::fromJsonValue(m_custom_role_arn, json[QString("CustomRoleArn")]);
    m_custom_role_arn_isSet = !json[QString("CustomRoleArn")].isNull() && m_custom_role_arn_isValid;
}

QString OAIGetCredentialsForIdentityInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetCredentialsForIdentityInput::asJsonObject() const {
    QJsonObject obj;
    if (m_identity_id_isSet) {
        obj.insert(QString("IdentityId"), ::OpenAPI::toJsonValue(m_identity_id));
    }
    if (m_logins.isSet()) {
        obj.insert(QString("Logins"), ::OpenAPI::toJsonValue(m_logins));
    }
    if (m_custom_role_arn_isSet) {
        obj.insert(QString("CustomRoleArn"), ::OpenAPI::toJsonValue(m_custom_role_arn));
    }
    return obj;
}

QString OAIGetCredentialsForIdentityInput::getIdentityId() const {
    return m_identity_id;
}
void OAIGetCredentialsForIdentityInput::setIdentityId(const QString &identity_id) {
    m_identity_id = identity_id;
    m_identity_id_isSet = true;
}

bool OAIGetCredentialsForIdentityInput::is_identity_id_Set() const{
    return m_identity_id_isSet;
}

bool OAIGetCredentialsForIdentityInput::is_identity_id_Valid() const{
    return m_identity_id_isValid;
}

QMap OAIGetCredentialsForIdentityInput::getLogins() const {
    return m_logins;
}
void OAIGetCredentialsForIdentityInput::setLogins(const QMap &logins) {
    m_logins = logins;
    m_logins_isSet = true;
}

bool OAIGetCredentialsForIdentityInput::is_logins_Set() const{
    return m_logins_isSet;
}

bool OAIGetCredentialsForIdentityInput::is_logins_Valid() const{
    return m_logins_isValid;
}

QString OAIGetCredentialsForIdentityInput::getCustomRoleArn() const {
    return m_custom_role_arn;
}
void OAIGetCredentialsForIdentityInput::setCustomRoleArn(const QString &custom_role_arn) {
    m_custom_role_arn = custom_role_arn;
    m_custom_role_arn_isSet = true;
}

bool OAIGetCredentialsForIdentityInput::is_custom_role_arn_Set() const{
    return m_custom_role_arn_isSet;
}

bool OAIGetCredentialsForIdentityInput::is_custom_role_arn_Valid() const{
    return m_custom_role_arn_isValid;
}

bool OAIGetCredentialsForIdentityInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logins.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetCredentialsForIdentityInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_identity_id_isValid && true;
}

} // namespace OpenAPI
