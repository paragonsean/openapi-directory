/*
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.LambdaExecutionParametersLinuxProcessParams;
import org.openapitools.client.model.LambdaInputPayloadEncodingType;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for CreateComponentVersionRequestLambdaFunctionComponentLambdaParameters
 */
public class CreateComponentVersionRequestLambdaFunctionComponentLambdaParametersTest {
    private final CreateComponentVersionRequestLambdaFunctionComponentLambdaParameters model = new CreateComponentVersionRequestLambdaFunctionComponentLambdaParameters();

    /**
     * Model tests for CreateComponentVersionRequestLambdaFunctionComponentLambdaParameters
     */
    @Test
    public void testCreateComponentVersionRequestLambdaFunctionComponentLambdaParameters() {
        // TODO: test CreateComponentVersionRequestLambdaFunctionComponentLambdaParameters
    }

    /**
     * Test the property 'eventSources'
     */
    @Test
    public void eventSourcesTest() {
        // TODO: test eventSources
    }

    /**
     * Test the property 'maxQueueSize'
     */
    @Test
    public void maxQueueSizeTest() {
        // TODO: test maxQueueSize
    }

    /**
     * Test the property 'maxInstancesCount'
     */
    @Test
    public void maxInstancesCountTest() {
        // TODO: test maxInstancesCount
    }

    /**
     * Test the property 'maxIdleTimeInSeconds'
     */
    @Test
    public void maxIdleTimeInSecondsTest() {
        // TODO: test maxIdleTimeInSeconds
    }

    /**
     * Test the property 'timeoutInSeconds'
     */
    @Test
    public void timeoutInSecondsTest() {
        // TODO: test timeoutInSeconds
    }

    /**
     * Test the property 'statusTimeoutInSeconds'
     */
    @Test
    public void statusTimeoutInSecondsTest() {
        // TODO: test statusTimeoutInSeconds
    }

    /**
     * Test the property 'pinned'
     */
    @Test
    public void pinnedTest() {
        // TODO: test pinned
    }

    /**
     * Test the property 'inputPayloadEncodingType'
     */
    @Test
    public void inputPayloadEncodingTypeTest() {
        // TODO: test inputPayloadEncodingType
    }

    /**
     * Test the property 'execArgs'
     */
    @Test
    public void execArgsTest() {
        // TODO: test execArgs
    }

    /**
     * Test the property 'environmentVariables'
     */
    @Test
    public void environmentVariablesTest() {
        // TODO: test environmentVariables
    }

    /**
     * Test the property 'linuxProcessParams'
     */
    @Test
    public void linuxProcessParamsTest() {
        // TODO: test linuxProcessParams
    }

}
