/*
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.DeploymentStatus;
import org.openapitools.client.model.GetDeploymentResponseDeploymentPolicies;
import org.openapitools.client.model.GetDeploymentResponseIotJobConfiguration;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for GetDeploymentResponse
 */
public class GetDeploymentResponseTest {
    private final GetDeploymentResponse model = new GetDeploymentResponse();

    /**
     * Model tests for GetDeploymentResponse
     */
    @Test
    public void testGetDeploymentResponse() {
        // TODO: test GetDeploymentResponse
    }

    /**
     * Test the property 'targetArn'
     */
    @Test
    public void targetArnTest() {
        // TODO: test targetArn
    }

    /**
     * Test the property 'revisionId'
     */
    @Test
    public void revisionIdTest() {
        // TODO: test revisionId
    }

    /**
     * Test the property 'deploymentId'
     */
    @Test
    public void deploymentIdTest() {
        // TODO: test deploymentId
    }

    /**
     * Test the property 'deploymentName'
     */
    @Test
    public void deploymentNameTest() {
        // TODO: test deploymentName
    }

    /**
     * Test the property 'deploymentStatus'
     */
    @Test
    public void deploymentStatusTest() {
        // TODO: test deploymentStatus
    }

    /**
     * Test the property 'iotJobId'
     */
    @Test
    public void iotJobIdTest() {
        // TODO: test iotJobId
    }

    /**
     * Test the property 'iotJobArn'
     */
    @Test
    public void iotJobArnTest() {
        // TODO: test iotJobArn
    }

    /**
     * Test the property 'components'
     */
    @Test
    public void componentsTest() {
        // TODO: test components
    }

    /**
     * Test the property 'deploymentPolicies'
     */
    @Test
    public void deploymentPoliciesTest() {
        // TODO: test deploymentPolicies
    }

    /**
     * Test the property 'iotJobConfiguration'
     */
    @Test
    public void iotJobConfigurationTest() {
        // TODO: test iotJobConfiguration
    }

    /**
     * Test the property 'creationTimestamp'
     */
    @Test
    public void creationTimestampTest() {
        // TODO: test creationTimestamp
    }

    /**
     * Test the property 'isLatestForTarget'
     */
    @Test
    public void isLatestForTargetTest() {
        // TODO: test isLatestForTarget
    }

    /**
     * Test the property 'parentTargetArn'
     */
    @Test
    public void parentTargetArnTest() {
        // TODO: test parentTargetArn
    }

    /**
     * Test the property 'tags'
     */
    @Test
    public void tagsTest() {
        // TODO: test tags
    }

}
