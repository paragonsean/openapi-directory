/*
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.EffectiveDeploymentExecutionStatus;
import org.openapitools.client.model.EffectiveDeploymentStatusDetails;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for EffectiveDeployment
 */
public class EffectiveDeploymentTest {
    private final EffectiveDeployment model = new EffectiveDeployment();

    /**
     * Model tests for EffectiveDeployment
     */
    @Test
    public void testEffectiveDeployment() {
        // TODO: test EffectiveDeployment
    }

    /**
     * Test the property 'deploymentId'
     */
    @Test
    public void deploymentIdTest() {
        // TODO: test deploymentId
    }

    /**
     * Test the property 'deploymentName'
     */
    @Test
    public void deploymentNameTest() {
        // TODO: test deploymentName
    }

    /**
     * Test the property 'iotJobId'
     */
    @Test
    public void iotJobIdTest() {
        // TODO: test iotJobId
    }

    /**
     * Test the property 'iotJobArn'
     */
    @Test
    public void iotJobArnTest() {
        // TODO: test iotJobArn
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'targetArn'
     */
    @Test
    public void targetArnTest() {
        // TODO: test targetArn
    }

    /**
     * Test the property 'coreDeviceExecutionStatus'
     */
    @Test
    public void coreDeviceExecutionStatusTest() {
        // TODO: test coreDeviceExecutionStatus
    }

    /**
     * Test the property 'reason'
     */
    @Test
    public void reasonTest() {
        // TODO: test reason
    }

    /**
     * Test the property 'creationTimestamp'
     */
    @Test
    public void creationTimestampTest() {
        // TODO: test creationTimestamp
    }

    /**
     * Test the property 'modifiedTimestamp'
     */
    @Test
    public void modifiedTimestampTest() {
        // TODO: test modifiedTimestamp
    }

    /**
     * Test the property 'statusDetails'
     */
    @Test
    public void statusDetailsTest() {
        // TODO: test statusDetails
    }

}
