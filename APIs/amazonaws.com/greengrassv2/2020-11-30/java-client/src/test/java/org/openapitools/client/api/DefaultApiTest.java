/*
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AssociateServiceRoleToAccountRequest;
import org.openapitools.client.model.AssociateServiceRoleToAccountResponse;
import org.openapitools.client.model.BatchAssociateClientDeviceWithCoreDeviceRequest;
import org.openapitools.client.model.BatchAssociateClientDeviceWithCoreDeviceResponse;
import org.openapitools.client.model.BatchDisassociateClientDeviceFromCoreDeviceRequest;
import org.openapitools.client.model.BatchDisassociateClientDeviceFromCoreDeviceResponse;
import org.openapitools.client.model.CancelDeploymentResponse;
import org.openapitools.client.model.CreateComponentVersionRequest;
import org.openapitools.client.model.CreateComponentVersionResponse;
import org.openapitools.client.model.CreateDeploymentRequest;
import org.openapitools.client.model.CreateDeploymentResponse;
import org.openapitools.client.model.DescribeComponentResponse;
import org.openapitools.client.model.DisassociateServiceRoleFromAccountResponse;
import org.openapitools.client.model.GetComponentResponse;
import org.openapitools.client.model.GetComponentVersionArtifactResponse;
import org.openapitools.client.model.GetConnectivityInfoResponse;
import org.openapitools.client.model.GetCoreDeviceResponse;
import org.openapitools.client.model.GetDeploymentResponse;
import org.openapitools.client.model.GetServiceRoleForAccountResponse;
import org.openapitools.client.model.ListClientDevicesAssociatedWithCoreDeviceResponse;
import org.openapitools.client.model.ListComponentVersionsResponse;
import org.openapitools.client.model.ListComponentsResponse;
import org.openapitools.client.model.ListCoreDevicesResponse;
import org.openapitools.client.model.ListDeploymentsResponse;
import org.openapitools.client.model.ListEffectiveDeploymentsResponse;
import org.openapitools.client.model.ListInstalledComponentsResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ResolveComponentCandidatesRequest;
import org.openapitools.client.model.ResolveComponentCandidatesResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UpdateConnectivityInfoRequest;
import org.openapitools.client.model.UpdateConnectivityInfoResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Associates a Greengrass service role with IoT Greengrass for your Amazon Web Services account in this Amazon Web Services Region. IoT Greengrass uses this role to verify the identity of client devices and manage core device connectivity information. The role must include the &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/iam/home#/policies/arn:awsiam::aws:policy/service-role/AWSGreengrassResourceAccessRolePolicy\&quot;&gt;AWSGreengrassResourceAccessRolePolicy&lt;/a&gt; managed policy or a custom policy that defines equivalent permissions for the IoT Greengrass features that you use. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-service-role.html\&quot;&gt;Greengrass service role&lt;/a&gt; in the &lt;i&gt;IoT Greengrass Version 2 Developer Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateServiceRoleToAccountTest() throws ApiException {
        AssociateServiceRoleToAccountRequest associateServiceRoleToAccountRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AssociateServiceRoleToAccountResponse response = api.associateServiceRoleToAccount(associateServiceRoleToAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Associates a list of client devices with a core device. Use this API operation to specify which client devices can discover a core device through cloud discovery. With cloud discovery, client devices connect to IoT Greengrass to retrieve associated core devices&#39; connectivity information and certificates. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-cloud-discovery.html\&quot;&gt;Configure cloud discovery&lt;/a&gt; in the &lt;i&gt;IoT Greengrass V2 Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Client devices are local IoT devices that connect to and communicate with an IoT Greengrass core device over MQTT. You can connect client devices to a core device to sync MQTT messages and data to Amazon Web Services IoT Core and interact with client devices in Greengrass components. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/greengrass/v2/developerguide/interact-with-local-iot-devices.html\&quot;&gt;Interact with local IoT devices&lt;/a&gt; in the &lt;i&gt;IoT Greengrass V2 Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchAssociateClientDeviceWithCoreDeviceTest() throws ApiException {
        String coreDeviceThingName = null;
        BatchAssociateClientDeviceWithCoreDeviceRequest batchAssociateClientDeviceWithCoreDeviceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchAssociateClientDeviceWithCoreDeviceResponse response = api.batchAssociateClientDeviceWithCoreDevice(coreDeviceThingName, batchAssociateClientDeviceWithCoreDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disassociates a list of client devices from a core device. After you disassociate a client device from a core device, the client device won&#39;t be able to use cloud discovery to retrieve the core device&#39;s connectivity information and certificates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchDisassociateClientDeviceFromCoreDeviceTest() throws ApiException {
        String coreDeviceThingName = null;
        BatchDisassociateClientDeviceFromCoreDeviceRequest batchDisassociateClientDeviceFromCoreDeviceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchDisassociateClientDeviceFromCoreDeviceResponse response = api.batchDisassociateClientDeviceFromCoreDevice(coreDeviceThingName, batchDisassociateClientDeviceFromCoreDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Cancels a deployment. This operation cancels the deployment for devices that haven&#39;t yet received it. If a device already received the deployment, this operation doesn&#39;t change anything for that device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelDeploymentTest() throws ApiException {
        String deploymentId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CancelDeploymentResponse response = api.cancelDeployment(deploymentId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a component. Components are software that run on Greengrass core devices. After you develop and test a component on your core device, you can use this operation to upload your component to IoT Greengrass. Then, you can deploy the component to other core devices.&lt;/p&gt; &lt;p&gt;You can use this operation to do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Create components from recipes&lt;/b&gt; &lt;/p&gt; &lt;p&gt;Create a component from a recipe, which is a file that defines the component&#39;s metadata, parameters, dependencies, lifecycle, artifacts, and platform capability. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/greengrass/v2/developerguide/component-recipe-reference.html\&quot;&gt;IoT Greengrass component recipe reference&lt;/a&gt; in the &lt;i&gt;IoT Greengrass V2 Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;To create a component from a recipe, specify &lt;code&gt;inlineRecipe&lt;/code&gt; when you call this operation.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Create components from Lambda functions&lt;/b&gt; &lt;/p&gt; &lt;p&gt;Create a component from an Lambda function that runs on IoT Greengrass. This creates a recipe and artifacts from the Lambda function&#39;s deployment package. You can use this operation to migrate Lambda functions from IoT Greengrass V1 to IoT Greengrass V2.&lt;/p&gt; &lt;p&gt;This function only accepts Lambda functions that use the following runtimes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Python 2.7 – &lt;code&gt;python2.7&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Python 3.7 – &lt;code&gt;python3.7&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Python 3.8 – &lt;code&gt;python3.8&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Python 3.9 – &lt;code&gt;python3.9&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Java 8 – &lt;code&gt;java8&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Java 11 – &lt;code&gt;java11&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Node.js 10 – &lt;code&gt;nodejs10.x&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Node.js 12 – &lt;code&gt;nodejs12.x&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Node.js 14 – &lt;code&gt;nodejs14.x&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To create a component from a Lambda function, specify &lt;code&gt;lambdaFunction&lt;/code&gt; when you call this operation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;IoT Greengrass currently supports Lambda functions on only Linux core devices.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createComponentVersionTest() throws ApiException {
        CreateComponentVersionRequest createComponentVersionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateComponentVersionResponse response = api.createComponentVersion(createComponentVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a continuous deployment for a target, which is a Greengrass core device or group of core devices. When you add a new core device to a group of core devices that has a deployment, IoT Greengrass deploys that group&#39;s deployment to the new device.&lt;/p&gt; &lt;p&gt;You can define one deployment for each target. When you create a new deployment for a target that has an existing deployment, you replace the previous deployment. IoT Greengrass applies the new deployment to the target devices.&lt;/p&gt; &lt;p&gt;Every deployment has a revision number that indicates how many deployment revisions you define for a target. Use this operation to create a new revision of an existing deployment.&lt;/p&gt; &lt;p&gt;For more information, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/greengrass/v2/developerguide/create-deployments.html\&quot;&gt;Create deployments&lt;/a&gt; in the &lt;i&gt;IoT Greengrass V2 Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDeploymentTest() throws ApiException {
        CreateDeploymentRequest createDeploymentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDeploymentResponse response = api.createDeployment(createDeploymentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a version of a component from IoT Greengrass.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation deletes the component&#39;s recipe and artifacts. As a result, deployments that refer to this component version will fail. If you have deployments that use this component version, you can remove the component from the deployment or update the deployment to use a valid version.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteComponentTest() throws ApiException {
        String arn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteComponent(arn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a Greengrass core device, which is an IoT thing. This operation removes the core device from the list of core devices. This operation doesn&#39;t delete the IoT thing. For more information about how to delete the IoT thing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iot/latest/apireference/API_DeleteThing.html\&quot;&gt;DeleteThing&lt;/a&gt; in the &lt;i&gt;IoT API Reference&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCoreDeviceTest() throws ApiException {
        String coreDeviceThingName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteCoreDevice(coreDeviceThingName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a deployment. To delete an active deployment, you must first cancel it. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iot/latest/apireference/API_CancelDeployment.html\&quot;&gt;CancelDeployment&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Deleting a deployment doesn&#39;t affect core devices that run that deployment, because core devices store the deployment&#39;s configuration on the device. Additionally, core devices can roll back to a previous deployment that has been deleted.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDeploymentTest() throws ApiException {
        String deploymentId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteDeployment(deploymentId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves metadata for a version of a component.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeComponentTest() throws ApiException {
        String arn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeComponentResponse response = api.describeComponent(arn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disassociates the Greengrass service role from IoT Greengrass for your Amazon Web Services account in this Amazon Web Services Region. Without a service role, IoT Greengrass can&#39;t verify the identity of client devices or manage core device connectivity information. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-service-role.html\&quot;&gt;Greengrass service role&lt;/a&gt; in the &lt;i&gt;IoT Greengrass Version 2 Developer Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateServiceRoleFromAccountTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DisassociateServiceRoleFromAccountResponse response = api.disassociateServiceRoleFromAccount(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the recipe for a version of a component.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getComponentTest() throws ApiException {
        String arn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String recipeOutputFormat = null;
        GetComponentResponse response = api.getComponent(arn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, recipeOutputFormat);
        // TODO: test validations
    }

    /**
     * Gets the pre-signed URL to download a public or a Lambda component artifact. Core devices call this operation to identify the URL that they can use to download an artifact to install.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getComponentVersionArtifactTest() throws ApiException {
        String arn = null;
        String artifactName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetComponentVersionArtifactResponse response = api.getComponentVersionArtifact(arn, artifactName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves connectivity information for a Greengrass core device.&lt;/p&gt; &lt;p&gt;Connectivity information includes endpoints and ports where client devices can connect to an MQTT broker on the core device. When a client device calls the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-discover-api.html\&quot;&gt;IoT Greengrass discovery API&lt;/a&gt;, IoT Greengrass returns connectivity information for all of the core devices where the client device can connect. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/greengrass/v2/developerguide/connect-client-devices.html\&quot;&gt;Connect client devices to core devices&lt;/a&gt; in the &lt;i&gt;IoT Greengrass Version 2 Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConnectivityInfoTest() throws ApiException {
        String thingName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetConnectivityInfoResponse response = api.getConnectivityInfo(thingName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves metadata for a Greengrass core device.&lt;/p&gt; &lt;note&gt; &lt;p&gt;IoT Greengrass relies on individual devices to send status updates to the Amazon Web Services Cloud. If the IoT Greengrass Core software isn&#39;t running on the device, or if device isn&#39;t connected to the Amazon Web Services Cloud, then the reported status of that device might not reflect its current status. The status timestamp indicates when the device status was last updated.&lt;/p&gt; &lt;p&gt;Core devices send status updates at the following times:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;When the IoT Greengrass Core software starts&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When the core device receives a deployment from the Amazon Web Services Cloud&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When the status of any component on the core device becomes &lt;code&gt;BROKEN&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;At a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-nucleus-component.html#greengrass-nucleus-component-configuration-fss\&quot;&gt;regular interval that you can configure&lt;/a&gt;, which defaults to 24 hours&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For IoT Greengrass Core v2.7.0, the core device sends status updates upon local deployment and cloud deployment&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCoreDeviceTest() throws ApiException {
        String coreDeviceThingName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetCoreDeviceResponse response = api.getCoreDevice(coreDeviceThingName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets a deployment. Deployments define the components that run on Greengrass core devices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeploymentTest() throws ApiException {
        String deploymentId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDeploymentResponse response = api.getDeployment(deploymentId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the service role associated with IoT Greengrass for your Amazon Web Services account in this Amazon Web Services Region. IoT Greengrass uses this role to verify the identity of client devices and manage core device connectivity information. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-service-role.html\&quot;&gt;Greengrass service role&lt;/a&gt; in the &lt;i&gt;IoT Greengrass Version 2 Developer Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServiceRoleForAccountTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetServiceRoleForAccountResponse response = api.getServiceRoleForAccount(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a paginated list of client devices that are associated with a core device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listClientDevicesAssociatedWithCoreDeviceTest() throws ApiException {
        String coreDeviceThingName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListClientDevicesAssociatedWithCoreDeviceResponse response = api.listClientDevicesAssociatedWithCoreDevice(coreDeviceThingName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a paginated list of all versions for a component. Greater versions are listed first.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listComponentVersionsTest() throws ApiException {
        String arn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListComponentVersionsResponse response = api.listComponentVersions(arn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a paginated list of component summaries. This list includes components that you have permission to view.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listComponentsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String scope = null;
        Integer maxResults = null;
        String nextToken = null;
        ListComponentsResponse response = api.listComponents(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, scope, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves a paginated list of Greengrass core devices.&lt;/p&gt; &lt;note&gt; &lt;p&gt;IoT Greengrass relies on individual devices to send status updates to the Amazon Web Services Cloud. If the IoT Greengrass Core software isn&#39;t running on the device, or if device isn&#39;t connected to the Amazon Web Services Cloud, then the reported status of that device might not reflect its current status. The status timestamp indicates when the device status was last updated.&lt;/p&gt; &lt;p&gt;Core devices send status updates at the following times:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;When the IoT Greengrass Core software starts&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When the core device receives a deployment from the Amazon Web Services Cloud&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When the status of any component on the core device becomes &lt;code&gt;BROKEN&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;At a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-nucleus-component.html#greengrass-nucleus-component-configuration-fss\&quot;&gt;regular interval that you can configure&lt;/a&gt;, which defaults to 24 hours&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For IoT Greengrass Core v2.7.0, the core device sends status updates upon local deployment and cloud deployment&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCoreDevicesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String thingGroupArn = null;
        String status = null;
        Integer maxResults = null;
        String nextToken = null;
        ListCoreDevicesResponse response = api.listCoreDevices(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, thingGroupArn, status, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a paginated list of deployments.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDeploymentsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String targetArn = null;
        String historyFilter = null;
        String parentTargetArn = null;
        Integer maxResults = null;
        String nextToken = null;
        ListDeploymentsResponse response = api.listDeployments(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, targetArn, historyFilter, parentTargetArn, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a paginated list of deployment jobs that IoT Greengrass sends to Greengrass core devices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEffectiveDeploymentsTest() throws ApiException {
        String coreDeviceThingName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListEffectiveDeploymentsResponse response = api.listEffectiveDeployments(coreDeviceThingName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves a paginated list of the components that a Greengrass core device runs. By default, this list doesn&#39;t include components that are deployed as dependencies of other components. To include dependencies in the response, set the &lt;code&gt;topologyFilter&lt;/code&gt; parameter to &lt;code&gt;ALL&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;IoT Greengrass relies on individual devices to send status updates to the Amazon Web Services Cloud. If the IoT Greengrass Core software isn&#39;t running on the device, or if device isn&#39;t connected to the Amazon Web Services Cloud, then the reported status of that device might not reflect its current status. The status timestamp indicates when the device status was last updated.&lt;/p&gt; &lt;p&gt;Core devices send status updates at the following times:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;When the IoT Greengrass Core software starts&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When the core device receives a deployment from the Amazon Web Services Cloud&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When the status of any component on the core device becomes &lt;code&gt;BROKEN&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;At a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-nucleus-component.html#greengrass-nucleus-component-configuration-fss\&quot;&gt;regular interval that you can configure&lt;/a&gt;, which defaults to 24 hours&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For IoT Greengrass Core v2.7.0, the core device sends status updates upon local deployment and cloud deployment&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInstalledComponentsTest() throws ApiException {
        String coreDeviceThingName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String topologyFilter = null;
        ListInstalledComponentsResponse response = api.listInstalledComponents(coreDeviceThingName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, topologyFilter);
        // TODO: test validations
    }

    /**
     * Retrieves the list of tags for an IoT Greengrass resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves a list of components that meet the component, version, and platform requirements of a deployment. Greengrass core devices call this operation when they receive a deployment to identify the components to install.&lt;/p&gt; &lt;p&gt;This operation identifies components that meet all dependency requirements for a deployment. If the requirements conflict, then this operation returns an error and the deployment fails. For example, this occurs if component &lt;code&gt;A&lt;/code&gt; requires version &lt;code&gt;&amp;gt;2.0.0&lt;/code&gt; and component &lt;code&gt;B&lt;/code&gt; requires version &lt;code&gt;&amp;lt;2.0.0&lt;/code&gt; of a component dependency.&lt;/p&gt; &lt;p&gt;When you specify the component candidates to resolve, IoT Greengrass compares each component&#39;s digest from the core device with the component&#39;s digest in the Amazon Web Services Cloud. If the digests don&#39;t match, then IoT Greengrass specifies to use the version from the Amazon Web Services Cloud.&lt;/p&gt; &lt;important&gt; &lt;p&gt;To use this operation, you must use the data plane API endpoint and authenticate with an IoT device certificate. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/greengrass.html\&quot;&gt;IoT Greengrass endpoints and quotas&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resolveComponentCandidatesTest() throws ApiException {
        ResolveComponentCandidatesRequest resolveComponentCandidatesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ResolveComponentCandidatesResponse response = api.resolveComponentCandidates(resolveComponentCandidatesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds tags to an IoT Greengrass resource. If a tag already exists for the resource, this operation updates the tag&#39;s value.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes a tag from an IoT Greengrass resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates connectivity information for a Greengrass core device.&lt;/p&gt; &lt;p&gt;Connectivity information includes endpoints and ports where client devices can connect to an MQTT broker on the core device. When a client device calls the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-discover-api.html\&quot;&gt;IoT Greengrass discovery API&lt;/a&gt;, IoT Greengrass returns connectivity information for all of the core devices where the client device can connect. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/greengrass/v2/developerguide/connect-client-devices.html\&quot;&gt;Connect client devices to core devices&lt;/a&gt; in the &lt;i&gt;IoT Greengrass Version 2 Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConnectivityInfoTest() throws ApiException {
        String thingName = null;
        UpdateConnectivityInfoRequest updateConnectivityInfoRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateConnectivityInfoResponse response = api.updateConnectivityInfo(thingName, updateConnectivityInfoRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
