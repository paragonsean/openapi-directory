/*
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about a deployment&#39;s update to a component&#39;s configuration on Greengrass core devices. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/greengrass/v2/developerguide/update-component-configurations.html\&quot;&gt;Update component configurations&lt;/a&gt; in the &lt;i&gt;IoT Greengrass V2 Developer Guide&lt;/i&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.640074-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ComponentConfigurationUpdate {
  public static final String SERIALIZED_NAME_MERGE = "merge";
  @SerializedName(SERIALIZED_NAME_MERGE)
  private String merge;

  public static final String SERIALIZED_NAME_RESET = "reset";
  @SerializedName(SERIALIZED_NAME_RESET)
  private List reset;

  public ComponentConfigurationUpdate() {
  }

  public ComponentConfigurationUpdate merge(String merge) {
    this.merge = merge;
    return this;
  }

  /**
   * Get merge
   * @return merge
   */
  @javax.annotation.Nullable
  public String getMerge() {
    return merge;
  }

  public void setMerge(String merge) {
    this.merge = merge;
  }


  public ComponentConfigurationUpdate reset(List reset) {
    this.reset = reset;
    return this;
  }

  /**
   * Get reset
   * @return reset
   */
  @javax.annotation.Nullable
  public List getReset() {
    return reset;
  }

  public void setReset(List reset) {
    this.reset = reset;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComponentConfigurationUpdate componentConfigurationUpdate = (ComponentConfigurationUpdate) o;
    return Objects.equals(this.merge, componentConfigurationUpdate.merge) &&
        Objects.equals(this.reset, componentConfigurationUpdate.reset);
  }

  @Override
  public int hashCode() {
    return Objects.hash(merge, reset);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComponentConfigurationUpdate {\n");
    sb.append("    merge: ").append(toIndentedString(merge)).append("\n");
    sb.append("    reset: ").append(toIndentedString(reset)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("merge");
    openapiFields.add("reset");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ComponentConfigurationUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ComponentConfigurationUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ComponentConfigurationUpdate is not found in the empty JSON string", ComponentConfigurationUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ComponentConfigurationUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ComponentConfigurationUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `merge`
      if (jsonObj.get("merge") != null && !jsonObj.get("merge").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("merge"));
      }
      // validate the optional field `reset`
      if (jsonObj.get("reset") != null && !jsonObj.get("reset").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("reset"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ComponentConfigurationUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ComponentConfigurationUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ComponentConfigurationUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ComponentConfigurationUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<ComponentConfigurationUpdate>() {
           @Override
           public void write(JsonWriter out, ComponentConfigurationUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ComponentConfigurationUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ComponentConfigurationUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ComponentConfigurationUpdate
   * @throws IOException if the JSON string is invalid with respect to ComponentConfigurationUpdate
   */
  public static ComponentConfigurationUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ComponentConfigurationUpdate.class);
  }

  /**
   * Convert an instance of ComponentConfigurationUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

