/*
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.EffectiveDeploymentExecutionStatus;
import org.openapitools.client.model.EffectiveDeploymentStatusDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about a deployment job that IoT Greengrass sends to a Greengrass core device.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.640074-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EffectiveDeployment {
  public static final String SERIALIZED_NAME_DEPLOYMENT_ID = "deploymentId";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_ID)
  private String deploymentId;

  public static final String SERIALIZED_NAME_DEPLOYMENT_NAME = "deploymentName";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_NAME)
  private String deploymentName;

  public static final String SERIALIZED_NAME_IOT_JOB_ID = "iotJobId";
  @SerializedName(SERIALIZED_NAME_IOT_JOB_ID)
  private String iotJobId;

  public static final String SERIALIZED_NAME_IOT_JOB_ARN = "iotJobArn";
  @SerializedName(SERIALIZED_NAME_IOT_JOB_ARN)
  private String iotJobArn;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_TARGET_ARN = "targetArn";
  @SerializedName(SERIALIZED_NAME_TARGET_ARN)
  private String targetArn;

  public static final String SERIALIZED_NAME_CORE_DEVICE_EXECUTION_STATUS = "coreDeviceExecutionStatus";
  @SerializedName(SERIALIZED_NAME_CORE_DEVICE_EXECUTION_STATUS)
  private EffectiveDeploymentExecutionStatus coreDeviceExecutionStatus;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_CREATION_TIMESTAMP = "creationTimestamp";
  @SerializedName(SERIALIZED_NAME_CREATION_TIMESTAMP)
  private OffsetDateTime creationTimestamp;

  public static final String SERIALIZED_NAME_MODIFIED_TIMESTAMP = "modifiedTimestamp";
  @SerializedName(SERIALIZED_NAME_MODIFIED_TIMESTAMP)
  private OffsetDateTime modifiedTimestamp;

  public static final String SERIALIZED_NAME_STATUS_DETAILS = "statusDetails";
  @SerializedName(SERIALIZED_NAME_STATUS_DETAILS)
  private EffectiveDeploymentStatusDetails statusDetails;

  public EffectiveDeployment() {
  }

  public EffectiveDeployment deploymentId(String deploymentId) {
    this.deploymentId = deploymentId;
    return this;
  }

  /**
   * Get deploymentId
   * @return deploymentId
   */
  @javax.annotation.Nonnull
  public String getDeploymentId() {
    return deploymentId;
  }

  public void setDeploymentId(String deploymentId) {
    this.deploymentId = deploymentId;
  }


  public EffectiveDeployment deploymentName(String deploymentName) {
    this.deploymentName = deploymentName;
    return this;
  }

  /**
   * Get deploymentName
   * @return deploymentName
   */
  @javax.annotation.Nonnull
  public String getDeploymentName() {
    return deploymentName;
  }

  public void setDeploymentName(String deploymentName) {
    this.deploymentName = deploymentName;
  }


  public EffectiveDeployment iotJobId(String iotJobId) {
    this.iotJobId = iotJobId;
    return this;
  }

  /**
   * Get iotJobId
   * @return iotJobId
   */
  @javax.annotation.Nullable
  public String getIotJobId() {
    return iotJobId;
  }

  public void setIotJobId(String iotJobId) {
    this.iotJobId = iotJobId;
  }


  public EffectiveDeployment iotJobArn(String iotJobArn) {
    this.iotJobArn = iotJobArn;
    return this;
  }

  /**
   * Get iotJobArn
   * @return iotJobArn
   */
  @javax.annotation.Nullable
  public String getIotJobArn() {
    return iotJobArn;
  }

  public void setIotJobArn(String iotJobArn) {
    this.iotJobArn = iotJobArn;
  }


  public EffectiveDeployment description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public EffectiveDeployment targetArn(String targetArn) {
    this.targetArn = targetArn;
    return this;
  }

  /**
   * Get targetArn
   * @return targetArn
   */
  @javax.annotation.Nonnull
  public String getTargetArn() {
    return targetArn;
  }

  public void setTargetArn(String targetArn) {
    this.targetArn = targetArn;
  }


  public EffectiveDeployment coreDeviceExecutionStatus(EffectiveDeploymentExecutionStatus coreDeviceExecutionStatus) {
    this.coreDeviceExecutionStatus = coreDeviceExecutionStatus;
    return this;
  }

  /**
   * Get coreDeviceExecutionStatus
   * @return coreDeviceExecutionStatus
   */
  @javax.annotation.Nonnull
  public EffectiveDeploymentExecutionStatus getCoreDeviceExecutionStatus() {
    return coreDeviceExecutionStatus;
  }

  public void setCoreDeviceExecutionStatus(EffectiveDeploymentExecutionStatus coreDeviceExecutionStatus) {
    this.coreDeviceExecutionStatus = coreDeviceExecutionStatus;
  }


  public EffectiveDeployment reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * Get reason
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public EffectiveDeployment creationTimestamp(OffsetDateTime creationTimestamp) {
    this.creationTimestamp = creationTimestamp;
    return this;
  }

  /**
   * Get creationTimestamp
   * @return creationTimestamp
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreationTimestamp() {
    return creationTimestamp;
  }

  public void setCreationTimestamp(OffsetDateTime creationTimestamp) {
    this.creationTimestamp = creationTimestamp;
  }


  public EffectiveDeployment modifiedTimestamp(OffsetDateTime modifiedTimestamp) {
    this.modifiedTimestamp = modifiedTimestamp;
    return this;
  }

  /**
   * Get modifiedTimestamp
   * @return modifiedTimestamp
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getModifiedTimestamp() {
    return modifiedTimestamp;
  }

  public void setModifiedTimestamp(OffsetDateTime modifiedTimestamp) {
    this.modifiedTimestamp = modifiedTimestamp;
  }


  public EffectiveDeployment statusDetails(EffectiveDeploymentStatusDetails statusDetails) {
    this.statusDetails = statusDetails;
    return this;
  }

  /**
   * Get statusDetails
   * @return statusDetails
   */
  @javax.annotation.Nullable
  public EffectiveDeploymentStatusDetails getStatusDetails() {
    return statusDetails;
  }

  public void setStatusDetails(EffectiveDeploymentStatusDetails statusDetails) {
    this.statusDetails = statusDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EffectiveDeployment effectiveDeployment = (EffectiveDeployment) o;
    return Objects.equals(this.deploymentId, effectiveDeployment.deploymentId) &&
        Objects.equals(this.deploymentName, effectiveDeployment.deploymentName) &&
        Objects.equals(this.iotJobId, effectiveDeployment.iotJobId) &&
        Objects.equals(this.iotJobArn, effectiveDeployment.iotJobArn) &&
        Objects.equals(this.description, effectiveDeployment.description) &&
        Objects.equals(this.targetArn, effectiveDeployment.targetArn) &&
        Objects.equals(this.coreDeviceExecutionStatus, effectiveDeployment.coreDeviceExecutionStatus) &&
        Objects.equals(this.reason, effectiveDeployment.reason) &&
        Objects.equals(this.creationTimestamp, effectiveDeployment.creationTimestamp) &&
        Objects.equals(this.modifiedTimestamp, effectiveDeployment.modifiedTimestamp) &&
        Objects.equals(this.statusDetails, effectiveDeployment.statusDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deploymentId, deploymentName, iotJobId, iotJobArn, description, targetArn, coreDeviceExecutionStatus, reason, creationTimestamp, modifiedTimestamp, statusDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EffectiveDeployment {\n");
    sb.append("    deploymentId: ").append(toIndentedString(deploymentId)).append("\n");
    sb.append("    deploymentName: ").append(toIndentedString(deploymentName)).append("\n");
    sb.append("    iotJobId: ").append(toIndentedString(iotJobId)).append("\n");
    sb.append("    iotJobArn: ").append(toIndentedString(iotJobArn)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    targetArn: ").append(toIndentedString(targetArn)).append("\n");
    sb.append("    coreDeviceExecutionStatus: ").append(toIndentedString(coreDeviceExecutionStatus)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    creationTimestamp: ").append(toIndentedString(creationTimestamp)).append("\n");
    sb.append("    modifiedTimestamp: ").append(toIndentedString(modifiedTimestamp)).append("\n");
    sb.append("    statusDetails: ").append(toIndentedString(statusDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deploymentId");
    openapiFields.add("deploymentName");
    openapiFields.add("iotJobId");
    openapiFields.add("iotJobArn");
    openapiFields.add("description");
    openapiFields.add("targetArn");
    openapiFields.add("coreDeviceExecutionStatus");
    openapiFields.add("reason");
    openapiFields.add("creationTimestamp");
    openapiFields.add("modifiedTimestamp");
    openapiFields.add("statusDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("deploymentId");
    openapiRequiredFields.add("deploymentName");
    openapiRequiredFields.add("targetArn");
    openapiRequiredFields.add("coreDeviceExecutionStatus");
    openapiRequiredFields.add("creationTimestamp");
    openapiRequiredFields.add("modifiedTimestamp");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EffectiveDeployment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EffectiveDeployment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EffectiveDeployment is not found in the empty JSON string", EffectiveDeployment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EffectiveDeployment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EffectiveDeployment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EffectiveDeployment.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `deploymentId`
      String.validateJsonElement(jsonObj.get("deploymentId"));
      // validate the required field `deploymentName`
      String.validateJsonElement(jsonObj.get("deploymentName"));
      // validate the optional field `iotJobId`
      if (jsonObj.get("iotJobId") != null && !jsonObj.get("iotJobId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("iotJobId"));
      }
      // validate the optional field `iotJobArn`
      if (jsonObj.get("iotJobArn") != null && !jsonObj.get("iotJobArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("iotJobArn"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the required field `targetArn`
      String.validateJsonElement(jsonObj.get("targetArn"));
      // validate the required field `coreDeviceExecutionStatus`
      EffectiveDeploymentExecutionStatus.validateJsonElement(jsonObj.get("coreDeviceExecutionStatus"));
      // validate the optional field `reason`
      if (jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("reason"));
      }
      // validate the required field `creationTimestamp`
      OffsetDateTime.validateJsonElement(jsonObj.get("creationTimestamp"));
      // validate the required field `modifiedTimestamp`
      OffsetDateTime.validateJsonElement(jsonObj.get("modifiedTimestamp"));
      // validate the optional field `statusDetails`
      if (jsonObj.get("statusDetails") != null && !jsonObj.get("statusDetails").isJsonNull()) {
        EffectiveDeploymentStatusDetails.validateJsonElement(jsonObj.get("statusDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EffectiveDeployment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EffectiveDeployment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EffectiveDeployment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EffectiveDeployment.class));

       return (TypeAdapter<T>) new TypeAdapter<EffectiveDeployment>() {
           @Override
           public void write(JsonWriter out, EffectiveDeployment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EffectiveDeployment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EffectiveDeployment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EffectiveDeployment
   * @throws IOException if the JSON string is invalid with respect to EffectiveDeployment
   */
  public static EffectiveDeployment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EffectiveDeployment.class);
  }

  /**
   * Convert an instance of EffectiveDeployment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

