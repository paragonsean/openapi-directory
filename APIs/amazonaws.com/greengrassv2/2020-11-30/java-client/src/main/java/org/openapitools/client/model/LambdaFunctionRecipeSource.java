/*
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CreateComponentVersionRequestLambdaFunctionComponentLambdaParameters;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about an Lambda function to import to create a component.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.640074-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LambdaFunctionRecipeSource {
  public static final String SERIALIZED_NAME_LAMBDA_ARN = "lambdaArn";
  @SerializedName(SERIALIZED_NAME_LAMBDA_ARN)
  private String lambdaArn;

  public static final String SERIALIZED_NAME_COMPONENT_NAME = "componentName";
  @SerializedName(SERIALIZED_NAME_COMPONENT_NAME)
  private String componentName;

  public static final String SERIALIZED_NAME_COMPONENT_VERSION = "componentVersion";
  @SerializedName(SERIALIZED_NAME_COMPONENT_VERSION)
  private String componentVersion;

  public static final String SERIALIZED_NAME_COMPONENT_PLATFORMS = "componentPlatforms";
  @SerializedName(SERIALIZED_NAME_COMPONENT_PLATFORMS)
  private List componentPlatforms;

  public static final String SERIALIZED_NAME_COMPONENT_DEPENDENCIES = "componentDependencies";
  @SerializedName(SERIALIZED_NAME_COMPONENT_DEPENDENCIES)
  private Map componentDependencies;

  public static final String SERIALIZED_NAME_COMPONENT_LAMBDA_PARAMETERS = "componentLambdaParameters";
  @SerializedName(SERIALIZED_NAME_COMPONENT_LAMBDA_PARAMETERS)
  private CreateComponentVersionRequestLambdaFunctionComponentLambdaParameters componentLambdaParameters;

  public LambdaFunctionRecipeSource() {
  }

  public LambdaFunctionRecipeSource lambdaArn(String lambdaArn) {
    this.lambdaArn = lambdaArn;
    return this;
  }

  /**
   * Get lambdaArn
   * @return lambdaArn
   */
  @javax.annotation.Nonnull
  public String getLambdaArn() {
    return lambdaArn;
  }

  public void setLambdaArn(String lambdaArn) {
    this.lambdaArn = lambdaArn;
  }


  public LambdaFunctionRecipeSource componentName(String componentName) {
    this.componentName = componentName;
    return this;
  }

  /**
   * Get componentName
   * @return componentName
   */
  @javax.annotation.Nullable
  public String getComponentName() {
    return componentName;
  }

  public void setComponentName(String componentName) {
    this.componentName = componentName;
  }


  public LambdaFunctionRecipeSource componentVersion(String componentVersion) {
    this.componentVersion = componentVersion;
    return this;
  }

  /**
   * Get componentVersion
   * @return componentVersion
   */
  @javax.annotation.Nullable
  public String getComponentVersion() {
    return componentVersion;
  }

  public void setComponentVersion(String componentVersion) {
    this.componentVersion = componentVersion;
  }


  public LambdaFunctionRecipeSource componentPlatforms(List componentPlatforms) {
    this.componentPlatforms = componentPlatforms;
    return this;
  }

  /**
   * Get componentPlatforms
   * @return componentPlatforms
   */
  @javax.annotation.Nullable
  public List getComponentPlatforms() {
    return componentPlatforms;
  }

  public void setComponentPlatforms(List componentPlatforms) {
    this.componentPlatforms = componentPlatforms;
  }


  public LambdaFunctionRecipeSource componentDependencies(Map componentDependencies) {
    this.componentDependencies = componentDependencies;
    return this;
  }

  /**
   * Get componentDependencies
   * @return componentDependencies
   */
  @javax.annotation.Nullable
  public Map getComponentDependencies() {
    return componentDependencies;
  }

  public void setComponentDependencies(Map componentDependencies) {
    this.componentDependencies = componentDependencies;
  }


  public LambdaFunctionRecipeSource componentLambdaParameters(CreateComponentVersionRequestLambdaFunctionComponentLambdaParameters componentLambdaParameters) {
    this.componentLambdaParameters = componentLambdaParameters;
    return this;
  }

  /**
   * Get componentLambdaParameters
   * @return componentLambdaParameters
   */
  @javax.annotation.Nullable
  public CreateComponentVersionRequestLambdaFunctionComponentLambdaParameters getComponentLambdaParameters() {
    return componentLambdaParameters;
  }

  public void setComponentLambdaParameters(CreateComponentVersionRequestLambdaFunctionComponentLambdaParameters componentLambdaParameters) {
    this.componentLambdaParameters = componentLambdaParameters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LambdaFunctionRecipeSource lambdaFunctionRecipeSource = (LambdaFunctionRecipeSource) o;
    return Objects.equals(this.lambdaArn, lambdaFunctionRecipeSource.lambdaArn) &&
        Objects.equals(this.componentName, lambdaFunctionRecipeSource.componentName) &&
        Objects.equals(this.componentVersion, lambdaFunctionRecipeSource.componentVersion) &&
        Objects.equals(this.componentPlatforms, lambdaFunctionRecipeSource.componentPlatforms) &&
        Objects.equals(this.componentDependencies, lambdaFunctionRecipeSource.componentDependencies) &&
        Objects.equals(this.componentLambdaParameters, lambdaFunctionRecipeSource.componentLambdaParameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lambdaArn, componentName, componentVersion, componentPlatforms, componentDependencies, componentLambdaParameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LambdaFunctionRecipeSource {\n");
    sb.append("    lambdaArn: ").append(toIndentedString(lambdaArn)).append("\n");
    sb.append("    componentName: ").append(toIndentedString(componentName)).append("\n");
    sb.append("    componentVersion: ").append(toIndentedString(componentVersion)).append("\n");
    sb.append("    componentPlatforms: ").append(toIndentedString(componentPlatforms)).append("\n");
    sb.append("    componentDependencies: ").append(toIndentedString(componentDependencies)).append("\n");
    sb.append("    componentLambdaParameters: ").append(toIndentedString(componentLambdaParameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lambdaArn");
    openapiFields.add("componentName");
    openapiFields.add("componentVersion");
    openapiFields.add("componentPlatforms");
    openapiFields.add("componentDependencies");
    openapiFields.add("componentLambdaParameters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("lambdaArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LambdaFunctionRecipeSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LambdaFunctionRecipeSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LambdaFunctionRecipeSource is not found in the empty JSON string", LambdaFunctionRecipeSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LambdaFunctionRecipeSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LambdaFunctionRecipeSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LambdaFunctionRecipeSource.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `lambdaArn`
      String.validateJsonElement(jsonObj.get("lambdaArn"));
      // validate the optional field `componentName`
      if (jsonObj.get("componentName") != null && !jsonObj.get("componentName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("componentName"));
      }
      // validate the optional field `componentVersion`
      if (jsonObj.get("componentVersion") != null && !jsonObj.get("componentVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("componentVersion"));
      }
      // validate the optional field `componentPlatforms`
      if (jsonObj.get("componentPlatforms") != null && !jsonObj.get("componentPlatforms").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("componentPlatforms"));
      }
      // validate the optional field `componentDependencies`
      if (jsonObj.get("componentDependencies") != null && !jsonObj.get("componentDependencies").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("componentDependencies"));
      }
      // validate the optional field `componentLambdaParameters`
      if (jsonObj.get("componentLambdaParameters") != null && !jsonObj.get("componentLambdaParameters").isJsonNull()) {
        CreateComponentVersionRequestLambdaFunctionComponentLambdaParameters.validateJsonElement(jsonObj.get("componentLambdaParameters"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LambdaFunctionRecipeSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LambdaFunctionRecipeSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LambdaFunctionRecipeSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LambdaFunctionRecipeSource.class));

       return (TypeAdapter<T>) new TypeAdapter<LambdaFunctionRecipeSource>() {
           @Override
           public void write(JsonWriter out, LambdaFunctionRecipeSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LambdaFunctionRecipeSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LambdaFunctionRecipeSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LambdaFunctionRecipeSource
   * @throws IOException if the JSON string is invalid with respect to LambdaFunctionRecipeSource
   */
  public static LambdaFunctionRecipeSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LambdaFunctionRecipeSource.class);
  }

  /**
   * Convert an instance of LambdaFunctionRecipeSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

