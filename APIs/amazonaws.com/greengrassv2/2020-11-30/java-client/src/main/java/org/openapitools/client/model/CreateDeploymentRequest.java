/*
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ComponentDeploymentSpecification;
import org.openapitools.client.model.CreateDeploymentRequestDeploymentPolicies;
import org.openapitools.client.model.CreateDeploymentRequestIotJobConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateDeploymentRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.640074-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateDeploymentRequest {
  public static final String SERIALIZED_NAME_TARGET_ARN = "targetArn";
  @SerializedName(SERIALIZED_NAME_TARGET_ARN)
  private String targetArn;

  public static final String SERIALIZED_NAME_DEPLOYMENT_NAME = "deploymentName";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_NAME)
  private String deploymentName;

  public static final String SERIALIZED_NAME_COMPONENTS = "components";
  @SerializedName(SERIALIZED_NAME_COMPONENTS)
  private Map<String, ComponentDeploymentSpecification> components = new HashMap<>();

  public static final String SERIALIZED_NAME_IOT_JOB_CONFIGURATION = "iotJobConfiguration";
  @SerializedName(SERIALIZED_NAME_IOT_JOB_CONFIGURATION)
  private CreateDeploymentRequestIotJobConfiguration iotJobConfiguration;

  public static final String SERIALIZED_NAME_DEPLOYMENT_POLICIES = "deploymentPolicies";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_POLICIES)
  private CreateDeploymentRequestDeploymentPolicies deploymentPolicies;

  public static final String SERIALIZED_NAME_PARENT_TARGET_ARN = "parentTargetArn";
  @SerializedName(SERIALIZED_NAME_PARENT_TARGET_ARN)
  private String parentTargetArn;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public CreateDeploymentRequest() {
  }

  public CreateDeploymentRequest targetArn(String targetArn) {
    this.targetArn = targetArn;
    return this;
  }

  /**
   * The &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;ARN&lt;/a&gt; of the target IoT thing or thing group. When creating a subdeployment, the targetARN can only be a thing group.
   * @return targetArn
   */
  @javax.annotation.Nonnull
  public String getTargetArn() {
    return targetArn;
  }

  public void setTargetArn(String targetArn) {
    this.targetArn = targetArn;
  }


  public CreateDeploymentRequest deploymentName(String deploymentName) {
    this.deploymentName = deploymentName;
    return this;
  }

  /**
   * The name of the deployment.
   * @return deploymentName
   */
  @javax.annotation.Nullable
  public String getDeploymentName() {
    return deploymentName;
  }

  public void setDeploymentName(String deploymentName) {
    this.deploymentName = deploymentName;
  }


  public CreateDeploymentRequest components(Map<String, ComponentDeploymentSpecification> components) {
    this.components = components;
    return this;
  }

  public CreateDeploymentRequest putComponentsItem(String key, ComponentDeploymentSpecification componentsItem) {
    if (this.components == null) {
      this.components = new HashMap<>();
    }
    this.components.put(key, componentsItem);
    return this;
  }

  /**
   * The components to deploy. This is a dictionary, where each key is the name of a component, and each key&#39;s value is the version and configuration to deploy for that component.
   * @return components
   */
  @javax.annotation.Nullable
  public Map<String, ComponentDeploymentSpecification> getComponents() {
    return components;
  }

  public void setComponents(Map<String, ComponentDeploymentSpecification> components) {
    this.components = components;
  }


  public CreateDeploymentRequest iotJobConfiguration(CreateDeploymentRequestIotJobConfiguration iotJobConfiguration) {
    this.iotJobConfiguration = iotJobConfiguration;
    return this;
  }

  /**
   * Get iotJobConfiguration
   * @return iotJobConfiguration
   */
  @javax.annotation.Nullable
  public CreateDeploymentRequestIotJobConfiguration getIotJobConfiguration() {
    return iotJobConfiguration;
  }

  public void setIotJobConfiguration(CreateDeploymentRequestIotJobConfiguration iotJobConfiguration) {
    this.iotJobConfiguration = iotJobConfiguration;
  }


  public CreateDeploymentRequest deploymentPolicies(CreateDeploymentRequestDeploymentPolicies deploymentPolicies) {
    this.deploymentPolicies = deploymentPolicies;
    return this;
  }

  /**
   * Get deploymentPolicies
   * @return deploymentPolicies
   */
  @javax.annotation.Nullable
  public CreateDeploymentRequestDeploymentPolicies getDeploymentPolicies() {
    return deploymentPolicies;
  }

  public void setDeploymentPolicies(CreateDeploymentRequestDeploymentPolicies deploymentPolicies) {
    this.deploymentPolicies = deploymentPolicies;
  }


  public CreateDeploymentRequest parentTargetArn(String parentTargetArn) {
    this.parentTargetArn = parentTargetArn;
    return this;
  }

  /**
   * The parent deployment&#39;s target &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;ARN&lt;/a&gt; within a subdeployment.
   * @return parentTargetArn
   */
  @javax.annotation.Nullable
  public String getParentTargetArn() {
    return parentTargetArn;
  }

  public void setParentTargetArn(String parentTargetArn) {
    this.parentTargetArn = parentTargetArn;
  }


  public CreateDeploymentRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateDeploymentRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * A list of key-value pairs that contain metadata for the resource. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html\&quot;&gt;Tag your resources&lt;/a&gt; in the &lt;i&gt;IoT Greengrass V2 Developer Guide&lt;/i&gt;.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public CreateDeploymentRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * A unique, case-sensitive identifier that you can provide to ensure that the request is idempotent. Idempotency means that the request is successfully processed only once, even if you send the request multiple times. When a request succeeds, and you specify the same client token for subsequent successful requests, the IoT Greengrass V2 service returns the successful response that it caches from the previous request. IoT Greengrass V2 caches successful responses for idempotent requests for up to 8 hours.
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDeploymentRequest createDeploymentRequest = (CreateDeploymentRequest) o;
    return Objects.equals(this.targetArn, createDeploymentRequest.targetArn) &&
        Objects.equals(this.deploymentName, createDeploymentRequest.deploymentName) &&
        Objects.equals(this.components, createDeploymentRequest.components) &&
        Objects.equals(this.iotJobConfiguration, createDeploymentRequest.iotJobConfiguration) &&
        Objects.equals(this.deploymentPolicies, createDeploymentRequest.deploymentPolicies) &&
        Objects.equals(this.parentTargetArn, createDeploymentRequest.parentTargetArn) &&
        Objects.equals(this.tags, createDeploymentRequest.tags) &&
        Objects.equals(this.clientToken, createDeploymentRequest.clientToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(targetArn, deploymentName, components, iotJobConfiguration, deploymentPolicies, parentTargetArn, tags, clientToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDeploymentRequest {\n");
    sb.append("    targetArn: ").append(toIndentedString(targetArn)).append("\n");
    sb.append("    deploymentName: ").append(toIndentedString(deploymentName)).append("\n");
    sb.append("    components: ").append(toIndentedString(components)).append("\n");
    sb.append("    iotJobConfiguration: ").append(toIndentedString(iotJobConfiguration)).append("\n");
    sb.append("    deploymentPolicies: ").append(toIndentedString(deploymentPolicies)).append("\n");
    sb.append("    parentTargetArn: ").append(toIndentedString(parentTargetArn)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("targetArn");
    openapiFields.add("deploymentName");
    openapiFields.add("components");
    openapiFields.add("iotJobConfiguration");
    openapiFields.add("deploymentPolicies");
    openapiFields.add("parentTargetArn");
    openapiFields.add("tags");
    openapiFields.add("clientToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("targetArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateDeploymentRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateDeploymentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDeploymentRequest is not found in the empty JSON string", CreateDeploymentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateDeploymentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateDeploymentRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateDeploymentRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("targetArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetArn").toString()));
      }
      if ((jsonObj.get("deploymentName") != null && !jsonObj.get("deploymentName").isJsonNull()) && !jsonObj.get("deploymentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deploymentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deploymentName").toString()));
      }
      // validate the optional field `iotJobConfiguration`
      if (jsonObj.get("iotJobConfiguration") != null && !jsonObj.get("iotJobConfiguration").isJsonNull()) {
        CreateDeploymentRequestIotJobConfiguration.validateJsonElement(jsonObj.get("iotJobConfiguration"));
      }
      // validate the optional field `deploymentPolicies`
      if (jsonObj.get("deploymentPolicies") != null && !jsonObj.get("deploymentPolicies").isJsonNull()) {
        CreateDeploymentRequestDeploymentPolicies.validateJsonElement(jsonObj.get("deploymentPolicies"));
      }
      if ((jsonObj.get("parentTargetArn") != null && !jsonObj.get("parentTargetArn").isJsonNull()) && !jsonObj.get("parentTargetArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentTargetArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentTargetArn").toString()));
      }
      if ((jsonObj.get("clientToken") != null && !jsonObj.get("clientToken").isJsonNull()) && !jsonObj.get("clientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDeploymentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDeploymentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDeploymentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDeploymentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDeploymentRequest>() {
           @Override
           public void write(JsonWriter out, CreateDeploymentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDeploymentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateDeploymentRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateDeploymentRequest
   * @throws IOException if the JSON string is invalid with respect to CreateDeploymentRequest
   */
  public static CreateDeploymentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDeploymentRequest.class);
  }

  /**
   * Convert an instance of CreateDeploymentRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

