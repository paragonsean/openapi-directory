/*
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ComponentRunWithSystemResourceLimits;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information system user and group that the IoT Greengrass Core software uses to run component processes on the core device. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-greengrass-core-v2.html#configure-component-user\&quot;&gt;Configure the user and group that run components&lt;/a&gt; in the &lt;i&gt;IoT Greengrass V2 Developer Guide&lt;/i&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.640074-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ComponentRunWith {
  public static final String SERIALIZED_NAME_POSIX_USER = "posixUser";
  @SerializedName(SERIALIZED_NAME_POSIX_USER)
  private String posixUser;

  public static final String SERIALIZED_NAME_SYSTEM_RESOURCE_LIMITS = "systemResourceLimits";
  @SerializedName(SERIALIZED_NAME_SYSTEM_RESOURCE_LIMITS)
  private ComponentRunWithSystemResourceLimits systemResourceLimits;

  public static final String SERIALIZED_NAME_WINDOWS_USER = "windowsUser";
  @SerializedName(SERIALIZED_NAME_WINDOWS_USER)
  private String windowsUser;

  public ComponentRunWith() {
  }

  public ComponentRunWith posixUser(String posixUser) {
    this.posixUser = posixUser;
    return this;
  }

  /**
   * Get posixUser
   * @return posixUser
   */
  @javax.annotation.Nullable
  public String getPosixUser() {
    return posixUser;
  }

  public void setPosixUser(String posixUser) {
    this.posixUser = posixUser;
  }


  public ComponentRunWith systemResourceLimits(ComponentRunWithSystemResourceLimits systemResourceLimits) {
    this.systemResourceLimits = systemResourceLimits;
    return this;
  }

  /**
   * Get systemResourceLimits
   * @return systemResourceLimits
   */
  @javax.annotation.Nullable
  public ComponentRunWithSystemResourceLimits getSystemResourceLimits() {
    return systemResourceLimits;
  }

  public void setSystemResourceLimits(ComponentRunWithSystemResourceLimits systemResourceLimits) {
    this.systemResourceLimits = systemResourceLimits;
  }


  public ComponentRunWith windowsUser(String windowsUser) {
    this.windowsUser = windowsUser;
    return this;
  }

  /**
   * Get windowsUser
   * @return windowsUser
   */
  @javax.annotation.Nullable
  public String getWindowsUser() {
    return windowsUser;
  }

  public void setWindowsUser(String windowsUser) {
    this.windowsUser = windowsUser;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComponentRunWith componentRunWith = (ComponentRunWith) o;
    return Objects.equals(this.posixUser, componentRunWith.posixUser) &&
        Objects.equals(this.systemResourceLimits, componentRunWith.systemResourceLimits) &&
        Objects.equals(this.windowsUser, componentRunWith.windowsUser);
  }

  @Override
  public int hashCode() {
    return Objects.hash(posixUser, systemResourceLimits, windowsUser);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComponentRunWith {\n");
    sb.append("    posixUser: ").append(toIndentedString(posixUser)).append("\n");
    sb.append("    systemResourceLimits: ").append(toIndentedString(systemResourceLimits)).append("\n");
    sb.append("    windowsUser: ").append(toIndentedString(windowsUser)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("posixUser");
    openapiFields.add("systemResourceLimits");
    openapiFields.add("windowsUser");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ComponentRunWith
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ComponentRunWith.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ComponentRunWith is not found in the empty JSON string", ComponentRunWith.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ComponentRunWith.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ComponentRunWith` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `posixUser`
      if (jsonObj.get("posixUser") != null && !jsonObj.get("posixUser").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("posixUser"));
      }
      // validate the optional field `systemResourceLimits`
      if (jsonObj.get("systemResourceLimits") != null && !jsonObj.get("systemResourceLimits").isJsonNull()) {
        ComponentRunWithSystemResourceLimits.validateJsonElement(jsonObj.get("systemResourceLimits"));
      }
      // validate the optional field `windowsUser`
      if (jsonObj.get("windowsUser") != null && !jsonObj.get("windowsUser").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("windowsUser"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ComponentRunWith.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ComponentRunWith' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ComponentRunWith> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ComponentRunWith.class));

       return (TypeAdapter<T>) new TypeAdapter<ComponentRunWith>() {
           @Override
           public void write(JsonWriter out, ComponentRunWith value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ComponentRunWith read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ComponentRunWith given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ComponentRunWith
   * @throws IOException if the JSON string is invalid with respect to ComponentRunWith
   */
  public static ComponentRunWith fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ComponentRunWith.class);
  }

  /**
   * Convert an instance of ComponentRunWith to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

