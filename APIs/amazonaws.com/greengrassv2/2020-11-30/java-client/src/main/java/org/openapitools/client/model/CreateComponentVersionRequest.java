/*
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CreateComponentVersionRequestLambdaFunction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateComponentVersionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.640074-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateComponentVersionRequest {
  public static final String SERIALIZED_NAME_INLINE_RECIPE = "inlineRecipe";
  @SerializedName(SERIALIZED_NAME_INLINE_RECIPE)
  private String inlineRecipe;

  public static final String SERIALIZED_NAME_LAMBDA_FUNCTION = "lambdaFunction";
  @SerializedName(SERIALIZED_NAME_LAMBDA_FUNCTION)
  private CreateComponentVersionRequestLambdaFunction lambdaFunction;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public CreateComponentVersionRequest() {
  }

  public CreateComponentVersionRequest inlineRecipe(String inlineRecipe) {
    this.inlineRecipe = inlineRecipe;
    return this;
  }

  /**
   * &lt;p&gt;The recipe to use to create the component. The recipe defines the component&#39;s metadata, parameters, dependencies, lifecycle, artifacts, and platform compatibility.&lt;/p&gt; &lt;p&gt;You must specify either &lt;code&gt;inlineRecipe&lt;/code&gt; or &lt;code&gt;lambdaFunction&lt;/code&gt;.&lt;/p&gt;
   * @return inlineRecipe
   */
  @javax.annotation.Nullable
  public String getInlineRecipe() {
    return inlineRecipe;
  }

  public void setInlineRecipe(String inlineRecipe) {
    this.inlineRecipe = inlineRecipe;
  }


  public CreateComponentVersionRequest lambdaFunction(CreateComponentVersionRequestLambdaFunction lambdaFunction) {
    this.lambdaFunction = lambdaFunction;
    return this;
  }

  /**
   * Get lambdaFunction
   * @return lambdaFunction
   */
  @javax.annotation.Nullable
  public CreateComponentVersionRequestLambdaFunction getLambdaFunction() {
    return lambdaFunction;
  }

  public void setLambdaFunction(CreateComponentVersionRequestLambdaFunction lambdaFunction) {
    this.lambdaFunction = lambdaFunction;
  }


  public CreateComponentVersionRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateComponentVersionRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * A list of key-value pairs that contain metadata for the resource. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html\&quot;&gt;Tag your resources&lt;/a&gt; in the &lt;i&gt;IoT Greengrass V2 Developer Guide&lt;/i&gt;.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public CreateComponentVersionRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * A unique, case-sensitive identifier that you can provide to ensure that the request is idempotent. Idempotency means that the request is successfully processed only once, even if you send the request multiple times. When a request succeeds, and you specify the same client token for subsequent successful requests, the IoT Greengrass V2 service returns the successful response that it caches from the previous request. IoT Greengrass V2 caches successful responses for idempotent requests for up to 8 hours.
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateComponentVersionRequest createComponentVersionRequest = (CreateComponentVersionRequest) o;
    return Objects.equals(this.inlineRecipe, createComponentVersionRequest.inlineRecipe) &&
        Objects.equals(this.lambdaFunction, createComponentVersionRequest.lambdaFunction) &&
        Objects.equals(this.tags, createComponentVersionRequest.tags) &&
        Objects.equals(this.clientToken, createComponentVersionRequest.clientToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inlineRecipe, lambdaFunction, tags, clientToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateComponentVersionRequest {\n");
    sb.append("    inlineRecipe: ").append(toIndentedString(inlineRecipe)).append("\n");
    sb.append("    lambdaFunction: ").append(toIndentedString(lambdaFunction)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("inlineRecipe");
    openapiFields.add("lambdaFunction");
    openapiFields.add("tags");
    openapiFields.add("clientToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateComponentVersionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateComponentVersionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateComponentVersionRequest is not found in the empty JSON string", CreateComponentVersionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateComponentVersionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateComponentVersionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("inlineRecipe") != null && !jsonObj.get("inlineRecipe").isJsonNull()) && !jsonObj.get("inlineRecipe").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inlineRecipe` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inlineRecipe").toString()));
      }
      // validate the optional field `lambdaFunction`
      if (jsonObj.get("lambdaFunction") != null && !jsonObj.get("lambdaFunction").isJsonNull()) {
        CreateComponentVersionRequestLambdaFunction.validateJsonElement(jsonObj.get("lambdaFunction"));
      }
      if ((jsonObj.get("clientToken") != null && !jsonObj.get("clientToken").isJsonNull()) && !jsonObj.get("clientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateComponentVersionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateComponentVersionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateComponentVersionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateComponentVersionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateComponentVersionRequest>() {
           @Override
           public void write(JsonWriter out, CreateComponentVersionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateComponentVersionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateComponentVersionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateComponentVersionRequest
   * @throws IOException if the JSON string is invalid with respect to CreateComponentVersionRequest
   */
  public static CreateComponentVersionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateComponentVersionRequest.class);
  }

  /**
   * Convert an instance of CreateComponentVersionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

