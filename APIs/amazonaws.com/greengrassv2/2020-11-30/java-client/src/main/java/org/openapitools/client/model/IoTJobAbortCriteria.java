/*
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.IoTJobAbortAction;
import org.openapitools.client.model.IoTJobExecutionFailureType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Contains criteria that define when and how to cancel a job.&lt;/p&gt; &lt;p&gt;The deployment stops if the following conditions are true:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;The number of things that receive the deployment exceeds the &lt;code&gt;minNumberOfExecutedThings&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The percentage of failures with type &lt;code&gt;failureType&lt;/code&gt; exceeds the &lt;code&gt;thresholdPercentage&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.640074-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IoTJobAbortCriteria {
  public static final String SERIALIZED_NAME_FAILURE_TYPE = "failureType";
  @SerializedName(SERIALIZED_NAME_FAILURE_TYPE)
  private IoTJobExecutionFailureType failureType;

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private IoTJobAbortAction action;

  public static final String SERIALIZED_NAME_THRESHOLD_PERCENTAGE = "thresholdPercentage";
  @SerializedName(SERIALIZED_NAME_THRESHOLD_PERCENTAGE)
  private Double thresholdPercentage;

  public static final String SERIALIZED_NAME_MIN_NUMBER_OF_EXECUTED_THINGS = "minNumberOfExecutedThings";
  @SerializedName(SERIALIZED_NAME_MIN_NUMBER_OF_EXECUTED_THINGS)
  private Integer minNumberOfExecutedThings;

  public IoTJobAbortCriteria() {
  }

  public IoTJobAbortCriteria failureType(IoTJobExecutionFailureType failureType) {
    this.failureType = failureType;
    return this;
  }

  /**
   * Get failureType
   * @return failureType
   */
  @javax.annotation.Nonnull
  public IoTJobExecutionFailureType getFailureType() {
    return failureType;
  }

  public void setFailureType(IoTJobExecutionFailureType failureType) {
    this.failureType = failureType;
  }


  public IoTJobAbortCriteria action(IoTJobAbortAction action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nonnull
  public IoTJobAbortAction getAction() {
    return action;
  }

  public void setAction(IoTJobAbortAction action) {
    this.action = action;
  }


  public IoTJobAbortCriteria thresholdPercentage(Double thresholdPercentage) {
    this.thresholdPercentage = thresholdPercentage;
    return this;
  }

  /**
   * Get thresholdPercentage
   * @return thresholdPercentage
   */
  @javax.annotation.Nonnull
  public Double getThresholdPercentage() {
    return thresholdPercentage;
  }

  public void setThresholdPercentage(Double thresholdPercentage) {
    this.thresholdPercentage = thresholdPercentage;
  }


  public IoTJobAbortCriteria minNumberOfExecutedThings(Integer minNumberOfExecutedThings) {
    this.minNumberOfExecutedThings = minNumberOfExecutedThings;
    return this;
  }

  /**
   * Get minNumberOfExecutedThings
   * @return minNumberOfExecutedThings
   */
  @javax.annotation.Nonnull
  public Integer getMinNumberOfExecutedThings() {
    return minNumberOfExecutedThings;
  }

  public void setMinNumberOfExecutedThings(Integer minNumberOfExecutedThings) {
    this.minNumberOfExecutedThings = minNumberOfExecutedThings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoTJobAbortCriteria ioTJobAbortCriteria = (IoTJobAbortCriteria) o;
    return Objects.equals(this.failureType, ioTJobAbortCriteria.failureType) &&
        Objects.equals(this.action, ioTJobAbortCriteria.action) &&
        Objects.equals(this.thresholdPercentage, ioTJobAbortCriteria.thresholdPercentage) &&
        Objects.equals(this.minNumberOfExecutedThings, ioTJobAbortCriteria.minNumberOfExecutedThings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(failureType, action, thresholdPercentage, minNumberOfExecutedThings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoTJobAbortCriteria {\n");
    sb.append("    failureType: ").append(toIndentedString(failureType)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    thresholdPercentage: ").append(toIndentedString(thresholdPercentage)).append("\n");
    sb.append("    minNumberOfExecutedThings: ").append(toIndentedString(minNumberOfExecutedThings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("failureType");
    openapiFields.add("action");
    openapiFields.add("thresholdPercentage");
    openapiFields.add("minNumberOfExecutedThings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("failureType");
    openapiRequiredFields.add("action");
    openapiRequiredFields.add("thresholdPercentage");
    openapiRequiredFields.add("minNumberOfExecutedThings");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IoTJobAbortCriteria
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IoTJobAbortCriteria.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IoTJobAbortCriteria is not found in the empty JSON string", IoTJobAbortCriteria.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IoTJobAbortCriteria.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IoTJobAbortCriteria` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IoTJobAbortCriteria.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `failureType`
      IoTJobExecutionFailureType.validateJsonElement(jsonObj.get("failureType"));
      // validate the required field `action`
      IoTJobAbortAction.validateJsonElement(jsonObj.get("action"));
      // validate the required field `thresholdPercentage`
      Double.validateJsonElement(jsonObj.get("thresholdPercentage"));
      // validate the required field `minNumberOfExecutedThings`
      Integer.validateJsonElement(jsonObj.get("minNumberOfExecutedThings"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IoTJobAbortCriteria.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IoTJobAbortCriteria' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IoTJobAbortCriteria> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IoTJobAbortCriteria.class));

       return (TypeAdapter<T>) new TypeAdapter<IoTJobAbortCriteria>() {
           @Override
           public void write(JsonWriter out, IoTJobAbortCriteria value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IoTJobAbortCriteria read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IoTJobAbortCriteria given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IoTJobAbortCriteria
   * @throws IOException if the JSON string is invalid with respect to IoTJobAbortCriteria
   */
  public static IoTJobAbortCriteria fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IoTJobAbortCriteria.class);
  }

  /**
   * Convert an instance of IoTJobAbortCriteria to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

