/*
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CoreDeviceStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about a Greengrass core device, which is an IoT thing that runs the IoT Greengrass Core software.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.640074-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CoreDevice {
  public static final String SERIALIZED_NAME_CORE_DEVICE_THING_NAME = "coreDeviceThingName";
  @SerializedName(SERIALIZED_NAME_CORE_DEVICE_THING_NAME)
  private String coreDeviceThingName;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private CoreDeviceStatus status;

  public static final String SERIALIZED_NAME_LAST_STATUS_UPDATE_TIMESTAMP = "lastStatusUpdateTimestamp";
  @SerializedName(SERIALIZED_NAME_LAST_STATUS_UPDATE_TIMESTAMP)
  private OffsetDateTime lastStatusUpdateTimestamp;

  public CoreDevice() {
  }

  public CoreDevice coreDeviceThingName(String coreDeviceThingName) {
    this.coreDeviceThingName = coreDeviceThingName;
    return this;
  }

  /**
   * Get coreDeviceThingName
   * @return coreDeviceThingName
   */
  @javax.annotation.Nullable
  public String getCoreDeviceThingName() {
    return coreDeviceThingName;
  }

  public void setCoreDeviceThingName(String coreDeviceThingName) {
    this.coreDeviceThingName = coreDeviceThingName;
  }


  public CoreDevice status(CoreDeviceStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public CoreDeviceStatus getStatus() {
    return status;
  }

  public void setStatus(CoreDeviceStatus status) {
    this.status = status;
  }


  public CoreDevice lastStatusUpdateTimestamp(OffsetDateTime lastStatusUpdateTimestamp) {
    this.lastStatusUpdateTimestamp = lastStatusUpdateTimestamp;
    return this;
  }

  /**
   * Get lastStatusUpdateTimestamp
   * @return lastStatusUpdateTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastStatusUpdateTimestamp() {
    return lastStatusUpdateTimestamp;
  }

  public void setLastStatusUpdateTimestamp(OffsetDateTime lastStatusUpdateTimestamp) {
    this.lastStatusUpdateTimestamp = lastStatusUpdateTimestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CoreDevice coreDevice = (CoreDevice) o;
    return Objects.equals(this.coreDeviceThingName, coreDevice.coreDeviceThingName) &&
        Objects.equals(this.status, coreDevice.status) &&
        Objects.equals(this.lastStatusUpdateTimestamp, coreDevice.lastStatusUpdateTimestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(coreDeviceThingName, status, lastStatusUpdateTimestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CoreDevice {\n");
    sb.append("    coreDeviceThingName: ").append(toIndentedString(coreDeviceThingName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    lastStatusUpdateTimestamp: ").append(toIndentedString(lastStatusUpdateTimestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("coreDeviceThingName");
    openapiFields.add("status");
    openapiFields.add("lastStatusUpdateTimestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CoreDevice
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CoreDevice.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CoreDevice is not found in the empty JSON string", CoreDevice.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CoreDevice.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CoreDevice` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `coreDeviceThingName`
      if (jsonObj.get("coreDeviceThingName") != null && !jsonObj.get("coreDeviceThingName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("coreDeviceThingName"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        CoreDeviceStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `lastStatusUpdateTimestamp`
      if (jsonObj.get("lastStatusUpdateTimestamp") != null && !jsonObj.get("lastStatusUpdateTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastStatusUpdateTimestamp"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CoreDevice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CoreDevice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CoreDevice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CoreDevice.class));

       return (TypeAdapter<T>) new TypeAdapter<CoreDevice>() {
           @Override
           public void write(JsonWriter out, CoreDevice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CoreDevice read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CoreDevice given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CoreDevice
   * @throws IOException if the JSON string is invalid with respect to CoreDevice
   */
  public static CoreDevice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CoreDevice.class);
  }

  /**
   * Convert an instance of CoreDevice to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

