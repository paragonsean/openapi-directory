/*
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InstalledComponentLifecycleState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about a component on a Greengrass core device.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.640074-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InstalledComponent {
  public static final String SERIALIZED_NAME_COMPONENT_NAME = "componentName";
  @SerializedName(SERIALIZED_NAME_COMPONENT_NAME)
  private String componentName;

  public static final String SERIALIZED_NAME_COMPONENT_VERSION = "componentVersion";
  @SerializedName(SERIALIZED_NAME_COMPONENT_VERSION)
  private String componentVersion;

  public static final String SERIALIZED_NAME_LIFECYCLE_STATE = "lifecycleState";
  @SerializedName(SERIALIZED_NAME_LIFECYCLE_STATE)
  private InstalledComponentLifecycleState lifecycleState;

  public static final String SERIALIZED_NAME_LIFECYCLE_STATE_DETAILS = "lifecycleStateDetails";
  @SerializedName(SERIALIZED_NAME_LIFECYCLE_STATE_DETAILS)
  private String lifecycleStateDetails;

  public static final String SERIALIZED_NAME_IS_ROOT = "isRoot";
  @SerializedName(SERIALIZED_NAME_IS_ROOT)
  private Boolean isRoot;

  public static final String SERIALIZED_NAME_LAST_STATUS_CHANGE_TIMESTAMP = "lastStatusChangeTimestamp";
  @SerializedName(SERIALIZED_NAME_LAST_STATUS_CHANGE_TIMESTAMP)
  private OffsetDateTime lastStatusChangeTimestamp;

  public static final String SERIALIZED_NAME_LAST_REPORTED_TIMESTAMP = "lastReportedTimestamp";
  @SerializedName(SERIALIZED_NAME_LAST_REPORTED_TIMESTAMP)
  private OffsetDateTime lastReportedTimestamp;

  public static final String SERIALIZED_NAME_LAST_INSTALLATION_SOURCE = "lastInstallationSource";
  @SerializedName(SERIALIZED_NAME_LAST_INSTALLATION_SOURCE)
  private String lastInstallationSource;

  public static final String SERIALIZED_NAME_LIFECYCLE_STATUS_CODES = "lifecycleStatusCodes";
  @SerializedName(SERIALIZED_NAME_LIFECYCLE_STATUS_CODES)
  private List lifecycleStatusCodes;

  public InstalledComponent() {
  }

  public InstalledComponent componentName(String componentName) {
    this.componentName = componentName;
    return this;
  }

  /**
   * Get componentName
   * @return componentName
   */
  @javax.annotation.Nullable
  public String getComponentName() {
    return componentName;
  }

  public void setComponentName(String componentName) {
    this.componentName = componentName;
  }


  public InstalledComponent componentVersion(String componentVersion) {
    this.componentVersion = componentVersion;
    return this;
  }

  /**
   * Get componentVersion
   * @return componentVersion
   */
  @javax.annotation.Nullable
  public String getComponentVersion() {
    return componentVersion;
  }

  public void setComponentVersion(String componentVersion) {
    this.componentVersion = componentVersion;
  }


  public InstalledComponent lifecycleState(InstalledComponentLifecycleState lifecycleState) {
    this.lifecycleState = lifecycleState;
    return this;
  }

  /**
   * Get lifecycleState
   * @return lifecycleState
   */
  @javax.annotation.Nullable
  public InstalledComponentLifecycleState getLifecycleState() {
    return lifecycleState;
  }

  public void setLifecycleState(InstalledComponentLifecycleState lifecycleState) {
    this.lifecycleState = lifecycleState;
  }


  public InstalledComponent lifecycleStateDetails(String lifecycleStateDetails) {
    this.lifecycleStateDetails = lifecycleStateDetails;
    return this;
  }

  /**
   * Get lifecycleStateDetails
   * @return lifecycleStateDetails
   */
  @javax.annotation.Nullable
  public String getLifecycleStateDetails() {
    return lifecycleStateDetails;
  }

  public void setLifecycleStateDetails(String lifecycleStateDetails) {
    this.lifecycleStateDetails = lifecycleStateDetails;
  }


  public InstalledComponent isRoot(Boolean isRoot) {
    this.isRoot = isRoot;
    return this;
  }

  /**
   * Get isRoot
   * @return isRoot
   */
  @javax.annotation.Nullable
  public Boolean getIsRoot() {
    return isRoot;
  }

  public void setIsRoot(Boolean isRoot) {
    this.isRoot = isRoot;
  }


  public InstalledComponent lastStatusChangeTimestamp(OffsetDateTime lastStatusChangeTimestamp) {
    this.lastStatusChangeTimestamp = lastStatusChangeTimestamp;
    return this;
  }

  /**
   * Get lastStatusChangeTimestamp
   * @return lastStatusChangeTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastStatusChangeTimestamp() {
    return lastStatusChangeTimestamp;
  }

  public void setLastStatusChangeTimestamp(OffsetDateTime lastStatusChangeTimestamp) {
    this.lastStatusChangeTimestamp = lastStatusChangeTimestamp;
  }


  public InstalledComponent lastReportedTimestamp(OffsetDateTime lastReportedTimestamp) {
    this.lastReportedTimestamp = lastReportedTimestamp;
    return this;
  }

  /**
   * Get lastReportedTimestamp
   * @return lastReportedTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastReportedTimestamp() {
    return lastReportedTimestamp;
  }

  public void setLastReportedTimestamp(OffsetDateTime lastReportedTimestamp) {
    this.lastReportedTimestamp = lastReportedTimestamp;
  }


  public InstalledComponent lastInstallationSource(String lastInstallationSource) {
    this.lastInstallationSource = lastInstallationSource;
    return this;
  }

  /**
   * Get lastInstallationSource
   * @return lastInstallationSource
   */
  @javax.annotation.Nullable
  public String getLastInstallationSource() {
    return lastInstallationSource;
  }

  public void setLastInstallationSource(String lastInstallationSource) {
    this.lastInstallationSource = lastInstallationSource;
  }


  public InstalledComponent lifecycleStatusCodes(List lifecycleStatusCodes) {
    this.lifecycleStatusCodes = lifecycleStatusCodes;
    return this;
  }

  /**
   * Get lifecycleStatusCodes
   * @return lifecycleStatusCodes
   */
  @javax.annotation.Nullable
  public List getLifecycleStatusCodes() {
    return lifecycleStatusCodes;
  }

  public void setLifecycleStatusCodes(List lifecycleStatusCodes) {
    this.lifecycleStatusCodes = lifecycleStatusCodes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstalledComponent installedComponent = (InstalledComponent) o;
    return Objects.equals(this.componentName, installedComponent.componentName) &&
        Objects.equals(this.componentVersion, installedComponent.componentVersion) &&
        Objects.equals(this.lifecycleState, installedComponent.lifecycleState) &&
        Objects.equals(this.lifecycleStateDetails, installedComponent.lifecycleStateDetails) &&
        Objects.equals(this.isRoot, installedComponent.isRoot) &&
        Objects.equals(this.lastStatusChangeTimestamp, installedComponent.lastStatusChangeTimestamp) &&
        Objects.equals(this.lastReportedTimestamp, installedComponent.lastReportedTimestamp) &&
        Objects.equals(this.lastInstallationSource, installedComponent.lastInstallationSource) &&
        Objects.equals(this.lifecycleStatusCodes, installedComponent.lifecycleStatusCodes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(componentName, componentVersion, lifecycleState, lifecycleStateDetails, isRoot, lastStatusChangeTimestamp, lastReportedTimestamp, lastInstallationSource, lifecycleStatusCodes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstalledComponent {\n");
    sb.append("    componentName: ").append(toIndentedString(componentName)).append("\n");
    sb.append("    componentVersion: ").append(toIndentedString(componentVersion)).append("\n");
    sb.append("    lifecycleState: ").append(toIndentedString(lifecycleState)).append("\n");
    sb.append("    lifecycleStateDetails: ").append(toIndentedString(lifecycleStateDetails)).append("\n");
    sb.append("    isRoot: ").append(toIndentedString(isRoot)).append("\n");
    sb.append("    lastStatusChangeTimestamp: ").append(toIndentedString(lastStatusChangeTimestamp)).append("\n");
    sb.append("    lastReportedTimestamp: ").append(toIndentedString(lastReportedTimestamp)).append("\n");
    sb.append("    lastInstallationSource: ").append(toIndentedString(lastInstallationSource)).append("\n");
    sb.append("    lifecycleStatusCodes: ").append(toIndentedString(lifecycleStatusCodes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("componentName");
    openapiFields.add("componentVersion");
    openapiFields.add("lifecycleState");
    openapiFields.add("lifecycleStateDetails");
    openapiFields.add("isRoot");
    openapiFields.add("lastStatusChangeTimestamp");
    openapiFields.add("lastReportedTimestamp");
    openapiFields.add("lastInstallationSource");
    openapiFields.add("lifecycleStatusCodes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstalledComponent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstalledComponent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstalledComponent is not found in the empty JSON string", InstalledComponent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstalledComponent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstalledComponent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `componentName`
      if (jsonObj.get("componentName") != null && !jsonObj.get("componentName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("componentName"));
      }
      // validate the optional field `componentVersion`
      if (jsonObj.get("componentVersion") != null && !jsonObj.get("componentVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("componentVersion"));
      }
      // validate the optional field `lifecycleState`
      if (jsonObj.get("lifecycleState") != null && !jsonObj.get("lifecycleState").isJsonNull()) {
        InstalledComponentLifecycleState.validateJsonElement(jsonObj.get("lifecycleState"));
      }
      // validate the optional field `lifecycleStateDetails`
      if (jsonObj.get("lifecycleStateDetails") != null && !jsonObj.get("lifecycleStateDetails").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("lifecycleStateDetails"));
      }
      // validate the optional field `isRoot`
      if (jsonObj.get("isRoot") != null && !jsonObj.get("isRoot").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("isRoot"));
      }
      // validate the optional field `lastStatusChangeTimestamp`
      if (jsonObj.get("lastStatusChangeTimestamp") != null && !jsonObj.get("lastStatusChangeTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastStatusChangeTimestamp"));
      }
      // validate the optional field `lastReportedTimestamp`
      if (jsonObj.get("lastReportedTimestamp") != null && !jsonObj.get("lastReportedTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastReportedTimestamp"));
      }
      // validate the optional field `lastInstallationSource`
      if (jsonObj.get("lastInstallationSource") != null && !jsonObj.get("lastInstallationSource").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("lastInstallationSource"));
      }
      // validate the optional field `lifecycleStatusCodes`
      if (jsonObj.get("lifecycleStatusCodes") != null && !jsonObj.get("lifecycleStatusCodes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("lifecycleStatusCodes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstalledComponent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstalledComponent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstalledComponent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstalledComponent.class));

       return (TypeAdapter<T>) new TypeAdapter<InstalledComponent>() {
           @Override
           public void write(JsonWriter out, InstalledComponent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstalledComponent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstalledComponent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstalledComponent
   * @throws IOException if the JSON string is invalid with respect to InstalledComponent
   */
  public static InstalledComponent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstalledComponent.class);
  }

  /**
   * Convert an instance of InstalledComponent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

