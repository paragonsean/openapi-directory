/*
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.VendorGuidance;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about a component version that is compatible to run on a Greengrass core device.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.640074-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResolvedComponentVersion {
  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_COMPONENT_NAME = "componentName";
  @SerializedName(SERIALIZED_NAME_COMPONENT_NAME)
  private String componentName;

  public static final String SERIALIZED_NAME_COMPONENT_VERSION = "componentVersion";
  @SerializedName(SERIALIZED_NAME_COMPONENT_VERSION)
  private String componentVersion;

  public static final String SERIALIZED_NAME_RECIPE = "recipe";
  @SerializedName(SERIALIZED_NAME_RECIPE)
  private String recipe;

  public static final String SERIALIZED_NAME_VENDOR_GUIDANCE = "vendorGuidance";
  @SerializedName(SERIALIZED_NAME_VENDOR_GUIDANCE)
  private VendorGuidance vendorGuidance;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public ResolvedComponentVersion() {
  }

  public ResolvedComponentVersion arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public ResolvedComponentVersion componentName(String componentName) {
    this.componentName = componentName;
    return this;
  }

  /**
   * Get componentName
   * @return componentName
   */
  @javax.annotation.Nullable
  public String getComponentName() {
    return componentName;
  }

  public void setComponentName(String componentName) {
    this.componentName = componentName;
  }


  public ResolvedComponentVersion componentVersion(String componentVersion) {
    this.componentVersion = componentVersion;
    return this;
  }

  /**
   * Get componentVersion
   * @return componentVersion
   */
  @javax.annotation.Nullable
  public String getComponentVersion() {
    return componentVersion;
  }

  public void setComponentVersion(String componentVersion) {
    this.componentVersion = componentVersion;
  }


  public ResolvedComponentVersion recipe(String recipe) {
    this.recipe = recipe;
    return this;
  }

  /**
   * Get recipe
   * @return recipe
   */
  @javax.annotation.Nullable
  public String getRecipe() {
    return recipe;
  }

  public void setRecipe(String recipe) {
    this.recipe = recipe;
  }


  public ResolvedComponentVersion vendorGuidance(VendorGuidance vendorGuidance) {
    this.vendorGuidance = vendorGuidance;
    return this;
  }

  /**
   * Get vendorGuidance
   * @return vendorGuidance
   */
  @javax.annotation.Nullable
  public VendorGuidance getVendorGuidance() {
    return vendorGuidance;
  }

  public void setVendorGuidance(VendorGuidance vendorGuidance) {
    this.vendorGuidance = vendorGuidance;
  }


  public ResolvedComponentVersion message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResolvedComponentVersion resolvedComponentVersion = (ResolvedComponentVersion) o;
    return Objects.equals(this.arn, resolvedComponentVersion.arn) &&
        Objects.equals(this.componentName, resolvedComponentVersion.componentName) &&
        Objects.equals(this.componentVersion, resolvedComponentVersion.componentVersion) &&
        Objects.equals(this.recipe, resolvedComponentVersion.recipe) &&
        Objects.equals(this.vendorGuidance, resolvedComponentVersion.vendorGuidance) &&
        Objects.equals(this.message, resolvedComponentVersion.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, componentName, componentVersion, recipe, vendorGuidance, message);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResolvedComponentVersion {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    componentName: ").append(toIndentedString(componentName)).append("\n");
    sb.append("    componentVersion: ").append(toIndentedString(componentVersion)).append("\n");
    sb.append("    recipe: ").append(toIndentedString(recipe)).append("\n");
    sb.append("    vendorGuidance: ").append(toIndentedString(vendorGuidance)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arn");
    openapiFields.add("componentName");
    openapiFields.add("componentVersion");
    openapiFields.add("recipe");
    openapiFields.add("vendorGuidance");
    openapiFields.add("message");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResolvedComponentVersion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResolvedComponentVersion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResolvedComponentVersion is not found in the empty JSON string", ResolvedComponentVersion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResolvedComponentVersion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResolvedComponentVersion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `componentName`
      if (jsonObj.get("componentName") != null && !jsonObj.get("componentName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("componentName"));
      }
      // validate the optional field `componentVersion`
      if (jsonObj.get("componentVersion") != null && !jsonObj.get("componentVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("componentVersion"));
      }
      // validate the optional field `recipe`
      if (jsonObj.get("recipe") != null && !jsonObj.get("recipe").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("recipe"));
      }
      // validate the optional field `vendorGuidance`
      if (jsonObj.get("vendorGuidance") != null && !jsonObj.get("vendorGuidance").isJsonNull()) {
        VendorGuidance.validateJsonElement(jsonObj.get("vendorGuidance"));
      }
      // validate the optional field `message`
      if (jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("message"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResolvedComponentVersion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResolvedComponentVersion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResolvedComponentVersion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResolvedComponentVersion.class));

       return (TypeAdapter<T>) new TypeAdapter<ResolvedComponentVersion>() {
           @Override
           public void write(JsonWriter out, ResolvedComponentVersion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResolvedComponentVersion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResolvedComponentVersion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResolvedComponentVersion
   * @throws IOException if the JSON string is invalid with respect to ResolvedComponentVersion
   */
  public static ResolvedComponentVersion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResolvedComponentVersion.class);
  }

  /**
   * Convert an instance of ResolvedComponentVersion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

