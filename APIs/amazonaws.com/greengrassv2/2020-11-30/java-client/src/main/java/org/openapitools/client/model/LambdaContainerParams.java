/*
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about a container in which Lambda functions run on Greengrass core devices.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:16.640074-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LambdaContainerParams {
  public static final String SERIALIZED_NAME_MEMORY_SIZE_IN_K_B = "memorySizeInKB";
  @SerializedName(SERIALIZED_NAME_MEMORY_SIZE_IN_K_B)
  private Integer memorySizeInKB;

  public static final String SERIALIZED_NAME_MOUNT_R_O_SYSFS = "mountROSysfs";
  @SerializedName(SERIALIZED_NAME_MOUNT_R_O_SYSFS)
  private Boolean mountROSysfs;

  public static final String SERIALIZED_NAME_VOLUMES = "volumes";
  @SerializedName(SERIALIZED_NAME_VOLUMES)
  private List volumes;

  public static final String SERIALIZED_NAME_DEVICES = "devices";
  @SerializedName(SERIALIZED_NAME_DEVICES)
  private List devices;

  public LambdaContainerParams() {
  }

  public LambdaContainerParams memorySizeInKB(Integer memorySizeInKB) {
    this.memorySizeInKB = memorySizeInKB;
    return this;
  }

  /**
   * Get memorySizeInKB
   * @return memorySizeInKB
   */
  @javax.annotation.Nullable
  public Integer getMemorySizeInKB() {
    return memorySizeInKB;
  }

  public void setMemorySizeInKB(Integer memorySizeInKB) {
    this.memorySizeInKB = memorySizeInKB;
  }


  public LambdaContainerParams mountROSysfs(Boolean mountROSysfs) {
    this.mountROSysfs = mountROSysfs;
    return this;
  }

  /**
   * Get mountROSysfs
   * @return mountROSysfs
   */
  @javax.annotation.Nullable
  public Boolean getMountROSysfs() {
    return mountROSysfs;
  }

  public void setMountROSysfs(Boolean mountROSysfs) {
    this.mountROSysfs = mountROSysfs;
  }


  public LambdaContainerParams volumes(List volumes) {
    this.volumes = volumes;
    return this;
  }

  /**
   * Get volumes
   * @return volumes
   */
  @javax.annotation.Nullable
  public List getVolumes() {
    return volumes;
  }

  public void setVolumes(List volumes) {
    this.volumes = volumes;
  }


  public LambdaContainerParams devices(List devices) {
    this.devices = devices;
    return this;
  }

  /**
   * Get devices
   * @return devices
   */
  @javax.annotation.Nullable
  public List getDevices() {
    return devices;
  }

  public void setDevices(List devices) {
    this.devices = devices;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LambdaContainerParams lambdaContainerParams = (LambdaContainerParams) o;
    return Objects.equals(this.memorySizeInKB, lambdaContainerParams.memorySizeInKB) &&
        Objects.equals(this.mountROSysfs, lambdaContainerParams.mountROSysfs) &&
        Objects.equals(this.volumes, lambdaContainerParams.volumes) &&
        Objects.equals(this.devices, lambdaContainerParams.devices);
  }

  @Override
  public int hashCode() {
    return Objects.hash(memorySizeInKB, mountROSysfs, volumes, devices);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LambdaContainerParams {\n");
    sb.append("    memorySizeInKB: ").append(toIndentedString(memorySizeInKB)).append("\n");
    sb.append("    mountROSysfs: ").append(toIndentedString(mountROSysfs)).append("\n");
    sb.append("    volumes: ").append(toIndentedString(volumes)).append("\n");
    sb.append("    devices: ").append(toIndentedString(devices)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("memorySizeInKB");
    openapiFields.add("mountROSysfs");
    openapiFields.add("volumes");
    openapiFields.add("devices");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LambdaContainerParams
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LambdaContainerParams.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LambdaContainerParams is not found in the empty JSON string", LambdaContainerParams.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LambdaContainerParams.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LambdaContainerParams` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `memorySizeInKB`
      if (jsonObj.get("memorySizeInKB") != null && !jsonObj.get("memorySizeInKB").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("memorySizeInKB"));
      }
      // validate the optional field `mountROSysfs`
      if (jsonObj.get("mountROSysfs") != null && !jsonObj.get("mountROSysfs").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("mountROSysfs"));
      }
      // validate the optional field `volumes`
      if (jsonObj.get("volumes") != null && !jsonObj.get("volumes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("volumes"));
      }
      // validate the optional field `devices`
      if (jsonObj.get("devices") != null && !jsonObj.get("devices").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("devices"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LambdaContainerParams.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LambdaContainerParams' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LambdaContainerParams> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LambdaContainerParams.class));

       return (TypeAdapter<T>) new TypeAdapter<LambdaContainerParams>() {
           @Override
           public void write(JsonWriter out, LambdaContainerParams value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LambdaContainerParams read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LambdaContainerParams given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LambdaContainerParams
   * @throws IOException if the JSON string is invalid with respect to LambdaContainerParams
   */
  public static LambdaContainerParams fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LambdaContainerParams.class);
  }

  /**
   * Convert an instance of LambdaContainerParams to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

