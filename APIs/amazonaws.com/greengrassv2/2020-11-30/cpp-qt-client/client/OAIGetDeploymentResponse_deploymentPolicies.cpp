/**
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDeploymentResponse_deploymentPolicies.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDeploymentResponse_deploymentPolicies::OAIGetDeploymentResponse_deploymentPolicies(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDeploymentResponse_deploymentPolicies::OAIGetDeploymentResponse_deploymentPolicies() {
    this->initializeModel();
}

OAIGetDeploymentResponse_deploymentPolicies::~OAIGetDeploymentResponse_deploymentPolicies() {}

void OAIGetDeploymentResponse_deploymentPolicies::initializeModel() {

    m_failure_handling_policy_isSet = false;
    m_failure_handling_policy_isValid = false;

    m_component_update_policy_isSet = false;
    m_component_update_policy_isValid = false;

    m_configuration_validation_policy_isSet = false;
    m_configuration_validation_policy_isValid = false;
}

void OAIGetDeploymentResponse_deploymentPolicies::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDeploymentResponse_deploymentPolicies::fromJsonObject(QJsonObject json) {

    m_failure_handling_policy_isValid = ::OpenAPI::fromJsonValue(m_failure_handling_policy, json[QString("failureHandlingPolicy")]);
    m_failure_handling_policy_isSet = !json[QString("failureHandlingPolicy")].isNull() && m_failure_handling_policy_isValid;

    m_component_update_policy_isValid = ::OpenAPI::fromJsonValue(m_component_update_policy, json[QString("componentUpdatePolicy")]);
    m_component_update_policy_isSet = !json[QString("componentUpdatePolicy")].isNull() && m_component_update_policy_isValid;

    m_configuration_validation_policy_isValid = ::OpenAPI::fromJsonValue(m_configuration_validation_policy, json[QString("configurationValidationPolicy")]);
    m_configuration_validation_policy_isSet = !json[QString("configurationValidationPolicy")].isNull() && m_configuration_validation_policy_isValid;
}

QString OAIGetDeploymentResponse_deploymentPolicies::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDeploymentResponse_deploymentPolicies::asJsonObject() const {
    QJsonObject obj;
    if (m_failure_handling_policy.isSet()) {
        obj.insert(QString("failureHandlingPolicy"), ::OpenAPI::toJsonValue(m_failure_handling_policy));
    }
    if (m_component_update_policy.isSet()) {
        obj.insert(QString("componentUpdatePolicy"), ::OpenAPI::toJsonValue(m_component_update_policy));
    }
    if (m_configuration_validation_policy.isSet()) {
        obj.insert(QString("configurationValidationPolicy"), ::OpenAPI::toJsonValue(m_configuration_validation_policy));
    }
    return obj;
}

OAIDeploymentFailureHandlingPolicy OAIGetDeploymentResponse_deploymentPolicies::getFailureHandlingPolicy() const {
    return m_failure_handling_policy;
}
void OAIGetDeploymentResponse_deploymentPolicies::setFailureHandlingPolicy(const OAIDeploymentFailureHandlingPolicy &failure_handling_policy) {
    m_failure_handling_policy = failure_handling_policy;
    m_failure_handling_policy_isSet = true;
}

bool OAIGetDeploymentResponse_deploymentPolicies::is_failure_handling_policy_Set() const{
    return m_failure_handling_policy_isSet;
}

bool OAIGetDeploymentResponse_deploymentPolicies::is_failure_handling_policy_Valid() const{
    return m_failure_handling_policy_isValid;
}

OAICreateDeployment_request_deploymentPolicies_componentUpdatePolicy OAIGetDeploymentResponse_deploymentPolicies::getComponentUpdatePolicy() const {
    return m_component_update_policy;
}
void OAIGetDeploymentResponse_deploymentPolicies::setComponentUpdatePolicy(const OAICreateDeployment_request_deploymentPolicies_componentUpdatePolicy &component_update_policy) {
    m_component_update_policy = component_update_policy;
    m_component_update_policy_isSet = true;
}

bool OAIGetDeploymentResponse_deploymentPolicies::is_component_update_policy_Set() const{
    return m_component_update_policy_isSet;
}

bool OAIGetDeploymentResponse_deploymentPolicies::is_component_update_policy_Valid() const{
    return m_component_update_policy_isValid;
}

OAICreateDeployment_request_deploymentPolicies_configurationValidationPolicy OAIGetDeploymentResponse_deploymentPolicies::getConfigurationValidationPolicy() const {
    return m_configuration_validation_policy;
}
void OAIGetDeploymentResponse_deploymentPolicies::setConfigurationValidationPolicy(const OAICreateDeployment_request_deploymentPolicies_configurationValidationPolicy &configuration_validation_policy) {
    m_configuration_validation_policy = configuration_validation_policy;
    m_configuration_validation_policy_isSet = true;
}

bool OAIGetDeploymentResponse_deploymentPolicies::is_configuration_validation_policy_Set() const{
    return m_configuration_validation_policy_isSet;
}

bool OAIGetDeploymentResponse_deploymentPolicies::is_configuration_validation_policy_Valid() const{
    return m_configuration_validation_policy_isValid;
}

bool OAIGetDeploymentResponse_deploymentPolicies::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failure_handling_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_update_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_validation_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDeploymentResponse_deploymentPolicies::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
