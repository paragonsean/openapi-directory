/**
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICoreDevice.h
 *
 * Contains information about a Greengrass core device, which is an IoT thing that runs the IoT Greengrass Core software.
 */

#ifndef OAICoreDevice_H
#define OAICoreDevice_H

#include <QJsonObject>

#include "OAICoreDeviceStatus.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICoreDevice : public OAIObject {
public:
    OAICoreDevice();
    OAICoreDevice(QString json);
    ~OAICoreDevice() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCoreDeviceThingName() const;
    void setCoreDeviceThingName(const QString &core_device_thing_name);
    bool is_core_device_thing_name_Set() const;
    bool is_core_device_thing_name_Valid() const;

    OAICoreDeviceStatus getStatus() const;
    void setStatus(const OAICoreDeviceStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QDateTime getLastStatusUpdateTimestamp() const;
    void setLastStatusUpdateTimestamp(const QDateTime &last_status_update_timestamp);
    bool is_last_status_update_timestamp_Set() const;
    bool is_last_status_update_timestamp_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_core_device_thing_name;
    bool m_core_device_thing_name_isSet;
    bool m_core_device_thing_name_isValid;

    OAICoreDeviceStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QDateTime m_last_status_update_timestamp;
    bool m_last_status_update_timestamp_isSet;
    bool m_last_status_update_timestamp_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICoreDevice)

#endif // OAICoreDevice_H
