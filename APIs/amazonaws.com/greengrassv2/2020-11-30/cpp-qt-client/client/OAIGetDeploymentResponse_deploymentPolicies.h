/**
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetDeploymentResponse_deploymentPolicies.h
 *
 * 
 */

#ifndef OAIGetDeploymentResponse_deploymentPolicies_H
#define OAIGetDeploymentResponse_deploymentPolicies_H

#include <QJsonObject>

#include "OAICreateDeployment_request_deploymentPolicies_componentUpdatePolicy.h"
#include "OAICreateDeployment_request_deploymentPolicies_configurationValidationPolicy.h"
#include "OAIDeploymentFailureHandlingPolicy.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateDeployment_request_deploymentPolicies_componentUpdatePolicy;
class OAICreateDeployment_request_deploymentPolicies_configurationValidationPolicy;

class OAIGetDeploymentResponse_deploymentPolicies : public OAIObject {
public:
    OAIGetDeploymentResponse_deploymentPolicies();
    OAIGetDeploymentResponse_deploymentPolicies(QString json);
    ~OAIGetDeploymentResponse_deploymentPolicies() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIDeploymentFailureHandlingPolicy getFailureHandlingPolicy() const;
    void setFailureHandlingPolicy(const OAIDeploymentFailureHandlingPolicy &failure_handling_policy);
    bool is_failure_handling_policy_Set() const;
    bool is_failure_handling_policy_Valid() const;

    OAICreateDeployment_request_deploymentPolicies_componentUpdatePolicy getComponentUpdatePolicy() const;
    void setComponentUpdatePolicy(const OAICreateDeployment_request_deploymentPolicies_componentUpdatePolicy &component_update_policy);
    bool is_component_update_policy_Set() const;
    bool is_component_update_policy_Valid() const;

    OAICreateDeployment_request_deploymentPolicies_configurationValidationPolicy getConfigurationValidationPolicy() const;
    void setConfigurationValidationPolicy(const OAICreateDeployment_request_deploymentPolicies_configurationValidationPolicy &configuration_validation_policy);
    bool is_configuration_validation_policy_Set() const;
    bool is_configuration_validation_policy_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIDeploymentFailureHandlingPolicy m_failure_handling_policy;
    bool m_failure_handling_policy_isSet;
    bool m_failure_handling_policy_isValid;

    OAICreateDeployment_request_deploymentPolicies_componentUpdatePolicy m_component_update_policy;
    bool m_component_update_policy_isSet;
    bool m_component_update_policy_isValid;

    OAICreateDeployment_request_deploymentPolicies_configurationValidationPolicy m_configuration_validation_policy;
    bool m_configuration_validation_policy_isSet;
    bool m_configuration_validation_policy_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetDeploymentResponse_deploymentPolicies)

#endif // OAIGetDeploymentResponse_deploymentPolicies_H
