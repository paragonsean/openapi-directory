/**
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateComponentVersionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateComponentVersionResponse::OAICreateComponentVersionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateComponentVersionResponse::OAICreateComponentVersionResponse() {
    this->initializeModel();
}

OAICreateComponentVersionResponse::~OAICreateComponentVersionResponse() {}

void OAICreateComponentVersionResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_component_name_isSet = false;
    m_component_name_isValid = false;

    m_component_version_isSet = false;
    m_component_version_isValid = false;

    m_creation_timestamp_isSet = false;
    m_creation_timestamp_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAICreateComponentVersionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateComponentVersionResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_component_name_isValid = ::OpenAPI::fromJsonValue(m_component_name, json[QString("componentName")]);
    m_component_name_isSet = !json[QString("componentName")].isNull() && m_component_name_isValid;

    m_component_version_isValid = ::OpenAPI::fromJsonValue(m_component_version, json[QString("componentVersion")]);
    m_component_version_isSet = !json[QString("componentVersion")].isNull() && m_component_version_isValid;

    m_creation_timestamp_isValid = ::OpenAPI::fromJsonValue(m_creation_timestamp, json[QString("creationTimestamp")]);
    m_creation_timestamp_isSet = !json[QString("creationTimestamp")].isNull() && m_creation_timestamp_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAICreateComponentVersionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateComponentVersionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_component_name_isSet) {
        obj.insert(QString("componentName"), ::OpenAPI::toJsonValue(m_component_name));
    }
    if (m_component_version_isSet) {
        obj.insert(QString("componentVersion"), ::OpenAPI::toJsonValue(m_component_version));
    }
    if (m_creation_timestamp_isSet) {
        obj.insert(QString("creationTimestamp"), ::OpenAPI::toJsonValue(m_creation_timestamp));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAICreateComponentVersionResponse::getArn() const {
    return m_arn;
}
void OAICreateComponentVersionResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICreateComponentVersionResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICreateComponentVersionResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAICreateComponentVersionResponse::getComponentName() const {
    return m_component_name;
}
void OAICreateComponentVersionResponse::setComponentName(const QString &component_name) {
    m_component_name = component_name;
    m_component_name_isSet = true;
}

bool OAICreateComponentVersionResponse::is_component_name_Set() const{
    return m_component_name_isSet;
}

bool OAICreateComponentVersionResponse::is_component_name_Valid() const{
    return m_component_name_isValid;
}

QString OAICreateComponentVersionResponse::getComponentVersion() const {
    return m_component_version;
}
void OAICreateComponentVersionResponse::setComponentVersion(const QString &component_version) {
    m_component_version = component_version;
    m_component_version_isSet = true;
}

bool OAICreateComponentVersionResponse::is_component_version_Set() const{
    return m_component_version_isSet;
}

bool OAICreateComponentVersionResponse::is_component_version_Valid() const{
    return m_component_version_isValid;
}

QDateTime OAICreateComponentVersionResponse::getCreationTimestamp() const {
    return m_creation_timestamp;
}
void OAICreateComponentVersionResponse::setCreationTimestamp(const QDateTime &creation_timestamp) {
    m_creation_timestamp = creation_timestamp;
    m_creation_timestamp_isSet = true;
}

bool OAICreateComponentVersionResponse::is_creation_timestamp_Set() const{
    return m_creation_timestamp_isSet;
}

bool OAICreateComponentVersionResponse::is_creation_timestamp_Valid() const{
    return m_creation_timestamp_isValid;
}

OAICreateComponentVersionResponse_status OAICreateComponentVersionResponse::getStatus() const {
    return m_status;
}
void OAICreateComponentVersionResponse::setStatus(const OAICreateComponentVersionResponse_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreateComponentVersionResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreateComponentVersionResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAICreateComponentVersionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateComponentVersionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_component_name_isValid && m_component_version_isValid && m_creation_timestamp_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
