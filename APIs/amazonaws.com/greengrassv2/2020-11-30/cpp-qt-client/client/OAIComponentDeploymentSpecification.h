/**
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIComponentDeploymentSpecification.h
 *
 * Contains information about a component to deploy.
 */

#ifndef OAIComponentDeploymentSpecification_H
#define OAIComponentDeploymentSpecification_H

#include <QJsonObject>

#include "OAIComponentDeploymentSpecification_configurationUpdate.h"
#include "OAIComponentDeploymentSpecification_runWith.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIComponentDeploymentSpecification_configurationUpdate;
class OAIComponentDeploymentSpecification_runWith;

class OAIComponentDeploymentSpecification : public OAIObject {
public:
    OAIComponentDeploymentSpecification();
    OAIComponentDeploymentSpecification(QString json);
    ~OAIComponentDeploymentSpecification() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getComponentVersion() const;
    void setComponentVersion(const QString &component_version);
    bool is_component_version_Set() const;
    bool is_component_version_Valid() const;

    OAIComponentDeploymentSpecification_configurationUpdate getConfigurationUpdate() const;
    void setConfigurationUpdate(const OAIComponentDeploymentSpecification_configurationUpdate &configuration_update);
    bool is_configuration_update_Set() const;
    bool is_configuration_update_Valid() const;

    OAIComponentDeploymentSpecification_runWith getRunWith() const;
    void setRunWith(const OAIComponentDeploymentSpecification_runWith &run_with);
    bool is_run_with_Set() const;
    bool is_run_with_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_component_version;
    bool m_component_version_isSet;
    bool m_component_version_isValid;

    OAIComponentDeploymentSpecification_configurationUpdate m_configuration_update;
    bool m_configuration_update_isSet;
    bool m_configuration_update_isValid;

    OAIComponentDeploymentSpecification_runWith m_run_with;
    bool m_run_with_isSet;
    bool m_run_with_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIComponentDeploymentSpecification)

#endif // OAIComponentDeploymentSpecification_H
