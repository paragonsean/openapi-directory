/**
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateComponentVersionResponse_status.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateComponentVersionResponse_status::OAICreateComponentVersionResponse_status(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateComponentVersionResponse_status::OAICreateComponentVersionResponse_status() {
    this->initializeModel();
}

OAICreateComponentVersionResponse_status::~OAICreateComponentVersionResponse_status() {}

void OAICreateComponentVersionResponse_status::initializeModel() {

    m_component_state_isSet = false;
    m_component_state_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_vendor_guidance_isSet = false;
    m_vendor_guidance_isValid = false;

    m_vendor_guidance_message_isSet = false;
    m_vendor_guidance_message_isValid = false;
}

void OAICreateComponentVersionResponse_status::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateComponentVersionResponse_status::fromJsonObject(QJsonObject json) {

    m_component_state_isValid = ::OpenAPI::fromJsonValue(m_component_state, json[QString("componentState")]);
    m_component_state_isSet = !json[QString("componentState")].isNull() && m_component_state_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_vendor_guidance_isValid = ::OpenAPI::fromJsonValue(m_vendor_guidance, json[QString("vendorGuidance")]);
    m_vendor_guidance_isSet = !json[QString("vendorGuidance")].isNull() && m_vendor_guidance_isValid;

    m_vendor_guidance_message_isValid = ::OpenAPI::fromJsonValue(m_vendor_guidance_message, json[QString("vendorGuidanceMessage")]);
    m_vendor_guidance_message_isSet = !json[QString("vendorGuidanceMessage")].isNull() && m_vendor_guidance_message_isValid;
}

QString OAICreateComponentVersionResponse_status::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateComponentVersionResponse_status::asJsonObject() const {
    QJsonObject obj;
    if (m_component_state.isSet()) {
        obj.insert(QString("componentState"), ::OpenAPI::toJsonValue(m_component_state));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_errors.isSet()) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_vendor_guidance.isSet()) {
        obj.insert(QString("vendorGuidance"), ::OpenAPI::toJsonValue(m_vendor_guidance));
    }
    if (m_vendor_guidance_message_isSet) {
        obj.insert(QString("vendorGuidanceMessage"), ::OpenAPI::toJsonValue(m_vendor_guidance_message));
    }
    return obj;
}

OAICloudComponentState OAICreateComponentVersionResponse_status::getComponentState() const {
    return m_component_state;
}
void OAICreateComponentVersionResponse_status::setComponentState(const OAICloudComponentState &component_state) {
    m_component_state = component_state;
    m_component_state_isSet = true;
}

bool OAICreateComponentVersionResponse_status::is_component_state_Set() const{
    return m_component_state_isSet;
}

bool OAICreateComponentVersionResponse_status::is_component_state_Valid() const{
    return m_component_state_isValid;
}

QString OAICreateComponentVersionResponse_status::getMessage() const {
    return m_message;
}
void OAICreateComponentVersionResponse_status::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAICreateComponentVersionResponse_status::is_message_Set() const{
    return m_message_isSet;
}

bool OAICreateComponentVersionResponse_status::is_message_Valid() const{
    return m_message_isValid;
}

QMap OAICreateComponentVersionResponse_status::getErrors() const {
    return m_errors;
}
void OAICreateComponentVersionResponse_status::setErrors(const QMap &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAICreateComponentVersionResponse_status::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAICreateComponentVersionResponse_status::is_errors_Valid() const{
    return m_errors_isValid;
}

OAIVendorGuidance OAICreateComponentVersionResponse_status::getVendorGuidance() const {
    return m_vendor_guidance;
}
void OAICreateComponentVersionResponse_status::setVendorGuidance(const OAIVendorGuidance &vendor_guidance) {
    m_vendor_guidance = vendor_guidance;
    m_vendor_guidance_isSet = true;
}

bool OAICreateComponentVersionResponse_status::is_vendor_guidance_Set() const{
    return m_vendor_guidance_isSet;
}

bool OAICreateComponentVersionResponse_status::is_vendor_guidance_Valid() const{
    return m_vendor_guidance_isValid;
}

QString OAICreateComponentVersionResponse_status::getVendorGuidanceMessage() const {
    return m_vendor_guidance_message;
}
void OAICreateComponentVersionResponse_status::setVendorGuidanceMessage(const QString &vendor_guidance_message) {
    m_vendor_guidance_message = vendor_guidance_message;
    m_vendor_guidance_message_isSet = true;
}

bool OAICreateComponentVersionResponse_status::is_vendor_guidance_message_Set() const{
    return m_vendor_guidance_message_isSet;
}

bool OAICreateComponentVersionResponse_status::is_vendor_guidance_message_Valid() const{
    return m_vendor_guidance_message_isValid;
}

bool OAICreateComponentVersionResponse_status::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_component_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_guidance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_guidance_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateComponentVersionResponse_status::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
