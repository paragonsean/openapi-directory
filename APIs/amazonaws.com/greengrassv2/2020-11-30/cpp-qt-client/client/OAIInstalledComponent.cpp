/**
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstalledComponent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstalledComponent::OAIInstalledComponent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstalledComponent::OAIInstalledComponent() {
    this->initializeModel();
}

OAIInstalledComponent::~OAIInstalledComponent() {}

void OAIInstalledComponent::initializeModel() {

    m_component_name_isSet = false;
    m_component_name_isValid = false;

    m_component_version_isSet = false;
    m_component_version_isValid = false;

    m_lifecycle_state_isSet = false;
    m_lifecycle_state_isValid = false;

    m_lifecycle_state_details_isSet = false;
    m_lifecycle_state_details_isValid = false;

    m_is_root_isSet = false;
    m_is_root_isValid = false;

    m_last_status_change_timestamp_isSet = false;
    m_last_status_change_timestamp_isValid = false;

    m_last_reported_timestamp_isSet = false;
    m_last_reported_timestamp_isValid = false;

    m_last_installation_source_isSet = false;
    m_last_installation_source_isValid = false;

    m_lifecycle_status_codes_isSet = false;
    m_lifecycle_status_codes_isValid = false;
}

void OAIInstalledComponent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstalledComponent::fromJsonObject(QJsonObject json) {

    m_component_name_isValid = ::OpenAPI::fromJsonValue(m_component_name, json[QString("componentName")]);
    m_component_name_isSet = !json[QString("componentName")].isNull() && m_component_name_isValid;

    m_component_version_isValid = ::OpenAPI::fromJsonValue(m_component_version, json[QString("componentVersion")]);
    m_component_version_isSet = !json[QString("componentVersion")].isNull() && m_component_version_isValid;

    m_lifecycle_state_isValid = ::OpenAPI::fromJsonValue(m_lifecycle_state, json[QString("lifecycleState")]);
    m_lifecycle_state_isSet = !json[QString("lifecycleState")].isNull() && m_lifecycle_state_isValid;

    m_lifecycle_state_details_isValid = ::OpenAPI::fromJsonValue(m_lifecycle_state_details, json[QString("lifecycleStateDetails")]);
    m_lifecycle_state_details_isSet = !json[QString("lifecycleStateDetails")].isNull() && m_lifecycle_state_details_isValid;

    m_is_root_isValid = ::OpenAPI::fromJsonValue(m_is_root, json[QString("isRoot")]);
    m_is_root_isSet = !json[QString("isRoot")].isNull() && m_is_root_isValid;

    m_last_status_change_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_status_change_timestamp, json[QString("lastStatusChangeTimestamp")]);
    m_last_status_change_timestamp_isSet = !json[QString("lastStatusChangeTimestamp")].isNull() && m_last_status_change_timestamp_isValid;

    m_last_reported_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_reported_timestamp, json[QString("lastReportedTimestamp")]);
    m_last_reported_timestamp_isSet = !json[QString("lastReportedTimestamp")].isNull() && m_last_reported_timestamp_isValid;

    m_last_installation_source_isValid = ::OpenAPI::fromJsonValue(m_last_installation_source, json[QString("lastInstallationSource")]);
    m_last_installation_source_isSet = !json[QString("lastInstallationSource")].isNull() && m_last_installation_source_isValid;

    m_lifecycle_status_codes_isValid = ::OpenAPI::fromJsonValue(m_lifecycle_status_codes, json[QString("lifecycleStatusCodes")]);
    m_lifecycle_status_codes_isSet = !json[QString("lifecycleStatusCodes")].isNull() && m_lifecycle_status_codes_isValid;
}

QString OAIInstalledComponent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstalledComponent::asJsonObject() const {
    QJsonObject obj;
    if (m_component_name_isSet) {
        obj.insert(QString("componentName"), ::OpenAPI::toJsonValue(m_component_name));
    }
    if (m_component_version_isSet) {
        obj.insert(QString("componentVersion"), ::OpenAPI::toJsonValue(m_component_version));
    }
    if (m_lifecycle_state.isSet()) {
        obj.insert(QString("lifecycleState"), ::OpenAPI::toJsonValue(m_lifecycle_state));
    }
    if (m_lifecycle_state_details_isSet) {
        obj.insert(QString("lifecycleStateDetails"), ::OpenAPI::toJsonValue(m_lifecycle_state_details));
    }
    if (m_is_root_isSet) {
        obj.insert(QString("isRoot"), ::OpenAPI::toJsonValue(m_is_root));
    }
    if (m_last_status_change_timestamp_isSet) {
        obj.insert(QString("lastStatusChangeTimestamp"), ::OpenAPI::toJsonValue(m_last_status_change_timestamp));
    }
    if (m_last_reported_timestamp_isSet) {
        obj.insert(QString("lastReportedTimestamp"), ::OpenAPI::toJsonValue(m_last_reported_timestamp));
    }
    if (m_last_installation_source_isSet) {
        obj.insert(QString("lastInstallationSource"), ::OpenAPI::toJsonValue(m_last_installation_source));
    }
    if (m_lifecycle_status_codes.isSet()) {
        obj.insert(QString("lifecycleStatusCodes"), ::OpenAPI::toJsonValue(m_lifecycle_status_codes));
    }
    return obj;
}

QString OAIInstalledComponent::getComponentName() const {
    return m_component_name;
}
void OAIInstalledComponent::setComponentName(const QString &component_name) {
    m_component_name = component_name;
    m_component_name_isSet = true;
}

bool OAIInstalledComponent::is_component_name_Set() const{
    return m_component_name_isSet;
}

bool OAIInstalledComponent::is_component_name_Valid() const{
    return m_component_name_isValid;
}

QString OAIInstalledComponent::getComponentVersion() const {
    return m_component_version;
}
void OAIInstalledComponent::setComponentVersion(const QString &component_version) {
    m_component_version = component_version;
    m_component_version_isSet = true;
}

bool OAIInstalledComponent::is_component_version_Set() const{
    return m_component_version_isSet;
}

bool OAIInstalledComponent::is_component_version_Valid() const{
    return m_component_version_isValid;
}

OAIInstalledComponentLifecycleState OAIInstalledComponent::getLifecycleState() const {
    return m_lifecycle_state;
}
void OAIInstalledComponent::setLifecycleState(const OAIInstalledComponentLifecycleState &lifecycle_state) {
    m_lifecycle_state = lifecycle_state;
    m_lifecycle_state_isSet = true;
}

bool OAIInstalledComponent::is_lifecycle_state_Set() const{
    return m_lifecycle_state_isSet;
}

bool OAIInstalledComponent::is_lifecycle_state_Valid() const{
    return m_lifecycle_state_isValid;
}

QString OAIInstalledComponent::getLifecycleStateDetails() const {
    return m_lifecycle_state_details;
}
void OAIInstalledComponent::setLifecycleStateDetails(const QString &lifecycle_state_details) {
    m_lifecycle_state_details = lifecycle_state_details;
    m_lifecycle_state_details_isSet = true;
}

bool OAIInstalledComponent::is_lifecycle_state_details_Set() const{
    return m_lifecycle_state_details_isSet;
}

bool OAIInstalledComponent::is_lifecycle_state_details_Valid() const{
    return m_lifecycle_state_details_isValid;
}

bool OAIInstalledComponent::getIsRoot() const {
    return m_is_root;
}
void OAIInstalledComponent::setIsRoot(const bool &is_root) {
    m_is_root = is_root;
    m_is_root_isSet = true;
}

bool OAIInstalledComponent::is_is_root_Set() const{
    return m_is_root_isSet;
}

bool OAIInstalledComponent::is_is_root_Valid() const{
    return m_is_root_isValid;
}

QDateTime OAIInstalledComponent::getLastStatusChangeTimestamp() const {
    return m_last_status_change_timestamp;
}
void OAIInstalledComponent::setLastStatusChangeTimestamp(const QDateTime &last_status_change_timestamp) {
    m_last_status_change_timestamp = last_status_change_timestamp;
    m_last_status_change_timestamp_isSet = true;
}

bool OAIInstalledComponent::is_last_status_change_timestamp_Set() const{
    return m_last_status_change_timestamp_isSet;
}

bool OAIInstalledComponent::is_last_status_change_timestamp_Valid() const{
    return m_last_status_change_timestamp_isValid;
}

QDateTime OAIInstalledComponent::getLastReportedTimestamp() const {
    return m_last_reported_timestamp;
}
void OAIInstalledComponent::setLastReportedTimestamp(const QDateTime &last_reported_timestamp) {
    m_last_reported_timestamp = last_reported_timestamp;
    m_last_reported_timestamp_isSet = true;
}

bool OAIInstalledComponent::is_last_reported_timestamp_Set() const{
    return m_last_reported_timestamp_isSet;
}

bool OAIInstalledComponent::is_last_reported_timestamp_Valid() const{
    return m_last_reported_timestamp_isValid;
}

QString OAIInstalledComponent::getLastInstallationSource() const {
    return m_last_installation_source;
}
void OAIInstalledComponent::setLastInstallationSource(const QString &last_installation_source) {
    m_last_installation_source = last_installation_source;
    m_last_installation_source_isSet = true;
}

bool OAIInstalledComponent::is_last_installation_source_Set() const{
    return m_last_installation_source_isSet;
}

bool OAIInstalledComponent::is_last_installation_source_Valid() const{
    return m_last_installation_source_isValid;
}

QList OAIInstalledComponent::getLifecycleStatusCodes() const {
    return m_lifecycle_status_codes;
}
void OAIInstalledComponent::setLifecycleStatusCodes(const QList &lifecycle_status_codes) {
    m_lifecycle_status_codes = lifecycle_status_codes;
    m_lifecycle_status_codes_isSet = true;
}

bool OAIInstalledComponent::is_lifecycle_status_codes_Set() const{
    return m_lifecycle_status_codes_isSet;
}

bool OAIInstalledComponent::is_lifecycle_status_codes_Valid() const{
    return m_lifecycle_status_codes_isValid;
}

bool OAIInstalledComponent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_component_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifecycle_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifecycle_state_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_root_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_status_change_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_reported_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_installation_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifecycle_status_codes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstalledComponent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
