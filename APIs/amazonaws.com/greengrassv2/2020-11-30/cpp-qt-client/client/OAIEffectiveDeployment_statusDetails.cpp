/**
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEffectiveDeployment_statusDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEffectiveDeployment_statusDetails::OAIEffectiveDeployment_statusDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEffectiveDeployment_statusDetails::OAIEffectiveDeployment_statusDetails() {
    this->initializeModel();
}

OAIEffectiveDeployment_statusDetails::~OAIEffectiveDeployment_statusDetails() {}

void OAIEffectiveDeployment_statusDetails::initializeModel() {

    m_error_stack_isSet = false;
    m_error_stack_isValid = false;

    m_error_types_isSet = false;
    m_error_types_isValid = false;
}

void OAIEffectiveDeployment_statusDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEffectiveDeployment_statusDetails::fromJsonObject(QJsonObject json) {

    m_error_stack_isValid = ::OpenAPI::fromJsonValue(m_error_stack, json[QString("errorStack")]);
    m_error_stack_isSet = !json[QString("errorStack")].isNull() && m_error_stack_isValid;

    m_error_types_isValid = ::OpenAPI::fromJsonValue(m_error_types, json[QString("errorTypes")]);
    m_error_types_isSet = !json[QString("errorTypes")].isNull() && m_error_types_isValid;
}

QString OAIEffectiveDeployment_statusDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEffectiveDeployment_statusDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_error_stack.isSet()) {
        obj.insert(QString("errorStack"), ::OpenAPI::toJsonValue(m_error_stack));
    }
    if (m_error_types.isSet()) {
        obj.insert(QString("errorTypes"), ::OpenAPI::toJsonValue(m_error_types));
    }
    return obj;
}

QList OAIEffectiveDeployment_statusDetails::getErrorStack() const {
    return m_error_stack;
}
void OAIEffectiveDeployment_statusDetails::setErrorStack(const QList &error_stack) {
    m_error_stack = error_stack;
    m_error_stack_isSet = true;
}

bool OAIEffectiveDeployment_statusDetails::is_error_stack_Set() const{
    return m_error_stack_isSet;
}

bool OAIEffectiveDeployment_statusDetails::is_error_stack_Valid() const{
    return m_error_stack_isValid;
}

QList OAIEffectiveDeployment_statusDetails::getErrorTypes() const {
    return m_error_types;
}
void OAIEffectiveDeployment_statusDetails::setErrorTypes(const QList &error_types) {
    m_error_types = error_types;
    m_error_types_isSet = true;
}

bool OAIEffectiveDeployment_statusDetails::is_error_types_Set() const{
    return m_error_types_isSet;
}

bool OAIEffectiveDeployment_statusDetails::is_error_types_Valid() const{
    return m_error_types_isValid;
}

bool OAIEffectiveDeployment_statusDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_stack.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_types.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEffectiveDeployment_statusDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
