/**
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectivityInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectivityInfo::OAIConnectivityInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectivityInfo::OAIConnectivityInfo() {
    this->initializeModel();
}

OAIConnectivityInfo::~OAIConnectivityInfo() {}

void OAIConnectivityInfo::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_host_address_isSet = false;
    m_host_address_isValid = false;

    m_port_number_isSet = false;
    m_port_number_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;
}

void OAIConnectivityInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectivityInfo::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_host_address_isValid = ::OpenAPI::fromJsonValue(m_host_address, json[QString("hostAddress")]);
    m_host_address_isSet = !json[QString("hostAddress")].isNull() && m_host_address_isValid;

    m_port_number_isValid = ::OpenAPI::fromJsonValue(m_port_number, json[QString("portNumber")]);
    m_port_number_isSet = !json[QString("portNumber")].isNull() && m_port_number_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;
}

QString OAIConnectivityInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectivityInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_host_address_isSet) {
        obj.insert(QString("hostAddress"), ::OpenAPI::toJsonValue(m_host_address));
    }
    if (m_port_number_isSet) {
        obj.insert(QString("portNumber"), ::OpenAPI::toJsonValue(m_port_number));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    return obj;
}

QString OAIConnectivityInfo::getId() const {
    return m_id;
}
void OAIConnectivityInfo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIConnectivityInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAIConnectivityInfo::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIConnectivityInfo::getHostAddress() const {
    return m_host_address;
}
void OAIConnectivityInfo::setHostAddress(const QString &host_address) {
    m_host_address = host_address;
    m_host_address_isSet = true;
}

bool OAIConnectivityInfo::is_host_address_Set() const{
    return m_host_address_isSet;
}

bool OAIConnectivityInfo::is_host_address_Valid() const{
    return m_host_address_isValid;
}

qint32 OAIConnectivityInfo::getPortNumber() const {
    return m_port_number;
}
void OAIConnectivityInfo::setPortNumber(const qint32 &port_number) {
    m_port_number = port_number;
    m_port_number_isSet = true;
}

bool OAIConnectivityInfo::is_port_number_Set() const{
    return m_port_number_isSet;
}

bool OAIConnectivityInfo::is_port_number_Valid() const{
    return m_port_number_isValid;
}

QString OAIConnectivityInfo::getMetadata() const {
    return m_metadata;
}
void OAIConnectivityInfo::setMetadata(const QString &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIConnectivityInfo::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIConnectivityInfo::is_metadata_Valid() const{
    return m_metadata_isValid;
}

bool OAIConnectivityInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectivityInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
