/**
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILambdaLinuxProcessParams_containerParams.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILambdaLinuxProcessParams_containerParams::OAILambdaLinuxProcessParams_containerParams(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILambdaLinuxProcessParams_containerParams::OAILambdaLinuxProcessParams_containerParams() {
    this->initializeModel();
}

OAILambdaLinuxProcessParams_containerParams::~OAILambdaLinuxProcessParams_containerParams() {}

void OAILambdaLinuxProcessParams_containerParams::initializeModel() {

    m_memory_size_in_kb_isSet = false;
    m_memory_size_in_kb_isValid = false;

    m_mount_ro_sysfs_isSet = false;
    m_mount_ro_sysfs_isValid = false;

    m_volumes_isSet = false;
    m_volumes_isValid = false;

    m_devices_isSet = false;
    m_devices_isValid = false;
}

void OAILambdaLinuxProcessParams_containerParams::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILambdaLinuxProcessParams_containerParams::fromJsonObject(QJsonObject json) {

    m_memory_size_in_kb_isValid = ::OpenAPI::fromJsonValue(m_memory_size_in_kb, json[QString("memorySizeInKB")]);
    m_memory_size_in_kb_isSet = !json[QString("memorySizeInKB")].isNull() && m_memory_size_in_kb_isValid;

    m_mount_ro_sysfs_isValid = ::OpenAPI::fromJsonValue(m_mount_ro_sysfs, json[QString("mountROSysfs")]);
    m_mount_ro_sysfs_isSet = !json[QString("mountROSysfs")].isNull() && m_mount_ro_sysfs_isValid;

    m_volumes_isValid = ::OpenAPI::fromJsonValue(m_volumes, json[QString("volumes")]);
    m_volumes_isSet = !json[QString("volumes")].isNull() && m_volumes_isValid;

    m_devices_isValid = ::OpenAPI::fromJsonValue(m_devices, json[QString("devices")]);
    m_devices_isSet = !json[QString("devices")].isNull() && m_devices_isValid;
}

QString OAILambdaLinuxProcessParams_containerParams::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILambdaLinuxProcessParams_containerParams::asJsonObject() const {
    QJsonObject obj;
    if (m_memory_size_in_kb_isSet) {
        obj.insert(QString("memorySizeInKB"), ::OpenAPI::toJsonValue(m_memory_size_in_kb));
    }
    if (m_mount_ro_sysfs_isSet) {
        obj.insert(QString("mountROSysfs"), ::OpenAPI::toJsonValue(m_mount_ro_sysfs));
    }
    if (m_volumes.isSet()) {
        obj.insert(QString("volumes"), ::OpenAPI::toJsonValue(m_volumes));
    }
    if (m_devices.isSet()) {
        obj.insert(QString("devices"), ::OpenAPI::toJsonValue(m_devices));
    }
    return obj;
}

qint32 OAILambdaLinuxProcessParams_containerParams::getMemorySizeInKb() const {
    return m_memory_size_in_kb;
}
void OAILambdaLinuxProcessParams_containerParams::setMemorySizeInKb(const qint32 &memory_size_in_kb) {
    m_memory_size_in_kb = memory_size_in_kb;
    m_memory_size_in_kb_isSet = true;
}

bool OAILambdaLinuxProcessParams_containerParams::is_memory_size_in_kb_Set() const{
    return m_memory_size_in_kb_isSet;
}

bool OAILambdaLinuxProcessParams_containerParams::is_memory_size_in_kb_Valid() const{
    return m_memory_size_in_kb_isValid;
}

bool OAILambdaLinuxProcessParams_containerParams::getMountRoSysfs() const {
    return m_mount_ro_sysfs;
}
void OAILambdaLinuxProcessParams_containerParams::setMountRoSysfs(const bool &mount_ro_sysfs) {
    m_mount_ro_sysfs = mount_ro_sysfs;
    m_mount_ro_sysfs_isSet = true;
}

bool OAILambdaLinuxProcessParams_containerParams::is_mount_ro_sysfs_Set() const{
    return m_mount_ro_sysfs_isSet;
}

bool OAILambdaLinuxProcessParams_containerParams::is_mount_ro_sysfs_Valid() const{
    return m_mount_ro_sysfs_isValid;
}

QList OAILambdaLinuxProcessParams_containerParams::getVolumes() const {
    return m_volumes;
}
void OAILambdaLinuxProcessParams_containerParams::setVolumes(const QList &volumes) {
    m_volumes = volumes;
    m_volumes_isSet = true;
}

bool OAILambdaLinuxProcessParams_containerParams::is_volumes_Set() const{
    return m_volumes_isSet;
}

bool OAILambdaLinuxProcessParams_containerParams::is_volumes_Valid() const{
    return m_volumes_isValid;
}

QList OAILambdaLinuxProcessParams_containerParams::getDevices() const {
    return m_devices;
}
void OAILambdaLinuxProcessParams_containerParams::setDevices(const QList &devices) {
    m_devices = devices;
    m_devices_isSet = true;
}

bool OAILambdaLinuxProcessParams_containerParams::is_devices_Set() const{
    return m_devices_isSet;
}

bool OAILambdaLinuxProcessParams_containerParams::is_devices_Valid() const{
    return m_devices_isValid;
}

bool OAILambdaLinuxProcessParams_containerParams::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_memory_size_in_kb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mount_ro_sysfs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volumes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_devices.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILambdaLinuxProcessParams_containerParams::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
