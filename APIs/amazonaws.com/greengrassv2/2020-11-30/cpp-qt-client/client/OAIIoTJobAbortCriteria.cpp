/**
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIoTJobAbortCriteria.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIoTJobAbortCriteria::OAIIoTJobAbortCriteria(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIoTJobAbortCriteria::OAIIoTJobAbortCriteria() {
    this->initializeModel();
}

OAIIoTJobAbortCriteria::~OAIIoTJobAbortCriteria() {}

void OAIIoTJobAbortCriteria::initializeModel() {

    m_failure_type_isSet = false;
    m_failure_type_isValid = false;

    m_action_isSet = false;
    m_action_isValid = false;

    m_threshold_percentage_isSet = false;
    m_threshold_percentage_isValid = false;

    m_min_number_of_executed_things_isSet = false;
    m_min_number_of_executed_things_isValid = false;
}

void OAIIoTJobAbortCriteria::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIoTJobAbortCriteria::fromJsonObject(QJsonObject json) {

    m_failure_type_isValid = ::OpenAPI::fromJsonValue(m_failure_type, json[QString("failureType")]);
    m_failure_type_isSet = !json[QString("failureType")].isNull() && m_failure_type_isValid;

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_threshold_percentage_isValid = ::OpenAPI::fromJsonValue(m_threshold_percentage, json[QString("thresholdPercentage")]);
    m_threshold_percentage_isSet = !json[QString("thresholdPercentage")].isNull() && m_threshold_percentage_isValid;

    m_min_number_of_executed_things_isValid = ::OpenAPI::fromJsonValue(m_min_number_of_executed_things, json[QString("minNumberOfExecutedThings")]);
    m_min_number_of_executed_things_isSet = !json[QString("minNumberOfExecutedThings")].isNull() && m_min_number_of_executed_things_isValid;
}

QString OAIIoTJobAbortCriteria::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIoTJobAbortCriteria::asJsonObject() const {
    QJsonObject obj;
    if (m_failure_type.isSet()) {
        obj.insert(QString("failureType"), ::OpenAPI::toJsonValue(m_failure_type));
    }
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_threshold_percentage_isSet) {
        obj.insert(QString("thresholdPercentage"), ::OpenAPI::toJsonValue(m_threshold_percentage));
    }
    if (m_min_number_of_executed_things_isSet) {
        obj.insert(QString("minNumberOfExecutedThings"), ::OpenAPI::toJsonValue(m_min_number_of_executed_things));
    }
    return obj;
}

OAIIoTJobExecutionFailureType OAIIoTJobAbortCriteria::getFailureType() const {
    return m_failure_type;
}
void OAIIoTJobAbortCriteria::setFailureType(const OAIIoTJobExecutionFailureType &failure_type) {
    m_failure_type = failure_type;
    m_failure_type_isSet = true;
}

bool OAIIoTJobAbortCriteria::is_failure_type_Set() const{
    return m_failure_type_isSet;
}

bool OAIIoTJobAbortCriteria::is_failure_type_Valid() const{
    return m_failure_type_isValid;
}

OAIIoTJobAbortAction OAIIoTJobAbortCriteria::getAction() const {
    return m_action;
}
void OAIIoTJobAbortCriteria::setAction(const OAIIoTJobAbortAction &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIIoTJobAbortCriteria::is_action_Set() const{
    return m_action_isSet;
}

bool OAIIoTJobAbortCriteria::is_action_Valid() const{
    return m_action_isValid;
}

double OAIIoTJobAbortCriteria::getThresholdPercentage() const {
    return m_threshold_percentage;
}
void OAIIoTJobAbortCriteria::setThresholdPercentage(const double &threshold_percentage) {
    m_threshold_percentage = threshold_percentage;
    m_threshold_percentage_isSet = true;
}

bool OAIIoTJobAbortCriteria::is_threshold_percentage_Set() const{
    return m_threshold_percentage_isSet;
}

bool OAIIoTJobAbortCriteria::is_threshold_percentage_Valid() const{
    return m_threshold_percentage_isValid;
}

qint32 OAIIoTJobAbortCriteria::getMinNumberOfExecutedThings() const {
    return m_min_number_of_executed_things;
}
void OAIIoTJobAbortCriteria::setMinNumberOfExecutedThings(const qint32 &min_number_of_executed_things) {
    m_min_number_of_executed_things = min_number_of_executed_things;
    m_min_number_of_executed_things_isSet = true;
}

bool OAIIoTJobAbortCriteria::is_min_number_of_executed_things_Set() const{
    return m_min_number_of_executed_things_isSet;
}

bool OAIIoTJobAbortCriteria::is_min_number_of_executed_things_Valid() const{
    return m_min_number_of_executed_things_isValid;
}

bool OAIIoTJobAbortCriteria::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failure_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_threshold_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_number_of_executed_things_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIoTJobAbortCriteria::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_failure_type_isValid && m_action_isValid && m_threshold_percentage_isValid && m_min_number_of_executed_things_isValid && true;
}

} // namespace OpenAPI
