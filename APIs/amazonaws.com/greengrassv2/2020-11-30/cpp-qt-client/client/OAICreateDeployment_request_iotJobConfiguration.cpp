/**
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDeployment_request_iotJobConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDeployment_request_iotJobConfiguration::OAICreateDeployment_request_iotJobConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDeployment_request_iotJobConfiguration::OAICreateDeployment_request_iotJobConfiguration() {
    this->initializeModel();
}

OAICreateDeployment_request_iotJobConfiguration::~OAICreateDeployment_request_iotJobConfiguration() {}

void OAICreateDeployment_request_iotJobConfiguration::initializeModel() {

    m_job_executions_rollout_config_isSet = false;
    m_job_executions_rollout_config_isValid = false;

    m_abort_config_isSet = false;
    m_abort_config_isValid = false;

    m_timeout_config_isSet = false;
    m_timeout_config_isValid = false;
}

void OAICreateDeployment_request_iotJobConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDeployment_request_iotJobConfiguration::fromJsonObject(QJsonObject json) {

    m_job_executions_rollout_config_isValid = ::OpenAPI::fromJsonValue(m_job_executions_rollout_config, json[QString("jobExecutionsRolloutConfig")]);
    m_job_executions_rollout_config_isSet = !json[QString("jobExecutionsRolloutConfig")].isNull() && m_job_executions_rollout_config_isValid;

    m_abort_config_isValid = ::OpenAPI::fromJsonValue(m_abort_config, json[QString("abortConfig")]);
    m_abort_config_isSet = !json[QString("abortConfig")].isNull() && m_abort_config_isValid;

    m_timeout_config_isValid = ::OpenAPI::fromJsonValue(m_timeout_config, json[QString("timeoutConfig")]);
    m_timeout_config_isSet = !json[QString("timeoutConfig")].isNull() && m_timeout_config_isValid;
}

QString OAICreateDeployment_request_iotJobConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDeployment_request_iotJobConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_job_executions_rollout_config.isSet()) {
        obj.insert(QString("jobExecutionsRolloutConfig"), ::OpenAPI::toJsonValue(m_job_executions_rollout_config));
    }
    if (m_abort_config.isSet()) {
        obj.insert(QString("abortConfig"), ::OpenAPI::toJsonValue(m_abort_config));
    }
    if (m_timeout_config.isSet()) {
        obj.insert(QString("timeoutConfig"), ::OpenAPI::toJsonValue(m_timeout_config));
    }
    return obj;
}

OAICreateDeployment_request_iotJobConfiguration_jobExecutionsRolloutConfig OAICreateDeployment_request_iotJobConfiguration::getJobExecutionsRolloutConfig() const {
    return m_job_executions_rollout_config;
}
void OAICreateDeployment_request_iotJobConfiguration::setJobExecutionsRolloutConfig(const OAICreateDeployment_request_iotJobConfiguration_jobExecutionsRolloutConfig &job_executions_rollout_config) {
    m_job_executions_rollout_config = job_executions_rollout_config;
    m_job_executions_rollout_config_isSet = true;
}

bool OAICreateDeployment_request_iotJobConfiguration::is_job_executions_rollout_config_Set() const{
    return m_job_executions_rollout_config_isSet;
}

bool OAICreateDeployment_request_iotJobConfiguration::is_job_executions_rollout_config_Valid() const{
    return m_job_executions_rollout_config_isValid;
}

OAICreateDeployment_request_iotJobConfiguration_abortConfig OAICreateDeployment_request_iotJobConfiguration::getAbortConfig() const {
    return m_abort_config;
}
void OAICreateDeployment_request_iotJobConfiguration::setAbortConfig(const OAICreateDeployment_request_iotJobConfiguration_abortConfig &abort_config) {
    m_abort_config = abort_config;
    m_abort_config_isSet = true;
}

bool OAICreateDeployment_request_iotJobConfiguration::is_abort_config_Set() const{
    return m_abort_config_isSet;
}

bool OAICreateDeployment_request_iotJobConfiguration::is_abort_config_Valid() const{
    return m_abort_config_isValid;
}

OAICreateDeployment_request_iotJobConfiguration_timeoutConfig OAICreateDeployment_request_iotJobConfiguration::getTimeoutConfig() const {
    return m_timeout_config;
}
void OAICreateDeployment_request_iotJobConfiguration::setTimeoutConfig(const OAICreateDeployment_request_iotJobConfiguration_timeoutConfig &timeout_config) {
    m_timeout_config = timeout_config;
    m_timeout_config_isSet = true;
}

bool OAICreateDeployment_request_iotJobConfiguration::is_timeout_config_Set() const{
    return m_timeout_config_isSet;
}

bool OAICreateDeployment_request_iotJobConfiguration::is_timeout_config_Valid() const{
    return m_timeout_config_isValid;
}

bool OAICreateDeployment_request_iotJobConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_executions_rollout_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_abort_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDeployment_request_iotJobConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
