/**
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEffectiveDeployment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEffectiveDeployment::OAIEffectiveDeployment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEffectiveDeployment::OAIEffectiveDeployment() {
    this->initializeModel();
}

OAIEffectiveDeployment::~OAIEffectiveDeployment() {}

void OAIEffectiveDeployment::initializeModel() {

    m_deployment_id_isSet = false;
    m_deployment_id_isValid = false;

    m_deployment_name_isSet = false;
    m_deployment_name_isValid = false;

    m_iot_job_id_isSet = false;
    m_iot_job_id_isValid = false;

    m_iot_job_arn_isSet = false;
    m_iot_job_arn_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_target_arn_isSet = false;
    m_target_arn_isValid = false;

    m_core_device_execution_status_isSet = false;
    m_core_device_execution_status_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_creation_timestamp_isSet = false;
    m_creation_timestamp_isValid = false;

    m_modified_timestamp_isSet = false;
    m_modified_timestamp_isValid = false;

    m_status_details_isSet = false;
    m_status_details_isValid = false;
}

void OAIEffectiveDeployment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEffectiveDeployment::fromJsonObject(QJsonObject json) {

    m_deployment_id_isValid = ::OpenAPI::fromJsonValue(m_deployment_id, json[QString("deploymentId")]);
    m_deployment_id_isSet = !json[QString("deploymentId")].isNull() && m_deployment_id_isValid;

    m_deployment_name_isValid = ::OpenAPI::fromJsonValue(m_deployment_name, json[QString("deploymentName")]);
    m_deployment_name_isSet = !json[QString("deploymentName")].isNull() && m_deployment_name_isValid;

    m_iot_job_id_isValid = ::OpenAPI::fromJsonValue(m_iot_job_id, json[QString("iotJobId")]);
    m_iot_job_id_isSet = !json[QString("iotJobId")].isNull() && m_iot_job_id_isValid;

    m_iot_job_arn_isValid = ::OpenAPI::fromJsonValue(m_iot_job_arn, json[QString("iotJobArn")]);
    m_iot_job_arn_isSet = !json[QString("iotJobArn")].isNull() && m_iot_job_arn_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_target_arn_isValid = ::OpenAPI::fromJsonValue(m_target_arn, json[QString("targetArn")]);
    m_target_arn_isSet = !json[QString("targetArn")].isNull() && m_target_arn_isValid;

    m_core_device_execution_status_isValid = ::OpenAPI::fromJsonValue(m_core_device_execution_status, json[QString("coreDeviceExecutionStatus")]);
    m_core_device_execution_status_isSet = !json[QString("coreDeviceExecutionStatus")].isNull() && m_core_device_execution_status_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_creation_timestamp_isValid = ::OpenAPI::fromJsonValue(m_creation_timestamp, json[QString("creationTimestamp")]);
    m_creation_timestamp_isSet = !json[QString("creationTimestamp")].isNull() && m_creation_timestamp_isValid;

    m_modified_timestamp_isValid = ::OpenAPI::fromJsonValue(m_modified_timestamp, json[QString("modifiedTimestamp")]);
    m_modified_timestamp_isSet = !json[QString("modifiedTimestamp")].isNull() && m_modified_timestamp_isValid;

    m_status_details_isValid = ::OpenAPI::fromJsonValue(m_status_details, json[QString("statusDetails")]);
    m_status_details_isSet = !json[QString("statusDetails")].isNull() && m_status_details_isValid;
}

QString OAIEffectiveDeployment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEffectiveDeployment::asJsonObject() const {
    QJsonObject obj;
    if (m_deployment_id_isSet) {
        obj.insert(QString("deploymentId"), ::OpenAPI::toJsonValue(m_deployment_id));
    }
    if (m_deployment_name_isSet) {
        obj.insert(QString("deploymentName"), ::OpenAPI::toJsonValue(m_deployment_name));
    }
    if (m_iot_job_id_isSet) {
        obj.insert(QString("iotJobId"), ::OpenAPI::toJsonValue(m_iot_job_id));
    }
    if (m_iot_job_arn_isSet) {
        obj.insert(QString("iotJobArn"), ::OpenAPI::toJsonValue(m_iot_job_arn));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_target_arn_isSet) {
        obj.insert(QString("targetArn"), ::OpenAPI::toJsonValue(m_target_arn));
    }
    if (m_core_device_execution_status.isSet()) {
        obj.insert(QString("coreDeviceExecutionStatus"), ::OpenAPI::toJsonValue(m_core_device_execution_status));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_creation_timestamp_isSet) {
        obj.insert(QString("creationTimestamp"), ::OpenAPI::toJsonValue(m_creation_timestamp));
    }
    if (m_modified_timestamp_isSet) {
        obj.insert(QString("modifiedTimestamp"), ::OpenAPI::toJsonValue(m_modified_timestamp));
    }
    if (m_status_details.isSet()) {
        obj.insert(QString("statusDetails"), ::OpenAPI::toJsonValue(m_status_details));
    }
    return obj;
}

QString OAIEffectiveDeployment::getDeploymentId() const {
    return m_deployment_id;
}
void OAIEffectiveDeployment::setDeploymentId(const QString &deployment_id) {
    m_deployment_id = deployment_id;
    m_deployment_id_isSet = true;
}

bool OAIEffectiveDeployment::is_deployment_id_Set() const{
    return m_deployment_id_isSet;
}

bool OAIEffectiveDeployment::is_deployment_id_Valid() const{
    return m_deployment_id_isValid;
}

QString OAIEffectiveDeployment::getDeploymentName() const {
    return m_deployment_name;
}
void OAIEffectiveDeployment::setDeploymentName(const QString &deployment_name) {
    m_deployment_name = deployment_name;
    m_deployment_name_isSet = true;
}

bool OAIEffectiveDeployment::is_deployment_name_Set() const{
    return m_deployment_name_isSet;
}

bool OAIEffectiveDeployment::is_deployment_name_Valid() const{
    return m_deployment_name_isValid;
}

QString OAIEffectiveDeployment::getIotJobId() const {
    return m_iot_job_id;
}
void OAIEffectiveDeployment::setIotJobId(const QString &iot_job_id) {
    m_iot_job_id = iot_job_id;
    m_iot_job_id_isSet = true;
}

bool OAIEffectiveDeployment::is_iot_job_id_Set() const{
    return m_iot_job_id_isSet;
}

bool OAIEffectiveDeployment::is_iot_job_id_Valid() const{
    return m_iot_job_id_isValid;
}

QString OAIEffectiveDeployment::getIotJobArn() const {
    return m_iot_job_arn;
}
void OAIEffectiveDeployment::setIotJobArn(const QString &iot_job_arn) {
    m_iot_job_arn = iot_job_arn;
    m_iot_job_arn_isSet = true;
}

bool OAIEffectiveDeployment::is_iot_job_arn_Set() const{
    return m_iot_job_arn_isSet;
}

bool OAIEffectiveDeployment::is_iot_job_arn_Valid() const{
    return m_iot_job_arn_isValid;
}

QString OAIEffectiveDeployment::getDescription() const {
    return m_description;
}
void OAIEffectiveDeployment::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEffectiveDeployment::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEffectiveDeployment::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIEffectiveDeployment::getTargetArn() const {
    return m_target_arn;
}
void OAIEffectiveDeployment::setTargetArn(const QString &target_arn) {
    m_target_arn = target_arn;
    m_target_arn_isSet = true;
}

bool OAIEffectiveDeployment::is_target_arn_Set() const{
    return m_target_arn_isSet;
}

bool OAIEffectiveDeployment::is_target_arn_Valid() const{
    return m_target_arn_isValid;
}

OAIEffectiveDeploymentExecutionStatus OAIEffectiveDeployment::getCoreDeviceExecutionStatus() const {
    return m_core_device_execution_status;
}
void OAIEffectiveDeployment::setCoreDeviceExecutionStatus(const OAIEffectiveDeploymentExecutionStatus &core_device_execution_status) {
    m_core_device_execution_status = core_device_execution_status;
    m_core_device_execution_status_isSet = true;
}

bool OAIEffectiveDeployment::is_core_device_execution_status_Set() const{
    return m_core_device_execution_status_isSet;
}

bool OAIEffectiveDeployment::is_core_device_execution_status_Valid() const{
    return m_core_device_execution_status_isValid;
}

QString OAIEffectiveDeployment::getReason() const {
    return m_reason;
}
void OAIEffectiveDeployment::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIEffectiveDeployment::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIEffectiveDeployment::is_reason_Valid() const{
    return m_reason_isValid;
}

QDateTime OAIEffectiveDeployment::getCreationTimestamp() const {
    return m_creation_timestamp;
}
void OAIEffectiveDeployment::setCreationTimestamp(const QDateTime &creation_timestamp) {
    m_creation_timestamp = creation_timestamp;
    m_creation_timestamp_isSet = true;
}

bool OAIEffectiveDeployment::is_creation_timestamp_Set() const{
    return m_creation_timestamp_isSet;
}

bool OAIEffectiveDeployment::is_creation_timestamp_Valid() const{
    return m_creation_timestamp_isValid;
}

QDateTime OAIEffectiveDeployment::getModifiedTimestamp() const {
    return m_modified_timestamp;
}
void OAIEffectiveDeployment::setModifiedTimestamp(const QDateTime &modified_timestamp) {
    m_modified_timestamp = modified_timestamp;
    m_modified_timestamp_isSet = true;
}

bool OAIEffectiveDeployment::is_modified_timestamp_Set() const{
    return m_modified_timestamp_isSet;
}

bool OAIEffectiveDeployment::is_modified_timestamp_Valid() const{
    return m_modified_timestamp_isValid;
}

OAIEffectiveDeployment_statusDetails OAIEffectiveDeployment::getStatusDetails() const {
    return m_status_details;
}
void OAIEffectiveDeployment::setStatusDetails(const OAIEffectiveDeployment_statusDetails &status_details) {
    m_status_details = status_details;
    m_status_details_isSet = true;
}

bool OAIEffectiveDeployment::is_status_details_Set() const{
    return m_status_details_isSet;
}

bool OAIEffectiveDeployment::is_status_details_Valid() const{
    return m_status_details_isValid;
}

bool OAIEffectiveDeployment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deployment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iot_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iot_job_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_core_device_execution_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEffectiveDeployment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_deployment_id_isValid && m_deployment_name_isValid && m_target_arn_isValid && m_core_device_execution_status_isValid && m_creation_timestamp_isValid && m_modified_timestamp_isValid && true;
}

} // namespace OpenAPI
