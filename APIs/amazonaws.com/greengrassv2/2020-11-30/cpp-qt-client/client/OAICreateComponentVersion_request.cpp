/**
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateComponentVersion_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateComponentVersion_request::OAICreateComponentVersion_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateComponentVersion_request::OAICreateComponentVersion_request() {
    this->initializeModel();
}

OAICreateComponentVersion_request::~OAICreateComponentVersion_request() {}

void OAICreateComponentVersion_request::initializeModel() {

    m_inline_recipe_isSet = false;
    m_inline_recipe_isValid = false;

    m_lambda_function_isSet = false;
    m_lambda_function_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;
}

void OAICreateComponentVersion_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateComponentVersion_request::fromJsonObject(QJsonObject json) {

    m_inline_recipe_isValid = ::OpenAPI::fromJsonValue(m_inline_recipe, json[QString("inlineRecipe")]);
    m_inline_recipe_isSet = !json[QString("inlineRecipe")].isNull() && m_inline_recipe_isValid;

    m_lambda_function_isValid = ::OpenAPI::fromJsonValue(m_lambda_function, json[QString("lambdaFunction")]);
    m_lambda_function_isSet = !json[QString("lambdaFunction")].isNull() && m_lambda_function_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;
}

QString OAICreateComponentVersion_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateComponentVersion_request::asJsonObject() const {
    QJsonObject obj;
    if (m_inline_recipe_isSet) {
        obj.insert(QString("inlineRecipe"), ::OpenAPI::toJsonValue(m_inline_recipe));
    }
    if (m_lambda_function.isSet()) {
        obj.insert(QString("lambdaFunction"), ::OpenAPI::toJsonValue(m_lambda_function));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    return obj;
}

QString OAICreateComponentVersion_request::getInlineRecipe() const {
    return m_inline_recipe;
}
void OAICreateComponentVersion_request::setInlineRecipe(const QString &inline_recipe) {
    m_inline_recipe = inline_recipe;
    m_inline_recipe_isSet = true;
}

bool OAICreateComponentVersion_request::is_inline_recipe_Set() const{
    return m_inline_recipe_isSet;
}

bool OAICreateComponentVersion_request::is_inline_recipe_Valid() const{
    return m_inline_recipe_isValid;
}

OAICreateComponentVersion_request_lambdaFunction OAICreateComponentVersion_request::getLambdaFunction() const {
    return m_lambda_function;
}
void OAICreateComponentVersion_request::setLambdaFunction(const OAICreateComponentVersion_request_lambdaFunction &lambda_function) {
    m_lambda_function = lambda_function;
    m_lambda_function_isSet = true;
}

bool OAICreateComponentVersion_request::is_lambda_function_Set() const{
    return m_lambda_function_isSet;
}

bool OAICreateComponentVersion_request::is_lambda_function_Valid() const{
    return m_lambda_function_isValid;
}

QMap<QString, QString> OAICreateComponentVersion_request::getTags() const {
    return m_tags;
}
void OAICreateComponentVersion_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateComponentVersion_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateComponentVersion_request::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateComponentVersion_request::getClientToken() const {
    return m_client_token;
}
void OAICreateComponentVersion_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateComponentVersion_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateComponentVersion_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

bool OAICreateComponentVersion_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_inline_recipe_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_function.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateComponentVersion_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
