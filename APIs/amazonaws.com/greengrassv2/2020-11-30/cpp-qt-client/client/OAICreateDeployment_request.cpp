/**
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDeployment_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDeployment_request::OAICreateDeployment_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDeployment_request::OAICreateDeployment_request() {
    this->initializeModel();
}

OAICreateDeployment_request::~OAICreateDeployment_request() {}

void OAICreateDeployment_request::initializeModel() {

    m_target_arn_isSet = false;
    m_target_arn_isValid = false;

    m_deployment_name_isSet = false;
    m_deployment_name_isValid = false;

    m_components_isSet = false;
    m_components_isValid = false;

    m_iot_job_configuration_isSet = false;
    m_iot_job_configuration_isValid = false;

    m_deployment_policies_isSet = false;
    m_deployment_policies_isValid = false;

    m_parent_target_arn_isSet = false;
    m_parent_target_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;
}

void OAICreateDeployment_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDeployment_request::fromJsonObject(QJsonObject json) {

    m_target_arn_isValid = ::OpenAPI::fromJsonValue(m_target_arn, json[QString("targetArn")]);
    m_target_arn_isSet = !json[QString("targetArn")].isNull() && m_target_arn_isValid;

    m_deployment_name_isValid = ::OpenAPI::fromJsonValue(m_deployment_name, json[QString("deploymentName")]);
    m_deployment_name_isSet = !json[QString("deploymentName")].isNull() && m_deployment_name_isValid;

    m_components_isValid = ::OpenAPI::fromJsonValue(m_components, json[QString("components")]);
    m_components_isSet = !json[QString("components")].isNull() && m_components_isValid;

    m_iot_job_configuration_isValid = ::OpenAPI::fromJsonValue(m_iot_job_configuration, json[QString("iotJobConfiguration")]);
    m_iot_job_configuration_isSet = !json[QString("iotJobConfiguration")].isNull() && m_iot_job_configuration_isValid;

    m_deployment_policies_isValid = ::OpenAPI::fromJsonValue(m_deployment_policies, json[QString("deploymentPolicies")]);
    m_deployment_policies_isSet = !json[QString("deploymentPolicies")].isNull() && m_deployment_policies_isValid;

    m_parent_target_arn_isValid = ::OpenAPI::fromJsonValue(m_parent_target_arn, json[QString("parentTargetArn")]);
    m_parent_target_arn_isSet = !json[QString("parentTargetArn")].isNull() && m_parent_target_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;
}

QString OAICreateDeployment_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDeployment_request::asJsonObject() const {
    QJsonObject obj;
    if (m_target_arn_isSet) {
        obj.insert(QString("targetArn"), ::OpenAPI::toJsonValue(m_target_arn));
    }
    if (m_deployment_name_isSet) {
        obj.insert(QString("deploymentName"), ::OpenAPI::toJsonValue(m_deployment_name));
    }
    if (m_components.size() > 0) {
        obj.insert(QString("components"), ::OpenAPI::toJsonValue(m_components));
    }
    if (m_iot_job_configuration.isSet()) {
        obj.insert(QString("iotJobConfiguration"), ::OpenAPI::toJsonValue(m_iot_job_configuration));
    }
    if (m_deployment_policies.isSet()) {
        obj.insert(QString("deploymentPolicies"), ::OpenAPI::toJsonValue(m_deployment_policies));
    }
    if (m_parent_target_arn_isSet) {
        obj.insert(QString("parentTargetArn"), ::OpenAPI::toJsonValue(m_parent_target_arn));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    return obj;
}

QString OAICreateDeployment_request::getTargetArn() const {
    return m_target_arn;
}
void OAICreateDeployment_request::setTargetArn(const QString &target_arn) {
    m_target_arn = target_arn;
    m_target_arn_isSet = true;
}

bool OAICreateDeployment_request::is_target_arn_Set() const{
    return m_target_arn_isSet;
}

bool OAICreateDeployment_request::is_target_arn_Valid() const{
    return m_target_arn_isValid;
}

QString OAICreateDeployment_request::getDeploymentName() const {
    return m_deployment_name;
}
void OAICreateDeployment_request::setDeploymentName(const QString &deployment_name) {
    m_deployment_name = deployment_name;
    m_deployment_name_isSet = true;
}

bool OAICreateDeployment_request::is_deployment_name_Set() const{
    return m_deployment_name_isSet;
}

bool OAICreateDeployment_request::is_deployment_name_Valid() const{
    return m_deployment_name_isValid;
}

QMap<QString, OAIComponentDeploymentSpecification> OAICreateDeployment_request::getComponents() const {
    return m_components;
}
void OAICreateDeployment_request::setComponents(const QMap<QString, OAIComponentDeploymentSpecification> &components) {
    m_components = components;
    m_components_isSet = true;
}

bool OAICreateDeployment_request::is_components_Set() const{
    return m_components_isSet;
}

bool OAICreateDeployment_request::is_components_Valid() const{
    return m_components_isValid;
}

OAICreateDeployment_request_iotJobConfiguration OAICreateDeployment_request::getIotJobConfiguration() const {
    return m_iot_job_configuration;
}
void OAICreateDeployment_request::setIotJobConfiguration(const OAICreateDeployment_request_iotJobConfiguration &iot_job_configuration) {
    m_iot_job_configuration = iot_job_configuration;
    m_iot_job_configuration_isSet = true;
}

bool OAICreateDeployment_request::is_iot_job_configuration_Set() const{
    return m_iot_job_configuration_isSet;
}

bool OAICreateDeployment_request::is_iot_job_configuration_Valid() const{
    return m_iot_job_configuration_isValid;
}

OAICreateDeployment_request_deploymentPolicies OAICreateDeployment_request::getDeploymentPolicies() const {
    return m_deployment_policies;
}
void OAICreateDeployment_request::setDeploymentPolicies(const OAICreateDeployment_request_deploymentPolicies &deployment_policies) {
    m_deployment_policies = deployment_policies;
    m_deployment_policies_isSet = true;
}

bool OAICreateDeployment_request::is_deployment_policies_Set() const{
    return m_deployment_policies_isSet;
}

bool OAICreateDeployment_request::is_deployment_policies_Valid() const{
    return m_deployment_policies_isValid;
}

QString OAICreateDeployment_request::getParentTargetArn() const {
    return m_parent_target_arn;
}
void OAICreateDeployment_request::setParentTargetArn(const QString &parent_target_arn) {
    m_parent_target_arn = parent_target_arn;
    m_parent_target_arn_isSet = true;
}

bool OAICreateDeployment_request::is_parent_target_arn_Set() const{
    return m_parent_target_arn_isSet;
}

bool OAICreateDeployment_request::is_parent_target_arn_Valid() const{
    return m_parent_target_arn_isValid;
}

QMap<QString, QString> OAICreateDeployment_request::getTags() const {
    return m_tags;
}
void OAICreateDeployment_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateDeployment_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateDeployment_request::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateDeployment_request::getClientToken() const {
    return m_client_token;
}
void OAICreateDeployment_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateDeployment_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateDeployment_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

bool OAICreateDeployment_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_components.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_iot_job_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_policies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_target_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDeployment_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_target_arn_isValid && true;
}

} // namespace OpenAPI
