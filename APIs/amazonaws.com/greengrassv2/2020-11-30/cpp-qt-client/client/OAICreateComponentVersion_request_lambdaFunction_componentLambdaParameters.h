/**
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateComponentVersion_request_lambdaFunction_componentLambdaParameters.h
 *
 * 
 */

#ifndef OAICreateComponentVersion_request_lambdaFunction_componentLambdaParameters_H
#define OAICreateComponentVersion_request_lambdaFunction_componentLambdaParameters_H

#include <QJsonObject>

#include "OAILambdaExecutionParameters_linuxProcessParams.h"
#include "OAILambdaInputPayloadEncodingType.h"
#include <QList>
#include <QMap>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILambdaExecutionParameters_linuxProcessParams;

class OAICreateComponentVersion_request_lambdaFunction_componentLambdaParameters : public OAIObject {
public:
    OAICreateComponentVersion_request_lambdaFunction_componentLambdaParameters();
    OAICreateComponentVersion_request_lambdaFunction_componentLambdaParameters(QString json);
    ~OAICreateComponentVersion_request_lambdaFunction_componentLambdaParameters() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getEventSources() const;
    void setEventSources(const QList &event_sources);
    bool is_event_sources_Set() const;
    bool is_event_sources_Valid() const;

    qint32 getMaxQueueSize() const;
    void setMaxQueueSize(const qint32 &max_queue_size);
    bool is_max_queue_size_Set() const;
    bool is_max_queue_size_Valid() const;

    qint32 getMaxInstancesCount() const;
    void setMaxInstancesCount(const qint32 &max_instances_count);
    bool is_max_instances_count_Set() const;
    bool is_max_instances_count_Valid() const;

    qint32 getMaxIdleTimeInSeconds() const;
    void setMaxIdleTimeInSeconds(const qint32 &max_idle_time_in_seconds);
    bool is_max_idle_time_in_seconds_Set() const;
    bool is_max_idle_time_in_seconds_Valid() const;

    qint32 getTimeoutInSeconds() const;
    void setTimeoutInSeconds(const qint32 &timeout_in_seconds);
    bool is_timeout_in_seconds_Set() const;
    bool is_timeout_in_seconds_Valid() const;

    qint32 getStatusTimeoutInSeconds() const;
    void setStatusTimeoutInSeconds(const qint32 &status_timeout_in_seconds);
    bool is_status_timeout_in_seconds_Set() const;
    bool is_status_timeout_in_seconds_Valid() const;

    bool getPinned() const;
    void setPinned(const bool &pinned);
    bool is_pinned_Set() const;
    bool is_pinned_Valid() const;

    OAILambdaInputPayloadEncodingType getInputPayloadEncodingType() const;
    void setInputPayloadEncodingType(const OAILambdaInputPayloadEncodingType &input_payload_encoding_type);
    bool is_input_payload_encoding_type_Set() const;
    bool is_input_payload_encoding_type_Valid() const;

    QList getExecArgs() const;
    void setExecArgs(const QList &exec_args);
    bool is_exec_args_Set() const;
    bool is_exec_args_Valid() const;

    QMap getEnvironmentVariables() const;
    void setEnvironmentVariables(const QMap &environment_variables);
    bool is_environment_variables_Set() const;
    bool is_environment_variables_Valid() const;

    OAILambdaExecutionParameters_linuxProcessParams getLinuxProcessParams() const;
    void setLinuxProcessParams(const OAILambdaExecutionParameters_linuxProcessParams &linux_process_params);
    bool is_linux_process_params_Set() const;
    bool is_linux_process_params_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_event_sources;
    bool m_event_sources_isSet;
    bool m_event_sources_isValid;

    qint32 m_max_queue_size;
    bool m_max_queue_size_isSet;
    bool m_max_queue_size_isValid;

    qint32 m_max_instances_count;
    bool m_max_instances_count_isSet;
    bool m_max_instances_count_isValid;

    qint32 m_max_idle_time_in_seconds;
    bool m_max_idle_time_in_seconds_isSet;
    bool m_max_idle_time_in_seconds_isValid;

    qint32 m_timeout_in_seconds;
    bool m_timeout_in_seconds_isSet;
    bool m_timeout_in_seconds_isValid;

    qint32 m_status_timeout_in_seconds;
    bool m_status_timeout_in_seconds_isSet;
    bool m_status_timeout_in_seconds_isValid;

    bool m_pinned;
    bool m_pinned_isSet;
    bool m_pinned_isValid;

    OAILambdaInputPayloadEncodingType m_input_payload_encoding_type;
    bool m_input_payload_encoding_type_isSet;
    bool m_input_payload_encoding_type_isValid;

    QList m_exec_args;
    bool m_exec_args_isSet;
    bool m_exec_args_isValid;

    QMap m_environment_variables;
    bool m_environment_variables_isSet;
    bool m_environment_variables_isValid;

    OAILambdaExecutionParameters_linuxProcessParams m_linux_process_params;
    bool m_linux_process_params_isSet;
    bool m_linux_process_params_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateComponentVersion_request_lambdaFunction_componentLambdaParameters)

#endif // OAICreateComponentVersion_request_lambdaFunction_componentLambdaParameters_H
