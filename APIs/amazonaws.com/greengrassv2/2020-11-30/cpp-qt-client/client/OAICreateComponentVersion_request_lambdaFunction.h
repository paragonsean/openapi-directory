/**
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateComponentVersion_request_lambdaFunction.h
 *
 * Contains information about an Lambda function to import to create a component.
 */

#ifndef OAICreateComponentVersion_request_lambdaFunction_H
#define OAICreateComponentVersion_request_lambdaFunction_H

#include <QJsonObject>

#include "OAICreateComponentVersion_request_lambdaFunction_componentLambdaParameters.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateComponentVersion_request_lambdaFunction_componentLambdaParameters;

class OAICreateComponentVersion_request_lambdaFunction : public OAIObject {
public:
    OAICreateComponentVersion_request_lambdaFunction();
    OAICreateComponentVersion_request_lambdaFunction(QString json);
    ~OAICreateComponentVersion_request_lambdaFunction() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getLambdaArn() const;
    void setLambdaArn(const QString &lambda_arn);
    bool is_lambda_arn_Set() const;
    bool is_lambda_arn_Valid() const;

    QString getComponentName() const;
    void setComponentName(const QString &component_name);
    bool is_component_name_Set() const;
    bool is_component_name_Valid() const;

    QString getComponentVersion() const;
    void setComponentVersion(const QString &component_version);
    bool is_component_version_Set() const;
    bool is_component_version_Valid() const;

    QList getComponentPlatforms() const;
    void setComponentPlatforms(const QList &component_platforms);
    bool is_component_platforms_Set() const;
    bool is_component_platforms_Valid() const;

    QMap getComponentDependencies() const;
    void setComponentDependencies(const QMap &component_dependencies);
    bool is_component_dependencies_Set() const;
    bool is_component_dependencies_Valid() const;

    OAICreateComponentVersion_request_lambdaFunction_componentLambdaParameters getComponentLambdaParameters() const;
    void setComponentLambdaParameters(const OAICreateComponentVersion_request_lambdaFunction_componentLambdaParameters &component_lambda_parameters);
    bool is_component_lambda_parameters_Set() const;
    bool is_component_lambda_parameters_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_lambda_arn;
    bool m_lambda_arn_isSet;
    bool m_lambda_arn_isValid;

    QString m_component_name;
    bool m_component_name_isSet;
    bool m_component_name_isValid;

    QString m_component_version;
    bool m_component_version_isSet;
    bool m_component_version_isValid;

    QList m_component_platforms;
    bool m_component_platforms_isSet;
    bool m_component_platforms_isValid;

    QMap m_component_dependencies;
    bool m_component_dependencies_isSet;
    bool m_component_dependencies_isValid;

    OAICreateComponentVersion_request_lambdaFunction_componentLambdaParameters m_component_lambda_parameters;
    bool m_component_lambda_parameters_isSet;
    bool m_component_lambda_parameters_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateComponentVersion_request_lambdaFunction)

#endif // OAICreateComponentVersion_request_lambdaFunction_H
