/**
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComponent_latestVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComponent_latestVersion::OAIComponent_latestVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComponent_latestVersion::OAIComponent_latestVersion() {
    this->initializeModel();
}

OAIComponent_latestVersion::~OAIComponent_latestVersion() {}

void OAIComponent_latestVersion::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_component_version_isSet = false;
    m_component_version_isValid = false;

    m_creation_timestamp_isSet = false;
    m_creation_timestamp_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_publisher_isSet = false;
    m_publisher_isValid = false;

    m_platforms_isSet = false;
    m_platforms_isValid = false;
}

void OAIComponent_latestVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComponent_latestVersion::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_component_version_isValid = ::OpenAPI::fromJsonValue(m_component_version, json[QString("componentVersion")]);
    m_component_version_isSet = !json[QString("componentVersion")].isNull() && m_component_version_isValid;

    m_creation_timestamp_isValid = ::OpenAPI::fromJsonValue(m_creation_timestamp, json[QString("creationTimestamp")]);
    m_creation_timestamp_isSet = !json[QString("creationTimestamp")].isNull() && m_creation_timestamp_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_publisher_isValid = ::OpenAPI::fromJsonValue(m_publisher, json[QString("publisher")]);
    m_publisher_isSet = !json[QString("publisher")].isNull() && m_publisher_isValid;

    m_platforms_isValid = ::OpenAPI::fromJsonValue(m_platforms, json[QString("platforms")]);
    m_platforms_isSet = !json[QString("platforms")].isNull() && m_platforms_isValid;
}

QString OAIComponent_latestVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComponent_latestVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_component_version_isSet) {
        obj.insert(QString("componentVersion"), ::OpenAPI::toJsonValue(m_component_version));
    }
    if (m_creation_timestamp_isSet) {
        obj.insert(QString("creationTimestamp"), ::OpenAPI::toJsonValue(m_creation_timestamp));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_publisher_isSet) {
        obj.insert(QString("publisher"), ::OpenAPI::toJsonValue(m_publisher));
    }
    if (m_platforms.isSet()) {
        obj.insert(QString("platforms"), ::OpenAPI::toJsonValue(m_platforms));
    }
    return obj;
}

QString OAIComponent_latestVersion::getArn() const {
    return m_arn;
}
void OAIComponent_latestVersion::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIComponent_latestVersion::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIComponent_latestVersion::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIComponent_latestVersion::getComponentVersion() const {
    return m_component_version;
}
void OAIComponent_latestVersion::setComponentVersion(const QString &component_version) {
    m_component_version = component_version;
    m_component_version_isSet = true;
}

bool OAIComponent_latestVersion::is_component_version_Set() const{
    return m_component_version_isSet;
}

bool OAIComponent_latestVersion::is_component_version_Valid() const{
    return m_component_version_isValid;
}

QDateTime OAIComponent_latestVersion::getCreationTimestamp() const {
    return m_creation_timestamp;
}
void OAIComponent_latestVersion::setCreationTimestamp(const QDateTime &creation_timestamp) {
    m_creation_timestamp = creation_timestamp;
    m_creation_timestamp_isSet = true;
}

bool OAIComponent_latestVersion::is_creation_timestamp_Set() const{
    return m_creation_timestamp_isSet;
}

bool OAIComponent_latestVersion::is_creation_timestamp_Valid() const{
    return m_creation_timestamp_isValid;
}

QString OAIComponent_latestVersion::getDescription() const {
    return m_description;
}
void OAIComponent_latestVersion::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIComponent_latestVersion::is_description_Set() const{
    return m_description_isSet;
}

bool OAIComponent_latestVersion::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIComponent_latestVersion::getPublisher() const {
    return m_publisher;
}
void OAIComponent_latestVersion::setPublisher(const QString &publisher) {
    m_publisher = publisher;
    m_publisher_isSet = true;
}

bool OAIComponent_latestVersion::is_publisher_Set() const{
    return m_publisher_isSet;
}

bool OAIComponent_latestVersion::is_publisher_Valid() const{
    return m_publisher_isValid;
}

QList OAIComponent_latestVersion::getPlatforms() const {
    return m_platforms;
}
void OAIComponent_latestVersion::setPlatforms(const QList &platforms) {
    m_platforms = platforms;
    m_platforms_isSet = true;
}

bool OAIComponent_latestVersion::is_platforms_Set() const{
    return m_platforms_isSet;
}

bool OAIComponent_latestVersion::is_platforms_Valid() const{
    return m_platforms_isValid;
}

bool OAIComponent_latestVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platforms.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComponent_latestVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
