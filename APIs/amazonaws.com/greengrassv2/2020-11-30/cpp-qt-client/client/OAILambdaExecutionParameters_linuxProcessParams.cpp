/**
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILambdaExecutionParameters_linuxProcessParams.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILambdaExecutionParameters_linuxProcessParams::OAILambdaExecutionParameters_linuxProcessParams(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILambdaExecutionParameters_linuxProcessParams::OAILambdaExecutionParameters_linuxProcessParams() {
    this->initializeModel();
}

OAILambdaExecutionParameters_linuxProcessParams::~OAILambdaExecutionParameters_linuxProcessParams() {}

void OAILambdaExecutionParameters_linuxProcessParams::initializeModel() {

    m_isolation_mode_isSet = false;
    m_isolation_mode_isValid = false;

    m_container_params_isSet = false;
    m_container_params_isValid = false;
}

void OAILambdaExecutionParameters_linuxProcessParams::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILambdaExecutionParameters_linuxProcessParams::fromJsonObject(QJsonObject json) {

    m_isolation_mode_isValid = ::OpenAPI::fromJsonValue(m_isolation_mode, json[QString("isolationMode")]);
    m_isolation_mode_isSet = !json[QString("isolationMode")].isNull() && m_isolation_mode_isValid;

    m_container_params_isValid = ::OpenAPI::fromJsonValue(m_container_params, json[QString("containerParams")]);
    m_container_params_isSet = !json[QString("containerParams")].isNull() && m_container_params_isValid;
}

QString OAILambdaExecutionParameters_linuxProcessParams::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILambdaExecutionParameters_linuxProcessParams::asJsonObject() const {
    QJsonObject obj;
    if (m_isolation_mode.isSet()) {
        obj.insert(QString("isolationMode"), ::OpenAPI::toJsonValue(m_isolation_mode));
    }
    if (m_container_params.isSet()) {
        obj.insert(QString("containerParams"), ::OpenAPI::toJsonValue(m_container_params));
    }
    return obj;
}

OAILambdaIsolationMode OAILambdaExecutionParameters_linuxProcessParams::getIsolationMode() const {
    return m_isolation_mode;
}
void OAILambdaExecutionParameters_linuxProcessParams::setIsolationMode(const OAILambdaIsolationMode &isolation_mode) {
    m_isolation_mode = isolation_mode;
    m_isolation_mode_isSet = true;
}

bool OAILambdaExecutionParameters_linuxProcessParams::is_isolation_mode_Set() const{
    return m_isolation_mode_isSet;
}

bool OAILambdaExecutionParameters_linuxProcessParams::is_isolation_mode_Valid() const{
    return m_isolation_mode_isValid;
}

OAILambdaLinuxProcessParams_containerParams OAILambdaExecutionParameters_linuxProcessParams::getContainerParams() const {
    return m_container_params;
}
void OAILambdaExecutionParameters_linuxProcessParams::setContainerParams(const OAILambdaLinuxProcessParams_containerParams &container_params) {
    m_container_params = container_params;
    m_container_params_isSet = true;
}

bool OAILambdaExecutionParameters_linuxProcessParams::is_container_params_Set() const{
    return m_container_params_isSet;
}

bool OAILambdaExecutionParameters_linuxProcessParams::is_container_params_Valid() const{
    return m_container_params_isValid;
}

bool OAILambdaExecutionParameters_linuxProcessParams::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_isolation_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_params.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILambdaExecutionParameters_linuxProcessParams::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
