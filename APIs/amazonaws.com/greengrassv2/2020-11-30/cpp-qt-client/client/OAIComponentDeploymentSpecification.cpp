/**
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComponentDeploymentSpecification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComponentDeploymentSpecification::OAIComponentDeploymentSpecification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComponentDeploymentSpecification::OAIComponentDeploymentSpecification() {
    this->initializeModel();
}

OAIComponentDeploymentSpecification::~OAIComponentDeploymentSpecification() {}

void OAIComponentDeploymentSpecification::initializeModel() {

    m_component_version_isSet = false;
    m_component_version_isValid = false;

    m_configuration_update_isSet = false;
    m_configuration_update_isValid = false;

    m_run_with_isSet = false;
    m_run_with_isValid = false;
}

void OAIComponentDeploymentSpecification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComponentDeploymentSpecification::fromJsonObject(QJsonObject json) {

    m_component_version_isValid = ::OpenAPI::fromJsonValue(m_component_version, json[QString("componentVersion")]);
    m_component_version_isSet = !json[QString("componentVersion")].isNull() && m_component_version_isValid;

    m_configuration_update_isValid = ::OpenAPI::fromJsonValue(m_configuration_update, json[QString("configurationUpdate")]);
    m_configuration_update_isSet = !json[QString("configurationUpdate")].isNull() && m_configuration_update_isValid;

    m_run_with_isValid = ::OpenAPI::fromJsonValue(m_run_with, json[QString("runWith")]);
    m_run_with_isSet = !json[QString("runWith")].isNull() && m_run_with_isValid;
}

QString OAIComponentDeploymentSpecification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComponentDeploymentSpecification::asJsonObject() const {
    QJsonObject obj;
    if (m_component_version_isSet) {
        obj.insert(QString("componentVersion"), ::OpenAPI::toJsonValue(m_component_version));
    }
    if (m_configuration_update.isSet()) {
        obj.insert(QString("configurationUpdate"), ::OpenAPI::toJsonValue(m_configuration_update));
    }
    if (m_run_with.isSet()) {
        obj.insert(QString("runWith"), ::OpenAPI::toJsonValue(m_run_with));
    }
    return obj;
}

QString OAIComponentDeploymentSpecification::getComponentVersion() const {
    return m_component_version;
}
void OAIComponentDeploymentSpecification::setComponentVersion(const QString &component_version) {
    m_component_version = component_version;
    m_component_version_isSet = true;
}

bool OAIComponentDeploymentSpecification::is_component_version_Set() const{
    return m_component_version_isSet;
}

bool OAIComponentDeploymentSpecification::is_component_version_Valid() const{
    return m_component_version_isValid;
}

OAIComponentDeploymentSpecification_configurationUpdate OAIComponentDeploymentSpecification::getConfigurationUpdate() const {
    return m_configuration_update;
}
void OAIComponentDeploymentSpecification::setConfigurationUpdate(const OAIComponentDeploymentSpecification_configurationUpdate &configuration_update) {
    m_configuration_update = configuration_update;
    m_configuration_update_isSet = true;
}

bool OAIComponentDeploymentSpecification::is_configuration_update_Set() const{
    return m_configuration_update_isSet;
}

bool OAIComponentDeploymentSpecification::is_configuration_update_Valid() const{
    return m_configuration_update_isValid;
}

OAIComponentDeploymentSpecification_runWith OAIComponentDeploymentSpecification::getRunWith() const {
    return m_run_with;
}
void OAIComponentDeploymentSpecification::setRunWith(const OAIComponentDeploymentSpecification_runWith &run_with) {
    m_run_with = run_with;
    m_run_with_isSet = true;
}

bool OAIComponentDeploymentSpecification::is_run_with_Set() const{
    return m_run_with_isSet;
}

bool OAIComponentDeploymentSpecification::is_run_with_Valid() const{
    return m_run_with_isValid;
}

bool OAIComponentDeploymentSpecification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_component_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_with.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComponentDeploymentSpecification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
