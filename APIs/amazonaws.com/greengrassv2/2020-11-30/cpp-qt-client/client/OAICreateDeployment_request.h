/**
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateDeployment_request.h
 *
 * 
 */

#ifndef OAICreateDeployment_request_H
#define OAICreateDeployment_request_H

#include <QJsonObject>

#include "OAIComponentDeploymentSpecification.h"
#include "OAICreateDeployment_request_deploymentPolicies.h"
#include "OAICreateDeployment_request_iotJobConfiguration.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIComponentDeploymentSpecification;
class OAICreateDeployment_request_iotJobConfiguration;
class OAICreateDeployment_request_deploymentPolicies;

class OAICreateDeployment_request : public OAIObject {
public:
    OAICreateDeployment_request();
    OAICreateDeployment_request(QString json);
    ~OAICreateDeployment_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getTargetArn() const;
    void setTargetArn(const QString &target_arn);
    bool is_target_arn_Set() const;
    bool is_target_arn_Valid() const;

    QString getDeploymentName() const;
    void setDeploymentName(const QString &deployment_name);
    bool is_deployment_name_Set() const;
    bool is_deployment_name_Valid() const;

    QMap<QString, OAIComponentDeploymentSpecification> getComponents() const;
    void setComponents(const QMap<QString, OAIComponentDeploymentSpecification> &components);
    bool is_components_Set() const;
    bool is_components_Valid() const;

    OAICreateDeployment_request_iotJobConfiguration getIotJobConfiguration() const;
    void setIotJobConfiguration(const OAICreateDeployment_request_iotJobConfiguration &iot_job_configuration);
    bool is_iot_job_configuration_Set() const;
    bool is_iot_job_configuration_Valid() const;

    OAICreateDeployment_request_deploymentPolicies getDeploymentPolicies() const;
    void setDeploymentPolicies(const OAICreateDeployment_request_deploymentPolicies &deployment_policies);
    bool is_deployment_policies_Set() const;
    bool is_deployment_policies_Valid() const;

    QString getParentTargetArn() const;
    void setParentTargetArn(const QString &parent_target_arn);
    bool is_parent_target_arn_Set() const;
    bool is_parent_target_arn_Valid() const;

    QMap<QString, QString> getTags() const;
    void setTags(const QMap<QString, QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getClientToken() const;
    void setClientToken(const QString &client_token);
    bool is_client_token_Set() const;
    bool is_client_token_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_target_arn;
    bool m_target_arn_isSet;
    bool m_target_arn_isValid;

    QString m_deployment_name;
    bool m_deployment_name_isSet;
    bool m_deployment_name_isValid;

    QMap<QString, OAIComponentDeploymentSpecification> m_components;
    bool m_components_isSet;
    bool m_components_isValid;

    OAICreateDeployment_request_iotJobConfiguration m_iot_job_configuration;
    bool m_iot_job_configuration_isSet;
    bool m_iot_job_configuration_isValid;

    OAICreateDeployment_request_deploymentPolicies m_deployment_policies;
    bool m_deployment_policies_isSet;
    bool m_deployment_policies_isValid;

    QString m_parent_target_arn;
    bool m_parent_target_arn_isSet;
    bool m_parent_target_arn_isValid;

    QMap<QString, QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_client_token;
    bool m_client_token_isSet;
    bool m_client_token_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateDeployment_request)

#endif // OAICreateDeployment_request_H
