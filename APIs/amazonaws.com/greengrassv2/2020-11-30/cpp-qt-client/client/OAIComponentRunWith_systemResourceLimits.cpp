/**
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComponentRunWith_systemResourceLimits.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComponentRunWith_systemResourceLimits::OAIComponentRunWith_systemResourceLimits(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComponentRunWith_systemResourceLimits::OAIComponentRunWith_systemResourceLimits() {
    this->initializeModel();
}

OAIComponentRunWith_systemResourceLimits::~OAIComponentRunWith_systemResourceLimits() {}

void OAIComponentRunWith_systemResourceLimits::initializeModel() {

    m_memory_isSet = false;
    m_memory_isValid = false;

    m_cpus_isSet = false;
    m_cpus_isValid = false;
}

void OAIComponentRunWith_systemResourceLimits::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComponentRunWith_systemResourceLimits::fromJsonObject(QJsonObject json) {

    m_memory_isValid = ::OpenAPI::fromJsonValue(m_memory, json[QString("memory")]);
    m_memory_isSet = !json[QString("memory")].isNull() && m_memory_isValid;

    m_cpus_isValid = ::OpenAPI::fromJsonValue(m_cpus, json[QString("cpus")]);
    m_cpus_isSet = !json[QString("cpus")].isNull() && m_cpus_isValid;
}

QString OAIComponentRunWith_systemResourceLimits::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComponentRunWith_systemResourceLimits::asJsonObject() const {
    QJsonObject obj;
    if (m_memory_isSet) {
        obj.insert(QString("memory"), ::OpenAPI::toJsonValue(m_memory));
    }
    if (m_cpus_isSet) {
        obj.insert(QString("cpus"), ::OpenAPI::toJsonValue(m_cpus));
    }
    return obj;
}

qint32 OAIComponentRunWith_systemResourceLimits::getMemory() const {
    return m_memory;
}
void OAIComponentRunWith_systemResourceLimits::setMemory(const qint32 &memory) {
    m_memory = memory;
    m_memory_isSet = true;
}

bool OAIComponentRunWith_systemResourceLimits::is_memory_Set() const{
    return m_memory_isSet;
}

bool OAIComponentRunWith_systemResourceLimits::is_memory_Valid() const{
    return m_memory_isValid;
}

double OAIComponentRunWith_systemResourceLimits::getCpus() const {
    return m_cpus;
}
void OAIComponentRunWith_systemResourceLimits::setCpus(const double &cpus) {
    m_cpus = cpus;
    m_cpus_isSet = true;
}

bool OAIComponentRunWith_systemResourceLimits::is_cpus_Set() const{
    return m_cpus_isSet;
}

bool OAIComponentRunWith_systemResourceLimits::is_cpus_Valid() const{
    return m_cpus_isValid;
}

bool OAIComponentRunWith_systemResourceLimits::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_memory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpus_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComponentRunWith_systemResourceLimits::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
