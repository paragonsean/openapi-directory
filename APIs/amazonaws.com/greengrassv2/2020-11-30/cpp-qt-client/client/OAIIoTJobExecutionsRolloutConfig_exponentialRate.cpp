/**
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIoTJobExecutionsRolloutConfig_exponentialRate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIoTJobExecutionsRolloutConfig_exponentialRate::OAIIoTJobExecutionsRolloutConfig_exponentialRate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIoTJobExecutionsRolloutConfig_exponentialRate::OAIIoTJobExecutionsRolloutConfig_exponentialRate() {
    this->initializeModel();
}

OAIIoTJobExecutionsRolloutConfig_exponentialRate::~OAIIoTJobExecutionsRolloutConfig_exponentialRate() {}

void OAIIoTJobExecutionsRolloutConfig_exponentialRate::initializeModel() {

    m_base_rate_per_minute_isSet = false;
    m_base_rate_per_minute_isValid = false;

    m_increment_factor_isSet = false;
    m_increment_factor_isValid = false;

    m_rate_increase_criteria_isSet = false;
    m_rate_increase_criteria_isValid = false;
}

void OAIIoTJobExecutionsRolloutConfig_exponentialRate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIoTJobExecutionsRolloutConfig_exponentialRate::fromJsonObject(QJsonObject json) {

    m_base_rate_per_minute_isValid = ::OpenAPI::fromJsonValue(m_base_rate_per_minute, json[QString("baseRatePerMinute")]);
    m_base_rate_per_minute_isSet = !json[QString("baseRatePerMinute")].isNull() && m_base_rate_per_minute_isValid;

    m_increment_factor_isValid = ::OpenAPI::fromJsonValue(m_increment_factor, json[QString("incrementFactor")]);
    m_increment_factor_isSet = !json[QString("incrementFactor")].isNull() && m_increment_factor_isValid;

    m_rate_increase_criteria_isValid = ::OpenAPI::fromJsonValue(m_rate_increase_criteria, json[QString("rateIncreaseCriteria")]);
    m_rate_increase_criteria_isSet = !json[QString("rateIncreaseCriteria")].isNull() && m_rate_increase_criteria_isValid;
}

QString OAIIoTJobExecutionsRolloutConfig_exponentialRate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIoTJobExecutionsRolloutConfig_exponentialRate::asJsonObject() const {
    QJsonObject obj;
    if (m_base_rate_per_minute_isSet) {
        obj.insert(QString("baseRatePerMinute"), ::OpenAPI::toJsonValue(m_base_rate_per_minute));
    }
    if (m_increment_factor_isSet) {
        obj.insert(QString("incrementFactor"), ::OpenAPI::toJsonValue(m_increment_factor));
    }
    if (m_rate_increase_criteria.isSet()) {
        obj.insert(QString("rateIncreaseCriteria"), ::OpenAPI::toJsonValue(m_rate_increase_criteria));
    }
    return obj;
}

qint32 OAIIoTJobExecutionsRolloutConfig_exponentialRate::getBaseRatePerMinute() const {
    return m_base_rate_per_minute;
}
void OAIIoTJobExecutionsRolloutConfig_exponentialRate::setBaseRatePerMinute(const qint32 &base_rate_per_minute) {
    m_base_rate_per_minute = base_rate_per_minute;
    m_base_rate_per_minute_isSet = true;
}

bool OAIIoTJobExecutionsRolloutConfig_exponentialRate::is_base_rate_per_minute_Set() const{
    return m_base_rate_per_minute_isSet;
}

bool OAIIoTJobExecutionsRolloutConfig_exponentialRate::is_base_rate_per_minute_Valid() const{
    return m_base_rate_per_minute_isValid;
}

double OAIIoTJobExecutionsRolloutConfig_exponentialRate::getIncrementFactor() const {
    return m_increment_factor;
}
void OAIIoTJobExecutionsRolloutConfig_exponentialRate::setIncrementFactor(const double &increment_factor) {
    m_increment_factor = increment_factor;
    m_increment_factor_isSet = true;
}

bool OAIIoTJobExecutionsRolloutConfig_exponentialRate::is_increment_factor_Set() const{
    return m_increment_factor_isSet;
}

bool OAIIoTJobExecutionsRolloutConfig_exponentialRate::is_increment_factor_Valid() const{
    return m_increment_factor_isValid;
}

OAIIoTJobExponentialRolloutRate_rateIncreaseCriteria OAIIoTJobExecutionsRolloutConfig_exponentialRate::getRateIncreaseCriteria() const {
    return m_rate_increase_criteria;
}
void OAIIoTJobExecutionsRolloutConfig_exponentialRate::setRateIncreaseCriteria(const OAIIoTJobExponentialRolloutRate_rateIncreaseCriteria &rate_increase_criteria) {
    m_rate_increase_criteria = rate_increase_criteria;
    m_rate_increase_criteria_isSet = true;
}

bool OAIIoTJobExecutionsRolloutConfig_exponentialRate::is_rate_increase_criteria_Set() const{
    return m_rate_increase_criteria_isSet;
}

bool OAIIoTJobExecutionsRolloutConfig_exponentialRate::is_rate_increase_criteria_Valid() const{
    return m_rate_increase_criteria_isValid;
}

bool OAIIoTJobExecutionsRolloutConfig_exponentialRate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_rate_per_minute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_increment_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_increase_criteria.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIoTJobExecutionsRolloutConfig_exponentialRate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_base_rate_per_minute_isValid && m_increment_factor_isValid && m_rate_increase_criteria_isValid && true;
}

} // namespace OpenAPI
