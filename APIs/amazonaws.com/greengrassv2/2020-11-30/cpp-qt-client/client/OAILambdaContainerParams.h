/**
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILambdaContainerParams.h
 *
 * Contains information about a container in which Lambda functions run on Greengrass core devices.
 */

#ifndef OAILambdaContainerParams_H
#define OAILambdaContainerParams_H

#include <QJsonObject>

#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAILambdaContainerParams : public OAIObject {
public:
    OAILambdaContainerParams();
    OAILambdaContainerParams(QString json);
    ~OAILambdaContainerParams() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getMemorySizeInKb() const;
    void setMemorySizeInKb(const qint32 &memory_size_in_kb);
    bool is_memory_size_in_kb_Set() const;
    bool is_memory_size_in_kb_Valid() const;

    bool getMountRoSysfs() const;
    void setMountRoSysfs(const bool &mount_ro_sysfs);
    bool is_mount_ro_sysfs_Set() const;
    bool is_mount_ro_sysfs_Valid() const;

    QList getVolumes() const;
    void setVolumes(const QList &volumes);
    bool is_volumes_Set() const;
    bool is_volumes_Valid() const;

    QList getDevices() const;
    void setDevices(const QList &devices);
    bool is_devices_Set() const;
    bool is_devices_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_memory_size_in_kb;
    bool m_memory_size_in_kb_isSet;
    bool m_memory_size_in_kb_isValid;

    bool m_mount_ro_sysfs;
    bool m_mount_ro_sysfs_isSet;
    bool m_mount_ro_sysfs_isValid;

    QList m_volumes;
    bool m_volumes_isSet;
    bool m_volumes_isValid;

    QList m_devices;
    bool m_devices_isSet;
    bool m_devices_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILambdaContainerParams)

#endif // OAILambdaContainerParams_H
