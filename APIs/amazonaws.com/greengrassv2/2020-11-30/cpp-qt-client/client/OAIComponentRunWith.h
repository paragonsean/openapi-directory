/**
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIComponentRunWith.h
 *
 * Contains information system user and group that the IoT Greengrass Core software uses to run component processes on the core device. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-greengrass-core-v2.html#configure-component-user\&quot;&gt;Configure the user and group that run components&lt;/a&gt; in the &lt;i&gt;IoT Greengrass V2 Developer Guide&lt;/i&gt;.
 */

#ifndef OAIComponentRunWith_H
#define OAIComponentRunWith_H

#include <QJsonObject>

#include "OAIComponentRunWith_systemResourceLimits.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIComponentRunWith_systemResourceLimits;

class OAIComponentRunWith : public OAIObject {
public:
    OAIComponentRunWith();
    OAIComponentRunWith(QString json);
    ~OAIComponentRunWith() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getPosixUser() const;
    void setPosixUser(const QString &posix_user);
    bool is_posix_user_Set() const;
    bool is_posix_user_Valid() const;

    OAIComponentRunWith_systemResourceLimits getSystemResourceLimits() const;
    void setSystemResourceLimits(const OAIComponentRunWith_systemResourceLimits &system_resource_limits);
    bool is_system_resource_limits_Set() const;
    bool is_system_resource_limits_Valid() const;

    QString getWindowsUser() const;
    void setWindowsUser(const QString &windows_user);
    bool is_windows_user_Set() const;
    bool is_windows_user_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_posix_user;
    bool m_posix_user_isSet;
    bool m_posix_user_isValid;

    OAIComponentRunWith_systemResourceLimits m_system_resource_limits;
    bool m_system_resource_limits_isSet;
    bool m_system_resource_limits_isValid;

    QString m_windows_user;
    bool m_windows_user_isSet;
    bool m_windows_user_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIComponentRunWith)

#endif // OAIComponentRunWith_H
