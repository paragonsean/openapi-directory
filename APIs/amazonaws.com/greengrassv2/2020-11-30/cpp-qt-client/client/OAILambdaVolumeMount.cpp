/**
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILambdaVolumeMount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILambdaVolumeMount::OAILambdaVolumeMount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILambdaVolumeMount::OAILambdaVolumeMount() {
    this->initializeModel();
}

OAILambdaVolumeMount::~OAILambdaVolumeMount() {}

void OAILambdaVolumeMount::initializeModel() {

    m_source_path_isSet = false;
    m_source_path_isValid = false;

    m_destination_path_isSet = false;
    m_destination_path_isValid = false;

    m_permission_isSet = false;
    m_permission_isValid = false;

    m_add_group_owner_isSet = false;
    m_add_group_owner_isValid = false;
}

void OAILambdaVolumeMount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILambdaVolumeMount::fromJsonObject(QJsonObject json) {

    m_source_path_isValid = ::OpenAPI::fromJsonValue(m_source_path, json[QString("sourcePath")]);
    m_source_path_isSet = !json[QString("sourcePath")].isNull() && m_source_path_isValid;

    m_destination_path_isValid = ::OpenAPI::fromJsonValue(m_destination_path, json[QString("destinationPath")]);
    m_destination_path_isSet = !json[QString("destinationPath")].isNull() && m_destination_path_isValid;

    m_permission_isValid = ::OpenAPI::fromJsonValue(m_permission, json[QString("permission")]);
    m_permission_isSet = !json[QString("permission")].isNull() && m_permission_isValid;

    m_add_group_owner_isValid = ::OpenAPI::fromJsonValue(m_add_group_owner, json[QString("addGroupOwner")]);
    m_add_group_owner_isSet = !json[QString("addGroupOwner")].isNull() && m_add_group_owner_isValid;
}

QString OAILambdaVolumeMount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILambdaVolumeMount::asJsonObject() const {
    QJsonObject obj;
    if (m_source_path_isSet) {
        obj.insert(QString("sourcePath"), ::OpenAPI::toJsonValue(m_source_path));
    }
    if (m_destination_path_isSet) {
        obj.insert(QString("destinationPath"), ::OpenAPI::toJsonValue(m_destination_path));
    }
    if (m_permission.isSet()) {
        obj.insert(QString("permission"), ::OpenAPI::toJsonValue(m_permission));
    }
    if (m_add_group_owner_isSet) {
        obj.insert(QString("addGroupOwner"), ::OpenAPI::toJsonValue(m_add_group_owner));
    }
    return obj;
}

QString OAILambdaVolumeMount::getSourcePath() const {
    return m_source_path;
}
void OAILambdaVolumeMount::setSourcePath(const QString &source_path) {
    m_source_path = source_path;
    m_source_path_isSet = true;
}

bool OAILambdaVolumeMount::is_source_path_Set() const{
    return m_source_path_isSet;
}

bool OAILambdaVolumeMount::is_source_path_Valid() const{
    return m_source_path_isValid;
}

QString OAILambdaVolumeMount::getDestinationPath() const {
    return m_destination_path;
}
void OAILambdaVolumeMount::setDestinationPath(const QString &destination_path) {
    m_destination_path = destination_path;
    m_destination_path_isSet = true;
}

bool OAILambdaVolumeMount::is_destination_path_Set() const{
    return m_destination_path_isSet;
}

bool OAILambdaVolumeMount::is_destination_path_Valid() const{
    return m_destination_path_isValid;
}

OAILambdaFilesystemPermission OAILambdaVolumeMount::getPermission() const {
    return m_permission;
}
void OAILambdaVolumeMount::setPermission(const OAILambdaFilesystemPermission &permission) {
    m_permission = permission;
    m_permission_isSet = true;
}

bool OAILambdaVolumeMount::is_permission_Set() const{
    return m_permission_isSet;
}

bool OAILambdaVolumeMount::is_permission_Valid() const{
    return m_permission_isValid;
}

bool OAILambdaVolumeMount::getAddGroupOwner() const {
    return m_add_group_owner;
}
void OAILambdaVolumeMount::setAddGroupOwner(const bool &add_group_owner) {
    m_add_group_owner = add_group_owner;
    m_add_group_owner_isSet = true;
}

bool OAILambdaVolumeMount::is_add_group_owner_Set() const{
    return m_add_group_owner_isSet;
}

bool OAILambdaVolumeMount::is_add_group_owner_Valid() const{
    return m_add_group_owner_isValid;
}

bool OAILambdaVolumeMount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_group_owner_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILambdaVolumeMount::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_path_isValid && m_destination_path_isValid && true;
}

} // namespace OpenAPI
