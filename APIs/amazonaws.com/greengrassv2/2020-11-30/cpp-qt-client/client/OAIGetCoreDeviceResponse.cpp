/**
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetCoreDeviceResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetCoreDeviceResponse::OAIGetCoreDeviceResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetCoreDeviceResponse::OAIGetCoreDeviceResponse() {
    this->initializeModel();
}

OAIGetCoreDeviceResponse::~OAIGetCoreDeviceResponse() {}

void OAIGetCoreDeviceResponse::initializeModel() {

    m_core_device_thing_name_isSet = false;
    m_core_device_thing_name_isValid = false;

    m_core_version_isSet = false;
    m_core_version_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_architecture_isSet = false;
    m_architecture_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_last_status_update_timestamp_isSet = false;
    m_last_status_update_timestamp_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIGetCoreDeviceResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetCoreDeviceResponse::fromJsonObject(QJsonObject json) {

    m_core_device_thing_name_isValid = ::OpenAPI::fromJsonValue(m_core_device_thing_name, json[QString("coreDeviceThingName")]);
    m_core_device_thing_name_isSet = !json[QString("coreDeviceThingName")].isNull() && m_core_device_thing_name_isValid;

    m_core_version_isValid = ::OpenAPI::fromJsonValue(m_core_version, json[QString("coreVersion")]);
    m_core_version_isSet = !json[QString("coreVersion")].isNull() && m_core_version_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_architecture_isValid = ::OpenAPI::fromJsonValue(m_architecture, json[QString("architecture")]);
    m_architecture_isSet = !json[QString("architecture")].isNull() && m_architecture_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_last_status_update_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_status_update_timestamp, json[QString("lastStatusUpdateTimestamp")]);
    m_last_status_update_timestamp_isSet = !json[QString("lastStatusUpdateTimestamp")].isNull() && m_last_status_update_timestamp_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIGetCoreDeviceResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetCoreDeviceResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_core_device_thing_name_isSet) {
        obj.insert(QString("coreDeviceThingName"), ::OpenAPI::toJsonValue(m_core_device_thing_name));
    }
    if (m_core_version_isSet) {
        obj.insert(QString("coreVersion"), ::OpenAPI::toJsonValue(m_core_version));
    }
    if (m_platform_isSet) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_architecture_isSet) {
        obj.insert(QString("architecture"), ::OpenAPI::toJsonValue(m_architecture));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_last_status_update_timestamp_isSet) {
        obj.insert(QString("lastStatusUpdateTimestamp"), ::OpenAPI::toJsonValue(m_last_status_update_timestamp));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIGetCoreDeviceResponse::getCoreDeviceThingName() const {
    return m_core_device_thing_name;
}
void OAIGetCoreDeviceResponse::setCoreDeviceThingName(const QString &core_device_thing_name) {
    m_core_device_thing_name = core_device_thing_name;
    m_core_device_thing_name_isSet = true;
}

bool OAIGetCoreDeviceResponse::is_core_device_thing_name_Set() const{
    return m_core_device_thing_name_isSet;
}

bool OAIGetCoreDeviceResponse::is_core_device_thing_name_Valid() const{
    return m_core_device_thing_name_isValid;
}

QString OAIGetCoreDeviceResponse::getCoreVersion() const {
    return m_core_version;
}
void OAIGetCoreDeviceResponse::setCoreVersion(const QString &core_version) {
    m_core_version = core_version;
    m_core_version_isSet = true;
}

bool OAIGetCoreDeviceResponse::is_core_version_Set() const{
    return m_core_version_isSet;
}

bool OAIGetCoreDeviceResponse::is_core_version_Valid() const{
    return m_core_version_isValid;
}

QString OAIGetCoreDeviceResponse::getPlatform() const {
    return m_platform;
}
void OAIGetCoreDeviceResponse::setPlatform(const QString &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIGetCoreDeviceResponse::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIGetCoreDeviceResponse::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAIGetCoreDeviceResponse::getArchitecture() const {
    return m_architecture;
}
void OAIGetCoreDeviceResponse::setArchitecture(const QString &architecture) {
    m_architecture = architecture;
    m_architecture_isSet = true;
}

bool OAIGetCoreDeviceResponse::is_architecture_Set() const{
    return m_architecture_isSet;
}

bool OAIGetCoreDeviceResponse::is_architecture_Valid() const{
    return m_architecture_isValid;
}

OAICoreDeviceStatus OAIGetCoreDeviceResponse::getStatus() const {
    return m_status;
}
void OAIGetCoreDeviceResponse::setStatus(const OAICoreDeviceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetCoreDeviceResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetCoreDeviceResponse::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIGetCoreDeviceResponse::getLastStatusUpdateTimestamp() const {
    return m_last_status_update_timestamp;
}
void OAIGetCoreDeviceResponse::setLastStatusUpdateTimestamp(const QDateTime &last_status_update_timestamp) {
    m_last_status_update_timestamp = last_status_update_timestamp;
    m_last_status_update_timestamp_isSet = true;
}

bool OAIGetCoreDeviceResponse::is_last_status_update_timestamp_Set() const{
    return m_last_status_update_timestamp_isSet;
}

bool OAIGetCoreDeviceResponse::is_last_status_update_timestamp_Valid() const{
    return m_last_status_update_timestamp_isValid;
}

QMap OAIGetCoreDeviceResponse::getTags() const {
    return m_tags;
}
void OAIGetCoreDeviceResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetCoreDeviceResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetCoreDeviceResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIGetCoreDeviceResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_core_device_thing_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_core_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_architecture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_status_update_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetCoreDeviceResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
