/**
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILambdaVolumeMount.h
 *
 * Contains information about a volume that Linux processes in a container can access. When you define a volume, the IoT Greengrass Core software mounts the source files to the destination inside the container.
 */

#ifndef OAILambdaVolumeMount_H
#define OAILambdaVolumeMount_H

#include <QJsonObject>

#include "OAILambdaFilesystemPermission.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAILambdaVolumeMount : public OAIObject {
public:
    OAILambdaVolumeMount();
    OAILambdaVolumeMount(QString json);
    ~OAILambdaVolumeMount() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getSourcePath() const;
    void setSourcePath(const QString &source_path);
    bool is_source_path_Set() const;
    bool is_source_path_Valid() const;

    QString getDestinationPath() const;
    void setDestinationPath(const QString &destination_path);
    bool is_destination_path_Set() const;
    bool is_destination_path_Valid() const;

    OAILambdaFilesystemPermission getPermission() const;
    void setPermission(const OAILambdaFilesystemPermission &permission);
    bool is_permission_Set() const;
    bool is_permission_Valid() const;

    bool getAddGroupOwner() const;
    void setAddGroupOwner(const bool &add_group_owner);
    bool is_add_group_owner_Set() const;
    bool is_add_group_owner_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_source_path;
    bool m_source_path_isSet;
    bool m_source_path_isValid;

    QString m_destination_path;
    bool m_destination_path_isSet;
    bool m_destination_path_isValid;

    OAILambdaFilesystemPermission m_permission;
    bool m_permission_isSet;
    bool m_permission_isValid;

    bool m_add_group_owner;
    bool m_add_group_owner_isSet;
    bool m_add_group_owner_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILambdaVolumeMount)

#endif // OAILambdaVolumeMount_H
