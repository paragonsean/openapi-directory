/**
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateComponentVersion_request_lambdaFunction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateComponentVersion_request_lambdaFunction::OAICreateComponentVersion_request_lambdaFunction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateComponentVersion_request_lambdaFunction::OAICreateComponentVersion_request_lambdaFunction() {
    this->initializeModel();
}

OAICreateComponentVersion_request_lambdaFunction::~OAICreateComponentVersion_request_lambdaFunction() {}

void OAICreateComponentVersion_request_lambdaFunction::initializeModel() {

    m_lambda_arn_isSet = false;
    m_lambda_arn_isValid = false;

    m_component_name_isSet = false;
    m_component_name_isValid = false;

    m_component_version_isSet = false;
    m_component_version_isValid = false;

    m_component_platforms_isSet = false;
    m_component_platforms_isValid = false;

    m_component_dependencies_isSet = false;
    m_component_dependencies_isValid = false;

    m_component_lambda_parameters_isSet = false;
    m_component_lambda_parameters_isValid = false;
}

void OAICreateComponentVersion_request_lambdaFunction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateComponentVersion_request_lambdaFunction::fromJsonObject(QJsonObject json) {

    m_lambda_arn_isValid = ::OpenAPI::fromJsonValue(m_lambda_arn, json[QString("lambdaArn")]);
    m_lambda_arn_isSet = !json[QString("lambdaArn")].isNull() && m_lambda_arn_isValid;

    m_component_name_isValid = ::OpenAPI::fromJsonValue(m_component_name, json[QString("componentName")]);
    m_component_name_isSet = !json[QString("componentName")].isNull() && m_component_name_isValid;

    m_component_version_isValid = ::OpenAPI::fromJsonValue(m_component_version, json[QString("componentVersion")]);
    m_component_version_isSet = !json[QString("componentVersion")].isNull() && m_component_version_isValid;

    m_component_platforms_isValid = ::OpenAPI::fromJsonValue(m_component_platforms, json[QString("componentPlatforms")]);
    m_component_platforms_isSet = !json[QString("componentPlatforms")].isNull() && m_component_platforms_isValid;

    m_component_dependencies_isValid = ::OpenAPI::fromJsonValue(m_component_dependencies, json[QString("componentDependencies")]);
    m_component_dependencies_isSet = !json[QString("componentDependencies")].isNull() && m_component_dependencies_isValid;

    m_component_lambda_parameters_isValid = ::OpenAPI::fromJsonValue(m_component_lambda_parameters, json[QString("componentLambdaParameters")]);
    m_component_lambda_parameters_isSet = !json[QString("componentLambdaParameters")].isNull() && m_component_lambda_parameters_isValid;
}

QString OAICreateComponentVersion_request_lambdaFunction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateComponentVersion_request_lambdaFunction::asJsonObject() const {
    QJsonObject obj;
    if (m_lambda_arn_isSet) {
        obj.insert(QString("lambdaArn"), ::OpenAPI::toJsonValue(m_lambda_arn));
    }
    if (m_component_name_isSet) {
        obj.insert(QString("componentName"), ::OpenAPI::toJsonValue(m_component_name));
    }
    if (m_component_version_isSet) {
        obj.insert(QString("componentVersion"), ::OpenAPI::toJsonValue(m_component_version));
    }
    if (m_component_platforms.isSet()) {
        obj.insert(QString("componentPlatforms"), ::OpenAPI::toJsonValue(m_component_platforms));
    }
    if (m_component_dependencies.isSet()) {
        obj.insert(QString("componentDependencies"), ::OpenAPI::toJsonValue(m_component_dependencies));
    }
    if (m_component_lambda_parameters.isSet()) {
        obj.insert(QString("componentLambdaParameters"), ::OpenAPI::toJsonValue(m_component_lambda_parameters));
    }
    return obj;
}

QString OAICreateComponentVersion_request_lambdaFunction::getLambdaArn() const {
    return m_lambda_arn;
}
void OAICreateComponentVersion_request_lambdaFunction::setLambdaArn(const QString &lambda_arn) {
    m_lambda_arn = lambda_arn;
    m_lambda_arn_isSet = true;
}

bool OAICreateComponentVersion_request_lambdaFunction::is_lambda_arn_Set() const{
    return m_lambda_arn_isSet;
}

bool OAICreateComponentVersion_request_lambdaFunction::is_lambda_arn_Valid() const{
    return m_lambda_arn_isValid;
}

QString OAICreateComponentVersion_request_lambdaFunction::getComponentName() const {
    return m_component_name;
}
void OAICreateComponentVersion_request_lambdaFunction::setComponentName(const QString &component_name) {
    m_component_name = component_name;
    m_component_name_isSet = true;
}

bool OAICreateComponentVersion_request_lambdaFunction::is_component_name_Set() const{
    return m_component_name_isSet;
}

bool OAICreateComponentVersion_request_lambdaFunction::is_component_name_Valid() const{
    return m_component_name_isValid;
}

QString OAICreateComponentVersion_request_lambdaFunction::getComponentVersion() const {
    return m_component_version;
}
void OAICreateComponentVersion_request_lambdaFunction::setComponentVersion(const QString &component_version) {
    m_component_version = component_version;
    m_component_version_isSet = true;
}

bool OAICreateComponentVersion_request_lambdaFunction::is_component_version_Set() const{
    return m_component_version_isSet;
}

bool OAICreateComponentVersion_request_lambdaFunction::is_component_version_Valid() const{
    return m_component_version_isValid;
}

QList OAICreateComponentVersion_request_lambdaFunction::getComponentPlatforms() const {
    return m_component_platforms;
}
void OAICreateComponentVersion_request_lambdaFunction::setComponentPlatforms(const QList &component_platforms) {
    m_component_platforms = component_platforms;
    m_component_platforms_isSet = true;
}

bool OAICreateComponentVersion_request_lambdaFunction::is_component_platforms_Set() const{
    return m_component_platforms_isSet;
}

bool OAICreateComponentVersion_request_lambdaFunction::is_component_platforms_Valid() const{
    return m_component_platforms_isValid;
}

QMap OAICreateComponentVersion_request_lambdaFunction::getComponentDependencies() const {
    return m_component_dependencies;
}
void OAICreateComponentVersion_request_lambdaFunction::setComponentDependencies(const QMap &component_dependencies) {
    m_component_dependencies = component_dependencies;
    m_component_dependencies_isSet = true;
}

bool OAICreateComponentVersion_request_lambdaFunction::is_component_dependencies_Set() const{
    return m_component_dependencies_isSet;
}

bool OAICreateComponentVersion_request_lambdaFunction::is_component_dependencies_Valid() const{
    return m_component_dependencies_isValid;
}

OAICreateComponentVersion_request_lambdaFunction_componentLambdaParameters OAICreateComponentVersion_request_lambdaFunction::getComponentLambdaParameters() const {
    return m_component_lambda_parameters;
}
void OAICreateComponentVersion_request_lambdaFunction::setComponentLambdaParameters(const OAICreateComponentVersion_request_lambdaFunction_componentLambdaParameters &component_lambda_parameters) {
    m_component_lambda_parameters = component_lambda_parameters;
    m_component_lambda_parameters_isSet = true;
}

bool OAICreateComponentVersion_request_lambdaFunction::is_component_lambda_parameters_Set() const{
    return m_component_lambda_parameters_isSet;
}

bool OAICreateComponentVersion_request_lambdaFunction::is_component_lambda_parameters_Valid() const{
    return m_component_lambda_parameters_isValid;
}

bool OAICreateComponentVersion_request_lambdaFunction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lambda_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_platforms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_dependencies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_lambda_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateComponentVersion_request_lambdaFunction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
