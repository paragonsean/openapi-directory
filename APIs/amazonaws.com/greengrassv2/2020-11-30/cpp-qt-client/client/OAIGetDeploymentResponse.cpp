/**
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDeploymentResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDeploymentResponse::OAIGetDeploymentResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDeploymentResponse::OAIGetDeploymentResponse() {
    this->initializeModel();
}

OAIGetDeploymentResponse::~OAIGetDeploymentResponse() {}

void OAIGetDeploymentResponse::initializeModel() {

    m_target_arn_isSet = false;
    m_target_arn_isValid = false;

    m_revision_id_isSet = false;
    m_revision_id_isValid = false;

    m_deployment_id_isSet = false;
    m_deployment_id_isValid = false;

    m_deployment_name_isSet = false;
    m_deployment_name_isValid = false;

    m_deployment_status_isSet = false;
    m_deployment_status_isValid = false;

    m_iot_job_id_isSet = false;
    m_iot_job_id_isValid = false;

    m_iot_job_arn_isSet = false;
    m_iot_job_arn_isValid = false;

    m_components_isSet = false;
    m_components_isValid = false;

    m_deployment_policies_isSet = false;
    m_deployment_policies_isValid = false;

    m_iot_job_configuration_isSet = false;
    m_iot_job_configuration_isValid = false;

    m_creation_timestamp_isSet = false;
    m_creation_timestamp_isValid = false;

    m_is_latest_for_target_isSet = false;
    m_is_latest_for_target_isValid = false;

    m_parent_target_arn_isSet = false;
    m_parent_target_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIGetDeploymentResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDeploymentResponse::fromJsonObject(QJsonObject json) {

    m_target_arn_isValid = ::OpenAPI::fromJsonValue(m_target_arn, json[QString("targetArn")]);
    m_target_arn_isSet = !json[QString("targetArn")].isNull() && m_target_arn_isValid;

    m_revision_id_isValid = ::OpenAPI::fromJsonValue(m_revision_id, json[QString("revisionId")]);
    m_revision_id_isSet = !json[QString("revisionId")].isNull() && m_revision_id_isValid;

    m_deployment_id_isValid = ::OpenAPI::fromJsonValue(m_deployment_id, json[QString("deploymentId")]);
    m_deployment_id_isSet = !json[QString("deploymentId")].isNull() && m_deployment_id_isValid;

    m_deployment_name_isValid = ::OpenAPI::fromJsonValue(m_deployment_name, json[QString("deploymentName")]);
    m_deployment_name_isSet = !json[QString("deploymentName")].isNull() && m_deployment_name_isValid;

    m_deployment_status_isValid = ::OpenAPI::fromJsonValue(m_deployment_status, json[QString("deploymentStatus")]);
    m_deployment_status_isSet = !json[QString("deploymentStatus")].isNull() && m_deployment_status_isValid;

    m_iot_job_id_isValid = ::OpenAPI::fromJsonValue(m_iot_job_id, json[QString("iotJobId")]);
    m_iot_job_id_isSet = !json[QString("iotJobId")].isNull() && m_iot_job_id_isValid;

    m_iot_job_arn_isValid = ::OpenAPI::fromJsonValue(m_iot_job_arn, json[QString("iotJobArn")]);
    m_iot_job_arn_isSet = !json[QString("iotJobArn")].isNull() && m_iot_job_arn_isValid;

    m_components_isValid = ::OpenAPI::fromJsonValue(m_components, json[QString("components")]);
    m_components_isSet = !json[QString("components")].isNull() && m_components_isValid;

    m_deployment_policies_isValid = ::OpenAPI::fromJsonValue(m_deployment_policies, json[QString("deploymentPolicies")]);
    m_deployment_policies_isSet = !json[QString("deploymentPolicies")].isNull() && m_deployment_policies_isValid;

    m_iot_job_configuration_isValid = ::OpenAPI::fromJsonValue(m_iot_job_configuration, json[QString("iotJobConfiguration")]);
    m_iot_job_configuration_isSet = !json[QString("iotJobConfiguration")].isNull() && m_iot_job_configuration_isValid;

    m_creation_timestamp_isValid = ::OpenAPI::fromJsonValue(m_creation_timestamp, json[QString("creationTimestamp")]);
    m_creation_timestamp_isSet = !json[QString("creationTimestamp")].isNull() && m_creation_timestamp_isValid;

    m_is_latest_for_target_isValid = ::OpenAPI::fromJsonValue(m_is_latest_for_target, json[QString("isLatestForTarget")]);
    m_is_latest_for_target_isSet = !json[QString("isLatestForTarget")].isNull() && m_is_latest_for_target_isValid;

    m_parent_target_arn_isValid = ::OpenAPI::fromJsonValue(m_parent_target_arn, json[QString("parentTargetArn")]);
    m_parent_target_arn_isSet = !json[QString("parentTargetArn")].isNull() && m_parent_target_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIGetDeploymentResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDeploymentResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_target_arn_isSet) {
        obj.insert(QString("targetArn"), ::OpenAPI::toJsonValue(m_target_arn));
    }
    if (m_revision_id_isSet) {
        obj.insert(QString("revisionId"), ::OpenAPI::toJsonValue(m_revision_id));
    }
    if (m_deployment_id_isSet) {
        obj.insert(QString("deploymentId"), ::OpenAPI::toJsonValue(m_deployment_id));
    }
    if (m_deployment_name_isSet) {
        obj.insert(QString("deploymentName"), ::OpenAPI::toJsonValue(m_deployment_name));
    }
    if (m_deployment_status.isSet()) {
        obj.insert(QString("deploymentStatus"), ::OpenAPI::toJsonValue(m_deployment_status));
    }
    if (m_iot_job_id_isSet) {
        obj.insert(QString("iotJobId"), ::OpenAPI::toJsonValue(m_iot_job_id));
    }
    if (m_iot_job_arn_isSet) {
        obj.insert(QString("iotJobArn"), ::OpenAPI::toJsonValue(m_iot_job_arn));
    }
    if (m_components.isSet()) {
        obj.insert(QString("components"), ::OpenAPI::toJsonValue(m_components));
    }
    if (m_deployment_policies.isSet()) {
        obj.insert(QString("deploymentPolicies"), ::OpenAPI::toJsonValue(m_deployment_policies));
    }
    if (m_iot_job_configuration.isSet()) {
        obj.insert(QString("iotJobConfiguration"), ::OpenAPI::toJsonValue(m_iot_job_configuration));
    }
    if (m_creation_timestamp_isSet) {
        obj.insert(QString("creationTimestamp"), ::OpenAPI::toJsonValue(m_creation_timestamp));
    }
    if (m_is_latest_for_target_isSet) {
        obj.insert(QString("isLatestForTarget"), ::OpenAPI::toJsonValue(m_is_latest_for_target));
    }
    if (m_parent_target_arn_isSet) {
        obj.insert(QString("parentTargetArn"), ::OpenAPI::toJsonValue(m_parent_target_arn));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIGetDeploymentResponse::getTargetArn() const {
    return m_target_arn;
}
void OAIGetDeploymentResponse::setTargetArn(const QString &target_arn) {
    m_target_arn = target_arn;
    m_target_arn_isSet = true;
}

bool OAIGetDeploymentResponse::is_target_arn_Set() const{
    return m_target_arn_isSet;
}

bool OAIGetDeploymentResponse::is_target_arn_Valid() const{
    return m_target_arn_isValid;
}

QString OAIGetDeploymentResponse::getRevisionId() const {
    return m_revision_id;
}
void OAIGetDeploymentResponse::setRevisionId(const QString &revision_id) {
    m_revision_id = revision_id;
    m_revision_id_isSet = true;
}

bool OAIGetDeploymentResponse::is_revision_id_Set() const{
    return m_revision_id_isSet;
}

bool OAIGetDeploymentResponse::is_revision_id_Valid() const{
    return m_revision_id_isValid;
}

QString OAIGetDeploymentResponse::getDeploymentId() const {
    return m_deployment_id;
}
void OAIGetDeploymentResponse::setDeploymentId(const QString &deployment_id) {
    m_deployment_id = deployment_id;
    m_deployment_id_isSet = true;
}

bool OAIGetDeploymentResponse::is_deployment_id_Set() const{
    return m_deployment_id_isSet;
}

bool OAIGetDeploymentResponse::is_deployment_id_Valid() const{
    return m_deployment_id_isValid;
}

QString OAIGetDeploymentResponse::getDeploymentName() const {
    return m_deployment_name;
}
void OAIGetDeploymentResponse::setDeploymentName(const QString &deployment_name) {
    m_deployment_name = deployment_name;
    m_deployment_name_isSet = true;
}

bool OAIGetDeploymentResponse::is_deployment_name_Set() const{
    return m_deployment_name_isSet;
}

bool OAIGetDeploymentResponse::is_deployment_name_Valid() const{
    return m_deployment_name_isValid;
}

OAIDeploymentStatus OAIGetDeploymentResponse::getDeploymentStatus() const {
    return m_deployment_status;
}
void OAIGetDeploymentResponse::setDeploymentStatus(const OAIDeploymentStatus &deployment_status) {
    m_deployment_status = deployment_status;
    m_deployment_status_isSet = true;
}

bool OAIGetDeploymentResponse::is_deployment_status_Set() const{
    return m_deployment_status_isSet;
}

bool OAIGetDeploymentResponse::is_deployment_status_Valid() const{
    return m_deployment_status_isValid;
}

QString OAIGetDeploymentResponse::getIotJobId() const {
    return m_iot_job_id;
}
void OAIGetDeploymentResponse::setIotJobId(const QString &iot_job_id) {
    m_iot_job_id = iot_job_id;
    m_iot_job_id_isSet = true;
}

bool OAIGetDeploymentResponse::is_iot_job_id_Set() const{
    return m_iot_job_id_isSet;
}

bool OAIGetDeploymentResponse::is_iot_job_id_Valid() const{
    return m_iot_job_id_isValid;
}

QString OAIGetDeploymentResponse::getIotJobArn() const {
    return m_iot_job_arn;
}
void OAIGetDeploymentResponse::setIotJobArn(const QString &iot_job_arn) {
    m_iot_job_arn = iot_job_arn;
    m_iot_job_arn_isSet = true;
}

bool OAIGetDeploymentResponse::is_iot_job_arn_Set() const{
    return m_iot_job_arn_isSet;
}

bool OAIGetDeploymentResponse::is_iot_job_arn_Valid() const{
    return m_iot_job_arn_isValid;
}

QMap OAIGetDeploymentResponse::getComponents() const {
    return m_components;
}
void OAIGetDeploymentResponse::setComponents(const QMap &components) {
    m_components = components;
    m_components_isSet = true;
}

bool OAIGetDeploymentResponse::is_components_Set() const{
    return m_components_isSet;
}

bool OAIGetDeploymentResponse::is_components_Valid() const{
    return m_components_isValid;
}

OAIGetDeploymentResponse_deploymentPolicies OAIGetDeploymentResponse::getDeploymentPolicies() const {
    return m_deployment_policies;
}
void OAIGetDeploymentResponse::setDeploymentPolicies(const OAIGetDeploymentResponse_deploymentPolicies &deployment_policies) {
    m_deployment_policies = deployment_policies;
    m_deployment_policies_isSet = true;
}

bool OAIGetDeploymentResponse::is_deployment_policies_Set() const{
    return m_deployment_policies_isSet;
}

bool OAIGetDeploymentResponse::is_deployment_policies_Valid() const{
    return m_deployment_policies_isValid;
}

OAIGetDeploymentResponse_iotJobConfiguration OAIGetDeploymentResponse::getIotJobConfiguration() const {
    return m_iot_job_configuration;
}
void OAIGetDeploymentResponse::setIotJobConfiguration(const OAIGetDeploymentResponse_iotJobConfiguration &iot_job_configuration) {
    m_iot_job_configuration = iot_job_configuration;
    m_iot_job_configuration_isSet = true;
}

bool OAIGetDeploymentResponse::is_iot_job_configuration_Set() const{
    return m_iot_job_configuration_isSet;
}

bool OAIGetDeploymentResponse::is_iot_job_configuration_Valid() const{
    return m_iot_job_configuration_isValid;
}

QDateTime OAIGetDeploymentResponse::getCreationTimestamp() const {
    return m_creation_timestamp;
}
void OAIGetDeploymentResponse::setCreationTimestamp(const QDateTime &creation_timestamp) {
    m_creation_timestamp = creation_timestamp;
    m_creation_timestamp_isSet = true;
}

bool OAIGetDeploymentResponse::is_creation_timestamp_Set() const{
    return m_creation_timestamp_isSet;
}

bool OAIGetDeploymentResponse::is_creation_timestamp_Valid() const{
    return m_creation_timestamp_isValid;
}

bool OAIGetDeploymentResponse::getIsLatestForTarget() const {
    return m_is_latest_for_target;
}
void OAIGetDeploymentResponse::setIsLatestForTarget(const bool &is_latest_for_target) {
    m_is_latest_for_target = is_latest_for_target;
    m_is_latest_for_target_isSet = true;
}

bool OAIGetDeploymentResponse::is_is_latest_for_target_Set() const{
    return m_is_latest_for_target_isSet;
}

bool OAIGetDeploymentResponse::is_is_latest_for_target_Valid() const{
    return m_is_latest_for_target_isValid;
}

QString OAIGetDeploymentResponse::getParentTargetArn() const {
    return m_parent_target_arn;
}
void OAIGetDeploymentResponse::setParentTargetArn(const QString &parent_target_arn) {
    m_parent_target_arn = parent_target_arn;
    m_parent_target_arn_isSet = true;
}

bool OAIGetDeploymentResponse::is_parent_target_arn_Set() const{
    return m_parent_target_arn_isSet;
}

bool OAIGetDeploymentResponse::is_parent_target_arn_Valid() const{
    return m_parent_target_arn_isValid;
}

QMap OAIGetDeploymentResponse::getTags() const {
    return m_tags;
}
void OAIGetDeploymentResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetDeploymentResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetDeploymentResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIGetDeploymentResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_iot_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iot_job_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_components.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_policies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_iot_job_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_latest_for_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_target_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDeploymentResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
