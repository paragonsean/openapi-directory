/**
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsIoTGreengrassV2);
  }
}(this, function(expect, AwsIoTGreengrassV2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsIoTGreengrassV2.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('associateServiceRoleToAccount', function() {
      it('should call associateServiceRoleToAccount successfully', function(done) {
        //uncomment below and update the code to test associateServiceRoleToAccount
        //instance.associateServiceRoleToAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchAssociateClientDeviceWithCoreDevice', function() {
      it('should call batchAssociateClientDeviceWithCoreDevice successfully', function(done) {
        //uncomment below and update the code to test batchAssociateClientDeviceWithCoreDevice
        //instance.batchAssociateClientDeviceWithCoreDevice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchDisassociateClientDeviceFromCoreDevice', function() {
      it('should call batchDisassociateClientDeviceFromCoreDevice successfully', function(done) {
        //uncomment below and update the code to test batchDisassociateClientDeviceFromCoreDevice
        //instance.batchDisassociateClientDeviceFromCoreDevice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cancelDeployment', function() {
      it('should call cancelDeployment successfully', function(done) {
        //uncomment below and update the code to test cancelDeployment
        //instance.cancelDeployment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createComponentVersion', function() {
      it('should call createComponentVersion successfully', function(done) {
        //uncomment below and update the code to test createComponentVersion
        //instance.createComponentVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createDeployment', function() {
      it('should call createDeployment successfully', function(done) {
        //uncomment below and update the code to test createDeployment
        //instance.createDeployment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteComponent', function() {
      it('should call deleteComponent successfully', function(done) {
        //uncomment below and update the code to test deleteComponent
        //instance.deleteComponent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreDevice', function() {
      it('should call deleteCoreDevice successfully', function(done) {
        //uncomment below and update the code to test deleteCoreDevice
        //instance.deleteCoreDevice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDeployment', function() {
      it('should call deleteDeployment successfully', function(done) {
        //uncomment below and update the code to test deleteDeployment
        //instance.deleteDeployment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeComponent', function() {
      it('should call describeComponent successfully', function(done) {
        //uncomment below and update the code to test describeComponent
        //instance.describeComponent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociateServiceRoleFromAccount', function() {
      it('should call disassociateServiceRoleFromAccount successfully', function(done) {
        //uncomment below and update the code to test disassociateServiceRoleFromAccount
        //instance.disassociateServiceRoleFromAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getComponent', function() {
      it('should call getComponent successfully', function(done) {
        //uncomment below and update the code to test getComponent
        //instance.getComponent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getComponentVersionArtifact', function() {
      it('should call getComponentVersionArtifact successfully', function(done) {
        //uncomment below and update the code to test getComponentVersionArtifact
        //instance.getComponentVersionArtifact(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getConnectivityInfo', function() {
      it('should call getConnectivityInfo successfully', function(done) {
        //uncomment below and update the code to test getConnectivityInfo
        //instance.getConnectivityInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCoreDevice', function() {
      it('should call getCoreDevice successfully', function(done) {
        //uncomment below and update the code to test getCoreDevice
        //instance.getCoreDevice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDeployment', function() {
      it('should call getDeployment successfully', function(done) {
        //uncomment below and update the code to test getDeployment
        //instance.getDeployment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getServiceRoleForAccount', function() {
      it('should call getServiceRoleForAccount successfully', function(done) {
        //uncomment below and update the code to test getServiceRoleForAccount
        //instance.getServiceRoleForAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listClientDevicesAssociatedWithCoreDevice', function() {
      it('should call listClientDevicesAssociatedWithCoreDevice successfully', function(done) {
        //uncomment below and update the code to test listClientDevicesAssociatedWithCoreDevice
        //instance.listClientDevicesAssociatedWithCoreDevice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listComponentVersions', function() {
      it('should call listComponentVersions successfully', function(done) {
        //uncomment below and update the code to test listComponentVersions
        //instance.listComponentVersions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listComponents', function() {
      it('should call listComponents successfully', function(done) {
        //uncomment below and update the code to test listComponents
        //instance.listComponents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreDevices', function() {
      it('should call listCoreDevices successfully', function(done) {
        //uncomment below and update the code to test listCoreDevices
        //instance.listCoreDevices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDeployments', function() {
      it('should call listDeployments successfully', function(done) {
        //uncomment below and update the code to test listDeployments
        //instance.listDeployments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listEffectiveDeployments', function() {
      it('should call listEffectiveDeployments successfully', function(done) {
        //uncomment below and update the code to test listEffectiveDeployments
        //instance.listEffectiveDeployments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listInstalledComponents', function() {
      it('should call listInstalledComponents successfully', function(done) {
        //uncomment below and update the code to test listInstalledComponents
        //instance.listInstalledComponents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resolveComponentCandidates', function() {
      it('should call resolveComponentCandidates successfully', function(done) {
        //uncomment below and update the code to test resolveComponentCandidates
        //instance.resolveComponentCandidates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateConnectivityInfo', function() {
      it('should call updateConnectivityInfo successfully', function(done) {
        //uncomment below and update the code to test updateConnectivityInfo
        //instance.updateConnectivityInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
