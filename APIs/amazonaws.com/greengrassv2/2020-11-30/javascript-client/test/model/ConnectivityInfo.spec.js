/**
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsIoTGreengrassV2);
  }
}(this, function(expect, AwsIoTGreengrassV2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsIoTGreengrassV2.ConnectivityInfo();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ConnectivityInfo', function() {
    it('should create an instance of ConnectivityInfo', function() {
      // uncomment below and update the code to test ConnectivityInfo
      //var instance = new AwsIoTGreengrassV2.ConnectivityInfo();
      //expect(instance).to.be.a(AwsIoTGreengrassV2.ConnectivityInfo);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new AwsIoTGreengrassV2.ConnectivityInfo();
      //expect(instance).to.be();
    });

    it('should have the property hostAddress (base name: "hostAddress")', function() {
      // uncomment below and update the code to test the property hostAddress
      //var instance = new AwsIoTGreengrassV2.ConnectivityInfo();
      //expect(instance).to.be();
    });

    it('should have the property portNumber (base name: "portNumber")', function() {
      // uncomment below and update the code to test the property portNumber
      //var instance = new AwsIoTGreengrassV2.ConnectivityInfo();
      //expect(instance).to.be();
    });

    it('should have the property metadata (base name: "metadata")', function() {
      // uncomment below and update the code to test the property metadata
      //var instance = new AwsIoTGreengrassV2.ConnectivityInfo();
      //expect(instance).to.be();
    });

  });

}));
