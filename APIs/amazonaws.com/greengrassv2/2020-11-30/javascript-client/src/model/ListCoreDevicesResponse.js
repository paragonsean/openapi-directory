/**
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ListCoreDevicesResponse model module.
 * @module model/ListCoreDevicesResponse
 * @version 2020-11-30
 */
class ListCoreDevicesResponse {
    /**
     * Constructs a new <code>ListCoreDevicesResponse</code>.
     * @alias module:model/ListCoreDevicesResponse
     */
    constructor() { 
        
        ListCoreDevicesResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ListCoreDevicesResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListCoreDevicesResponse} obj Optional instance to populate.
     * @return {module:model/ListCoreDevicesResponse} The populated <code>ListCoreDevicesResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListCoreDevicesResponse();

            if (data.hasOwnProperty('coreDevices')) {
                obj['coreDevices'] = ApiClient.convertToType(data['coreDevices'], Array);
            }
            if (data.hasOwnProperty('nextToken')) {
                obj['nextToken'] = ApiClient.convertToType(data['nextToken'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListCoreDevicesResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListCoreDevicesResponse</code>.
     */
    static validateJSON(data) {
        // validate the optional field `coreDevices`
        if (data['coreDevices']) { // data not null
          Array.validateJSON(data['coreDevices']);
        }
        // validate the optional field `nextToken`
        if (data['nextToken']) { // data not null
          String.validateJSON(data['nextToken']);
        }

        return true;
    }


}



/**
 * @member {Array} coreDevices
 */
ListCoreDevicesResponse.prototype['coreDevices'] = undefined;

/**
 * @member {String} nextToken
 */
ListCoreDevicesResponse.prototype['nextToken'] = undefined;






export default ListCoreDevicesResponse;

