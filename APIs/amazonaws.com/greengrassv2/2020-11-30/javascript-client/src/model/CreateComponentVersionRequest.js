/**
 * AWS IoT Greengrass V2
 * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\">What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-11-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateComponentVersionRequestLambdaFunction from './CreateComponentVersionRequestLambdaFunction';

/**
 * The CreateComponentVersionRequest model module.
 * @module model/CreateComponentVersionRequest
 * @version 2020-11-30
 */
class CreateComponentVersionRequest {
    /**
     * Constructs a new <code>CreateComponentVersionRequest</code>.
     * @alias module:model/CreateComponentVersionRequest
     */
    constructor() { 
        
        CreateComponentVersionRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreateComponentVersionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateComponentVersionRequest} obj Optional instance to populate.
     * @return {module:model/CreateComponentVersionRequest} The populated <code>CreateComponentVersionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateComponentVersionRequest();

            if (data.hasOwnProperty('inlineRecipe')) {
                obj['inlineRecipe'] = ApiClient.convertToType(data['inlineRecipe'], 'String');
            }
            if (data.hasOwnProperty('lambdaFunction')) {
                obj['lambdaFunction'] = CreateComponentVersionRequestLambdaFunction.constructFromObject(data['lambdaFunction']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
            if (data.hasOwnProperty('clientToken')) {
                obj['clientToken'] = ApiClient.convertToType(data['clientToken'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateComponentVersionRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateComponentVersionRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['inlineRecipe'] && !(typeof data['inlineRecipe'] === 'string' || data['inlineRecipe'] instanceof String)) {
            throw new Error("Expected the field `inlineRecipe` to be a primitive type in the JSON string but got " + data['inlineRecipe']);
        }
        // validate the optional field `lambdaFunction`
        if (data['lambdaFunction']) { // data not null
          CreateComponentVersionRequestLambdaFunction.validateJSON(data['lambdaFunction']);
        }
        // ensure the json data is a string
        if (data['clientToken'] && !(typeof data['clientToken'] === 'string' || data['clientToken'] instanceof String)) {
            throw new Error("Expected the field `clientToken` to be a primitive type in the JSON string but got " + data['clientToken']);
        }

        return true;
    }


}



/**
 * <p>The recipe to use to create the component. The recipe defines the component's metadata, parameters, dependencies, lifecycle, artifacts, and platform compatibility.</p> <p>You must specify either <code>inlineRecipe</code> or <code>lambdaFunction</code>.</p>
 * @member {String} inlineRecipe
 */
CreateComponentVersionRequest.prototype['inlineRecipe'] = undefined;

/**
 * @member {module:model/CreateComponentVersionRequestLambdaFunction} lambdaFunction
 */
CreateComponentVersionRequest.prototype['lambdaFunction'] = undefined;

/**
 * A list of key-value pairs that contain metadata for the resource. For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html\">Tag your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.
 * @member {Object.<String, String>} tags
 */
CreateComponentVersionRequest.prototype['tags'] = undefined;

/**
 * A unique, case-sensitive identifier that you can provide to ensure that the request is idempotent. Idempotency means that the request is successfully processed only once, even if you send the request multiple times. When a request succeeds, and you specify the same client token for subsequent successful requests, the IoT Greengrass V2 service returns the successful response that it caches from the previous request. IoT Greengrass V2 caches successful responses for idempotent requests for up to 8 hours.
 * @member {String} clientToken
 */
CreateComponentVersionRequest.prototype['clientToken'] = undefined;






export default CreateComponentVersionRequest;

