openapi: 3.0.0
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  description: "<p>IoT Greengrass brings local compute, messaging, data management,\
    \ sync, and ML inference capabilities to edge devices. This enables devices to\
    \ collect and analyze data closer to the source of information, react autonomously\
    \ to local events, and communicate securely with each other on local networks.\
    \ Local devices can also communicate securely with Amazon Web Services IoT Core\
    \ and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers\
    \ can use Lambda functions and components to create and deploy applications to\
    \ fleets of edge devices for local operation.</p> <p>IoT Greengrass Version 2\
    \ provides a new major version of the IoT Greengrass Core software, new APIs,\
    \ and a new console. Use this API reference to learn how to use the IoT Greengrass\
    \ V2 API operations to manage components, manage deployments, and core devices.</p>\
    \ <p>For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html\"\
    >What is IoT Greengrass?</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>"
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  termsOfService: https://aws.amazon.com/service-terms/
  title: AWS IoT Greengrass V2
  version: 2020-11-30
  x-release: v4
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: '#FFFFFF'
  x-providerName: amazonaws.com
  x-serviceName: greengrassv2
  x-origin:
  - contentType: application/json
    url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/greengrassv2-2020-11-30.normal.json
    converter:
      url: https://github.com/mermade/aws2openapi
      version: 1.0.0
    x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
  - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/greengrass/
servers:
- description: The AWS GreengrassV2 multi-region endpoint
  url: "http://greengrass.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The AWS GreengrassV2 multi-region endpoint
  url: "https://greengrass.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The AWS GreengrassV2 endpoint for China (Beijing) and China (Ningxia)
  url: "http://greengrass.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
- description: The AWS GreengrassV2 endpoint for China (Beijing) and China (Ningxia)
  url: "https://greengrass.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
security:
- hmac: []
paths:
  /greengrass/servicerole:
    delete:
      description: "Disassociates the Greengrass service role from IoT Greengrass\
        \ for your Amazon Web Services account in this Amazon Web Services Region.\
        \ Without a service role, IoT Greengrass can't verify the identity of client\
        \ devices or manage core device connectivity information. For more information,\
        \ see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-service-role.html\"\
        >Greengrass service role</a> in the <i>IoT Greengrass Version 2 Developer\
        \ Guide</i>."
      operationId: disassociate_service_role_from_account
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisassociateServiceRoleFromAccountResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: "Gets the service role associated with IoT Greengrass for your\
        \ Amazon Web Services account in this Amazon Web Services Region. IoT Greengrass\
        \ uses this role to verify the identity of client devices and manage core\
        \ device connectivity information. For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-service-role.html\"\
        >Greengrass service role</a> in the <i>IoT Greengrass Version 2 Developer\
        \ Guide</i>."
      operationId: get_service_role_for_account
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetServiceRoleForAccountResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: "Associates a Greengrass service role with IoT Greengrass for your\
        \ Amazon Web Services account in this Amazon Web Services Region. IoT Greengrass\
        \ uses this role to verify the identity of client devices and manage core\
        \ device connectivity information. The role must include the <a href=\"https://console.aws.amazon.com/iam/home#/policies/arn:awsiam::aws:policy/service-role/AWSGreengrassResourceAccessRolePolicy\"\
        >AWSGreengrassResourceAccessRolePolicy</a> managed policy or a custom policy\
        \ that defines equivalent permissions for the IoT Greengrass features that\
        \ you use. For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-service-role.html\"\
        >Greengrass service role</a> in the <i>IoT Greengrass Version 2 Developer\
        \ Guide</i>."
      operationId: associate_service_role_to_account
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssociateServiceRoleToAccount_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssociateServiceRoleToAccountResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /greengrass/things/{thingName}/connectivityInfo:
    get:
      description: "<p>Retrieves connectivity information for a Greengrass core device.</p>\
        \ <p>Connectivity information includes endpoints and ports where client devices\
        \ can connect to an MQTT broker on the core device. When a client device calls\
        \ the <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-discover-api.html\"\
        >IoT Greengrass discovery API</a>, IoT Greengrass returns connectivity information\
        \ for all of the core devices where the client device can connect. For more\
        \ information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/connect-client-devices.html\"\
        >Connect client devices to core devices</a> in the <i>IoT Greengrass Version\
        \ 2 Developer Guide</i>.</p>"
      operationId: get_connectivity_info
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the core device. This is also the name of the IoT
          thing.
        explode: false
        in: path
        name: thingName
        required: true
        schema:
          maxLength: 128
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetConnectivityInfoResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: "<p>Updates connectivity information for a Greengrass core device.</p>\
        \ <p>Connectivity information includes endpoints and ports where client devices\
        \ can connect to an MQTT broker on the core device. When a client device calls\
        \ the <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-discover-api.html\"\
        >IoT Greengrass discovery API</a>, IoT Greengrass returns connectivity information\
        \ for all of the core devices where the client device can connect. For more\
        \ information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/connect-client-devices.html\"\
        >Connect client devices to core devices</a> in the <i>IoT Greengrass Version\
        \ 2 Developer Guide</i>.</p>"
      operationId: update_connectivity_info
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the core device. This is also the name of the IoT
          thing.
        explode: false
        in: path
        name: thingName
        required: true
        schema:
          maxLength: 128
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateConnectivityInfo_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateConnectivityInfoResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /greengrass/v2/components:
    get:
      description: Retrieves a paginated list of component summaries. This list includes
        components that you have permission to view.
      operationId: list_components
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "<p>The scope of the components to list.</p> <p>Default: <code>PRIVATE</code>\
          \ </p>"
        explode: true
        in: query
        name: scope
        required: false
        schema:
          enum:
          - PRIVATE
          - PUBLIC
          type: string
        style: form
      - description: The maximum number of results to be returned per paginated request.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The token to be used for the next set of paginated results.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListComponentsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /greengrass/v2/components/{arn}:
    delete:
      description: "<p>Deletes a version of a component from IoT Greengrass.</p> <note>\
        \ <p>This operation deletes the component's recipe and artifacts. As a result,\
        \ deployments that refer to this component version will fail. If you have\
        \ deployments that use this component version, you can remove the component\
        \ from the deployment or update the deployment to use a valid version.</p>\
        \ </note>"
      operationId: delete_component
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a>
          of the component version.
        explode: false
        in: path
        name: arn
        required: true
        schema:
          pattern: "arn:[^:]*:greengrass:[^:]*:(aws|[0-9]+):components:[^:]+:versions:[^:]+"
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Gets the recipe for a version of a component.
      operationId: get_component
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The format of the recipe.
        explode: true
        in: query
        name: recipeOutputFormat
        required: false
        schema:
          enum:
          - JSON
          - YAML
          type: string
        style: form
      - description: The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a>
          of the component version.
        explode: false
        in: path
        name: arn
        required: true
        schema:
          pattern: "arn:[^:]*:greengrass:[^:]*:(aws|[0-9]+):components:[^:]+:versions:[^:]+"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetComponentResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /greengrass/v2/components/{arn}/artifacts/{artifactName}:
    get:
      description: Gets the pre-signed URL to download a public or a Lambda component
        artifact. Core devices call this operation to identify the URL that they can
        use to download an artifact to install.
      operationId: get_component_version_artifact
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a>
          of the component version. Specify the ARN of a public or a Lambda component
          version.
        explode: false
        in: path
        name: arn
        required: true
        schema:
          pattern: "arn:[^:]*:greengrass:[^:]*:(aws|[0-9]+):components:[^:]+:versions:[^:]+"
          type: string
        style: simple
      - description: "<p>The name of the artifact.</p> <p>You can use the <a href=\"\
          https://docs.aws.amazon.com/greengrass/v2/APIReference/API_GetComponent.html\"\
          >GetComponent</a> operation to download the component recipe, which includes\
          \ the URI of the artifact. The artifact name is the section of the URI after\
          \ the scheme. For example, in the artifact URI <code>greengrass:SomeArtifact.zip</code>,\
          \ the artifact name is <code>SomeArtifact.zip</code>.</p>"
        explode: false
        in: path
        name: artifactName
        required: true
        schema:
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetComponentVersionArtifactResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /greengrass/v2/components/{arn}/metadata:
    get:
      description: Retrieves metadata for a version of a component.
      operationId: describe_component
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a>
          of the component version.
        explode: false
        in: path
        name: arn
        required: true
        schema:
          pattern: "arn:[^:]*:greengrass:[^:]*:(aws|[0-9]+):components:[^:]+:versions:[^:]+"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeComponentResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /greengrass/v2/components/{arn}/versions:
    get:
      description: Retrieves a paginated list of all versions for a component. Greater
        versions are listed first.
      operationId: list_component_versions
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a>
          of the component.
        explode: false
        in: path
        name: arn
        required: true
        schema:
          pattern: "arn:[^:]*:greengrass:[^:]*:(aws|[0-9]+):components:[^:]+"
          type: string
        style: simple
      - description: The maximum number of results to be returned per paginated request.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The token to be used for the next set of paginated results.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListComponentVersionsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /greengrass/v2/coreDevices:
    get:
      description: "<p>Retrieves a paginated list of Greengrass core devices.</p>\
        \ <note> <p>IoT Greengrass relies on individual devices to send status updates\
        \ to the Amazon Web Services Cloud. If the IoT Greengrass Core software isn't\
        \ running on the device, or if device isn't connected to the Amazon Web Services\
        \ Cloud, then the reported status of that device might not reflect its current\
        \ status. The status timestamp indicates when the device status was last updated.</p>\
        \ <p>Core devices send status updates at the following times:</p> <ul> <li>\
        \ <p>When the IoT Greengrass Core software starts</p> </li> <li> <p>When the\
        \ core device receives a deployment from the Amazon Web Services Cloud</p>\
        \ </li> <li> <p>When the status of any component on the core device becomes\
        \ <code>BROKEN</code> </p> </li> <li> <p>At a <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-nucleus-component.html#greengrass-nucleus-component-configuration-fss\"\
        >regular interval that you can configure</a>, which defaults to 24 hours</p>\
        \ </li> <li> <p>For IoT Greengrass Core v2.7.0, the core device sends status\
        \ updates upon local deployment and cloud deployment</p> </li> </ul> </note>"
      operationId: list_core_devices
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "The <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\
          >ARN</a> of the IoT thing group by which to filter. If you specify this\
          \ parameter, the list includes only core devices that have successfully\
          \ deployed a deployment that targets the thing group. When you remove a\
          \ core device from a thing group, the list continues to include that core\
          \ device."
        explode: true
        in: query
        name: thingGroupArn
        required: false
        schema:
          pattern: "arn:[^:]*:iot:[^:]*:[0-9]+:thinggroup/.+"
          type: string
        style: form
      - description: "<p>The core device status by which to filter. If you specify\
          \ this parameter, the list includes only core devices that have this status.\
          \ Choose one of the following options:</p> <ul> <li> <p> <code>HEALTHY</code>\
          \ – The IoT Greengrass Core software and all components run on the core\
          \ device without issue.</p> </li> <li> <p> <code>UNHEALTHY</code> – The\
          \ IoT Greengrass Core software or a component is in a failed state on the\
          \ core device.</p> </li> </ul>"
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - HEALTHY
          - UNHEALTHY
          type: string
        style: form
      - description: The maximum number of results to be returned per paginated request.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The token to be used for the next set of paginated results.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCoreDevicesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /greengrass/v2/coreDevices/{coreDeviceThingName}:
    delete:
      description: "Deletes a Greengrass core device, which is an IoT thing. This\
        \ operation removes the core device from the list of core devices. This operation\
        \ doesn't delete the IoT thing. For more information about how to delete the\
        \ IoT thing, see <a href=\"https://docs.aws.amazon.com/iot/latest/apireference/API_DeleteThing.html\"\
        >DeleteThing</a> in the <i>IoT API Reference</i>."
      operationId: delete_core_device
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the core device. This is also the name of the IoT
          thing.
        explode: false
        in: path
        name: coreDeviceThingName
        required: true
        schema:
          maxLength: 128
          minLength: 1
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: "<p>Retrieves metadata for a Greengrass core device.</p> <note>\
        \ <p>IoT Greengrass relies on individual devices to send status updates to\
        \ the Amazon Web Services Cloud. If the IoT Greengrass Core software isn't\
        \ running on the device, or if device isn't connected to the Amazon Web Services\
        \ Cloud, then the reported status of that device might not reflect its current\
        \ status. The status timestamp indicates when the device status was last updated.</p>\
        \ <p>Core devices send status updates at the following times:</p> <ul> <li>\
        \ <p>When the IoT Greengrass Core software starts</p> </li> <li> <p>When the\
        \ core device receives a deployment from the Amazon Web Services Cloud</p>\
        \ </li> <li> <p>When the status of any component on the core device becomes\
        \ <code>BROKEN</code> </p> </li> <li> <p>At a <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-nucleus-component.html#greengrass-nucleus-component-configuration-fss\"\
        >regular interval that you can configure</a>, which defaults to 24 hours</p>\
        \ </li> <li> <p>For IoT Greengrass Core v2.7.0, the core device sends status\
        \ updates upon local deployment and cloud deployment</p> </li> </ul> </note>"
      operationId: get_core_device
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the core device. This is also the name of the IoT
          thing.
        explode: false
        in: path
        name: coreDeviceThingName
        required: true
        schema:
          maxLength: 128
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCoreDeviceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /greengrass/v2/coreDevices/{coreDeviceThingName}/associateClientDevices:
    post:
      description: "<p>Associates a list of client devices with a core device. Use\
        \ this API operation to specify which client devices can discover a core device\
        \ through cloud discovery. With cloud discovery, client devices connect to\
        \ IoT Greengrass to retrieve associated core devices' connectivity information\
        \ and certificates. For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-cloud-discovery.html\"\
        >Configure cloud discovery</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>\
        \ <note> <p>Client devices are local IoT devices that connect to and communicate\
        \ with an IoT Greengrass core device over MQTT. You can connect client devices\
        \ to a core device to sync MQTT messages and data to Amazon Web Services IoT\
        \ Core and interact with client devices in Greengrass components. For more\
        \ information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/interact-with-local-iot-devices.html\"\
        >Interact with local IoT devices</a> in the <i>IoT Greengrass V2 Developer\
        \ Guide</i>.</p> </note>"
      operationId: batch_associate_client_device_with_core_device
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the core device. This is also the name of the IoT
          thing.
        explode: false
        in: path
        name: coreDeviceThingName
        required: true
        schema:
          maxLength: 128
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchAssociateClientDeviceWithCoreDevice_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchAssociateClientDeviceWithCoreDeviceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /greengrass/v2/coreDevices/{coreDeviceThingName}/associatedClientDevices:
    get:
      description: Retrieves a paginated list of client devices that are associated
        with a core device.
      operationId: list_client_devices_associated_with_core_device
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the core device. This is also the name of the IoT
          thing.
        explode: false
        in: path
        name: coreDeviceThingName
        required: true
        schema:
          maxLength: 128
          minLength: 1
          type: string
        style: simple
      - description: The maximum number of results to be returned per paginated request.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The token to be used for the next set of paginated results.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListClientDevicesAssociatedWithCoreDeviceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /greengrass/v2/coreDevices/{coreDeviceThingName}/disassociateClientDevices:
    post:
      description: "Disassociates a list of client devices from a core device. After\
        \ you disassociate a client device from a core device, the client device won't\
        \ be able to use cloud discovery to retrieve the core device's connectivity\
        \ information and certificates."
      operationId: batch_disassociate_client_device_from_core_device
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the core device. This is also the name of the IoT
          thing.
        explode: false
        in: path
        name: coreDeviceThingName
        required: true
        schema:
          maxLength: 128
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchDisassociateClientDeviceFromCoreDevice_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchDisassociateClientDeviceFromCoreDeviceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /greengrass/v2/coreDevices/{coreDeviceThingName}/effectiveDeployments:
    get:
      description: Retrieves a paginated list of deployment jobs that IoT Greengrass
        sends to Greengrass core devices.
      operationId: list_effective_deployments
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the core device. This is also the name of the IoT
          thing.
        explode: false
        in: path
        name: coreDeviceThingName
        required: true
        schema:
          maxLength: 128
          minLength: 1
          type: string
        style: simple
      - description: The maximum number of results to be returned per paginated request.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The token to be used for the next set of paginated results.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEffectiveDeploymentsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /greengrass/v2/coreDevices/{coreDeviceThingName}/installedComponents:
    get:
      description: "<p>Retrieves a paginated list of the components that a Greengrass\
        \ core device runs. By default, this list doesn't include components that\
        \ are deployed as dependencies of other components. To include dependencies\
        \ in the response, set the <code>topologyFilter</code> parameter to <code>ALL</code>.</p>\
        \ <note> <p>IoT Greengrass relies on individual devices to send status updates\
        \ to the Amazon Web Services Cloud. If the IoT Greengrass Core software isn't\
        \ running on the device, or if device isn't connected to the Amazon Web Services\
        \ Cloud, then the reported status of that device might not reflect its current\
        \ status. The status timestamp indicates when the device status was last updated.</p>\
        \ <p>Core devices send status updates at the following times:</p> <ul> <li>\
        \ <p>When the IoT Greengrass Core software starts</p> </li> <li> <p>When the\
        \ core device receives a deployment from the Amazon Web Services Cloud</p>\
        \ </li> <li> <p>When the status of any component on the core device becomes\
        \ <code>BROKEN</code> </p> </li> <li> <p>At a <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-nucleus-component.html#greengrass-nucleus-component-configuration-fss\"\
        >regular interval that you can configure</a>, which defaults to 24 hours</p>\
        \ </li> <li> <p>For IoT Greengrass Core v2.7.0, the core device sends status\
        \ updates upon local deployment and cloud deployment</p> </li> </ul> </note>"
      operationId: list_installed_components
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the core device. This is also the name of the IoT
          thing.
        explode: false
        in: path
        name: coreDeviceThingName
        required: true
        schema:
          maxLength: 128
          minLength: 1
          type: string
        style: simple
      - description: The maximum number of results to be returned per paginated request.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The token to be used for the next set of paginated results.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - description: "<p>The filter for the list of components. Choose from the following\
          \ options:</p> <ul> <li> <p> <code>ALL</code> – The list includes all components\
          \ installed on the core device.</p> </li> <li> <p> <code>ROOT</code> – The\
          \ list includes only <i>root</i> components, which are components that you\
          \ specify in a deployment. When you choose this option, the list doesn't\
          \ include components that the core device installs as dependencies of other\
          \ components.</p> </li> </ul> <p>Default: <code>ROOT</code> </p>"
        explode: true
        in: query
        name: topologyFilter
        required: false
        schema:
          enum:
          - ALL
          - ROOT
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListInstalledComponentsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /greengrass/v2/createComponentVersion:
    post:
      description: "<p>Creates a component. Components are software that run on Greengrass\
        \ core devices. After you develop and test a component on your core device,\
        \ you can use this operation to upload your component to IoT Greengrass. Then,\
        \ you can deploy the component to other core devices.</p> <p>You can use this\
        \ operation to do the following:</p> <ul> <li> <p> <b>Create components from\
        \ recipes</b> </p> <p>Create a component from a recipe, which is a file that\
        \ defines the component's metadata, parameters, dependencies, lifecycle, artifacts,\
        \ and platform capability. For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/component-recipe-reference.html\"\
        >IoT Greengrass component recipe reference</a> in the <i>IoT Greengrass V2\
        \ Developer Guide</i>.</p> <p>To create a component from a recipe, specify\
        \ <code>inlineRecipe</code> when you call this operation.</p> </li> <li> <p>\
        \ <b>Create components from Lambda functions</b> </p> <p>Create a component\
        \ from an Lambda function that runs on IoT Greengrass. This creates a recipe\
        \ and artifacts from the Lambda function's deployment package. You can use\
        \ this operation to migrate Lambda functions from IoT Greengrass V1 to IoT\
        \ Greengrass V2.</p> <p>This function only accepts Lambda functions that use\
        \ the following runtimes:</p> <ul> <li> <p>Python 2.7 – <code>python2.7</code>\
        \ </p> </li> <li> <p>Python 3.7 – <code>python3.7</code> </p> </li> <li> <p>Python\
        \ 3.8 – <code>python3.8</code> </p> </li> <li> <p>Python 3.9 – <code>python3.9</code>\
        \ </p> </li> <li> <p>Java 8 – <code>java8</code> </p> </li> <li> <p>Java 11\
        \ – <code>java11</code> </p> </li> <li> <p>Node.js 10 – <code>nodejs10.x</code>\
        \ </p> </li> <li> <p>Node.js 12 – <code>nodejs12.x</code> </p> </li> <li>\
        \ <p>Node.js 14 – <code>nodejs14.x</code> </p> </li> </ul> <p>To create a\
        \ component from a Lambda function, specify <code>lambdaFunction</code> when\
        \ you call this operation.</p> <note> <p>IoT Greengrass currently supports\
        \ Lambda functions on only Linux core devices.</p> </note> </li> </ul>"
      operationId: create_component_version
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateComponentVersion_request'
        required: true
        x-body-name: body
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateComponentVersionResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestAlreadyInProgressException'
          description: RequestAlreadyInProgressException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /greengrass/v2/deployments:
    get:
      description: Retrieves a paginated list of deployments.
      operationId: list_deployments
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a>
          of the target IoT thing or thing group.
        explode: true
        in: query
        name: targetArn
        required: false
        schema:
          pattern: "arn:[^:]*:iot:[^:]*:[0-9]+:(thing|thinggroup)/.+"
          type: string
        style: form
      - description: "<p>The filter for the list of deployments. Choose one of the\
          \ following options:</p> <ul> <li> <p> <code>ALL</code> – The list includes\
          \ all deployments.</p> </li> <li> <p> <code>LATEST_ONLY</code> – The list\
          \ includes only the latest revision of each deployment.</p> </li> </ul>\
          \ <p>Default: <code>LATEST_ONLY</code> </p>"
        explode: true
        in: query
        name: historyFilter
        required: false
        schema:
          enum:
          - ALL
          - LATEST_ONLY
          type: string
        style: form
      - description: The parent deployment's target <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a>
          within a subdeployment.
        explode: true
        in: query
        name: parentTargetArn
        required: false
        schema:
          pattern: "arn:[^:]*:iot:[^:]*:[0-9]+:thinggroup/.+"
          type: string
        style: form
      - description: The maximum number of results to be returned per paginated request.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The token to be used for the next set of paginated results.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDeploymentsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: "<p>Creates a continuous deployment for a target, which is a Greengrass\
        \ core device or group of core devices. When you add a new core device to\
        \ a group of core devices that has a deployment, IoT Greengrass deploys that\
        \ group's deployment to the new device.</p> <p>You can define one deployment\
        \ for each target. When you create a new deployment for a target that has\
        \ an existing deployment, you replace the previous deployment. IoT Greengrass\
        \ applies the new deployment to the target devices.</p> <p>Every deployment\
        \ has a revision number that indicates how many deployment revisions you define\
        \ for a target. Use this operation to create a new revision of an existing\
        \ deployment.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/create-deployments.html\"\
        >Create deployments</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>"
      operationId: create_deployment
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDeployment_request'
        required: true
        x-body-name: body
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDeploymentResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestAlreadyInProgressException'
          description: RequestAlreadyInProgressException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /greengrass/v2/deployments/{deploymentId}:
    delete:
      description: "<p>Deletes a deployment. To delete an active deployment, you must\
        \ first cancel it. For more information, see <a href=\"https://docs.aws.amazon.com/iot/latest/apireference/API_CancelDeployment.html\"\
        >CancelDeployment</a>.</p> <p>Deleting a deployment doesn't affect core devices\
        \ that run that deployment, because core devices store the deployment's configuration\
        \ on the device. Additionally, core devices can roll back to a previous deployment\
        \ that has been deleted.</p>"
      operationId: delete_deployment
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The ID of the deployment.
        explode: false
        in: path
        name: deploymentId
        required: true
        schema:
          minLength: 1
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Gets a deployment. Deployments define the components that run on
        Greengrass core devices.
      operationId: get_deployment
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The ID of the deployment.
        explode: false
        in: path
        name: deploymentId
        required: true
        schema:
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeploymentResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /greengrass/v2/deployments/{deploymentId}/cancel:
    post:
      description: "Cancels a deployment. This operation cancels the deployment for\
        \ devices that haven't yet received it. If a device already received the deployment,\
        \ this operation doesn't change anything for that device."
      operationId: cancel_deployment
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The ID of the deployment.
        explode: false
        in: path
        name: deploymentId
        required: true
        schema:
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancelDeploymentResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /greengrass/v2/resolveComponentCandidates:
    post:
      description: "<p>Retrieves a list of components that meet the component, version,\
        \ and platform requirements of a deployment. Greengrass core devices call\
        \ this operation when they receive a deployment to identify the components\
        \ to install.</p> <p>This operation identifies components that meet all dependency\
        \ requirements for a deployment. If the requirements conflict, then this operation\
        \ returns an error and the deployment fails. For example, this occurs if component\
        \ <code>A</code> requires version <code>&gt;2.0.0</code> and component <code>B</code>\
        \ requires version <code>&lt;2.0.0</code> of a component dependency.</p> <p>When\
        \ you specify the component candidates to resolve, IoT Greengrass compares\
        \ each component's digest from the core device with the component's digest\
        \ in the Amazon Web Services Cloud. If the digests don't match, then IoT Greengrass\
        \ specifies to use the version from the Amazon Web Services Cloud.</p> <important>\
        \ <p>To use this operation, you must use the data plane API endpoint and authenticate\
        \ with an IoT device certificate. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/greengrass.html\"\
        >IoT Greengrass endpoints and quotas</a>.</p> </important>"
      operationId: resolve_component_candidates
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResolveComponentCandidates_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResolveComponentCandidatesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /tags/{resourceArn}:
    get:
      description: Retrieves the list of tags for an IoT Greengrass resource.
      operationId: list_tags_for_resource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a>
          of the resource.
        explode: false
        in: path
        name: resourceArn
        required: true
        schema:
          pattern: "arn:[^:]*:greengrass:[^:]*:(aws|[0-9]+):(components|deployments|coreDevices):.*"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: "Adds tags to an IoT Greengrass resource. If a tag already exists\
        \ for the resource, this operation updates the tag's value."
      operationId: tag_resource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a>
          of the resource to tag.
        explode: false
        in: path
        name: resourceArn
        required: true
        schema:
          pattern: "arn:[^:]*:greengrass:[^:]*:(aws|[0-9]+):(components|deployments|coreDevices):.*"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagResource_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /tags/{resourceArn}#tagKeys:
    delete:
      description: Removes a tag from an IoT Greengrass resource.
      operationId: untag_resource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a>
          of the resource to untag.
        explode: false
        in: path
        name: resourceArn
        required: true
        schema:
          pattern: "arn:[^:]*:greengrass:[^:]*:(aws|[0-9]+):(components|deployments|coreDevices):.*"
          type: string
        style: simple
      - description: A list of keys for tags to remove from the resource.
        explode: true
        in: query
        name: tagKeys
        required: true
        schema:
          items:
            $ref: '#/components/schemas/TagKey'
          maxItems: 200
          minItems: 1
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UntagResourceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
      x-openapi-router-controller: openapi_server.controllers.default_controller
components:
  parameters:
    X-Amz-Content-Sha256:
      explode: false
      in: header
      name: X-Amz-Content-Sha256
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Date:
      explode: false
      in: header
      name: X-Amz-Date
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Algorithm:
      explode: false
      in: header
      name: X-Amz-Algorithm
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Credential:
      explode: false
      in: header
      name: X-Amz-Credential
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Security-Token:
      explode: false
      in: header
      name: X-Amz-Security-Token
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Signature:
      explode: false
      in: header
      name: X-Amz-Signature
      required: false
      schema:
        type: string
      style: simple
    X-Amz-SignedHeaders:
      explode: false
      in: header
      name: X-Amz-SignedHeaders
      required: false
      schema:
        type: string
      style: simple
  schemas:
    AssociateServiceRoleToAccountResponse:
      example:
        associatedAt: ""
      properties:
        associatedAt:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The time when the service role was associated with IoT Greengrass
              for your Amazon Web Services account in this Amazon Web Services Region.
            xml:
              name: AssociatedAt
          title: associatedAt
      title: AssociateServiceRoleToAccountResponse
      type: object
    ValidationException: {}
    InternalServerException: {}
    BatchAssociateClientDeviceWithCoreDeviceResponse:
      example:
        errorEntries: ""
      properties:
        errorEntries:
          allOf:
          - $ref: '#/components/schemas/AssociateClientDeviceWithCoreDeviceErrorList'
          - description: The list of any errors for the entries in the request. Each
              error entry contains the name of the IoT thing that failed to associate.
          title: errorEntries
      title: BatchAssociateClientDeviceWithCoreDeviceResponse
      type: object
    AssociateClientDeviceWithCoreDeviceEntry:
      description: Contains a request to associate a client device with a core device.
        The <a href="https://docs.aws.amazon.com/greengrass/v2/APIReference/API_BatchAssociateClientDeviceWithCoreDevice.html">BatchAssociateClientDeviceWithCoreDevice</a>
        operation consumes a list of these requests.
      properties:
        thingName:
          allOf:
          - $ref: '#/components/schemas/IoTThingName'
          - description: The name of the IoT thing that represents the client device
              to associate.
          title: thingName
      required:
      - thingName
      title: AssociateClientDeviceWithCoreDeviceEntry
      type: object
    ResourceNotFoundException: {}
    AccessDeniedException: {}
    ThrottlingException: {}
    BatchDisassociateClientDeviceFromCoreDeviceResponse:
      example:
        errorEntries: ""
      properties:
        errorEntries:
          allOf:
          - $ref: '#/components/schemas/DisassociateClientDeviceFromCoreDeviceErrorList'
          - description: The list of any errors for the entries in the request. Each
              error entry contains the name of the IoT thing that failed to disassociate.
          title: errorEntries
      title: BatchDisassociateClientDeviceFromCoreDeviceResponse
      type: object
    DisassociateClientDeviceFromCoreDeviceEntry:
      description: Contains a request to disassociate a client device from a core
        device. The <a href="https://docs.aws.amazon.com/greengrass/v2/APIReference/API_BatchDisassociateClientDeviceWithCoreDevice.html">BatchDisassociateClientDeviceWithCoreDevice</a>
        operation consumes a list of these requests.
      properties:
        thingName:
          allOf:
          - $ref: '#/components/schemas/IoTThingName'
          - description: The name of the IoT thing that represents the client device
              to disassociate.
          title: thingName
      required:
      - thingName
      title: DisassociateClientDeviceFromCoreDeviceEntry
      type: object
    CancelDeploymentResponse:
      example:
        message: ""
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          - description: A message that communicates if the cancel was successful.
          title: message
      title: CancelDeploymentResponse
      type: object
    ConflictException: {}
    CreateComponentVersionResponse:
      example:
        creationTimestamp: ""
        componentName: ""
        componentVersion: ""
        arn: ""
        status:
          componentState: ""
          vendorGuidance: ""
          message: ""
          vendorGuidanceMessage: ""
          errors: ""
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ComponentVersionARN'
          - description: The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a>
              of the component version.
          title: arn
        componentName:
          allOf:
          - $ref: '#/components/schemas/ComponentNameString'
          - description: The name of the component.
          title: componentName
        componentVersion:
          allOf:
          - $ref: '#/components/schemas/ComponentVersionString'
          - description: The version of the component.
          title: componentVersion
        creationTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The time at which the component was created, expressed in\
              \ ISO 8601 format."
          title: creationTimestamp
        status:
          $ref: '#/components/schemas/CreateComponentVersionResponse_status'
      required:
      - componentName
      - componentVersion
      - creationTimestamp
      - status
      title: CreateComponentVersionResponse
      type: object
    NonEmptyString:
      minLength: 1
      title: NonEmptyString
      type: string
    ComponentNameString:
      maxLength: 128
      minLength: 1
      type: string
    ComponentVersionString:
      maxLength: 64
      minLength: 1
      type: string
    ComponentPlatformList:
      items:
        $ref: '#/components/schemas/ComponentPlatform'
      type: array
    ComponentDependencyMap:
      additionalProperties:
        $ref: '#/components/schemas/ComponentDependencyRequirement'
      type: object
    LambdaExecutionParameters:
      description: Contains parameters for a Lambda function that runs on IoT Greengrass.
      properties:
        eventSources:
          allOf:
          - $ref: '#/components/schemas/LambdaEventSourceList'
          - description: The list of event sources to which to subscribe to receive
              work messages. The Lambda function runs when it receives a message from
              an event source. You can subscribe this function to local publish/subscribe
              messages and Amazon Web Services IoT Core MQTT messages.
          title: eventSources
        maxQueueSize:
          allOf:
          - $ref: '#/components/schemas/OptionalInteger'
          - description: The maximum size of the message queue for the Lambda function
              component. The IoT Greengrass core stores messages in a FIFO (first-in-first-out)
              queue until it can run the Lambda function to consume each message.
          title: maxQueueSize
        maxInstancesCount:
          allOf:
          - $ref: '#/components/schemas/OptionalInteger'
          - description: The maximum number of instances that a non-pinned Lambda
              function can run at the same time.
          title: maxInstancesCount
        maxIdleTimeInSeconds:
          allOf:
          - $ref: '#/components/schemas/OptionalInteger'
          - description: The maximum amount of time in seconds that a non-pinned Lambda
              function can idle before the IoT Greengrass Core software stops its
              process.
          title: maxIdleTimeInSeconds
        timeoutInSeconds:
          allOf:
          - $ref: '#/components/schemas/OptionalInteger'
          - description: The maximum amount of time in seconds that the Lambda function
              can process a work item.
          title: timeoutInSeconds
        statusTimeoutInSeconds:
          allOf:
          - $ref: '#/components/schemas/OptionalInteger'
          - description: The interval in seconds at which a pinned (also known as
              long-lived) Lambda function component sends status updates to the Lambda
              manager component.
          title: statusTimeoutInSeconds
        pinned:
          allOf:
          - $ref: '#/components/schemas/OptionalBoolean'
          - description: "<p>Whether or not the Lambda function is pinned, or long-lived.</p>\
              \ <ul> <li> <p>A pinned Lambda function starts when IoT Greengrass starts\
              \ and keeps running in its own container.</p> </li> <li> <p>A non-pinned\
              \ Lambda function starts only when it receives a work item and exists\
              \ after it idles for <code>maxIdleTimeInSeconds</code>. If the function\
              \ has multiple work items, the IoT Greengrass Core software creates\
              \ multiple instances of the function.</p> </li> </ul> <p>Default: <code>true</code>\
              \ </p>"
          title: pinned
        inputPayloadEncodingType:
          allOf:
          - $ref: '#/components/schemas/LambdaInputPayloadEncodingType'
          - description: "<p>The encoding type that the Lambda function supports.</p>\
              \ <p>Default: <code>json</code> </p>"
          title: inputPayloadEncodingType
        execArgs:
          allOf:
          - $ref: '#/components/schemas/LambdaExecArgsList'
          - description: The list of arguments to pass to the Lambda function when
              it runs.
          title: execArgs
        environmentVariables:
          allOf:
          - $ref: '#/components/schemas/LambdaEnvironmentVariables'
          - description: The map of environment variables that are available to the
              Lambda function when it runs.
          title: environmentVariables
        linuxProcessParams:
          $ref: '#/components/schemas/LambdaExecutionParameters_linuxProcessParams'
      title: LambdaExecutionParameters
      type: object
    TagValue:
      maxLength: 256
      title: TagValue
      type: string
    ServiceQuotaExceededException: {}
    RequestAlreadyInProgressException: {}
    CreateDeploymentResponse:
      example:
        deploymentId: ""
        iotJobArn: ""
        iotJobId: ""
      properties:
        deploymentId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          - description: The ID of the deployment.
          title: deploymentId
        iotJobId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          - description: The ID of the IoT job that applies the deployment to target
              devices.
          title: iotJobId
        iotJobArn:
          allOf:
          - $ref: '#/components/schemas/IoTJobARN'
          - description: The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a>
              of the IoT job that applies the deployment to target devices.
          title: iotJobArn
      title: CreateDeploymentResponse
      type: object
    ComponentDeploymentSpecification:
      description: Contains information about a component to deploy.
      properties:
        componentVersion:
          allOf:
          - $ref: '#/components/schemas/ComponentVersionString'
          - description: The version of the component.
          title: componentVersion
        configurationUpdate:
          $ref: '#/components/schemas/ComponentDeploymentSpecification_configurationUpdate'
        runWith:
          $ref: '#/components/schemas/ComponentDeploymentSpecification_runWith'
      title: ComponentDeploymentSpecification
      type: object
    IoTJobExecutionsRolloutConfig:
      description: Contains information about the rollout configuration for a job.
        This configuration defines the rate at which the job deploys a configuration
        to a fleet of target devices.
      properties:
        exponentialRate:
          $ref: '#/components/schemas/IoTJobExecutionsRolloutConfig_exponentialRate'
        maximumPerMinute:
          allOf:
          - $ref: '#/components/schemas/IoTJobMaxExecutionsPerMin'
          - description: "The maximum number of devices that receive a pending job\
              \ notification, per minute."
          title: maximumPerMinute
      title: IoTJobExecutionsRolloutConfig
      type: object
    IoTJobAbortConfig:
      description: Contains a list of criteria that define when and how to cancel
        a configuration deployment.
      properties:
        criteriaList:
          allOf:
          - $ref: '#/components/schemas/IoTJobAbortCriteriaList'
          - description: The list of criteria that define when and how to cancel the
              configuration deployment.
          title: criteriaList
      required:
      - criteriaList
      title: IoTJobAbortConfig
      type: object
    IoTJobTimeoutConfig:
      description: Contains information about the timeout configuration for a job.
      properties:
        inProgressTimeoutInMinutes:
          allOf:
          - $ref: '#/components/schemas/IoTJobInProgressTimeoutInMinutes'
          - description: "<p>The amount of time, in minutes, that devices have to\
              \ complete the job. The timer starts when the job status is set to <code>IN_PROGRESS</code>.\
              \ If the job status doesn't change to a terminal state before the time\
              \ expires, then the job status is set to <code>TIMED_OUT</code>.</p>\
              \ <p>The timeout interval must be between 1 minute and 7 days (10080\
              \ minutes).</p>"
          title: inProgressTimeoutInMinutes
      title: IoTJobTimeoutConfig
      type: object
    DeploymentFailureHandlingPolicy:
      enum:
      - ROLLBACK
      - DO_NOTHING
      title: DeploymentFailureHandlingPolicy
      type: string
    DeploymentComponentUpdatePolicy:
      description: "<p>Contains information about a deployment's policy that defines\
        \ when components are safe to update.</p> <p>Each component on a device can\
        \ report whether or not it's ready to update. After a component and its dependencies\
        \ are ready, they can apply the update in the deployment. You can configure\
        \ whether or not the deployment notifies components of an update and waits\
        \ for a response. You specify the amount of time each component has to respond\
        \ to the update notification.</p>"
      properties:
        timeoutInSeconds:
          allOf:
          - $ref: '#/components/schemas/OptionalInteger'
          - description: "<p>The amount of time in seconds that each component on\
              \ a device has to report that it's safe to update. If the component\
              \ waits for longer than this timeout, then the deployment proceeds on\
              \ the device.</p> <p>Default: <code>60</code> </p>"
          title: timeoutInSeconds
        action:
          allOf:
          - $ref: '#/components/schemas/DeploymentComponentUpdatePolicyAction'
          - description: "<p>Whether or not to notify components and wait for components\
              \ to become safe to update. Choose from the following options:</p> <ul>\
              \ <li> <p> <code>NOTIFY_COMPONENTS</code> – The deployment notifies\
              \ each component before it stops and updates that component. Components\
              \ can use the <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/interprocess-communication.html#ipc-operation-subscribetocomponentupdates\"\
              >SubscribeToComponentUpdates</a> IPC operation to receive these notifications.\
              \ Then, components can respond with the <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/interprocess-communication.html#ipc-operation-defercomponentupdate\"\
              >DeferComponentUpdate</a> IPC operation. For more information, see <a\
              \ href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/create-deployments.html\"\
              >Create deployments</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>\
              \ </li> <li> <p> <code>SKIP_NOTIFY_COMPONENTS</code> – The deployment\
              \ doesn't notify components or wait for them to be safe to update.</p>\
              \ </li> </ul> <p>Default: <code>NOTIFY_COMPONENTS</code> </p>"
          title: action
      title: DeploymentComponentUpdatePolicy
      type: object
    DeploymentConfigurationValidationPolicy:
      description: "Contains information about how long a component on a core device\
        \ can validate its configuration updates before it times out. Components can\
        \ use the <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/interprocess-communication.html#ipc-operation-subscribetovalidateconfigurationupdates\"\
        >SubscribeToValidateConfigurationUpdates</a> IPC operation to receive notifications\
        \ when a deployment specifies a configuration update. Then, components can\
        \ respond with the <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/interprocess-communication.html#ipc-operation-sendconfigurationvalidityreport\"\
        >SendConfigurationValidityReport</a> IPC operation. For more information,\
        \ see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/create-deployments.html\"\
        >Create deployments</a> in the <i>IoT Greengrass V2 Developer Guide</i>."
      properties:
        timeoutInSeconds:
          allOf:
          - $ref: '#/components/schemas/OptionalInteger'
          - description: "<p>The amount of time in seconds that a component can validate\
              \ its configuration updates. If the validation time exceeds this timeout,\
              \ then the deployment proceeds for the device.</p> <p>Default: <code>30</code>\
              \ </p>"
          title: timeoutInSeconds
      title: DeploymentConfigurationValidationPolicy
      type: object
    DescribeComponentResponse:
      example:
        creationTimestamp: ""
        publisher: ""
        description: ""
        componentName: ""
        componentVersion: ""
        arn: ""
        status:
          componentState: ""
          vendorGuidance: ""
          message: ""
          vendorGuidanceMessage: ""
          errors: ""
        platforms: ""
        tags: ""
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ComponentVersionARN'
          - description: The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a>
              of the component version.
          title: arn
        componentName:
          allOf:
          - $ref: '#/components/schemas/ComponentNameString'
          - description: The name of the component.
          title: componentName
        componentVersion:
          allOf:
          - $ref: '#/components/schemas/ComponentVersionString'
          - description: The version of the component.
          title: componentVersion
        creationTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The time at which the component was created, expressed in\
              \ ISO 8601 format."
          title: creationTimestamp
        publisher:
          allOf:
          - $ref: '#/components/schemas/PublisherString'
          - description: The publisher of the component version.
          title: publisher
        description:
          allOf:
          - $ref: '#/components/schemas/DescriptionString'
          - description: The description of the component version.
          title: description
        status:
          $ref: '#/components/schemas/CreateComponentVersionResponse_status'
        platforms:
          allOf:
          - $ref: '#/components/schemas/ComponentPlatformList'
          - description: The platforms that the component version supports.
          title: platforms
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: "A list of key-value pairs that contain metadata for the\
              \ resource. For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html\"\
              >Tag your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>."
          title: tags
      title: DescribeComponentResponse
      type: object
    DisassociateServiceRoleFromAccountResponse:
      example:
        disassociatedAt: ""
      properties:
        disassociatedAt:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The time when the service role was disassociated from IoT
              Greengrass for your Amazon Web Services account in this Amazon Web Services
              Region.
            xml:
              name: DisassociatedAt
          title: disassociatedAt
      title: DisassociateServiceRoleFromAccountResponse
      type: object
    GetComponentResponse:
      example:
        recipe: ""
        recipeOutputFormat: ""
        tags: ""
      properties:
        recipeOutputFormat:
          allOf:
          - $ref: '#/components/schemas/RecipeOutputFormat'
          - description: The format of the recipe.
          title: recipeOutputFormat
        recipe:
          allOf:
          - $ref: '#/components/schemas/RecipeBlob'
          - description: The recipe of the component version.
          title: recipe
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: "A list of key-value pairs that contain metadata for the\
              \ resource. For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html\"\
              >Tag your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>."
          title: tags
      required:
      - recipe
      - recipeOutputFormat
      title: GetComponentResponse
      type: object
    GetComponentVersionArtifactResponse:
      example:
        preSignedUrl: ""
      properties:
        preSignedUrl:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          - description: The URL of the artifact.
          title: preSignedUrl
      required:
      - preSignedUrl
      title: GetComponentVersionArtifactResponse
      type: object
    GetConnectivityInfoResponse:
      example:
        connectivityInfo: ""
        message: ""
      properties:
        connectivityInfo:
          allOf:
          - $ref: '#/components/schemas/connectivityInfoList'
          - description: The connectivity information for the core device.
            xml:
              name: ConnectivityInfo
          title: connectivityInfo
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: A message about the connectivity information request.
            xml:
              name: Message
          title: message
      title: GetConnectivityInfoResponse
      type: object
    GetCoreDeviceResponse:
      example:
        lastStatusUpdateTimestamp: ""
        coreDeviceThingName: ""
        coreVersion: ""
        platform: ""
        architecture: ""
        status: ""
        tags: ""
      properties:
        coreDeviceThingName:
          allOf:
          - $ref: '#/components/schemas/CoreDeviceThingName'
          - description: The name of the core device. This is also the name of the
              IoT thing.
          title: coreDeviceThingName
        coreVersion:
          allOf:
          - $ref: '#/components/schemas/GGCVersion'
          - description: "The version of the IoT Greengrass Core software that the\
              \ core device runs. This version is equivalent to the version of the\
              \ Greengrass nucleus component that runs on the core device. For more\
              \ information, see the <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-nucleus-component.html\"\
              >Greengrass nucleus component</a> in the <i>IoT Greengrass V2 Developer\
              \ Guide</i>."
          title: coreVersion
        platform:
          allOf:
          - $ref: '#/components/schemas/CoreDevicePlatformString'
          - description: The operating system platform that the core device runs.
          title: platform
        architecture:
          allOf:
          - $ref: '#/components/schemas/CoreDeviceArchitectureString'
          - description: The computer architecture of the core device.
          title: architecture
        status:
          allOf:
          - $ref: '#/components/schemas/CoreDeviceStatus'
          - description: <p>The status of the core device. The core device status
              can be:</p> <ul> <li> <p> <code>HEALTHY</code> – The IoT Greengrass
              Core software and all components run on the core device without issue.</p>
              </li> <li> <p> <code>UNHEALTHY</code> – The IoT Greengrass Core software
              or a component is in a failed state on the core device.</p> </li> </ul>
          title: status
        lastStatusUpdateTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The time at which the core device's status last updated,\
              \ expressed in ISO 8601 format."
          title: lastStatusUpdateTimestamp
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: "A list of key-value pairs that contain metadata for the\
              \ resource. For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html\"\
              >Tag your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>."
          title: tags
      title: GetCoreDeviceResponse
      type: object
    GetDeploymentResponse:
      example:
        components: ""
        iotJobConfiguration:
          timeoutConfig:
            inProgressTimeoutInMinutes: ""
          jobExecutionsRolloutConfig:
            maximumPerMinute: ""
            exponentialRate:
              baseRatePerMinute: ""
              incrementFactor: ""
              rateIncreaseCriteria:
                numberOfNotifiedThings: ""
                numberOfSucceededThings: ""
          abortConfig:
            criteriaList: ""
        deploymentPolicies:
          configurationValidationPolicy:
            timeoutInSeconds: ""
          componentUpdatePolicy:
            action: ""
            timeoutInSeconds: ""
          failureHandlingPolicy: ""
        iotJobId: ""
        targetArn: ""
        tags: ""
        revisionId: ""
        deploymentStatus: ""
        isLatestForTarget: ""
        deploymentId: ""
        creationTimestamp: ""
        iotJobArn: ""
        deploymentName: ""
        parentTargetArn: ""
      properties:
        targetArn:
          allOf:
          - $ref: '#/components/schemas/TargetARN'
          - description: The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a>
              of the target IoT thing or thing group.
          title: targetArn
        revisionId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          - description: The revision number of the deployment.
          title: revisionId
        deploymentId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          - description: The ID of the deployment.
          title: deploymentId
        deploymentName:
          allOf:
          - $ref: '#/components/schemas/NullableString'
          - description: The name of the deployment.
          title: deploymentName
        deploymentStatus:
          allOf:
          - $ref: '#/components/schemas/DeploymentStatus'
          - description: The status of the deployment.
          title: deploymentStatus
        iotJobId:
          allOf:
          - $ref: '#/components/schemas/NullableString'
          - description: The ID of the IoT job that applies the deployment to target
              devices.
          title: iotJobId
        iotJobArn:
          allOf:
          - $ref: '#/components/schemas/IoTJobARN'
          - description: The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a>
              of the IoT job that applies the deployment to target devices.
          title: iotJobArn
        components:
          allOf:
          - $ref: '#/components/schemas/ComponentDeploymentSpecifications'
          - description: "The components to deploy. This is a dictionary, where each\
              \ key is the name of a component, and each key's value is the version\
              \ and configuration to deploy for that component."
          title: components
        deploymentPolicies:
          $ref: '#/components/schemas/GetDeploymentResponse_deploymentPolicies'
        iotJobConfiguration:
          $ref: '#/components/schemas/GetDeploymentResponse_iotJobConfiguration'
        creationTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The time at which the deployment was created, expressed\
              \ in ISO 8601 format."
          title: creationTimestamp
        isLatestForTarget:
          allOf:
          - $ref: '#/components/schemas/IsLatestForTarget'
          - description: Whether or not the deployment is the latest revision for
              its target.
          title: isLatestForTarget
        parentTargetArn:
          allOf:
          - $ref: '#/components/schemas/ThingGroupARN'
          - description: The parent deployment's target <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a>
              within a subdeployment.
          title: parentTargetArn
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: "A list of key-value pairs that contain metadata for the\
              \ resource. For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html\"\
              >Tag your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>."
          title: tags
      title: GetDeploymentResponse
      type: object
    GetServiceRoleForAccountResponse:
      example:
        roleArn: ""
        associatedAt: ""
      properties:
        associatedAt:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The time when the service role was associated with IoT Greengrass
              for your Amazon Web Services account in this Amazon Web Services Region.
            xml:
              name: AssociatedAt
          title: associatedAt
        roleArn:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The ARN of the service role that is associated with IoT Greengrass
              for your Amazon Web Services account in this Amazon Web Services Region.
            xml:
              name: RoleArn
          title: roleArn
      title: GetServiceRoleForAccountResponse
      type: object
    ListClientDevicesAssociatedWithCoreDeviceResponse:
      example:
        nextToken: ""
        associatedClientDevices: ""
      properties:
        associatedClientDevices:
          allOf:
          - $ref: '#/components/schemas/AssociatedClientDeviceList'
          - description: A list that describes the client devices that are associated
              with the core device.
          title: associatedClientDevices
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextTokenString'
          - description: "The token for the next set of results, or null if there\
              \ are no additional results."
          title: nextToken
      title: ListClientDevicesAssociatedWithCoreDeviceResponse
      type: object
    ListComponentVersionsResponse:
      example:
        componentVersions: ""
        nextToken: ""
      properties:
        componentVersions:
          allOf:
          - $ref: '#/components/schemas/ComponentVersionList'
          - description: A list of versions that exist for the component.
          title: componentVersions
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextTokenString'
          - description: "The token for the next set of results, or null if there\
              \ are no additional results."
          title: nextToken
      title: ListComponentVersionsResponse
      type: object
    ListComponentsResponse:
      example:
        components: ""
        nextToken: ""
      properties:
        components:
          allOf:
          - $ref: '#/components/schemas/ComponentList'
          - description: A list that summarizes each component.
          title: components
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextTokenString'
          - description: "The token for the next set of results, or null if there\
              \ are no additional results."
          title: nextToken
      title: ListComponentsResponse
      type: object
    ListCoreDevicesResponse:
      example:
        coreDevices: ""
        nextToken: ""
      properties:
        coreDevices:
          allOf:
          - $ref: '#/components/schemas/CoreDevicesList'
          - description: A list that summarizes each core device.
          title: coreDevices
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextTokenString'
          - description: "The token for the next set of results, or null if there\
              \ are no additional results."
          title: nextToken
      title: ListCoreDevicesResponse
      type: object
    ListDeploymentsResponse:
      example:
        deployments: ""
        nextToken: ""
      properties:
        deployments:
          allOf:
          - $ref: '#/components/schemas/DeploymentList'
          - description: A list that summarizes each deployment.
          title: deployments
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextTokenString'
          - description: "The token for the next set of results, or null if there\
              \ are no additional results."
          title: nextToken
      title: ListDeploymentsResponse
      type: object
    ListEffectiveDeploymentsResponse:
      example:
        nextToken: ""
        effectiveDeployments: ""
      properties:
        effectiveDeployments:
          allOf:
          - $ref: '#/components/schemas/EffectiveDeploymentsList'
          - description: A list that summarizes each deployment on the core device.
          title: effectiveDeployments
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextTokenString'
          - description: "The token for the next set of results, or null if there\
              \ are no additional results."
          title: nextToken
      title: ListEffectiveDeploymentsResponse
      type: object
    ListInstalledComponentsResponse:
      example:
        installedComponents: ""
        nextToken: ""
      properties:
        installedComponents:
          allOf:
          - $ref: '#/components/schemas/InstalledComponentList'
          - description: <p>A list that summarizes each component on the core device.</p>
              <note> <p>Greengrass nucleus v2.7.0 or later is required to get an accurate
              <code>lastStatusChangeTimestamp</code> response. This response can be
              inaccurate in earlier Greengrass nucleus versions.</p> </note> <note>
              <p>Greengrass nucleus v2.8.0 or later is required to get an accurate
              <code>lastInstallationSource</code> and <code>lastReportedTimestamp</code>
              response. This response can be inaccurate or null in earlier Greengrass
              nucleus versions.</p> </note>
          title: installedComponents
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextTokenString'
          - description: "The token for the next set of results, or null if there\
              \ are no additional results."
          title: nextToken
      title: ListInstalledComponentsResponse
      type: object
    ListTagsForResourceResponse:
      example:
        tags: ""
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: "A list of key-value pairs that contain metadata for the\
              \ resource. For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html\"\
              >Tag your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>."
          title: tags
      title: ListTagsForResourceResponse
      type: object
    ResolveComponentCandidatesResponse:
      example:
        resolvedComponentVersions: ""
      properties:
        resolvedComponentVersions:
          allOf:
          - $ref: '#/components/schemas/ResolvedComponentVersionsList'
          - description: A list of components that meet the requirements that you
              specify in the request. This list includes each component's recipe that
              you can use to install the component.
          title: resolvedComponentVersions
      title: ResolveComponentCandidatesResponse
      type: object
    PlatformAttributesMap:
      additionalProperties:
        $ref: '#/components/schemas/NonEmptyString'
      type: object
    ComponentCandidate:
      description: Contains information about a component that is a candidate to deploy
        to a Greengrass core device.
      properties:
        componentName:
          allOf:
          - $ref: '#/components/schemas/ComponentNameString'
          - description: The name of the component.
          title: componentName
        componentVersion:
          allOf:
          - $ref: '#/components/schemas/ComponentVersionString'
          - description: The version of the component.
          title: componentVersion
        versionRequirements:
          allOf:
          - $ref: '#/components/schemas/ComponentVersionRequirementMap'
          - description: "<p>The version requirements for the component's dependencies.\
              \ Greengrass core devices get the version requirements from component\
              \ recipes.</p> <p>IoT Greengrass V2 uses semantic version constraints.\
              \ For more information, see <a href=\"https://semver.org/\">Semantic\
              \ Versioning</a>.</p>"
          title: versionRequirements
      title: ComponentCandidate
      type: object
    TagResourceResponse:
      properties: {}
      type: object
    UntagResourceResponse:
      properties: {}
      type: object
    TagKey:
      maxLength: 128
      minLength: 1
      title: TagKey
      type: string
    UpdateConnectivityInfoResponse:
      example:
        message: ""
        version: ""
      properties:
        version:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The new version of the connectivity information for the core
              device.
            xml:
              name: Version
          title: version
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: A message about the connectivity information update request.
            xml:
              name: Message
          title: message
      title: UpdateConnectivityInfoResponse
      type: object
    ConnectivityInfo:
      description: Contains information about an endpoint and port where client devices
        can connect to an MQTT broker on a Greengrass core device.
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: An ID for the connectivity information.
            xml:
              name: Id
          title: id
        hostAddress:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The IP address or DNS address where client devices can connect
              to an MQTT broker on the Greengrass core device.
            xml:
              name: HostAddress
          title: hostAddress
        portNumber:
          allOf:
          - $ref: '#/components/schemas/PortNumberInt'
          - description: "The port where the MQTT broker operates on the core device.\
              \ This port is typically 8883, which is the default port for the MQTT\
              \ broker component that runs on core devices."
            xml:
              name: PortNumber
          title: portNumber
        metadata:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: Additional metadata to provide to client devices that connect
              to this core device.
            xml:
              name: Metadata
          title: metadata
      title: ConnectivityInfo
      type: object
    IoTThingName:
      maxLength: 128
      minLength: 1
      type: string
    AssociateClientDeviceWithCoreDeviceEntryList:
      items:
        $ref: '#/components/schemas/AssociateClientDeviceWithCoreDeviceEntry'
      maxItems: 100
      minItems: 1
      type: array
    AssociateClientDeviceWithCoreDeviceErrorEntry:
      description: Contains an error that occurs from a request to associate a client
        device with a core device. The <a href="https://docs.aws.amazon.com/greengrass/v2/APIReference/API_BatchAssociateClientDeviceWithCoreDevice.html">BatchAssociateClientDeviceWithCoreDevice</a>
        operation returns a list of these errors.
      properties:
        thingName:
          allOf:
          - $ref: '#/components/schemas/IoTThingName'
          - description: The name of the IoT thing whose associate request failed.
          title: thingName
        code:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          - description: The error code for the request.
          title: code
        message:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          - description: A message that provides additional information about the
              error.
          title: message
      title: AssociateClientDeviceWithCoreDeviceErrorEntry
      type: object
    AssociateClientDeviceWithCoreDeviceErrorList:
      items:
        $ref: '#/components/schemas/AssociateClientDeviceWithCoreDeviceErrorEntry'
      maxItems: 100
      type: array
    String:
      title: String
      type: string
    AssociateServiceRoleToAccountRequest:
      example:
        roleArn: ""
      properties:
        roleArn:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The Amazon Resource Name (ARN) of the service role to associate
              with IoT Greengrass for your Amazon Web Services account in this Amazon
              Web Services Region.
            xml:
              name: RoleArn
      required:
      - roleArn
      title: AssociateServiceRoleToAccountRequest
      type: object
    Timestamp:
      format: date-time
      type: string
    AssociatedClientDevice:
      description: Contains information about a client device that is associated to
        a core device for cloud discovery.
      properties:
        thingName:
          allOf:
          - $ref: '#/components/schemas/IoTThingName'
          - description: The name of the IoT thing that represents the associated
              client device.
          title: thingName
        associationTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The time that the client device was associated, expressed\
              \ in ISO 8601 format."
          title: associationTimestamp
      title: AssociatedClientDevice
      type: object
    AssociatedClientDeviceList:
      items:
        $ref: '#/components/schemas/AssociatedClientDevice'
      maxItems: 100
      minItems: 1
      type: array
    BatchAssociateClientDeviceWithCoreDeviceRequest:
      example:
        entries: ""
      properties:
        entries:
          allOf:
          - $ref: '#/components/schemas/AssociateClientDeviceWithCoreDeviceEntryList'
          - description: The list of client devices to associate.
      title: BatchAssociateClientDeviceWithCoreDeviceRequest
      type: object
    DisassociateClientDeviceFromCoreDeviceEntryList:
      items:
        $ref: '#/components/schemas/DisassociateClientDeviceFromCoreDeviceEntry'
      maxItems: 100
      minItems: 1
      type: array
    BatchDisassociateClientDeviceFromCoreDeviceRequest:
      example:
        entries: ""
      properties:
        entries:
          allOf:
          - $ref: '#/components/schemas/DisassociateClientDeviceFromCoreDeviceEntryList'
          - description: The list of client devices to disassociate.
      title: BatchDisassociateClientDeviceFromCoreDeviceRequest
      type: object
    DisassociateClientDeviceFromCoreDeviceErrorList:
      items:
        $ref: '#/components/schemas/DisassociateClientDeviceFromCoreDeviceErrorEntry'
      maxItems: 100
      type: array
    CPU:
      format: double
      minimum: 0
      type: number
    CancelDeploymentRequest:
      properties: {}
      title: CancelDeploymentRequest
      type: object
    ClientTokenString:
      maxLength: 64
      minLength: 1
      pattern: "^[a-zA-Z0-9-]+$"
      type: string
    CloudComponentState:
      enum:
      - REQUESTED
      - INITIATED
      - DEPLOYABLE
      - FAILED
      - DEPRECATED
      title: CloudComponentState
      type: string
    StringMap:
      additionalProperties:
        $ref: '#/components/schemas/NonEmptyString'
      type: object
    VendorGuidance:
      enum:
      - ACTIVE
      - DISCONTINUED
      - DELETED
      title: VendorGuidance
      type: string
    CloudComponentStatus:
      description: Contains the status of a component version in the IoT Greengrass
        service.
      properties:
        componentState:
          allOf:
          - $ref: '#/components/schemas/CloudComponentState'
          - description: The state of the component version.
          title: componentState
        message:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          - description: "A message that communicates details, such as errors, about\
              \ the status of the component version."
          title: message
        errors:
          allOf:
          - $ref: '#/components/schemas/StringMap'
          - description: "A dictionary of errors that communicate why the component\
              \ version is in an error state. For example, if IoT Greengrass can't\
              \ access an artifact for the component version, then <code>errors</code>\
              \ contains the artifact's URI as a key, and the error message as the\
              \ value for that key."
          title: errors
        vendorGuidance:
          allOf:
          - $ref: '#/components/schemas/VendorGuidance'
          - description: "<p>The vendor guidance state for the component version.\
              \ This state indicates whether the component version has any issues\
              \ that you should consider before you deploy it. The vendor guidance\
              \ state can be:</p> <ul> <li> <p> <code>ACTIVE</code> – This component\
              \ version is available and recommended for use.</p> </li> <li> <p> <code>DISCONTINUED</code>\
              \ – This component version has been discontinued by its publisher. You\
              \ can deploy this component version, but we recommend that you use a\
              \ different version of this component.</p> </li> <li> <p> <code>DELETED</code>\
              \ – This component version has been deleted by its publisher, so you\
              \ can't deploy it. If you have any existing deployments that specify\
              \ this component version, those deployments will fail.</p> </li> </ul>"
          title: vendorGuidance
        vendorGuidanceMessage:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          - description: A message that communicates details about the vendor guidance
              state of the component version. This message communicates why a component
              version is discontinued or deleted.
          title: vendorGuidanceMessage
      title: CloudComponentStatus
      type: object
    ComponentARN:
      pattern: "arn:[^:]*:greengrass:[^:]*:(aws|[0-9]+):components:[^:]+"
      type: string
    ComponentLatestVersion:
      description: Contains information about the latest version of a component.
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ComponentVersionARN'
          - description: The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a>
              of the component version.
          title: arn
        componentVersion:
          allOf:
          - $ref: '#/components/schemas/ComponentVersionString'
          - description: The version of the component.
          title: componentVersion
        creationTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The time at which the component was created, expressed in\
              \ ISO 8601 format."
          title: creationTimestamp
        description:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          - description: The description of the component version.
          title: description
        publisher:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          - description: The publisher of the component version.
          title: publisher
        platforms:
          allOf:
          - $ref: '#/components/schemas/ComponentPlatformList'
          - description: The platforms that the component version supports.
          title: platforms
      title: ComponentLatestVersion
      type: object
    Component:
      description: Contains information about a component.
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ComponentARN'
          - description: The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a>
              of the component version.
          title: arn
        componentName:
          allOf:
          - $ref: '#/components/schemas/ComponentNameString'
          - description: The name of the component.
          title: componentName
        latestVersion:
          $ref: '#/components/schemas/Component_latestVersion'
      title: Component
      type: object
    ComponentVersionRequirementMap:
      additionalProperties:
        $ref: '#/components/schemas/NonEmptyString'
      type: object
    ComponentCandidateList:
      items:
        $ref: '#/components/schemas/ComponentCandidate'
      type: array
    ComponentConfigurationPath:
      maxLength: 256
      minLength: 0
      title: ComponentConfigurationPath
      type: string
    ComponentConfigurationPathList:
      items:
        $ref: '#/components/schemas/ComponentConfigurationPath'
      type: array
    ComponentConfigurationString:
      maxLength: 10485760
      minLength: 1
      type: string
    ComponentConfigurationUpdate:
      description: "Contains information about a deployment's update to a component's\
        \ configuration on Greengrass core devices. For more information, see <a href=\"\
        https://docs.aws.amazon.com/greengrass/v2/developerguide/update-component-configurations.html\"\
        >Update component configurations</a> in the <i>IoT Greengrass V2 Developer\
        \ Guide</i>."
      properties:
        merge:
          allOf:
          - $ref: '#/components/schemas/ComponentConfigurationString'
          - description: "A serialized JSON string that contains the configuration\
              \ object to merge to target devices. The core device merges this configuration\
              \ with the component's existing configuration. If this is the first\
              \ time a component deploys on a device, the core device merges this\
              \ configuration with the component's default configuration. This means\
              \ that the core device keeps it's existing configuration for keys and\
              \ values that you don't specify in this object. For more information,\
              \ see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/update-component-configurations.html#merge-configuration-update\"\
              >Merge configuration updates</a> in the <i>IoT Greengrass V2 Developer\
              \ Guide</i>."
          title: merge
        reset:
          allOf:
          - $ref: '#/components/schemas/ComponentConfigurationPathList'
          - description: "The list of configuration nodes to reset to default values\
              \ on target devices. Use JSON pointers to specify each node to reset.\
              \ JSON pointers start with a forward slash (<code>/</code>) and use\
              \ forward slashes to separate the key for each level in the object.\
              \ For more information, see the <a href=\"https://tools.ietf.org/html/rfc6901\"\
              >JSON pointer specification</a> and <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/update-component-configurations.html#reset-configuration-update\"\
              >Reset configuration updates</a> in the <i>IoT Greengrass V2 Developer\
              \ Guide</i>."
          title: reset
      title: ComponentConfigurationUpdate
      type: object
    ComponentDependencyRequirement:
      description: Contains information about a component dependency for a Lambda
        function component.
      properties:
        versionRequirement:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          - description: "<p>The component version requirement for the component dependency.</p>\
              \ <p>IoT Greengrass V2 uses semantic version constraints. For more information,\
              \ see <a href=\"https://semver.org/\">Semantic Versioning</a>.</p>"
          title: versionRequirement
        dependencyType:
          allOf:
          - $ref: '#/components/schemas/ComponentDependencyType'
          - description: "<p>The type of this dependency. Choose from the following\
              \ options:</p> <ul> <li> <p> <code>SOFT</code> – The component doesn't\
              \ restart if the dependency changes state.</p> </li> <li> <p> <code>HARD</code>\
              \ – The component restarts if the dependency changes state.</p> </li>\
              \ </ul> <p>Default: <code>HARD</code> </p>"
          title: dependencyType
      title: ComponentDependencyRequirement
      type: object
    ComponentDependencyType:
      enum:
      - HARD
      - SOFT
      title: ComponentDependencyType
      type: string
    ComponentRunWith:
      description: "Contains information system user and group that the IoT Greengrass\
        \ Core software uses to run component processes on the core device. For more\
        \ information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-greengrass-core-v2.html#configure-component-user\"\
        >Configure the user and group that run components</a> in the <i>IoT Greengrass\
        \ V2 Developer Guide</i>."
      properties:
        posixUser:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          - description: "<p>The POSIX system user and, optionally, group to use to\
              \ run this component on Linux core devices. The user, and group if specified,\
              \ must exist on each Linux core device. Specify the user and group separated\
              \ by a colon (<code>:</code>) in the following format: <code>user:group</code>.\
              \ The group is optional. If you don't specify a group, the IoT Greengrass\
              \ Core software uses the primary user for the group.</p> <p>If you omit\
              \ this parameter, the IoT Greengrass Core software uses the default\
              \ system user and group that you configure on the Greengrass nucleus\
              \ component. For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-greengrass-core-v2.html#configure-component-user\"\
              >Configure the user and group that run components</a>.</p>"
          title: posixUser
        systemResourceLimits:
          $ref: '#/components/schemas/ComponentRunWith_systemResourceLimits'
        windowsUser:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          - description: "<p>The Windows user to use to run this component on Windows\
              \ core devices. The user must exist on each Windows core device, and\
              \ its name and password must be in the LocalSystem account's Credentials\
              \ Manager instance.</p> <p>If you omit this parameter, the IoT Greengrass\
              \ Core software uses the default Windows user that you configure on\
              \ the Greengrass nucleus component. For more information, see <a href=\"\
              https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-greengrass-core-v2.html#configure-component-user\"\
              >Configure the user and group that run components</a>.</p>"
          title: windowsUser
      title: ComponentRunWith
      type: object
    ComponentDeploymentSpecifications:
      additionalProperties:
        $ref: '#/components/schemas/ComponentDeploymentSpecification'
      type: object
    ComponentVersionARN:
      pattern: "arn:[^:]*:greengrass:[^:]*:(aws|[0-9]+):components:[^:]+:versions:[^:]+"
      type: string
    ComponentList:
      items:
        $ref: '#/components/schemas/Component'
      type: array
    ComponentPlatform:
      description: Contains information about a platform that a component supports.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          - description: "<p>The friendly name of the platform. This name helps you\
              \ identify the platform.</p> <p>If you omit this parameter, IoT Greengrass\
              \ creates a friendly name from the <code>os</code> and <code>architecture</code>\
              \ of the platform.</p>"
          title: name
        attributes:
          allOf:
          - $ref: '#/components/schemas/PlatformAttributesMap'
          - description: "A dictionary of attributes for the platform. The IoT Greengrass\
              \ Core software defines the <code>os</code> and <code>architecture</code>\
              \ by default. You can specify additional platform attributes for a core\
              \ device when you deploy the Greengrass nucleus component. For more\
              \ information, see the <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-nucleus-component.html\"\
              >Greengrass nucleus component</a> in the <i>IoT Greengrass V2 Developer\
              \ Guide</i>."
          title: attributes
      title: ComponentPlatform
      type: object
    SystemResourceLimits:
      description: "Contains information about system resource limits that the IoT\
        \ Greengrass Core software applies to a component's processes. For more information,\
        \ see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-greengrass-core-v2.html#configure-component-system-resource-limits\"\
        >Configure system resource limits for components</a>."
      properties:
        memory:
          allOf:
          - $ref: '#/components/schemas/Memory'
          - description: "The maximum amount of RAM, expressed in kilobytes, that\
              \ a component's processes can use on the core device."
          title: memory
        cpus:
          allOf:
          - $ref: '#/components/schemas/CPU'
          - description: "The maximum amount of CPU time that a component's processes\
              \ can use on the core device. A core device's total CPU time is equivalent\
              \ to the device's number of CPU cores. For example, on a core device\
              \ with 4 CPU cores, you can set this value to <code>2</code> to limit\
              \ the component's processes to 50 percent usage of each CPU core. On\
              \ a device with 1 CPU core, you can set this value to <code>0.25</code>\
              \ to limit the component's processes to 25 percent usage of the CPU.\
              \ If you set this value to a number greater than the number of CPU cores,\
              \ the IoT Greengrass Core software doesn't limit the component's CPU\
              \ usage."
          title: cpus
      title: SystemResourceLimits
      type: object
    ComponentVersionListItem:
      description: Contains information about a component version in a list.
      properties:
        componentName:
          allOf:
          - $ref: '#/components/schemas/ComponentNameString'
          - description: The name of the component.
          title: componentName
        componentVersion:
          allOf:
          - $ref: '#/components/schemas/ComponentVersionString'
          - description: The version of the component.
          title: componentVersion
        arn:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          - description: The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a>
              of the component version.
          title: arn
      title: ComponentVersionListItem
      type: object
    ComponentVersionList:
      items:
        $ref: '#/components/schemas/ComponentVersionListItem'
      type: array
    ComponentVisibilityScope:
      enum:
      - PRIVATE
      - PUBLIC
      type: string
    PortNumberInt:
      maximum: 65535
      minimum: 0
      type: integer
    CoreDeviceThingName:
      maxLength: 128
      minLength: 1
      type: string
    CoreDeviceStatus:
      enum:
      - HEALTHY
      - UNHEALTHY
      title: CoreDeviceStatus
      type: string
    CoreDevice:
      description: "Contains information about a Greengrass core device, which is\
        \ an IoT thing that runs the IoT Greengrass Core software."
      properties:
        coreDeviceThingName:
          allOf:
          - $ref: '#/components/schemas/CoreDeviceThingName'
          - description: The name of the core device. This is also the name of the
              IoT thing.
          title: coreDeviceThingName
        status:
          allOf:
          - $ref: '#/components/schemas/CoreDeviceStatus'
          - description: <p>The status of the core device. Core devices can have the
              following statuses:</p> <ul> <li> <p> <code>HEALTHY</code> – The IoT
              Greengrass Core software and all components run on the core device without
              issue.</p> </li> <li> <p> <code>UNHEALTHY</code> – The IoT Greengrass
              Core software or a component is in a failed state on the core device.</p>
              </li> </ul>
          title: status
        lastStatusUpdateTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The time at which the core device's status last updated,\
              \ expressed in ISO 8601 format."
          title: lastStatusUpdateTimestamp
      title: CoreDevice
      type: object
    CoreDeviceArchitectureString:
      maxLength: 255
      minLength: 1
      type: string
    CoreDevicePlatformString:
      maxLength: 255
      minLength: 1
      type: string
    CoreDevicesList:
      items:
        $ref: '#/components/schemas/CoreDevice'
      type: array
    RecipeBlob:
      type: string
    LambdaFunctionRecipeSource:
      description: Contains information about an Lambda function to import to create
        a component.
      properties:
        lambdaArn:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          - description: The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a>
              of the Lambda function. The ARN must include the version of the function
              to import. You can't use version aliases like <code>$LATEST</code>.
          title: lambdaArn
        componentName:
          allOf:
          - $ref: '#/components/schemas/ComponentNameString'
          - description: <p>The name of the component.</p> <p>Defaults to the name
              of the Lambda function.</p>
          title: componentName
        componentVersion:
          allOf:
          - $ref: '#/components/schemas/ComponentVersionString'
          - description: "<p>The version of the component.</p> <p>Defaults to the\
              \ version of the Lambda function as a semantic version. For example,\
              \ if your function version is <code>3</code>, the component version\
              \ becomes <code>3.0.0</code>.</p>"
          title: componentVersion
        componentPlatforms:
          allOf:
          - $ref: '#/components/schemas/ComponentPlatformList'
          - description: The platforms that the component version supports.
          title: componentPlatforms
        componentDependencies:
          allOf:
          - $ref: '#/components/schemas/ComponentDependencyMap'
          - description: The component versions on which this Lambda function component
              depends.
          title: componentDependencies
        componentLambdaParameters:
          $ref: '#/components/schemas/CreateComponentVersion_request_lambdaFunction_componentLambdaParameters'
      required:
      - lambdaArn
      title: LambdaFunctionRecipeSource
      type: object
    TagMap:
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
      maxProperties: 200
      minProperties: 1
      type: object
    CreateComponentVersionRequest:
      example:
        lambdaFunction:
          componentDependencies: ""
          componentPlatforms: ""
          lambdaArn: ""
          componentName: ""
          componentVersion: ""
          componentLambdaParameters:
            maxIdleTimeInSeconds: ""
            execArgs: ""
            eventSources: ""
            pinned: ""
            maxQueueSize: ""
            linuxProcessParams:
              isolationMode: ""
              containerParams:
                mountROSysfs: ""
                memorySizeInKB: ""
                devices: ""
                volumes: ""
            statusTimeoutInSeconds: ""
            environmentVariables: ""
            maxInstancesCount: ""
            inputPayloadEncodingType: ""
            timeoutInSeconds: ""
        clientToken: ""
        inlineRecipe: ""
        tags: ""
      properties:
        inlineRecipe:
          allOf:
          - $ref: '#/components/schemas/RecipeBlob'
          - description: "<p>The recipe to use to create the component. The recipe\
              \ defines the component's metadata, parameters, dependencies, lifecycle,\
              \ artifacts, and platform compatibility.</p> <p>You must specify either\
              \ <code>inlineRecipe</code> or <code>lambdaFunction</code>.</p>"
        lambdaFunction:
          $ref: '#/components/schemas/CreateComponentVersionRequest_lambdaFunction'
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: "A list of key-value pairs that contain metadata for the\
              \ resource. For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html\"\
              >Tag your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>."
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientTokenString'
          - description: "A unique, case-sensitive identifier that you can provide\
              \ to ensure that the request is idempotent. Idempotency means that the\
              \ request is successfully processed only once, even if you send the\
              \ request multiple times. When a request succeeds, and you specify the\
              \ same client token for subsequent successful requests, the IoT Greengrass\
              \ V2 service returns the successful response that it caches from the\
              \ previous request. IoT Greengrass V2 caches successful responses for\
              \ idempotent requests for up to 8 hours."
      title: CreateComponentVersionRequest
      type: object
    TargetARN:
      pattern: "arn:[^:]*:iot:[^:]*:[0-9]+:(thing|thinggroup)/.+"
      type: string
    DeploymentNameString:
      maxLength: 256
      minLength: 1
      type: string
    DeploymentIoTJobConfiguration:
      description: Contains information about an IoT job configuration.
      properties:
        jobExecutionsRolloutConfig:
          $ref: '#/components/schemas/CreateDeployment_request_iotJobConfiguration_jobExecutionsRolloutConfig'
        abortConfig:
          $ref: '#/components/schemas/CreateDeployment_request_iotJobConfiguration_abortConfig'
        timeoutConfig:
          $ref: '#/components/schemas/CreateDeployment_request_iotJobConfiguration_timeoutConfig'
      title: DeploymentIoTJobConfiguration
      type: object
    DeploymentPolicies:
      description: Contains information about policies that define how a deployment
        updates components and handles failure.
      properties:
        failureHandlingPolicy:
          allOf:
          - $ref: '#/components/schemas/DeploymentFailureHandlingPolicy'
          - description: "<p>The failure handling policy for the configuration deployment.\
              \ This policy defines what to do if the deployment fails.</p> <p>Default:\
              \ <code>ROLLBACK</code> </p>"
          title: failureHandlingPolicy
        componentUpdatePolicy:
          $ref: '#/components/schemas/CreateDeployment_request_deploymentPolicies_componentUpdatePolicy'
        configurationValidationPolicy:
          $ref: '#/components/schemas/CreateDeployment_request_deploymentPolicies_configurationValidationPolicy'
      title: DeploymentPolicies
      type: object
    ThingGroupARN:
      pattern: "arn:[^:]*:iot:[^:]*:[0-9]+:thinggroup/.+"
      type: string
    CreateDeploymentRequest:
      example:
        components: ""
        iotJobConfiguration:
          timeoutConfig:
            inProgressTimeoutInMinutes: ""
          jobExecutionsRolloutConfig:
            maximumPerMinute: ""
            exponentialRate:
              baseRatePerMinute: ""
              incrementFactor: ""
              rateIncreaseCriteria:
                numberOfNotifiedThings: ""
                numberOfSucceededThings: ""
          abortConfig:
            criteriaList: ""
        clientToken: ""
        deploymentPolicies:
          configurationValidationPolicy:
            timeoutInSeconds: ""
          componentUpdatePolicy:
            action: ""
            timeoutInSeconds: ""
          failureHandlingPolicy: ""
        deploymentName: ""
        parentTargetArn: ""
        targetArn: ""
        tags: ""
      properties:
        targetArn:
          allOf:
          - $ref: '#/components/schemas/TargetARN'
          - description: "The <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\
              >ARN</a> of the target IoT thing or thing group. When creating a subdeployment,\
              \ the targetARN can only be a thing group."
        deploymentName:
          allOf:
          - $ref: '#/components/schemas/DeploymentNameString'
          - description: The name of the deployment.
        components:
          allOf:
          - $ref: '#/components/schemas/ComponentDeploymentSpecifications'
          - description: "The components to deploy. This is a dictionary, where each\
              \ key is the name of a component, and each key's value is the version\
              \ and configuration to deploy for that component."
        iotJobConfiguration:
          $ref: '#/components/schemas/GetDeploymentResponse_iotJobConfiguration'
        deploymentPolicies:
          $ref: '#/components/schemas/GetDeploymentResponse_deploymentPolicies'
        parentTargetArn:
          allOf:
          - $ref: '#/components/schemas/ThingGroupARN'
          - description: The parent deployment's target <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a>
              within a subdeployment.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: "A list of key-value pairs that contain metadata for the\
              \ resource. For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html\"\
              >Tag your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>."
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientTokenString'
          - description: "A unique, case-sensitive identifier that you can provide\
              \ to ensure that the request is idempotent. Idempotency means that the\
              \ request is successfully processed only once, even if you send the\
              \ request multiple times. When a request succeeds, and you specify the\
              \ same client token for subsequent successful requests, the IoT Greengrass\
              \ V2 service returns the successful response that it caches from the\
              \ previous request. IoT Greengrass V2 caches successful responses for\
              \ idempotent requests for up to 8 hours."
      required:
      - targetArn
      title: CreateDeploymentRequest
      type: object
    IoTJobARN:
      pattern: "arn:[^:]*:iot:[^:]+:[0-9]+:job/.+"
      type: string
    DefaultMaxResults:
      maximum: 100
      minimum: 1
      type: integer
    DeleteComponentRequest:
      properties: {}
      title: DeleteComponentRequest
      type: object
    DeleteCoreDeviceRequest:
      properties: {}
      title: DeleteCoreDeviceRequest
      type: object
    DeleteDeploymentRequest:
      properties: {}
      title: DeleteDeploymentRequest
      type: object
    DeploymentStatus:
      enum:
      - ACTIVE
      - COMPLETED
      - CANCELED
      - FAILED
      - INACTIVE
      title: DeploymentStatus
      type: string
    IsLatestForTarget:
      type: boolean
    Deployment:
      description: Contains information about a deployment.
      properties:
        targetArn:
          allOf:
          - $ref: '#/components/schemas/TargetARN'
          - description: "The <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\
              >ARN</a> of the target IoT thing or thing group. When creating a subdeployment,\
              \ the targetARN can only be a thing group."
          title: targetArn
        revisionId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          - description: The revision number of the deployment.
          title: revisionId
        deploymentId:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          - description: The ID of the deployment.
          title: deploymentId
        deploymentName:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          - description: The name of the deployment.
          title: deploymentName
        creationTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The time at which the deployment was created, expressed\
              \ in ISO 8601 format."
          title: creationTimestamp
        deploymentStatus:
          allOf:
          - $ref: '#/components/schemas/DeploymentStatus'
          - description: The status of the deployment.
          title: deploymentStatus
        isLatestForTarget:
          allOf:
          - $ref: '#/components/schemas/IsLatestForTarget'
          - description: Whether or not the deployment is the latest revision for
              its target.
          title: isLatestForTarget
        parentTargetArn:
          allOf:
          - $ref: '#/components/schemas/ThingGroupARN'
          - description: The parent deployment's target <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a>
              within a subdeployment.
          title: parentTargetArn
      title: Deployment
      type: object
    OptionalInteger:
      type: integer
    DeploymentComponentUpdatePolicyAction:
      enum:
      - NOTIFY_COMPONENTS
      - SKIP_NOTIFY_COMPONENTS
      title: DeploymentComponentUpdatePolicyAction
      type: string
    DeploymentHistoryFilter:
      enum:
      - ALL
      - LATEST_ONLY
      type: string
    DeploymentID:
      type: string
    DeploymentList:
      items:
        $ref: '#/components/schemas/Deployment'
      type: array
    DeploymentName:
      type: string
    DescribeComponentRequest:
      properties: {}
      title: DescribeComponentRequest
      type: object
    PublisherString:
      type: string
    DescriptionString:
      type: string
    Description:
      maxLength: 500
      minLength: 1
      type: string
    DisassociateClientDeviceFromCoreDeviceErrorEntry:
      description: Contains an error that occurs from a request to disassociate a
        client device from a core device. The <a href="https://docs.aws.amazon.com/greengrass/v2/APIReference/API_BatchDisassociateClientDeviceWithCoreDevice.html">BatchDisassociateClientDeviceWithCoreDevice</a>
        operation returns a list of these errors.
      properties:
        thingName:
          allOf:
          - $ref: '#/components/schemas/IoTThingName'
          - description: The name of the IoT thing whose disassociate request failed.
          title: thingName
        code:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          - description: The error code for the request.
          title: code
        message:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          - description: A message that provides additional information about the
              error.
          title: message
      title: DisassociateClientDeviceFromCoreDeviceErrorEntry
      type: object
    DisassociateServiceRoleFromAccountRequest:
      properties: {}
      title: DisassociateServiceRoleFromAccountRequest
      type: object
    IoTJobId:
      maxLength: 255
      minLength: 1
      type: string
    EffectiveDeploymentExecutionStatus:
      enum:
      - IN_PROGRESS
      - QUEUED
      - FAILED
      - COMPLETED
      - TIMED_OUT
      - CANCELED
      - REJECTED
      - SUCCEEDED
      title: EffectiveDeploymentExecutionStatus
      type: string
    Reason:
      type: string
    EffectiveDeploymentStatusDetails:
      description: <p>Contains all error-related information for the deployment record.
        The status details will be null if the deployment is in a success state.</p>
        <note> <p>Greengrass nucleus v2.8.0 or later is required to get an accurate
        <code>errorStack</code> and <code>errorTypes</code> response. This field will
        not be returned for earlier Greengrass nucleus versions.</p> </note>
      properties:
        errorStack:
          allOf:
          - $ref: '#/components/schemas/EffectiveDeploymentErrorStack'
          - description: Contains an ordered list of short error codes that range
              from the most generic error to the most specific one. The error codes
              describe the reason for failure whenever the <code>coreDeviceExecutionStatus</code>
              is in a failed state. The response will be an empty list if there is
              no error.
          title: errorStack
        errorTypes:
          allOf:
          - $ref: '#/components/schemas/EffectiveDeploymentErrorTypeList'
          - description: Contains tags which describe the error. You can use the error
              types to classify errors to assist with remediating the failure. The
              response will be an empty list if there is no error.
          title: errorTypes
      title: EffectiveDeploymentStatusDetails
      type: object
    EffectiveDeployment:
      description: Contains information about a deployment job that IoT Greengrass
        sends to a Greengrass core device.
      properties:
        deploymentId:
          allOf:
          - $ref: '#/components/schemas/DeploymentID'
          - description: The ID of the deployment.
          title: deploymentId
        deploymentName:
          allOf:
          - $ref: '#/components/schemas/DeploymentName'
          - description: The name of the deployment.
          title: deploymentName
        iotJobId:
          allOf:
          - $ref: '#/components/schemas/IoTJobId'
          - description: The ID of the IoT job that applies the deployment to target
              devices.
          title: iotJobId
        iotJobArn:
          allOf:
          - $ref: '#/components/schemas/IoTJobARN'
          - description: The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a>
              of the IoT job that applies the deployment to target devices.
          title: iotJobArn
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The description of the deployment job.
          title: description
        targetArn:
          allOf:
          - $ref: '#/components/schemas/TargetARN'
          - description: The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a>
              of the target IoT thing or thing group.
          title: targetArn
        coreDeviceExecutionStatus:
          allOf:
          - $ref: '#/components/schemas/EffectiveDeploymentExecutionStatus'
          - description: "<p>The status of the deployment job on the Greengrass core\
              \ device.</p> <ul> <li> <p> <code>IN_PROGRESS</code> – The deployment\
              \ job is running.</p> </li> <li> <p> <code>QUEUED</code> – The deployment\
              \ job is in the job queue and waiting to run.</p> </li> <li> <p> <code>FAILED</code>\
              \ – The deployment failed. For more information, see the <code>statusDetails</code>\
              \ field.</p> </li> <li> <p> <code>COMPLETED</code> – The deployment\
              \ to an IoT thing was completed successfully.</p> </li> <li> <p> <code>TIMED_OUT</code>\
              \ – The deployment didn't complete in the allotted time. </p> </li>\
              \ <li> <p> <code>CANCELED</code> – The deployment was canceled by the\
              \ user.</p> </li> <li> <p> <code>REJECTED</code> – The deployment was\
              \ rejected. For more information, see the <code>statusDetails</code>\
              \ field.</p> </li> <li> <p> <code>SUCCEEDED</code> – The deployment\
              \ to an IoT thing group was completed successfully.</p> </li> </ul>"
          title: coreDeviceExecutionStatus
        reason:
          allOf:
          - $ref: '#/components/schemas/Reason'
          - description: "The reason code for the update, if the job was updated."
          title: reason
        creationTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The time at which the deployment was created, expressed\
              \ in ISO 8601 format."
          title: creationTimestamp
        modifiedTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The time at which the deployment job was last modified,\
              \ expressed in ISO 8601 format."
          title: modifiedTimestamp
        statusDetails:
          $ref: '#/components/schemas/EffectiveDeployment_statusDetails'
      required:
      - coreDeviceExecutionStatus
      - creationTimestamp
      - deploymentId
      - deploymentName
      - modifiedTimestamp
      - targetArn
      title: EffectiveDeployment
      type: object
    EffectiveDeploymentErrorCode:
      maxLength: 255
      minLength: 1
      title: EffectiveDeploymentErrorCode
      type: string
    EffectiveDeploymentErrorStack:
      items:
        $ref: '#/components/schemas/EffectiveDeploymentErrorCode'
      type: array
    EffectiveDeploymentErrorType:
      maxLength: 255
      minLength: 1
      title: EffectiveDeploymentErrorType
      type: string
    EffectiveDeploymentErrorTypeList:
      items:
        $ref: '#/components/schemas/EffectiveDeploymentErrorType'
      type: array
    EffectiveDeploymentsList:
      items:
        $ref: '#/components/schemas/EffectiveDeployment'
      type: array
    FileSystemPath:
      type: string
    GGCVersion:
      maxLength: 255
      minLength: 1
      type: string
    GenericV2ARN:
      pattern: "arn:[^:]*:greengrass:[^:]*:(aws|[0-9]+):(components|deployments|coreDevices):.*"
      type: string
    RecipeOutputFormat:
      enum:
      - JSON
      - YAML
      title: RecipeOutputFormat
      type: string
    GetComponentRequest:
      properties: {}
      title: GetComponentRequest
      type: object
    GetComponentVersionArtifactRequest:
      properties: {}
      title: GetComponentVersionArtifactRequest
      type: object
    GetConnectivityInfoRequest:
      properties: {}
      title: GetConnectivityInfoRequest
      type: object
    connectivityInfoList:
      items:
        $ref: '#/components/schemas/ConnectivityInfo'
      type: array
    GetCoreDeviceRequest:
      properties: {}
      title: GetCoreDeviceRequest
      type: object
    GetDeploymentRequest:
      properties: {}
      title: GetDeploymentRequest
      type: object
    NullableString:
      type: string
    GetServiceRoleForAccountRequest:
      properties: {}
      title: GetServiceRoleForAccountRequest
      type: object
    InstalledComponentLifecycleState:
      enum:
      - NEW
      - INSTALLED
      - STARTING
      - RUNNING
      - STOPPING
      - ERRORED
      - BROKEN
      - FINISHED
      title: InstalledComponentLifecycleState
      type: string
    LifecycleStateDetails:
      maxLength: 1000
      minLength: 1
      type: string
    IsRoot:
      type: boolean
    InstalledComponentLifecycleStatusCodeList:
      items:
        $ref: '#/components/schemas/InstalledComponentLifecycleStatusCode'
      type: array
    InstalledComponent:
      description: Contains information about a component on a Greengrass core device.
      properties:
        componentName:
          allOf:
          - $ref: '#/components/schemas/ComponentNameString'
          - description: The name of the component.
          title: componentName
        componentVersion:
          allOf:
          - $ref: '#/components/schemas/ComponentVersionString'
          - description: The version of the component.
          title: componentVersion
        lifecycleState:
          allOf:
          - $ref: '#/components/schemas/InstalledComponentLifecycleState'
          - description: The lifecycle state of the component.
          title: lifecycleState
        lifecycleStateDetails:
          allOf:
          - $ref: '#/components/schemas/LifecycleStateDetails'
          - description: A detailed response about the lifecycle state of the component
              that explains the reason why a component has an error or is broken.
          title: lifecycleStateDetails
        isRoot:
          allOf:
          - $ref: '#/components/schemas/IsRoot'
          - description: Whether or not the component is a root component.
          title: isRoot
        lastStatusChangeTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "<p>The status of how current the data is.</p> <p>This response\
              \ is based off of component state changes. The status reflects component\
              \ disruptions and deployments. If a component only sees a configuration\
              \ update during a deployment, it might not undergo a state change and\
              \ this status would not be updated.</p>"
          title: lastStatusChangeTimestamp
        lastReportedTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: <p>The last time the Greengrass core device sent a message
              containing a component's state to the Amazon Web Services Cloud.</p>
              <p>A component does not need to see a state change for this field to
              update.</p>
          title: lastReportedTimestamp
        lastInstallationSource:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          - description: "<p>The most recent deployment source that brought the component\
              \ to the Greengrass core device. For a thing group deployment or thing\
              \ deployment, the source will be the The ID of the deployment. and for\
              \ local deployments it will be <code>LOCAL</code>.</p> <note> <p>Any\
              \ deployment will attempt to reinstall currently broken components on\
              \ the device, which will update the last installation source.</p> </note>"
          title: lastInstallationSource
        lifecycleStatusCodes:
          allOf:
          - $ref: '#/components/schemas/InstalledComponentLifecycleStatusCodeList'
          - description: <p>The status codes that indicate the reason for failure
              whenever the <code>lifecycleState</code> has an error or is in a broken
              state.</p> <note> <p>Greengrass nucleus v2.8.0 or later is required
              to get an accurate <code>lifecycleStatusCodes</code> response. This
              response can be inaccurate in earlier Greengrass nucleus versions.</p>
              </note>
          title: lifecycleStatusCodes
      title: InstalledComponent
      type: object
    InstalledComponentLifecycleStatusCode:
      maxLength: 255
      minLength: 1
      title: InstalledComponentLifecycleStatusCode
      type: string
    InstalledComponentList:
      items:
        $ref: '#/components/schemas/InstalledComponent'
      type: array
    InstalledComponentTopologyFilter:
      enum:
      - ALL
      - ROOT
      type: string
    IoTJobAbortAction:
      enum:
      - CANCEL
      title: IoTJobAbortAction
      type: string
    IoTJobAbortCriteriaList:
      items:
        $ref: '#/components/schemas/IoTJobAbortCriteria'
      minItems: 1
      type: array
    IoTJobExecutionFailureType:
      enum:
      - FAILED
      - REJECTED
      - TIMED_OUT
      - ALL
      title: IoTJobExecutionFailureType
      type: string
    IoTJobAbortThresholdPercentage:
      format: double
      maximum: 100
      type: number
    IoTJobMinimumNumberOfExecutedThings:
      minimum: 1
      type: integer
    IoTJobAbortCriteria:
      description: <p>Contains criteria that define when and how to cancel a job.</p>
        <p>The deployment stops if the following conditions are true:</p> <ol> <li>
        <p>The number of things that receive the deployment exceeds the <code>minNumberOfExecutedThings</code>.</p>
        </li> <li> <p>The percentage of failures with type <code>failureType</code>
        exceeds the <code>thresholdPercentage</code>.</p> </li> </ol>
      properties:
        failureType:
          allOf:
          - $ref: '#/components/schemas/IoTJobExecutionFailureType'
          - description: The type of job deployment failure that can cancel a job.
          title: failureType
        action:
          allOf:
          - $ref: '#/components/schemas/IoTJobAbortAction'
          - description: The action to perform when the criteria are met.
          title: action
        thresholdPercentage:
          allOf:
          - $ref: '#/components/schemas/IoTJobAbortThresholdPercentage'
          - description: "<p>The minimum percentage of <code>failureType</code> failures\
              \ that occur before the job can cancel.</p> <p>This parameter supports\
              \ up to two digits after the decimal (for example, you can specify <code>10.9</code>\
              \ or <code>10.99</code>, but not <code>10.999</code>).</p>"
          title: thresholdPercentage
        minNumberOfExecutedThings:
          allOf:
          - $ref: '#/components/schemas/IoTJobMinimumNumberOfExecutedThings'
          - description: The minimum number of things that receive the configuration
              before the job can cancel.
          title: minNumberOfExecutedThings
      required:
      - action
      - failureType
      - minNumberOfExecutedThings
      - thresholdPercentage
      title: IoTJobAbortCriteria
      type: object
    IoTJobExponentialRolloutRate:
      description: Contains information about an exponential rollout rate for a configuration
        deployment job.
      properties:
        baseRatePerMinute:
          allOf:
          - $ref: '#/components/schemas/IoTJobRolloutBaseRatePerMinute'
          - description: "The minimum number of devices that receive a pending job\
              \ notification, per minute, when the job starts. This parameter defines\
              \ the initial rollout rate of the job."
          title: baseRatePerMinute
        incrementFactor:
          allOf:
          - $ref: '#/components/schemas/IoTJobRolloutIncrementFactor'
          - description: "<p>The exponential factor to increase the rollout rate for\
              \ the job.</p> <p>This parameter supports up to one digit after the\
              \ decimal (for example, you can specify <code>1.5</code>, but not <code>1.55</code>).</p>"
          title: incrementFactor
        rateIncreaseCriteria:
          $ref: '#/components/schemas/IoTJobExponentialRolloutRate_rateIncreaseCriteria'
      required:
      - baseRatePerMinute
      - incrementFactor
      - rateIncreaseCriteria
      title: IoTJobExponentialRolloutRate
      type: object
    IoTJobMaxExecutionsPerMin:
      maximum: 1000
      minimum: 1
      type: integer
    IoTJobRolloutBaseRatePerMinute:
      maximum: 1000
      minimum: 1
      type: integer
    IoTJobRolloutIncrementFactor:
      format: double
      maximum: 5
      minimum: 1
      type: number
    IoTJobRateIncreaseCriteria:
      description: Contains information about criteria to meet before a job increases
        its rollout rate. Specify either <code>numberOfNotifiedThings</code> or <code>numberOfSucceededThings</code>.
      properties:
        numberOfNotifiedThings:
          allOf:
          - $ref: '#/components/schemas/IoTJobNumberOfThings'
          - description: The number of devices to receive the job notification before
              the rollout rate increases.
          title: numberOfNotifiedThings
        numberOfSucceededThings:
          allOf:
          - $ref: '#/components/schemas/IoTJobNumberOfThings'
          - description: The number of devices to successfully run the configuration
              job before the rollout rate increases.
          title: numberOfSucceededThings
      title: IoTJobRateIncreaseCriteria
      type: object
    IoTJobInProgressTimeoutInMinutes:
      type: integer
    IoTJobNumberOfThings:
      minimum: 1
      type: integer
    OptionalBoolean:
      type: boolean
    LambdaVolumeList:
      items:
        $ref: '#/components/schemas/LambdaVolumeMount'
      type: array
    LambdaDeviceList:
      items:
        $ref: '#/components/schemas/LambdaDeviceMount'
      type: array
    LambdaContainerParams:
      description: Contains information about a container in which Lambda functions
        run on Greengrass core devices.
      properties:
        memorySizeInKB:
          allOf:
          - $ref: '#/components/schemas/OptionalInteger'
          - description: "<p>The memory size of the container, expressed in kilobytes.</p>\
              \ <p>Default: <code>16384</code> (16 MB)</p>"
          title: memorySizeInKB
        mountROSysfs:
          allOf:
          - $ref: '#/components/schemas/OptionalBoolean'
          - description: "<p>Whether or not the container can read information from\
              \ the device's <code>/sys</code> folder.</p> <p>Default: <code>false</code>\
              \ </p>"
          title: mountROSysfs
        volumes:
          allOf:
          - $ref: '#/components/schemas/LambdaVolumeList'
          - description: The list of volumes that the container can access.
          title: volumes
        devices:
          allOf:
          - $ref: '#/components/schemas/LambdaDeviceList'
          - description: The list of system devices that the container can access.
          title: devices
      title: LambdaContainerParams
      type: object
    LambdaDeviceMount:
      description: Contains information about a device that Linux processes in a container
        can access.
      properties:
        path:
          allOf:
          - $ref: '#/components/schemas/FileSystemPath'
          - description: The mount path for the device in the file system.
          title: path
        permission:
          allOf:
          - $ref: '#/components/schemas/LambdaFilesystemPermission'
          - description: "<p>The permission to access the device: read/only (<code>ro</code>)\
              \ or read/write (<code>rw</code>).</p> <p>Default: <code>ro</code> </p>"
          title: permission
        addGroupOwner:
          allOf:
          - $ref: '#/components/schemas/OptionalBoolean'
          - description: "<p>Whether or not to add the component's system user as\
              \ an owner of the device.</p> <p>Default: <code>false</code> </p>"
          title: addGroupOwner
      required:
      - path
      title: LambdaDeviceMount
      type: object
    LambdaFilesystemPermission:
      enum:
      - ro
      - rw
      title: LambdaFilesystemPermission
      type: string
    LambdaEnvironmentVariables:
      additionalProperties:
        $ref: '#/components/schemas/String'
      type: object
    TopicString:
      type: string
    LambdaEventSourceType:
      enum:
      - PUB_SUB
      - IOT_CORE
      title: LambdaEventSourceType
      type: string
    LambdaEventSource:
      description: Contains information about an event source for an Lambda function.
        The event source defines the topics on which this Lambda function subscribes
        to receive messages that run the function.
      properties:
        topic:
          allOf:
          - $ref: '#/components/schemas/TopicString'
          - description: The topic to which to subscribe to receive event messages.
          title: topic
        type:
          allOf:
          - $ref: '#/components/schemas/LambdaEventSourceType'
          - description: <p>The type of event source. Choose from the following options:</p>
              <ul> <li> <p> <code>PUB_SUB</code> – Subscribe to local publish/subscribe
              messages. This event source type doesn't support MQTT wildcards (<code>+</code>
              and <code>#</code>) in the event source topic.</p> </li> <li> <p> <code>IOT_CORE</code>
              – Subscribe to Amazon Web Services IoT Core MQTT messages. This event
              source type supports MQTT wildcards (<code>+</code> and <code>#</code>)
              in the event source topic.</p> </li> </ul>
          title: type
      required:
      - topic
      - type
      title: LambdaEventSource
      type: object
    LambdaEventSourceList:
      items:
        $ref: '#/components/schemas/LambdaEventSource'
      type: array
    LambdaExecArg:
      title: LambdaExecArg
      type: string
    LambdaExecArgsList:
      items:
        $ref: '#/components/schemas/LambdaExecArg'
      type: array
    LambdaInputPayloadEncodingType:
      enum:
      - json
      - binary
      title: LambdaInputPayloadEncodingType
      type: string
    LambdaLinuxProcessParams:
      description: Contains parameters for a Linux process that contains an Lambda
        function.
      properties:
        isolationMode:
          allOf:
          - $ref: '#/components/schemas/LambdaIsolationMode'
          - description: "<p>The isolation mode for the process that contains the\
              \ Lambda function. The process can run in an isolated runtime environment\
              \ inside the IoT Greengrass container, or as a regular process outside\
              \ any container.</p> <p>Default: <code>GreengrassContainer</code> </p>"
          title: isolationMode
        containerParams:
          $ref: '#/components/schemas/LambdaLinuxProcessParams_containerParams'
      title: LambdaLinuxProcessParams
      type: object
    LambdaIsolationMode:
      enum:
      - GreengrassContainer
      - NoContainer
      title: LambdaIsolationMode
      type: string
    LambdaVolumeMount:
      description: "Contains information about a volume that Linux processes in a\
        \ container can access. When you define a volume, the IoT Greengrass Core\
        \ software mounts the source files to the destination inside the container."
      properties:
        sourcePath:
          allOf:
          - $ref: '#/components/schemas/FileSystemPath'
          - description: The path to the physical volume in the file system.
          title: sourcePath
        destinationPath:
          allOf:
          - $ref: '#/components/schemas/FileSystemPath'
          - description: The path to the logical volume in the file system.
          title: destinationPath
        permission:
          allOf:
          - $ref: '#/components/schemas/LambdaFilesystemPermission'
          - description: "<p>The permission to access the volume: read/only (<code>ro</code>)\
              \ or read/write (<code>rw</code>).</p> <p>Default: <code>ro</code> </p>"
          title: permission
        addGroupOwner:
          allOf:
          - $ref: '#/components/schemas/OptionalBoolean'
          - description: "<p>Whether or not to add the IoT Greengrass user group as\
              \ an owner of the volume.</p> <p>Default: <code>false</code> </p>"
          title: addGroupOwner
      required:
      - destinationPath
      - sourcePath
      title: LambdaVolumeMount
      type: object
    NextTokenString:
      type: string
    ListClientDevicesAssociatedWithCoreDeviceRequest:
      properties: {}
      title: ListClientDevicesAssociatedWithCoreDeviceRequest
      type: object
    ListComponentVersionsRequest:
      properties: {}
      title: ListComponentVersionsRequest
      type: object
    ListComponentsRequest:
      properties: {}
      title: ListComponentsRequest
      type: object
    ListCoreDevicesRequest:
      properties: {}
      title: ListCoreDevicesRequest
      type: object
    ListDeploymentsRequest:
      properties: {}
      title: ListDeploymentsRequest
      type: object
    ListEffectiveDeploymentsRequest:
      properties: {}
      title: ListEffectiveDeploymentsRequest
      type: object
    ListInstalledComponentsRequest:
      properties: {}
      title: ListInstalledComponentsRequest
      type: object
    ListTagsForResourceRequest:
      properties: {}
      title: ListTagsForResourceRequest
      type: object
    Memory:
      maximum: 9223372036854772000
      minimum: 0
      type: integer
    ResolveComponentCandidatesRequest:
      example:
        platform:
          name: ""
          attributes: ""
        componentCandidates: ""
      properties:
        platform:
          $ref: '#/components/schemas/ResolveComponentCandidatesRequest_platform'
        componentCandidates:
          allOf:
          - $ref: '#/components/schemas/ComponentCandidateList'
          - description: The list of components to resolve.
      title: ResolveComponentCandidatesRequest
      type: object
    ResolvedComponentVersionsList:
      items:
        $ref: '#/components/schemas/ResolvedComponentVersion'
      type: array
    ResolvedComponentVersion:
      description: Contains information about a component version that is compatible
        to run on a Greengrass core device.
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ComponentVersionARN'
          - description: The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a>
              of the component version.
          title: arn
        componentName:
          allOf:
          - $ref: '#/components/schemas/ComponentNameString'
          - description: The name of the component.
          title: componentName
        componentVersion:
          allOf:
          - $ref: '#/components/schemas/ComponentVersionString'
          - description: The version of the component.
          title: componentVersion
        recipe:
          allOf:
          - $ref: '#/components/schemas/RecipeBlob'
          - description: The recipe of the component version.
          title: recipe
        vendorGuidance:
          allOf:
          - $ref: '#/components/schemas/VendorGuidance'
          - description: "<p>The vendor guidance state for the component version.\
              \ This state indicates whether the component version has any issues\
              \ that you should consider before you deploy it. The vendor guidance\
              \ state can be:</p> <ul> <li> <p> <code>ACTIVE</code> – This component\
              \ version is available and recommended for use.</p> </li> <li> <p> <code>DISCONTINUED</code>\
              \ – This component version has been discontinued by its publisher. You\
              \ can deploy this component version, but we recommend that you use a\
              \ different version of this component.</p> </li> <li> <p> <code>DELETED</code>\
              \ – This component version has been deleted by its publisher, so you\
              \ can't deploy it. If you have any existing deployments that specify\
              \ this component version, those deployments will fail.</p> </li> </ul>"
          title: vendorGuidance
        message:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          - description: A message that communicates details about the vendor guidance
              state of the component version. This message communicates why a component
              version is discontinued or deleted.
          title: message
      title: ResolvedComponentVersion
      type: object
    TagKeyList:
      items:
        $ref: '#/components/schemas/TagKey'
      maxItems: 200
      minItems: 1
      type: array
    TagResourceRequest:
      example:
        tags: ""
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: "A list of key-value pairs that contain metadata for the\
              \ resource. For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html\"\
              >Tag your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>."
      required:
      - tags
      title: TagResourceRequest
      type: object
    UntagResourceRequest:
      properties: {}
      title: UntagResourceRequest
      type: object
    UpdateConnectivityInfoRequest:
      example:
        connectivityInfo: ""
      properties:
        connectivityInfo:
          allOf:
          - $ref: '#/components/schemas/connectivityInfoList'
          - description: The connectivity information for the core device.
            xml:
              name: ConnectivityInfo
      required:
      - connectivityInfo
      title: UpdateConnectivityInfoRequest
      type: object
    AssociateServiceRoleToAccount_request:
      properties:
        RoleArn:
          description: The Amazon Resource Name (ARN) of the service role to associate
            with IoT Greengrass for your Amazon Web Services account in this Amazon
            Web Services Region.
          title: RoleArn
          type: string
      required:
      - RoleArn
      title: AssociateServiceRoleToAccount_request
      type: object
    BatchAssociateClientDeviceWithCoreDevice_request:
      properties:
        entries:
          description: The list of client devices to associate.
          items:
            $ref: '#/components/schemas/AssociateClientDeviceWithCoreDeviceEntry'
          maxItems: 100
          minItems: 1
          title: entries
          type: array
      title: BatchAssociateClientDeviceWithCoreDevice_request
      type: object
    BatchDisassociateClientDeviceFromCoreDevice_request:
      properties:
        entries:
          description: The list of client devices to disassociate.
          items:
            $ref: '#/components/schemas/DisassociateClientDeviceFromCoreDeviceEntry'
          maxItems: 100
          minItems: 1
          title: entries
          type: array
      title: BatchDisassociateClientDeviceFromCoreDevice_request
      type: object
    CreateComponentVersion_request_lambdaFunction_componentLambdaParameters:
      allOf:
      - $ref: '#/components/schemas/LambdaExecutionParameters'
      - description: The system and runtime parameters for the Lambda function as
          it runs on the Greengrass core device.
      example:
        maxIdleTimeInSeconds: ""
        execArgs: ""
        eventSources: ""
        pinned: ""
        maxQueueSize: ""
        linuxProcessParams:
          isolationMode: ""
          containerParams:
            mountROSysfs: ""
            memorySizeInKB: ""
            devices: ""
            volumes: ""
        statusTimeoutInSeconds: ""
        environmentVariables: ""
        maxInstancesCount: ""
        inputPayloadEncodingType: ""
        timeoutInSeconds: ""
      title: CreateComponentVersion_request_lambdaFunction_componentLambdaParameters
    CreateComponentVersion_request_lambdaFunction:
      description: Contains information about an Lambda function to import to create
        a component.
      properties:
        lambdaArn:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          - description: The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a>
              of the Lambda function. The ARN must include the version of the function
              to import. You can't use version aliases like <code>$LATEST</code>.
          title: lambdaArn
        componentName:
          allOf:
          - $ref: '#/components/schemas/ComponentNameString'
          - description: <p>The name of the component.</p> <p>Defaults to the name
              of the Lambda function.</p>
          title: componentName
        componentVersion:
          allOf:
          - $ref: '#/components/schemas/ComponentVersionString'
          - description: "<p>The version of the component.</p> <p>Defaults to the\
              \ version of the Lambda function as a semantic version. For example,\
              \ if your function version is <code>3</code>, the component version\
              \ becomes <code>3.0.0</code>.</p>"
          title: componentVersion
        componentPlatforms:
          allOf:
          - $ref: '#/components/schemas/ComponentPlatformList'
          - description: The platforms that the component version supports.
          title: componentPlatforms
        componentDependencies:
          allOf:
          - $ref: '#/components/schemas/ComponentDependencyMap'
          - description: The component versions on which this Lambda function component
              depends.
          title: componentDependencies
        componentLambdaParameters:
          $ref: '#/components/schemas/CreateComponentVersion_request_lambdaFunction_componentLambdaParameters'
      title: CreateComponentVersion_request_lambdaFunction
      type: object
    CreateComponentVersion_request:
      properties:
        inlineRecipe:
          description: "<p>The recipe to use to create the component. The recipe defines\
            \ the component's metadata, parameters, dependencies, lifecycle, artifacts,\
            \ and platform compatibility.</p> <p>You must specify either <code>inlineRecipe</code>\
            \ or <code>lambdaFunction</code>.</p>"
          title: inlineRecipe
          type: string
        lambdaFunction:
          $ref: '#/components/schemas/CreateComponentVersion_request_lambdaFunction'
        tags:
          additionalProperties:
            $ref: '#/components/schemas/TagValue'
          description: "A list of key-value pairs that contain metadata for the resource.\
            \ For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html\"\
            >Tag your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>."
          maxProperties: 200
          minProperties: 1
          title: tags
          type: object
        clientToken:
          description: "A unique, case-sensitive identifier that you can provide to\
            \ ensure that the request is idempotent. Idempotency means that the request\
            \ is successfully processed only once, even if you send the request multiple\
            \ times. When a request succeeds, and you specify the same client token\
            \ for subsequent successful requests, the IoT Greengrass V2 service returns\
            \ the successful response that it caches from the previous request. IoT\
            \ Greengrass V2 caches successful responses for idempotent requests for\
            \ up to 8 hours."
          maxLength: 64
          minLength: 1
          pattern: "^[a-zA-Z0-9-]+$"
          title: clientToken
          type: string
      title: CreateComponentVersion_request
      type: object
    CreateDeployment_request_iotJobConfiguration_jobExecutionsRolloutConfig:
      allOf:
      - $ref: '#/components/schemas/IoTJobExecutionsRolloutConfig'
      - description: The rollout configuration for the job. This configuration defines
          the rate at which the job rolls out to the fleet of target devices.
      example:
        maximumPerMinute: ""
        exponentialRate:
          baseRatePerMinute: ""
          incrementFactor: ""
          rateIncreaseCriteria:
            numberOfNotifiedThings: ""
            numberOfSucceededThings: ""
      title: CreateDeployment_request_iotJobConfiguration_jobExecutionsRolloutConfig
    CreateDeployment_request_iotJobConfiguration_abortConfig:
      allOf:
      - $ref: '#/components/schemas/IoTJobAbortConfig'
      - description: The stop configuration for the job. This configuration defines
          when and how to stop a job rollout.
      example:
        criteriaList: ""
      title: CreateDeployment_request_iotJobConfiguration_abortConfig
    CreateDeployment_request_iotJobConfiguration_timeoutConfig:
      allOf:
      - $ref: '#/components/schemas/IoTJobTimeoutConfig'
      - description: The timeout configuration for the job. This configuration defines
          the amount of time each device has to complete the job.
      example:
        inProgressTimeoutInMinutes: ""
      title: CreateDeployment_request_iotJobConfiguration_timeoutConfig
    CreateDeployment_request_iotJobConfiguration:
      description: Contains information about an IoT job configuration.
      properties:
        jobExecutionsRolloutConfig:
          $ref: '#/components/schemas/CreateDeployment_request_iotJobConfiguration_jobExecutionsRolloutConfig'
        abortConfig:
          $ref: '#/components/schemas/CreateDeployment_request_iotJobConfiguration_abortConfig'
        timeoutConfig:
          $ref: '#/components/schemas/CreateDeployment_request_iotJobConfiguration_timeoutConfig'
      title: CreateDeployment_request_iotJobConfiguration
      type: object
    CreateDeployment_request_deploymentPolicies_componentUpdatePolicy:
      allOf:
      - $ref: '#/components/schemas/DeploymentComponentUpdatePolicy'
      - description: The component update policy for the configuration deployment.
          This policy defines when it's safe to deploy the configuration to devices.
      example:
        action: ""
        timeoutInSeconds: ""
      title: CreateDeployment_request_deploymentPolicies_componentUpdatePolicy
    CreateDeployment_request_deploymentPolicies_configurationValidationPolicy:
      allOf:
      - $ref: '#/components/schemas/DeploymentConfigurationValidationPolicy'
      - description: The configuration validation policy for the configuration deployment.
          This policy defines how long each component has to validate its configure
          updates.
      example:
        timeoutInSeconds: ""
      title: CreateDeployment_request_deploymentPolicies_configurationValidationPolicy
    CreateDeployment_request_deploymentPolicies:
      description: Contains information about policies that define how a deployment
        updates components and handles failure.
      properties:
        failureHandlingPolicy:
          allOf:
          - $ref: '#/components/schemas/DeploymentFailureHandlingPolicy'
          - description: "<p>The failure handling policy for the configuration deployment.\
              \ This policy defines what to do if the deployment fails.</p> <p>Default:\
              \ <code>ROLLBACK</code> </p>"
          title: failureHandlingPolicy
        componentUpdatePolicy:
          $ref: '#/components/schemas/CreateDeployment_request_deploymentPolicies_componentUpdatePolicy'
        configurationValidationPolicy:
          $ref: '#/components/schemas/CreateDeployment_request_deploymentPolicies_configurationValidationPolicy'
      title: CreateDeployment_request_deploymentPolicies
      type: object
    CreateDeployment_request:
      properties:
        targetArn:
          description: "The <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\
            >ARN</a> of the target IoT thing or thing group. When creating a subdeployment,\
            \ the targetARN can only be a thing group."
          pattern: "arn:[^:]*:iot:[^:]*:[0-9]+:(thing|thinggroup)/.+"
          title: targetArn
          type: string
        deploymentName:
          description: The name of the deployment.
          maxLength: 256
          minLength: 1
          title: deploymentName
          type: string
        components:
          additionalProperties:
            $ref: '#/components/schemas/ComponentDeploymentSpecification'
          description: "The components to deploy. This is a dictionary, where each\
            \ key is the name of a component, and each key's value is the version\
            \ and configuration to deploy for that component."
          title: components
          type: object
        iotJobConfiguration:
          $ref: '#/components/schemas/CreateDeployment_request_iotJobConfiguration'
        deploymentPolicies:
          $ref: '#/components/schemas/CreateDeployment_request_deploymentPolicies'
        parentTargetArn:
          description: The parent deployment's target <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a>
            within a subdeployment.
          pattern: "arn:[^:]*:iot:[^:]*:[0-9]+:thinggroup/.+"
          title: parentTargetArn
          type: string
        tags:
          additionalProperties:
            $ref: '#/components/schemas/TagValue'
          description: "A list of key-value pairs that contain metadata for the resource.\
            \ For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html\"\
            >Tag your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>."
          maxProperties: 200
          minProperties: 1
          title: tags
          type: object
        clientToken:
          description: "A unique, case-sensitive identifier that you can provide to\
            \ ensure that the request is idempotent. Idempotency means that the request\
            \ is successfully processed only once, even if you send the request multiple\
            \ times. When a request succeeds, and you specify the same client token\
            \ for subsequent successful requests, the IoT Greengrass V2 service returns\
            \ the successful response that it caches from the previous request. IoT\
            \ Greengrass V2 caches successful responses for idempotent requests for\
            \ up to 8 hours."
          maxLength: 64
          minLength: 1
          pattern: "^[a-zA-Z0-9-]+$"
          title: clientToken
          type: string
      required:
      - targetArn
      title: CreateDeployment_request
      type: object
    UpdateConnectivityInfo_request:
      properties:
        ConnectivityInfo:
          description: The connectivity information for the core device.
          items:
            $ref: '#/components/schemas/ConnectivityInfo'
          title: ConnectivityInfo
          type: array
      required:
      - ConnectivityInfo
      title: UpdateConnectivityInfo_request
      type: object
    TagResource_request:
      properties:
        tags:
          additionalProperties:
            $ref: '#/components/schemas/TagValue'
          description: "A list of key-value pairs that contain metadata for the resource.\
            \ For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html\"\
            >Tag your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>."
          maxProperties: 200
          minProperties: 1
          title: tags
          type: object
      required:
      - tags
      title: TagResource_request
      type: object
    ResolveComponentCandidates_request_platform:
      description: Contains information about a platform that a component supports.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          - description: "<p>The friendly name of the platform. This name helps you\
              \ identify the platform.</p> <p>If you omit this parameter, IoT Greengrass\
              \ creates a friendly name from the <code>os</code> and <code>architecture</code>\
              \ of the platform.</p>"
          title: name
        attributes:
          allOf:
          - $ref: '#/components/schemas/PlatformAttributesMap'
          - description: "A dictionary of attributes for the platform. The IoT Greengrass\
              \ Core software defines the <code>os</code> and <code>architecture</code>\
              \ by default. You can specify additional platform attributes for a core\
              \ device when you deploy the Greengrass nucleus component. For more\
              \ information, see the <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-nucleus-component.html\"\
              >Greengrass nucleus component</a> in the <i>IoT Greengrass V2 Developer\
              \ Guide</i>."
          title: attributes
      title: ResolveComponentCandidates_request_platform
      type: object
    ResolveComponentCandidates_request:
      properties:
        platform:
          $ref: '#/components/schemas/ResolveComponentCandidates_request_platform'
        componentCandidates:
          description: The list of components to resolve.
          items:
            $ref: '#/components/schemas/ComponentCandidate'
          title: componentCandidates
          type: array
      title: ResolveComponentCandidates_request
      type: object
    CreateComponentVersionResponse_status:
      allOf:
      - $ref: '#/components/schemas/CloudComponentStatus'
      - description: The status of the component version in IoT Greengrass V2. This
          status is different from the status of the component on a core device.
      example:
        componentState: ""
        vendorGuidance: ""
        message: ""
        vendorGuidanceMessage: ""
        errors: ""
      title: CreateComponentVersionResponse_status
    LambdaExecutionParameters_linuxProcessParams:
      allOf:
      - $ref: '#/components/schemas/LambdaLinuxProcessParams'
      - description: The parameters for the Linux process that contains the Lambda
          function.
      example:
        isolationMode: ""
        containerParams:
          mountROSysfs: ""
          memorySizeInKB: ""
          devices: ""
          volumes: ""
      title: LambdaExecutionParameters_linuxProcessParams
    ComponentDeploymentSpecification_configurationUpdate:
      allOf:
      - $ref: '#/components/schemas/ComponentConfigurationUpdate'
      - description: "The configuration updates to deploy for the component. You can\
          \ define <i>reset</i> updates and <i>merge</i> updates. A reset updates\
          \ the keys that you specify to the default configuration for the component.\
          \ A merge updates the core device's component configuration with the keys\
          \ and values that you specify. The IoT Greengrass Core software applies\
          \ reset updates before it applies merge updates. For more information, see\
          \ <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/update-component-configurations.html\"\
          >Update component configurations</a> in the <i>IoT Greengrass V2 Developer\
          \ Guide</i>."
      title: ComponentDeploymentSpecification_configurationUpdate
    ComponentDeploymentSpecification_runWith:
      allOf:
      - $ref: '#/components/schemas/ComponentRunWith'
      - description: "The system user and group that the IoT Greengrass Core software\
          \ uses to run component processes on the core device. If you omit this parameter,\
          \ the IoT Greengrass Core software uses the system user and group that you\
          \ configure for the core device. For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-greengrass-core-v2.html#configure-component-user\"\
          >Configure the user and group that run components</a> in the <i>IoT Greengrass\
          \ V2 Developer Guide</i>."
      title: ComponentDeploymentSpecification_runWith
    IoTJobExecutionsRolloutConfig_exponentialRate:
      allOf:
      - $ref: '#/components/schemas/IoTJobExponentialRolloutRate'
      - description: The exponential rate to increase the job rollout rate.
      example:
        baseRatePerMinute: ""
        incrementFactor: ""
        rateIncreaseCriteria:
          numberOfNotifiedThings: ""
          numberOfSucceededThings: ""
      title: IoTJobExecutionsRolloutConfig_exponentialRate
    GetDeploymentResponse_deploymentPolicies:
      allOf:
      - $ref: '#/components/schemas/DeploymentPolicies'
      - description: The deployment policies for the deployment. These policies define
          how the deployment updates components and handles failure.
      example:
        configurationValidationPolicy:
          timeoutInSeconds: ""
        componentUpdatePolicy:
          action: ""
          timeoutInSeconds: ""
        failureHandlingPolicy: ""
      title: GetDeploymentResponse_deploymentPolicies
    GetDeploymentResponse_iotJobConfiguration:
      allOf:
      - $ref: '#/components/schemas/DeploymentIoTJobConfiguration'
      - description: "The job configuration for the deployment configuration. The\
          \ job configuration specifies the rollout, timeout, and stop configurations\
          \ for the deployment configuration."
      example:
        timeoutConfig:
          inProgressTimeoutInMinutes: ""
        jobExecutionsRolloutConfig:
          maximumPerMinute: ""
          exponentialRate:
            baseRatePerMinute: ""
            incrementFactor: ""
            rateIncreaseCriteria:
              numberOfNotifiedThings: ""
              numberOfSucceededThings: ""
        abortConfig:
          criteriaList: ""
      title: GetDeploymentResponse_iotJobConfiguration
    Component_latestVersion:
      allOf:
      - $ref: '#/components/schemas/ComponentLatestVersion'
      - description: The latest version of the component and its details.
      title: Component_latestVersion
    ComponentRunWith_systemResourceLimits:
      allOf:
      - $ref: '#/components/schemas/SystemResourceLimits'
      - description: "<p>The system resource limits to apply to this component's process\
          \ on the core device. IoT Greengrass currently supports this feature on\
          \ only Linux core devices.</p> <p>If you omit this parameter, the IoT Greengrass\
          \ Core software uses the default system resource limits that you configure\
          \ on the Greengrass nucleus component. For more information, see <a href=\"\
          https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-greengrass-core-v2.html#configure-component-system-resource-limits\"\
          >Configure system resource limits for components</a>.</p>"
      title: ComponentRunWith_systemResourceLimits
    CreateComponentVersionRequest_lambdaFunction:
      allOf:
      - $ref: '#/components/schemas/LambdaFunctionRecipeSource'
      - description: <p>The parameters to create a component from a Lambda function.</p>
          <p>You must specify either <code>inlineRecipe</code> or <code>lambdaFunction</code>.</p>
      example:
        componentDependencies: ""
        componentPlatforms: ""
        lambdaArn: ""
        componentName: ""
        componentVersion: ""
        componentLambdaParameters:
          maxIdleTimeInSeconds: ""
          execArgs: ""
          eventSources: ""
          pinned: ""
          maxQueueSize: ""
          linuxProcessParams:
            isolationMode: ""
            containerParams:
              mountROSysfs: ""
              memorySizeInKB: ""
              devices: ""
              volumes: ""
          statusTimeoutInSeconds: ""
          environmentVariables: ""
          maxInstancesCount: ""
          inputPayloadEncodingType: ""
          timeoutInSeconds: ""
      title: CreateComponentVersionRequest_lambdaFunction
    EffectiveDeployment_statusDetails:
      allOf:
      - $ref: '#/components/schemas/EffectiveDeploymentStatusDetails'
      - description: The status details that explain why a deployment has an error.
          This response will be null if the deployment is in a success state.
      title: EffectiveDeployment_statusDetails
    IoTJobExponentialRolloutRate_rateIncreaseCriteria:
      allOf:
      - $ref: '#/components/schemas/IoTJobRateIncreaseCriteria'
      - description: The criteria to increase the rollout rate for the job.
      example:
        numberOfNotifiedThings: ""
        numberOfSucceededThings: ""
      title: IoTJobExponentialRolloutRate_rateIncreaseCriteria
    LambdaLinuxProcessParams_containerParams:
      allOf:
      - $ref: '#/components/schemas/LambdaContainerParams'
      - description: The parameters for the container in which the Lambda function
          runs.
      example:
        mountROSysfs: ""
        memorySizeInKB: ""
        devices: ""
        volumes: ""
      title: LambdaLinuxProcessParams_containerParams
    ResolveComponentCandidatesRequest_platform:
      allOf:
      - $ref: '#/components/schemas/ComponentPlatform'
      - description: The platform to use to resolve compatible components.
      example:
        name: ""
        attributes: ""
      title: ResolveComponentCandidatesRequest_platform
  securitySchemes:
    hmac:
      description: Amazon Signature authorization v4
      in: header
      name: Authorization
      type: apiKey
      x-amazon-apigateway-authtype: awsSigv4
      x-apikeyInfoFunc: openapi_server.controllers.security_controller.info_from_hmac
x-hasEquivalentPaths: true
