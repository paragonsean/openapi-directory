# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.component_deployment_specification_configuration_update import ComponentDeploymentSpecificationConfigurationUpdate
from openapi_server.models.component_deployment_specification_run_with import ComponentDeploymentSpecificationRunWith
from openapi_server import util


class ComponentDeploymentSpecification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, component_version: str=None, configuration_update: ComponentDeploymentSpecificationConfigurationUpdate=None, run_with: ComponentDeploymentSpecificationRunWith=None):
        """ComponentDeploymentSpecification - a model defined in OpenAPI

        :param component_version: The component_version of this ComponentDeploymentSpecification.
        :param configuration_update: The configuration_update of this ComponentDeploymentSpecification.
        :param run_with: The run_with of this ComponentDeploymentSpecification.
        """
        self.openapi_types = {
            'component_version': str,
            'configuration_update': ComponentDeploymentSpecificationConfigurationUpdate,
            'run_with': ComponentDeploymentSpecificationRunWith
        }

        self.attribute_map = {
            'component_version': 'componentVersion',
            'configuration_update': 'configurationUpdate',
            'run_with': 'runWith'
        }

        self._component_version = component_version
        self._configuration_update = configuration_update
        self._run_with = run_with

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComponentDeploymentSpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ComponentDeploymentSpecification of this ComponentDeploymentSpecification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def component_version(self):
        """Gets the component_version of this ComponentDeploymentSpecification.


        :return: The component_version of this ComponentDeploymentSpecification.
        :rtype: str
        """
        return self._component_version

    @component_version.setter
    def component_version(self, component_version):
        """Sets the component_version of this ComponentDeploymentSpecification.


        :param component_version: The component_version of this ComponentDeploymentSpecification.
        :type component_version: str
        """

        self._component_version = component_version

    @property
    def configuration_update(self):
        """Gets the configuration_update of this ComponentDeploymentSpecification.


        :return: The configuration_update of this ComponentDeploymentSpecification.
        :rtype: ComponentDeploymentSpecificationConfigurationUpdate
        """
        return self._configuration_update

    @configuration_update.setter
    def configuration_update(self, configuration_update):
        """Sets the configuration_update of this ComponentDeploymentSpecification.


        :param configuration_update: The configuration_update of this ComponentDeploymentSpecification.
        :type configuration_update: ComponentDeploymentSpecificationConfigurationUpdate
        """

        self._configuration_update = configuration_update

    @property
    def run_with(self):
        """Gets the run_with of this ComponentDeploymentSpecification.


        :return: The run_with of this ComponentDeploymentSpecification.
        :rtype: ComponentDeploymentSpecificationRunWith
        """
        return self._run_with

    @run_with.setter
    def run_with(self, run_with):
        """Sets the run_with of this ComponentDeploymentSpecification.


        :param run_with: The run_with of this ComponentDeploymentSpecification.
        :type run_with: ComponentDeploymentSpecificationRunWith
        """

        self._run_with = run_with
