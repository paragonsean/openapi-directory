# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.component_deployment_specification import ComponentDeploymentSpecification
from openapi_server.models.create_deployment_request_deployment_policies import CreateDeploymentRequestDeploymentPolicies
from openapi_server.models.create_deployment_request_iot_job_configuration import CreateDeploymentRequestIotJobConfiguration
import re
from openapi_server import util


class CreateDeploymentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, target_arn: str=None, deployment_name: str=None, components: Dict[str, ComponentDeploymentSpecification]=None, iot_job_configuration: CreateDeploymentRequestIotJobConfiguration=None, deployment_policies: CreateDeploymentRequestDeploymentPolicies=None, parent_target_arn: str=None, tags: Dict[str, str]=None, client_token: str=None):
        """CreateDeploymentRequest - a model defined in OpenAPI

        :param target_arn: The target_arn of this CreateDeploymentRequest.
        :param deployment_name: The deployment_name of this CreateDeploymentRequest.
        :param components: The components of this CreateDeploymentRequest.
        :param iot_job_configuration: The iot_job_configuration of this CreateDeploymentRequest.
        :param deployment_policies: The deployment_policies of this CreateDeploymentRequest.
        :param parent_target_arn: The parent_target_arn of this CreateDeploymentRequest.
        :param tags: The tags of this CreateDeploymentRequest.
        :param client_token: The client_token of this CreateDeploymentRequest.
        """
        self.openapi_types = {
            'target_arn': str,
            'deployment_name': str,
            'components': Dict[str, ComponentDeploymentSpecification],
            'iot_job_configuration': CreateDeploymentRequestIotJobConfiguration,
            'deployment_policies': CreateDeploymentRequestDeploymentPolicies,
            'parent_target_arn': str,
            'tags': Dict[str, str],
            'client_token': str
        }

        self.attribute_map = {
            'target_arn': 'targetArn',
            'deployment_name': 'deploymentName',
            'components': 'components',
            'iot_job_configuration': 'iotJobConfiguration',
            'deployment_policies': 'deploymentPolicies',
            'parent_target_arn': 'parentTargetArn',
            'tags': 'tags',
            'client_token': 'clientToken'
        }

        self._target_arn = target_arn
        self._deployment_name = deployment_name
        self._components = components
        self._iot_job_configuration = iot_job_configuration
        self._deployment_policies = deployment_policies
        self._parent_target_arn = parent_target_arn
        self._tags = tags
        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDeploymentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDeployment_request of this CreateDeploymentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def target_arn(self):
        """Gets the target_arn of this CreateDeploymentRequest.

        The <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">ARN</a> of the target IoT thing or thing group. When creating a subdeployment, the targetARN can only be a thing group.

        :return: The target_arn of this CreateDeploymentRequest.
        :rtype: str
        """
        return self._target_arn

    @target_arn.setter
    def target_arn(self, target_arn):
        """Sets the target_arn of this CreateDeploymentRequest.

        The <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">ARN</a> of the target IoT thing or thing group. When creating a subdeployment, the targetARN can only be a thing group.

        :param target_arn: The target_arn of this CreateDeploymentRequest.
        :type target_arn: str
        """
        if target_arn is None:
            raise ValueError("Invalid value for `target_arn`, must not be `None`")
        if target_arn is not None and not re.search(r'arn:[^:]*:iot:[^:]*:[0-9]+:(thing|thinggroup)\/.+', target_arn):
            raise ValueError("Invalid value for `target_arn`, must be a follow pattern or equal to `/arn:[^:]*:iot:[^:]*:[0-9]+:(thing|thinggroup)\/.+/`")

        self._target_arn = target_arn

    @property
    def deployment_name(self):
        """Gets the deployment_name of this CreateDeploymentRequest.

        The name of the deployment.

        :return: The deployment_name of this CreateDeploymentRequest.
        :rtype: str
        """
        return self._deployment_name

    @deployment_name.setter
    def deployment_name(self, deployment_name):
        """Sets the deployment_name of this CreateDeploymentRequest.

        The name of the deployment.

        :param deployment_name: The deployment_name of this CreateDeploymentRequest.
        :type deployment_name: str
        """
        if deployment_name is not None and len(deployment_name) > 256:
            raise ValueError("Invalid value for `deployment_name`, length must be less than or equal to `256`")
        if deployment_name is not None and len(deployment_name) < 1:
            raise ValueError("Invalid value for `deployment_name`, length must be greater than or equal to `1`")

        self._deployment_name = deployment_name

    @property
    def components(self):
        """Gets the components of this CreateDeploymentRequest.

        The components to deploy. This is a dictionary, where each key is the name of a component, and each key's value is the version and configuration to deploy for that component.

        :return: The components of this CreateDeploymentRequest.
        :rtype: Dict[str, ComponentDeploymentSpecification]
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this CreateDeploymentRequest.

        The components to deploy. This is a dictionary, where each key is the name of a component, and each key's value is the version and configuration to deploy for that component.

        :param components: The components of this CreateDeploymentRequest.
        :type components: Dict[str, ComponentDeploymentSpecification]
        """

        self._components = components

    @property
    def iot_job_configuration(self):
        """Gets the iot_job_configuration of this CreateDeploymentRequest.


        :return: The iot_job_configuration of this CreateDeploymentRequest.
        :rtype: CreateDeploymentRequestIotJobConfiguration
        """
        return self._iot_job_configuration

    @iot_job_configuration.setter
    def iot_job_configuration(self, iot_job_configuration):
        """Sets the iot_job_configuration of this CreateDeploymentRequest.


        :param iot_job_configuration: The iot_job_configuration of this CreateDeploymentRequest.
        :type iot_job_configuration: CreateDeploymentRequestIotJobConfiguration
        """

        self._iot_job_configuration = iot_job_configuration

    @property
    def deployment_policies(self):
        """Gets the deployment_policies of this CreateDeploymentRequest.


        :return: The deployment_policies of this CreateDeploymentRequest.
        :rtype: CreateDeploymentRequestDeploymentPolicies
        """
        return self._deployment_policies

    @deployment_policies.setter
    def deployment_policies(self, deployment_policies):
        """Sets the deployment_policies of this CreateDeploymentRequest.


        :param deployment_policies: The deployment_policies of this CreateDeploymentRequest.
        :type deployment_policies: CreateDeploymentRequestDeploymentPolicies
        """

        self._deployment_policies = deployment_policies

    @property
    def parent_target_arn(self):
        """Gets the parent_target_arn of this CreateDeploymentRequest.

        The parent deployment's target <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">ARN</a> within a subdeployment.

        :return: The parent_target_arn of this CreateDeploymentRequest.
        :rtype: str
        """
        return self._parent_target_arn

    @parent_target_arn.setter
    def parent_target_arn(self, parent_target_arn):
        """Sets the parent_target_arn of this CreateDeploymentRequest.

        The parent deployment's target <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">ARN</a> within a subdeployment.

        :param parent_target_arn: The parent_target_arn of this CreateDeploymentRequest.
        :type parent_target_arn: str
        """
        if parent_target_arn is not None and not re.search(r'arn:[^:]*:iot:[^:]*:[0-9]+:thinggroup\/.+', parent_target_arn):
            raise ValueError("Invalid value for `parent_target_arn`, must be a follow pattern or equal to `/arn:[^:]*:iot:[^:]*:[0-9]+:thinggroup\/.+/`")

        self._parent_target_arn = parent_target_arn

    @property
    def tags(self):
        """Gets the tags of this CreateDeploymentRequest.

        A list of key-value pairs that contain metadata for the resource. For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html\">Tag your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.

        :return: The tags of this CreateDeploymentRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateDeploymentRequest.

        A list of key-value pairs that contain metadata for the resource. For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html\">Tag your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.

        :param tags: The tags of this CreateDeploymentRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags

    @property
    def client_token(self):
        """Gets the client_token of this CreateDeploymentRequest.

        A unique, case-sensitive identifier that you can provide to ensure that the request is idempotent. Idempotency means that the request is successfully processed only once, even if you send the request multiple times. When a request succeeds, and you specify the same client token for subsequent successful requests, the IoT Greengrass V2 service returns the successful response that it caches from the previous request. IoT Greengrass V2 caches successful responses for idempotent requests for up to 8 hours.

        :return: The client_token of this CreateDeploymentRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateDeploymentRequest.

        A unique, case-sensitive identifier that you can provide to ensure that the request is idempotent. Idempotency means that the request is successfully processed only once, even if you send the request multiple times. When a request succeeds, and you specify the same client token for subsequent successful requests, the IoT Greengrass V2 service returns the successful response that it caches from the previous request. IoT Greengrass V2 caches successful responses for idempotent requests for up to 8 hours.

        :param client_token: The client_token of this CreateDeploymentRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'^[a-zA-Z0-9-]+$', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/^[a-zA-Z0-9-]+$/`")

        self._client_token = client_token
