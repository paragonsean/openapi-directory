# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.vendor_guidance import VendorGuidance
from openapi_server import util


class ResolvedComponentVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, component_name: str=None, component_version: str=None, recipe: str=None, vendor_guidance: VendorGuidance=None, message: str=None):
        """ResolvedComponentVersion - a model defined in OpenAPI

        :param arn: The arn of this ResolvedComponentVersion.
        :param component_name: The component_name of this ResolvedComponentVersion.
        :param component_version: The component_version of this ResolvedComponentVersion.
        :param recipe: The recipe of this ResolvedComponentVersion.
        :param vendor_guidance: The vendor_guidance of this ResolvedComponentVersion.
        :param message: The message of this ResolvedComponentVersion.
        """
        self.openapi_types = {
            'arn': str,
            'component_name': str,
            'component_version': str,
            'recipe': str,
            'vendor_guidance': VendorGuidance,
            'message': str
        }

        self.attribute_map = {
            'arn': 'arn',
            'component_name': 'componentName',
            'component_version': 'componentVersion',
            'recipe': 'recipe',
            'vendor_guidance': 'vendorGuidance',
            'message': 'message'
        }

        self._arn = arn
        self._component_name = component_name
        self._component_version = component_version
        self._recipe = recipe
        self._vendor_guidance = vendor_guidance
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResolvedComponentVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResolvedComponentVersion of this ResolvedComponentVersion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this ResolvedComponentVersion.


        :return: The arn of this ResolvedComponentVersion.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this ResolvedComponentVersion.


        :param arn: The arn of this ResolvedComponentVersion.
        :type arn: str
        """

        self._arn = arn

    @property
    def component_name(self):
        """Gets the component_name of this ResolvedComponentVersion.


        :return: The component_name of this ResolvedComponentVersion.
        :rtype: str
        """
        return self._component_name

    @component_name.setter
    def component_name(self, component_name):
        """Sets the component_name of this ResolvedComponentVersion.


        :param component_name: The component_name of this ResolvedComponentVersion.
        :type component_name: str
        """

        self._component_name = component_name

    @property
    def component_version(self):
        """Gets the component_version of this ResolvedComponentVersion.


        :return: The component_version of this ResolvedComponentVersion.
        :rtype: str
        """
        return self._component_version

    @component_version.setter
    def component_version(self, component_version):
        """Sets the component_version of this ResolvedComponentVersion.


        :param component_version: The component_version of this ResolvedComponentVersion.
        :type component_version: str
        """

        self._component_version = component_version

    @property
    def recipe(self):
        """Gets the recipe of this ResolvedComponentVersion.


        :return: The recipe of this ResolvedComponentVersion.
        :rtype: str
        """
        return self._recipe

    @recipe.setter
    def recipe(self, recipe):
        """Sets the recipe of this ResolvedComponentVersion.


        :param recipe: The recipe of this ResolvedComponentVersion.
        :type recipe: str
        """

        self._recipe = recipe

    @property
    def vendor_guidance(self):
        """Gets the vendor_guidance of this ResolvedComponentVersion.


        :return: The vendor_guidance of this ResolvedComponentVersion.
        :rtype: VendorGuidance
        """
        return self._vendor_guidance

    @vendor_guidance.setter
    def vendor_guidance(self, vendor_guidance):
        """Sets the vendor_guidance of this ResolvedComponentVersion.


        :param vendor_guidance: The vendor_guidance of this ResolvedComponentVersion.
        :type vendor_guidance: VendorGuidance
        """

        self._vendor_guidance = vendor_guidance

    @property
    def message(self):
        """Gets the message of this ResolvedComponentVersion.


        :return: The message of this ResolvedComponentVersion.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ResolvedComponentVersion.


        :param message: The message of this ResolvedComponentVersion.
        :type message: str
        """

        self._message = message
