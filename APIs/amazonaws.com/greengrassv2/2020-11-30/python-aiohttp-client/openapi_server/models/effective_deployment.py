# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.effective_deployment_execution_status import EffectiveDeploymentExecutionStatus
from openapi_server.models.effective_deployment_status_details import EffectiveDeploymentStatusDetails
from openapi_server import util


class EffectiveDeployment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deployment_id: str=None, deployment_name: str=None, iot_job_id: str=None, iot_job_arn: str=None, description: str=None, target_arn: str=None, core_device_execution_status: EffectiveDeploymentExecutionStatus=None, reason: str=None, creation_timestamp: datetime=None, modified_timestamp: datetime=None, status_details: EffectiveDeploymentStatusDetails=None):
        """EffectiveDeployment - a model defined in OpenAPI

        :param deployment_id: The deployment_id of this EffectiveDeployment.
        :param deployment_name: The deployment_name of this EffectiveDeployment.
        :param iot_job_id: The iot_job_id of this EffectiveDeployment.
        :param iot_job_arn: The iot_job_arn of this EffectiveDeployment.
        :param description: The description of this EffectiveDeployment.
        :param target_arn: The target_arn of this EffectiveDeployment.
        :param core_device_execution_status: The core_device_execution_status of this EffectiveDeployment.
        :param reason: The reason of this EffectiveDeployment.
        :param creation_timestamp: The creation_timestamp of this EffectiveDeployment.
        :param modified_timestamp: The modified_timestamp of this EffectiveDeployment.
        :param status_details: The status_details of this EffectiveDeployment.
        """
        self.openapi_types = {
            'deployment_id': str,
            'deployment_name': str,
            'iot_job_id': str,
            'iot_job_arn': str,
            'description': str,
            'target_arn': str,
            'core_device_execution_status': EffectiveDeploymentExecutionStatus,
            'reason': str,
            'creation_timestamp': datetime,
            'modified_timestamp': datetime,
            'status_details': EffectiveDeploymentStatusDetails
        }

        self.attribute_map = {
            'deployment_id': 'deploymentId',
            'deployment_name': 'deploymentName',
            'iot_job_id': 'iotJobId',
            'iot_job_arn': 'iotJobArn',
            'description': 'description',
            'target_arn': 'targetArn',
            'core_device_execution_status': 'coreDeviceExecutionStatus',
            'reason': 'reason',
            'creation_timestamp': 'creationTimestamp',
            'modified_timestamp': 'modifiedTimestamp',
            'status_details': 'statusDetails'
        }

        self._deployment_id = deployment_id
        self._deployment_name = deployment_name
        self._iot_job_id = iot_job_id
        self._iot_job_arn = iot_job_arn
        self._description = description
        self._target_arn = target_arn
        self._core_device_execution_status = core_device_execution_status
        self._reason = reason
        self._creation_timestamp = creation_timestamp
        self._modified_timestamp = modified_timestamp
        self._status_details = status_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EffectiveDeployment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EffectiveDeployment of this EffectiveDeployment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deployment_id(self):
        """Gets the deployment_id of this EffectiveDeployment.


        :return: The deployment_id of this EffectiveDeployment.
        :rtype: str
        """
        return self._deployment_id

    @deployment_id.setter
    def deployment_id(self, deployment_id):
        """Sets the deployment_id of this EffectiveDeployment.


        :param deployment_id: The deployment_id of this EffectiveDeployment.
        :type deployment_id: str
        """
        if deployment_id is None:
            raise ValueError("Invalid value for `deployment_id`, must not be `None`")

        self._deployment_id = deployment_id

    @property
    def deployment_name(self):
        """Gets the deployment_name of this EffectiveDeployment.


        :return: The deployment_name of this EffectiveDeployment.
        :rtype: str
        """
        return self._deployment_name

    @deployment_name.setter
    def deployment_name(self, deployment_name):
        """Sets the deployment_name of this EffectiveDeployment.


        :param deployment_name: The deployment_name of this EffectiveDeployment.
        :type deployment_name: str
        """
        if deployment_name is None:
            raise ValueError("Invalid value for `deployment_name`, must not be `None`")

        self._deployment_name = deployment_name

    @property
    def iot_job_id(self):
        """Gets the iot_job_id of this EffectiveDeployment.


        :return: The iot_job_id of this EffectiveDeployment.
        :rtype: str
        """
        return self._iot_job_id

    @iot_job_id.setter
    def iot_job_id(self, iot_job_id):
        """Sets the iot_job_id of this EffectiveDeployment.


        :param iot_job_id: The iot_job_id of this EffectiveDeployment.
        :type iot_job_id: str
        """

        self._iot_job_id = iot_job_id

    @property
    def iot_job_arn(self):
        """Gets the iot_job_arn of this EffectiveDeployment.


        :return: The iot_job_arn of this EffectiveDeployment.
        :rtype: str
        """
        return self._iot_job_arn

    @iot_job_arn.setter
    def iot_job_arn(self, iot_job_arn):
        """Sets the iot_job_arn of this EffectiveDeployment.


        :param iot_job_arn: The iot_job_arn of this EffectiveDeployment.
        :type iot_job_arn: str
        """

        self._iot_job_arn = iot_job_arn

    @property
    def description(self):
        """Gets the description of this EffectiveDeployment.


        :return: The description of this EffectiveDeployment.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EffectiveDeployment.


        :param description: The description of this EffectiveDeployment.
        :type description: str
        """

        self._description = description

    @property
    def target_arn(self):
        """Gets the target_arn of this EffectiveDeployment.


        :return: The target_arn of this EffectiveDeployment.
        :rtype: str
        """
        return self._target_arn

    @target_arn.setter
    def target_arn(self, target_arn):
        """Sets the target_arn of this EffectiveDeployment.


        :param target_arn: The target_arn of this EffectiveDeployment.
        :type target_arn: str
        """
        if target_arn is None:
            raise ValueError("Invalid value for `target_arn`, must not be `None`")

        self._target_arn = target_arn

    @property
    def core_device_execution_status(self):
        """Gets the core_device_execution_status of this EffectiveDeployment.


        :return: The core_device_execution_status of this EffectiveDeployment.
        :rtype: EffectiveDeploymentExecutionStatus
        """
        return self._core_device_execution_status

    @core_device_execution_status.setter
    def core_device_execution_status(self, core_device_execution_status):
        """Sets the core_device_execution_status of this EffectiveDeployment.


        :param core_device_execution_status: The core_device_execution_status of this EffectiveDeployment.
        :type core_device_execution_status: EffectiveDeploymentExecutionStatus
        """
        if core_device_execution_status is None:
            raise ValueError("Invalid value for `core_device_execution_status`, must not be `None`")

        self._core_device_execution_status = core_device_execution_status

    @property
    def reason(self):
        """Gets the reason of this EffectiveDeployment.


        :return: The reason of this EffectiveDeployment.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this EffectiveDeployment.


        :param reason: The reason of this EffectiveDeployment.
        :type reason: str
        """

        self._reason = reason

    @property
    def creation_timestamp(self):
        """Gets the creation_timestamp of this EffectiveDeployment.


        :return: The creation_timestamp of this EffectiveDeployment.
        :rtype: datetime
        """
        return self._creation_timestamp

    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp):
        """Sets the creation_timestamp of this EffectiveDeployment.


        :param creation_timestamp: The creation_timestamp of this EffectiveDeployment.
        :type creation_timestamp: datetime
        """
        if creation_timestamp is None:
            raise ValueError("Invalid value for `creation_timestamp`, must not be `None`")

        self._creation_timestamp = creation_timestamp

    @property
    def modified_timestamp(self):
        """Gets the modified_timestamp of this EffectiveDeployment.


        :return: The modified_timestamp of this EffectiveDeployment.
        :rtype: datetime
        """
        return self._modified_timestamp

    @modified_timestamp.setter
    def modified_timestamp(self, modified_timestamp):
        """Sets the modified_timestamp of this EffectiveDeployment.


        :param modified_timestamp: The modified_timestamp of this EffectiveDeployment.
        :type modified_timestamp: datetime
        """
        if modified_timestamp is None:
            raise ValueError("Invalid value for `modified_timestamp`, must not be `None`")

        self._modified_timestamp = modified_timestamp

    @property
    def status_details(self):
        """Gets the status_details of this EffectiveDeployment.


        :return: The status_details of this EffectiveDeployment.
        :rtype: EffectiveDeploymentStatusDetails
        """
        return self._status_details

    @status_details.setter
    def status_details(self, status_details):
        """Sets the status_details of this EffectiveDeployment.


        :param status_details: The status_details of this EffectiveDeployment.
        :type status_details: EffectiveDeploymentStatusDetails
        """

        self._status_details = status_details
