# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.io_t_job_exponential_rollout_rate_rate_increase_criteria import IoTJobExponentialRolloutRateRateIncreaseCriteria
from openapi_server import util


class IoTJobExponentialRolloutRate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_rate_per_minute: int=None, increment_factor: float=None, rate_increase_criteria: IoTJobExponentialRolloutRateRateIncreaseCriteria=None):
        """IoTJobExponentialRolloutRate - a model defined in OpenAPI

        :param base_rate_per_minute: The base_rate_per_minute of this IoTJobExponentialRolloutRate.
        :param increment_factor: The increment_factor of this IoTJobExponentialRolloutRate.
        :param rate_increase_criteria: The rate_increase_criteria of this IoTJobExponentialRolloutRate.
        """
        self.openapi_types = {
            'base_rate_per_minute': int,
            'increment_factor': float,
            'rate_increase_criteria': IoTJobExponentialRolloutRateRateIncreaseCriteria
        }

        self.attribute_map = {
            'base_rate_per_minute': 'baseRatePerMinute',
            'increment_factor': 'incrementFactor',
            'rate_increase_criteria': 'rateIncreaseCriteria'
        }

        self._base_rate_per_minute = base_rate_per_minute
        self._increment_factor = increment_factor
        self._rate_increase_criteria = rate_increase_criteria

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IoTJobExponentialRolloutRate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IoTJobExponentialRolloutRate of this IoTJobExponentialRolloutRate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_rate_per_minute(self):
        """Gets the base_rate_per_minute of this IoTJobExponentialRolloutRate.


        :return: The base_rate_per_minute of this IoTJobExponentialRolloutRate.
        :rtype: int
        """
        return self._base_rate_per_minute

    @base_rate_per_minute.setter
    def base_rate_per_minute(self, base_rate_per_minute):
        """Sets the base_rate_per_minute of this IoTJobExponentialRolloutRate.


        :param base_rate_per_minute: The base_rate_per_minute of this IoTJobExponentialRolloutRate.
        :type base_rate_per_minute: int
        """
        if base_rate_per_minute is None:
            raise ValueError("Invalid value for `base_rate_per_minute`, must not be `None`")

        self._base_rate_per_minute = base_rate_per_minute

    @property
    def increment_factor(self):
        """Gets the increment_factor of this IoTJobExponentialRolloutRate.


        :return: The increment_factor of this IoTJobExponentialRolloutRate.
        :rtype: float
        """
        return self._increment_factor

    @increment_factor.setter
    def increment_factor(self, increment_factor):
        """Sets the increment_factor of this IoTJobExponentialRolloutRate.


        :param increment_factor: The increment_factor of this IoTJobExponentialRolloutRate.
        :type increment_factor: float
        """
        if increment_factor is None:
            raise ValueError("Invalid value for `increment_factor`, must not be `None`")

        self._increment_factor = increment_factor

    @property
    def rate_increase_criteria(self):
        """Gets the rate_increase_criteria of this IoTJobExponentialRolloutRate.


        :return: The rate_increase_criteria of this IoTJobExponentialRolloutRate.
        :rtype: IoTJobExponentialRolloutRateRateIncreaseCriteria
        """
        return self._rate_increase_criteria

    @rate_increase_criteria.setter
    def rate_increase_criteria(self, rate_increase_criteria):
        """Sets the rate_increase_criteria of this IoTJobExponentialRolloutRate.


        :param rate_increase_criteria: The rate_increase_criteria of this IoTJobExponentialRolloutRate.
        :type rate_increase_criteria: IoTJobExponentialRolloutRateRateIncreaseCriteria
        """
        if rate_increase_criteria is None:
            raise ValueError("Invalid value for `rate_increase_criteria`, must not be `None`")

        self._rate_increase_criteria = rate_increase_criteria
