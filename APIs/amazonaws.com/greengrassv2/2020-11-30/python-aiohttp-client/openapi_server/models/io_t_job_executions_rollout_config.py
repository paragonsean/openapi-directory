# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.io_t_job_executions_rollout_config_exponential_rate import IoTJobExecutionsRolloutConfigExponentialRate
from openapi_server import util


class IoTJobExecutionsRolloutConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exponential_rate: IoTJobExecutionsRolloutConfigExponentialRate=None, maximum_per_minute: int=None):
        """IoTJobExecutionsRolloutConfig - a model defined in OpenAPI

        :param exponential_rate: The exponential_rate of this IoTJobExecutionsRolloutConfig.
        :param maximum_per_minute: The maximum_per_minute of this IoTJobExecutionsRolloutConfig.
        """
        self.openapi_types = {
            'exponential_rate': IoTJobExecutionsRolloutConfigExponentialRate,
            'maximum_per_minute': int
        }

        self.attribute_map = {
            'exponential_rate': 'exponentialRate',
            'maximum_per_minute': 'maximumPerMinute'
        }

        self._exponential_rate = exponential_rate
        self._maximum_per_minute = maximum_per_minute

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IoTJobExecutionsRolloutConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IoTJobExecutionsRolloutConfig of this IoTJobExecutionsRolloutConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exponential_rate(self):
        """Gets the exponential_rate of this IoTJobExecutionsRolloutConfig.


        :return: The exponential_rate of this IoTJobExecutionsRolloutConfig.
        :rtype: IoTJobExecutionsRolloutConfigExponentialRate
        """
        return self._exponential_rate

    @exponential_rate.setter
    def exponential_rate(self, exponential_rate):
        """Sets the exponential_rate of this IoTJobExecutionsRolloutConfig.


        :param exponential_rate: The exponential_rate of this IoTJobExecutionsRolloutConfig.
        :type exponential_rate: IoTJobExecutionsRolloutConfigExponentialRate
        """

        self._exponential_rate = exponential_rate

    @property
    def maximum_per_minute(self):
        """Gets the maximum_per_minute of this IoTJobExecutionsRolloutConfig.


        :return: The maximum_per_minute of this IoTJobExecutionsRolloutConfig.
        :rtype: int
        """
        return self._maximum_per_minute

    @maximum_per_minute.setter
    def maximum_per_minute(self, maximum_per_minute):
        """Sets the maximum_per_minute of this IoTJobExecutionsRolloutConfig.


        :param maximum_per_minute: The maximum_per_minute of this IoTJobExecutionsRolloutConfig.
        :type maximum_per_minute: int
        """

        self._maximum_per_minute = maximum_per_minute
