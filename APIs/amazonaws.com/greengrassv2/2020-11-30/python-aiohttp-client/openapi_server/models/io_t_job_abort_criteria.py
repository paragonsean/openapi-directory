# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.io_t_job_abort_action import IoTJobAbortAction
from openapi_server.models.io_t_job_execution_failure_type import IoTJobExecutionFailureType
from openapi_server import util


class IoTJobAbortCriteria(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, failure_type: IoTJobExecutionFailureType=None, action: IoTJobAbortAction=None, threshold_percentage: float=None, min_number_of_executed_things: int=None):
        """IoTJobAbortCriteria - a model defined in OpenAPI

        :param failure_type: The failure_type of this IoTJobAbortCriteria.
        :param action: The action of this IoTJobAbortCriteria.
        :param threshold_percentage: The threshold_percentage of this IoTJobAbortCriteria.
        :param min_number_of_executed_things: The min_number_of_executed_things of this IoTJobAbortCriteria.
        """
        self.openapi_types = {
            'failure_type': IoTJobExecutionFailureType,
            'action': IoTJobAbortAction,
            'threshold_percentage': float,
            'min_number_of_executed_things': int
        }

        self.attribute_map = {
            'failure_type': 'failureType',
            'action': 'action',
            'threshold_percentage': 'thresholdPercentage',
            'min_number_of_executed_things': 'minNumberOfExecutedThings'
        }

        self._failure_type = failure_type
        self._action = action
        self._threshold_percentage = threshold_percentage
        self._min_number_of_executed_things = min_number_of_executed_things

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IoTJobAbortCriteria':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IoTJobAbortCriteria of this IoTJobAbortCriteria.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def failure_type(self):
        """Gets the failure_type of this IoTJobAbortCriteria.


        :return: The failure_type of this IoTJobAbortCriteria.
        :rtype: IoTJobExecutionFailureType
        """
        return self._failure_type

    @failure_type.setter
    def failure_type(self, failure_type):
        """Sets the failure_type of this IoTJobAbortCriteria.


        :param failure_type: The failure_type of this IoTJobAbortCriteria.
        :type failure_type: IoTJobExecutionFailureType
        """
        if failure_type is None:
            raise ValueError("Invalid value for `failure_type`, must not be `None`")

        self._failure_type = failure_type

    @property
    def action(self):
        """Gets the action of this IoTJobAbortCriteria.


        :return: The action of this IoTJobAbortCriteria.
        :rtype: IoTJobAbortAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this IoTJobAbortCriteria.


        :param action: The action of this IoTJobAbortCriteria.
        :type action: IoTJobAbortAction
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def threshold_percentage(self):
        """Gets the threshold_percentage of this IoTJobAbortCriteria.


        :return: The threshold_percentage of this IoTJobAbortCriteria.
        :rtype: float
        """
        return self._threshold_percentage

    @threshold_percentage.setter
    def threshold_percentage(self, threshold_percentage):
        """Sets the threshold_percentage of this IoTJobAbortCriteria.


        :param threshold_percentage: The threshold_percentage of this IoTJobAbortCriteria.
        :type threshold_percentage: float
        """
        if threshold_percentage is None:
            raise ValueError("Invalid value for `threshold_percentage`, must not be `None`")

        self._threshold_percentage = threshold_percentage

    @property
    def min_number_of_executed_things(self):
        """Gets the min_number_of_executed_things of this IoTJobAbortCriteria.


        :return: The min_number_of_executed_things of this IoTJobAbortCriteria.
        :rtype: int
        """
        return self._min_number_of_executed_things

    @min_number_of_executed_things.setter
    def min_number_of_executed_things(self, min_number_of_executed_things):
        """Sets the min_number_of_executed_things of this IoTJobAbortCriteria.


        :param min_number_of_executed_things: The min_number_of_executed_things of this IoTJobAbortCriteria.
        :type min_number_of_executed_things: int
        """
        if min_number_of_executed_things is None:
            raise ValueError("Invalid value for `min_number_of_executed_things`, must not be `None`")

        self._min_number_of_executed_things = min_number_of_executed_things
