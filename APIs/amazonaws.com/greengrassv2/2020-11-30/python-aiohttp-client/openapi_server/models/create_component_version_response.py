# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_component_version_response_status import CreateComponentVersionResponseStatus
from openapi_server import util


class CreateComponentVersionResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, component_name: str=None, component_version: str=None, creation_timestamp: datetime=None, status: CreateComponentVersionResponseStatus=None):
        """CreateComponentVersionResponse - a model defined in OpenAPI

        :param arn: The arn of this CreateComponentVersionResponse.
        :param component_name: The component_name of this CreateComponentVersionResponse.
        :param component_version: The component_version of this CreateComponentVersionResponse.
        :param creation_timestamp: The creation_timestamp of this CreateComponentVersionResponse.
        :param status: The status of this CreateComponentVersionResponse.
        """
        self.openapi_types = {
            'arn': str,
            'component_name': str,
            'component_version': str,
            'creation_timestamp': datetime,
            'status': CreateComponentVersionResponseStatus
        }

        self.attribute_map = {
            'arn': 'arn',
            'component_name': 'componentName',
            'component_version': 'componentVersion',
            'creation_timestamp': 'creationTimestamp',
            'status': 'status'
        }

        self._arn = arn
        self._component_name = component_name
        self._component_version = component_version
        self._creation_timestamp = creation_timestamp
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateComponentVersionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateComponentVersionResponse of this CreateComponentVersionResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this CreateComponentVersionResponse.


        :return: The arn of this CreateComponentVersionResponse.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this CreateComponentVersionResponse.


        :param arn: The arn of this CreateComponentVersionResponse.
        :type arn: str
        """

        self._arn = arn

    @property
    def component_name(self):
        """Gets the component_name of this CreateComponentVersionResponse.


        :return: The component_name of this CreateComponentVersionResponse.
        :rtype: str
        """
        return self._component_name

    @component_name.setter
    def component_name(self, component_name):
        """Sets the component_name of this CreateComponentVersionResponse.


        :param component_name: The component_name of this CreateComponentVersionResponse.
        :type component_name: str
        """
        if component_name is None:
            raise ValueError("Invalid value for `component_name`, must not be `None`")

        self._component_name = component_name

    @property
    def component_version(self):
        """Gets the component_version of this CreateComponentVersionResponse.


        :return: The component_version of this CreateComponentVersionResponse.
        :rtype: str
        """
        return self._component_version

    @component_version.setter
    def component_version(self, component_version):
        """Sets the component_version of this CreateComponentVersionResponse.


        :param component_version: The component_version of this CreateComponentVersionResponse.
        :type component_version: str
        """
        if component_version is None:
            raise ValueError("Invalid value for `component_version`, must not be `None`")

        self._component_version = component_version

    @property
    def creation_timestamp(self):
        """Gets the creation_timestamp of this CreateComponentVersionResponse.


        :return: The creation_timestamp of this CreateComponentVersionResponse.
        :rtype: datetime
        """
        return self._creation_timestamp

    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp):
        """Sets the creation_timestamp of this CreateComponentVersionResponse.


        :param creation_timestamp: The creation_timestamp of this CreateComponentVersionResponse.
        :type creation_timestamp: datetime
        """
        if creation_timestamp is None:
            raise ValueError("Invalid value for `creation_timestamp`, must not be `None`")

        self._creation_timestamp = creation_timestamp

    @property
    def status(self):
        """Gets the status of this CreateComponentVersionResponse.


        :return: The status of this CreateComponentVersionResponse.
        :rtype: CreateComponentVersionResponseStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateComponentVersionResponse.


        :param status: The status of this CreateComponentVersionResponse.
        :type status: CreateComponentVersionResponseStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
