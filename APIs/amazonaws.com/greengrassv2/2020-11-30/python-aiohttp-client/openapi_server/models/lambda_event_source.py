# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.lambda_event_source_type import LambdaEventSourceType
from openapi_server import util


class LambdaEventSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, topic: str=None, type: LambdaEventSourceType=None):
        """LambdaEventSource - a model defined in OpenAPI

        :param topic: The topic of this LambdaEventSource.
        :param type: The type of this LambdaEventSource.
        """
        self.openapi_types = {
            'topic': str,
            'type': LambdaEventSourceType
        }

        self.attribute_map = {
            'topic': 'topic',
            'type': 'type'
        }

        self._topic = topic
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LambdaEventSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LambdaEventSource of this LambdaEventSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def topic(self):
        """Gets the topic of this LambdaEventSource.


        :return: The topic of this LambdaEventSource.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this LambdaEventSource.


        :param topic: The topic of this LambdaEventSource.
        :type topic: str
        """
        if topic is None:
            raise ValueError("Invalid value for `topic`, must not be `None`")

        self._topic = topic

    @property
    def type(self):
        """Gets the type of this LambdaEventSource.


        :return: The type of this LambdaEventSource.
        :rtype: LambdaEventSourceType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LambdaEventSource.


        :param type: The type of this LambdaEventSource.
        :type type: LambdaEventSourceType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
