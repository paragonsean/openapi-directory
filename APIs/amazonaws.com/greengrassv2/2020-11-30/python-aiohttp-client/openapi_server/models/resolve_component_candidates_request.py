# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.component_candidate import ComponentCandidate
from openapi_server.models.resolve_component_candidates_request_platform import ResolveComponentCandidatesRequestPlatform
from openapi_server import util


class ResolveComponentCandidatesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, platform: ResolveComponentCandidatesRequestPlatform=None, component_candidates: List[ComponentCandidate]=None):
        """ResolveComponentCandidatesRequest - a model defined in OpenAPI

        :param platform: The platform of this ResolveComponentCandidatesRequest.
        :param component_candidates: The component_candidates of this ResolveComponentCandidatesRequest.
        """
        self.openapi_types = {
            'platform': ResolveComponentCandidatesRequestPlatform,
            'component_candidates': List[ComponentCandidate]
        }

        self.attribute_map = {
            'platform': 'platform',
            'component_candidates': 'componentCandidates'
        }

        self._platform = platform
        self._component_candidates = component_candidates

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResolveComponentCandidatesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResolveComponentCandidates_request of this ResolveComponentCandidatesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def platform(self):
        """Gets the platform of this ResolveComponentCandidatesRequest.


        :return: The platform of this ResolveComponentCandidatesRequest.
        :rtype: ResolveComponentCandidatesRequestPlatform
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this ResolveComponentCandidatesRequest.


        :param platform: The platform of this ResolveComponentCandidatesRequest.
        :type platform: ResolveComponentCandidatesRequestPlatform
        """

        self._platform = platform

    @property
    def component_candidates(self):
        """Gets the component_candidates of this ResolveComponentCandidatesRequest.

        The list of components to resolve.

        :return: The component_candidates of this ResolveComponentCandidatesRequest.
        :rtype: List[ComponentCandidate]
        """
        return self._component_candidates

    @component_candidates.setter
    def component_candidates(self, component_candidates):
        """Sets the component_candidates of this ResolveComponentCandidatesRequest.

        The list of components to resolve.

        :param component_candidates: The component_candidates of this ResolveComponentCandidatesRequest.
        :type component_candidates: List[ComponentCandidate]
        """

        self._component_candidates = component_candidates
