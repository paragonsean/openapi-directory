# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_component_version_request_lambda_function import CreateComponentVersionRequestLambdaFunction
import re
from openapi_server import util


class CreateComponentVersionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, inline_recipe: str=None, lambda_function: CreateComponentVersionRequestLambdaFunction=None, tags: Dict[str, str]=None, client_token: str=None):
        """CreateComponentVersionRequest - a model defined in OpenAPI

        :param inline_recipe: The inline_recipe of this CreateComponentVersionRequest.
        :param lambda_function: The lambda_function of this CreateComponentVersionRequest.
        :param tags: The tags of this CreateComponentVersionRequest.
        :param client_token: The client_token of this CreateComponentVersionRequest.
        """
        self.openapi_types = {
            'inline_recipe': str,
            'lambda_function': CreateComponentVersionRequestLambdaFunction,
            'tags': Dict[str, str],
            'client_token': str
        }

        self.attribute_map = {
            'inline_recipe': 'inlineRecipe',
            'lambda_function': 'lambdaFunction',
            'tags': 'tags',
            'client_token': 'clientToken'
        }

        self._inline_recipe = inline_recipe
        self._lambda_function = lambda_function
        self._tags = tags
        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateComponentVersionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateComponentVersion_request of this CreateComponentVersionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def inline_recipe(self):
        """Gets the inline_recipe of this CreateComponentVersionRequest.

        <p>The recipe to use to create the component. The recipe defines the component's metadata, parameters, dependencies, lifecycle, artifacts, and platform compatibility.</p> <p>You must specify either <code>inlineRecipe</code> or <code>lambdaFunction</code>.</p>

        :return: The inline_recipe of this CreateComponentVersionRequest.
        :rtype: str
        """
        return self._inline_recipe

    @inline_recipe.setter
    def inline_recipe(self, inline_recipe):
        """Sets the inline_recipe of this CreateComponentVersionRequest.

        <p>The recipe to use to create the component. The recipe defines the component's metadata, parameters, dependencies, lifecycle, artifacts, and platform compatibility.</p> <p>You must specify either <code>inlineRecipe</code> or <code>lambdaFunction</code>.</p>

        :param inline_recipe: The inline_recipe of this CreateComponentVersionRequest.
        :type inline_recipe: str
        """

        self._inline_recipe = inline_recipe

    @property
    def lambda_function(self):
        """Gets the lambda_function of this CreateComponentVersionRequest.


        :return: The lambda_function of this CreateComponentVersionRequest.
        :rtype: CreateComponentVersionRequestLambdaFunction
        """
        return self._lambda_function

    @lambda_function.setter
    def lambda_function(self, lambda_function):
        """Sets the lambda_function of this CreateComponentVersionRequest.


        :param lambda_function: The lambda_function of this CreateComponentVersionRequest.
        :type lambda_function: CreateComponentVersionRequestLambdaFunction
        """

        self._lambda_function = lambda_function

    @property
    def tags(self):
        """Gets the tags of this CreateComponentVersionRequest.

        A list of key-value pairs that contain metadata for the resource. For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html\">Tag your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.

        :return: The tags of this CreateComponentVersionRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateComponentVersionRequest.

        A list of key-value pairs that contain metadata for the resource. For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html\">Tag your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.

        :param tags: The tags of this CreateComponentVersionRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags

    @property
    def client_token(self):
        """Gets the client_token of this CreateComponentVersionRequest.

        A unique, case-sensitive identifier that you can provide to ensure that the request is idempotent. Idempotency means that the request is successfully processed only once, even if you send the request multiple times. When a request succeeds, and you specify the same client token for subsequent successful requests, the IoT Greengrass V2 service returns the successful response that it caches from the previous request. IoT Greengrass V2 caches successful responses for idempotent requests for up to 8 hours.

        :return: The client_token of this CreateComponentVersionRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateComponentVersionRequest.

        A unique, case-sensitive identifier that you can provide to ensure that the request is idempotent. Idempotency means that the request is successfully processed only once, even if you send the request multiple times. When a request succeeds, and you specify the same client token for subsequent successful requests, the IoT Greengrass V2 service returns the successful response that it caches from the previous request. IoT Greengrass V2 caches successful responses for idempotent requests for up to 8 hours.

        :param client_token: The client_token of this CreateComponentVersionRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'^[a-zA-Z0-9-]+$', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/^[a-zA-Z0-9-]+$/`")

        self._client_token = client_token
