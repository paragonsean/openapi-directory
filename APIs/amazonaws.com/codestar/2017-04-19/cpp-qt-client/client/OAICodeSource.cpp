/**
 * AWS CodeStar
 * <fullname>AWS CodeStar</fullname> <p>This is the API reference for AWS CodeStar. This reference provides descriptions of the operations and data types for the AWS CodeStar API along with usage examples.</p> <p>You can use the AWS CodeStar API to work with:</p> <p>Projects and their resources, by calling the following:</p> <ul> <li> <p> <code>DeleteProject</code>, which deletes a project.</p> </li> <li> <p> <code>DescribeProject</code>, which lists the attributes of a project.</p> </li> <li> <p> <code>ListProjects</code>, which lists all projects associated with your AWS account.</p> </li> <li> <p> <code>ListResources</code>, which lists the resources associated with a project.</p> </li> <li> <p> <code>ListTagsForProject</code>, which lists the tags associated with a project.</p> </li> <li> <p> <code>TagProject</code>, which adds tags to a project.</p> </li> <li> <p> <code>UntagProject</code>, which removes tags from a project.</p> </li> <li> <p> <code>UpdateProject</code>, which updates the attributes of a project.</p> </li> </ul> <p>Teams and team members, by calling the following:</p> <ul> <li> <p> <code>AssociateTeamMember</code>, which adds an IAM user to the team for a project.</p> </li> <li> <p> <code>DisassociateTeamMember</code>, which removes an IAM user from the team for a project.</p> </li> <li> <p> <code>ListTeamMembers</code>, which lists all the IAM users in the team for a project, including their roles and attributes.</p> </li> <li> <p> <code>UpdateTeamMember</code>, which updates a team member's attributes in a project.</p> </li> </ul> <p>Users, by calling the following:</p> <ul> <li> <p> <code>CreateUserProfile</code>, which creates a user profile that contains data associated with the user across all projects.</p> </li> <li> <p> <code>DeleteUserProfile</code>, which deletes all user profile information across all projects.</p> </li> <li> <p> <code>DescribeUserProfile</code>, which describes the profile of a user.</p> </li> <li> <p> <code>ListUserProfiles</code>, which lists all user profiles.</p> </li> <li> <p> <code>UpdateUserProfile</code>, which updates the profile for a user.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICodeSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICodeSource::OAICodeSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICodeSource::OAICodeSource() {
    this->initializeModel();
}

OAICodeSource::~OAICodeSource() {}

void OAICodeSource::initializeModel() {

    m_s3_isSet = false;
    m_s3_isValid = false;
}

void OAICodeSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICodeSource::fromJsonObject(QJsonObject json) {

    m_s3_isValid = ::OpenAPI::fromJsonValue(m_s3, json[QString("s3")]);
    m_s3_isSet = !json[QString("s3")].isNull() && m_s3_isValid;
}

QString OAICodeSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICodeSource::asJsonObject() const {
    QJsonObject obj;
    if (m_s3.isSet()) {
        obj.insert(QString("s3"), ::OpenAPI::toJsonValue(m_s3));
    }
    return obj;
}

OAICodeSource_s3 OAICodeSource::getS3() const {
    return m_s3;
}
void OAICodeSource::setS3(const OAICodeSource_s3 &s3) {
    m_s3 = s3;
    m_s3_isSet = true;
}

bool OAICodeSource::is_s3_Set() const{
    return m_s3_isSet;
}

bool OAICodeSource::is_s3_Valid() const{
    return m_s3_isValid;
}

bool OAICodeSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICodeSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_s3_isValid && true;
}

} // namespace OpenAPI
