/**
 * AWS CodeStar
 * <fullname>AWS CodeStar</fullname> <p>This is the API reference for AWS CodeStar. This reference provides descriptions of the operations and data types for the AWS CodeStar API along with usage examples.</p> <p>You can use the AWS CodeStar API to work with:</p> <p>Projects and their resources, by calling the following:</p> <ul> <li> <p> <code>DeleteProject</code>, which deletes a project.</p> </li> <li> <p> <code>DescribeProject</code>, which lists the attributes of a project.</p> </li> <li> <p> <code>ListProjects</code>, which lists all projects associated with your AWS account.</p> </li> <li> <p> <code>ListResources</code>, which lists the resources associated with a project.</p> </li> <li> <p> <code>ListTagsForProject</code>, which lists the tags associated with a project.</p> </li> <li> <p> <code>TagProject</code>, which adds tags to a project.</p> </li> <li> <p> <code>UntagProject</code>, which removes tags from a project.</p> </li> <li> <p> <code>UpdateProject</code>, which updates the attributes of a project.</p> </li> </ul> <p>Teams and team members, by calling the following:</p> <ul> <li> <p> <code>AssociateTeamMember</code>, which adds an IAM user to the team for a project.</p> </li> <li> <p> <code>DisassociateTeamMember</code>, which removes an IAM user from the team for a project.</p> </li> <li> <p> <code>ListTeamMembers</code>, which lists all the IAM users in the team for a project, including their roles and attributes.</p> </li> <li> <p> <code>UpdateTeamMember</code>, which updates a team member's attributes in a project.</p> </li> </ul> <p>Users, by calling the following:</p> <ul> <li> <p> <code>CreateUserProfile</code>, which creates a user profile that contains data associated with the user across all projects.</p> </li> <li> <p> <code>DeleteUserProfile</code>, which deletes all user profile information across all projects.</p> </li> <li> <p> <code>DescribeUserProfile</code>, which describes the profile of a user.</p> </li> <li> <p> <code>ListUserProfiles</code>, which lists all user profiles.</p> </li> <li> <p> <code>UpdateUserProfile</code>, which updates the profile for a user.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeProjectResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeProjectResult::OAIDescribeProjectResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeProjectResult::OAIDescribeProjectResult() {
    this->initializeModel();
}

OAIDescribeProjectResult::~OAIDescribeProjectResult() {}

void OAIDescribeProjectResult::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_created_time_stamp_isSet = false;
    m_created_time_stamp_isValid = false;

    m_stack_id_isSet = false;
    m_stack_id_isValid = false;

    m_project_template_id_isSet = false;
    m_project_template_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDescribeProjectResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeProjectResult::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("clientRequestToken")]);
    m_client_request_token_isSet = !json[QString("clientRequestToken")].isNull() && m_client_request_token_isValid;

    m_created_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_created_time_stamp, json[QString("createdTimeStamp")]);
    m_created_time_stamp_isSet = !json[QString("createdTimeStamp")].isNull() && m_created_time_stamp_isValid;

    m_stack_id_isValid = ::OpenAPI::fromJsonValue(m_stack_id, json[QString("stackId")]);
    m_stack_id_isSet = !json[QString("stackId")].isNull() && m_stack_id_isValid;

    m_project_template_id_isValid = ::OpenAPI::fromJsonValue(m_project_template_id, json[QString("projectTemplateId")]);
    m_project_template_id_isSet = !json[QString("projectTemplateId")].isNull() && m_project_template_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIDescribeProjectResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeProjectResult::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("clientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_created_time_stamp_isSet) {
        obj.insert(QString("createdTimeStamp"), ::OpenAPI::toJsonValue(m_created_time_stamp));
    }
    if (m_stack_id_isSet) {
        obj.insert(QString("stackId"), ::OpenAPI::toJsonValue(m_stack_id));
    }
    if (m_project_template_id_isSet) {
        obj.insert(QString("projectTemplateId"), ::OpenAPI::toJsonValue(m_project_template_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIDescribeProjectResult::getName() const {
    return m_name;
}
void OAIDescribeProjectResult::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDescribeProjectResult::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDescribeProjectResult::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDescribeProjectResult::getId() const {
    return m_id;
}
void OAIDescribeProjectResult::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDescribeProjectResult::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDescribeProjectResult::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDescribeProjectResult::getArn() const {
    return m_arn;
}
void OAIDescribeProjectResult::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDescribeProjectResult::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDescribeProjectResult::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDescribeProjectResult::getDescription() const {
    return m_description;
}
void OAIDescribeProjectResult::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDescribeProjectResult::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDescribeProjectResult::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDescribeProjectResult::getClientRequestToken() const {
    return m_client_request_token;
}
void OAIDescribeProjectResult::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAIDescribeProjectResult::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAIDescribeProjectResult::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QDateTime OAIDescribeProjectResult::getCreatedTimeStamp() const {
    return m_created_time_stamp;
}
void OAIDescribeProjectResult::setCreatedTimeStamp(const QDateTime &created_time_stamp) {
    m_created_time_stamp = created_time_stamp;
    m_created_time_stamp_isSet = true;
}

bool OAIDescribeProjectResult::is_created_time_stamp_Set() const{
    return m_created_time_stamp_isSet;
}

bool OAIDescribeProjectResult::is_created_time_stamp_Valid() const{
    return m_created_time_stamp_isValid;
}

QString OAIDescribeProjectResult::getStackId() const {
    return m_stack_id;
}
void OAIDescribeProjectResult::setStackId(const QString &stack_id) {
    m_stack_id = stack_id;
    m_stack_id_isSet = true;
}

bool OAIDescribeProjectResult::is_stack_id_Set() const{
    return m_stack_id_isSet;
}

bool OAIDescribeProjectResult::is_stack_id_Valid() const{
    return m_stack_id_isValid;
}

QString OAIDescribeProjectResult::getProjectTemplateId() const {
    return m_project_template_id;
}
void OAIDescribeProjectResult::setProjectTemplateId(const QString &project_template_id) {
    m_project_template_id = project_template_id;
    m_project_template_id_isSet = true;
}

bool OAIDescribeProjectResult::is_project_template_id_Set() const{
    return m_project_template_id_isSet;
}

bool OAIDescribeProjectResult::is_project_template_id_Valid() const{
    return m_project_template_id_isValid;
}

OAIDescribeProjectResult_status OAIDescribeProjectResult::getStatus() const {
    return m_status;
}
void OAIDescribeProjectResult::setStatus(const OAIDescribeProjectResult_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeProjectResult::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeProjectResult::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDescribeProjectResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_template_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeProjectResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
