/**
 * AWS CodeStar
 * <fullname>AWS CodeStar</fullname> <p>This is the API reference for AWS CodeStar. This reference provides descriptions of the operations and data types for the AWS CodeStar API along with usage examples.</p> <p>You can use the AWS CodeStar API to work with:</p> <p>Projects and their resources, by calling the following:</p> <ul> <li> <p> <code>DeleteProject</code>, which deletes a project.</p> </li> <li> <p> <code>DescribeProject</code>, which lists the attributes of a project.</p> </li> <li> <p> <code>ListProjects</code>, which lists all projects associated with your AWS account.</p> </li> <li> <p> <code>ListResources</code>, which lists the resources associated with a project.</p> </li> <li> <p> <code>ListTagsForProject</code>, which lists the tags associated with a project.</p> </li> <li> <p> <code>TagProject</code>, which adds tags to a project.</p> </li> <li> <p> <code>UntagProject</code>, which removes tags from a project.</p> </li> <li> <p> <code>UpdateProject</code>, which updates the attributes of a project.</p> </li> </ul> <p>Teams and team members, by calling the following:</p> <ul> <li> <p> <code>AssociateTeamMember</code>, which adds an IAM user to the team for a project.</p> </li> <li> <p> <code>DisassociateTeamMember</code>, which removes an IAM user from the team for a project.</p> </li> <li> <p> <code>ListTeamMembers</code>, which lists all the IAM users in the team for a project, including their roles and attributes.</p> </li> <li> <p> <code>UpdateTeamMember</code>, which updates a team member's attributes in a project.</p> </li> </ul> <p>Users, by calling the following:</p> <ul> <li> <p> <code>CreateUserProfile</code>, which creates a user profile that contains data associated with the user across all projects.</p> </li> <li> <p> <code>DeleteUserProfile</code>, which deletes all user profile information across all projects.</p> </li> <li> <p> <code>DescribeUserProfile</code>, which describes the profile of a user.</p> </li> <li> <p> <code>ListUserProfiles</code>, which lists all user profiles.</p> </li> <li> <p> <code>UpdateUserProfile</code>, which updates the profile for a user.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGitHubCodeDestination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGitHubCodeDestination::OAIGitHubCodeDestination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGitHubCodeDestination::OAIGitHubCodeDestination() {
    this->initializeModel();
}

OAIGitHubCodeDestination::~OAIGitHubCodeDestination() {}

void OAIGitHubCodeDestination::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_private_repository_isSet = false;
    m_private_repository_isValid = false;

    m_issues_enabled_isSet = false;
    m_issues_enabled_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;
}

void OAIGitHubCodeDestination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGitHubCodeDestination::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_private_repository_isValid = ::OpenAPI::fromJsonValue(m_private_repository, json[QString("privateRepository")]);
    m_private_repository_isSet = !json[QString("privateRepository")].isNull() && m_private_repository_isValid;

    m_issues_enabled_isValid = ::OpenAPI::fromJsonValue(m_issues_enabled, json[QString("issuesEnabled")]);
    m_issues_enabled_isSet = !json[QString("issuesEnabled")].isNull() && m_issues_enabled_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;
}

QString OAIGitHubCodeDestination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGitHubCodeDestination::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_private_repository_isSet) {
        obj.insert(QString("privateRepository"), ::OpenAPI::toJsonValue(m_private_repository));
    }
    if (m_issues_enabled_isSet) {
        obj.insert(QString("issuesEnabled"), ::OpenAPI::toJsonValue(m_issues_enabled));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    return obj;
}

QString OAIGitHubCodeDestination::getName() const {
    return m_name;
}
void OAIGitHubCodeDestination::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGitHubCodeDestination::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGitHubCodeDestination::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGitHubCodeDestination::getDescription() const {
    return m_description;
}
void OAIGitHubCodeDestination::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGitHubCodeDestination::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGitHubCodeDestination::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGitHubCodeDestination::getType() const {
    return m_type;
}
void OAIGitHubCodeDestination::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGitHubCodeDestination::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGitHubCodeDestination::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIGitHubCodeDestination::getOwner() const {
    return m_owner;
}
void OAIGitHubCodeDestination::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIGitHubCodeDestination::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIGitHubCodeDestination::is_owner_Valid() const{
    return m_owner_isValid;
}

bool OAIGitHubCodeDestination::getPrivateRepository() const {
    return m_private_repository;
}
void OAIGitHubCodeDestination::setPrivateRepository(const bool &private_repository) {
    m_private_repository = private_repository;
    m_private_repository_isSet = true;
}

bool OAIGitHubCodeDestination::is_private_repository_Set() const{
    return m_private_repository_isSet;
}

bool OAIGitHubCodeDestination::is_private_repository_Valid() const{
    return m_private_repository_isValid;
}

bool OAIGitHubCodeDestination::getIssuesEnabled() const {
    return m_issues_enabled;
}
void OAIGitHubCodeDestination::setIssuesEnabled(const bool &issues_enabled) {
    m_issues_enabled = issues_enabled;
    m_issues_enabled_isSet = true;
}

bool OAIGitHubCodeDestination::is_issues_enabled_Set() const{
    return m_issues_enabled_isSet;
}

bool OAIGitHubCodeDestination::is_issues_enabled_Valid() const{
    return m_issues_enabled_isValid;
}

QString OAIGitHubCodeDestination::getToken() const {
    return m_token;
}
void OAIGitHubCodeDestination::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIGitHubCodeDestination::is_token_Set() const{
    return m_token_isSet;
}

bool OAIGitHubCodeDestination::is_token_Valid() const{
    return m_token_isValid;
}

bool OAIGitHubCodeDestination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_repository_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issues_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGitHubCodeDestination::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_type_isValid && m_owner_isValid && m_private_repository_isValid && m_issues_enabled_isValid && m_token_isValid && true;
}

} // namespace OpenAPI
