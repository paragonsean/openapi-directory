/**
 * AWS CodeStar
 * <fullname>AWS CodeStar</fullname> <p>This is the API reference for AWS CodeStar. This reference provides descriptions of the operations and data types for the AWS CodeStar API along with usage examples.</p> <p>You can use the AWS CodeStar API to work with:</p> <p>Projects and their resources, by calling the following:</p> <ul> <li> <p> <code>DeleteProject</code>, which deletes a project.</p> </li> <li> <p> <code>DescribeProject</code>, which lists the attributes of a project.</p> </li> <li> <p> <code>ListProjects</code>, which lists all projects associated with your AWS account.</p> </li> <li> <p> <code>ListResources</code>, which lists the resources associated with a project.</p> </li> <li> <p> <code>ListTagsForProject</code>, which lists the tags associated with a project.</p> </li> <li> <p> <code>TagProject</code>, which adds tags to a project.</p> </li> <li> <p> <code>UntagProject</code>, which removes tags from a project.</p> </li> <li> <p> <code>UpdateProject</code>, which updates the attributes of a project.</p> </li> </ul> <p>Teams and team members, by calling the following:</p> <ul> <li> <p> <code>AssociateTeamMember</code>, which adds an IAM user to the team for a project.</p> </li> <li> <p> <code>DisassociateTeamMember</code>, which removes an IAM user from the team for a project.</p> </li> <li> <p> <code>ListTeamMembers</code>, which lists all the IAM users in the team for a project, including their roles and attributes.</p> </li> <li> <p> <code>UpdateTeamMember</code>, which updates a team member's attributes in a project.</p> </li> </ul> <p>Users, by calling the following:</p> <ul> <li> <p> <code>CreateUserProfile</code>, which creates a user profile that contains data associated with the user across all projects.</p> </li> <li> <p> <code>DeleteUserProfile</code>, which deletes all user profile information across all projects.</p> </li> <li> <p> <code>DescribeUserProfile</code>, which describes the profile of a user.</p> </li> <li> <p> <code>ListUserProfiles</code>, which lists all user profiles.</p> </li> <li> <p> <code>UpdateUserProfile</code>, which updates the profile for a user.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIToolchainSource_s3.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIToolchainSource_s3::OAIToolchainSource_s3(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIToolchainSource_s3::OAIToolchainSource_s3() {
    this->initializeModel();
}

OAIToolchainSource_s3::~OAIToolchainSource_s3() {}

void OAIToolchainSource_s3::initializeModel() {

    m_bucket_name_isSet = false;
    m_bucket_name_isValid = false;

    m_bucket_key_isSet = false;
    m_bucket_key_isValid = false;
}

void OAIToolchainSource_s3::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIToolchainSource_s3::fromJsonObject(QJsonObject json) {

    m_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_bucket_name, json[QString("bucketName")]);
    m_bucket_name_isSet = !json[QString("bucketName")].isNull() && m_bucket_name_isValid;

    m_bucket_key_isValid = ::OpenAPI::fromJsonValue(m_bucket_key, json[QString("bucketKey")]);
    m_bucket_key_isSet = !json[QString("bucketKey")].isNull() && m_bucket_key_isValid;
}

QString OAIToolchainSource_s3::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIToolchainSource_s3::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_name_isSet) {
        obj.insert(QString("bucketName"), ::OpenAPI::toJsonValue(m_bucket_name));
    }
    if (m_bucket_key_isSet) {
        obj.insert(QString("bucketKey"), ::OpenAPI::toJsonValue(m_bucket_key));
    }
    return obj;
}

QString OAIToolchainSource_s3::getBucketName() const {
    return m_bucket_name;
}
void OAIToolchainSource_s3::setBucketName(const QString &bucket_name) {
    m_bucket_name = bucket_name;
    m_bucket_name_isSet = true;
}

bool OAIToolchainSource_s3::is_bucket_name_Set() const{
    return m_bucket_name_isSet;
}

bool OAIToolchainSource_s3::is_bucket_name_Valid() const{
    return m_bucket_name_isValid;
}

QString OAIToolchainSource_s3::getBucketKey() const {
    return m_bucket_key;
}
void OAIToolchainSource_s3::setBucketKey(const QString &bucket_key) {
    m_bucket_key = bucket_key;
    m_bucket_key_isSet = true;
}

bool OAIToolchainSource_s3::is_bucket_key_Set() const{
    return m_bucket_key_isSet;
}

bool OAIToolchainSource_s3::is_bucket_key_Valid() const{
    return m_bucket_key_isValid;
}

bool OAIToolchainSource_s3::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIToolchainSource_s3::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
