/**
 * AWS CodeStar
 * <fullname>AWS CodeStar</fullname> <p>This is the API reference for AWS CodeStar. This reference provides descriptions of the operations and data types for the AWS CodeStar API along with usage examples.</p> <p>You can use the AWS CodeStar API to work with:</p> <p>Projects and their resources, by calling the following:</p> <ul> <li> <p> <code>DeleteProject</code>, which deletes a project.</p> </li> <li> <p> <code>DescribeProject</code>, which lists the attributes of a project.</p> </li> <li> <p> <code>ListProjects</code>, which lists all projects associated with your AWS account.</p> </li> <li> <p> <code>ListResources</code>, which lists the resources associated with a project.</p> </li> <li> <p> <code>ListTagsForProject</code>, which lists the tags associated with a project.</p> </li> <li> <p> <code>TagProject</code>, which adds tags to a project.</p> </li> <li> <p> <code>UntagProject</code>, which removes tags from a project.</p> </li> <li> <p> <code>UpdateProject</code>, which updates the attributes of a project.</p> </li> </ul> <p>Teams and team members, by calling the following:</p> <ul> <li> <p> <code>AssociateTeamMember</code>, which adds an IAM user to the team for a project.</p> </li> <li> <p> <code>DisassociateTeamMember</code>, which removes an IAM user from the team for a project.</p> </li> <li> <p> <code>ListTeamMembers</code>, which lists all the IAM users in the team for a project, including their roles and attributes.</p> </li> <li> <p> <code>UpdateTeamMember</code>, which updates a team member's attributes in a project.</p> </li> </ul> <p>Users, by calling the following:</p> <ul> <li> <p> <code>CreateUserProfile</code>, which creates a user profile that contains data associated with the user across all projects.</p> </li> <li> <p> <code>DeleteUserProfile</code>, which deletes all user profile information across all projects.</p> </li> <li> <p> <code>DescribeUserProfile</code>, which describes the profile of a user.</p> </li> <li> <p> <code>ListUserProfiles</code>, which lists all user profiles.</p> </li> <li> <p> <code>UpdateUserProfile</code>, which updates the profile for a user.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssociateTeamMemberRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssociateTeamMemberRequest::OAIAssociateTeamMemberRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssociateTeamMemberRequest::OAIAssociateTeamMemberRequest() {
    this->initializeModel();
}

OAIAssociateTeamMemberRequest::~OAIAssociateTeamMemberRequest() {}

void OAIAssociateTeamMemberRequest::initializeModel() {

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_user_arn_isSet = false;
    m_user_arn_isValid = false;

    m_project_role_isSet = false;
    m_project_role_isValid = false;

    m_remote_access_allowed_isSet = false;
    m_remote_access_allowed_isValid = false;
}

void OAIAssociateTeamMemberRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssociateTeamMemberRequest::fromJsonObject(QJsonObject json) {

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("clientRequestToken")]);
    m_client_request_token_isSet = !json[QString("clientRequestToken")].isNull() && m_client_request_token_isValid;

    m_user_arn_isValid = ::OpenAPI::fromJsonValue(m_user_arn, json[QString("userArn")]);
    m_user_arn_isSet = !json[QString("userArn")].isNull() && m_user_arn_isValid;

    m_project_role_isValid = ::OpenAPI::fromJsonValue(m_project_role, json[QString("projectRole")]);
    m_project_role_isSet = !json[QString("projectRole")].isNull() && m_project_role_isValid;

    m_remote_access_allowed_isValid = ::OpenAPI::fromJsonValue(m_remote_access_allowed, json[QString("remoteAccessAllowed")]);
    m_remote_access_allowed_isSet = !json[QString("remoteAccessAllowed")].isNull() && m_remote_access_allowed_isValid;
}

QString OAIAssociateTeamMemberRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssociateTeamMemberRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("clientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_user_arn_isSet) {
        obj.insert(QString("userArn"), ::OpenAPI::toJsonValue(m_user_arn));
    }
    if (m_project_role_isSet) {
        obj.insert(QString("projectRole"), ::OpenAPI::toJsonValue(m_project_role));
    }
    if (m_remote_access_allowed_isSet) {
        obj.insert(QString("remoteAccessAllowed"), ::OpenAPI::toJsonValue(m_remote_access_allowed));
    }
    return obj;
}

QString OAIAssociateTeamMemberRequest::getProjectId() const {
    return m_project_id;
}
void OAIAssociateTeamMemberRequest::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIAssociateTeamMemberRequest::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIAssociateTeamMemberRequest::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIAssociateTeamMemberRequest::getClientRequestToken() const {
    return m_client_request_token;
}
void OAIAssociateTeamMemberRequest::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAIAssociateTeamMemberRequest::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAIAssociateTeamMemberRequest::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QString OAIAssociateTeamMemberRequest::getUserArn() const {
    return m_user_arn;
}
void OAIAssociateTeamMemberRequest::setUserArn(const QString &user_arn) {
    m_user_arn = user_arn;
    m_user_arn_isSet = true;
}

bool OAIAssociateTeamMemberRequest::is_user_arn_Set() const{
    return m_user_arn_isSet;
}

bool OAIAssociateTeamMemberRequest::is_user_arn_Valid() const{
    return m_user_arn_isValid;
}

QString OAIAssociateTeamMemberRequest::getProjectRole() const {
    return m_project_role;
}
void OAIAssociateTeamMemberRequest::setProjectRole(const QString &project_role) {
    m_project_role = project_role;
    m_project_role_isSet = true;
}

bool OAIAssociateTeamMemberRequest::is_project_role_Set() const{
    return m_project_role_isSet;
}

bool OAIAssociateTeamMemberRequest::is_project_role_Valid() const{
    return m_project_role_isValid;
}

bool OAIAssociateTeamMemberRequest::getRemoteAccessAllowed() const {
    return m_remote_access_allowed;
}
void OAIAssociateTeamMemberRequest::setRemoteAccessAllowed(const bool &remote_access_allowed) {
    m_remote_access_allowed = remote_access_allowed;
    m_remote_access_allowed_isSet = true;
}

bool OAIAssociateTeamMemberRequest::is_remote_access_allowed_Set() const{
    return m_remote_access_allowed_isSet;
}

bool OAIAssociateTeamMemberRequest::is_remote_access_allowed_Valid() const{
    return m_remote_access_allowed_isValid;
}

bool OAIAssociateTeamMemberRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_access_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssociateTeamMemberRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_project_id_isValid && m_user_arn_isValid && m_project_role_isValid && true;
}

} // namespace OpenAPI
