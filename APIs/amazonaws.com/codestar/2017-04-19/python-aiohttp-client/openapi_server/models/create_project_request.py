# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_project_request_toolchain import CreateProjectRequestToolchain
from openapi_server import util


class CreateProjectRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, id: str=None, description: str=None, client_request_token: str=None, source_code: List=None, toolchain: CreateProjectRequestToolchain=None, tags: Dict=None):
        """CreateProjectRequest - a model defined in OpenAPI

        :param name: The name of this CreateProjectRequest.
        :param id: The id of this CreateProjectRequest.
        :param description: The description of this CreateProjectRequest.
        :param client_request_token: The client_request_token of this CreateProjectRequest.
        :param source_code: The source_code of this CreateProjectRequest.
        :param toolchain: The toolchain of this CreateProjectRequest.
        :param tags: The tags of this CreateProjectRequest.
        """
        self.openapi_types = {
            'name': str,
            'id': str,
            'description': str,
            'client_request_token': str,
            'source_code': List,
            'toolchain': CreateProjectRequestToolchain,
            'tags': Dict
        }

        self.attribute_map = {
            'name': 'name',
            'id': 'id',
            'description': 'description',
            'client_request_token': 'clientRequestToken',
            'source_code': 'sourceCode',
            'toolchain': 'toolchain',
            'tags': 'tags'
        }

        self._name = name
        self._id = id
        self._description = description
        self._client_request_token = client_request_token
        self._source_code = source_code
        self._toolchain = toolchain
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateProjectRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateProjectRequest of this CreateProjectRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateProjectRequest.


        :return: The name of this CreateProjectRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateProjectRequest.


        :param name: The name of this CreateProjectRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def id(self):
        """Gets the id of this CreateProjectRequest.


        :return: The id of this CreateProjectRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreateProjectRequest.


        :param id: The id of this CreateProjectRequest.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def description(self):
        """Gets the description of this CreateProjectRequest.


        :return: The description of this CreateProjectRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateProjectRequest.


        :param description: The description of this CreateProjectRequest.
        :type description: str
        """

        self._description = description

    @property
    def client_request_token(self):
        """Gets the client_request_token of this CreateProjectRequest.


        :return: The client_request_token of this CreateProjectRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this CreateProjectRequest.


        :param client_request_token: The client_request_token of this CreateProjectRequest.
        :type client_request_token: str
        """

        self._client_request_token = client_request_token

    @property
    def source_code(self):
        """Gets the source_code of this CreateProjectRequest.


        :return: The source_code of this CreateProjectRequest.
        :rtype: List
        """
        return self._source_code

    @source_code.setter
    def source_code(self, source_code):
        """Sets the source_code of this CreateProjectRequest.


        :param source_code: The source_code of this CreateProjectRequest.
        :type source_code: List
        """

        self._source_code = source_code

    @property
    def toolchain(self):
        """Gets the toolchain of this CreateProjectRequest.


        :return: The toolchain of this CreateProjectRequest.
        :rtype: CreateProjectRequestToolchain
        """
        return self._toolchain

    @toolchain.setter
    def toolchain(self, toolchain):
        """Sets the toolchain of this CreateProjectRequest.


        :param toolchain: The toolchain of this CreateProjectRequest.
        :type toolchain: CreateProjectRequestToolchain
        """

        self._toolchain = toolchain

    @property
    def tags(self):
        """Gets the tags of this CreateProjectRequest.


        :return: The tags of this CreateProjectRequest.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateProjectRequest.


        :param tags: The tags of this CreateProjectRequest.
        :type tags: Dict
        """

        self._tags = tags
