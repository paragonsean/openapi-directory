# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CodeDestinationGitHub(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, type: str=None, owner: str=None, private_repository: bool=None, issues_enabled: bool=None, token: str=None):
        """CodeDestinationGitHub - a model defined in OpenAPI

        :param name: The name of this CodeDestinationGitHub.
        :param description: The description of this CodeDestinationGitHub.
        :param type: The type of this CodeDestinationGitHub.
        :param owner: The owner of this CodeDestinationGitHub.
        :param private_repository: The private_repository of this CodeDestinationGitHub.
        :param issues_enabled: The issues_enabled of this CodeDestinationGitHub.
        :param token: The token of this CodeDestinationGitHub.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'type': str,
            'owner': str,
            'private_repository': bool,
            'issues_enabled': bool,
            'token': str
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'type': 'type',
            'owner': 'owner',
            'private_repository': 'privateRepository',
            'issues_enabled': 'issuesEnabled',
            'token': 'token'
        }

        self._name = name
        self._description = description
        self._type = type
        self._owner = owner
        self._private_repository = private_repository
        self._issues_enabled = issues_enabled
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodeDestinationGitHub':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CodeDestination_gitHub of this CodeDestinationGitHub.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CodeDestinationGitHub.


        :return: The name of this CodeDestinationGitHub.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CodeDestinationGitHub.


        :param name: The name of this CodeDestinationGitHub.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this CodeDestinationGitHub.


        :return: The description of this CodeDestinationGitHub.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CodeDestinationGitHub.


        :param description: The description of this CodeDestinationGitHub.
        :type description: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this CodeDestinationGitHub.


        :return: The type of this CodeDestinationGitHub.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CodeDestinationGitHub.


        :param type: The type of this CodeDestinationGitHub.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def owner(self):
        """Gets the owner of this CodeDestinationGitHub.


        :return: The owner of this CodeDestinationGitHub.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this CodeDestinationGitHub.


        :param owner: The owner of this CodeDestinationGitHub.
        :type owner: str
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")

        self._owner = owner

    @property
    def private_repository(self):
        """Gets the private_repository of this CodeDestinationGitHub.


        :return: The private_repository of this CodeDestinationGitHub.
        :rtype: bool
        """
        return self._private_repository

    @private_repository.setter
    def private_repository(self, private_repository):
        """Sets the private_repository of this CodeDestinationGitHub.


        :param private_repository: The private_repository of this CodeDestinationGitHub.
        :type private_repository: bool
        """
        if private_repository is None:
            raise ValueError("Invalid value for `private_repository`, must not be `None`")

        self._private_repository = private_repository

    @property
    def issues_enabled(self):
        """Gets the issues_enabled of this CodeDestinationGitHub.


        :return: The issues_enabled of this CodeDestinationGitHub.
        :rtype: bool
        """
        return self._issues_enabled

    @issues_enabled.setter
    def issues_enabled(self, issues_enabled):
        """Sets the issues_enabled of this CodeDestinationGitHub.


        :param issues_enabled: The issues_enabled of this CodeDestinationGitHub.
        :type issues_enabled: bool
        """
        if issues_enabled is None:
            raise ValueError("Invalid value for `issues_enabled`, must not be `None`")

        self._issues_enabled = issues_enabled

    @property
    def token(self):
        """Gets the token of this CodeDestinationGitHub.


        :return: The token of this CodeDestinationGitHub.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this CodeDestinationGitHub.


        :param token: The token of this CodeDestinationGitHub.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token
