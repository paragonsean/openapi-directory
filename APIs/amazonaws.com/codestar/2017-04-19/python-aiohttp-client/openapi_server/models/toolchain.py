# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.toolchain_source import ToolchainSource
from openapi_server import util


class Toolchain(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source: ToolchainSource=None, role_arn: str=None, stack_parameters: Dict=None):
        """Toolchain - a model defined in OpenAPI

        :param source: The source of this Toolchain.
        :param role_arn: The role_arn of this Toolchain.
        :param stack_parameters: The stack_parameters of this Toolchain.
        """
        self.openapi_types = {
            'source': ToolchainSource,
            'role_arn': str,
            'stack_parameters': Dict
        }

        self.attribute_map = {
            'source': 'source',
            'role_arn': 'roleArn',
            'stack_parameters': 'stackParameters'
        }

        self._source = source
        self._role_arn = role_arn
        self._stack_parameters = stack_parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Toolchain':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Toolchain of this Toolchain.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source(self):
        """Gets the source of this Toolchain.


        :return: The source of this Toolchain.
        :rtype: ToolchainSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Toolchain.


        :param source: The source of this Toolchain.
        :type source: ToolchainSource
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def role_arn(self):
        """Gets the role_arn of this Toolchain.


        :return: The role_arn of this Toolchain.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this Toolchain.


        :param role_arn: The role_arn of this Toolchain.
        :type role_arn: str
        """

        self._role_arn = role_arn

    @property
    def stack_parameters(self):
        """Gets the stack_parameters of this Toolchain.


        :return: The stack_parameters of this Toolchain.
        :rtype: Dict
        """
        return self._stack_parameters

    @stack_parameters.setter
    def stack_parameters(self, stack_parameters):
        """Sets the stack_parameters of this Toolchain.


        :param stack_parameters: The stack_parameters of this Toolchain.
        :type stack_parameters: Dict
        """

        self._stack_parameters = stack_parameters
