/**
 * AWS CodeStar
 * <fullname>AWS CodeStar</fullname> <p>This is the API reference for AWS CodeStar. This reference provides descriptions of the operations and data types for the AWS CodeStar API along with usage examples.</p> <p>You can use the AWS CodeStar API to work with:</p> <p>Projects and their resources, by calling the following:</p> <ul> <li> <p> <code>DeleteProject</code>, which deletes a project.</p> </li> <li> <p> <code>DescribeProject</code>, which lists the attributes of a project.</p> </li> <li> <p> <code>ListProjects</code>, which lists all projects associated with your AWS account.</p> </li> <li> <p> <code>ListResources</code>, which lists the resources associated with a project.</p> </li> <li> <p> <code>ListTagsForProject</code>, which lists the tags associated with a project.</p> </li> <li> <p> <code>TagProject</code>, which adds tags to a project.</p> </li> <li> <p> <code>UntagProject</code>, which removes tags from a project.</p> </li> <li> <p> <code>UpdateProject</code>, which updates the attributes of a project.</p> </li> </ul> <p>Teams and team members, by calling the following:</p> <ul> <li> <p> <code>AssociateTeamMember</code>, which adds an IAM user to the team for a project.</p> </li> <li> <p> <code>DisassociateTeamMember</code>, which removes an IAM user from the team for a project.</p> </li> <li> <p> <code>ListTeamMembers</code>, which lists all the IAM users in the team for a project, including their roles and attributes.</p> </li> <li> <p> <code>UpdateTeamMember</code>, which updates a team member's attributes in a project.</p> </li> </ul> <p>Users, by calling the following:</p> <ul> <li> <p> <code>CreateUserProfile</code>, which creates a user profile that contains data associated with the user across all projects.</p> </li> <li> <p> <code>DeleteUserProfile</code>, which deletes all user profile information across all projects.</p> </li> <li> <p> <code>DescribeUserProfile</code>, which describes the profile of a user.</p> </li> <li> <p> <code>ListUserProfiles</code>, which lists all user profiles.</p> </li> <li> <p> <code>UpdateUserProfile</code>, which updates the profile for a user.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssociateTeamMemberRequest from '../model/AssociateTeamMemberRequest';
import AssociateTeamMemberResult from '../model/AssociateTeamMemberResult';
import CreateProjectRequest from '../model/CreateProjectRequest';
import CreateProjectResult from '../model/CreateProjectResult';
import CreateUserProfileRequest from '../model/CreateUserProfileRequest';
import CreateUserProfileResult from '../model/CreateUserProfileResult';
import DeleteProjectRequest from '../model/DeleteProjectRequest';
import DeleteProjectResult from '../model/DeleteProjectResult';
import DeleteUserProfileRequest from '../model/DeleteUserProfileRequest';
import DeleteUserProfileResult from '../model/DeleteUserProfileResult';
import DescribeProjectRequest from '../model/DescribeProjectRequest';
import DescribeProjectResult from '../model/DescribeProjectResult';
import DescribeUserProfileRequest from '../model/DescribeUserProfileRequest';
import DescribeUserProfileResult from '../model/DescribeUserProfileResult';
import DisassociateTeamMemberRequest from '../model/DisassociateTeamMemberRequest';
import ListProjectsRequest from '../model/ListProjectsRequest';
import ListProjectsResult from '../model/ListProjectsResult';
import ListResourcesRequest from '../model/ListResourcesRequest';
import ListResourcesResult from '../model/ListResourcesResult';
import ListTagsForProjectRequest from '../model/ListTagsForProjectRequest';
import ListTagsForProjectResult from '../model/ListTagsForProjectResult';
import ListTeamMembersRequest from '../model/ListTeamMembersRequest';
import ListTeamMembersResult from '../model/ListTeamMembersResult';
import ListUserProfilesRequest from '../model/ListUserProfilesRequest';
import ListUserProfilesResult from '../model/ListUserProfilesResult';
import TagProjectRequest from '../model/TagProjectRequest';
import TagProjectResult from '../model/TagProjectResult';
import UntagProjectRequest from '../model/UntagProjectRequest';
import UpdateProjectRequest from '../model/UpdateProjectRequest';
import UpdateTeamMemberRequest from '../model/UpdateTeamMemberRequest';
import UpdateTeamMemberResult from '../model/UpdateTeamMemberResult';
import UpdateUserProfileRequest from '../model/UpdateUserProfileRequest';
import UpdateUserProfileResult from '../model/UpdateUserProfileResult';

/**
* Default service.
* @module api/DefaultApi
* @version 2017-04-19
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the associateTeamMember operation.
     * @callback module:api/DefaultApi~associateTeamMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociateTeamMemberResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds an IAM user to the team for an AWS CodeStar project.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AssociateTeamMemberRequest} associateTeamMemberRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateTeamMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociateTeamMemberResult}
     */
    associateTeamMember(xAmzTarget, associateTeamMemberRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateTeamMemberRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling associateTeamMember");
      }
      // verify the required parameter 'associateTeamMemberRequest' is set
      if (associateTeamMemberRequest === undefined || associateTeamMemberRequest === null) {
        throw new Error("Missing the required parameter 'associateTeamMemberRequest' when calling associateTeamMember");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssociateTeamMemberResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeStar_20170419.AssociateTeamMember', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProject operation.
     * @callback module:api/DefaultApi~createProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateProjectResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a project, including project resources. This action creates a project based on a submitted project request. A set of source code files and a toolchain template file can be included with the project request. If these are not provided, an empty project is created.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateProjectRequest} createProjectRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateProjectResult}
     */
    createProject(xAmzTarget, createProjectRequest, opts, callback) {
      opts = opts || {};
      let postBody = createProjectRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createProject");
      }
      // verify the required parameter 'createProjectRequest' is set
      if (createProjectRequest === undefined || createProjectRequest === null) {
        throw new Error("Missing the required parameter 'createProjectRequest' when calling createProject");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateProjectResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeStar_20170419.CreateProject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createUserProfile operation.
     * @callback module:api/DefaultApi~createUserProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateUserProfileResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a profile for a user that includes user preferences, such as the display name and email address assocciated with the user, in AWS CodeStar. The user profile is not project-specific. Information in the user profile is displayed wherever the user's information appears to other users in AWS CodeStar.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateUserProfileRequest} createUserProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createUserProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateUserProfileResult}
     */
    createUserProfile(xAmzTarget, createUserProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = createUserProfileRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createUserProfile");
      }
      // verify the required parameter 'createUserProfileRequest' is set
      if (createUserProfileRequest === undefined || createUserProfileRequest === null) {
        throw new Error("Missing the required parameter 'createUserProfileRequest' when calling createUserProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateUserProfileResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeStar_20170419.CreateUserProfile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProject operation.
     * @callback module:api/DefaultApi~deleteProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteProjectResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a project, including project resources. Does not delete users associated with the project, but does delete the IAM roles that allowed access to the project.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteProjectRequest} deleteProjectRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteProjectResult}
     */
    deleteProject(xAmzTarget, deleteProjectRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteProjectRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteProject");
      }
      // verify the required parameter 'deleteProjectRequest' is set
      if (deleteProjectRequest === undefined || deleteProjectRequest === null) {
        throw new Error("Missing the required parameter 'deleteProjectRequest' when calling deleteProject");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteProjectResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeStar_20170419.DeleteProject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserProfile operation.
     * @callback module:api/DefaultApi~deleteUserProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteUserProfileResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a user profile in AWS CodeStar, including all personal preference data associated with that profile, such as display name and email address. It does not delete the history of that user, for example the history of commits made by that user.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteUserProfileRequest} deleteUserProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteUserProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteUserProfileResult}
     */
    deleteUserProfile(xAmzTarget, deleteUserProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteUserProfileRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteUserProfile");
      }
      // verify the required parameter 'deleteUserProfileRequest' is set
      if (deleteUserProfileRequest === undefined || deleteUserProfileRequest === null) {
        throw new Error("Missing the required parameter 'deleteUserProfileRequest' when calling deleteUserProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteUserProfileResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeStar_20170419.DeleteUserProfile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeProject operation.
     * @callback module:api/DefaultApi~describeProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeProjectResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes a project and its resources.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeProjectRequest} describeProjectRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeProjectResult}
     */
    describeProject(xAmzTarget, describeProjectRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeProjectRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeProject");
      }
      // verify the required parameter 'describeProjectRequest' is set
      if (describeProjectRequest === undefined || describeProjectRequest === null) {
        throw new Error("Missing the required parameter 'describeProjectRequest' when calling describeProject");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeProjectResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeStar_20170419.DescribeProject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeUserProfile operation.
     * @callback module:api/DefaultApi~describeUserProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeUserProfileResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes a user in AWS CodeStar and the user attributes across all projects.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeUserProfileRequest} describeUserProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeUserProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeUserProfileResult}
     */
    describeUserProfile(xAmzTarget, describeUserProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeUserProfileRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeUserProfile");
      }
      // verify the required parameter 'describeUserProfileRequest' is set
      if (describeUserProfileRequest === undefined || describeUserProfileRequest === null) {
        throw new Error("Missing the required parameter 'describeUserProfileRequest' when calling describeUserProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeUserProfileResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeStar_20170419.DescribeUserProfile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateTeamMember operation.
     * @callback module:api/DefaultApi~disassociateTeamMemberCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a user from a project. Removing a user from a project also removes the IAM policies from that user that allowed access to the project and its resources. Disassociating a team member does not remove that user's profile from AWS CodeStar. It does not remove the user from IAM.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DisassociateTeamMemberRequest} disassociateTeamMemberRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateTeamMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    disassociateTeamMember(xAmzTarget, disassociateTeamMemberRequest, opts, callback) {
      opts = opts || {};
      let postBody = disassociateTeamMemberRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling disassociateTeamMember");
      }
      // verify the required parameter 'disassociateTeamMemberRequest' is set
      if (disassociateTeamMemberRequest === undefined || disassociateTeamMemberRequest === null) {
        throw new Error("Missing the required parameter 'disassociateTeamMemberRequest' when calling disassociateTeamMember");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeStar_20170419.DisassociateTeamMember', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProjects operation.
     * @callback module:api/DefaultApi~listProjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListProjectsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all projects in AWS CodeStar associated with your AWS account.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListProjectsRequest} listProjectsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListProjectsResult}
     */
    listProjects(xAmzTarget, listProjectsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listProjectsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listProjects");
      }
      // verify the required parameter 'listProjectsRequest' is set
      if (listProjectsRequest === undefined || listProjectsRequest === null) {
        throw new Error("Missing the required parameter 'listProjectsRequest' when calling listProjects");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListProjectsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeStar_20170419.ListProjects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listResources operation.
     * @callback module:api/DefaultApi~listResourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResourcesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists resources associated with a project in AWS CodeStar.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListResourcesRequest} listResourcesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listResourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResourcesResult}
     */
    listResources(xAmzTarget, listResourcesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listResourcesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listResources");
      }
      // verify the required parameter 'listResourcesRequest' is set
      if (listResourcesRequest === undefined || listResourcesRequest === null) {
        throw new Error("Missing the required parameter 'listResourcesRequest' when calling listResources");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListResourcesResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeStar_20170419.ListResources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForProject operation.
     * @callback module:api/DefaultApi~listTagsForProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForProjectResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the tags for a project.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTagsForProjectRequest} listTagsForProjectRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForProjectResult}
     */
    listTagsForProject(xAmzTarget, listTagsForProjectRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTagsForProjectRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTagsForProject");
      }
      // verify the required parameter 'listTagsForProjectRequest' is set
      if (listTagsForProjectRequest === undefined || listTagsForProjectRequest === null) {
        throw new Error("Missing the required parameter 'listTagsForProjectRequest' when calling listTagsForProject");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTagsForProjectResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeStar_20170419.ListTagsForProject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTeamMembers operation.
     * @callback module:api/DefaultApi~listTeamMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTeamMembersResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all team members associated with a project.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTeamMembersRequest} listTeamMembersRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTeamMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTeamMembersResult}
     */
    listTeamMembers(xAmzTarget, listTeamMembersRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTeamMembersRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTeamMembers");
      }
      // verify the required parameter 'listTeamMembersRequest' is set
      if (listTeamMembersRequest === undefined || listTeamMembersRequest === null) {
        throw new Error("Missing the required parameter 'listTeamMembersRequest' when calling listTeamMembers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTeamMembersResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeStar_20170419.ListTeamMembers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUserProfiles operation.
     * @callback module:api/DefaultApi~listUserProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListUserProfilesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the user profiles configured for your AWS account in AWS CodeStar.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListUserProfilesRequest} listUserProfilesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listUserProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListUserProfilesResult}
     */
    listUserProfiles(xAmzTarget, listUserProfilesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listUserProfilesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listUserProfiles");
      }
      // verify the required parameter 'listUserProfilesRequest' is set
      if (listUserProfilesRequest === undefined || listUserProfilesRequest === null) {
        throw new Error("Missing the required parameter 'listUserProfilesRequest' when calling listUserProfiles");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListUserProfilesResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeStar_20170419.ListUserProfiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagProject operation.
     * @callback module:api/DefaultApi~tagProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TagProjectResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds tags to a project.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/TagProjectRequest} tagProjectRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TagProjectResult}
     */
    tagProject(xAmzTarget, tagProjectRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagProjectRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling tagProject");
      }
      // verify the required parameter 'tagProjectRequest' is set
      if (tagProjectRequest === undefined || tagProjectRequest === null) {
        throw new Error("Missing the required parameter 'tagProjectRequest' when calling tagProject");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TagProjectResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeStar_20170419.TagProject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagProject operation.
     * @callback module:api/DefaultApi~untagProjectCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes tags from a project.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UntagProjectRequest} untagProjectRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagProject(xAmzTarget, untagProjectRequest, opts, callback) {
      opts = opts || {};
      let postBody = untagProjectRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling untagProject");
      }
      // verify the required parameter 'untagProjectRequest' is set
      if (untagProjectRequest === undefined || untagProjectRequest === null) {
        throw new Error("Missing the required parameter 'untagProjectRequest' when calling untagProject");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeStar_20170419.UntagProject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProject operation.
     * @callback module:api/DefaultApi~updateProjectCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a project in AWS CodeStar.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateProjectRequest} updateProjectRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateProject(xAmzTarget, updateProjectRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateProjectRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateProject");
      }
      // verify the required parameter 'updateProjectRequest' is set
      if (updateProjectRequest === undefined || updateProjectRequest === null) {
        throw new Error("Missing the required parameter 'updateProjectRequest' when calling updateProject");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeStar_20170419.UpdateProject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTeamMember operation.
     * @callback module:api/DefaultApi~updateTeamMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateTeamMemberResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a team member's attributes in an AWS CodeStar project. For example, you can change a team member's role in the project, or change whether they have remote access to project resources.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateTeamMemberRequest} updateTeamMemberRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateTeamMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateTeamMemberResult}
     */
    updateTeamMember(xAmzTarget, updateTeamMemberRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateTeamMemberRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateTeamMember");
      }
      // verify the required parameter 'updateTeamMemberRequest' is set
      if (updateTeamMemberRequest === undefined || updateTeamMemberRequest === null) {
        throw new Error("Missing the required parameter 'updateTeamMemberRequest' when calling updateTeamMember");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTeamMemberResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeStar_20170419.UpdateTeamMember', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserProfile operation.
     * @callback module:api/DefaultApi~updateUserProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateUserProfileResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a user's profile in AWS CodeStar. The user profile is not project-specific. Information in the user profile is displayed wherever the user's information appears to other users in AWS CodeStar. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateUserProfileRequest} updateUserProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateUserProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateUserProfileResult}
     */
    updateUserProfile(xAmzTarget, updateUserProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateUserProfileRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateUserProfile");
      }
      // verify the required parameter 'updateUserProfileRequest' is set
      if (updateUserProfileRequest === undefined || updateUserProfileRequest === null) {
        throw new Error("Missing the required parameter 'updateUserProfileRequest' when calling updateUserProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateUserProfileResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=CodeStar_20170419.UpdateUserProfile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
