/**
 * AWS CodeStar
 * <fullname>AWS CodeStar</fullname> <p>This is the API reference for AWS CodeStar. This reference provides descriptions of the operations and data types for the AWS CodeStar API along with usage examples.</p> <p>You can use the AWS CodeStar API to work with:</p> <p>Projects and their resources, by calling the following:</p> <ul> <li> <p> <code>DeleteProject</code>, which deletes a project.</p> </li> <li> <p> <code>DescribeProject</code>, which lists the attributes of a project.</p> </li> <li> <p> <code>ListProjects</code>, which lists all projects associated with your AWS account.</p> </li> <li> <p> <code>ListResources</code>, which lists the resources associated with a project.</p> </li> <li> <p> <code>ListTagsForProject</code>, which lists the tags associated with a project.</p> </li> <li> <p> <code>TagProject</code>, which adds tags to a project.</p> </li> <li> <p> <code>UntagProject</code>, which removes tags from a project.</p> </li> <li> <p> <code>UpdateProject</code>, which updates the attributes of a project.</p> </li> </ul> <p>Teams and team members, by calling the following:</p> <ul> <li> <p> <code>AssociateTeamMember</code>, which adds an IAM user to the team for a project.</p> </li> <li> <p> <code>DisassociateTeamMember</code>, which removes an IAM user from the team for a project.</p> </li> <li> <p> <code>ListTeamMembers</code>, which lists all the IAM users in the team for a project, including their roles and attributes.</p> </li> <li> <p> <code>UpdateTeamMember</code>, which updates a team member's attributes in a project.</p> </li> </ul> <p>Users, by calling the following:</p> <ul> <li> <p> <code>CreateUserProfile</code>, which creates a user profile that contains data associated with the user across all projects.</p> </li> <li> <p> <code>DeleteUserProfile</code>, which deletes all user profile information across all projects.</p> </li> <li> <p> <code>DescribeUserProfile</code>, which describes the profile of a user.</p> </li> <li> <p> <code>ListUserProfiles</code>, which lists all user profiles.</p> </li> <li> <p> <code>UpdateUserProfile</code>, which updates the profile for a user.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Toolchain from './Toolchain';
import ToolchainSource from './ToolchainSource';

/**
 * The CreateProjectRequestToolchain model module.
 * @module model/CreateProjectRequestToolchain
 * @version 2017-04-19
 */
class CreateProjectRequestToolchain {
    /**
     * Constructs a new <code>CreateProjectRequestToolchain</code>.
     * @alias module:model/CreateProjectRequestToolchain
     * @implements module:model/Toolchain
     * @param source {module:model/ToolchainSource} 
     */
    constructor(source) { 
        Toolchain.initialize(this, source);
        CreateProjectRequestToolchain.initialize(this, source);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, source) { 
        obj['source'] = source;
    }

    /**
     * Constructs a <code>CreateProjectRequestToolchain</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateProjectRequestToolchain} obj Optional instance to populate.
     * @return {module:model/CreateProjectRequestToolchain} The populated <code>CreateProjectRequestToolchain</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateProjectRequestToolchain();
            Toolchain.constructFromObject(data, obj);

            if (data.hasOwnProperty('source')) {
                obj['source'] = ToolchainSource.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('roleArn')) {
                obj['roleArn'] = ApiClient.convertToType(data['roleArn'], 'String');
            }
            if (data.hasOwnProperty('stackParameters')) {
                obj['stackParameters'] = ApiClient.convertToType(data['stackParameters'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateProjectRequestToolchain</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateProjectRequestToolchain</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateProjectRequestToolchain.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          ToolchainSource.validateJSON(data['source']);
        }
        // validate the optional field `roleArn`
        if (data['roleArn']) { // data not null
          String.validateJSON(data['roleArn']);
        }
        // validate the optional field `stackParameters`
        if (data['stackParameters']) { // data not null
          Object.validateJSON(data['stackParameters']);
        }

        return true;
    }


}

CreateProjectRequestToolchain.RequiredProperties = ["source"];

/**
 * @member {module:model/ToolchainSource} source
 */
CreateProjectRequestToolchain.prototype['source'] = undefined;

/**
 * @member {String} roleArn
 */
CreateProjectRequestToolchain.prototype['roleArn'] = undefined;

/**
 * @member {Object} stackParameters
 */
CreateProjectRequestToolchain.prototype['stackParameters'] = undefined;


// Implement Toolchain interface:
/**
 * @member {module:model/ToolchainSource} source
 */
Toolchain.prototype['source'] = undefined;
/**
 * @member {String} roleArn
 */
Toolchain.prototype['roleArn'] = undefined;
/**
 * @member {Object} stackParameters
 */
Toolchain.prototype['stackParameters'] = undefined;




export default CreateProjectRequestToolchain;

