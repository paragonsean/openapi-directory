/*
 * AWS CodeStar
 * <fullname>AWS CodeStar</fullname> <p>This is the API reference for AWS CodeStar. This reference provides descriptions of the operations and data types for the AWS CodeStar API along with usage examples.</p> <p>You can use the AWS CodeStar API to work with:</p> <p>Projects and their resources, by calling the following:</p> <ul> <li> <p> <code>DeleteProject</code>, which deletes a project.</p> </li> <li> <p> <code>DescribeProject</code>, which lists the attributes of a project.</p> </li> <li> <p> <code>ListProjects</code>, which lists all projects associated with your AWS account.</p> </li> <li> <p> <code>ListResources</code>, which lists the resources associated with a project.</p> </li> <li> <p> <code>ListTagsForProject</code>, which lists the tags associated with a project.</p> </li> <li> <p> <code>TagProject</code>, which adds tags to a project.</p> </li> <li> <p> <code>UntagProject</code>, which removes tags from a project.</p> </li> <li> <p> <code>UpdateProject</code>, which updates the attributes of a project.</p> </li> </ul> <p>Teams and team members, by calling the following:</p> <ul> <li> <p> <code>AssociateTeamMember</code>, which adds an IAM user to the team for a project.</p> </li> <li> <p> <code>DisassociateTeamMember</code>, which removes an IAM user from the team for a project.</p> </li> <li> <p> <code>ListTeamMembers</code>, which lists all the IAM users in the team for a project, including their roles and attributes.</p> </li> <li> <p> <code>UpdateTeamMember</code>, which updates a team member's attributes in a project.</p> </li> </ul> <p>Users, by calling the following:</p> <ul> <li> <p> <code>CreateUserProfile</code>, which creates a user profile that contains data associated with the user across all projects.</p> </li> <li> <p> <code>DeleteUserProfile</code>, which deletes all user profile information across all projects.</p> </li> <li> <p> <code>DescribeUserProfile</code>, which describes the profile of a user.</p> </li> <li> <p> <code>ListUserProfiles</code>, which lists all user profiles.</p> </li> <li> <p> <code>UpdateUserProfile</code>, which updates the profile for a user.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CodeDestinationCodeCommit;
import org.openapitools.client.model.CodeDestinationGitHub;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CodeDestination
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:04.692142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CodeDestination {
  public static final String SERIALIZED_NAME_CODE_COMMIT = "codeCommit";
  @SerializedName(SERIALIZED_NAME_CODE_COMMIT)
  private CodeDestinationCodeCommit codeCommit;

  public static final String SERIALIZED_NAME_GIT_HUB = "gitHub";
  @SerializedName(SERIALIZED_NAME_GIT_HUB)
  private CodeDestinationGitHub gitHub;

  public CodeDestination() {
  }

  public CodeDestination codeCommit(CodeDestinationCodeCommit codeCommit) {
    this.codeCommit = codeCommit;
    return this;
  }

  /**
   * Get codeCommit
   * @return codeCommit
   */
  @javax.annotation.Nullable
  public CodeDestinationCodeCommit getCodeCommit() {
    return codeCommit;
  }

  public void setCodeCommit(CodeDestinationCodeCommit codeCommit) {
    this.codeCommit = codeCommit;
  }


  public CodeDestination gitHub(CodeDestinationGitHub gitHub) {
    this.gitHub = gitHub;
    return this;
  }

  /**
   * Get gitHub
   * @return gitHub
   */
  @javax.annotation.Nullable
  public CodeDestinationGitHub getGitHub() {
    return gitHub;
  }

  public void setGitHub(CodeDestinationGitHub gitHub) {
    this.gitHub = gitHub;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CodeDestination codeDestination = (CodeDestination) o;
    return Objects.equals(this.codeCommit, codeDestination.codeCommit) &&
        Objects.equals(this.gitHub, codeDestination.gitHub);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codeCommit, gitHub);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CodeDestination {\n");
    sb.append("    codeCommit: ").append(toIndentedString(codeCommit)).append("\n");
    sb.append("    gitHub: ").append(toIndentedString(gitHub)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("codeCommit");
    openapiFields.add("gitHub");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CodeDestination
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CodeDestination.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CodeDestination is not found in the empty JSON string", CodeDestination.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CodeDestination.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CodeDestination` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `codeCommit`
      if (jsonObj.get("codeCommit") != null && !jsonObj.get("codeCommit").isJsonNull()) {
        CodeDestinationCodeCommit.validateJsonElement(jsonObj.get("codeCommit"));
      }
      // validate the optional field `gitHub`
      if (jsonObj.get("gitHub") != null && !jsonObj.get("gitHub").isJsonNull()) {
        CodeDestinationGitHub.validateJsonElement(jsonObj.get("gitHub"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CodeDestination.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CodeDestination' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CodeDestination> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CodeDestination.class));

       return (TypeAdapter<T>) new TypeAdapter<CodeDestination>() {
           @Override
           public void write(JsonWriter out, CodeDestination value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CodeDestination read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CodeDestination given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CodeDestination
   * @throws IOException if the JSON string is invalid with respect to CodeDestination
   */
  public static CodeDestination fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CodeDestination.class);
  }

  /**
   * Convert an instance of CodeDestination to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

