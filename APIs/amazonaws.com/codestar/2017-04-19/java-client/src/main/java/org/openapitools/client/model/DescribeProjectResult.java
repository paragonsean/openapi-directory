/*
 * AWS CodeStar
 * <fullname>AWS CodeStar</fullname> <p>This is the API reference for AWS CodeStar. This reference provides descriptions of the operations and data types for the AWS CodeStar API along with usage examples.</p> <p>You can use the AWS CodeStar API to work with:</p> <p>Projects and their resources, by calling the following:</p> <ul> <li> <p> <code>DeleteProject</code>, which deletes a project.</p> </li> <li> <p> <code>DescribeProject</code>, which lists the attributes of a project.</p> </li> <li> <p> <code>ListProjects</code>, which lists all projects associated with your AWS account.</p> </li> <li> <p> <code>ListResources</code>, which lists the resources associated with a project.</p> </li> <li> <p> <code>ListTagsForProject</code>, which lists the tags associated with a project.</p> </li> <li> <p> <code>TagProject</code>, which adds tags to a project.</p> </li> <li> <p> <code>UntagProject</code>, which removes tags from a project.</p> </li> <li> <p> <code>UpdateProject</code>, which updates the attributes of a project.</p> </li> </ul> <p>Teams and team members, by calling the following:</p> <ul> <li> <p> <code>AssociateTeamMember</code>, which adds an IAM user to the team for a project.</p> </li> <li> <p> <code>DisassociateTeamMember</code>, which removes an IAM user from the team for a project.</p> </li> <li> <p> <code>ListTeamMembers</code>, which lists all the IAM users in the team for a project, including their roles and attributes.</p> </li> <li> <p> <code>UpdateTeamMember</code>, which updates a team member's attributes in a project.</p> </li> </ul> <p>Users, by calling the following:</p> <ul> <li> <p> <code>CreateUserProfile</code>, which creates a user profile that contains data associated with the user across all projects.</p> </li> <li> <p> <code>DeleteUserProfile</code>, which deletes all user profile information across all projects.</p> </li> <li> <p> <code>DescribeUserProfile</code>, which describes the profile of a user.</p> </li> <li> <p> <code>ListUserProfiles</code>, which lists all user profiles.</p> </li> <li> <p> <code>UpdateUserProfile</code>, which updates the profile for a user.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-04-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.DescribeProjectResultStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeProjectResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:04.692142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeProjectResult {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CLIENT_REQUEST_TOKEN = "clientRequestToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_TOKEN)
  private String clientRequestToken;

  public static final String SERIALIZED_NAME_CREATED_TIME_STAMP = "createdTimeStamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME_STAMP)
  private OffsetDateTime createdTimeStamp;

  public static final String SERIALIZED_NAME_STACK_ID = "stackId";
  @SerializedName(SERIALIZED_NAME_STACK_ID)
  private String stackId;

  public static final String SERIALIZED_NAME_PROJECT_TEMPLATE_ID = "projectTemplateId";
  @SerializedName(SERIALIZED_NAME_PROJECT_TEMPLATE_ID)
  private String projectTemplateId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private DescribeProjectResultStatus status;

  public DescribeProjectResult() {
  }

  public DescribeProjectResult name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DescribeProjectResult id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public DescribeProjectResult arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public DescribeProjectResult description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DescribeProjectResult clientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
    return this;
  }

  /**
   * Get clientRequestToken
   * @return clientRequestToken
   */
  @javax.annotation.Nullable
  public String getClientRequestToken() {
    return clientRequestToken;
  }

  public void setClientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
  }


  public DescribeProjectResult createdTimeStamp(OffsetDateTime createdTimeStamp) {
    this.createdTimeStamp = createdTimeStamp;
    return this;
  }

  /**
   * Get createdTimeStamp
   * @return createdTimeStamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTimeStamp() {
    return createdTimeStamp;
  }

  public void setCreatedTimeStamp(OffsetDateTime createdTimeStamp) {
    this.createdTimeStamp = createdTimeStamp;
  }


  public DescribeProjectResult stackId(String stackId) {
    this.stackId = stackId;
    return this;
  }

  /**
   * Get stackId
   * @return stackId
   */
  @javax.annotation.Nullable
  public String getStackId() {
    return stackId;
  }

  public void setStackId(String stackId) {
    this.stackId = stackId;
  }


  public DescribeProjectResult projectTemplateId(String projectTemplateId) {
    this.projectTemplateId = projectTemplateId;
    return this;
  }

  /**
   * Get projectTemplateId
   * @return projectTemplateId
   */
  @javax.annotation.Nullable
  public String getProjectTemplateId() {
    return projectTemplateId;
  }

  public void setProjectTemplateId(String projectTemplateId) {
    this.projectTemplateId = projectTemplateId;
  }


  public DescribeProjectResult status(DescribeProjectResultStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public DescribeProjectResultStatus getStatus() {
    return status;
  }

  public void setStatus(DescribeProjectResultStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeProjectResult describeProjectResult = (DescribeProjectResult) o;
    return Objects.equals(this.name, describeProjectResult.name) &&
        Objects.equals(this.id, describeProjectResult.id) &&
        Objects.equals(this.arn, describeProjectResult.arn) &&
        Objects.equals(this.description, describeProjectResult.description) &&
        Objects.equals(this.clientRequestToken, describeProjectResult.clientRequestToken) &&
        Objects.equals(this.createdTimeStamp, describeProjectResult.createdTimeStamp) &&
        Objects.equals(this.stackId, describeProjectResult.stackId) &&
        Objects.equals(this.projectTemplateId, describeProjectResult.projectTemplateId) &&
        Objects.equals(this.status, describeProjectResult.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, id, arn, description, clientRequestToken, createdTimeStamp, stackId, projectTemplateId, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeProjectResult {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    clientRequestToken: ").append(toIndentedString(clientRequestToken)).append("\n");
    sb.append("    createdTimeStamp: ").append(toIndentedString(createdTimeStamp)).append("\n");
    sb.append("    stackId: ").append(toIndentedString(stackId)).append("\n");
    sb.append("    projectTemplateId: ").append(toIndentedString(projectTemplateId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("id");
    openapiFields.add("arn");
    openapiFields.add("description");
    openapiFields.add("clientRequestToken");
    openapiFields.add("createdTimeStamp");
    openapiFields.add("stackId");
    openapiFields.add("projectTemplateId");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeProjectResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeProjectResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeProjectResult is not found in the empty JSON string", DescribeProjectResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeProjectResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeProjectResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `id`
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("id"));
      }
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `clientRequestToken`
      if (jsonObj.get("clientRequestToken") != null && !jsonObj.get("clientRequestToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("clientRequestToken"));
      }
      // validate the optional field `createdTimeStamp`
      if (jsonObj.get("createdTimeStamp") != null && !jsonObj.get("createdTimeStamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("createdTimeStamp"));
      }
      // validate the optional field `stackId`
      if (jsonObj.get("stackId") != null && !jsonObj.get("stackId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("stackId"));
      }
      // validate the optional field `projectTemplateId`
      if (jsonObj.get("projectTemplateId") != null && !jsonObj.get("projectTemplateId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("projectTemplateId"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        DescribeProjectResultStatus.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeProjectResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeProjectResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeProjectResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeProjectResult.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeProjectResult>() {
           @Override
           public void write(JsonWriter out, DescribeProjectResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeProjectResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeProjectResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeProjectResult
   * @throws IOException if the JSON string is invalid with respect to DescribeProjectResult
   */
  public static DescribeProjectResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeProjectResult.class);
  }

  /**
   * Convert an instance of DescribeProjectResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

