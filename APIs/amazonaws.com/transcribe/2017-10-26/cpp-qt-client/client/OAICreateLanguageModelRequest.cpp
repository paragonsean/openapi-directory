/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateLanguageModelRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateLanguageModelRequest::OAICreateLanguageModelRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateLanguageModelRequest::OAICreateLanguageModelRequest() {
    this->initializeModel();
}

OAICreateLanguageModelRequest::~OAICreateLanguageModelRequest() {}

void OAICreateLanguageModelRequest::initializeModel() {

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_base_model_name_isSet = false;
    m_base_model_name_isValid = false;

    m_model_name_isSet = false;
    m_model_name_isValid = false;

    m_input_data_config_isSet = false;
    m_input_data_config_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateLanguageModelRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateLanguageModelRequest::fromJsonObject(QJsonObject json) {

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("LanguageCode")]);
    m_language_code_isSet = !json[QString("LanguageCode")].isNull() && m_language_code_isValid;

    m_base_model_name_isValid = ::OpenAPI::fromJsonValue(m_base_model_name, json[QString("BaseModelName")]);
    m_base_model_name_isSet = !json[QString("BaseModelName")].isNull() && m_base_model_name_isValid;

    m_model_name_isValid = ::OpenAPI::fromJsonValue(m_model_name, json[QString("ModelName")]);
    m_model_name_isSet = !json[QString("ModelName")].isNull() && m_model_name_isValid;

    m_input_data_config_isValid = ::OpenAPI::fromJsonValue(m_input_data_config, json[QString("InputDataConfig")]);
    m_input_data_config_isSet = !json[QString("InputDataConfig")].isNull() && m_input_data_config_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateLanguageModelRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateLanguageModelRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_language_code.isSet()) {
        obj.insert(QString("LanguageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_base_model_name.isSet()) {
        obj.insert(QString("BaseModelName"), ::OpenAPI::toJsonValue(m_base_model_name));
    }
    if (m_model_name_isSet) {
        obj.insert(QString("ModelName"), ::OpenAPI::toJsonValue(m_model_name));
    }
    if (m_input_data_config.isSet()) {
        obj.insert(QString("InputDataConfig"), ::OpenAPI::toJsonValue(m_input_data_config));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAICLMLanguageCode OAICreateLanguageModelRequest::getLanguageCode() const {
    return m_language_code;
}
void OAICreateLanguageModelRequest::setLanguageCode(const OAICLMLanguageCode &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAICreateLanguageModelRequest::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAICreateLanguageModelRequest::is_language_code_Valid() const{
    return m_language_code_isValid;
}

OAIBaseModelName OAICreateLanguageModelRequest::getBaseModelName() const {
    return m_base_model_name;
}
void OAICreateLanguageModelRequest::setBaseModelName(const OAIBaseModelName &base_model_name) {
    m_base_model_name = base_model_name;
    m_base_model_name_isSet = true;
}

bool OAICreateLanguageModelRequest::is_base_model_name_Set() const{
    return m_base_model_name_isSet;
}

bool OAICreateLanguageModelRequest::is_base_model_name_Valid() const{
    return m_base_model_name_isValid;
}

QString OAICreateLanguageModelRequest::getModelName() const {
    return m_model_name;
}
void OAICreateLanguageModelRequest::setModelName(const QString &model_name) {
    m_model_name = model_name;
    m_model_name_isSet = true;
}

bool OAICreateLanguageModelRequest::is_model_name_Set() const{
    return m_model_name_isSet;
}

bool OAICreateLanguageModelRequest::is_model_name_Valid() const{
    return m_model_name_isValid;
}

OAICreateLanguageModelRequest_InputDataConfig OAICreateLanguageModelRequest::getInputDataConfig() const {
    return m_input_data_config;
}
void OAICreateLanguageModelRequest::setInputDataConfig(const OAICreateLanguageModelRequest_InputDataConfig &input_data_config) {
    m_input_data_config = input_data_config;
    m_input_data_config_isSet = true;
}

bool OAICreateLanguageModelRequest::is_input_data_config_Set() const{
    return m_input_data_config_isSet;
}

bool OAICreateLanguageModelRequest::is_input_data_config_Valid() const{
    return m_input_data_config_isValid;
}

QList OAICreateLanguageModelRequest::getTags() const {
    return m_tags;
}
void OAICreateLanguageModelRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateLanguageModelRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateLanguageModelRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateLanguageModelRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_language_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_model_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_data_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateLanguageModelRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_language_code_isValid && m_base_model_name_isValid && m_model_name_isValid && m_input_data_config_isValid && true;
}

} // namespace OpenAPI
