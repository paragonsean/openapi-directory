/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateVocabularyResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateVocabularyResponse::OAIUpdateVocabularyResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateVocabularyResponse::OAIUpdateVocabularyResponse() {
    this->initializeModel();
}

OAIUpdateVocabularyResponse::~OAIUpdateVocabularyResponse() {}

void OAIUpdateVocabularyResponse::initializeModel() {

    m_vocabulary_name_isSet = false;
    m_vocabulary_name_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_vocabulary_state_isSet = false;
    m_vocabulary_state_isValid = false;
}

void OAIUpdateVocabularyResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateVocabularyResponse::fromJsonObject(QJsonObject json) {

    m_vocabulary_name_isValid = ::OpenAPI::fromJsonValue(m_vocabulary_name, json[QString("VocabularyName")]);
    m_vocabulary_name_isSet = !json[QString("VocabularyName")].isNull() && m_vocabulary_name_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("LanguageCode")]);
    m_language_code_isSet = !json[QString("LanguageCode")].isNull() && m_language_code_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_vocabulary_state_isValid = ::OpenAPI::fromJsonValue(m_vocabulary_state, json[QString("VocabularyState")]);
    m_vocabulary_state_isSet = !json[QString("VocabularyState")].isNull() && m_vocabulary_state_isValid;
}

QString OAIUpdateVocabularyResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateVocabularyResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_vocabulary_name_isSet) {
        obj.insert(QString("VocabularyName"), ::OpenAPI::toJsonValue(m_vocabulary_name));
    }
    if (m_language_code.isSet()) {
        obj.insert(QString("LanguageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_vocabulary_state.isSet()) {
        obj.insert(QString("VocabularyState"), ::OpenAPI::toJsonValue(m_vocabulary_state));
    }
    return obj;
}

QString OAIUpdateVocabularyResponse::getVocabularyName() const {
    return m_vocabulary_name;
}
void OAIUpdateVocabularyResponse::setVocabularyName(const QString &vocabulary_name) {
    m_vocabulary_name = vocabulary_name;
    m_vocabulary_name_isSet = true;
}

bool OAIUpdateVocabularyResponse::is_vocabulary_name_Set() const{
    return m_vocabulary_name_isSet;
}

bool OAIUpdateVocabularyResponse::is_vocabulary_name_Valid() const{
    return m_vocabulary_name_isValid;
}

OAILanguageCode OAIUpdateVocabularyResponse::getLanguageCode() const {
    return m_language_code;
}
void OAIUpdateVocabularyResponse::setLanguageCode(const OAILanguageCode &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIUpdateVocabularyResponse::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIUpdateVocabularyResponse::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QDateTime OAIUpdateVocabularyResponse::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIUpdateVocabularyResponse::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIUpdateVocabularyResponse::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIUpdateVocabularyResponse::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

OAIVocabularyState OAIUpdateVocabularyResponse::getVocabularyState() const {
    return m_vocabulary_state;
}
void OAIUpdateVocabularyResponse::setVocabularyState(const OAIVocabularyState &vocabulary_state) {
    m_vocabulary_state = vocabulary_state;
    m_vocabulary_state_isSet = true;
}

bool OAIUpdateVocabularyResponse::is_vocabulary_state_Set() const{
    return m_vocabulary_state_isSet;
}

bool OAIUpdateVocabularyResponse::is_vocabulary_state_Valid() const{
    return m_vocabulary_state_isValid;
}

bool OAIUpdateVocabularyResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_vocabulary_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vocabulary_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateVocabularyResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
