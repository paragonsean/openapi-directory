/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartCallAnalyticsJobRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartCallAnalyticsJobRequest::OAIStartCallAnalyticsJobRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartCallAnalyticsJobRequest::OAIStartCallAnalyticsJobRequest() {
    this->initializeModel();
}

OAIStartCallAnalyticsJobRequest::~OAIStartCallAnalyticsJobRequest() {}

void OAIStartCallAnalyticsJobRequest::initializeModel() {

    m_call_analytics_job_name_isSet = false;
    m_call_analytics_job_name_isValid = false;

    m_media_isSet = false;
    m_media_isValid = false;

    m_output_location_isSet = false;
    m_output_location_isValid = false;

    m_output_encryption_kms_key_id_isSet = false;
    m_output_encryption_kms_key_id_isValid = false;

    m_data_access_role_arn_isSet = false;
    m_data_access_role_arn_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_channel_definitions_isSet = false;
    m_channel_definitions_isValid = false;
}

void OAIStartCallAnalyticsJobRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartCallAnalyticsJobRequest::fromJsonObject(QJsonObject json) {

    m_call_analytics_job_name_isValid = ::OpenAPI::fromJsonValue(m_call_analytics_job_name, json[QString("CallAnalyticsJobName")]);
    m_call_analytics_job_name_isSet = !json[QString("CallAnalyticsJobName")].isNull() && m_call_analytics_job_name_isValid;

    m_media_isValid = ::OpenAPI::fromJsonValue(m_media, json[QString("Media")]);
    m_media_isSet = !json[QString("Media")].isNull() && m_media_isValid;

    m_output_location_isValid = ::OpenAPI::fromJsonValue(m_output_location, json[QString("OutputLocation")]);
    m_output_location_isSet = !json[QString("OutputLocation")].isNull() && m_output_location_isValid;

    m_output_encryption_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_output_encryption_kms_key_id, json[QString("OutputEncryptionKMSKeyId")]);
    m_output_encryption_kms_key_id_isSet = !json[QString("OutputEncryptionKMSKeyId")].isNull() && m_output_encryption_kms_key_id_isValid;

    m_data_access_role_arn_isValid = ::OpenAPI::fromJsonValue(m_data_access_role_arn, json[QString("DataAccessRoleArn")]);
    m_data_access_role_arn_isSet = !json[QString("DataAccessRoleArn")].isNull() && m_data_access_role_arn_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("Settings")]);
    m_settings_isSet = !json[QString("Settings")].isNull() && m_settings_isValid;

    m_channel_definitions_isValid = ::OpenAPI::fromJsonValue(m_channel_definitions, json[QString("ChannelDefinitions")]);
    m_channel_definitions_isSet = !json[QString("ChannelDefinitions")].isNull() && m_channel_definitions_isValid;
}

QString OAIStartCallAnalyticsJobRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartCallAnalyticsJobRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_call_analytics_job_name_isSet) {
        obj.insert(QString("CallAnalyticsJobName"), ::OpenAPI::toJsonValue(m_call_analytics_job_name));
    }
    if (m_media.isSet()) {
        obj.insert(QString("Media"), ::OpenAPI::toJsonValue(m_media));
    }
    if (m_output_location_isSet) {
        obj.insert(QString("OutputLocation"), ::OpenAPI::toJsonValue(m_output_location));
    }
    if (m_output_encryption_kms_key_id_isSet) {
        obj.insert(QString("OutputEncryptionKMSKeyId"), ::OpenAPI::toJsonValue(m_output_encryption_kms_key_id));
    }
    if (m_data_access_role_arn_isSet) {
        obj.insert(QString("DataAccessRoleArn"), ::OpenAPI::toJsonValue(m_data_access_role_arn));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("Settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_channel_definitions.isSet()) {
        obj.insert(QString("ChannelDefinitions"), ::OpenAPI::toJsonValue(m_channel_definitions));
    }
    return obj;
}

QString OAIStartCallAnalyticsJobRequest::getCallAnalyticsJobName() const {
    return m_call_analytics_job_name;
}
void OAIStartCallAnalyticsJobRequest::setCallAnalyticsJobName(const QString &call_analytics_job_name) {
    m_call_analytics_job_name = call_analytics_job_name;
    m_call_analytics_job_name_isSet = true;
}

bool OAIStartCallAnalyticsJobRequest::is_call_analytics_job_name_Set() const{
    return m_call_analytics_job_name_isSet;
}

bool OAIStartCallAnalyticsJobRequest::is_call_analytics_job_name_Valid() const{
    return m_call_analytics_job_name_isValid;
}

OAIStartCallAnalyticsJobRequest_Media OAIStartCallAnalyticsJobRequest::getMedia() const {
    return m_media;
}
void OAIStartCallAnalyticsJobRequest::setMedia(const OAIStartCallAnalyticsJobRequest_Media &media) {
    m_media = media;
    m_media_isSet = true;
}

bool OAIStartCallAnalyticsJobRequest::is_media_Set() const{
    return m_media_isSet;
}

bool OAIStartCallAnalyticsJobRequest::is_media_Valid() const{
    return m_media_isValid;
}

QString OAIStartCallAnalyticsJobRequest::getOutputLocation() const {
    return m_output_location;
}
void OAIStartCallAnalyticsJobRequest::setOutputLocation(const QString &output_location) {
    m_output_location = output_location;
    m_output_location_isSet = true;
}

bool OAIStartCallAnalyticsJobRequest::is_output_location_Set() const{
    return m_output_location_isSet;
}

bool OAIStartCallAnalyticsJobRequest::is_output_location_Valid() const{
    return m_output_location_isValid;
}

QString OAIStartCallAnalyticsJobRequest::getOutputEncryptionKmsKeyId() const {
    return m_output_encryption_kms_key_id;
}
void OAIStartCallAnalyticsJobRequest::setOutputEncryptionKmsKeyId(const QString &output_encryption_kms_key_id) {
    m_output_encryption_kms_key_id = output_encryption_kms_key_id;
    m_output_encryption_kms_key_id_isSet = true;
}

bool OAIStartCallAnalyticsJobRequest::is_output_encryption_kms_key_id_Set() const{
    return m_output_encryption_kms_key_id_isSet;
}

bool OAIStartCallAnalyticsJobRequest::is_output_encryption_kms_key_id_Valid() const{
    return m_output_encryption_kms_key_id_isValid;
}

QString OAIStartCallAnalyticsJobRequest::getDataAccessRoleArn() const {
    return m_data_access_role_arn;
}
void OAIStartCallAnalyticsJobRequest::setDataAccessRoleArn(const QString &data_access_role_arn) {
    m_data_access_role_arn = data_access_role_arn;
    m_data_access_role_arn_isSet = true;
}

bool OAIStartCallAnalyticsJobRequest::is_data_access_role_arn_Set() const{
    return m_data_access_role_arn_isSet;
}

bool OAIStartCallAnalyticsJobRequest::is_data_access_role_arn_Valid() const{
    return m_data_access_role_arn_isValid;
}

OAIStartCallAnalyticsJobRequest_Settings OAIStartCallAnalyticsJobRequest::getSettings() const {
    return m_settings;
}
void OAIStartCallAnalyticsJobRequest::setSettings(const OAIStartCallAnalyticsJobRequest_Settings &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAIStartCallAnalyticsJobRequest::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIStartCallAnalyticsJobRequest::is_settings_Valid() const{
    return m_settings_isValid;
}

QList OAIStartCallAnalyticsJobRequest::getChannelDefinitions() const {
    return m_channel_definitions;
}
void OAIStartCallAnalyticsJobRequest::setChannelDefinitions(const QList &channel_definitions) {
    m_channel_definitions = channel_definitions;
    m_channel_definitions_isSet = true;
}

bool OAIStartCallAnalyticsJobRequest::is_channel_definitions_Set() const{
    return m_channel_definitions_isSet;
}

bool OAIStartCallAnalyticsJobRequest::is_channel_definitions_Valid() const{
    return m_channel_definitions_isValid;
}

bool OAIStartCallAnalyticsJobRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_call_analytics_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_encryption_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_access_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_definitions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartCallAnalyticsJobRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_call_analytics_job_name_isValid && m_media_isValid && true;
}

} // namespace OpenAPI
