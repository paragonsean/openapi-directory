/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInputDataConfig.h
 *
 * &lt;p&gt;Contains the Amazon S3 location of the training data you want to use to create a new custom language model, and permissions to access this location.&lt;/p&gt; &lt;p&gt;When using &lt;code&gt;InputDataConfig&lt;/code&gt;, you must include these sub-parameters: &lt;code&gt;S3Uri&lt;/code&gt; and &lt;code&gt;DataAccessRoleArn&lt;/code&gt;. You can optionally include &lt;code&gt;TuningDataS3Uri&lt;/code&gt;.&lt;/p&gt;
 */

#ifndef OAIInputDataConfig_H
#define OAIInputDataConfig_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIInputDataConfig : public OAIObject {
public:
    OAIInputDataConfig();
    OAIInputDataConfig(QString json);
    ~OAIInputDataConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getS3Uri() const;
    void setS3Uri(const QString &s3_uri);
    bool is_s3_uri_Set() const;
    bool is_s3_uri_Valid() const;

    QString getTuningDataS3Uri() const;
    void setTuningDataS3Uri(const QString &tuning_data_s3_uri);
    bool is_tuning_data_s3_uri_Set() const;
    bool is_tuning_data_s3_uri_Valid() const;

    QString getDataAccessRoleArn() const;
    void setDataAccessRoleArn(const QString &data_access_role_arn);
    bool is_data_access_role_arn_Set() const;
    bool is_data_access_role_arn_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_s3_uri;
    bool m_s3_uri_isSet;
    bool m_s3_uri_isValid;

    QString m_tuning_data_s3_uri;
    bool m_tuning_data_s3_uri_isSet;
    bool m_tuning_data_s3_uri_isValid;

    QString m_data_access_role_arn;
    bool m_data_access_role_arn_isSet;
    bool m_data_access_role_arn_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInputDataConfig)

#endif // OAIInputDataConfig_H
