/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetCallAnalyticsJobResponse_CallAnalyticsJob.h
 *
 * 
 */

#ifndef OAIGetCallAnalyticsJobResponse_CallAnalyticsJob_H
#define OAIGetCallAnalyticsJobResponse_CallAnalyticsJob_H

#include <QJsonObject>

#include "OAICallAnalyticsJobStatus.h"
#include "OAICallAnalyticsJob_Media.h"
#include "OAICallAnalyticsJob_Settings.h"
#include "OAILanguageCode.h"
#include "OAIMediaFormat.h"
#include "OAITranscript.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICallAnalyticsJob_Media;
class OAITranscript;
class OAICallAnalyticsJob_Settings;

class OAIGetCallAnalyticsJobResponse_CallAnalyticsJob : public OAIObject {
public:
    OAIGetCallAnalyticsJobResponse_CallAnalyticsJob();
    OAIGetCallAnalyticsJobResponse_CallAnalyticsJob(QString json);
    ~OAIGetCallAnalyticsJobResponse_CallAnalyticsJob() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCallAnalyticsJobName() const;
    void setCallAnalyticsJobName(const QString &call_analytics_job_name);
    bool is_call_analytics_job_name_Set() const;
    bool is_call_analytics_job_name_Valid() const;

    OAICallAnalyticsJobStatus getCallAnalyticsJobStatus() const;
    void setCallAnalyticsJobStatus(const OAICallAnalyticsJobStatus &call_analytics_job_status);
    bool is_call_analytics_job_status_Set() const;
    bool is_call_analytics_job_status_Valid() const;

    OAILanguageCode getLanguageCode() const;
    void setLanguageCode(const OAILanguageCode &language_code);
    bool is_language_code_Set() const;
    bool is_language_code_Valid() const;

    qint32 getMediaSampleRateHertz() const;
    void setMediaSampleRateHertz(const qint32 &media_sample_rate_hertz);
    bool is_media_sample_rate_hertz_Set() const;
    bool is_media_sample_rate_hertz_Valid() const;

    OAIMediaFormat getMediaFormat() const;
    void setMediaFormat(const OAIMediaFormat &media_format);
    bool is_media_format_Set() const;
    bool is_media_format_Valid() const;

    OAICallAnalyticsJob_Media getMedia() const;
    void setMedia(const OAICallAnalyticsJob_Media &media);
    bool is_media_Set() const;
    bool is_media_Valid() const;

    OAITranscript getTranscript() const;
    void setTranscript(const OAITranscript &transcript);
    bool is_transcript_Set() const;
    bool is_transcript_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QDateTime getCreationTime() const;
    void setCreationTime(const QDateTime &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    QDateTime getCompletionTime() const;
    void setCompletionTime(const QDateTime &completion_time);
    bool is_completion_time_Set() const;
    bool is_completion_time_Valid() const;

    QString getFailureReason() const;
    void setFailureReason(const QString &failure_reason);
    bool is_failure_reason_Set() const;
    bool is_failure_reason_Valid() const;

    QString getDataAccessRoleArn() const;
    void setDataAccessRoleArn(const QString &data_access_role_arn);
    bool is_data_access_role_arn_Set() const;
    bool is_data_access_role_arn_Valid() const;

    float getIdentifiedLanguageScore() const;
    void setIdentifiedLanguageScore(const float &identified_language_score);
    bool is_identified_language_score_Set() const;
    bool is_identified_language_score_Valid() const;

    OAICallAnalyticsJob_Settings getSettings() const;
    void setSettings(const OAICallAnalyticsJob_Settings &settings);
    bool is_settings_Set() const;
    bool is_settings_Valid() const;

    QList getChannelDefinitions() const;
    void setChannelDefinitions(const QList &channel_definitions);
    bool is_channel_definitions_Set() const;
    bool is_channel_definitions_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_call_analytics_job_name;
    bool m_call_analytics_job_name_isSet;
    bool m_call_analytics_job_name_isValid;

    OAICallAnalyticsJobStatus m_call_analytics_job_status;
    bool m_call_analytics_job_status_isSet;
    bool m_call_analytics_job_status_isValid;

    OAILanguageCode m_language_code;
    bool m_language_code_isSet;
    bool m_language_code_isValid;

    qint32 m_media_sample_rate_hertz;
    bool m_media_sample_rate_hertz_isSet;
    bool m_media_sample_rate_hertz_isValid;

    OAIMediaFormat m_media_format;
    bool m_media_format_isSet;
    bool m_media_format_isValid;

    OAICallAnalyticsJob_Media m_media;
    bool m_media_isSet;
    bool m_media_isValid;

    OAITranscript m_transcript;
    bool m_transcript_isSet;
    bool m_transcript_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QDateTime m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;

    QDateTime m_completion_time;
    bool m_completion_time_isSet;
    bool m_completion_time_isValid;

    QString m_failure_reason;
    bool m_failure_reason_isSet;
    bool m_failure_reason_isValid;

    QString m_data_access_role_arn;
    bool m_data_access_role_arn_isSet;
    bool m_data_access_role_arn_isValid;

    float m_identified_language_score;
    bool m_identified_language_score_isSet;
    bool m_identified_language_score_isValid;

    OAICallAnalyticsJob_Settings m_settings;
    bool m_settings_isSet;
    bool m_settings_isValid;

    QList m_channel_definitions;
    bool m_channel_definitions_isSet;
    bool m_channel_definitions_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetCallAnalyticsJobResponse_CallAnalyticsJob)

#endif // OAIGetCallAnalyticsJobResponse_CallAnalyticsJob_H
