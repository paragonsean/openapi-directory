/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAbsoluteTimeRange.h
 *
 * &lt;p&gt;A time range, in milliseconds, between two points in your media file.&lt;/p&gt; &lt;p&gt;You can use &lt;code&gt;StartTime&lt;/code&gt; and &lt;code&gt;EndTime&lt;/code&gt; to search a custom segment. For example, setting &lt;code&gt;StartTime&lt;/code&gt; to 10000 and &lt;code&gt;EndTime&lt;/code&gt; to 50000 only searches for your specified criteria in the audio contained between the 10,000 millisecond mark and the 50,000 millisecond mark of your media file. You must use &lt;code&gt;StartTime&lt;/code&gt; and &lt;code&gt;EndTime&lt;/code&gt; as a set; that is, if you include one, you must include both.&lt;/p&gt; &lt;p&gt;You can use also &lt;code&gt;First&lt;/code&gt; to search from the start of the audio until the time that you specify, or &lt;code&gt;Last&lt;/code&gt; to search from the time that you specify until the end of the audio. For example, setting &lt;code&gt;First&lt;/code&gt; to 50000 only searches for your specified criteria in the audio contained between the start of the media file to the 50,000 millisecond mark. You can use &lt;code&gt;First&lt;/code&gt; and &lt;code&gt;Last&lt;/code&gt; independently of each other.&lt;/p&gt; &lt;p&gt;If you prefer to use percentage instead of milliseconds, see .&lt;/p&gt;
 */

#ifndef OAIAbsoluteTimeRange_H
#define OAIAbsoluteTimeRange_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAbsoluteTimeRange : public OAIObject {
public:
    OAIAbsoluteTimeRange();
    OAIAbsoluteTimeRange(QString json);
    ~OAIAbsoluteTimeRange() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getStartTime() const;
    void setStartTime(const qint32 &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    qint32 getEndTime() const;
    void setEndTime(const qint32 &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    qint32 getFirst() const;
    void setFirst(const qint32 &first);
    bool is_first_Set() const;
    bool is_first_Valid() const;

    qint32 getLast() const;
    void setLast(const qint32 &last);
    bool is_last_Set() const;
    bool is_last_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    qint32 m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    qint32 m_first;
    bool m_first_isSet;
    bool m_first_isValid;

    qint32 m_last;
    bool m_last_isSet;
    bool m_last_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAbsoluteTimeRange)

#endif // OAIAbsoluteTimeRange_H
