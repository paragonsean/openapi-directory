/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILanguageCode.h
 *
 * 
 */

#ifndef OAILanguageCode_H
#define OAILanguageCode_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAILanguageCode : public OAIEnum {
public:
    OAILanguageCode();
    OAILanguageCode(QString json);
    ~OAILanguageCode() override;

    QString asJson() const override;
    QJsonValue asJsonValue() const override;
    void fromJsonValue(QJsonValue json) override;
    void fromJson(QString jsonString) override;

    enum class eOAILanguageCode {
        INVALID_VALUE_OPENAPI_GENERATED = 0,
        AF_ZA, 
        AR_AE, 
        AR_SA, 
        DA_DK, 
        DE_CH, 
        DE_DE, 
        EN_AB, 
        EN_AU, 
        EN_GB, 
        EN_IE, 
        EN_IN, 
        EN_US, 
        EN_WL, 
        ES_ES, 
        ES_US, 
        FA_IR, 
        FR_CA, 
        FR_FR, 
        HE_IL, 
        HI_IN, 
        ID_ID, 
        IT_IT, 
        JA_JP, 
        KO_KR, 
        MS_MY, 
        NL_NL, 
        PT_BR, 
        PT_PT, 
        RU_RU, 
        TA_IN, 
        TE_IN, 
        TR_TR, 
        ZH_CN, 
        ZH_TW, 
        TH_TH, 
        EN_ZA, 
        EN_NZ, 
        VI_VN, 
        SV_SE
    };
    OAILanguageCode::eOAILanguageCode getValue() const;
    void setValue(const OAILanguageCode::eOAILanguageCode& value);
    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    eOAILanguageCode m_value;
    bool m_value_isSet;
    bool m_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILanguageCode)

#endif // OAILanguageCode_H
