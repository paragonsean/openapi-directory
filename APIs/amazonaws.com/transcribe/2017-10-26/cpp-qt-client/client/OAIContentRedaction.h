/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIContentRedaction.h
 *
 * Makes it possible to redact or flag specified personally identifiable information (PII) in your transcript. If you use &lt;code&gt;ContentRedaction&lt;/code&gt;, you must also include the sub-parameters: &lt;code&gt;PiiEntityTypes&lt;/code&gt;, &lt;code&gt;RedactionOutput&lt;/code&gt;, and &lt;code&gt;RedactionType&lt;/code&gt;.
 */

#ifndef OAIContentRedaction_H
#define OAIContentRedaction_H

#include <QJsonObject>

#include "OAIRedactionOutput.h"
#include "OAIRedactionType.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIContentRedaction : public OAIObject {
public:
    OAIContentRedaction();
    OAIContentRedaction(QString json);
    ~OAIContentRedaction() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIRedactionType getRedactionType() const;
    void setRedactionType(const OAIRedactionType &redaction_type);
    bool is_redaction_type_Set() const;
    bool is_redaction_type_Valid() const;

    OAIRedactionOutput getRedactionOutput() const;
    void setRedactionOutput(const OAIRedactionOutput &redaction_output);
    bool is_redaction_output_Set() const;
    bool is_redaction_output_Valid() const;

    QList getPiiEntityTypes() const;
    void setPiiEntityTypes(const QList &pii_entity_types);
    bool is_pii_entity_types_Set() const;
    bool is_pii_entity_types_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIRedactionType m_redaction_type;
    bool m_redaction_type_isSet;
    bool m_redaction_type_isValid;

    OAIRedactionOutput m_redaction_output;
    bool m_redaction_output_isSet;
    bool m_redaction_output_isValid;

    QList m_pii_entity_types;
    bool m_pii_entity_types_isSet;
    bool m_pii_entity_types_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIContentRedaction)

#endif // OAIContentRedaction_H
