/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRule.h
 *
 * &lt;p&gt;A rule is a set of criteria that you can specify to flag an attribute in your Call Analytics output. Rules define a Call Analytics category.&lt;/p&gt; &lt;p&gt;Rules can include these parameters: , , , and .&lt;/p&gt; &lt;p&gt;To learn more about Call Analytics rules and categories, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/transcribe/latest/dg/tca-categories-batch.html\&quot;&gt;Creating categories for post-call transcriptions&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/transcribe/latest/dg/tca-categories-stream.html\&quot;&gt;Creating categories for real-time transcriptions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To learn more about Call Analytics, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/transcribe/latest/dg/call-analytics.html\&quot;&gt;Analyzing call center audio with Call Analytics&lt;/a&gt;.&lt;/p&gt;
 */

#ifndef OAIRule_H
#define OAIRule_H

#include <QJsonObject>

#include "OAIRule_InterruptionFilter.h"
#include "OAIRule_NonTalkTimeFilter.h"
#include "OAIRule_SentimentFilter.h"
#include "OAIRule_TranscriptFilter.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRule_NonTalkTimeFilter;
class OAIRule_InterruptionFilter;
class OAIRule_TranscriptFilter;
class OAIRule_SentimentFilter;

class OAIRule : public OAIObject {
public:
    OAIRule();
    OAIRule(QString json);
    ~OAIRule() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIRule_NonTalkTimeFilter getNonTalkTimeFilter() const;
    void setNonTalkTimeFilter(const OAIRule_NonTalkTimeFilter &non_talk_time_filter);
    bool is_non_talk_time_filter_Set() const;
    bool is_non_talk_time_filter_Valid() const;

    OAIRule_InterruptionFilter getInterruptionFilter() const;
    void setInterruptionFilter(const OAIRule_InterruptionFilter &interruption_filter);
    bool is_interruption_filter_Set() const;
    bool is_interruption_filter_Valid() const;

    OAIRule_TranscriptFilter getTranscriptFilter() const;
    void setTranscriptFilter(const OAIRule_TranscriptFilter &transcript_filter);
    bool is_transcript_filter_Set() const;
    bool is_transcript_filter_Valid() const;

    OAIRule_SentimentFilter getSentimentFilter() const;
    void setSentimentFilter(const OAIRule_SentimentFilter &sentiment_filter);
    bool is_sentiment_filter_Set() const;
    bool is_sentiment_filter_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIRule_NonTalkTimeFilter m_non_talk_time_filter;
    bool m_non_talk_time_filter_isSet;
    bool m_non_talk_time_filter_isValid;

    OAIRule_InterruptionFilter m_interruption_filter;
    bool m_interruption_filter_isSet;
    bool m_interruption_filter_isValid;

    OAIRule_TranscriptFilter m_transcript_filter;
    bool m_transcript_filter_isSet;
    bool m_transcript_filter_isValid;

    OAIRule_SentimentFilter m_sentiment_filter;
    bool m_sentiment_filter_isSet;
    bool m_sentiment_filter_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRule)

#endif // OAIRule_H
