/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateLanguageModelResponse.h
 *
 * 
 */

#ifndef OAICreateLanguageModelResponse_H
#define OAICreateLanguageModelResponse_H

#include <QJsonObject>

#include "OAIBaseModelName.h"
#include "OAICLMLanguageCode.h"
#include "OAICreateLanguageModelResponse_InputDataConfig.h"
#include "OAIModelStatus.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateLanguageModelResponse_InputDataConfig;

class OAICreateLanguageModelResponse : public OAIObject {
public:
    OAICreateLanguageModelResponse();
    OAICreateLanguageModelResponse(QString json);
    ~OAICreateLanguageModelResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICLMLanguageCode getLanguageCode() const;
    void setLanguageCode(const OAICLMLanguageCode &language_code);
    bool is_language_code_Set() const;
    bool is_language_code_Valid() const;

    OAIBaseModelName getBaseModelName() const;
    void setBaseModelName(const OAIBaseModelName &base_model_name);
    bool is_base_model_name_Set() const;
    bool is_base_model_name_Valid() const;

    QString getModelName() const;
    void setModelName(const QString &model_name);
    bool is_model_name_Set() const;
    bool is_model_name_Valid() const;

    OAICreateLanguageModelResponse_InputDataConfig getInputDataConfig() const;
    void setInputDataConfig(const OAICreateLanguageModelResponse_InputDataConfig &input_data_config);
    bool is_input_data_config_Set() const;
    bool is_input_data_config_Valid() const;

    OAIModelStatus getModelStatus() const;
    void setModelStatus(const OAIModelStatus &model_status);
    bool is_model_status_Set() const;
    bool is_model_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICLMLanguageCode m_language_code;
    bool m_language_code_isSet;
    bool m_language_code_isValid;

    OAIBaseModelName m_base_model_name;
    bool m_base_model_name_isSet;
    bool m_base_model_name_isValid;

    QString m_model_name;
    bool m_model_name_isSet;
    bool m_model_name_isValid;

    OAICreateLanguageModelResponse_InputDataConfig m_input_data_config;
    bool m_input_data_config_isSet;
    bool m_input_data_config_isValid;

    OAIModelStatus m_model_status;
    bool m_model_status_isSet;
    bool m_model_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateLanguageModelResponse)

#endif // OAICreateLanguageModelResponse_H
