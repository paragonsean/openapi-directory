/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILanguageCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILanguageCode::OAILanguageCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILanguageCode::OAILanguageCode() {
    this->initializeModel();
}

OAILanguageCode::~OAILanguageCode() {}

void OAILanguageCode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAILanguageCode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAILanguageCode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("af-ZA", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::AF_ZA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ar-AE", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::AR_AE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ar-SA", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::AR_SA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("da-DK", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::DA_DK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("de-CH", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::DE_CH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("de-DE", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::DE_DE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("en-AB", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::EN_AB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("en-AU", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::EN_AU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("en-GB", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::EN_GB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("en-IE", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::EN_IE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("en-IN", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::EN_IN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("en-US", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::EN_US;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("en-WL", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::EN_WL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("es-ES", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::ES_ES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("es-US", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::ES_US;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("fa-IR", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::FA_IR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("fr-CA", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::FR_CA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("fr-FR", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::FR_FR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("he-IL", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::HE_IL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("hi-IN", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::HI_IN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("id-ID", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::ID_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("it-IT", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::IT_IT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ja-JP", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::JA_JP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ko-KR", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::KO_KR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ms-MY", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::MS_MY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("nl-NL", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::NL_NL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pt-BR", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::PT_BR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pt-PT", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::PT_PT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ru-RU", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::RU_RU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ta-IN", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::TA_IN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("te-IN", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::TE_IN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("tr-TR", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::TR_TR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("zh-CN", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::ZH_CN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("zh-TW", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::ZH_TW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("th-TH", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::TH_TH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("en-ZA", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::EN_ZA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("en-NZ", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::EN_NZ;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("vi-VN", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::VI_VN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sv-SE", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguageCode::SV_SE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAILanguageCode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAILanguageCode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAILanguageCode::AF_ZA:
            val = "af-ZA";
            break;
        case eOAILanguageCode::AR_AE:
            val = "ar-AE";
            break;
        case eOAILanguageCode::AR_SA:
            val = "ar-SA";
            break;
        case eOAILanguageCode::DA_DK:
            val = "da-DK";
            break;
        case eOAILanguageCode::DE_CH:
            val = "de-CH";
            break;
        case eOAILanguageCode::DE_DE:
            val = "de-DE";
            break;
        case eOAILanguageCode::EN_AB:
            val = "en-AB";
            break;
        case eOAILanguageCode::EN_AU:
            val = "en-AU";
            break;
        case eOAILanguageCode::EN_GB:
            val = "en-GB";
            break;
        case eOAILanguageCode::EN_IE:
            val = "en-IE";
            break;
        case eOAILanguageCode::EN_IN:
            val = "en-IN";
            break;
        case eOAILanguageCode::EN_US:
            val = "en-US";
            break;
        case eOAILanguageCode::EN_WL:
            val = "en-WL";
            break;
        case eOAILanguageCode::ES_ES:
            val = "es-ES";
            break;
        case eOAILanguageCode::ES_US:
            val = "es-US";
            break;
        case eOAILanguageCode::FA_IR:
            val = "fa-IR";
            break;
        case eOAILanguageCode::FR_CA:
            val = "fr-CA";
            break;
        case eOAILanguageCode::FR_FR:
            val = "fr-FR";
            break;
        case eOAILanguageCode::HE_IL:
            val = "he-IL";
            break;
        case eOAILanguageCode::HI_IN:
            val = "hi-IN";
            break;
        case eOAILanguageCode::ID_ID:
            val = "id-ID";
            break;
        case eOAILanguageCode::IT_IT:
            val = "it-IT";
            break;
        case eOAILanguageCode::JA_JP:
            val = "ja-JP";
            break;
        case eOAILanguageCode::KO_KR:
            val = "ko-KR";
            break;
        case eOAILanguageCode::MS_MY:
            val = "ms-MY";
            break;
        case eOAILanguageCode::NL_NL:
            val = "nl-NL";
            break;
        case eOAILanguageCode::PT_BR:
            val = "pt-BR";
            break;
        case eOAILanguageCode::PT_PT:
            val = "pt-PT";
            break;
        case eOAILanguageCode::RU_RU:
            val = "ru-RU";
            break;
        case eOAILanguageCode::TA_IN:
            val = "ta-IN";
            break;
        case eOAILanguageCode::TE_IN:
            val = "te-IN";
            break;
        case eOAILanguageCode::TR_TR:
            val = "tr-TR";
            break;
        case eOAILanguageCode::ZH_CN:
            val = "zh-CN";
            break;
        case eOAILanguageCode::ZH_TW:
            val = "zh-TW";
            break;
        case eOAILanguageCode::TH_TH:
            val = "th-TH";
            break;
        case eOAILanguageCode::EN_ZA:
            val = "en-ZA";
            break;
        case eOAILanguageCode::EN_NZ:
            val = "en-NZ";
            break;
        case eOAILanguageCode::VI_VN:
            val = "vi-VN";
            break;
        case eOAILanguageCode::SV_SE:
            val = "sv-SE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAILanguageCode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAILanguageCode::eOAILanguageCode OAILanguageCode::getValue() const {
    return m_value;
}

void OAILanguageCode::setValue(const OAILanguageCode::eOAILanguageCode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAILanguageCode::isSet() const {
    
    return m_value_isSet;
}

bool OAILanguageCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
