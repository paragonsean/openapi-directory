/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContentRedaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContentRedaction::OAIContentRedaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContentRedaction::OAIContentRedaction() {
    this->initializeModel();
}

OAIContentRedaction::~OAIContentRedaction() {}

void OAIContentRedaction::initializeModel() {

    m_redaction_type_isSet = false;
    m_redaction_type_isValid = false;

    m_redaction_output_isSet = false;
    m_redaction_output_isValid = false;

    m_pii_entity_types_isSet = false;
    m_pii_entity_types_isValid = false;
}

void OAIContentRedaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContentRedaction::fromJsonObject(QJsonObject json) {

    m_redaction_type_isValid = ::OpenAPI::fromJsonValue(m_redaction_type, json[QString("RedactionType")]);
    m_redaction_type_isSet = !json[QString("RedactionType")].isNull() && m_redaction_type_isValid;

    m_redaction_output_isValid = ::OpenAPI::fromJsonValue(m_redaction_output, json[QString("RedactionOutput")]);
    m_redaction_output_isSet = !json[QString("RedactionOutput")].isNull() && m_redaction_output_isValid;

    m_pii_entity_types_isValid = ::OpenAPI::fromJsonValue(m_pii_entity_types, json[QString("PiiEntityTypes")]);
    m_pii_entity_types_isSet = !json[QString("PiiEntityTypes")].isNull() && m_pii_entity_types_isValid;
}

QString OAIContentRedaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContentRedaction::asJsonObject() const {
    QJsonObject obj;
    if (m_redaction_type.isSet()) {
        obj.insert(QString("RedactionType"), ::OpenAPI::toJsonValue(m_redaction_type));
    }
    if (m_redaction_output.isSet()) {
        obj.insert(QString("RedactionOutput"), ::OpenAPI::toJsonValue(m_redaction_output));
    }
    if (m_pii_entity_types.isSet()) {
        obj.insert(QString("PiiEntityTypes"), ::OpenAPI::toJsonValue(m_pii_entity_types));
    }
    return obj;
}

OAIRedactionType OAIContentRedaction::getRedactionType() const {
    return m_redaction_type;
}
void OAIContentRedaction::setRedactionType(const OAIRedactionType &redaction_type) {
    m_redaction_type = redaction_type;
    m_redaction_type_isSet = true;
}

bool OAIContentRedaction::is_redaction_type_Set() const{
    return m_redaction_type_isSet;
}

bool OAIContentRedaction::is_redaction_type_Valid() const{
    return m_redaction_type_isValid;
}

OAIRedactionOutput OAIContentRedaction::getRedactionOutput() const {
    return m_redaction_output;
}
void OAIContentRedaction::setRedactionOutput(const OAIRedactionOutput &redaction_output) {
    m_redaction_output = redaction_output;
    m_redaction_output_isSet = true;
}

bool OAIContentRedaction::is_redaction_output_Set() const{
    return m_redaction_output_isSet;
}

bool OAIContentRedaction::is_redaction_output_Valid() const{
    return m_redaction_output_isValid;
}

QList OAIContentRedaction::getPiiEntityTypes() const {
    return m_pii_entity_types;
}
void OAIContentRedaction::setPiiEntityTypes(const QList &pii_entity_types) {
    m_pii_entity_types = pii_entity_types;
    m_pii_entity_types_isSet = true;
}

bool OAIContentRedaction::is_pii_entity_types_Set() const{
    return m_pii_entity_types_isSet;
}

bool OAIContentRedaction::is_pii_entity_types_Valid() const{
    return m_pii_entity_types_isValid;
}

bool OAIContentRedaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_redaction_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redaction_output.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pii_entity_types.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContentRedaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_redaction_type_isValid && m_redaction_output_isValid && true;
}

} // namespace OpenAPI
