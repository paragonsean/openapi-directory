/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetCallAnalyticsCategoryResponse_CategoryProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetCallAnalyticsCategoryResponse_CategoryProperties::OAIGetCallAnalyticsCategoryResponse_CategoryProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetCallAnalyticsCategoryResponse_CategoryProperties::OAIGetCallAnalyticsCategoryResponse_CategoryProperties() {
    this->initializeModel();
}

OAIGetCallAnalyticsCategoryResponse_CategoryProperties::~OAIGetCallAnalyticsCategoryResponse_CategoryProperties() {}

void OAIGetCallAnalyticsCategoryResponse_CategoryProperties::initializeModel() {

    m_category_name_isSet = false;
    m_category_name_isValid = false;

    m_rules_isSet = false;
    m_rules_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_last_update_time_isSet = false;
    m_last_update_time_isValid = false;

    m_input_type_isSet = false;
    m_input_type_isValid = false;
}

void OAIGetCallAnalyticsCategoryResponse_CategoryProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetCallAnalyticsCategoryResponse_CategoryProperties::fromJsonObject(QJsonObject json) {

    m_category_name_isValid = ::OpenAPI::fromJsonValue(m_category_name, json[QString("CategoryName")]);
    m_category_name_isSet = !json[QString("CategoryName")].isNull() && m_category_name_isValid;

    m_rules_isValid = ::OpenAPI::fromJsonValue(m_rules, json[QString("Rules")]);
    m_rules_isSet = !json[QString("Rules")].isNull() && m_rules_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("CreateTime")]);
    m_create_time_isSet = !json[QString("CreateTime")].isNull() && m_create_time_isValid;

    m_last_update_time_isValid = ::OpenAPI::fromJsonValue(m_last_update_time, json[QString("LastUpdateTime")]);
    m_last_update_time_isSet = !json[QString("LastUpdateTime")].isNull() && m_last_update_time_isValid;

    m_input_type_isValid = ::OpenAPI::fromJsonValue(m_input_type, json[QString("InputType")]);
    m_input_type_isSet = !json[QString("InputType")].isNull() && m_input_type_isValid;
}

QString OAIGetCallAnalyticsCategoryResponse_CategoryProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetCallAnalyticsCategoryResponse_CategoryProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_category_name_isSet) {
        obj.insert(QString("CategoryName"), ::OpenAPI::toJsonValue(m_category_name));
    }
    if (m_rules.isSet()) {
        obj.insert(QString("Rules"), ::OpenAPI::toJsonValue(m_rules));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("CreateTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_last_update_time_isSet) {
        obj.insert(QString("LastUpdateTime"), ::OpenAPI::toJsonValue(m_last_update_time));
    }
    if (m_input_type.isSet()) {
        obj.insert(QString("InputType"), ::OpenAPI::toJsonValue(m_input_type));
    }
    return obj;
}

QString OAIGetCallAnalyticsCategoryResponse_CategoryProperties::getCategoryName() const {
    return m_category_name;
}
void OAIGetCallAnalyticsCategoryResponse_CategoryProperties::setCategoryName(const QString &category_name) {
    m_category_name = category_name;
    m_category_name_isSet = true;
}

bool OAIGetCallAnalyticsCategoryResponse_CategoryProperties::is_category_name_Set() const{
    return m_category_name_isSet;
}

bool OAIGetCallAnalyticsCategoryResponse_CategoryProperties::is_category_name_Valid() const{
    return m_category_name_isValid;
}

QList OAIGetCallAnalyticsCategoryResponse_CategoryProperties::getRules() const {
    return m_rules;
}
void OAIGetCallAnalyticsCategoryResponse_CategoryProperties::setRules(const QList &rules) {
    m_rules = rules;
    m_rules_isSet = true;
}

bool OAIGetCallAnalyticsCategoryResponse_CategoryProperties::is_rules_Set() const{
    return m_rules_isSet;
}

bool OAIGetCallAnalyticsCategoryResponse_CategoryProperties::is_rules_Valid() const{
    return m_rules_isValid;
}

QDateTime OAIGetCallAnalyticsCategoryResponse_CategoryProperties::getCreateTime() const {
    return m_create_time;
}
void OAIGetCallAnalyticsCategoryResponse_CategoryProperties::setCreateTime(const QDateTime &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGetCallAnalyticsCategoryResponse_CategoryProperties::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGetCallAnalyticsCategoryResponse_CategoryProperties::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QDateTime OAIGetCallAnalyticsCategoryResponse_CategoryProperties::getLastUpdateTime() const {
    return m_last_update_time;
}
void OAIGetCallAnalyticsCategoryResponse_CategoryProperties::setLastUpdateTime(const QDateTime &last_update_time) {
    m_last_update_time = last_update_time;
    m_last_update_time_isSet = true;
}

bool OAIGetCallAnalyticsCategoryResponse_CategoryProperties::is_last_update_time_Set() const{
    return m_last_update_time_isSet;
}

bool OAIGetCallAnalyticsCategoryResponse_CategoryProperties::is_last_update_time_Valid() const{
    return m_last_update_time_isValid;
}

OAIInputType OAIGetCallAnalyticsCategoryResponse_CategoryProperties::getInputType() const {
    return m_input_type;
}
void OAIGetCallAnalyticsCategoryResponse_CategoryProperties::setInputType(const OAIInputType &input_type) {
    m_input_type = input_type;
    m_input_type_isSet = true;
}

bool OAIGetCallAnalyticsCategoryResponse_CategoryProperties::is_input_type_Set() const{
    return m_input_type_isSet;
}

bool OAIGetCallAnalyticsCategoryResponse_CategoryProperties::is_input_type_Valid() const{
    return m_input_type_isValid;
}

bool OAIGetCallAnalyticsCategoryResponse_CategoryProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetCallAnalyticsCategoryResponse_CategoryProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
