/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartMedicalTranscriptionJobRequest_Settings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartMedicalTranscriptionJobRequest_Settings::OAIStartMedicalTranscriptionJobRequest_Settings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartMedicalTranscriptionJobRequest_Settings::OAIStartMedicalTranscriptionJobRequest_Settings() {
    this->initializeModel();
}

OAIStartMedicalTranscriptionJobRequest_Settings::~OAIStartMedicalTranscriptionJobRequest_Settings() {}

void OAIStartMedicalTranscriptionJobRequest_Settings::initializeModel() {

    m_show_speaker_labels_isSet = false;
    m_show_speaker_labels_isValid = false;

    m_max_speaker_labels_isSet = false;
    m_max_speaker_labels_isValid = false;

    m_channel_identification_isSet = false;
    m_channel_identification_isValid = false;

    m_show_alternatives_isSet = false;
    m_show_alternatives_isValid = false;

    m_max_alternatives_isSet = false;
    m_max_alternatives_isValid = false;

    m_vocabulary_name_isSet = false;
    m_vocabulary_name_isValid = false;
}

void OAIStartMedicalTranscriptionJobRequest_Settings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartMedicalTranscriptionJobRequest_Settings::fromJsonObject(QJsonObject json) {

    m_show_speaker_labels_isValid = ::OpenAPI::fromJsonValue(m_show_speaker_labels, json[QString("ShowSpeakerLabels")]);
    m_show_speaker_labels_isSet = !json[QString("ShowSpeakerLabels")].isNull() && m_show_speaker_labels_isValid;

    m_max_speaker_labels_isValid = ::OpenAPI::fromJsonValue(m_max_speaker_labels, json[QString("MaxSpeakerLabels")]);
    m_max_speaker_labels_isSet = !json[QString("MaxSpeakerLabels")].isNull() && m_max_speaker_labels_isValid;

    m_channel_identification_isValid = ::OpenAPI::fromJsonValue(m_channel_identification, json[QString("ChannelIdentification")]);
    m_channel_identification_isSet = !json[QString("ChannelIdentification")].isNull() && m_channel_identification_isValid;

    m_show_alternatives_isValid = ::OpenAPI::fromJsonValue(m_show_alternatives, json[QString("ShowAlternatives")]);
    m_show_alternatives_isSet = !json[QString("ShowAlternatives")].isNull() && m_show_alternatives_isValid;

    m_max_alternatives_isValid = ::OpenAPI::fromJsonValue(m_max_alternatives, json[QString("MaxAlternatives")]);
    m_max_alternatives_isSet = !json[QString("MaxAlternatives")].isNull() && m_max_alternatives_isValid;

    m_vocabulary_name_isValid = ::OpenAPI::fromJsonValue(m_vocabulary_name, json[QString("VocabularyName")]);
    m_vocabulary_name_isSet = !json[QString("VocabularyName")].isNull() && m_vocabulary_name_isValid;
}

QString OAIStartMedicalTranscriptionJobRequest_Settings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartMedicalTranscriptionJobRequest_Settings::asJsonObject() const {
    QJsonObject obj;
    if (m_show_speaker_labels_isSet) {
        obj.insert(QString("ShowSpeakerLabels"), ::OpenAPI::toJsonValue(m_show_speaker_labels));
    }
    if (m_max_speaker_labels_isSet) {
        obj.insert(QString("MaxSpeakerLabels"), ::OpenAPI::toJsonValue(m_max_speaker_labels));
    }
    if (m_channel_identification_isSet) {
        obj.insert(QString("ChannelIdentification"), ::OpenAPI::toJsonValue(m_channel_identification));
    }
    if (m_show_alternatives_isSet) {
        obj.insert(QString("ShowAlternatives"), ::OpenAPI::toJsonValue(m_show_alternatives));
    }
    if (m_max_alternatives_isSet) {
        obj.insert(QString("MaxAlternatives"), ::OpenAPI::toJsonValue(m_max_alternatives));
    }
    if (m_vocabulary_name_isSet) {
        obj.insert(QString("VocabularyName"), ::OpenAPI::toJsonValue(m_vocabulary_name));
    }
    return obj;
}

bool OAIStartMedicalTranscriptionJobRequest_Settings::getShowSpeakerLabels() const {
    return m_show_speaker_labels;
}
void OAIStartMedicalTranscriptionJobRequest_Settings::setShowSpeakerLabels(const bool &show_speaker_labels) {
    m_show_speaker_labels = show_speaker_labels;
    m_show_speaker_labels_isSet = true;
}

bool OAIStartMedicalTranscriptionJobRequest_Settings::is_show_speaker_labels_Set() const{
    return m_show_speaker_labels_isSet;
}

bool OAIStartMedicalTranscriptionJobRequest_Settings::is_show_speaker_labels_Valid() const{
    return m_show_speaker_labels_isValid;
}

qint32 OAIStartMedicalTranscriptionJobRequest_Settings::getMaxSpeakerLabels() const {
    return m_max_speaker_labels;
}
void OAIStartMedicalTranscriptionJobRequest_Settings::setMaxSpeakerLabels(const qint32 &max_speaker_labels) {
    m_max_speaker_labels = max_speaker_labels;
    m_max_speaker_labels_isSet = true;
}

bool OAIStartMedicalTranscriptionJobRequest_Settings::is_max_speaker_labels_Set() const{
    return m_max_speaker_labels_isSet;
}

bool OAIStartMedicalTranscriptionJobRequest_Settings::is_max_speaker_labels_Valid() const{
    return m_max_speaker_labels_isValid;
}

bool OAIStartMedicalTranscriptionJobRequest_Settings::getChannelIdentification() const {
    return m_channel_identification;
}
void OAIStartMedicalTranscriptionJobRequest_Settings::setChannelIdentification(const bool &channel_identification) {
    m_channel_identification = channel_identification;
    m_channel_identification_isSet = true;
}

bool OAIStartMedicalTranscriptionJobRequest_Settings::is_channel_identification_Set() const{
    return m_channel_identification_isSet;
}

bool OAIStartMedicalTranscriptionJobRequest_Settings::is_channel_identification_Valid() const{
    return m_channel_identification_isValid;
}

bool OAIStartMedicalTranscriptionJobRequest_Settings::getShowAlternatives() const {
    return m_show_alternatives;
}
void OAIStartMedicalTranscriptionJobRequest_Settings::setShowAlternatives(const bool &show_alternatives) {
    m_show_alternatives = show_alternatives;
    m_show_alternatives_isSet = true;
}

bool OAIStartMedicalTranscriptionJobRequest_Settings::is_show_alternatives_Set() const{
    return m_show_alternatives_isSet;
}

bool OAIStartMedicalTranscriptionJobRequest_Settings::is_show_alternatives_Valid() const{
    return m_show_alternatives_isValid;
}

qint32 OAIStartMedicalTranscriptionJobRequest_Settings::getMaxAlternatives() const {
    return m_max_alternatives;
}
void OAIStartMedicalTranscriptionJobRequest_Settings::setMaxAlternatives(const qint32 &max_alternatives) {
    m_max_alternatives = max_alternatives;
    m_max_alternatives_isSet = true;
}

bool OAIStartMedicalTranscriptionJobRequest_Settings::is_max_alternatives_Set() const{
    return m_max_alternatives_isSet;
}

bool OAIStartMedicalTranscriptionJobRequest_Settings::is_max_alternatives_Valid() const{
    return m_max_alternatives_isValid;
}

QString OAIStartMedicalTranscriptionJobRequest_Settings::getVocabularyName() const {
    return m_vocabulary_name;
}
void OAIStartMedicalTranscriptionJobRequest_Settings::setVocabularyName(const QString &vocabulary_name) {
    m_vocabulary_name = vocabulary_name;
    m_vocabulary_name_isSet = true;
}

bool OAIStartMedicalTranscriptionJobRequest_Settings::is_vocabulary_name_Set() const{
    return m_vocabulary_name_isSet;
}

bool OAIStartMedicalTranscriptionJobRequest_Settings::is_vocabulary_name_Valid() const{
    return m_vocabulary_name_isValid;
}

bool OAIStartMedicalTranscriptionJobRequest_Settings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_show_speaker_labels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_speaker_labels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_identification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_alternatives_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_alternatives_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vocabulary_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartMedicalTranscriptionJobRequest_Settings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
