/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateVocabularyFilterRequest.h
 *
 * 
 */

#ifndef OAICreateVocabularyFilterRequest_H
#define OAICreateVocabularyFilterRequest_H

#include <QJsonObject>

#include "OAILanguageCode.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateVocabularyFilterRequest : public OAIObject {
public:
    OAICreateVocabularyFilterRequest();
    OAICreateVocabularyFilterRequest(QString json);
    ~OAICreateVocabularyFilterRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getVocabularyFilterName() const;
    void setVocabularyFilterName(const QString &vocabulary_filter_name);
    bool is_vocabulary_filter_name_Set() const;
    bool is_vocabulary_filter_name_Valid() const;

    OAILanguageCode getLanguageCode() const;
    void setLanguageCode(const OAILanguageCode &language_code);
    bool is_language_code_Set() const;
    bool is_language_code_Valid() const;

    QList getWords() const;
    void setWords(const QList &words);
    bool is_words_Set() const;
    bool is_words_Valid() const;

    QString getVocabularyFilterFileUri() const;
    void setVocabularyFilterFileUri(const QString &vocabulary_filter_file_uri);
    bool is_vocabulary_filter_file_uri_Set() const;
    bool is_vocabulary_filter_file_uri_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getDataAccessRoleArn() const;
    void setDataAccessRoleArn(const QString &data_access_role_arn);
    bool is_data_access_role_arn_Set() const;
    bool is_data_access_role_arn_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_vocabulary_filter_name;
    bool m_vocabulary_filter_name_isSet;
    bool m_vocabulary_filter_name_isValid;

    OAILanguageCode m_language_code;
    bool m_language_code_isSet;
    bool m_language_code_isValid;

    QList m_words;
    bool m_words_isSet;
    bool m_words_isValid;

    QString m_vocabulary_filter_file_uri;
    bool m_vocabulary_filter_file_uri_isSet;
    bool m_vocabulary_filter_file_uri_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_data_access_role_arn;
    bool m_data_access_role_arn_isSet;
    bool m_data_access_role_arn_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateVocabularyFilterRequest)

#endif // OAICreateVocabularyFilterRequest_H
