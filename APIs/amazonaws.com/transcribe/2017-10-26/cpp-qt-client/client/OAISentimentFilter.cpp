/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISentimentFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISentimentFilter::OAISentimentFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISentimentFilter::OAISentimentFilter() {
    this->initializeModel();
}

OAISentimentFilter::~OAISentimentFilter() {}

void OAISentimentFilter::initializeModel() {

    m_sentiments_isSet = false;
    m_sentiments_isValid = false;

    m_absolute_time_range_isSet = false;
    m_absolute_time_range_isValid = false;

    m_relative_time_range_isSet = false;
    m_relative_time_range_isValid = false;

    m_participant_role_isSet = false;
    m_participant_role_isValid = false;

    m_negate_isSet = false;
    m_negate_isValid = false;
}

void OAISentimentFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISentimentFilter::fromJsonObject(QJsonObject json) {

    m_sentiments_isValid = ::OpenAPI::fromJsonValue(m_sentiments, json[QString("Sentiments")]);
    m_sentiments_isSet = !json[QString("Sentiments")].isNull() && m_sentiments_isValid;

    m_absolute_time_range_isValid = ::OpenAPI::fromJsonValue(m_absolute_time_range, json[QString("AbsoluteTimeRange")]);
    m_absolute_time_range_isSet = !json[QString("AbsoluteTimeRange")].isNull() && m_absolute_time_range_isValid;

    m_relative_time_range_isValid = ::OpenAPI::fromJsonValue(m_relative_time_range, json[QString("RelativeTimeRange")]);
    m_relative_time_range_isSet = !json[QString("RelativeTimeRange")].isNull() && m_relative_time_range_isValid;

    m_participant_role_isValid = ::OpenAPI::fromJsonValue(m_participant_role, json[QString("ParticipantRole")]);
    m_participant_role_isSet = !json[QString("ParticipantRole")].isNull() && m_participant_role_isValid;

    m_negate_isValid = ::OpenAPI::fromJsonValue(m_negate, json[QString("Negate")]);
    m_negate_isSet = !json[QString("Negate")].isNull() && m_negate_isValid;
}

QString OAISentimentFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISentimentFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_sentiments.isSet()) {
        obj.insert(QString("Sentiments"), ::OpenAPI::toJsonValue(m_sentiments));
    }
    if (m_absolute_time_range.isSet()) {
        obj.insert(QString("AbsoluteTimeRange"), ::OpenAPI::toJsonValue(m_absolute_time_range));
    }
    if (m_relative_time_range.isSet()) {
        obj.insert(QString("RelativeTimeRange"), ::OpenAPI::toJsonValue(m_relative_time_range));
    }
    if (m_participant_role.isSet()) {
        obj.insert(QString("ParticipantRole"), ::OpenAPI::toJsonValue(m_participant_role));
    }
    if (m_negate_isSet) {
        obj.insert(QString("Negate"), ::OpenAPI::toJsonValue(m_negate));
    }
    return obj;
}

QList OAISentimentFilter::getSentiments() const {
    return m_sentiments;
}
void OAISentimentFilter::setSentiments(const QList &sentiments) {
    m_sentiments = sentiments;
    m_sentiments_isSet = true;
}

bool OAISentimentFilter::is_sentiments_Set() const{
    return m_sentiments_isSet;
}

bool OAISentimentFilter::is_sentiments_Valid() const{
    return m_sentiments_isValid;
}

OAISentimentFilter_AbsoluteTimeRange OAISentimentFilter::getAbsoluteTimeRange() const {
    return m_absolute_time_range;
}
void OAISentimentFilter::setAbsoluteTimeRange(const OAISentimentFilter_AbsoluteTimeRange &absolute_time_range) {
    m_absolute_time_range = absolute_time_range;
    m_absolute_time_range_isSet = true;
}

bool OAISentimentFilter::is_absolute_time_range_Set() const{
    return m_absolute_time_range_isSet;
}

bool OAISentimentFilter::is_absolute_time_range_Valid() const{
    return m_absolute_time_range_isValid;
}

OAISentimentFilter_RelativeTimeRange OAISentimentFilter::getRelativeTimeRange() const {
    return m_relative_time_range;
}
void OAISentimentFilter::setRelativeTimeRange(const OAISentimentFilter_RelativeTimeRange &relative_time_range) {
    m_relative_time_range = relative_time_range;
    m_relative_time_range_isSet = true;
}

bool OAISentimentFilter::is_relative_time_range_Set() const{
    return m_relative_time_range_isSet;
}

bool OAISentimentFilter::is_relative_time_range_Valid() const{
    return m_relative_time_range_isValid;
}

OAIParticipantRole OAISentimentFilter::getParticipantRole() const {
    return m_participant_role;
}
void OAISentimentFilter::setParticipantRole(const OAIParticipantRole &participant_role) {
    m_participant_role = participant_role;
    m_participant_role_isSet = true;
}

bool OAISentimentFilter::is_participant_role_Set() const{
    return m_participant_role_isSet;
}

bool OAISentimentFilter::is_participant_role_Valid() const{
    return m_participant_role_isValid;
}

bool OAISentimentFilter::getNegate() const {
    return m_negate;
}
void OAISentimentFilter::setNegate(const bool &negate) {
    m_negate = negate;
    m_negate_isSet = true;
}

bool OAISentimentFilter::is_negate_Set() const{
    return m_negate_isSet;
}

bool OAISentimentFilter::is_negate_Valid() const{
    return m_negate_isValid;
}

bool OAISentimentFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sentiments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_absolute_time_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_time_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_participant_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_negate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISentimentFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sentiments_isValid && true;
}

} // namespace OpenAPI
