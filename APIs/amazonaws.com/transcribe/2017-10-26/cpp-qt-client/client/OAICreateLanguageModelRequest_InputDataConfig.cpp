/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateLanguageModelRequest_InputDataConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateLanguageModelRequest_InputDataConfig::OAICreateLanguageModelRequest_InputDataConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateLanguageModelRequest_InputDataConfig::OAICreateLanguageModelRequest_InputDataConfig() {
    this->initializeModel();
}

OAICreateLanguageModelRequest_InputDataConfig::~OAICreateLanguageModelRequest_InputDataConfig() {}

void OAICreateLanguageModelRequest_InputDataConfig::initializeModel() {

    m_s3_uri_isSet = false;
    m_s3_uri_isValid = false;

    m_tuning_data_s3_uri_isSet = false;
    m_tuning_data_s3_uri_isValid = false;

    m_data_access_role_arn_isSet = false;
    m_data_access_role_arn_isValid = false;
}

void OAICreateLanguageModelRequest_InputDataConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateLanguageModelRequest_InputDataConfig::fromJsonObject(QJsonObject json) {

    m_s3_uri_isValid = ::OpenAPI::fromJsonValue(m_s3_uri, json[QString("S3Uri")]);
    m_s3_uri_isSet = !json[QString("S3Uri")].isNull() && m_s3_uri_isValid;

    m_tuning_data_s3_uri_isValid = ::OpenAPI::fromJsonValue(m_tuning_data_s3_uri, json[QString("TuningDataS3Uri")]);
    m_tuning_data_s3_uri_isSet = !json[QString("TuningDataS3Uri")].isNull() && m_tuning_data_s3_uri_isValid;

    m_data_access_role_arn_isValid = ::OpenAPI::fromJsonValue(m_data_access_role_arn, json[QString("DataAccessRoleArn")]);
    m_data_access_role_arn_isSet = !json[QString("DataAccessRoleArn")].isNull() && m_data_access_role_arn_isValid;
}

QString OAICreateLanguageModelRequest_InputDataConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateLanguageModelRequest_InputDataConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_s3_uri_isSet) {
        obj.insert(QString("S3Uri"), ::OpenAPI::toJsonValue(m_s3_uri));
    }
    if (m_tuning_data_s3_uri_isSet) {
        obj.insert(QString("TuningDataS3Uri"), ::OpenAPI::toJsonValue(m_tuning_data_s3_uri));
    }
    if (m_data_access_role_arn_isSet) {
        obj.insert(QString("DataAccessRoleArn"), ::OpenAPI::toJsonValue(m_data_access_role_arn));
    }
    return obj;
}

QString OAICreateLanguageModelRequest_InputDataConfig::getS3Uri() const {
    return m_s3_uri;
}
void OAICreateLanguageModelRequest_InputDataConfig::setS3Uri(const QString &s3_uri) {
    m_s3_uri = s3_uri;
    m_s3_uri_isSet = true;
}

bool OAICreateLanguageModelRequest_InputDataConfig::is_s3_uri_Set() const{
    return m_s3_uri_isSet;
}

bool OAICreateLanguageModelRequest_InputDataConfig::is_s3_uri_Valid() const{
    return m_s3_uri_isValid;
}

QString OAICreateLanguageModelRequest_InputDataConfig::getTuningDataS3Uri() const {
    return m_tuning_data_s3_uri;
}
void OAICreateLanguageModelRequest_InputDataConfig::setTuningDataS3Uri(const QString &tuning_data_s3_uri) {
    m_tuning_data_s3_uri = tuning_data_s3_uri;
    m_tuning_data_s3_uri_isSet = true;
}

bool OAICreateLanguageModelRequest_InputDataConfig::is_tuning_data_s3_uri_Set() const{
    return m_tuning_data_s3_uri_isSet;
}

bool OAICreateLanguageModelRequest_InputDataConfig::is_tuning_data_s3_uri_Valid() const{
    return m_tuning_data_s3_uri_isValid;
}

QString OAICreateLanguageModelRequest_InputDataConfig::getDataAccessRoleArn() const {
    return m_data_access_role_arn;
}
void OAICreateLanguageModelRequest_InputDataConfig::setDataAccessRoleArn(const QString &data_access_role_arn) {
    m_data_access_role_arn = data_access_role_arn;
    m_data_access_role_arn_isSet = true;
}

bool OAICreateLanguageModelRequest_InputDataConfig::is_data_access_role_arn_Set() const{
    return m_data_access_role_arn_isSet;
}

bool OAICreateLanguageModelRequest_InputDataConfig::is_data_access_role_arn_Valid() const{
    return m_data_access_role_arn_isValid;
}

bool OAICreateLanguageModelRequest_InputDataConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tuning_data_s3_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_access_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateLanguageModelRequest_InputDataConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_s3_uri_isValid && m_data_access_role_arn_isValid && true;
}

} // namespace OpenAPI
