/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITranscriptionJobSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITranscriptionJobSummary::OAITranscriptionJobSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITranscriptionJobSummary::OAITranscriptionJobSummary() {
    this->initializeModel();
}

OAITranscriptionJobSummary::~OAITranscriptionJobSummary() {}

void OAITranscriptionJobSummary::initializeModel() {

    m_transcription_job_name_isSet = false;
    m_transcription_job_name_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_completion_time_isSet = false;
    m_completion_time_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_transcription_job_status_isSet = false;
    m_transcription_job_status_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_output_location_type_isSet = false;
    m_output_location_type_isValid = false;

    m_content_redaction_isSet = false;
    m_content_redaction_isValid = false;

    m_model_settings_isSet = false;
    m_model_settings_isValid = false;

    m_identify_language_isSet = false;
    m_identify_language_isValid = false;

    m_identify_multiple_languages_isSet = false;
    m_identify_multiple_languages_isValid = false;

    m_identified_language_score_isSet = false;
    m_identified_language_score_isValid = false;

    m_language_codes_isSet = false;
    m_language_codes_isValid = false;

    m_toxicity_detection_isSet = false;
    m_toxicity_detection_isValid = false;
}

void OAITranscriptionJobSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITranscriptionJobSummary::fromJsonObject(QJsonObject json) {

    m_transcription_job_name_isValid = ::OpenAPI::fromJsonValue(m_transcription_job_name, json[QString("TranscriptionJobName")]);
    m_transcription_job_name_isSet = !json[QString("TranscriptionJobName")].isNull() && m_transcription_job_name_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_completion_time_isValid = ::OpenAPI::fromJsonValue(m_completion_time, json[QString("CompletionTime")]);
    m_completion_time_isSet = !json[QString("CompletionTime")].isNull() && m_completion_time_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("LanguageCode")]);
    m_language_code_isSet = !json[QString("LanguageCode")].isNull() && m_language_code_isValid;

    m_transcription_job_status_isValid = ::OpenAPI::fromJsonValue(m_transcription_job_status, json[QString("TranscriptionJobStatus")]);
    m_transcription_job_status_isSet = !json[QString("TranscriptionJobStatus")].isNull() && m_transcription_job_status_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("FailureReason")]);
    m_failure_reason_isSet = !json[QString("FailureReason")].isNull() && m_failure_reason_isValid;

    m_output_location_type_isValid = ::OpenAPI::fromJsonValue(m_output_location_type, json[QString("OutputLocationType")]);
    m_output_location_type_isSet = !json[QString("OutputLocationType")].isNull() && m_output_location_type_isValid;

    m_content_redaction_isValid = ::OpenAPI::fromJsonValue(m_content_redaction, json[QString("ContentRedaction")]);
    m_content_redaction_isSet = !json[QString("ContentRedaction")].isNull() && m_content_redaction_isValid;

    m_model_settings_isValid = ::OpenAPI::fromJsonValue(m_model_settings, json[QString("ModelSettings")]);
    m_model_settings_isSet = !json[QString("ModelSettings")].isNull() && m_model_settings_isValid;

    m_identify_language_isValid = ::OpenAPI::fromJsonValue(m_identify_language, json[QString("IdentifyLanguage")]);
    m_identify_language_isSet = !json[QString("IdentifyLanguage")].isNull() && m_identify_language_isValid;

    m_identify_multiple_languages_isValid = ::OpenAPI::fromJsonValue(m_identify_multiple_languages, json[QString("IdentifyMultipleLanguages")]);
    m_identify_multiple_languages_isSet = !json[QString("IdentifyMultipleLanguages")].isNull() && m_identify_multiple_languages_isValid;

    m_identified_language_score_isValid = ::OpenAPI::fromJsonValue(m_identified_language_score, json[QString("IdentifiedLanguageScore")]);
    m_identified_language_score_isSet = !json[QString("IdentifiedLanguageScore")].isNull() && m_identified_language_score_isValid;

    m_language_codes_isValid = ::OpenAPI::fromJsonValue(m_language_codes, json[QString("LanguageCodes")]);
    m_language_codes_isSet = !json[QString("LanguageCodes")].isNull() && m_language_codes_isValid;

    m_toxicity_detection_isValid = ::OpenAPI::fromJsonValue(m_toxicity_detection, json[QString("ToxicityDetection")]);
    m_toxicity_detection_isSet = !json[QString("ToxicityDetection")].isNull() && m_toxicity_detection_isValid;
}

QString OAITranscriptionJobSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITranscriptionJobSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_transcription_job_name_isSet) {
        obj.insert(QString("TranscriptionJobName"), ::OpenAPI::toJsonValue(m_transcription_job_name));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_completion_time_isSet) {
        obj.insert(QString("CompletionTime"), ::OpenAPI::toJsonValue(m_completion_time));
    }
    if (m_language_code.isSet()) {
        obj.insert(QString("LanguageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_transcription_job_status.isSet()) {
        obj.insert(QString("TranscriptionJobStatus"), ::OpenAPI::toJsonValue(m_transcription_job_status));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("FailureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_output_location_type.isSet()) {
        obj.insert(QString("OutputLocationType"), ::OpenAPI::toJsonValue(m_output_location_type));
    }
    if (m_content_redaction.isSet()) {
        obj.insert(QString("ContentRedaction"), ::OpenAPI::toJsonValue(m_content_redaction));
    }
    if (m_model_settings.isSet()) {
        obj.insert(QString("ModelSettings"), ::OpenAPI::toJsonValue(m_model_settings));
    }
    if (m_identify_language_isSet) {
        obj.insert(QString("IdentifyLanguage"), ::OpenAPI::toJsonValue(m_identify_language));
    }
    if (m_identify_multiple_languages_isSet) {
        obj.insert(QString("IdentifyMultipleLanguages"), ::OpenAPI::toJsonValue(m_identify_multiple_languages));
    }
    if (m_identified_language_score_isSet) {
        obj.insert(QString("IdentifiedLanguageScore"), ::OpenAPI::toJsonValue(m_identified_language_score));
    }
    if (m_language_codes.isSet()) {
        obj.insert(QString("LanguageCodes"), ::OpenAPI::toJsonValue(m_language_codes));
    }
    if (m_toxicity_detection.isSet()) {
        obj.insert(QString("ToxicityDetection"), ::OpenAPI::toJsonValue(m_toxicity_detection));
    }
    return obj;
}

QString OAITranscriptionJobSummary::getTranscriptionJobName() const {
    return m_transcription_job_name;
}
void OAITranscriptionJobSummary::setTranscriptionJobName(const QString &transcription_job_name) {
    m_transcription_job_name = transcription_job_name;
    m_transcription_job_name_isSet = true;
}

bool OAITranscriptionJobSummary::is_transcription_job_name_Set() const{
    return m_transcription_job_name_isSet;
}

bool OAITranscriptionJobSummary::is_transcription_job_name_Valid() const{
    return m_transcription_job_name_isValid;
}

QDateTime OAITranscriptionJobSummary::getCreationTime() const {
    return m_creation_time;
}
void OAITranscriptionJobSummary::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAITranscriptionJobSummary::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAITranscriptionJobSummary::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAITranscriptionJobSummary::getStartTime() const {
    return m_start_time;
}
void OAITranscriptionJobSummary::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAITranscriptionJobSummary::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAITranscriptionJobSummary::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAITranscriptionJobSummary::getCompletionTime() const {
    return m_completion_time;
}
void OAITranscriptionJobSummary::setCompletionTime(const QDateTime &completion_time) {
    m_completion_time = completion_time;
    m_completion_time_isSet = true;
}

bool OAITranscriptionJobSummary::is_completion_time_Set() const{
    return m_completion_time_isSet;
}

bool OAITranscriptionJobSummary::is_completion_time_Valid() const{
    return m_completion_time_isValid;
}

OAILanguageCode OAITranscriptionJobSummary::getLanguageCode() const {
    return m_language_code;
}
void OAITranscriptionJobSummary::setLanguageCode(const OAILanguageCode &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAITranscriptionJobSummary::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAITranscriptionJobSummary::is_language_code_Valid() const{
    return m_language_code_isValid;
}

OAITranscriptionJobStatus OAITranscriptionJobSummary::getTranscriptionJobStatus() const {
    return m_transcription_job_status;
}
void OAITranscriptionJobSummary::setTranscriptionJobStatus(const OAITranscriptionJobStatus &transcription_job_status) {
    m_transcription_job_status = transcription_job_status;
    m_transcription_job_status_isSet = true;
}

bool OAITranscriptionJobSummary::is_transcription_job_status_Set() const{
    return m_transcription_job_status_isSet;
}

bool OAITranscriptionJobSummary::is_transcription_job_status_Valid() const{
    return m_transcription_job_status_isValid;
}

QString OAITranscriptionJobSummary::getFailureReason() const {
    return m_failure_reason;
}
void OAITranscriptionJobSummary::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAITranscriptionJobSummary::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAITranscriptionJobSummary::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

OAIOutputLocationType OAITranscriptionJobSummary::getOutputLocationType() const {
    return m_output_location_type;
}
void OAITranscriptionJobSummary::setOutputLocationType(const OAIOutputLocationType &output_location_type) {
    m_output_location_type = output_location_type;
    m_output_location_type_isSet = true;
}

bool OAITranscriptionJobSummary::is_output_location_type_Set() const{
    return m_output_location_type_isSet;
}

bool OAITranscriptionJobSummary::is_output_location_type_Valid() const{
    return m_output_location_type_isValid;
}

OAITranscriptionJobSummary_ContentRedaction OAITranscriptionJobSummary::getContentRedaction() const {
    return m_content_redaction;
}
void OAITranscriptionJobSummary::setContentRedaction(const OAITranscriptionJobSummary_ContentRedaction &content_redaction) {
    m_content_redaction = content_redaction;
    m_content_redaction_isSet = true;
}

bool OAITranscriptionJobSummary::is_content_redaction_Set() const{
    return m_content_redaction_isSet;
}

bool OAITranscriptionJobSummary::is_content_redaction_Valid() const{
    return m_content_redaction_isValid;
}

OAIModelSettings OAITranscriptionJobSummary::getModelSettings() const {
    return m_model_settings;
}
void OAITranscriptionJobSummary::setModelSettings(const OAIModelSettings &model_settings) {
    m_model_settings = model_settings;
    m_model_settings_isSet = true;
}

bool OAITranscriptionJobSummary::is_model_settings_Set() const{
    return m_model_settings_isSet;
}

bool OAITranscriptionJobSummary::is_model_settings_Valid() const{
    return m_model_settings_isValid;
}

bool OAITranscriptionJobSummary::getIdentifyLanguage() const {
    return m_identify_language;
}
void OAITranscriptionJobSummary::setIdentifyLanguage(const bool &identify_language) {
    m_identify_language = identify_language;
    m_identify_language_isSet = true;
}

bool OAITranscriptionJobSummary::is_identify_language_Set() const{
    return m_identify_language_isSet;
}

bool OAITranscriptionJobSummary::is_identify_language_Valid() const{
    return m_identify_language_isValid;
}

bool OAITranscriptionJobSummary::getIdentifyMultipleLanguages() const {
    return m_identify_multiple_languages;
}
void OAITranscriptionJobSummary::setIdentifyMultipleLanguages(const bool &identify_multiple_languages) {
    m_identify_multiple_languages = identify_multiple_languages;
    m_identify_multiple_languages_isSet = true;
}

bool OAITranscriptionJobSummary::is_identify_multiple_languages_Set() const{
    return m_identify_multiple_languages_isSet;
}

bool OAITranscriptionJobSummary::is_identify_multiple_languages_Valid() const{
    return m_identify_multiple_languages_isValid;
}

float OAITranscriptionJobSummary::getIdentifiedLanguageScore() const {
    return m_identified_language_score;
}
void OAITranscriptionJobSummary::setIdentifiedLanguageScore(const float &identified_language_score) {
    m_identified_language_score = identified_language_score;
    m_identified_language_score_isSet = true;
}

bool OAITranscriptionJobSummary::is_identified_language_score_Set() const{
    return m_identified_language_score_isSet;
}

bool OAITranscriptionJobSummary::is_identified_language_score_Valid() const{
    return m_identified_language_score_isValid;
}

QList OAITranscriptionJobSummary::getLanguageCodes() const {
    return m_language_codes;
}
void OAITranscriptionJobSummary::setLanguageCodes(const QList &language_codes) {
    m_language_codes = language_codes;
    m_language_codes_isSet = true;
}

bool OAITranscriptionJobSummary::is_language_codes_Set() const{
    return m_language_codes_isSet;
}

bool OAITranscriptionJobSummary::is_language_codes_Valid() const{
    return m_language_codes_isValid;
}

QList OAITranscriptionJobSummary::getToxicityDetection() const {
    return m_toxicity_detection;
}
void OAITranscriptionJobSummary::setToxicityDetection(const QList &toxicity_detection) {
    m_toxicity_detection = toxicity_detection;
    m_toxicity_detection_isSet = true;
}

bool OAITranscriptionJobSummary::is_toxicity_detection_Set() const{
    return m_toxicity_detection_isSet;
}

bool OAITranscriptionJobSummary::is_toxicity_detection_Valid() const{
    return m_toxicity_detection_isValid;
}

bool OAITranscriptionJobSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_transcription_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transcription_job_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_location_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_redaction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identify_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identify_multiple_languages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identified_language_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_codes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_toxicity_detection.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITranscriptionJobSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
