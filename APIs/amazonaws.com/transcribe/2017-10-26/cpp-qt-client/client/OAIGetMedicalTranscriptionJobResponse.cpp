/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetMedicalTranscriptionJobResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetMedicalTranscriptionJobResponse::OAIGetMedicalTranscriptionJobResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetMedicalTranscriptionJobResponse::OAIGetMedicalTranscriptionJobResponse() {
    this->initializeModel();
}

OAIGetMedicalTranscriptionJobResponse::~OAIGetMedicalTranscriptionJobResponse() {}

void OAIGetMedicalTranscriptionJobResponse::initializeModel() {

    m_medical_transcription_job_isSet = false;
    m_medical_transcription_job_isValid = false;
}

void OAIGetMedicalTranscriptionJobResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetMedicalTranscriptionJobResponse::fromJsonObject(QJsonObject json) {

    m_medical_transcription_job_isValid = ::OpenAPI::fromJsonValue(m_medical_transcription_job, json[QString("MedicalTranscriptionJob")]);
    m_medical_transcription_job_isSet = !json[QString("MedicalTranscriptionJob")].isNull() && m_medical_transcription_job_isValid;
}

QString OAIGetMedicalTranscriptionJobResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetMedicalTranscriptionJobResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_medical_transcription_job.isSet()) {
        obj.insert(QString("MedicalTranscriptionJob"), ::OpenAPI::toJsonValue(m_medical_transcription_job));
    }
    return obj;
}

OAIGetMedicalTranscriptionJobResponse_MedicalTranscriptionJob OAIGetMedicalTranscriptionJobResponse::getMedicalTranscriptionJob() const {
    return m_medical_transcription_job;
}
void OAIGetMedicalTranscriptionJobResponse::setMedicalTranscriptionJob(const OAIGetMedicalTranscriptionJobResponse_MedicalTranscriptionJob &medical_transcription_job) {
    m_medical_transcription_job = medical_transcription_job;
    m_medical_transcription_job_isSet = true;
}

bool OAIGetMedicalTranscriptionJobResponse::is_medical_transcription_job_Set() const{
    return m_medical_transcription_job_isSet;
}

bool OAIGetMedicalTranscriptionJobResponse::is_medical_transcription_job_Valid() const{
    return m_medical_transcription_job_isValid;
}

bool OAIGetMedicalTranscriptionJobResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_medical_transcription_job.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetMedicalTranscriptionJobResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
