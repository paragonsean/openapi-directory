/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStartCallAnalyticsJobRequest.h
 *
 * 
 */

#ifndef OAIStartCallAnalyticsJobRequest_H
#define OAIStartCallAnalyticsJobRequest_H

#include <QJsonObject>

#include "OAIStartCallAnalyticsJobRequest_Media.h"
#include "OAIStartCallAnalyticsJobRequest_Settings.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIStartCallAnalyticsJobRequest_Media;
class OAIStartCallAnalyticsJobRequest_Settings;

class OAIStartCallAnalyticsJobRequest : public OAIObject {
public:
    OAIStartCallAnalyticsJobRequest();
    OAIStartCallAnalyticsJobRequest(QString json);
    ~OAIStartCallAnalyticsJobRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCallAnalyticsJobName() const;
    void setCallAnalyticsJobName(const QString &call_analytics_job_name);
    bool is_call_analytics_job_name_Set() const;
    bool is_call_analytics_job_name_Valid() const;

    OAIStartCallAnalyticsJobRequest_Media getMedia() const;
    void setMedia(const OAIStartCallAnalyticsJobRequest_Media &media);
    bool is_media_Set() const;
    bool is_media_Valid() const;

    QString getOutputLocation() const;
    void setOutputLocation(const QString &output_location);
    bool is_output_location_Set() const;
    bool is_output_location_Valid() const;

    QString getOutputEncryptionKmsKeyId() const;
    void setOutputEncryptionKmsKeyId(const QString &output_encryption_kms_key_id);
    bool is_output_encryption_kms_key_id_Set() const;
    bool is_output_encryption_kms_key_id_Valid() const;

    QString getDataAccessRoleArn() const;
    void setDataAccessRoleArn(const QString &data_access_role_arn);
    bool is_data_access_role_arn_Set() const;
    bool is_data_access_role_arn_Valid() const;

    OAIStartCallAnalyticsJobRequest_Settings getSettings() const;
    void setSettings(const OAIStartCallAnalyticsJobRequest_Settings &settings);
    bool is_settings_Set() const;
    bool is_settings_Valid() const;

    QList getChannelDefinitions() const;
    void setChannelDefinitions(const QList &channel_definitions);
    bool is_channel_definitions_Set() const;
    bool is_channel_definitions_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_call_analytics_job_name;
    bool m_call_analytics_job_name_isSet;
    bool m_call_analytics_job_name_isValid;

    OAIStartCallAnalyticsJobRequest_Media m_media;
    bool m_media_isSet;
    bool m_media_isValid;

    QString m_output_location;
    bool m_output_location_isSet;
    bool m_output_location_isValid;

    QString m_output_encryption_kms_key_id;
    bool m_output_encryption_kms_key_id_isSet;
    bool m_output_encryption_kms_key_id_isValid;

    QString m_data_access_role_arn;
    bool m_data_access_role_arn_isSet;
    bool m_data_access_role_arn_isValid;

    OAIStartCallAnalyticsJobRequest_Settings m_settings;
    bool m_settings_isSet;
    bool m_settings_isValid;

    QList m_channel_definitions;
    bool m_channel_definitions_isSet;
    bool m_channel_definitions_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStartCallAnalyticsJobRequest)

#endif // OAIStartCallAnalyticsJobRequest_H
