/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListTranscriptionJobsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListTranscriptionJobsResponse::OAIListTranscriptionJobsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListTranscriptionJobsResponse::OAIListTranscriptionJobsResponse() {
    this->initializeModel();
}

OAIListTranscriptionJobsResponse::~OAIListTranscriptionJobsResponse() {}

void OAIListTranscriptionJobsResponse::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_transcription_job_summaries_isSet = false;
    m_transcription_job_summaries_isValid = false;
}

void OAIListTranscriptionJobsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListTranscriptionJobsResponse::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_transcription_job_summaries_isValid = ::OpenAPI::fromJsonValue(m_transcription_job_summaries, json[QString("TranscriptionJobSummaries")]);
    m_transcription_job_summaries_isSet = !json[QString("TranscriptionJobSummaries")].isNull() && m_transcription_job_summaries_isValid;
}

QString OAIListTranscriptionJobsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListTranscriptionJobsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_transcription_job_summaries.isSet()) {
        obj.insert(QString("TranscriptionJobSummaries"), ::OpenAPI::toJsonValue(m_transcription_job_summaries));
    }
    return obj;
}

OAITranscriptionJobStatus OAIListTranscriptionJobsResponse::getStatus() const {
    return m_status;
}
void OAIListTranscriptionJobsResponse::setStatus(const OAITranscriptionJobStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIListTranscriptionJobsResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIListTranscriptionJobsResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIListTranscriptionJobsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListTranscriptionJobsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListTranscriptionJobsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListTranscriptionJobsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIListTranscriptionJobsResponse::getTranscriptionJobSummaries() const {
    return m_transcription_job_summaries;
}
void OAIListTranscriptionJobsResponse::setTranscriptionJobSummaries(const QList &transcription_job_summaries) {
    m_transcription_job_summaries = transcription_job_summaries;
    m_transcription_job_summaries_isSet = true;
}

bool OAIListTranscriptionJobsResponse::is_transcription_job_summaries_Set() const{
    return m_transcription_job_summaries_isSet;
}

bool OAIListTranscriptionJobsResponse::is_transcription_job_summaries_Valid() const{
    return m_transcription_job_summaries_isValid;
}

bool OAIListTranscriptionJobsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transcription_job_summaries.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListTranscriptionJobsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
