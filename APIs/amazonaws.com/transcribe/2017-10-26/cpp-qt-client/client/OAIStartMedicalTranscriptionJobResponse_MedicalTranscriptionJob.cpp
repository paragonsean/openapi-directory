/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob() {
    this->initializeModel();
}

OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::~OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob() {}

void OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::initializeModel() {

    m_medical_transcription_job_name_isSet = false;
    m_medical_transcription_job_name_isValid = false;

    m_transcription_job_status_isSet = false;
    m_transcription_job_status_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_media_sample_rate_hertz_isSet = false;
    m_media_sample_rate_hertz_isValid = false;

    m_media_format_isSet = false;
    m_media_format_isValid = false;

    m_media_isSet = false;
    m_media_isValid = false;

    m_transcript_isSet = false;
    m_transcript_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_completion_time_isSet = false;
    m_completion_time_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_content_identification_type_isSet = false;
    m_content_identification_type_isValid = false;

    m_specialty_isSet = false;
    m_specialty_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::fromJsonObject(QJsonObject json) {

    m_medical_transcription_job_name_isValid = ::OpenAPI::fromJsonValue(m_medical_transcription_job_name, json[QString("MedicalTranscriptionJobName")]);
    m_medical_transcription_job_name_isSet = !json[QString("MedicalTranscriptionJobName")].isNull() && m_medical_transcription_job_name_isValid;

    m_transcription_job_status_isValid = ::OpenAPI::fromJsonValue(m_transcription_job_status, json[QString("TranscriptionJobStatus")]);
    m_transcription_job_status_isSet = !json[QString("TranscriptionJobStatus")].isNull() && m_transcription_job_status_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("LanguageCode")]);
    m_language_code_isSet = !json[QString("LanguageCode")].isNull() && m_language_code_isValid;

    m_media_sample_rate_hertz_isValid = ::OpenAPI::fromJsonValue(m_media_sample_rate_hertz, json[QString("MediaSampleRateHertz")]);
    m_media_sample_rate_hertz_isSet = !json[QString("MediaSampleRateHertz")].isNull() && m_media_sample_rate_hertz_isValid;

    m_media_format_isValid = ::OpenAPI::fromJsonValue(m_media_format, json[QString("MediaFormat")]);
    m_media_format_isSet = !json[QString("MediaFormat")].isNull() && m_media_format_isValid;

    m_media_isValid = ::OpenAPI::fromJsonValue(m_media, json[QString("Media")]);
    m_media_isSet = !json[QString("Media")].isNull() && m_media_isValid;

    m_transcript_isValid = ::OpenAPI::fromJsonValue(m_transcript, json[QString("Transcript")]);
    m_transcript_isSet = !json[QString("Transcript")].isNull() && m_transcript_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_completion_time_isValid = ::OpenAPI::fromJsonValue(m_completion_time, json[QString("CompletionTime")]);
    m_completion_time_isSet = !json[QString("CompletionTime")].isNull() && m_completion_time_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("FailureReason")]);
    m_failure_reason_isSet = !json[QString("FailureReason")].isNull() && m_failure_reason_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("Settings")]);
    m_settings_isSet = !json[QString("Settings")].isNull() && m_settings_isValid;

    m_content_identification_type_isValid = ::OpenAPI::fromJsonValue(m_content_identification_type, json[QString("ContentIdentificationType")]);
    m_content_identification_type_isSet = !json[QString("ContentIdentificationType")].isNull() && m_content_identification_type_isValid;

    m_specialty_isValid = ::OpenAPI::fromJsonValue(m_specialty, json[QString("Specialty")]);
    m_specialty_isSet = !json[QString("Specialty")].isNull() && m_specialty_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::asJsonObject() const {
    QJsonObject obj;
    if (m_medical_transcription_job_name_isSet) {
        obj.insert(QString("MedicalTranscriptionJobName"), ::OpenAPI::toJsonValue(m_medical_transcription_job_name));
    }
    if (m_transcription_job_status.isSet()) {
        obj.insert(QString("TranscriptionJobStatus"), ::OpenAPI::toJsonValue(m_transcription_job_status));
    }
    if (m_language_code.isSet()) {
        obj.insert(QString("LanguageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_media_sample_rate_hertz_isSet) {
        obj.insert(QString("MediaSampleRateHertz"), ::OpenAPI::toJsonValue(m_media_sample_rate_hertz));
    }
    if (m_media_format.isSet()) {
        obj.insert(QString("MediaFormat"), ::OpenAPI::toJsonValue(m_media_format));
    }
    if (m_media.isSet()) {
        obj.insert(QString("Media"), ::OpenAPI::toJsonValue(m_media));
    }
    if (m_transcript.isSet()) {
        obj.insert(QString("Transcript"), ::OpenAPI::toJsonValue(m_transcript));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_completion_time_isSet) {
        obj.insert(QString("CompletionTime"), ::OpenAPI::toJsonValue(m_completion_time));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("FailureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("Settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_content_identification_type.isSet()) {
        obj.insert(QString("ContentIdentificationType"), ::OpenAPI::toJsonValue(m_content_identification_type));
    }
    if (m_specialty.isSet()) {
        obj.insert(QString("Specialty"), ::OpenAPI::toJsonValue(m_specialty));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::getMedicalTranscriptionJobName() const {
    return m_medical_transcription_job_name;
}
void OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::setMedicalTranscriptionJobName(const QString &medical_transcription_job_name) {
    m_medical_transcription_job_name = medical_transcription_job_name;
    m_medical_transcription_job_name_isSet = true;
}

bool OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::is_medical_transcription_job_name_Set() const{
    return m_medical_transcription_job_name_isSet;
}

bool OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::is_medical_transcription_job_name_Valid() const{
    return m_medical_transcription_job_name_isValid;
}

OAITranscriptionJobStatus OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::getTranscriptionJobStatus() const {
    return m_transcription_job_status;
}
void OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::setTranscriptionJobStatus(const OAITranscriptionJobStatus &transcription_job_status) {
    m_transcription_job_status = transcription_job_status;
    m_transcription_job_status_isSet = true;
}

bool OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::is_transcription_job_status_Set() const{
    return m_transcription_job_status_isSet;
}

bool OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::is_transcription_job_status_Valid() const{
    return m_transcription_job_status_isValid;
}

OAILanguageCode OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::getLanguageCode() const {
    return m_language_code;
}
void OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::setLanguageCode(const OAILanguageCode &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::is_language_code_Valid() const{
    return m_language_code_isValid;
}

qint32 OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::getMediaSampleRateHertz() const {
    return m_media_sample_rate_hertz;
}
void OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::setMediaSampleRateHertz(const qint32 &media_sample_rate_hertz) {
    m_media_sample_rate_hertz = media_sample_rate_hertz;
    m_media_sample_rate_hertz_isSet = true;
}

bool OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::is_media_sample_rate_hertz_Set() const{
    return m_media_sample_rate_hertz_isSet;
}

bool OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::is_media_sample_rate_hertz_Valid() const{
    return m_media_sample_rate_hertz_isValid;
}

OAIMediaFormat OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::getMediaFormat() const {
    return m_media_format;
}
void OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::setMediaFormat(const OAIMediaFormat &media_format) {
    m_media_format = media_format;
    m_media_format_isSet = true;
}

bool OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::is_media_format_Set() const{
    return m_media_format_isSet;
}

bool OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::is_media_format_Valid() const{
    return m_media_format_isValid;
}

OAIMedia OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::getMedia() const {
    return m_media;
}
void OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::setMedia(const OAIMedia &media) {
    m_media = media;
    m_media_isSet = true;
}

bool OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::is_media_Set() const{
    return m_media_isSet;
}

bool OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::is_media_Valid() const{
    return m_media_isValid;
}

OAIMedicalTranscriptionJob_Transcript OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::getTranscript() const {
    return m_transcript;
}
void OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::setTranscript(const OAIMedicalTranscriptionJob_Transcript &transcript) {
    m_transcript = transcript;
    m_transcript_isSet = true;
}

bool OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::is_transcript_Set() const{
    return m_transcript_isSet;
}

bool OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::is_transcript_Valid() const{
    return m_transcript_isValid;
}

QDateTime OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::getStartTime() const {
    return m_start_time;
}
void OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::getCreationTime() const {
    return m_creation_time;
}
void OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::getCompletionTime() const {
    return m_completion_time;
}
void OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::setCompletionTime(const QDateTime &completion_time) {
    m_completion_time = completion_time;
    m_completion_time_isSet = true;
}

bool OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::is_completion_time_Set() const{
    return m_completion_time_isSet;
}

bool OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::is_completion_time_Valid() const{
    return m_completion_time_isValid;
}

QString OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::getFailureReason() const {
    return m_failure_reason;
}
void OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

OAIMedicalTranscriptionJob_Settings OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::getSettings() const {
    return m_settings;
}
void OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::setSettings(const OAIMedicalTranscriptionJob_Settings &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::is_settings_Valid() const{
    return m_settings_isValid;
}

OAIMedicalContentIdentificationType OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::getContentIdentificationType() const {
    return m_content_identification_type;
}
void OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::setContentIdentificationType(const OAIMedicalContentIdentificationType &content_identification_type) {
    m_content_identification_type = content_identification_type;
    m_content_identification_type_isSet = true;
}

bool OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::is_content_identification_type_Set() const{
    return m_content_identification_type_isSet;
}

bool OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::is_content_identification_type_Valid() const{
    return m_content_identification_type_isValid;
}

OAISpecialty OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::getSpecialty() const {
    return m_specialty;
}
void OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::setSpecialty(const OAISpecialty &specialty) {
    m_specialty = specialty;
    m_specialty_isSet = true;
}

bool OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::is_specialty_Set() const{
    return m_specialty_isSet;
}

bool OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::is_specialty_Valid() const{
    return m_specialty_isValid;
}

OAIType OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::getType() const {
    return m_type;
}
void OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::setType(const OAIType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::is_type_Set() const{
    return m_type_isSet;
}

bool OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::is_type_Valid() const{
    return m_type_isValid;
}

QList OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::getTags() const {
    return m_tags;
}
void OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_medical_transcription_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transcription_job_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_sample_rate_hertz_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transcript.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_identification_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_specialty.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartMedicalTranscriptionJobResponse_MedicalTranscriptionJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
