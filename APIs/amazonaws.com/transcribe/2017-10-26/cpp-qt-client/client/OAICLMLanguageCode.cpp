/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICLMLanguageCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICLMLanguageCode::OAICLMLanguageCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICLMLanguageCode::OAICLMLanguageCode() {
    this->initializeModel();
}

OAICLMLanguageCode::~OAICLMLanguageCode() {}

void OAICLMLanguageCode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAICLMLanguageCode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAICLMLanguageCode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("en-US", Qt::CaseInsensitive) == 0) {
        m_value = eOAICLMLanguageCode::EN_US;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("hi-IN", Qt::CaseInsensitive) == 0) {
        m_value = eOAICLMLanguageCode::HI_IN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("es-US", Qt::CaseInsensitive) == 0) {
        m_value = eOAICLMLanguageCode::ES_US;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("en-GB", Qt::CaseInsensitive) == 0) {
        m_value = eOAICLMLanguageCode::EN_GB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("en-AU", Qt::CaseInsensitive) == 0) {
        m_value = eOAICLMLanguageCode::EN_AU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("de-DE", Qt::CaseInsensitive) == 0) {
        m_value = eOAICLMLanguageCode::DE_DE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ja-JP", Qt::CaseInsensitive) == 0) {
        m_value = eOAICLMLanguageCode::JA_JP;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAICLMLanguageCode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAICLMLanguageCode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAICLMLanguageCode::EN_US:
            val = "en-US";
            break;
        case eOAICLMLanguageCode::HI_IN:
            val = "hi-IN";
            break;
        case eOAICLMLanguageCode::ES_US:
            val = "es-US";
            break;
        case eOAICLMLanguageCode::EN_GB:
            val = "en-GB";
            break;
        case eOAICLMLanguageCode::EN_AU:
            val = "en-AU";
            break;
        case eOAICLMLanguageCode::DE_DE:
            val = "de-DE";
            break;
        case eOAICLMLanguageCode::JA_JP:
            val = "ja-JP";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAICLMLanguageCode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAICLMLanguageCode::eOAICLMLanguageCode OAICLMLanguageCode::getValue() const {
    return m_value;
}

void OAICLMLanguageCode::setValue(const OAICLMLanguageCode::eOAICLMLanguageCode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAICLMLanguageCode::isSet() const {
    
    return m_value_isSet;
}

bool OAICLMLanguageCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
