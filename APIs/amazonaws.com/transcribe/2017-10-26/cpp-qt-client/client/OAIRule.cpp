/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRule::OAIRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRule::OAIRule() {
    this->initializeModel();
}

OAIRule::~OAIRule() {}

void OAIRule::initializeModel() {

    m_non_talk_time_filter_isSet = false;
    m_non_talk_time_filter_isValid = false;

    m_interruption_filter_isSet = false;
    m_interruption_filter_isValid = false;

    m_transcript_filter_isSet = false;
    m_transcript_filter_isValid = false;

    m_sentiment_filter_isSet = false;
    m_sentiment_filter_isValid = false;
}

void OAIRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRule::fromJsonObject(QJsonObject json) {

    m_non_talk_time_filter_isValid = ::OpenAPI::fromJsonValue(m_non_talk_time_filter, json[QString("NonTalkTimeFilter")]);
    m_non_talk_time_filter_isSet = !json[QString("NonTalkTimeFilter")].isNull() && m_non_talk_time_filter_isValid;

    m_interruption_filter_isValid = ::OpenAPI::fromJsonValue(m_interruption_filter, json[QString("InterruptionFilter")]);
    m_interruption_filter_isSet = !json[QString("InterruptionFilter")].isNull() && m_interruption_filter_isValid;

    m_transcript_filter_isValid = ::OpenAPI::fromJsonValue(m_transcript_filter, json[QString("TranscriptFilter")]);
    m_transcript_filter_isSet = !json[QString("TranscriptFilter")].isNull() && m_transcript_filter_isValid;

    m_sentiment_filter_isValid = ::OpenAPI::fromJsonValue(m_sentiment_filter, json[QString("SentimentFilter")]);
    m_sentiment_filter_isSet = !json[QString("SentimentFilter")].isNull() && m_sentiment_filter_isValid;
}

QString OAIRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRule::asJsonObject() const {
    QJsonObject obj;
    if (m_non_talk_time_filter.isSet()) {
        obj.insert(QString("NonTalkTimeFilter"), ::OpenAPI::toJsonValue(m_non_talk_time_filter));
    }
    if (m_interruption_filter.isSet()) {
        obj.insert(QString("InterruptionFilter"), ::OpenAPI::toJsonValue(m_interruption_filter));
    }
    if (m_transcript_filter.isSet()) {
        obj.insert(QString("TranscriptFilter"), ::OpenAPI::toJsonValue(m_transcript_filter));
    }
    if (m_sentiment_filter.isSet()) {
        obj.insert(QString("SentimentFilter"), ::OpenAPI::toJsonValue(m_sentiment_filter));
    }
    return obj;
}

OAIRule_NonTalkTimeFilter OAIRule::getNonTalkTimeFilter() const {
    return m_non_talk_time_filter;
}
void OAIRule::setNonTalkTimeFilter(const OAIRule_NonTalkTimeFilter &non_talk_time_filter) {
    m_non_talk_time_filter = non_talk_time_filter;
    m_non_talk_time_filter_isSet = true;
}

bool OAIRule::is_non_talk_time_filter_Set() const{
    return m_non_talk_time_filter_isSet;
}

bool OAIRule::is_non_talk_time_filter_Valid() const{
    return m_non_talk_time_filter_isValid;
}

OAIRule_InterruptionFilter OAIRule::getInterruptionFilter() const {
    return m_interruption_filter;
}
void OAIRule::setInterruptionFilter(const OAIRule_InterruptionFilter &interruption_filter) {
    m_interruption_filter = interruption_filter;
    m_interruption_filter_isSet = true;
}

bool OAIRule::is_interruption_filter_Set() const{
    return m_interruption_filter_isSet;
}

bool OAIRule::is_interruption_filter_Valid() const{
    return m_interruption_filter_isValid;
}

OAIRule_TranscriptFilter OAIRule::getTranscriptFilter() const {
    return m_transcript_filter;
}
void OAIRule::setTranscriptFilter(const OAIRule_TranscriptFilter &transcript_filter) {
    m_transcript_filter = transcript_filter;
    m_transcript_filter_isSet = true;
}

bool OAIRule::is_transcript_filter_Set() const{
    return m_transcript_filter_isSet;
}

bool OAIRule::is_transcript_filter_Valid() const{
    return m_transcript_filter_isValid;
}

OAIRule_SentimentFilter OAIRule::getSentimentFilter() const {
    return m_sentiment_filter;
}
void OAIRule::setSentimentFilter(const OAIRule_SentimentFilter &sentiment_filter) {
    m_sentiment_filter = sentiment_filter;
    m_sentiment_filter_isSet = true;
}

bool OAIRule::is_sentiment_filter_Set() const{
    return m_sentiment_filter_isSet;
}

bool OAIRule::is_sentiment_filter_Valid() const{
    return m_sentiment_filter_isValid;
}

bool OAIRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_non_talk_time_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_interruption_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transcript_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
