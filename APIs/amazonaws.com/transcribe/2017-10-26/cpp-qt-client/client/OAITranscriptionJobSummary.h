/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITranscriptionJobSummary.h
 *
 * Provides detailed information about a specific transcription job.
 */

#ifndef OAITranscriptionJobSummary_H
#define OAITranscriptionJobSummary_H

#include <QJsonObject>

#include "OAILanguageCode.h"
#include "OAIModelSettings.h"
#include "OAIOutputLocationType.h"
#include "OAITranscriptionJobStatus.h"
#include "OAITranscriptionJobSummary_ContentRedaction.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITranscriptionJobSummary_ContentRedaction;
class OAIModelSettings;

class OAITranscriptionJobSummary : public OAIObject {
public:
    OAITranscriptionJobSummary();
    OAITranscriptionJobSummary(QString json);
    ~OAITranscriptionJobSummary() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getTranscriptionJobName() const;
    void setTranscriptionJobName(const QString &transcription_job_name);
    bool is_transcription_job_name_Set() const;
    bool is_transcription_job_name_Valid() const;

    QDateTime getCreationTime() const;
    void setCreationTime(const QDateTime &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QDateTime getCompletionTime() const;
    void setCompletionTime(const QDateTime &completion_time);
    bool is_completion_time_Set() const;
    bool is_completion_time_Valid() const;

    OAILanguageCode getLanguageCode() const;
    void setLanguageCode(const OAILanguageCode &language_code);
    bool is_language_code_Set() const;
    bool is_language_code_Valid() const;

    OAITranscriptionJobStatus getTranscriptionJobStatus() const;
    void setTranscriptionJobStatus(const OAITranscriptionJobStatus &transcription_job_status);
    bool is_transcription_job_status_Set() const;
    bool is_transcription_job_status_Valid() const;

    QString getFailureReason() const;
    void setFailureReason(const QString &failure_reason);
    bool is_failure_reason_Set() const;
    bool is_failure_reason_Valid() const;

    OAIOutputLocationType getOutputLocationType() const;
    void setOutputLocationType(const OAIOutputLocationType &output_location_type);
    bool is_output_location_type_Set() const;
    bool is_output_location_type_Valid() const;

    OAITranscriptionJobSummary_ContentRedaction getContentRedaction() const;
    void setContentRedaction(const OAITranscriptionJobSummary_ContentRedaction &content_redaction);
    bool is_content_redaction_Set() const;
    bool is_content_redaction_Valid() const;

    OAIModelSettings getModelSettings() const;
    void setModelSettings(const OAIModelSettings &model_settings);
    bool is_model_settings_Set() const;
    bool is_model_settings_Valid() const;

    bool getIdentifyLanguage() const;
    void setIdentifyLanguage(const bool &identify_language);
    bool is_identify_language_Set() const;
    bool is_identify_language_Valid() const;

    bool getIdentifyMultipleLanguages() const;
    void setIdentifyMultipleLanguages(const bool &identify_multiple_languages);
    bool is_identify_multiple_languages_Set() const;
    bool is_identify_multiple_languages_Valid() const;

    float getIdentifiedLanguageScore() const;
    void setIdentifiedLanguageScore(const float &identified_language_score);
    bool is_identified_language_score_Set() const;
    bool is_identified_language_score_Valid() const;

    QList getLanguageCodes() const;
    void setLanguageCodes(const QList &language_codes);
    bool is_language_codes_Set() const;
    bool is_language_codes_Valid() const;

    QList getToxicityDetection() const;
    void setToxicityDetection(const QList &toxicity_detection);
    bool is_toxicity_detection_Set() const;
    bool is_toxicity_detection_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_transcription_job_name;
    bool m_transcription_job_name_isSet;
    bool m_transcription_job_name_isValid;

    QDateTime m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QDateTime m_completion_time;
    bool m_completion_time_isSet;
    bool m_completion_time_isValid;

    OAILanguageCode m_language_code;
    bool m_language_code_isSet;
    bool m_language_code_isValid;

    OAITranscriptionJobStatus m_transcription_job_status;
    bool m_transcription_job_status_isSet;
    bool m_transcription_job_status_isValid;

    QString m_failure_reason;
    bool m_failure_reason_isSet;
    bool m_failure_reason_isValid;

    OAIOutputLocationType m_output_location_type;
    bool m_output_location_type_isSet;
    bool m_output_location_type_isValid;

    OAITranscriptionJobSummary_ContentRedaction m_content_redaction;
    bool m_content_redaction_isSet;
    bool m_content_redaction_isValid;

    OAIModelSettings m_model_settings;
    bool m_model_settings_isSet;
    bool m_model_settings_isValid;

    bool m_identify_language;
    bool m_identify_language_isSet;
    bool m_identify_language_isValid;

    bool m_identify_multiple_languages;
    bool m_identify_multiple_languages_isSet;
    bool m_identify_multiple_languages_isValid;

    float m_identified_language_score;
    bool m_identified_language_score_isSet;
    bool m_identified_language_score_isValid;

    QList m_language_codes;
    bool m_language_codes_isSet;
    bool m_language_codes_isValid;

    QList m_toxicity_detection;
    bool m_toxicity_detection_isSet;
    bool m_toxicity_detection_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITranscriptionJobSummary)

#endif // OAITranscriptionJobSummary_H
