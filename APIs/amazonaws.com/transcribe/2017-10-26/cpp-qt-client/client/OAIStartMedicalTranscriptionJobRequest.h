/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStartMedicalTranscriptionJobRequest.h
 *
 * 
 */

#ifndef OAIStartMedicalTranscriptionJobRequest_H
#define OAIStartMedicalTranscriptionJobRequest_H

#include <QJsonObject>

#include "OAILanguageCode.h"
#include "OAIMedia.h"
#include "OAIMediaFormat.h"
#include "OAIMedicalContentIdentificationType.h"
#include "OAISpecialty.h"
#include "OAIStartMedicalTranscriptionJobRequest_Settings.h"
#include "OAIType.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMedia;
class OAIStartMedicalTranscriptionJobRequest_Settings;

class OAIStartMedicalTranscriptionJobRequest : public OAIObject {
public:
    OAIStartMedicalTranscriptionJobRequest();
    OAIStartMedicalTranscriptionJobRequest(QString json);
    ~OAIStartMedicalTranscriptionJobRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getMedicalTranscriptionJobName() const;
    void setMedicalTranscriptionJobName(const QString &medical_transcription_job_name);
    bool is_medical_transcription_job_name_Set() const;
    bool is_medical_transcription_job_name_Valid() const;

    OAILanguageCode getLanguageCode() const;
    void setLanguageCode(const OAILanguageCode &language_code);
    bool is_language_code_Set() const;
    bool is_language_code_Valid() const;

    qint32 getMediaSampleRateHertz() const;
    void setMediaSampleRateHertz(const qint32 &media_sample_rate_hertz);
    bool is_media_sample_rate_hertz_Set() const;
    bool is_media_sample_rate_hertz_Valid() const;

    OAIMediaFormat getMediaFormat() const;
    void setMediaFormat(const OAIMediaFormat &media_format);
    bool is_media_format_Set() const;
    bool is_media_format_Valid() const;

    OAIMedia getMedia() const;
    void setMedia(const OAIMedia &media);
    bool is_media_Set() const;
    bool is_media_Valid() const;

    QString getOutputBucketName() const;
    void setOutputBucketName(const QString &output_bucket_name);
    bool is_output_bucket_name_Set() const;
    bool is_output_bucket_name_Valid() const;

    QString getOutputKey() const;
    void setOutputKey(const QString &output_key);
    bool is_output_key_Set() const;
    bool is_output_key_Valid() const;

    QString getOutputEncryptionKmsKeyId() const;
    void setOutputEncryptionKmsKeyId(const QString &output_encryption_kms_key_id);
    bool is_output_encryption_kms_key_id_Set() const;
    bool is_output_encryption_kms_key_id_Valid() const;

    QMap getKmsEncryptionContext() const;
    void setKmsEncryptionContext(const QMap &kms_encryption_context);
    bool is_kms_encryption_context_Set() const;
    bool is_kms_encryption_context_Valid() const;

    OAIStartMedicalTranscriptionJobRequest_Settings getSettings() const;
    void setSettings(const OAIStartMedicalTranscriptionJobRequest_Settings &settings);
    bool is_settings_Set() const;
    bool is_settings_Valid() const;

    OAIMedicalContentIdentificationType getContentIdentificationType() const;
    void setContentIdentificationType(const OAIMedicalContentIdentificationType &content_identification_type);
    bool is_content_identification_type_Set() const;
    bool is_content_identification_type_Valid() const;

    OAISpecialty getSpecialty() const;
    void setSpecialty(const OAISpecialty &specialty);
    bool is_specialty_Set() const;
    bool is_specialty_Valid() const;

    OAIType getType() const;
    void setType(const OAIType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_medical_transcription_job_name;
    bool m_medical_transcription_job_name_isSet;
    bool m_medical_transcription_job_name_isValid;

    OAILanguageCode m_language_code;
    bool m_language_code_isSet;
    bool m_language_code_isValid;

    qint32 m_media_sample_rate_hertz;
    bool m_media_sample_rate_hertz_isSet;
    bool m_media_sample_rate_hertz_isValid;

    OAIMediaFormat m_media_format;
    bool m_media_format_isSet;
    bool m_media_format_isValid;

    OAIMedia m_media;
    bool m_media_isSet;
    bool m_media_isValid;

    QString m_output_bucket_name;
    bool m_output_bucket_name_isSet;
    bool m_output_bucket_name_isValid;

    QString m_output_key;
    bool m_output_key_isSet;
    bool m_output_key_isValid;

    QString m_output_encryption_kms_key_id;
    bool m_output_encryption_kms_key_id_isSet;
    bool m_output_encryption_kms_key_id_isValid;

    QMap m_kms_encryption_context;
    bool m_kms_encryption_context_isSet;
    bool m_kms_encryption_context_isValid;

    OAIStartMedicalTranscriptionJobRequest_Settings m_settings;
    bool m_settings_isSet;
    bool m_settings_isValid;

    OAIMedicalContentIdentificationType m_content_identification_type;
    bool m_content_identification_type_isSet;
    bool m_content_identification_type_isValid;

    OAISpecialty m_specialty;
    bool m_specialty_isSet;
    bool m_specialty_isValid;

    OAIType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStartMedicalTranscriptionJobRequest)

#endif // OAIStartMedicalTranscriptionJobRequest_H
