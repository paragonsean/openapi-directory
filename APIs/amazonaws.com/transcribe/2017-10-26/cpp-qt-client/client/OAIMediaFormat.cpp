/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediaFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediaFormat::OAIMediaFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediaFormat::OAIMediaFormat() {
    this->initializeModel();
}

OAIMediaFormat::~OAIMediaFormat() {}

void OAIMediaFormat::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIMediaFormat::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIMediaFormat::fromJson(QString jsonString) {
    
    if ( jsonString.compare("mp3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaFormat::MP3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("mp4", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaFormat::MP4;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("wav", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaFormat::WAV;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("flac", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaFormat::FLAC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ogg", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaFormat::OGG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("amr", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaFormat::AMR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("webm", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMediaFormat::WEBM;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIMediaFormat::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIMediaFormat::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIMediaFormat::MP3:
            val = "mp3";
            break;
        case eOAIMediaFormat::MP4:
            val = "mp4";
            break;
        case eOAIMediaFormat::WAV:
            val = "wav";
            break;
        case eOAIMediaFormat::FLAC:
            val = "flac";
            break;
        case eOAIMediaFormat::OGG:
            val = "ogg";
            break;
        case eOAIMediaFormat::AMR:
            val = "amr";
            break;
        case eOAIMediaFormat::WEBM:
            val = "webm";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIMediaFormat::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIMediaFormat::eOAIMediaFormat OAIMediaFormat::getValue() const {
    return m_value;
}

void OAIMediaFormat::setValue(const OAIMediaFormat::eOAIMediaFormat& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIMediaFormat::isSet() const {
    
    return m_value_isSet;
}

bool OAIMediaFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
