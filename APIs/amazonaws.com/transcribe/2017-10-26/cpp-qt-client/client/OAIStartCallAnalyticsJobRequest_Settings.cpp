/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartCallAnalyticsJobRequest_Settings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartCallAnalyticsJobRequest_Settings::OAIStartCallAnalyticsJobRequest_Settings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartCallAnalyticsJobRequest_Settings::OAIStartCallAnalyticsJobRequest_Settings() {
    this->initializeModel();
}

OAIStartCallAnalyticsJobRequest_Settings::~OAIStartCallAnalyticsJobRequest_Settings() {}

void OAIStartCallAnalyticsJobRequest_Settings::initializeModel() {

    m_vocabulary_name_isSet = false;
    m_vocabulary_name_isValid = false;

    m_vocabulary_filter_name_isSet = false;
    m_vocabulary_filter_name_isValid = false;

    m_vocabulary_filter_method_isSet = false;
    m_vocabulary_filter_method_isValid = false;

    m_language_model_name_isSet = false;
    m_language_model_name_isValid = false;

    m_content_redaction_isSet = false;
    m_content_redaction_isValid = false;

    m_language_options_isSet = false;
    m_language_options_isValid = false;

    m_language_id_settings_isSet = false;
    m_language_id_settings_isValid = false;
}

void OAIStartCallAnalyticsJobRequest_Settings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartCallAnalyticsJobRequest_Settings::fromJsonObject(QJsonObject json) {

    m_vocabulary_name_isValid = ::OpenAPI::fromJsonValue(m_vocabulary_name, json[QString("VocabularyName")]);
    m_vocabulary_name_isSet = !json[QString("VocabularyName")].isNull() && m_vocabulary_name_isValid;

    m_vocabulary_filter_name_isValid = ::OpenAPI::fromJsonValue(m_vocabulary_filter_name, json[QString("VocabularyFilterName")]);
    m_vocabulary_filter_name_isSet = !json[QString("VocabularyFilterName")].isNull() && m_vocabulary_filter_name_isValid;

    m_vocabulary_filter_method_isValid = ::OpenAPI::fromJsonValue(m_vocabulary_filter_method, json[QString("VocabularyFilterMethod")]);
    m_vocabulary_filter_method_isSet = !json[QString("VocabularyFilterMethod")].isNull() && m_vocabulary_filter_method_isValid;

    m_language_model_name_isValid = ::OpenAPI::fromJsonValue(m_language_model_name, json[QString("LanguageModelName")]);
    m_language_model_name_isSet = !json[QString("LanguageModelName")].isNull() && m_language_model_name_isValid;

    m_content_redaction_isValid = ::OpenAPI::fromJsonValue(m_content_redaction, json[QString("ContentRedaction")]);
    m_content_redaction_isSet = !json[QString("ContentRedaction")].isNull() && m_content_redaction_isValid;

    m_language_options_isValid = ::OpenAPI::fromJsonValue(m_language_options, json[QString("LanguageOptions")]);
    m_language_options_isSet = !json[QString("LanguageOptions")].isNull() && m_language_options_isValid;

    m_language_id_settings_isValid = ::OpenAPI::fromJsonValue(m_language_id_settings, json[QString("LanguageIdSettings")]);
    m_language_id_settings_isSet = !json[QString("LanguageIdSettings")].isNull() && m_language_id_settings_isValid;
}

QString OAIStartCallAnalyticsJobRequest_Settings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartCallAnalyticsJobRequest_Settings::asJsonObject() const {
    QJsonObject obj;
    if (m_vocabulary_name_isSet) {
        obj.insert(QString("VocabularyName"), ::OpenAPI::toJsonValue(m_vocabulary_name));
    }
    if (m_vocabulary_filter_name_isSet) {
        obj.insert(QString("VocabularyFilterName"), ::OpenAPI::toJsonValue(m_vocabulary_filter_name));
    }
    if (m_vocabulary_filter_method.isSet()) {
        obj.insert(QString("VocabularyFilterMethod"), ::OpenAPI::toJsonValue(m_vocabulary_filter_method));
    }
    if (m_language_model_name_isSet) {
        obj.insert(QString("LanguageModelName"), ::OpenAPI::toJsonValue(m_language_model_name));
    }
    if (m_content_redaction.isSet()) {
        obj.insert(QString("ContentRedaction"), ::OpenAPI::toJsonValue(m_content_redaction));
    }
    if (m_language_options.isSet()) {
        obj.insert(QString("LanguageOptions"), ::OpenAPI::toJsonValue(m_language_options));
    }
    if (m_language_id_settings.isSet()) {
        obj.insert(QString("LanguageIdSettings"), ::OpenAPI::toJsonValue(m_language_id_settings));
    }
    return obj;
}

QString OAIStartCallAnalyticsJobRequest_Settings::getVocabularyName() const {
    return m_vocabulary_name;
}
void OAIStartCallAnalyticsJobRequest_Settings::setVocabularyName(const QString &vocabulary_name) {
    m_vocabulary_name = vocabulary_name;
    m_vocabulary_name_isSet = true;
}

bool OAIStartCallAnalyticsJobRequest_Settings::is_vocabulary_name_Set() const{
    return m_vocabulary_name_isSet;
}

bool OAIStartCallAnalyticsJobRequest_Settings::is_vocabulary_name_Valid() const{
    return m_vocabulary_name_isValid;
}

QString OAIStartCallAnalyticsJobRequest_Settings::getVocabularyFilterName() const {
    return m_vocabulary_filter_name;
}
void OAIStartCallAnalyticsJobRequest_Settings::setVocabularyFilterName(const QString &vocabulary_filter_name) {
    m_vocabulary_filter_name = vocabulary_filter_name;
    m_vocabulary_filter_name_isSet = true;
}

bool OAIStartCallAnalyticsJobRequest_Settings::is_vocabulary_filter_name_Set() const{
    return m_vocabulary_filter_name_isSet;
}

bool OAIStartCallAnalyticsJobRequest_Settings::is_vocabulary_filter_name_Valid() const{
    return m_vocabulary_filter_name_isValid;
}

OAIVocabularyFilterMethod OAIStartCallAnalyticsJobRequest_Settings::getVocabularyFilterMethod() const {
    return m_vocabulary_filter_method;
}
void OAIStartCallAnalyticsJobRequest_Settings::setVocabularyFilterMethod(const OAIVocabularyFilterMethod &vocabulary_filter_method) {
    m_vocabulary_filter_method = vocabulary_filter_method;
    m_vocabulary_filter_method_isSet = true;
}

bool OAIStartCallAnalyticsJobRequest_Settings::is_vocabulary_filter_method_Set() const{
    return m_vocabulary_filter_method_isSet;
}

bool OAIStartCallAnalyticsJobRequest_Settings::is_vocabulary_filter_method_Valid() const{
    return m_vocabulary_filter_method_isValid;
}

QString OAIStartCallAnalyticsJobRequest_Settings::getLanguageModelName() const {
    return m_language_model_name;
}
void OAIStartCallAnalyticsJobRequest_Settings::setLanguageModelName(const QString &language_model_name) {
    m_language_model_name = language_model_name;
    m_language_model_name_isSet = true;
}

bool OAIStartCallAnalyticsJobRequest_Settings::is_language_model_name_Set() const{
    return m_language_model_name_isSet;
}

bool OAIStartCallAnalyticsJobRequest_Settings::is_language_model_name_Valid() const{
    return m_language_model_name_isValid;
}

OAIContentRedaction OAIStartCallAnalyticsJobRequest_Settings::getContentRedaction() const {
    return m_content_redaction;
}
void OAIStartCallAnalyticsJobRequest_Settings::setContentRedaction(const OAIContentRedaction &content_redaction) {
    m_content_redaction = content_redaction;
    m_content_redaction_isSet = true;
}

bool OAIStartCallAnalyticsJobRequest_Settings::is_content_redaction_Set() const{
    return m_content_redaction_isSet;
}

bool OAIStartCallAnalyticsJobRequest_Settings::is_content_redaction_Valid() const{
    return m_content_redaction_isValid;
}

QList OAIStartCallAnalyticsJobRequest_Settings::getLanguageOptions() const {
    return m_language_options;
}
void OAIStartCallAnalyticsJobRequest_Settings::setLanguageOptions(const QList &language_options) {
    m_language_options = language_options;
    m_language_options_isSet = true;
}

bool OAIStartCallAnalyticsJobRequest_Settings::is_language_options_Set() const{
    return m_language_options_isSet;
}

bool OAIStartCallAnalyticsJobRequest_Settings::is_language_options_Valid() const{
    return m_language_options_isValid;
}

QMap OAIStartCallAnalyticsJobRequest_Settings::getLanguageIdSettings() const {
    return m_language_id_settings;
}
void OAIStartCallAnalyticsJobRequest_Settings::setLanguageIdSettings(const QMap &language_id_settings) {
    m_language_id_settings = language_id_settings;
    m_language_id_settings_isSet = true;
}

bool OAIStartCallAnalyticsJobRequest_Settings::is_language_id_settings_Set() const{
    return m_language_id_settings_isSet;
}

bool OAIStartCallAnalyticsJobRequest_Settings::is_language_id_settings_Valid() const{
    return m_language_id_settings_isValid;
}

bool OAIStartCallAnalyticsJobRequest_Settings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_vocabulary_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vocabulary_filter_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vocabulary_filter_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_redaction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_id_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartCallAnalyticsJobRequest_Settings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
