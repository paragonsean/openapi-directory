/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartMedicalTranscriptionJobRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartMedicalTranscriptionJobRequest::OAIStartMedicalTranscriptionJobRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartMedicalTranscriptionJobRequest::OAIStartMedicalTranscriptionJobRequest() {
    this->initializeModel();
}

OAIStartMedicalTranscriptionJobRequest::~OAIStartMedicalTranscriptionJobRequest() {}

void OAIStartMedicalTranscriptionJobRequest::initializeModel() {

    m_medical_transcription_job_name_isSet = false;
    m_medical_transcription_job_name_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_media_sample_rate_hertz_isSet = false;
    m_media_sample_rate_hertz_isValid = false;

    m_media_format_isSet = false;
    m_media_format_isValid = false;

    m_media_isSet = false;
    m_media_isValid = false;

    m_output_bucket_name_isSet = false;
    m_output_bucket_name_isValid = false;

    m_output_key_isSet = false;
    m_output_key_isValid = false;

    m_output_encryption_kms_key_id_isSet = false;
    m_output_encryption_kms_key_id_isValid = false;

    m_kms_encryption_context_isSet = false;
    m_kms_encryption_context_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_content_identification_type_isSet = false;
    m_content_identification_type_isValid = false;

    m_specialty_isSet = false;
    m_specialty_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIStartMedicalTranscriptionJobRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartMedicalTranscriptionJobRequest::fromJsonObject(QJsonObject json) {

    m_medical_transcription_job_name_isValid = ::OpenAPI::fromJsonValue(m_medical_transcription_job_name, json[QString("MedicalTranscriptionJobName")]);
    m_medical_transcription_job_name_isSet = !json[QString("MedicalTranscriptionJobName")].isNull() && m_medical_transcription_job_name_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("LanguageCode")]);
    m_language_code_isSet = !json[QString("LanguageCode")].isNull() && m_language_code_isValid;

    m_media_sample_rate_hertz_isValid = ::OpenAPI::fromJsonValue(m_media_sample_rate_hertz, json[QString("MediaSampleRateHertz")]);
    m_media_sample_rate_hertz_isSet = !json[QString("MediaSampleRateHertz")].isNull() && m_media_sample_rate_hertz_isValid;

    m_media_format_isValid = ::OpenAPI::fromJsonValue(m_media_format, json[QString("MediaFormat")]);
    m_media_format_isSet = !json[QString("MediaFormat")].isNull() && m_media_format_isValid;

    m_media_isValid = ::OpenAPI::fromJsonValue(m_media, json[QString("Media")]);
    m_media_isSet = !json[QString("Media")].isNull() && m_media_isValid;

    m_output_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_output_bucket_name, json[QString("OutputBucketName")]);
    m_output_bucket_name_isSet = !json[QString("OutputBucketName")].isNull() && m_output_bucket_name_isValid;

    m_output_key_isValid = ::OpenAPI::fromJsonValue(m_output_key, json[QString("OutputKey")]);
    m_output_key_isSet = !json[QString("OutputKey")].isNull() && m_output_key_isValid;

    m_output_encryption_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_output_encryption_kms_key_id, json[QString("OutputEncryptionKMSKeyId")]);
    m_output_encryption_kms_key_id_isSet = !json[QString("OutputEncryptionKMSKeyId")].isNull() && m_output_encryption_kms_key_id_isValid;

    m_kms_encryption_context_isValid = ::OpenAPI::fromJsonValue(m_kms_encryption_context, json[QString("KMSEncryptionContext")]);
    m_kms_encryption_context_isSet = !json[QString("KMSEncryptionContext")].isNull() && m_kms_encryption_context_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("Settings")]);
    m_settings_isSet = !json[QString("Settings")].isNull() && m_settings_isValid;

    m_content_identification_type_isValid = ::OpenAPI::fromJsonValue(m_content_identification_type, json[QString("ContentIdentificationType")]);
    m_content_identification_type_isSet = !json[QString("ContentIdentificationType")].isNull() && m_content_identification_type_isValid;

    m_specialty_isValid = ::OpenAPI::fromJsonValue(m_specialty, json[QString("Specialty")]);
    m_specialty_isSet = !json[QString("Specialty")].isNull() && m_specialty_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIStartMedicalTranscriptionJobRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartMedicalTranscriptionJobRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_medical_transcription_job_name_isSet) {
        obj.insert(QString("MedicalTranscriptionJobName"), ::OpenAPI::toJsonValue(m_medical_transcription_job_name));
    }
    if (m_language_code.isSet()) {
        obj.insert(QString("LanguageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_media_sample_rate_hertz_isSet) {
        obj.insert(QString("MediaSampleRateHertz"), ::OpenAPI::toJsonValue(m_media_sample_rate_hertz));
    }
    if (m_media_format.isSet()) {
        obj.insert(QString("MediaFormat"), ::OpenAPI::toJsonValue(m_media_format));
    }
    if (m_media.isSet()) {
        obj.insert(QString("Media"), ::OpenAPI::toJsonValue(m_media));
    }
    if (m_output_bucket_name_isSet) {
        obj.insert(QString("OutputBucketName"), ::OpenAPI::toJsonValue(m_output_bucket_name));
    }
    if (m_output_key_isSet) {
        obj.insert(QString("OutputKey"), ::OpenAPI::toJsonValue(m_output_key));
    }
    if (m_output_encryption_kms_key_id_isSet) {
        obj.insert(QString("OutputEncryptionKMSKeyId"), ::OpenAPI::toJsonValue(m_output_encryption_kms_key_id));
    }
    if (m_kms_encryption_context.isSet()) {
        obj.insert(QString("KMSEncryptionContext"), ::OpenAPI::toJsonValue(m_kms_encryption_context));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("Settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_content_identification_type.isSet()) {
        obj.insert(QString("ContentIdentificationType"), ::OpenAPI::toJsonValue(m_content_identification_type));
    }
    if (m_specialty.isSet()) {
        obj.insert(QString("Specialty"), ::OpenAPI::toJsonValue(m_specialty));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIStartMedicalTranscriptionJobRequest::getMedicalTranscriptionJobName() const {
    return m_medical_transcription_job_name;
}
void OAIStartMedicalTranscriptionJobRequest::setMedicalTranscriptionJobName(const QString &medical_transcription_job_name) {
    m_medical_transcription_job_name = medical_transcription_job_name;
    m_medical_transcription_job_name_isSet = true;
}

bool OAIStartMedicalTranscriptionJobRequest::is_medical_transcription_job_name_Set() const{
    return m_medical_transcription_job_name_isSet;
}

bool OAIStartMedicalTranscriptionJobRequest::is_medical_transcription_job_name_Valid() const{
    return m_medical_transcription_job_name_isValid;
}

OAILanguageCode OAIStartMedicalTranscriptionJobRequest::getLanguageCode() const {
    return m_language_code;
}
void OAIStartMedicalTranscriptionJobRequest::setLanguageCode(const OAILanguageCode &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIStartMedicalTranscriptionJobRequest::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIStartMedicalTranscriptionJobRequest::is_language_code_Valid() const{
    return m_language_code_isValid;
}

qint32 OAIStartMedicalTranscriptionJobRequest::getMediaSampleRateHertz() const {
    return m_media_sample_rate_hertz;
}
void OAIStartMedicalTranscriptionJobRequest::setMediaSampleRateHertz(const qint32 &media_sample_rate_hertz) {
    m_media_sample_rate_hertz = media_sample_rate_hertz;
    m_media_sample_rate_hertz_isSet = true;
}

bool OAIStartMedicalTranscriptionJobRequest::is_media_sample_rate_hertz_Set() const{
    return m_media_sample_rate_hertz_isSet;
}

bool OAIStartMedicalTranscriptionJobRequest::is_media_sample_rate_hertz_Valid() const{
    return m_media_sample_rate_hertz_isValid;
}

OAIMediaFormat OAIStartMedicalTranscriptionJobRequest::getMediaFormat() const {
    return m_media_format;
}
void OAIStartMedicalTranscriptionJobRequest::setMediaFormat(const OAIMediaFormat &media_format) {
    m_media_format = media_format;
    m_media_format_isSet = true;
}

bool OAIStartMedicalTranscriptionJobRequest::is_media_format_Set() const{
    return m_media_format_isSet;
}

bool OAIStartMedicalTranscriptionJobRequest::is_media_format_Valid() const{
    return m_media_format_isValid;
}

OAIMedia OAIStartMedicalTranscriptionJobRequest::getMedia() const {
    return m_media;
}
void OAIStartMedicalTranscriptionJobRequest::setMedia(const OAIMedia &media) {
    m_media = media;
    m_media_isSet = true;
}

bool OAIStartMedicalTranscriptionJobRequest::is_media_Set() const{
    return m_media_isSet;
}

bool OAIStartMedicalTranscriptionJobRequest::is_media_Valid() const{
    return m_media_isValid;
}

QString OAIStartMedicalTranscriptionJobRequest::getOutputBucketName() const {
    return m_output_bucket_name;
}
void OAIStartMedicalTranscriptionJobRequest::setOutputBucketName(const QString &output_bucket_name) {
    m_output_bucket_name = output_bucket_name;
    m_output_bucket_name_isSet = true;
}

bool OAIStartMedicalTranscriptionJobRequest::is_output_bucket_name_Set() const{
    return m_output_bucket_name_isSet;
}

bool OAIStartMedicalTranscriptionJobRequest::is_output_bucket_name_Valid() const{
    return m_output_bucket_name_isValid;
}

QString OAIStartMedicalTranscriptionJobRequest::getOutputKey() const {
    return m_output_key;
}
void OAIStartMedicalTranscriptionJobRequest::setOutputKey(const QString &output_key) {
    m_output_key = output_key;
    m_output_key_isSet = true;
}

bool OAIStartMedicalTranscriptionJobRequest::is_output_key_Set() const{
    return m_output_key_isSet;
}

bool OAIStartMedicalTranscriptionJobRequest::is_output_key_Valid() const{
    return m_output_key_isValid;
}

QString OAIStartMedicalTranscriptionJobRequest::getOutputEncryptionKmsKeyId() const {
    return m_output_encryption_kms_key_id;
}
void OAIStartMedicalTranscriptionJobRequest::setOutputEncryptionKmsKeyId(const QString &output_encryption_kms_key_id) {
    m_output_encryption_kms_key_id = output_encryption_kms_key_id;
    m_output_encryption_kms_key_id_isSet = true;
}

bool OAIStartMedicalTranscriptionJobRequest::is_output_encryption_kms_key_id_Set() const{
    return m_output_encryption_kms_key_id_isSet;
}

bool OAIStartMedicalTranscriptionJobRequest::is_output_encryption_kms_key_id_Valid() const{
    return m_output_encryption_kms_key_id_isValid;
}

QMap OAIStartMedicalTranscriptionJobRequest::getKmsEncryptionContext() const {
    return m_kms_encryption_context;
}
void OAIStartMedicalTranscriptionJobRequest::setKmsEncryptionContext(const QMap &kms_encryption_context) {
    m_kms_encryption_context = kms_encryption_context;
    m_kms_encryption_context_isSet = true;
}

bool OAIStartMedicalTranscriptionJobRequest::is_kms_encryption_context_Set() const{
    return m_kms_encryption_context_isSet;
}

bool OAIStartMedicalTranscriptionJobRequest::is_kms_encryption_context_Valid() const{
    return m_kms_encryption_context_isValid;
}

OAIStartMedicalTranscriptionJobRequest_Settings OAIStartMedicalTranscriptionJobRequest::getSettings() const {
    return m_settings;
}
void OAIStartMedicalTranscriptionJobRequest::setSettings(const OAIStartMedicalTranscriptionJobRequest_Settings &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAIStartMedicalTranscriptionJobRequest::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIStartMedicalTranscriptionJobRequest::is_settings_Valid() const{
    return m_settings_isValid;
}

OAIMedicalContentIdentificationType OAIStartMedicalTranscriptionJobRequest::getContentIdentificationType() const {
    return m_content_identification_type;
}
void OAIStartMedicalTranscriptionJobRequest::setContentIdentificationType(const OAIMedicalContentIdentificationType &content_identification_type) {
    m_content_identification_type = content_identification_type;
    m_content_identification_type_isSet = true;
}

bool OAIStartMedicalTranscriptionJobRequest::is_content_identification_type_Set() const{
    return m_content_identification_type_isSet;
}

bool OAIStartMedicalTranscriptionJobRequest::is_content_identification_type_Valid() const{
    return m_content_identification_type_isValid;
}

OAISpecialty OAIStartMedicalTranscriptionJobRequest::getSpecialty() const {
    return m_specialty;
}
void OAIStartMedicalTranscriptionJobRequest::setSpecialty(const OAISpecialty &specialty) {
    m_specialty = specialty;
    m_specialty_isSet = true;
}

bool OAIStartMedicalTranscriptionJobRequest::is_specialty_Set() const{
    return m_specialty_isSet;
}

bool OAIStartMedicalTranscriptionJobRequest::is_specialty_Valid() const{
    return m_specialty_isValid;
}

OAIType OAIStartMedicalTranscriptionJobRequest::getType() const {
    return m_type;
}
void OAIStartMedicalTranscriptionJobRequest::setType(const OAIType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIStartMedicalTranscriptionJobRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAIStartMedicalTranscriptionJobRequest::is_type_Valid() const{
    return m_type_isValid;
}

QList OAIStartMedicalTranscriptionJobRequest::getTags() const {
    return m_tags;
}
void OAIStartMedicalTranscriptionJobRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIStartMedicalTranscriptionJobRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIStartMedicalTranscriptionJobRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIStartMedicalTranscriptionJobRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_medical_transcription_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_sample_rate_hertz_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_encryption_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_encryption_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_identification_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_specialty.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartMedicalTranscriptionJobRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_medical_transcription_job_name_isValid && m_language_code_isValid && m_media_isValid && m_output_bucket_name_isValid && m_specialty_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
