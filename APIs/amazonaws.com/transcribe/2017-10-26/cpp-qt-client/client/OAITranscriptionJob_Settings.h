/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITranscriptionJob_Settings.h
 *
 * 
 */

#ifndef OAITranscriptionJob_Settings_H
#define OAITranscriptionJob_Settings_H

#include <QJsonObject>

#include "OAIVocabularyFilterMethod.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITranscriptionJob_Settings : public OAIObject {
public:
    OAITranscriptionJob_Settings();
    OAITranscriptionJob_Settings(QString json);
    ~OAITranscriptionJob_Settings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getVocabularyName() const;
    void setVocabularyName(const QString &vocabulary_name);
    bool is_vocabulary_name_Set() const;
    bool is_vocabulary_name_Valid() const;

    bool getShowSpeakerLabels() const;
    void setShowSpeakerLabels(const bool &show_speaker_labels);
    bool is_show_speaker_labels_Set() const;
    bool is_show_speaker_labels_Valid() const;

    qint32 getMaxSpeakerLabels() const;
    void setMaxSpeakerLabels(const qint32 &max_speaker_labels);
    bool is_max_speaker_labels_Set() const;
    bool is_max_speaker_labels_Valid() const;

    bool getChannelIdentification() const;
    void setChannelIdentification(const bool &channel_identification);
    bool is_channel_identification_Set() const;
    bool is_channel_identification_Valid() const;

    bool getShowAlternatives() const;
    void setShowAlternatives(const bool &show_alternatives);
    bool is_show_alternatives_Set() const;
    bool is_show_alternatives_Valid() const;

    qint32 getMaxAlternatives() const;
    void setMaxAlternatives(const qint32 &max_alternatives);
    bool is_max_alternatives_Set() const;
    bool is_max_alternatives_Valid() const;

    QString getVocabularyFilterName() const;
    void setVocabularyFilterName(const QString &vocabulary_filter_name);
    bool is_vocabulary_filter_name_Set() const;
    bool is_vocabulary_filter_name_Valid() const;

    OAIVocabularyFilterMethod getVocabularyFilterMethod() const;
    void setVocabularyFilterMethod(const OAIVocabularyFilterMethod &vocabulary_filter_method);
    bool is_vocabulary_filter_method_Set() const;
    bool is_vocabulary_filter_method_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_vocabulary_name;
    bool m_vocabulary_name_isSet;
    bool m_vocabulary_name_isValid;

    bool m_show_speaker_labels;
    bool m_show_speaker_labels_isSet;
    bool m_show_speaker_labels_isValid;

    qint32 m_max_speaker_labels;
    bool m_max_speaker_labels_isSet;
    bool m_max_speaker_labels_isValid;

    bool m_channel_identification;
    bool m_channel_identification_isSet;
    bool m_channel_identification_isValid;

    bool m_show_alternatives;
    bool m_show_alternatives_isSet;
    bool m_show_alternatives_isValid;

    qint32 m_max_alternatives;
    bool m_max_alternatives_isSet;
    bool m_max_alternatives_isValid;

    QString m_vocabulary_filter_name;
    bool m_vocabulary_filter_name_isSet;
    bool m_vocabulary_filter_name_isValid;

    OAIVocabularyFilterMethod m_vocabulary_filter_method;
    bool m_vocabulary_filter_method_isSet;
    bool m_vocabulary_filter_method_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITranscriptionJob_Settings)

#endif // OAITranscriptionJob_Settings_H
