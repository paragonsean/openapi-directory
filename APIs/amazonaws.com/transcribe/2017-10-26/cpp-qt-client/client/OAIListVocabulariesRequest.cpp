/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListVocabulariesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListVocabulariesRequest::OAIListVocabulariesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListVocabulariesRequest::OAIListVocabulariesRequest() {
    this->initializeModel();
}

OAIListVocabulariesRequest::~OAIListVocabulariesRequest() {}

void OAIListVocabulariesRequest::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_state_equals_isSet = false;
    m_state_equals_isValid = false;

    m_name_contains_isSet = false;
    m_name_contains_isValid = false;
}

void OAIListVocabulariesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListVocabulariesRequest::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_state_equals_isValid = ::OpenAPI::fromJsonValue(m_state_equals, json[QString("StateEquals")]);
    m_state_equals_isSet = !json[QString("StateEquals")].isNull() && m_state_equals_isValid;

    m_name_contains_isValid = ::OpenAPI::fromJsonValue(m_name_contains, json[QString("NameContains")]);
    m_name_contains_isSet = !json[QString("NameContains")].isNull() && m_name_contains_isValid;
}

QString OAIListVocabulariesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListVocabulariesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_state_equals.isSet()) {
        obj.insert(QString("StateEquals"), ::OpenAPI::toJsonValue(m_state_equals));
    }
    if (m_name_contains_isSet) {
        obj.insert(QString("NameContains"), ::OpenAPI::toJsonValue(m_name_contains));
    }
    return obj;
}

QString OAIListVocabulariesRequest::getNextToken() const {
    return m_next_token;
}
void OAIListVocabulariesRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListVocabulariesRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListVocabulariesRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListVocabulariesRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListVocabulariesRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListVocabulariesRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListVocabulariesRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

OAIVocabularyState OAIListVocabulariesRequest::getStateEquals() const {
    return m_state_equals;
}
void OAIListVocabulariesRequest::setStateEquals(const OAIVocabularyState &state_equals) {
    m_state_equals = state_equals;
    m_state_equals_isSet = true;
}

bool OAIListVocabulariesRequest::is_state_equals_Set() const{
    return m_state_equals_isSet;
}

bool OAIListVocabulariesRequest::is_state_equals_Valid() const{
    return m_state_equals_isValid;
}

QString OAIListVocabulariesRequest::getNameContains() const {
    return m_name_contains;
}
void OAIListVocabulariesRequest::setNameContains(const QString &name_contains) {
    m_name_contains = name_contains;
    m_name_contains_isSet = true;
}

bool OAIListVocabulariesRequest::is_name_contains_Set() const{
    return m_name_contains_isSet;
}

bool OAIListVocabulariesRequest::is_name_contains_Valid() const{
    return m_name_contains_isValid;
}

bool OAIListVocabulariesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_equals.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_contains_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListVocabulariesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
