/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRule_SentimentFilter.h
 *
 * 
 */

#ifndef OAIRule_SentimentFilter_H
#define OAIRule_SentimentFilter_H

#include <QJsonObject>

#include "OAIParticipantRole.h"
#include "OAISentimentFilter_AbsoluteTimeRange.h"
#include "OAISentimentFilter_RelativeTimeRange.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISentimentFilter_AbsoluteTimeRange;
class OAISentimentFilter_RelativeTimeRange;

class OAIRule_SentimentFilter : public OAIObject {
public:
    OAIRule_SentimentFilter();
    OAIRule_SentimentFilter(QString json);
    ~OAIRule_SentimentFilter() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getSentiments() const;
    void setSentiments(const QList &sentiments);
    bool is_sentiments_Set() const;
    bool is_sentiments_Valid() const;

    OAISentimentFilter_AbsoluteTimeRange getAbsoluteTimeRange() const;
    void setAbsoluteTimeRange(const OAISentimentFilter_AbsoluteTimeRange &absolute_time_range);
    bool is_absolute_time_range_Set() const;
    bool is_absolute_time_range_Valid() const;

    OAISentimentFilter_RelativeTimeRange getRelativeTimeRange() const;
    void setRelativeTimeRange(const OAISentimentFilter_RelativeTimeRange &relative_time_range);
    bool is_relative_time_range_Set() const;
    bool is_relative_time_range_Valid() const;

    OAIParticipantRole getParticipantRole() const;
    void setParticipantRole(const OAIParticipantRole &participant_role);
    bool is_participant_role_Set() const;
    bool is_participant_role_Valid() const;

    bool getNegate() const;
    void setNegate(const bool &negate);
    bool is_negate_Set() const;
    bool is_negate_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_sentiments;
    bool m_sentiments_isSet;
    bool m_sentiments_isValid;

    OAISentimentFilter_AbsoluteTimeRange m_absolute_time_range;
    bool m_absolute_time_range_isSet;
    bool m_absolute_time_range_isValid;

    OAISentimentFilter_RelativeTimeRange m_relative_time_range;
    bool m_relative_time_range_isSet;
    bool m_relative_time_range_isValid;

    OAIParticipantRole m_participant_role;
    bool m_participant_role_isSet;
    bool m_participant_role_isValid;

    bool m_negate;
    bool m_negate_isSet;
    bool m_negate_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRule_SentimentFilter)

#endif // OAIRule_SentimentFilter_H
