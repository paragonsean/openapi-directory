/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRule_NonTalkTimeFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRule_NonTalkTimeFilter::OAIRule_NonTalkTimeFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRule_NonTalkTimeFilter::OAIRule_NonTalkTimeFilter() {
    this->initializeModel();
}

OAIRule_NonTalkTimeFilter::~OAIRule_NonTalkTimeFilter() {}

void OAIRule_NonTalkTimeFilter::initializeModel() {

    m_threshold_isSet = false;
    m_threshold_isValid = false;

    m_absolute_time_range_isSet = false;
    m_absolute_time_range_isValid = false;

    m_relative_time_range_isSet = false;
    m_relative_time_range_isValid = false;

    m_negate_isSet = false;
    m_negate_isValid = false;
}

void OAIRule_NonTalkTimeFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRule_NonTalkTimeFilter::fromJsonObject(QJsonObject json) {

    m_threshold_isValid = ::OpenAPI::fromJsonValue(m_threshold, json[QString("Threshold")]);
    m_threshold_isSet = !json[QString("Threshold")].isNull() && m_threshold_isValid;

    m_absolute_time_range_isValid = ::OpenAPI::fromJsonValue(m_absolute_time_range, json[QString("AbsoluteTimeRange")]);
    m_absolute_time_range_isSet = !json[QString("AbsoluteTimeRange")].isNull() && m_absolute_time_range_isValid;

    m_relative_time_range_isValid = ::OpenAPI::fromJsonValue(m_relative_time_range, json[QString("RelativeTimeRange")]);
    m_relative_time_range_isSet = !json[QString("RelativeTimeRange")].isNull() && m_relative_time_range_isValid;

    m_negate_isValid = ::OpenAPI::fromJsonValue(m_negate, json[QString("Negate")]);
    m_negate_isSet = !json[QString("Negate")].isNull() && m_negate_isValid;
}

QString OAIRule_NonTalkTimeFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRule_NonTalkTimeFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_threshold_isSet) {
        obj.insert(QString("Threshold"), ::OpenAPI::toJsonValue(m_threshold));
    }
    if (m_absolute_time_range.isSet()) {
        obj.insert(QString("AbsoluteTimeRange"), ::OpenAPI::toJsonValue(m_absolute_time_range));
    }
    if (m_relative_time_range.isSet()) {
        obj.insert(QString("RelativeTimeRange"), ::OpenAPI::toJsonValue(m_relative_time_range));
    }
    if (m_negate_isSet) {
        obj.insert(QString("Negate"), ::OpenAPI::toJsonValue(m_negate));
    }
    return obj;
}

qint32 OAIRule_NonTalkTimeFilter::getThreshold() const {
    return m_threshold;
}
void OAIRule_NonTalkTimeFilter::setThreshold(const qint32 &threshold) {
    m_threshold = threshold;
    m_threshold_isSet = true;
}

bool OAIRule_NonTalkTimeFilter::is_threshold_Set() const{
    return m_threshold_isSet;
}

bool OAIRule_NonTalkTimeFilter::is_threshold_Valid() const{
    return m_threshold_isValid;
}

OAINonTalkTimeFilter_AbsoluteTimeRange OAIRule_NonTalkTimeFilter::getAbsoluteTimeRange() const {
    return m_absolute_time_range;
}
void OAIRule_NonTalkTimeFilter::setAbsoluteTimeRange(const OAINonTalkTimeFilter_AbsoluteTimeRange &absolute_time_range) {
    m_absolute_time_range = absolute_time_range;
    m_absolute_time_range_isSet = true;
}

bool OAIRule_NonTalkTimeFilter::is_absolute_time_range_Set() const{
    return m_absolute_time_range_isSet;
}

bool OAIRule_NonTalkTimeFilter::is_absolute_time_range_Valid() const{
    return m_absolute_time_range_isValid;
}

OAINonTalkTimeFilter_RelativeTimeRange OAIRule_NonTalkTimeFilter::getRelativeTimeRange() const {
    return m_relative_time_range;
}
void OAIRule_NonTalkTimeFilter::setRelativeTimeRange(const OAINonTalkTimeFilter_RelativeTimeRange &relative_time_range) {
    m_relative_time_range = relative_time_range;
    m_relative_time_range_isSet = true;
}

bool OAIRule_NonTalkTimeFilter::is_relative_time_range_Set() const{
    return m_relative_time_range_isSet;
}

bool OAIRule_NonTalkTimeFilter::is_relative_time_range_Valid() const{
    return m_relative_time_range_isValid;
}

bool OAIRule_NonTalkTimeFilter::getNegate() const {
    return m_negate;
}
void OAIRule_NonTalkTimeFilter::setNegate(const bool &negate) {
    m_negate = negate;
    m_negate_isSet = true;
}

bool OAIRule_NonTalkTimeFilter::is_negate_Set() const{
    return m_negate_isSet;
}

bool OAIRule_NonTalkTimeFilter::is_negate_Valid() const{
    return m_negate_isValid;
}

bool OAIRule_NonTalkTimeFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_absolute_time_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_time_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_negate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRule_NonTalkTimeFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
