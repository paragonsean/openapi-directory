/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPiiEntityType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPiiEntityType::OAIPiiEntityType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPiiEntityType::OAIPiiEntityType() {
    this->initializeModel();
}

OAIPiiEntityType::~OAIPiiEntityType() {}

void OAIPiiEntityType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPiiEntityType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPiiEntityType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("BANK_ACCOUNT_NUMBER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPiiEntityType::BANK_ACCOUNT_NUMBER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BANK_ROUTING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPiiEntityType::BANK_ROUTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CREDIT_DEBIT_NUMBER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPiiEntityType::CREDIT_DEBIT_NUMBER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CREDIT_DEBIT_CVV", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPiiEntityType::CREDIT_DEBIT_CVV;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CREDIT_DEBIT_EXPIRY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPiiEntityType::CREDIT_DEBIT_EXPIRY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PIN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPiiEntityType::PIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EMAIL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPiiEntityType::EMAIL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADDRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPiiEntityType::ADDRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NAME", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPiiEntityType::NAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PHONE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPiiEntityType::PHONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SSN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPiiEntityType::SSN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ALL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPiiEntityType::ALL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPiiEntityType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPiiEntityType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPiiEntityType::BANK_ACCOUNT_NUMBER:
            val = "BANK_ACCOUNT_NUMBER";
            break;
        case eOAIPiiEntityType::BANK_ROUTING:
            val = "BANK_ROUTING";
            break;
        case eOAIPiiEntityType::CREDIT_DEBIT_NUMBER:
            val = "CREDIT_DEBIT_NUMBER";
            break;
        case eOAIPiiEntityType::CREDIT_DEBIT_CVV:
            val = "CREDIT_DEBIT_CVV";
            break;
        case eOAIPiiEntityType::CREDIT_DEBIT_EXPIRY:
            val = "CREDIT_DEBIT_EXPIRY";
            break;
        case eOAIPiiEntityType::PIN:
            val = "PIN";
            break;
        case eOAIPiiEntityType::EMAIL:
            val = "EMAIL";
            break;
        case eOAIPiiEntityType::ADDRESS:
            val = "ADDRESS";
            break;
        case eOAIPiiEntityType::NAME:
            val = "NAME";
            break;
        case eOAIPiiEntityType::PHONE:
            val = "PHONE";
            break;
        case eOAIPiiEntityType::SSN:
            val = "SSN";
            break;
        case eOAIPiiEntityType::ALL:
            val = "ALL";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPiiEntityType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPiiEntityType::eOAIPiiEntityType OAIPiiEntityType::getValue() const {
    return m_value;
}

void OAIPiiEntityType::setValue(const OAIPiiEntityType::eOAIPiiEntityType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPiiEntityType::isSet() const {
    
    return m_value_isSet;
}

bool OAIPiiEntityType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
