/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISentimentFilter_RelativeTimeRange.h
 *
 * 
 */

#ifndef OAISentimentFilter_RelativeTimeRange_H
#define OAISentimentFilter_RelativeTimeRange_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISentimentFilter_RelativeTimeRange : public OAIObject {
public:
    OAISentimentFilter_RelativeTimeRange();
    OAISentimentFilter_RelativeTimeRange(QString json);
    ~OAISentimentFilter_RelativeTimeRange() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getStartPercentage() const;
    void setStartPercentage(const qint32 &start_percentage);
    bool is_start_percentage_Set() const;
    bool is_start_percentage_Valid() const;

    qint32 getEndPercentage() const;
    void setEndPercentage(const qint32 &end_percentage);
    bool is_end_percentage_Set() const;
    bool is_end_percentage_Valid() const;

    qint32 getFirst() const;
    void setFirst(const qint32 &first);
    bool is_first_Set() const;
    bool is_first_Valid() const;

    qint32 getLast() const;
    void setLast(const qint32 &last);
    bool is_last_Set() const;
    bool is_last_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_start_percentage;
    bool m_start_percentage_isSet;
    bool m_start_percentage_isValid;

    qint32 m_end_percentage;
    bool m_end_percentage_isSet;
    bool m_end_percentage_isValid;

    qint32 m_first;
    bool m_first_isSet;
    bool m_first_isValid;

    qint32 m_last;
    bool m_last_isSet;
    bool m_last_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISentimentFilter_RelativeTimeRange)

#endif // OAISentimentFilter_RelativeTimeRange_H
