/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartTranscriptionJobRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartTranscriptionJobRequest::OAIStartTranscriptionJobRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartTranscriptionJobRequest::OAIStartTranscriptionJobRequest() {
    this->initializeModel();
}

OAIStartTranscriptionJobRequest::~OAIStartTranscriptionJobRequest() {}

void OAIStartTranscriptionJobRequest::initializeModel() {

    m_transcription_job_name_isSet = false;
    m_transcription_job_name_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_media_sample_rate_hertz_isSet = false;
    m_media_sample_rate_hertz_isValid = false;

    m_media_format_isSet = false;
    m_media_format_isValid = false;

    m_media_isSet = false;
    m_media_isValid = false;

    m_output_bucket_name_isSet = false;
    m_output_bucket_name_isValid = false;

    m_output_key_isSet = false;
    m_output_key_isValid = false;

    m_output_encryption_kms_key_id_isSet = false;
    m_output_encryption_kms_key_id_isValid = false;

    m_kms_encryption_context_isSet = false;
    m_kms_encryption_context_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_model_settings_isSet = false;
    m_model_settings_isValid = false;

    m_job_execution_settings_isSet = false;
    m_job_execution_settings_isValid = false;

    m_content_redaction_isSet = false;
    m_content_redaction_isValid = false;

    m_identify_language_isSet = false;
    m_identify_language_isValid = false;

    m_identify_multiple_languages_isSet = false;
    m_identify_multiple_languages_isValid = false;

    m_language_options_isSet = false;
    m_language_options_isValid = false;

    m_subtitles_isSet = false;
    m_subtitles_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_language_id_settings_isSet = false;
    m_language_id_settings_isValid = false;

    m_toxicity_detection_isSet = false;
    m_toxicity_detection_isValid = false;
}

void OAIStartTranscriptionJobRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartTranscriptionJobRequest::fromJsonObject(QJsonObject json) {

    m_transcription_job_name_isValid = ::OpenAPI::fromJsonValue(m_transcription_job_name, json[QString("TranscriptionJobName")]);
    m_transcription_job_name_isSet = !json[QString("TranscriptionJobName")].isNull() && m_transcription_job_name_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("LanguageCode")]);
    m_language_code_isSet = !json[QString("LanguageCode")].isNull() && m_language_code_isValid;

    m_media_sample_rate_hertz_isValid = ::OpenAPI::fromJsonValue(m_media_sample_rate_hertz, json[QString("MediaSampleRateHertz")]);
    m_media_sample_rate_hertz_isSet = !json[QString("MediaSampleRateHertz")].isNull() && m_media_sample_rate_hertz_isValid;

    m_media_format_isValid = ::OpenAPI::fromJsonValue(m_media_format, json[QString("MediaFormat")]);
    m_media_format_isSet = !json[QString("MediaFormat")].isNull() && m_media_format_isValid;

    m_media_isValid = ::OpenAPI::fromJsonValue(m_media, json[QString("Media")]);
    m_media_isSet = !json[QString("Media")].isNull() && m_media_isValid;

    m_output_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_output_bucket_name, json[QString("OutputBucketName")]);
    m_output_bucket_name_isSet = !json[QString("OutputBucketName")].isNull() && m_output_bucket_name_isValid;

    m_output_key_isValid = ::OpenAPI::fromJsonValue(m_output_key, json[QString("OutputKey")]);
    m_output_key_isSet = !json[QString("OutputKey")].isNull() && m_output_key_isValid;

    m_output_encryption_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_output_encryption_kms_key_id, json[QString("OutputEncryptionKMSKeyId")]);
    m_output_encryption_kms_key_id_isSet = !json[QString("OutputEncryptionKMSKeyId")].isNull() && m_output_encryption_kms_key_id_isValid;

    m_kms_encryption_context_isValid = ::OpenAPI::fromJsonValue(m_kms_encryption_context, json[QString("KMSEncryptionContext")]);
    m_kms_encryption_context_isSet = !json[QString("KMSEncryptionContext")].isNull() && m_kms_encryption_context_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("Settings")]);
    m_settings_isSet = !json[QString("Settings")].isNull() && m_settings_isValid;

    m_model_settings_isValid = ::OpenAPI::fromJsonValue(m_model_settings, json[QString("ModelSettings")]);
    m_model_settings_isSet = !json[QString("ModelSettings")].isNull() && m_model_settings_isValid;

    m_job_execution_settings_isValid = ::OpenAPI::fromJsonValue(m_job_execution_settings, json[QString("JobExecutionSettings")]);
    m_job_execution_settings_isSet = !json[QString("JobExecutionSettings")].isNull() && m_job_execution_settings_isValid;

    m_content_redaction_isValid = ::OpenAPI::fromJsonValue(m_content_redaction, json[QString("ContentRedaction")]);
    m_content_redaction_isSet = !json[QString("ContentRedaction")].isNull() && m_content_redaction_isValid;

    m_identify_language_isValid = ::OpenAPI::fromJsonValue(m_identify_language, json[QString("IdentifyLanguage")]);
    m_identify_language_isSet = !json[QString("IdentifyLanguage")].isNull() && m_identify_language_isValid;

    m_identify_multiple_languages_isValid = ::OpenAPI::fromJsonValue(m_identify_multiple_languages, json[QString("IdentifyMultipleLanguages")]);
    m_identify_multiple_languages_isSet = !json[QString("IdentifyMultipleLanguages")].isNull() && m_identify_multiple_languages_isValid;

    m_language_options_isValid = ::OpenAPI::fromJsonValue(m_language_options, json[QString("LanguageOptions")]);
    m_language_options_isSet = !json[QString("LanguageOptions")].isNull() && m_language_options_isValid;

    m_subtitles_isValid = ::OpenAPI::fromJsonValue(m_subtitles, json[QString("Subtitles")]);
    m_subtitles_isSet = !json[QString("Subtitles")].isNull() && m_subtitles_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_language_id_settings_isValid = ::OpenAPI::fromJsonValue(m_language_id_settings, json[QString("LanguageIdSettings")]);
    m_language_id_settings_isSet = !json[QString("LanguageIdSettings")].isNull() && m_language_id_settings_isValid;

    m_toxicity_detection_isValid = ::OpenAPI::fromJsonValue(m_toxicity_detection, json[QString("ToxicityDetection")]);
    m_toxicity_detection_isSet = !json[QString("ToxicityDetection")].isNull() && m_toxicity_detection_isValid;
}

QString OAIStartTranscriptionJobRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartTranscriptionJobRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_transcription_job_name_isSet) {
        obj.insert(QString("TranscriptionJobName"), ::OpenAPI::toJsonValue(m_transcription_job_name));
    }
    if (m_language_code.isSet()) {
        obj.insert(QString("LanguageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_media_sample_rate_hertz_isSet) {
        obj.insert(QString("MediaSampleRateHertz"), ::OpenAPI::toJsonValue(m_media_sample_rate_hertz));
    }
    if (m_media_format.isSet()) {
        obj.insert(QString("MediaFormat"), ::OpenAPI::toJsonValue(m_media_format));
    }
    if (m_media.isSet()) {
        obj.insert(QString("Media"), ::OpenAPI::toJsonValue(m_media));
    }
    if (m_output_bucket_name_isSet) {
        obj.insert(QString("OutputBucketName"), ::OpenAPI::toJsonValue(m_output_bucket_name));
    }
    if (m_output_key_isSet) {
        obj.insert(QString("OutputKey"), ::OpenAPI::toJsonValue(m_output_key));
    }
    if (m_output_encryption_kms_key_id_isSet) {
        obj.insert(QString("OutputEncryptionKMSKeyId"), ::OpenAPI::toJsonValue(m_output_encryption_kms_key_id));
    }
    if (m_kms_encryption_context.isSet()) {
        obj.insert(QString("KMSEncryptionContext"), ::OpenAPI::toJsonValue(m_kms_encryption_context));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("Settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_model_settings.isSet()) {
        obj.insert(QString("ModelSettings"), ::OpenAPI::toJsonValue(m_model_settings));
    }
    if (m_job_execution_settings.isSet()) {
        obj.insert(QString("JobExecutionSettings"), ::OpenAPI::toJsonValue(m_job_execution_settings));
    }
    if (m_content_redaction.isSet()) {
        obj.insert(QString("ContentRedaction"), ::OpenAPI::toJsonValue(m_content_redaction));
    }
    if (m_identify_language_isSet) {
        obj.insert(QString("IdentifyLanguage"), ::OpenAPI::toJsonValue(m_identify_language));
    }
    if (m_identify_multiple_languages_isSet) {
        obj.insert(QString("IdentifyMultipleLanguages"), ::OpenAPI::toJsonValue(m_identify_multiple_languages));
    }
    if (m_language_options.isSet()) {
        obj.insert(QString("LanguageOptions"), ::OpenAPI::toJsonValue(m_language_options));
    }
    if (m_subtitles.isSet()) {
        obj.insert(QString("Subtitles"), ::OpenAPI::toJsonValue(m_subtitles));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_language_id_settings.isSet()) {
        obj.insert(QString("LanguageIdSettings"), ::OpenAPI::toJsonValue(m_language_id_settings));
    }
    if (m_toxicity_detection.isSet()) {
        obj.insert(QString("ToxicityDetection"), ::OpenAPI::toJsonValue(m_toxicity_detection));
    }
    return obj;
}

QString OAIStartTranscriptionJobRequest::getTranscriptionJobName() const {
    return m_transcription_job_name;
}
void OAIStartTranscriptionJobRequest::setTranscriptionJobName(const QString &transcription_job_name) {
    m_transcription_job_name = transcription_job_name;
    m_transcription_job_name_isSet = true;
}

bool OAIStartTranscriptionJobRequest::is_transcription_job_name_Set() const{
    return m_transcription_job_name_isSet;
}

bool OAIStartTranscriptionJobRequest::is_transcription_job_name_Valid() const{
    return m_transcription_job_name_isValid;
}

OAILanguageCode OAIStartTranscriptionJobRequest::getLanguageCode() const {
    return m_language_code;
}
void OAIStartTranscriptionJobRequest::setLanguageCode(const OAILanguageCode &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIStartTranscriptionJobRequest::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIStartTranscriptionJobRequest::is_language_code_Valid() const{
    return m_language_code_isValid;
}

qint32 OAIStartTranscriptionJobRequest::getMediaSampleRateHertz() const {
    return m_media_sample_rate_hertz;
}
void OAIStartTranscriptionJobRequest::setMediaSampleRateHertz(const qint32 &media_sample_rate_hertz) {
    m_media_sample_rate_hertz = media_sample_rate_hertz;
    m_media_sample_rate_hertz_isSet = true;
}

bool OAIStartTranscriptionJobRequest::is_media_sample_rate_hertz_Set() const{
    return m_media_sample_rate_hertz_isSet;
}

bool OAIStartTranscriptionJobRequest::is_media_sample_rate_hertz_Valid() const{
    return m_media_sample_rate_hertz_isValid;
}

OAIMediaFormat OAIStartTranscriptionJobRequest::getMediaFormat() const {
    return m_media_format;
}
void OAIStartTranscriptionJobRequest::setMediaFormat(const OAIMediaFormat &media_format) {
    m_media_format = media_format;
    m_media_format_isSet = true;
}

bool OAIStartTranscriptionJobRequest::is_media_format_Set() const{
    return m_media_format_isSet;
}

bool OAIStartTranscriptionJobRequest::is_media_format_Valid() const{
    return m_media_format_isValid;
}

OAIStartTranscriptionJobRequest_Media OAIStartTranscriptionJobRequest::getMedia() const {
    return m_media;
}
void OAIStartTranscriptionJobRequest::setMedia(const OAIStartTranscriptionJobRequest_Media &media) {
    m_media = media;
    m_media_isSet = true;
}

bool OAIStartTranscriptionJobRequest::is_media_Set() const{
    return m_media_isSet;
}

bool OAIStartTranscriptionJobRequest::is_media_Valid() const{
    return m_media_isValid;
}

QString OAIStartTranscriptionJobRequest::getOutputBucketName() const {
    return m_output_bucket_name;
}
void OAIStartTranscriptionJobRequest::setOutputBucketName(const QString &output_bucket_name) {
    m_output_bucket_name = output_bucket_name;
    m_output_bucket_name_isSet = true;
}

bool OAIStartTranscriptionJobRequest::is_output_bucket_name_Set() const{
    return m_output_bucket_name_isSet;
}

bool OAIStartTranscriptionJobRequest::is_output_bucket_name_Valid() const{
    return m_output_bucket_name_isValid;
}

QString OAIStartTranscriptionJobRequest::getOutputKey() const {
    return m_output_key;
}
void OAIStartTranscriptionJobRequest::setOutputKey(const QString &output_key) {
    m_output_key = output_key;
    m_output_key_isSet = true;
}

bool OAIStartTranscriptionJobRequest::is_output_key_Set() const{
    return m_output_key_isSet;
}

bool OAIStartTranscriptionJobRequest::is_output_key_Valid() const{
    return m_output_key_isValid;
}

QString OAIStartTranscriptionJobRequest::getOutputEncryptionKmsKeyId() const {
    return m_output_encryption_kms_key_id;
}
void OAIStartTranscriptionJobRequest::setOutputEncryptionKmsKeyId(const QString &output_encryption_kms_key_id) {
    m_output_encryption_kms_key_id = output_encryption_kms_key_id;
    m_output_encryption_kms_key_id_isSet = true;
}

bool OAIStartTranscriptionJobRequest::is_output_encryption_kms_key_id_Set() const{
    return m_output_encryption_kms_key_id_isSet;
}

bool OAIStartTranscriptionJobRequest::is_output_encryption_kms_key_id_Valid() const{
    return m_output_encryption_kms_key_id_isValid;
}

QMap OAIStartTranscriptionJobRequest::getKmsEncryptionContext() const {
    return m_kms_encryption_context;
}
void OAIStartTranscriptionJobRequest::setKmsEncryptionContext(const QMap &kms_encryption_context) {
    m_kms_encryption_context = kms_encryption_context;
    m_kms_encryption_context_isSet = true;
}

bool OAIStartTranscriptionJobRequest::is_kms_encryption_context_Set() const{
    return m_kms_encryption_context_isSet;
}

bool OAIStartTranscriptionJobRequest::is_kms_encryption_context_Valid() const{
    return m_kms_encryption_context_isValid;
}

OAIStartTranscriptionJobRequest_Settings OAIStartTranscriptionJobRequest::getSettings() const {
    return m_settings;
}
void OAIStartTranscriptionJobRequest::setSettings(const OAIStartTranscriptionJobRequest_Settings &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAIStartTranscriptionJobRequest::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIStartTranscriptionJobRequest::is_settings_Valid() const{
    return m_settings_isValid;
}

OAIStartTranscriptionJobRequest_ModelSettings OAIStartTranscriptionJobRequest::getModelSettings() const {
    return m_model_settings;
}
void OAIStartTranscriptionJobRequest::setModelSettings(const OAIStartTranscriptionJobRequest_ModelSettings &model_settings) {
    m_model_settings = model_settings;
    m_model_settings_isSet = true;
}

bool OAIStartTranscriptionJobRequest::is_model_settings_Set() const{
    return m_model_settings_isSet;
}

bool OAIStartTranscriptionJobRequest::is_model_settings_Valid() const{
    return m_model_settings_isValid;
}

OAIStartTranscriptionJobRequest_JobExecutionSettings OAIStartTranscriptionJobRequest::getJobExecutionSettings() const {
    return m_job_execution_settings;
}
void OAIStartTranscriptionJobRequest::setJobExecutionSettings(const OAIStartTranscriptionJobRequest_JobExecutionSettings &job_execution_settings) {
    m_job_execution_settings = job_execution_settings;
    m_job_execution_settings_isSet = true;
}

bool OAIStartTranscriptionJobRequest::is_job_execution_settings_Set() const{
    return m_job_execution_settings_isSet;
}

bool OAIStartTranscriptionJobRequest::is_job_execution_settings_Valid() const{
    return m_job_execution_settings_isValid;
}

OAIStartTranscriptionJobRequest_ContentRedaction OAIStartTranscriptionJobRequest::getContentRedaction() const {
    return m_content_redaction;
}
void OAIStartTranscriptionJobRequest::setContentRedaction(const OAIStartTranscriptionJobRequest_ContentRedaction &content_redaction) {
    m_content_redaction = content_redaction;
    m_content_redaction_isSet = true;
}

bool OAIStartTranscriptionJobRequest::is_content_redaction_Set() const{
    return m_content_redaction_isSet;
}

bool OAIStartTranscriptionJobRequest::is_content_redaction_Valid() const{
    return m_content_redaction_isValid;
}

bool OAIStartTranscriptionJobRequest::getIdentifyLanguage() const {
    return m_identify_language;
}
void OAIStartTranscriptionJobRequest::setIdentifyLanguage(const bool &identify_language) {
    m_identify_language = identify_language;
    m_identify_language_isSet = true;
}

bool OAIStartTranscriptionJobRequest::is_identify_language_Set() const{
    return m_identify_language_isSet;
}

bool OAIStartTranscriptionJobRequest::is_identify_language_Valid() const{
    return m_identify_language_isValid;
}

bool OAIStartTranscriptionJobRequest::getIdentifyMultipleLanguages() const {
    return m_identify_multiple_languages;
}
void OAIStartTranscriptionJobRequest::setIdentifyMultipleLanguages(const bool &identify_multiple_languages) {
    m_identify_multiple_languages = identify_multiple_languages;
    m_identify_multiple_languages_isSet = true;
}

bool OAIStartTranscriptionJobRequest::is_identify_multiple_languages_Set() const{
    return m_identify_multiple_languages_isSet;
}

bool OAIStartTranscriptionJobRequest::is_identify_multiple_languages_Valid() const{
    return m_identify_multiple_languages_isValid;
}

QList OAIStartTranscriptionJobRequest::getLanguageOptions() const {
    return m_language_options;
}
void OAIStartTranscriptionJobRequest::setLanguageOptions(const QList &language_options) {
    m_language_options = language_options;
    m_language_options_isSet = true;
}

bool OAIStartTranscriptionJobRequest::is_language_options_Set() const{
    return m_language_options_isSet;
}

bool OAIStartTranscriptionJobRequest::is_language_options_Valid() const{
    return m_language_options_isValid;
}

OAIStartTranscriptionJobRequest_Subtitles OAIStartTranscriptionJobRequest::getSubtitles() const {
    return m_subtitles;
}
void OAIStartTranscriptionJobRequest::setSubtitles(const OAIStartTranscriptionJobRequest_Subtitles &subtitles) {
    m_subtitles = subtitles;
    m_subtitles_isSet = true;
}

bool OAIStartTranscriptionJobRequest::is_subtitles_Set() const{
    return m_subtitles_isSet;
}

bool OAIStartTranscriptionJobRequest::is_subtitles_Valid() const{
    return m_subtitles_isValid;
}

QList OAIStartTranscriptionJobRequest::getTags() const {
    return m_tags;
}
void OAIStartTranscriptionJobRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIStartTranscriptionJobRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIStartTranscriptionJobRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

QMap OAIStartTranscriptionJobRequest::getLanguageIdSettings() const {
    return m_language_id_settings;
}
void OAIStartTranscriptionJobRequest::setLanguageIdSettings(const QMap &language_id_settings) {
    m_language_id_settings = language_id_settings;
    m_language_id_settings_isSet = true;
}

bool OAIStartTranscriptionJobRequest::is_language_id_settings_Set() const{
    return m_language_id_settings_isSet;
}

bool OAIStartTranscriptionJobRequest::is_language_id_settings_Valid() const{
    return m_language_id_settings_isValid;
}

QList OAIStartTranscriptionJobRequest::getToxicityDetection() const {
    return m_toxicity_detection;
}
void OAIStartTranscriptionJobRequest::setToxicityDetection(const QList &toxicity_detection) {
    m_toxicity_detection = toxicity_detection;
    m_toxicity_detection_isSet = true;
}

bool OAIStartTranscriptionJobRequest::is_toxicity_detection_Set() const{
    return m_toxicity_detection_isSet;
}

bool OAIStartTranscriptionJobRequest::is_toxicity_detection_Valid() const{
    return m_toxicity_detection_isValid;
}

bool OAIStartTranscriptionJobRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_transcription_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_sample_rate_hertz_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_encryption_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_encryption_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_execution_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_redaction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identify_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identify_multiple_languages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitles.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_id_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_toxicity_detection.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartTranscriptionJobRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_transcription_job_name_isValid && m_media_isValid && true;
}

} // namespace OpenAPI
