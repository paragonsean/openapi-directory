/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICallAnalyticsJobSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICallAnalyticsJobSummary::OAICallAnalyticsJobSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICallAnalyticsJobSummary::OAICallAnalyticsJobSummary() {
    this->initializeModel();
}

OAICallAnalyticsJobSummary::~OAICallAnalyticsJobSummary() {}

void OAICallAnalyticsJobSummary::initializeModel() {

    m_call_analytics_job_name_isSet = false;
    m_call_analytics_job_name_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_completion_time_isSet = false;
    m_completion_time_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_call_analytics_job_status_isSet = false;
    m_call_analytics_job_status_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;
}

void OAICallAnalyticsJobSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICallAnalyticsJobSummary::fromJsonObject(QJsonObject json) {

    m_call_analytics_job_name_isValid = ::OpenAPI::fromJsonValue(m_call_analytics_job_name, json[QString("CallAnalyticsJobName")]);
    m_call_analytics_job_name_isSet = !json[QString("CallAnalyticsJobName")].isNull() && m_call_analytics_job_name_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_completion_time_isValid = ::OpenAPI::fromJsonValue(m_completion_time, json[QString("CompletionTime")]);
    m_completion_time_isSet = !json[QString("CompletionTime")].isNull() && m_completion_time_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("LanguageCode")]);
    m_language_code_isSet = !json[QString("LanguageCode")].isNull() && m_language_code_isValid;

    m_call_analytics_job_status_isValid = ::OpenAPI::fromJsonValue(m_call_analytics_job_status, json[QString("CallAnalyticsJobStatus")]);
    m_call_analytics_job_status_isSet = !json[QString("CallAnalyticsJobStatus")].isNull() && m_call_analytics_job_status_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("FailureReason")]);
    m_failure_reason_isSet = !json[QString("FailureReason")].isNull() && m_failure_reason_isValid;
}

QString OAICallAnalyticsJobSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICallAnalyticsJobSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_call_analytics_job_name_isSet) {
        obj.insert(QString("CallAnalyticsJobName"), ::OpenAPI::toJsonValue(m_call_analytics_job_name));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_completion_time_isSet) {
        obj.insert(QString("CompletionTime"), ::OpenAPI::toJsonValue(m_completion_time));
    }
    if (m_language_code.isSet()) {
        obj.insert(QString("LanguageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_call_analytics_job_status.isSet()) {
        obj.insert(QString("CallAnalyticsJobStatus"), ::OpenAPI::toJsonValue(m_call_analytics_job_status));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("FailureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    return obj;
}

QString OAICallAnalyticsJobSummary::getCallAnalyticsJobName() const {
    return m_call_analytics_job_name;
}
void OAICallAnalyticsJobSummary::setCallAnalyticsJobName(const QString &call_analytics_job_name) {
    m_call_analytics_job_name = call_analytics_job_name;
    m_call_analytics_job_name_isSet = true;
}

bool OAICallAnalyticsJobSummary::is_call_analytics_job_name_Set() const{
    return m_call_analytics_job_name_isSet;
}

bool OAICallAnalyticsJobSummary::is_call_analytics_job_name_Valid() const{
    return m_call_analytics_job_name_isValid;
}

QDateTime OAICallAnalyticsJobSummary::getCreationTime() const {
    return m_creation_time;
}
void OAICallAnalyticsJobSummary::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAICallAnalyticsJobSummary::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAICallAnalyticsJobSummary::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAICallAnalyticsJobSummary::getStartTime() const {
    return m_start_time;
}
void OAICallAnalyticsJobSummary::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAICallAnalyticsJobSummary::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAICallAnalyticsJobSummary::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAICallAnalyticsJobSummary::getCompletionTime() const {
    return m_completion_time;
}
void OAICallAnalyticsJobSummary::setCompletionTime(const QDateTime &completion_time) {
    m_completion_time = completion_time;
    m_completion_time_isSet = true;
}

bool OAICallAnalyticsJobSummary::is_completion_time_Set() const{
    return m_completion_time_isSet;
}

bool OAICallAnalyticsJobSummary::is_completion_time_Valid() const{
    return m_completion_time_isValid;
}

OAILanguageCode OAICallAnalyticsJobSummary::getLanguageCode() const {
    return m_language_code;
}
void OAICallAnalyticsJobSummary::setLanguageCode(const OAILanguageCode &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAICallAnalyticsJobSummary::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAICallAnalyticsJobSummary::is_language_code_Valid() const{
    return m_language_code_isValid;
}

OAICallAnalyticsJobStatus OAICallAnalyticsJobSummary::getCallAnalyticsJobStatus() const {
    return m_call_analytics_job_status;
}
void OAICallAnalyticsJobSummary::setCallAnalyticsJobStatus(const OAICallAnalyticsJobStatus &call_analytics_job_status) {
    m_call_analytics_job_status = call_analytics_job_status;
    m_call_analytics_job_status_isSet = true;
}

bool OAICallAnalyticsJobSummary::is_call_analytics_job_status_Set() const{
    return m_call_analytics_job_status_isSet;
}

bool OAICallAnalyticsJobSummary::is_call_analytics_job_status_Valid() const{
    return m_call_analytics_job_status_isValid;
}

QString OAICallAnalyticsJobSummary::getFailureReason() const {
    return m_failure_reason;
}
void OAICallAnalyticsJobSummary::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAICallAnalyticsJobSummary::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAICallAnalyticsJobSummary::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

bool OAICallAnalyticsJobSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_call_analytics_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_analytics_job_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICallAnalyticsJobSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
