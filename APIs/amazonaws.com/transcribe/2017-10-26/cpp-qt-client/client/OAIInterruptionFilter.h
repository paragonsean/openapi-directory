/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInterruptionFilter.h
 *
 * &lt;p&gt;Flag the presence or absence of interruptions in your Call Analytics transcription output.&lt;/p&gt; &lt;p&gt;Rules using &lt;code&gt;InterruptionFilter&lt;/code&gt; are designed to match:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Instances where an agent interrupts a customer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Instances where a customer interrupts an agent&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Either participant interrupting the other&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A lack of interruptions&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/transcribe/latest/dg/tca-categories-batch.html#tca-rules-batch\&quot;&gt;Rule criteria for post-call categories&lt;/a&gt; for usage examples.&lt;/p&gt;
 */

#ifndef OAIInterruptionFilter_H
#define OAIInterruptionFilter_H

#include <QJsonObject>

#include "OAIInterruptionFilter_AbsoluteTimeRange.h"
#include "OAIInterruptionFilter_RelativeTimeRange.h"
#include "OAIParticipantRole.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIInterruptionFilter_AbsoluteTimeRange;
class OAIInterruptionFilter_RelativeTimeRange;

class OAIInterruptionFilter : public OAIObject {
public:
    OAIInterruptionFilter();
    OAIInterruptionFilter(QString json);
    ~OAIInterruptionFilter() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getThreshold() const;
    void setThreshold(const qint32 &threshold);
    bool is_threshold_Set() const;
    bool is_threshold_Valid() const;

    OAIParticipantRole getParticipantRole() const;
    void setParticipantRole(const OAIParticipantRole &participant_role);
    bool is_participant_role_Set() const;
    bool is_participant_role_Valid() const;

    OAIInterruptionFilter_AbsoluteTimeRange getAbsoluteTimeRange() const;
    void setAbsoluteTimeRange(const OAIInterruptionFilter_AbsoluteTimeRange &absolute_time_range);
    bool is_absolute_time_range_Set() const;
    bool is_absolute_time_range_Valid() const;

    OAIInterruptionFilter_RelativeTimeRange getRelativeTimeRange() const;
    void setRelativeTimeRange(const OAIInterruptionFilter_RelativeTimeRange &relative_time_range);
    bool is_relative_time_range_Set() const;
    bool is_relative_time_range_Valid() const;

    bool getNegate() const;
    void setNegate(const bool &negate);
    bool is_negate_Set() const;
    bool is_negate_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_threshold;
    bool m_threshold_isSet;
    bool m_threshold_isValid;

    OAIParticipantRole m_participant_role;
    bool m_participant_role_isSet;
    bool m_participant_role_isValid;

    OAIInterruptionFilter_AbsoluteTimeRange m_absolute_time_range;
    bool m_absolute_time_range_isSet;
    bool m_absolute_time_range_isValid;

    OAIInterruptionFilter_RelativeTimeRange m_relative_time_range;
    bool m_relative_time_range_isSet;
    bool m_relative_time_range_isValid;

    bool m_negate;
    bool m_negate_isSet;
    bool m_negate_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInterruptionFilter)

#endif // OAIInterruptionFilter_H
