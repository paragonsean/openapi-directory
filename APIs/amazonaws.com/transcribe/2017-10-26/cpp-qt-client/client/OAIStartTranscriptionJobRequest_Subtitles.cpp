/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartTranscriptionJobRequest_Subtitles.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartTranscriptionJobRequest_Subtitles::OAIStartTranscriptionJobRequest_Subtitles(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartTranscriptionJobRequest_Subtitles::OAIStartTranscriptionJobRequest_Subtitles() {
    this->initializeModel();
}

OAIStartTranscriptionJobRequest_Subtitles::~OAIStartTranscriptionJobRequest_Subtitles() {}

void OAIStartTranscriptionJobRequest_Subtitles::initializeModel() {

    m_formats_isSet = false;
    m_formats_isValid = false;

    m_output_start_index_isSet = false;
    m_output_start_index_isValid = false;
}

void OAIStartTranscriptionJobRequest_Subtitles::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartTranscriptionJobRequest_Subtitles::fromJsonObject(QJsonObject json) {

    m_formats_isValid = ::OpenAPI::fromJsonValue(m_formats, json[QString("Formats")]);
    m_formats_isSet = !json[QString("Formats")].isNull() && m_formats_isValid;

    m_output_start_index_isValid = ::OpenAPI::fromJsonValue(m_output_start_index, json[QString("OutputStartIndex")]);
    m_output_start_index_isSet = !json[QString("OutputStartIndex")].isNull() && m_output_start_index_isValid;
}

QString OAIStartTranscriptionJobRequest_Subtitles::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartTranscriptionJobRequest_Subtitles::asJsonObject() const {
    QJsonObject obj;
    if (m_formats.isSet()) {
        obj.insert(QString("Formats"), ::OpenAPI::toJsonValue(m_formats));
    }
    if (m_output_start_index_isSet) {
        obj.insert(QString("OutputStartIndex"), ::OpenAPI::toJsonValue(m_output_start_index));
    }
    return obj;
}

QList OAIStartTranscriptionJobRequest_Subtitles::getFormats() const {
    return m_formats;
}
void OAIStartTranscriptionJobRequest_Subtitles::setFormats(const QList &formats) {
    m_formats = formats;
    m_formats_isSet = true;
}

bool OAIStartTranscriptionJobRequest_Subtitles::is_formats_Set() const{
    return m_formats_isSet;
}

bool OAIStartTranscriptionJobRequest_Subtitles::is_formats_Valid() const{
    return m_formats_isValid;
}

qint32 OAIStartTranscriptionJobRequest_Subtitles::getOutputStartIndex() const {
    return m_output_start_index;
}
void OAIStartTranscriptionJobRequest_Subtitles::setOutputStartIndex(const qint32 &output_start_index) {
    m_output_start_index = output_start_index;
    m_output_start_index_isSet = true;
}

bool OAIStartTranscriptionJobRequest_Subtitles::is_output_start_index_Set() const{
    return m_output_start_index_isSet;
}

bool OAIStartTranscriptionJobRequest_Subtitles::is_output_start_index_Valid() const{
    return m_output_start_index_isValid;
}

bool OAIStartTranscriptionJobRequest_Subtitles::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_formats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_start_index_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartTranscriptionJobRequest_Subtitles::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
