/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITranscriptFilter_AbsoluteTimeRange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITranscriptFilter_AbsoluteTimeRange::OAITranscriptFilter_AbsoluteTimeRange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITranscriptFilter_AbsoluteTimeRange::OAITranscriptFilter_AbsoluteTimeRange() {
    this->initializeModel();
}

OAITranscriptFilter_AbsoluteTimeRange::~OAITranscriptFilter_AbsoluteTimeRange() {}

void OAITranscriptFilter_AbsoluteTimeRange::initializeModel() {

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_first_isSet = false;
    m_first_isValid = false;

    m_last_isSet = false;
    m_last_isValid = false;
}

void OAITranscriptFilter_AbsoluteTimeRange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITranscriptFilter_AbsoluteTimeRange::fromJsonObject(QJsonObject json) {

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_first_isValid = ::OpenAPI::fromJsonValue(m_first, json[QString("First")]);
    m_first_isSet = !json[QString("First")].isNull() && m_first_isValid;

    m_last_isValid = ::OpenAPI::fromJsonValue(m_last, json[QString("Last")]);
    m_last_isSet = !json[QString("Last")].isNull() && m_last_isValid;
}

QString OAITranscriptFilter_AbsoluteTimeRange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITranscriptFilter_AbsoluteTimeRange::asJsonObject() const {
    QJsonObject obj;
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_first_isSet) {
        obj.insert(QString("First"), ::OpenAPI::toJsonValue(m_first));
    }
    if (m_last_isSet) {
        obj.insert(QString("Last"), ::OpenAPI::toJsonValue(m_last));
    }
    return obj;
}

qint32 OAITranscriptFilter_AbsoluteTimeRange::getStartTime() const {
    return m_start_time;
}
void OAITranscriptFilter_AbsoluteTimeRange::setStartTime(const qint32 &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAITranscriptFilter_AbsoluteTimeRange::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAITranscriptFilter_AbsoluteTimeRange::is_start_time_Valid() const{
    return m_start_time_isValid;
}

qint32 OAITranscriptFilter_AbsoluteTimeRange::getEndTime() const {
    return m_end_time;
}
void OAITranscriptFilter_AbsoluteTimeRange::setEndTime(const qint32 &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAITranscriptFilter_AbsoluteTimeRange::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAITranscriptFilter_AbsoluteTimeRange::is_end_time_Valid() const{
    return m_end_time_isValid;
}

qint32 OAITranscriptFilter_AbsoluteTimeRange::getFirst() const {
    return m_first;
}
void OAITranscriptFilter_AbsoluteTimeRange::setFirst(const qint32 &first) {
    m_first = first;
    m_first_isSet = true;
}

bool OAITranscriptFilter_AbsoluteTimeRange::is_first_Set() const{
    return m_first_isSet;
}

bool OAITranscriptFilter_AbsoluteTimeRange::is_first_Valid() const{
    return m_first_isValid;
}

qint32 OAITranscriptFilter_AbsoluteTimeRange::getLast() const {
    return m_last;
}
void OAITranscriptFilter_AbsoluteTimeRange::setLast(const qint32 &last) {
    m_last = last;
    m_last_isSet = true;
}

bool OAITranscriptFilter_AbsoluteTimeRange::is_last_Set() const{
    return m_last_isSet;
}

bool OAITranscriptFilter_AbsoluteTimeRange::is_last_Valid() const{
    return m_last_isValid;
}

bool OAITranscriptFilter_AbsoluteTimeRange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITranscriptFilter_AbsoluteTimeRange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
