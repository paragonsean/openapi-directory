/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetCallAnalyticsJobResponse_CallAnalyticsJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::OAIGetCallAnalyticsJobResponse_CallAnalyticsJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::OAIGetCallAnalyticsJobResponse_CallAnalyticsJob() {
    this->initializeModel();
}

OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::~OAIGetCallAnalyticsJobResponse_CallAnalyticsJob() {}

void OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::initializeModel() {

    m_call_analytics_job_name_isSet = false;
    m_call_analytics_job_name_isValid = false;

    m_call_analytics_job_status_isSet = false;
    m_call_analytics_job_status_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_media_sample_rate_hertz_isSet = false;
    m_media_sample_rate_hertz_isValid = false;

    m_media_format_isSet = false;
    m_media_format_isValid = false;

    m_media_isSet = false;
    m_media_isValid = false;

    m_transcript_isSet = false;
    m_transcript_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_completion_time_isSet = false;
    m_completion_time_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_data_access_role_arn_isSet = false;
    m_data_access_role_arn_isValid = false;

    m_identified_language_score_isSet = false;
    m_identified_language_score_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_channel_definitions_isSet = false;
    m_channel_definitions_isValid = false;
}

void OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::fromJsonObject(QJsonObject json) {

    m_call_analytics_job_name_isValid = ::OpenAPI::fromJsonValue(m_call_analytics_job_name, json[QString("CallAnalyticsJobName")]);
    m_call_analytics_job_name_isSet = !json[QString("CallAnalyticsJobName")].isNull() && m_call_analytics_job_name_isValid;

    m_call_analytics_job_status_isValid = ::OpenAPI::fromJsonValue(m_call_analytics_job_status, json[QString("CallAnalyticsJobStatus")]);
    m_call_analytics_job_status_isSet = !json[QString("CallAnalyticsJobStatus")].isNull() && m_call_analytics_job_status_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("LanguageCode")]);
    m_language_code_isSet = !json[QString("LanguageCode")].isNull() && m_language_code_isValid;

    m_media_sample_rate_hertz_isValid = ::OpenAPI::fromJsonValue(m_media_sample_rate_hertz, json[QString("MediaSampleRateHertz")]);
    m_media_sample_rate_hertz_isSet = !json[QString("MediaSampleRateHertz")].isNull() && m_media_sample_rate_hertz_isValid;

    m_media_format_isValid = ::OpenAPI::fromJsonValue(m_media_format, json[QString("MediaFormat")]);
    m_media_format_isSet = !json[QString("MediaFormat")].isNull() && m_media_format_isValid;

    m_media_isValid = ::OpenAPI::fromJsonValue(m_media, json[QString("Media")]);
    m_media_isSet = !json[QString("Media")].isNull() && m_media_isValid;

    m_transcript_isValid = ::OpenAPI::fromJsonValue(m_transcript, json[QString("Transcript")]);
    m_transcript_isSet = !json[QString("Transcript")].isNull() && m_transcript_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_completion_time_isValid = ::OpenAPI::fromJsonValue(m_completion_time, json[QString("CompletionTime")]);
    m_completion_time_isSet = !json[QString("CompletionTime")].isNull() && m_completion_time_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("FailureReason")]);
    m_failure_reason_isSet = !json[QString("FailureReason")].isNull() && m_failure_reason_isValid;

    m_data_access_role_arn_isValid = ::OpenAPI::fromJsonValue(m_data_access_role_arn, json[QString("DataAccessRoleArn")]);
    m_data_access_role_arn_isSet = !json[QString("DataAccessRoleArn")].isNull() && m_data_access_role_arn_isValid;

    m_identified_language_score_isValid = ::OpenAPI::fromJsonValue(m_identified_language_score, json[QString("IdentifiedLanguageScore")]);
    m_identified_language_score_isSet = !json[QString("IdentifiedLanguageScore")].isNull() && m_identified_language_score_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("Settings")]);
    m_settings_isSet = !json[QString("Settings")].isNull() && m_settings_isValid;

    m_channel_definitions_isValid = ::OpenAPI::fromJsonValue(m_channel_definitions, json[QString("ChannelDefinitions")]);
    m_channel_definitions_isSet = !json[QString("ChannelDefinitions")].isNull() && m_channel_definitions_isValid;
}

QString OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::asJsonObject() const {
    QJsonObject obj;
    if (m_call_analytics_job_name_isSet) {
        obj.insert(QString("CallAnalyticsJobName"), ::OpenAPI::toJsonValue(m_call_analytics_job_name));
    }
    if (m_call_analytics_job_status.isSet()) {
        obj.insert(QString("CallAnalyticsJobStatus"), ::OpenAPI::toJsonValue(m_call_analytics_job_status));
    }
    if (m_language_code.isSet()) {
        obj.insert(QString("LanguageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_media_sample_rate_hertz_isSet) {
        obj.insert(QString("MediaSampleRateHertz"), ::OpenAPI::toJsonValue(m_media_sample_rate_hertz));
    }
    if (m_media_format.isSet()) {
        obj.insert(QString("MediaFormat"), ::OpenAPI::toJsonValue(m_media_format));
    }
    if (m_media.isSet()) {
        obj.insert(QString("Media"), ::OpenAPI::toJsonValue(m_media));
    }
    if (m_transcript.isSet()) {
        obj.insert(QString("Transcript"), ::OpenAPI::toJsonValue(m_transcript));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_completion_time_isSet) {
        obj.insert(QString("CompletionTime"), ::OpenAPI::toJsonValue(m_completion_time));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("FailureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_data_access_role_arn_isSet) {
        obj.insert(QString("DataAccessRoleArn"), ::OpenAPI::toJsonValue(m_data_access_role_arn));
    }
    if (m_identified_language_score_isSet) {
        obj.insert(QString("IdentifiedLanguageScore"), ::OpenAPI::toJsonValue(m_identified_language_score));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("Settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_channel_definitions.isSet()) {
        obj.insert(QString("ChannelDefinitions"), ::OpenAPI::toJsonValue(m_channel_definitions));
    }
    return obj;
}

QString OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::getCallAnalyticsJobName() const {
    return m_call_analytics_job_name;
}
void OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::setCallAnalyticsJobName(const QString &call_analytics_job_name) {
    m_call_analytics_job_name = call_analytics_job_name;
    m_call_analytics_job_name_isSet = true;
}

bool OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::is_call_analytics_job_name_Set() const{
    return m_call_analytics_job_name_isSet;
}

bool OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::is_call_analytics_job_name_Valid() const{
    return m_call_analytics_job_name_isValid;
}

OAICallAnalyticsJobStatus OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::getCallAnalyticsJobStatus() const {
    return m_call_analytics_job_status;
}
void OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::setCallAnalyticsJobStatus(const OAICallAnalyticsJobStatus &call_analytics_job_status) {
    m_call_analytics_job_status = call_analytics_job_status;
    m_call_analytics_job_status_isSet = true;
}

bool OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::is_call_analytics_job_status_Set() const{
    return m_call_analytics_job_status_isSet;
}

bool OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::is_call_analytics_job_status_Valid() const{
    return m_call_analytics_job_status_isValid;
}

OAILanguageCode OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::getLanguageCode() const {
    return m_language_code;
}
void OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::setLanguageCode(const OAILanguageCode &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::is_language_code_Valid() const{
    return m_language_code_isValid;
}

qint32 OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::getMediaSampleRateHertz() const {
    return m_media_sample_rate_hertz;
}
void OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::setMediaSampleRateHertz(const qint32 &media_sample_rate_hertz) {
    m_media_sample_rate_hertz = media_sample_rate_hertz;
    m_media_sample_rate_hertz_isSet = true;
}

bool OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::is_media_sample_rate_hertz_Set() const{
    return m_media_sample_rate_hertz_isSet;
}

bool OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::is_media_sample_rate_hertz_Valid() const{
    return m_media_sample_rate_hertz_isValid;
}

OAIMediaFormat OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::getMediaFormat() const {
    return m_media_format;
}
void OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::setMediaFormat(const OAIMediaFormat &media_format) {
    m_media_format = media_format;
    m_media_format_isSet = true;
}

bool OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::is_media_format_Set() const{
    return m_media_format_isSet;
}

bool OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::is_media_format_Valid() const{
    return m_media_format_isValid;
}

OAICallAnalyticsJob_Media OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::getMedia() const {
    return m_media;
}
void OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::setMedia(const OAICallAnalyticsJob_Media &media) {
    m_media = media;
    m_media_isSet = true;
}

bool OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::is_media_Set() const{
    return m_media_isSet;
}

bool OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::is_media_Valid() const{
    return m_media_isValid;
}

OAITranscript OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::getTranscript() const {
    return m_transcript;
}
void OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::setTranscript(const OAITranscript &transcript) {
    m_transcript = transcript;
    m_transcript_isSet = true;
}

bool OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::is_transcript_Set() const{
    return m_transcript_isSet;
}

bool OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::is_transcript_Valid() const{
    return m_transcript_isValid;
}

QDateTime OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::getStartTime() const {
    return m_start_time;
}
void OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::getCreationTime() const {
    return m_creation_time;
}
void OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::getCompletionTime() const {
    return m_completion_time;
}
void OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::setCompletionTime(const QDateTime &completion_time) {
    m_completion_time = completion_time;
    m_completion_time_isSet = true;
}

bool OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::is_completion_time_Set() const{
    return m_completion_time_isSet;
}

bool OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::is_completion_time_Valid() const{
    return m_completion_time_isValid;
}

QString OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::getFailureReason() const {
    return m_failure_reason;
}
void OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QString OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::getDataAccessRoleArn() const {
    return m_data_access_role_arn;
}
void OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::setDataAccessRoleArn(const QString &data_access_role_arn) {
    m_data_access_role_arn = data_access_role_arn;
    m_data_access_role_arn_isSet = true;
}

bool OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::is_data_access_role_arn_Set() const{
    return m_data_access_role_arn_isSet;
}

bool OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::is_data_access_role_arn_Valid() const{
    return m_data_access_role_arn_isValid;
}

float OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::getIdentifiedLanguageScore() const {
    return m_identified_language_score;
}
void OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::setIdentifiedLanguageScore(const float &identified_language_score) {
    m_identified_language_score = identified_language_score;
    m_identified_language_score_isSet = true;
}

bool OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::is_identified_language_score_Set() const{
    return m_identified_language_score_isSet;
}

bool OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::is_identified_language_score_Valid() const{
    return m_identified_language_score_isValid;
}

OAICallAnalyticsJob_Settings OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::getSettings() const {
    return m_settings;
}
void OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::setSettings(const OAICallAnalyticsJob_Settings &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::is_settings_Valid() const{
    return m_settings_isValid;
}

QList OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::getChannelDefinitions() const {
    return m_channel_definitions;
}
void OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::setChannelDefinitions(const QList &channel_definitions) {
    m_channel_definitions = channel_definitions;
    m_channel_definitions_isSet = true;
}

bool OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::is_channel_definitions_Set() const{
    return m_channel_definitions_isSet;
}

bool OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::is_channel_definitions_Valid() const{
    return m_channel_definitions_isValid;
}

bool OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_call_analytics_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_analytics_job_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_sample_rate_hertz_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transcript.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_access_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identified_language_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_definitions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetCallAnalyticsJobResponse_CallAnalyticsJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
