/*
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LanguageCode;
import org.openapitools.client.model.Media;
import org.openapitools.client.model.MediaFormat;
import org.openapitools.client.model.MedicalContentIdentificationType;
import org.openapitools.client.model.MedicalTranscriptionJobSettings;
import org.openapitools.client.model.MedicalTranscriptionJobTranscript;
import org.openapitools.client.model.Specialty;
import org.openapitools.client.model.TranscriptionJobStatus;
import org.openapitools.client.model.Type;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for StartMedicalTranscriptionJobResponseMedicalTranscriptionJob
 */
public class StartMedicalTranscriptionJobResponseMedicalTranscriptionJobTest {
    private final StartMedicalTranscriptionJobResponseMedicalTranscriptionJob model = new StartMedicalTranscriptionJobResponseMedicalTranscriptionJob();

    /**
     * Model tests for StartMedicalTranscriptionJobResponseMedicalTranscriptionJob
     */
    @Test
    public void testStartMedicalTranscriptionJobResponseMedicalTranscriptionJob() {
        // TODO: test StartMedicalTranscriptionJobResponseMedicalTranscriptionJob
    }

    /**
     * Test the property 'medicalTranscriptionJobName'
     */
    @Test
    public void medicalTranscriptionJobNameTest() {
        // TODO: test medicalTranscriptionJobName
    }

    /**
     * Test the property 'transcriptionJobStatus'
     */
    @Test
    public void transcriptionJobStatusTest() {
        // TODO: test transcriptionJobStatus
    }

    /**
     * Test the property 'languageCode'
     */
    @Test
    public void languageCodeTest() {
        // TODO: test languageCode
    }

    /**
     * Test the property 'mediaSampleRateHertz'
     */
    @Test
    public void mediaSampleRateHertzTest() {
        // TODO: test mediaSampleRateHertz
    }

    /**
     * Test the property 'mediaFormat'
     */
    @Test
    public void mediaFormatTest() {
        // TODO: test mediaFormat
    }

    /**
     * Test the property 'media'
     */
    @Test
    public void mediaTest() {
        // TODO: test media
    }

    /**
     * Test the property 'transcript'
     */
    @Test
    public void transcriptTest() {
        // TODO: test transcript
    }

    /**
     * Test the property 'startTime'
     */
    @Test
    public void startTimeTest() {
        // TODO: test startTime
    }

    /**
     * Test the property 'creationTime'
     */
    @Test
    public void creationTimeTest() {
        // TODO: test creationTime
    }

    /**
     * Test the property 'completionTime'
     */
    @Test
    public void completionTimeTest() {
        // TODO: test completionTime
    }

    /**
     * Test the property 'failureReason'
     */
    @Test
    public void failureReasonTest() {
        // TODO: test failureReason
    }

    /**
     * Test the property 'settings'
     */
    @Test
    public void settingsTest() {
        // TODO: test settings
    }

    /**
     * Test the property 'contentIdentificationType'
     */
    @Test
    public void contentIdentificationTypeTest() {
        // TODO: test contentIdentificationType
    }

    /**
     * Test the property 'specialty'
     */
    @Test
    public void specialtyTest() {
        // TODO: test specialty
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'tags'
     */
    @Test
    public void tagsTest() {
        // TODO: test tags
    }

}
