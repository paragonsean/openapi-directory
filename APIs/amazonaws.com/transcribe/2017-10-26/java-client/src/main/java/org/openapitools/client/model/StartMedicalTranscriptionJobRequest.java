/*
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.LanguageCode;
import org.openapitools.client.model.Media;
import org.openapitools.client.model.MediaFormat;
import org.openapitools.client.model.MedicalContentIdentificationType;
import org.openapitools.client.model.Specialty;
import org.openapitools.client.model.StartMedicalTranscriptionJobRequestSettings;
import org.openapitools.client.model.Type;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartMedicalTranscriptionJobRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:53.580792-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartMedicalTranscriptionJobRequest {
  public static final String SERIALIZED_NAME_MEDICAL_TRANSCRIPTION_JOB_NAME = "MedicalTranscriptionJobName";
  @SerializedName(SERIALIZED_NAME_MEDICAL_TRANSCRIPTION_JOB_NAME)
  private String medicalTranscriptionJobName;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "LanguageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private LanguageCode languageCode;

  public static final String SERIALIZED_NAME_MEDIA_SAMPLE_RATE_HERTZ = "MediaSampleRateHertz";
  @SerializedName(SERIALIZED_NAME_MEDIA_SAMPLE_RATE_HERTZ)
  private Integer mediaSampleRateHertz;

  public static final String SERIALIZED_NAME_MEDIA_FORMAT = "MediaFormat";
  @SerializedName(SERIALIZED_NAME_MEDIA_FORMAT)
  private MediaFormat mediaFormat;

  public static final String SERIALIZED_NAME_MEDIA = "Media";
  @SerializedName(SERIALIZED_NAME_MEDIA)
  private Media media;

  public static final String SERIALIZED_NAME_OUTPUT_BUCKET_NAME = "OutputBucketName";
  @SerializedName(SERIALIZED_NAME_OUTPUT_BUCKET_NAME)
  private String outputBucketName;

  public static final String SERIALIZED_NAME_OUTPUT_KEY = "OutputKey";
  @SerializedName(SERIALIZED_NAME_OUTPUT_KEY)
  private String outputKey;

  public static final String SERIALIZED_NAME_OUTPUT_ENCRYPTION_K_M_S_KEY_ID = "OutputEncryptionKMSKeyId";
  @SerializedName(SERIALIZED_NAME_OUTPUT_ENCRYPTION_K_M_S_KEY_ID)
  private String outputEncryptionKMSKeyId;

  public static final String SERIALIZED_NAME_KM_S_ENCRYPTION_CONTEXT = "KMSEncryptionContext";
  @SerializedName(SERIALIZED_NAME_KM_S_ENCRYPTION_CONTEXT)
  private Map kmSEncryptionContext;

  public static final String SERIALIZED_NAME_SETTINGS = "Settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private StartMedicalTranscriptionJobRequestSettings settings;

  public static final String SERIALIZED_NAME_CONTENT_IDENTIFICATION_TYPE = "ContentIdentificationType";
  @SerializedName(SERIALIZED_NAME_CONTENT_IDENTIFICATION_TYPE)
  private MedicalContentIdentificationType contentIdentificationType;

  public static final String SERIALIZED_NAME_SPECIALTY = "Specialty";
  @SerializedName(SERIALIZED_NAME_SPECIALTY)
  private Specialty specialty;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Type type;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public StartMedicalTranscriptionJobRequest() {
  }

  public StartMedicalTranscriptionJobRequest medicalTranscriptionJobName(String medicalTranscriptionJobName) {
    this.medicalTranscriptionJobName = medicalTranscriptionJobName;
    return this;
  }

  /**
   * Get medicalTranscriptionJobName
   * @return medicalTranscriptionJobName
   */
  @javax.annotation.Nonnull
  public String getMedicalTranscriptionJobName() {
    return medicalTranscriptionJobName;
  }

  public void setMedicalTranscriptionJobName(String medicalTranscriptionJobName) {
    this.medicalTranscriptionJobName = medicalTranscriptionJobName;
  }


  public StartMedicalTranscriptionJobRequest languageCode(LanguageCode languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * Get languageCode
   * @return languageCode
   */
  @javax.annotation.Nonnull
  public LanguageCode getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(LanguageCode languageCode) {
    this.languageCode = languageCode;
  }


  public StartMedicalTranscriptionJobRequest mediaSampleRateHertz(Integer mediaSampleRateHertz) {
    this.mediaSampleRateHertz = mediaSampleRateHertz;
    return this;
  }

  /**
   * Get mediaSampleRateHertz
   * @return mediaSampleRateHertz
   */
  @javax.annotation.Nullable
  public Integer getMediaSampleRateHertz() {
    return mediaSampleRateHertz;
  }

  public void setMediaSampleRateHertz(Integer mediaSampleRateHertz) {
    this.mediaSampleRateHertz = mediaSampleRateHertz;
  }


  public StartMedicalTranscriptionJobRequest mediaFormat(MediaFormat mediaFormat) {
    this.mediaFormat = mediaFormat;
    return this;
  }

  /**
   * Get mediaFormat
   * @return mediaFormat
   */
  @javax.annotation.Nullable
  public MediaFormat getMediaFormat() {
    return mediaFormat;
  }

  public void setMediaFormat(MediaFormat mediaFormat) {
    this.mediaFormat = mediaFormat;
  }


  public StartMedicalTranscriptionJobRequest media(Media media) {
    this.media = media;
    return this;
  }

  /**
   * Get media
   * @return media
   */
  @javax.annotation.Nonnull
  public Media getMedia() {
    return media;
  }

  public void setMedia(Media media) {
    this.media = media;
  }


  public StartMedicalTranscriptionJobRequest outputBucketName(String outputBucketName) {
    this.outputBucketName = outputBucketName;
    return this;
  }

  /**
   * Get outputBucketName
   * @return outputBucketName
   */
  @javax.annotation.Nonnull
  public String getOutputBucketName() {
    return outputBucketName;
  }

  public void setOutputBucketName(String outputBucketName) {
    this.outputBucketName = outputBucketName;
  }


  public StartMedicalTranscriptionJobRequest outputKey(String outputKey) {
    this.outputKey = outputKey;
    return this;
  }

  /**
   * Get outputKey
   * @return outputKey
   */
  @javax.annotation.Nullable
  public String getOutputKey() {
    return outputKey;
  }

  public void setOutputKey(String outputKey) {
    this.outputKey = outputKey;
  }


  public StartMedicalTranscriptionJobRequest outputEncryptionKMSKeyId(String outputEncryptionKMSKeyId) {
    this.outputEncryptionKMSKeyId = outputEncryptionKMSKeyId;
    return this;
  }

  /**
   * Get outputEncryptionKMSKeyId
   * @return outputEncryptionKMSKeyId
   */
  @javax.annotation.Nullable
  public String getOutputEncryptionKMSKeyId() {
    return outputEncryptionKMSKeyId;
  }

  public void setOutputEncryptionKMSKeyId(String outputEncryptionKMSKeyId) {
    this.outputEncryptionKMSKeyId = outputEncryptionKMSKeyId;
  }


  public StartMedicalTranscriptionJobRequest kmSEncryptionContext(Map kmSEncryptionContext) {
    this.kmSEncryptionContext = kmSEncryptionContext;
    return this;
  }

  /**
   * Get kmSEncryptionContext
   * @return kmSEncryptionContext
   */
  @javax.annotation.Nullable
  public Map getKmSEncryptionContext() {
    return kmSEncryptionContext;
  }

  public void setKmSEncryptionContext(Map kmSEncryptionContext) {
    this.kmSEncryptionContext = kmSEncryptionContext;
  }


  public StartMedicalTranscriptionJobRequest settings(StartMedicalTranscriptionJobRequestSettings settings) {
    this.settings = settings;
    return this;
  }

  /**
   * Get settings
   * @return settings
   */
  @javax.annotation.Nullable
  public StartMedicalTranscriptionJobRequestSettings getSettings() {
    return settings;
  }

  public void setSettings(StartMedicalTranscriptionJobRequestSettings settings) {
    this.settings = settings;
  }


  public StartMedicalTranscriptionJobRequest contentIdentificationType(MedicalContentIdentificationType contentIdentificationType) {
    this.contentIdentificationType = contentIdentificationType;
    return this;
  }

  /**
   * Get contentIdentificationType
   * @return contentIdentificationType
   */
  @javax.annotation.Nullable
  public MedicalContentIdentificationType getContentIdentificationType() {
    return contentIdentificationType;
  }

  public void setContentIdentificationType(MedicalContentIdentificationType contentIdentificationType) {
    this.contentIdentificationType = contentIdentificationType;
  }


  public StartMedicalTranscriptionJobRequest specialty(Specialty specialty) {
    this.specialty = specialty;
    return this;
  }

  /**
   * Get specialty
   * @return specialty
   */
  @javax.annotation.Nonnull
  public Specialty getSpecialty() {
    return specialty;
  }

  public void setSpecialty(Specialty specialty) {
    this.specialty = specialty;
  }


  public StartMedicalTranscriptionJobRequest type(Type type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public Type getType() {
    return type;
  }

  public void setType(Type type) {
    this.type = type;
  }


  public StartMedicalTranscriptionJobRequest tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartMedicalTranscriptionJobRequest startMedicalTranscriptionJobRequest = (StartMedicalTranscriptionJobRequest) o;
    return Objects.equals(this.medicalTranscriptionJobName, startMedicalTranscriptionJobRequest.medicalTranscriptionJobName) &&
        Objects.equals(this.languageCode, startMedicalTranscriptionJobRequest.languageCode) &&
        Objects.equals(this.mediaSampleRateHertz, startMedicalTranscriptionJobRequest.mediaSampleRateHertz) &&
        Objects.equals(this.mediaFormat, startMedicalTranscriptionJobRequest.mediaFormat) &&
        Objects.equals(this.media, startMedicalTranscriptionJobRequest.media) &&
        Objects.equals(this.outputBucketName, startMedicalTranscriptionJobRequest.outputBucketName) &&
        Objects.equals(this.outputKey, startMedicalTranscriptionJobRequest.outputKey) &&
        Objects.equals(this.outputEncryptionKMSKeyId, startMedicalTranscriptionJobRequest.outputEncryptionKMSKeyId) &&
        Objects.equals(this.kmSEncryptionContext, startMedicalTranscriptionJobRequest.kmSEncryptionContext) &&
        Objects.equals(this.settings, startMedicalTranscriptionJobRequest.settings) &&
        Objects.equals(this.contentIdentificationType, startMedicalTranscriptionJobRequest.contentIdentificationType) &&
        Objects.equals(this.specialty, startMedicalTranscriptionJobRequest.specialty) &&
        Objects.equals(this.type, startMedicalTranscriptionJobRequest.type) &&
        Objects.equals(this.tags, startMedicalTranscriptionJobRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(medicalTranscriptionJobName, languageCode, mediaSampleRateHertz, mediaFormat, media, outputBucketName, outputKey, outputEncryptionKMSKeyId, kmSEncryptionContext, settings, contentIdentificationType, specialty, type, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartMedicalTranscriptionJobRequest {\n");
    sb.append("    medicalTranscriptionJobName: ").append(toIndentedString(medicalTranscriptionJobName)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    mediaSampleRateHertz: ").append(toIndentedString(mediaSampleRateHertz)).append("\n");
    sb.append("    mediaFormat: ").append(toIndentedString(mediaFormat)).append("\n");
    sb.append("    media: ").append(toIndentedString(media)).append("\n");
    sb.append("    outputBucketName: ").append(toIndentedString(outputBucketName)).append("\n");
    sb.append("    outputKey: ").append(toIndentedString(outputKey)).append("\n");
    sb.append("    outputEncryptionKMSKeyId: ").append(toIndentedString(outputEncryptionKMSKeyId)).append("\n");
    sb.append("    kmSEncryptionContext: ").append(toIndentedString(kmSEncryptionContext)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    contentIdentificationType: ").append(toIndentedString(contentIdentificationType)).append("\n");
    sb.append("    specialty: ").append(toIndentedString(specialty)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MedicalTranscriptionJobName");
    openapiFields.add("LanguageCode");
    openapiFields.add("MediaSampleRateHertz");
    openapiFields.add("MediaFormat");
    openapiFields.add("Media");
    openapiFields.add("OutputBucketName");
    openapiFields.add("OutputKey");
    openapiFields.add("OutputEncryptionKMSKeyId");
    openapiFields.add("KMSEncryptionContext");
    openapiFields.add("Settings");
    openapiFields.add("ContentIdentificationType");
    openapiFields.add("Specialty");
    openapiFields.add("Type");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("MedicalTranscriptionJobName");
    openapiRequiredFields.add("LanguageCode");
    openapiRequiredFields.add("Media");
    openapiRequiredFields.add("OutputBucketName");
    openapiRequiredFields.add("Specialty");
    openapiRequiredFields.add("Type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartMedicalTranscriptionJobRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartMedicalTranscriptionJobRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartMedicalTranscriptionJobRequest is not found in the empty JSON string", StartMedicalTranscriptionJobRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartMedicalTranscriptionJobRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartMedicalTranscriptionJobRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartMedicalTranscriptionJobRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `MedicalTranscriptionJobName`
      String.validateJsonElement(jsonObj.get("MedicalTranscriptionJobName"));
      // validate the required field `LanguageCode`
      LanguageCode.validateJsonElement(jsonObj.get("LanguageCode"));
      // validate the optional field `MediaSampleRateHertz`
      if (jsonObj.get("MediaSampleRateHertz") != null && !jsonObj.get("MediaSampleRateHertz").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MediaSampleRateHertz"));
      }
      // validate the optional field `MediaFormat`
      if (jsonObj.get("MediaFormat") != null && !jsonObj.get("MediaFormat").isJsonNull()) {
        MediaFormat.validateJsonElement(jsonObj.get("MediaFormat"));
      }
      // validate the required field `Media`
      Media.validateJsonElement(jsonObj.get("Media"));
      // validate the required field `OutputBucketName`
      String.validateJsonElement(jsonObj.get("OutputBucketName"));
      // validate the optional field `OutputKey`
      if (jsonObj.get("OutputKey") != null && !jsonObj.get("OutputKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OutputKey"));
      }
      // validate the optional field `OutputEncryptionKMSKeyId`
      if (jsonObj.get("OutputEncryptionKMSKeyId") != null && !jsonObj.get("OutputEncryptionKMSKeyId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OutputEncryptionKMSKeyId"));
      }
      // validate the optional field `KMSEncryptionContext`
      if (jsonObj.get("KMSEncryptionContext") != null && !jsonObj.get("KMSEncryptionContext").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("KMSEncryptionContext"));
      }
      // validate the optional field `Settings`
      if (jsonObj.get("Settings") != null && !jsonObj.get("Settings").isJsonNull()) {
        StartMedicalTranscriptionJobRequestSettings.validateJsonElement(jsonObj.get("Settings"));
      }
      // validate the optional field `ContentIdentificationType`
      if (jsonObj.get("ContentIdentificationType") != null && !jsonObj.get("ContentIdentificationType").isJsonNull()) {
        MedicalContentIdentificationType.validateJsonElement(jsonObj.get("ContentIdentificationType"));
      }
      // validate the required field `Specialty`
      Specialty.validateJsonElement(jsonObj.get("Specialty"));
      // validate the required field `Type`
      Type.validateJsonElement(jsonObj.get("Type"));
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartMedicalTranscriptionJobRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartMedicalTranscriptionJobRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartMedicalTranscriptionJobRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartMedicalTranscriptionJobRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartMedicalTranscriptionJobRequest>() {
           @Override
           public void write(JsonWriter out, StartMedicalTranscriptionJobRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartMedicalTranscriptionJobRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartMedicalTranscriptionJobRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartMedicalTranscriptionJobRequest
   * @throws IOException if the JSON string is invalid with respect to StartMedicalTranscriptionJobRequest
   */
  public static StartMedicalTranscriptionJobRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartMedicalTranscriptionJobRequest.class);
  }

  /**
   * Convert an instance of StartMedicalTranscriptionJobRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

