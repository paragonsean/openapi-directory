/*
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;A time range, in percentage, between two points in your media file.&lt;/p&gt; &lt;p&gt;You can use &lt;code&gt;StartPercentage&lt;/code&gt; and &lt;code&gt;EndPercentage&lt;/code&gt; to search a custom segment. For example, setting &lt;code&gt;StartPercentage&lt;/code&gt; to 10 and &lt;code&gt;EndPercentage&lt;/code&gt; to 50 only searches for your specified criteria in the audio contained between the 10 percent mark and the 50 percent mark of your media file.&lt;/p&gt; &lt;p&gt;You can use also &lt;code&gt;First&lt;/code&gt; to search from the start of the media file until the time that you specify. Or use &lt;code&gt;Last&lt;/code&gt; to search from the time that you specify until the end of the media file. For example, setting &lt;code&gt;First&lt;/code&gt; to 10 only searches for your specified criteria in the audio contained in the first 10 percent of the media file.&lt;/p&gt; &lt;p&gt;If you prefer to use milliseconds instead of percentage, see .&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:53.580792-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RelativeTimeRange {
  public static final String SERIALIZED_NAME_START_PERCENTAGE = "StartPercentage";
  @SerializedName(SERIALIZED_NAME_START_PERCENTAGE)
  private Integer startPercentage;

  public static final String SERIALIZED_NAME_END_PERCENTAGE = "EndPercentage";
  @SerializedName(SERIALIZED_NAME_END_PERCENTAGE)
  private Integer endPercentage;

  public static final String SERIALIZED_NAME_FIRST = "First";
  @SerializedName(SERIALIZED_NAME_FIRST)
  private Integer first;

  public static final String SERIALIZED_NAME_LAST = "Last";
  @SerializedName(SERIALIZED_NAME_LAST)
  private Integer last;

  public RelativeTimeRange() {
  }

  public RelativeTimeRange startPercentage(Integer startPercentage) {
    this.startPercentage = startPercentage;
    return this;
  }

  /**
   * Get startPercentage
   * @return startPercentage
   */
  @javax.annotation.Nullable
  public Integer getStartPercentage() {
    return startPercentage;
  }

  public void setStartPercentage(Integer startPercentage) {
    this.startPercentage = startPercentage;
  }


  public RelativeTimeRange endPercentage(Integer endPercentage) {
    this.endPercentage = endPercentage;
    return this;
  }

  /**
   * Get endPercentage
   * @return endPercentage
   */
  @javax.annotation.Nullable
  public Integer getEndPercentage() {
    return endPercentage;
  }

  public void setEndPercentage(Integer endPercentage) {
    this.endPercentage = endPercentage;
  }


  public RelativeTimeRange first(Integer first) {
    this.first = first;
    return this;
  }

  /**
   * Get first
   * @return first
   */
  @javax.annotation.Nullable
  public Integer getFirst() {
    return first;
  }

  public void setFirst(Integer first) {
    this.first = first;
  }


  public RelativeTimeRange last(Integer last) {
    this.last = last;
    return this;
  }

  /**
   * Get last
   * @return last
   */
  @javax.annotation.Nullable
  public Integer getLast() {
    return last;
  }

  public void setLast(Integer last) {
    this.last = last;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RelativeTimeRange relativeTimeRange = (RelativeTimeRange) o;
    return Objects.equals(this.startPercentage, relativeTimeRange.startPercentage) &&
        Objects.equals(this.endPercentage, relativeTimeRange.endPercentage) &&
        Objects.equals(this.first, relativeTimeRange.first) &&
        Objects.equals(this.last, relativeTimeRange.last);
  }

  @Override
  public int hashCode() {
    return Objects.hash(startPercentage, endPercentage, first, last);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RelativeTimeRange {\n");
    sb.append("    startPercentage: ").append(toIndentedString(startPercentage)).append("\n");
    sb.append("    endPercentage: ").append(toIndentedString(endPercentage)).append("\n");
    sb.append("    first: ").append(toIndentedString(first)).append("\n");
    sb.append("    last: ").append(toIndentedString(last)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StartPercentage");
    openapiFields.add("EndPercentage");
    openapiFields.add("First");
    openapiFields.add("Last");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RelativeTimeRange
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RelativeTimeRange.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RelativeTimeRange is not found in the empty JSON string", RelativeTimeRange.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RelativeTimeRange.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RelativeTimeRange` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `StartPercentage`
      if (jsonObj.get("StartPercentage") != null && !jsonObj.get("StartPercentage").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("StartPercentage"));
      }
      // validate the optional field `EndPercentage`
      if (jsonObj.get("EndPercentage") != null && !jsonObj.get("EndPercentage").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("EndPercentage"));
      }
      // validate the optional field `First`
      if (jsonObj.get("First") != null && !jsonObj.get("First").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("First"));
      }
      // validate the optional field `Last`
      if (jsonObj.get("Last") != null && !jsonObj.get("Last").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Last"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RelativeTimeRange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RelativeTimeRange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RelativeTimeRange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RelativeTimeRange.class));

       return (TypeAdapter<T>) new TypeAdapter<RelativeTimeRange>() {
           @Override
           public void write(JsonWriter out, RelativeTimeRange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RelativeTimeRange read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RelativeTimeRange given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RelativeTimeRange
   * @throws IOException if the JSON string is invalid with respect to RelativeTimeRange
   */
  public static RelativeTimeRange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RelativeTimeRange.class);
  }

  /**
   * Convert an instance of RelativeTimeRange to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

