/*
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BaseModelName;
import org.openapitools.client.model.CLMLanguageCode;
import org.openapitools.client.model.CreateLanguageModelRequestInputDataConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateLanguageModelRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:53.580792-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateLanguageModelRequest {
  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "LanguageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private CLMLanguageCode languageCode;

  public static final String SERIALIZED_NAME_BASE_MODEL_NAME = "BaseModelName";
  @SerializedName(SERIALIZED_NAME_BASE_MODEL_NAME)
  private BaseModelName baseModelName;

  public static final String SERIALIZED_NAME_MODEL_NAME = "ModelName";
  @SerializedName(SERIALIZED_NAME_MODEL_NAME)
  private String modelName;

  public static final String SERIALIZED_NAME_INPUT_DATA_CONFIG = "InputDataConfig";
  @SerializedName(SERIALIZED_NAME_INPUT_DATA_CONFIG)
  private CreateLanguageModelRequestInputDataConfig inputDataConfig;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public CreateLanguageModelRequest() {
  }

  public CreateLanguageModelRequest languageCode(CLMLanguageCode languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * Get languageCode
   * @return languageCode
   */
  @javax.annotation.Nonnull
  public CLMLanguageCode getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(CLMLanguageCode languageCode) {
    this.languageCode = languageCode;
  }


  public CreateLanguageModelRequest baseModelName(BaseModelName baseModelName) {
    this.baseModelName = baseModelName;
    return this;
  }

  /**
   * Get baseModelName
   * @return baseModelName
   */
  @javax.annotation.Nonnull
  public BaseModelName getBaseModelName() {
    return baseModelName;
  }

  public void setBaseModelName(BaseModelName baseModelName) {
    this.baseModelName = baseModelName;
  }


  public CreateLanguageModelRequest modelName(String modelName) {
    this.modelName = modelName;
    return this;
  }

  /**
   * Get modelName
   * @return modelName
   */
  @javax.annotation.Nonnull
  public String getModelName() {
    return modelName;
  }

  public void setModelName(String modelName) {
    this.modelName = modelName;
  }


  public CreateLanguageModelRequest inputDataConfig(CreateLanguageModelRequestInputDataConfig inputDataConfig) {
    this.inputDataConfig = inputDataConfig;
    return this;
  }

  /**
   * Get inputDataConfig
   * @return inputDataConfig
   */
  @javax.annotation.Nonnull
  public CreateLanguageModelRequestInputDataConfig getInputDataConfig() {
    return inputDataConfig;
  }

  public void setInputDataConfig(CreateLanguageModelRequestInputDataConfig inputDataConfig) {
    this.inputDataConfig = inputDataConfig;
  }


  public CreateLanguageModelRequest tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateLanguageModelRequest createLanguageModelRequest = (CreateLanguageModelRequest) o;
    return Objects.equals(this.languageCode, createLanguageModelRequest.languageCode) &&
        Objects.equals(this.baseModelName, createLanguageModelRequest.baseModelName) &&
        Objects.equals(this.modelName, createLanguageModelRequest.modelName) &&
        Objects.equals(this.inputDataConfig, createLanguageModelRequest.inputDataConfig) &&
        Objects.equals(this.tags, createLanguageModelRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(languageCode, baseModelName, modelName, inputDataConfig, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateLanguageModelRequest {\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    baseModelName: ").append(toIndentedString(baseModelName)).append("\n");
    sb.append("    modelName: ").append(toIndentedString(modelName)).append("\n");
    sb.append("    inputDataConfig: ").append(toIndentedString(inputDataConfig)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LanguageCode");
    openapiFields.add("BaseModelName");
    openapiFields.add("ModelName");
    openapiFields.add("InputDataConfig");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("LanguageCode");
    openapiRequiredFields.add("BaseModelName");
    openapiRequiredFields.add("ModelName");
    openapiRequiredFields.add("InputDataConfig");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateLanguageModelRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateLanguageModelRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateLanguageModelRequest is not found in the empty JSON string", CreateLanguageModelRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateLanguageModelRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateLanguageModelRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateLanguageModelRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `LanguageCode`
      CLMLanguageCode.validateJsonElement(jsonObj.get("LanguageCode"));
      // validate the required field `BaseModelName`
      BaseModelName.validateJsonElement(jsonObj.get("BaseModelName"));
      // validate the required field `ModelName`
      String.validateJsonElement(jsonObj.get("ModelName"));
      // validate the required field `InputDataConfig`
      CreateLanguageModelRequestInputDataConfig.validateJsonElement(jsonObj.get("InputDataConfig"));
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateLanguageModelRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateLanguageModelRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateLanguageModelRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateLanguageModelRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateLanguageModelRequest>() {
           @Override
           public void write(JsonWriter out, CreateLanguageModelRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateLanguageModelRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateLanguageModelRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateLanguageModelRequest
   * @throws IOException if the JSON string is invalid with respect to CreateLanguageModelRequest
   */
  public static CreateLanguageModelRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateLanguageModelRequest.class);
  }

  /**
   * Convert an instance of CreateLanguageModelRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

