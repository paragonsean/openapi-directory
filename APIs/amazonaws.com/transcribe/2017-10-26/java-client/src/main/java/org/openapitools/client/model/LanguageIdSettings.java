/*
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;If using automatic language identification in your request and you want to apply a custom language model, a custom vocabulary, or a custom vocabulary filter, include &lt;code&gt;LanguageIdSettings&lt;/code&gt; with the relevant sub-parameters (&lt;code&gt;VocabularyName&lt;/code&gt;, &lt;code&gt;LanguageModelName&lt;/code&gt;, and &lt;code&gt;VocabularyFilterName&lt;/code&gt;). Note that multi-language identification (&lt;code&gt;IdentifyMultipleLanguages&lt;/code&gt;) doesn&#39;t support custom language models.&lt;/p&gt; &lt;p&gt; &lt;code&gt;LanguageIdSettings&lt;/code&gt; supports two to five language codes. Each language code you include can have an associated custom language model, custom vocabulary, and custom vocabulary filter. The language codes that you specify must match the languages of the associated custom language models, custom vocabularies, and custom vocabulary filters.&lt;/p&gt; &lt;p&gt;It&#39;s recommended that you include &lt;code&gt;LanguageOptions&lt;/code&gt; when using &lt;code&gt;LanguageIdSettings&lt;/code&gt; to ensure that the correct language dialect is identified. For example, if you specify a custom vocabulary that is in &lt;code&gt;en-US&lt;/code&gt; but Amazon Transcribe determines that the language spoken in your media is &lt;code&gt;en-AU&lt;/code&gt;, your custom vocabulary &lt;i&gt;is not&lt;/i&gt; applied to your transcription. If you include &lt;code&gt;LanguageOptions&lt;/code&gt; and include &lt;code&gt;en-US&lt;/code&gt; as the only English language dialect, your custom vocabulary &lt;i&gt;is&lt;/i&gt; applied to your transcription.&lt;/p&gt; &lt;p&gt;If you want to include a custom language model with your request but &lt;b&gt;do not&lt;/b&gt; want to use automatic language identification, use instead the &lt;code/&gt; parameter with the &lt;code&gt;LanguageModelName&lt;/code&gt; sub-parameter. If you want to include a custom vocabulary or a custom vocabulary filter (or both) with your request but &lt;b&gt;do not&lt;/b&gt; want to use automatic language identification, use instead the &lt;code/&gt; parameter with the &lt;code&gt;VocabularyName&lt;/code&gt; or &lt;code&gt;VocabularyFilterName&lt;/code&gt; (or both) sub-parameter.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:53.580792-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LanguageIdSettings {
  public static final String SERIALIZED_NAME_VOCABULARY_NAME = "VocabularyName";
  @SerializedName(SERIALIZED_NAME_VOCABULARY_NAME)
  private String vocabularyName;

  public static final String SERIALIZED_NAME_VOCABULARY_FILTER_NAME = "VocabularyFilterName";
  @SerializedName(SERIALIZED_NAME_VOCABULARY_FILTER_NAME)
  private String vocabularyFilterName;

  public static final String SERIALIZED_NAME_LANGUAGE_MODEL_NAME = "LanguageModelName";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_MODEL_NAME)
  private String languageModelName;

  public LanguageIdSettings() {
  }

  public LanguageIdSettings vocabularyName(String vocabularyName) {
    this.vocabularyName = vocabularyName;
    return this;
  }

  /**
   * Get vocabularyName
   * @return vocabularyName
   */
  @javax.annotation.Nullable
  public String getVocabularyName() {
    return vocabularyName;
  }

  public void setVocabularyName(String vocabularyName) {
    this.vocabularyName = vocabularyName;
  }


  public LanguageIdSettings vocabularyFilterName(String vocabularyFilterName) {
    this.vocabularyFilterName = vocabularyFilterName;
    return this;
  }

  /**
   * Get vocabularyFilterName
   * @return vocabularyFilterName
   */
  @javax.annotation.Nullable
  public String getVocabularyFilterName() {
    return vocabularyFilterName;
  }

  public void setVocabularyFilterName(String vocabularyFilterName) {
    this.vocabularyFilterName = vocabularyFilterName;
  }


  public LanguageIdSettings languageModelName(String languageModelName) {
    this.languageModelName = languageModelName;
    return this;
  }

  /**
   * Get languageModelName
   * @return languageModelName
   */
  @javax.annotation.Nullable
  public String getLanguageModelName() {
    return languageModelName;
  }

  public void setLanguageModelName(String languageModelName) {
    this.languageModelName = languageModelName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LanguageIdSettings languageIdSettings = (LanguageIdSettings) o;
    return Objects.equals(this.vocabularyName, languageIdSettings.vocabularyName) &&
        Objects.equals(this.vocabularyFilterName, languageIdSettings.vocabularyFilterName) &&
        Objects.equals(this.languageModelName, languageIdSettings.languageModelName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vocabularyName, vocabularyFilterName, languageModelName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LanguageIdSettings {\n");
    sb.append("    vocabularyName: ").append(toIndentedString(vocabularyName)).append("\n");
    sb.append("    vocabularyFilterName: ").append(toIndentedString(vocabularyFilterName)).append("\n");
    sb.append("    languageModelName: ").append(toIndentedString(languageModelName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("VocabularyName");
    openapiFields.add("VocabularyFilterName");
    openapiFields.add("LanguageModelName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LanguageIdSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LanguageIdSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LanguageIdSettings is not found in the empty JSON string", LanguageIdSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LanguageIdSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LanguageIdSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `VocabularyName`
      if (jsonObj.get("VocabularyName") != null && !jsonObj.get("VocabularyName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VocabularyName"));
      }
      // validate the optional field `VocabularyFilterName`
      if (jsonObj.get("VocabularyFilterName") != null && !jsonObj.get("VocabularyFilterName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VocabularyFilterName"));
      }
      // validate the optional field `LanguageModelName`
      if (jsonObj.get("LanguageModelName") != null && !jsonObj.get("LanguageModelName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LanguageModelName"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LanguageIdSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LanguageIdSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LanguageIdSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LanguageIdSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<LanguageIdSettings>() {
           @Override
           public void write(JsonWriter out, LanguageIdSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LanguageIdSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LanguageIdSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LanguageIdSettings
   * @throws IOException if the JSON string is invalid with respect to LanguageIdSettings
   */
  public static LanguageIdSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LanguageIdSettings.class);
  }

  /**
   * Convert an instance of LanguageIdSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

