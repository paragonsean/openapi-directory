/*
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.LanguageCode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetVocabularyFilterResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:53.580792-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetVocabularyFilterResponse {
  public static final String SERIALIZED_NAME_VOCABULARY_FILTER_NAME = "VocabularyFilterName";
  @SerializedName(SERIALIZED_NAME_VOCABULARY_FILTER_NAME)
  private String vocabularyFilterName;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "LanguageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private LanguageCode languageCode;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "LastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private OffsetDateTime lastModifiedTime;

  public static final String SERIALIZED_NAME_DOWNLOAD_URI = "DownloadUri";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_URI)
  private String downloadUri;

  public GetVocabularyFilterResponse() {
  }

  public GetVocabularyFilterResponse vocabularyFilterName(String vocabularyFilterName) {
    this.vocabularyFilterName = vocabularyFilterName;
    return this;
  }

  /**
   * Get vocabularyFilterName
   * @return vocabularyFilterName
   */
  @javax.annotation.Nullable
  public String getVocabularyFilterName() {
    return vocabularyFilterName;
  }

  public void setVocabularyFilterName(String vocabularyFilterName) {
    this.vocabularyFilterName = vocabularyFilterName;
  }


  public GetVocabularyFilterResponse languageCode(LanguageCode languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * Get languageCode
   * @return languageCode
   */
  @javax.annotation.Nullable
  public LanguageCode getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(LanguageCode languageCode) {
    this.languageCode = languageCode;
  }


  public GetVocabularyFilterResponse lastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
    return this;
  }

  /**
   * Get lastModifiedTime
   * @return lastModifiedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedTime() {
    return lastModifiedTime;
  }

  public void setLastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
  }


  public GetVocabularyFilterResponse downloadUri(String downloadUri) {
    this.downloadUri = downloadUri;
    return this;
  }

  /**
   * Get downloadUri
   * @return downloadUri
   */
  @javax.annotation.Nullable
  public String getDownloadUri() {
    return downloadUri;
  }

  public void setDownloadUri(String downloadUri) {
    this.downloadUri = downloadUri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetVocabularyFilterResponse getVocabularyFilterResponse = (GetVocabularyFilterResponse) o;
    return Objects.equals(this.vocabularyFilterName, getVocabularyFilterResponse.vocabularyFilterName) &&
        Objects.equals(this.languageCode, getVocabularyFilterResponse.languageCode) &&
        Objects.equals(this.lastModifiedTime, getVocabularyFilterResponse.lastModifiedTime) &&
        Objects.equals(this.downloadUri, getVocabularyFilterResponse.downloadUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vocabularyFilterName, languageCode, lastModifiedTime, downloadUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetVocabularyFilterResponse {\n");
    sb.append("    vocabularyFilterName: ").append(toIndentedString(vocabularyFilterName)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    downloadUri: ").append(toIndentedString(downloadUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("VocabularyFilterName");
    openapiFields.add("LanguageCode");
    openapiFields.add("LastModifiedTime");
    openapiFields.add("DownloadUri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetVocabularyFilterResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetVocabularyFilterResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetVocabularyFilterResponse is not found in the empty JSON string", GetVocabularyFilterResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetVocabularyFilterResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetVocabularyFilterResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `VocabularyFilterName`
      if (jsonObj.get("VocabularyFilterName") != null && !jsonObj.get("VocabularyFilterName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VocabularyFilterName"));
      }
      // validate the optional field `LanguageCode`
      if (jsonObj.get("LanguageCode") != null && !jsonObj.get("LanguageCode").isJsonNull()) {
        LanguageCode.validateJsonElement(jsonObj.get("LanguageCode"));
      }
      // validate the optional field `LastModifiedTime`
      if (jsonObj.get("LastModifiedTime") != null && !jsonObj.get("LastModifiedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastModifiedTime"));
      }
      // validate the optional field `DownloadUri`
      if (jsonObj.get("DownloadUri") != null && !jsonObj.get("DownloadUri").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DownloadUri"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetVocabularyFilterResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetVocabularyFilterResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetVocabularyFilterResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetVocabularyFilterResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetVocabularyFilterResponse>() {
           @Override
           public void write(JsonWriter out, GetVocabularyFilterResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetVocabularyFilterResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetVocabularyFilterResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetVocabularyFilterResponse
   * @throws IOException if the JSON string is invalid with respect to GetVocabularyFilterResponse
   */
  public static GetVocabularyFilterResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetVocabularyFilterResponse.class);
  }

  /**
   * Convert an instance of GetVocabularyFilterResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

