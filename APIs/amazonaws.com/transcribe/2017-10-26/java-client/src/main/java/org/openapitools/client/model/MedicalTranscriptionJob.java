/*
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LanguageCode;
import org.openapitools.client.model.Media;
import org.openapitools.client.model.MediaFormat;
import org.openapitools.client.model.MedicalContentIdentificationType;
import org.openapitools.client.model.MedicalTranscriptionJobSettings;
import org.openapitools.client.model.MedicalTranscriptionJobTranscript;
import org.openapitools.client.model.Specialty;
import org.openapitools.client.model.TranscriptionJobStatus;
import org.openapitools.client.model.Type;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Provides detailed information about a medical transcription job.&lt;/p&gt; &lt;p&gt;To view the status of the specified medical transcription job, check the &lt;code&gt;TranscriptionJobStatus&lt;/code&gt; field. If the status is &lt;code&gt;COMPLETED&lt;/code&gt;, the job is finished and you can find the results at the location specified in &lt;code&gt;TranscriptFileUri&lt;/code&gt;. If the status is &lt;code&gt;FAILED&lt;/code&gt;, &lt;code&gt;FailureReason&lt;/code&gt; provides details on why your transcription job failed.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:53.580792-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MedicalTranscriptionJob {
  public static final String SERIALIZED_NAME_MEDICAL_TRANSCRIPTION_JOB_NAME = "MedicalTranscriptionJobName";
  @SerializedName(SERIALIZED_NAME_MEDICAL_TRANSCRIPTION_JOB_NAME)
  private String medicalTranscriptionJobName;

  public static final String SERIALIZED_NAME_TRANSCRIPTION_JOB_STATUS = "TranscriptionJobStatus";
  @SerializedName(SERIALIZED_NAME_TRANSCRIPTION_JOB_STATUS)
  private TranscriptionJobStatus transcriptionJobStatus;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "LanguageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private LanguageCode languageCode;

  public static final String SERIALIZED_NAME_MEDIA_SAMPLE_RATE_HERTZ = "MediaSampleRateHertz";
  @SerializedName(SERIALIZED_NAME_MEDIA_SAMPLE_RATE_HERTZ)
  private Integer mediaSampleRateHertz;

  public static final String SERIALIZED_NAME_MEDIA_FORMAT = "MediaFormat";
  @SerializedName(SERIALIZED_NAME_MEDIA_FORMAT)
  private MediaFormat mediaFormat;

  public static final String SERIALIZED_NAME_MEDIA = "Media";
  @SerializedName(SERIALIZED_NAME_MEDIA)
  private Media media;

  public static final String SERIALIZED_NAME_TRANSCRIPT = "Transcript";
  @SerializedName(SERIALIZED_NAME_TRANSCRIPT)
  private MedicalTranscriptionJobTranscript transcript;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_COMPLETION_TIME = "CompletionTime";
  @SerializedName(SERIALIZED_NAME_COMPLETION_TIME)
  private OffsetDateTime completionTime;

  public static final String SERIALIZED_NAME_FAILURE_REASON = "FailureReason";
  @SerializedName(SERIALIZED_NAME_FAILURE_REASON)
  private String failureReason;

  public static final String SERIALIZED_NAME_SETTINGS = "Settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private MedicalTranscriptionJobSettings settings;

  public static final String SERIALIZED_NAME_CONTENT_IDENTIFICATION_TYPE = "ContentIdentificationType";
  @SerializedName(SERIALIZED_NAME_CONTENT_IDENTIFICATION_TYPE)
  private MedicalContentIdentificationType contentIdentificationType;

  public static final String SERIALIZED_NAME_SPECIALTY = "Specialty";
  @SerializedName(SERIALIZED_NAME_SPECIALTY)
  private Specialty specialty;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Type type;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public MedicalTranscriptionJob() {
  }

  public MedicalTranscriptionJob medicalTranscriptionJobName(String medicalTranscriptionJobName) {
    this.medicalTranscriptionJobName = medicalTranscriptionJobName;
    return this;
  }

  /**
   * Get medicalTranscriptionJobName
   * @return medicalTranscriptionJobName
   */
  @javax.annotation.Nullable
  public String getMedicalTranscriptionJobName() {
    return medicalTranscriptionJobName;
  }

  public void setMedicalTranscriptionJobName(String medicalTranscriptionJobName) {
    this.medicalTranscriptionJobName = medicalTranscriptionJobName;
  }


  public MedicalTranscriptionJob transcriptionJobStatus(TranscriptionJobStatus transcriptionJobStatus) {
    this.transcriptionJobStatus = transcriptionJobStatus;
    return this;
  }

  /**
   * Get transcriptionJobStatus
   * @return transcriptionJobStatus
   */
  @javax.annotation.Nullable
  public TranscriptionJobStatus getTranscriptionJobStatus() {
    return transcriptionJobStatus;
  }

  public void setTranscriptionJobStatus(TranscriptionJobStatus transcriptionJobStatus) {
    this.transcriptionJobStatus = transcriptionJobStatus;
  }


  public MedicalTranscriptionJob languageCode(LanguageCode languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * Get languageCode
   * @return languageCode
   */
  @javax.annotation.Nullable
  public LanguageCode getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(LanguageCode languageCode) {
    this.languageCode = languageCode;
  }


  public MedicalTranscriptionJob mediaSampleRateHertz(Integer mediaSampleRateHertz) {
    this.mediaSampleRateHertz = mediaSampleRateHertz;
    return this;
  }

  /**
   * Get mediaSampleRateHertz
   * @return mediaSampleRateHertz
   */
  @javax.annotation.Nullable
  public Integer getMediaSampleRateHertz() {
    return mediaSampleRateHertz;
  }

  public void setMediaSampleRateHertz(Integer mediaSampleRateHertz) {
    this.mediaSampleRateHertz = mediaSampleRateHertz;
  }


  public MedicalTranscriptionJob mediaFormat(MediaFormat mediaFormat) {
    this.mediaFormat = mediaFormat;
    return this;
  }

  /**
   * Get mediaFormat
   * @return mediaFormat
   */
  @javax.annotation.Nullable
  public MediaFormat getMediaFormat() {
    return mediaFormat;
  }

  public void setMediaFormat(MediaFormat mediaFormat) {
    this.mediaFormat = mediaFormat;
  }


  public MedicalTranscriptionJob media(Media media) {
    this.media = media;
    return this;
  }

  /**
   * Get media
   * @return media
   */
  @javax.annotation.Nullable
  public Media getMedia() {
    return media;
  }

  public void setMedia(Media media) {
    this.media = media;
  }


  public MedicalTranscriptionJob transcript(MedicalTranscriptionJobTranscript transcript) {
    this.transcript = transcript;
    return this;
  }

  /**
   * Get transcript
   * @return transcript
   */
  @javax.annotation.Nullable
  public MedicalTranscriptionJobTranscript getTranscript() {
    return transcript;
  }

  public void setTranscript(MedicalTranscriptionJobTranscript transcript) {
    this.transcript = transcript;
  }


  public MedicalTranscriptionJob startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public MedicalTranscriptionJob creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public MedicalTranscriptionJob completionTime(OffsetDateTime completionTime) {
    this.completionTime = completionTime;
    return this;
  }

  /**
   * Get completionTime
   * @return completionTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCompletionTime() {
    return completionTime;
  }

  public void setCompletionTime(OffsetDateTime completionTime) {
    this.completionTime = completionTime;
  }


  public MedicalTranscriptionJob failureReason(String failureReason) {
    this.failureReason = failureReason;
    return this;
  }

  /**
   * Get failureReason
   * @return failureReason
   */
  @javax.annotation.Nullable
  public String getFailureReason() {
    return failureReason;
  }

  public void setFailureReason(String failureReason) {
    this.failureReason = failureReason;
  }


  public MedicalTranscriptionJob settings(MedicalTranscriptionJobSettings settings) {
    this.settings = settings;
    return this;
  }

  /**
   * Get settings
   * @return settings
   */
  @javax.annotation.Nullable
  public MedicalTranscriptionJobSettings getSettings() {
    return settings;
  }

  public void setSettings(MedicalTranscriptionJobSettings settings) {
    this.settings = settings;
  }


  public MedicalTranscriptionJob contentIdentificationType(MedicalContentIdentificationType contentIdentificationType) {
    this.contentIdentificationType = contentIdentificationType;
    return this;
  }

  /**
   * Get contentIdentificationType
   * @return contentIdentificationType
   */
  @javax.annotation.Nullable
  public MedicalContentIdentificationType getContentIdentificationType() {
    return contentIdentificationType;
  }

  public void setContentIdentificationType(MedicalContentIdentificationType contentIdentificationType) {
    this.contentIdentificationType = contentIdentificationType;
  }


  public MedicalTranscriptionJob specialty(Specialty specialty) {
    this.specialty = specialty;
    return this;
  }

  /**
   * Get specialty
   * @return specialty
   */
  @javax.annotation.Nullable
  public Specialty getSpecialty() {
    return specialty;
  }

  public void setSpecialty(Specialty specialty) {
    this.specialty = specialty;
  }


  public MedicalTranscriptionJob type(Type type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public Type getType() {
    return type;
  }

  public void setType(Type type) {
    this.type = type;
  }


  public MedicalTranscriptionJob tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MedicalTranscriptionJob medicalTranscriptionJob = (MedicalTranscriptionJob) o;
    return Objects.equals(this.medicalTranscriptionJobName, medicalTranscriptionJob.medicalTranscriptionJobName) &&
        Objects.equals(this.transcriptionJobStatus, medicalTranscriptionJob.transcriptionJobStatus) &&
        Objects.equals(this.languageCode, medicalTranscriptionJob.languageCode) &&
        Objects.equals(this.mediaSampleRateHertz, medicalTranscriptionJob.mediaSampleRateHertz) &&
        Objects.equals(this.mediaFormat, medicalTranscriptionJob.mediaFormat) &&
        Objects.equals(this.media, medicalTranscriptionJob.media) &&
        Objects.equals(this.transcript, medicalTranscriptionJob.transcript) &&
        Objects.equals(this.startTime, medicalTranscriptionJob.startTime) &&
        Objects.equals(this.creationTime, medicalTranscriptionJob.creationTime) &&
        Objects.equals(this.completionTime, medicalTranscriptionJob.completionTime) &&
        Objects.equals(this.failureReason, medicalTranscriptionJob.failureReason) &&
        Objects.equals(this.settings, medicalTranscriptionJob.settings) &&
        Objects.equals(this.contentIdentificationType, medicalTranscriptionJob.contentIdentificationType) &&
        Objects.equals(this.specialty, medicalTranscriptionJob.specialty) &&
        Objects.equals(this.type, medicalTranscriptionJob.type) &&
        Objects.equals(this.tags, medicalTranscriptionJob.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(medicalTranscriptionJobName, transcriptionJobStatus, languageCode, mediaSampleRateHertz, mediaFormat, media, transcript, startTime, creationTime, completionTime, failureReason, settings, contentIdentificationType, specialty, type, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MedicalTranscriptionJob {\n");
    sb.append("    medicalTranscriptionJobName: ").append(toIndentedString(medicalTranscriptionJobName)).append("\n");
    sb.append("    transcriptionJobStatus: ").append(toIndentedString(transcriptionJobStatus)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    mediaSampleRateHertz: ").append(toIndentedString(mediaSampleRateHertz)).append("\n");
    sb.append("    mediaFormat: ").append(toIndentedString(mediaFormat)).append("\n");
    sb.append("    media: ").append(toIndentedString(media)).append("\n");
    sb.append("    transcript: ").append(toIndentedString(transcript)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    completionTime: ").append(toIndentedString(completionTime)).append("\n");
    sb.append("    failureReason: ").append(toIndentedString(failureReason)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    contentIdentificationType: ").append(toIndentedString(contentIdentificationType)).append("\n");
    sb.append("    specialty: ").append(toIndentedString(specialty)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MedicalTranscriptionJobName");
    openapiFields.add("TranscriptionJobStatus");
    openapiFields.add("LanguageCode");
    openapiFields.add("MediaSampleRateHertz");
    openapiFields.add("MediaFormat");
    openapiFields.add("Media");
    openapiFields.add("Transcript");
    openapiFields.add("StartTime");
    openapiFields.add("CreationTime");
    openapiFields.add("CompletionTime");
    openapiFields.add("FailureReason");
    openapiFields.add("Settings");
    openapiFields.add("ContentIdentificationType");
    openapiFields.add("Specialty");
    openapiFields.add("Type");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MedicalTranscriptionJob
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MedicalTranscriptionJob.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MedicalTranscriptionJob is not found in the empty JSON string", MedicalTranscriptionJob.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MedicalTranscriptionJob.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MedicalTranscriptionJob` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `MedicalTranscriptionJobName`
      if (jsonObj.get("MedicalTranscriptionJobName") != null && !jsonObj.get("MedicalTranscriptionJobName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MedicalTranscriptionJobName"));
      }
      // validate the optional field `TranscriptionJobStatus`
      if (jsonObj.get("TranscriptionJobStatus") != null && !jsonObj.get("TranscriptionJobStatus").isJsonNull()) {
        TranscriptionJobStatus.validateJsonElement(jsonObj.get("TranscriptionJobStatus"));
      }
      // validate the optional field `LanguageCode`
      if (jsonObj.get("LanguageCode") != null && !jsonObj.get("LanguageCode").isJsonNull()) {
        LanguageCode.validateJsonElement(jsonObj.get("LanguageCode"));
      }
      // validate the optional field `MediaSampleRateHertz`
      if (jsonObj.get("MediaSampleRateHertz") != null && !jsonObj.get("MediaSampleRateHertz").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MediaSampleRateHertz"));
      }
      // validate the optional field `MediaFormat`
      if (jsonObj.get("MediaFormat") != null && !jsonObj.get("MediaFormat").isJsonNull()) {
        MediaFormat.validateJsonElement(jsonObj.get("MediaFormat"));
      }
      // validate the optional field `Media`
      if (jsonObj.get("Media") != null && !jsonObj.get("Media").isJsonNull()) {
        Media.validateJsonElement(jsonObj.get("Media"));
      }
      // validate the optional field `Transcript`
      if (jsonObj.get("Transcript") != null && !jsonObj.get("Transcript").isJsonNull()) {
        MedicalTranscriptionJobTranscript.validateJsonElement(jsonObj.get("Transcript"));
      }
      // validate the optional field `StartTime`
      if (jsonObj.get("StartTime") != null && !jsonObj.get("StartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartTime"));
      }
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
      // validate the optional field `CompletionTime`
      if (jsonObj.get("CompletionTime") != null && !jsonObj.get("CompletionTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CompletionTime"));
      }
      // validate the optional field `FailureReason`
      if (jsonObj.get("FailureReason") != null && !jsonObj.get("FailureReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FailureReason"));
      }
      // validate the optional field `Settings`
      if (jsonObj.get("Settings") != null && !jsonObj.get("Settings").isJsonNull()) {
        MedicalTranscriptionJobSettings.validateJsonElement(jsonObj.get("Settings"));
      }
      // validate the optional field `ContentIdentificationType`
      if (jsonObj.get("ContentIdentificationType") != null && !jsonObj.get("ContentIdentificationType").isJsonNull()) {
        MedicalContentIdentificationType.validateJsonElement(jsonObj.get("ContentIdentificationType"));
      }
      // validate the optional field `Specialty`
      if (jsonObj.get("Specialty") != null && !jsonObj.get("Specialty").isJsonNull()) {
        Specialty.validateJsonElement(jsonObj.get("Specialty"));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        Type.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MedicalTranscriptionJob.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MedicalTranscriptionJob' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MedicalTranscriptionJob> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MedicalTranscriptionJob.class));

       return (TypeAdapter<T>) new TypeAdapter<MedicalTranscriptionJob>() {
           @Override
           public void write(JsonWriter out, MedicalTranscriptionJob value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MedicalTranscriptionJob read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MedicalTranscriptionJob given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MedicalTranscriptionJob
   * @throws IOException if the JSON string is invalid with respect to MedicalTranscriptionJob
   */
  public static MedicalTranscriptionJob fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MedicalTranscriptionJob.class);
  }

  /**
   * Convert an instance of MedicalTranscriptionJob to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

