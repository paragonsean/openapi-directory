/*
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.LanguageCode;
import org.openapitools.client.model.MediaFormat;
import org.openapitools.client.model.TranscriptionJobContentRedaction;
import org.openapitools.client.model.TranscriptionJobJobExecutionSettings;
import org.openapitools.client.model.TranscriptionJobMedia;
import org.openapitools.client.model.TranscriptionJobModelSettings;
import org.openapitools.client.model.TranscriptionJobSettings;
import org.openapitools.client.model.TranscriptionJobStatus;
import org.openapitools.client.model.TranscriptionJobSubtitles;
import org.openapitools.client.model.TranscriptionJobTranscript;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartTranscriptionJobResponseTranscriptionJob
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:53.580792-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartTranscriptionJobResponseTranscriptionJob {
  public static final String SERIALIZED_NAME_TRANSCRIPTION_JOB_NAME = "TranscriptionJobName";
  @SerializedName(SERIALIZED_NAME_TRANSCRIPTION_JOB_NAME)
  private String transcriptionJobName;

  public static final String SERIALIZED_NAME_TRANSCRIPTION_JOB_STATUS = "TranscriptionJobStatus";
  @SerializedName(SERIALIZED_NAME_TRANSCRIPTION_JOB_STATUS)
  private TranscriptionJobStatus transcriptionJobStatus;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "LanguageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private LanguageCode languageCode;

  public static final String SERIALIZED_NAME_MEDIA_SAMPLE_RATE_HERTZ = "MediaSampleRateHertz";
  @SerializedName(SERIALIZED_NAME_MEDIA_SAMPLE_RATE_HERTZ)
  private Integer mediaSampleRateHertz;

  public static final String SERIALIZED_NAME_MEDIA_FORMAT = "MediaFormat";
  @SerializedName(SERIALIZED_NAME_MEDIA_FORMAT)
  private MediaFormat mediaFormat;

  public static final String SERIALIZED_NAME_MEDIA = "Media";
  @SerializedName(SERIALIZED_NAME_MEDIA)
  private TranscriptionJobMedia media;

  public static final String SERIALIZED_NAME_TRANSCRIPT = "Transcript";
  @SerializedName(SERIALIZED_NAME_TRANSCRIPT)
  private TranscriptionJobTranscript transcript;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_COMPLETION_TIME = "CompletionTime";
  @SerializedName(SERIALIZED_NAME_COMPLETION_TIME)
  private OffsetDateTime completionTime;

  public static final String SERIALIZED_NAME_FAILURE_REASON = "FailureReason";
  @SerializedName(SERIALIZED_NAME_FAILURE_REASON)
  private String failureReason;

  public static final String SERIALIZED_NAME_SETTINGS = "Settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private TranscriptionJobSettings settings;

  public static final String SERIALIZED_NAME_MODEL_SETTINGS = "ModelSettings";
  @SerializedName(SERIALIZED_NAME_MODEL_SETTINGS)
  private TranscriptionJobModelSettings modelSettings;

  public static final String SERIALIZED_NAME_JOB_EXECUTION_SETTINGS = "JobExecutionSettings";
  @SerializedName(SERIALIZED_NAME_JOB_EXECUTION_SETTINGS)
  private TranscriptionJobJobExecutionSettings jobExecutionSettings;

  public static final String SERIALIZED_NAME_CONTENT_REDACTION = "ContentRedaction";
  @SerializedName(SERIALIZED_NAME_CONTENT_REDACTION)
  private TranscriptionJobContentRedaction contentRedaction;

  public static final String SERIALIZED_NAME_IDENTIFY_LANGUAGE = "IdentifyLanguage";
  @SerializedName(SERIALIZED_NAME_IDENTIFY_LANGUAGE)
  private Boolean identifyLanguage;

  public static final String SERIALIZED_NAME_IDENTIFY_MULTIPLE_LANGUAGES = "IdentifyMultipleLanguages";
  @SerializedName(SERIALIZED_NAME_IDENTIFY_MULTIPLE_LANGUAGES)
  private Boolean identifyMultipleLanguages;

  public static final String SERIALIZED_NAME_LANGUAGE_OPTIONS = "LanguageOptions";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_OPTIONS)
  private List languageOptions;

  public static final String SERIALIZED_NAME_IDENTIFIED_LANGUAGE_SCORE = "IdentifiedLanguageScore";
  @SerializedName(SERIALIZED_NAME_IDENTIFIED_LANGUAGE_SCORE)
  private Float identifiedLanguageScore;

  public static final String SERIALIZED_NAME_LANGUAGE_CODES = "LanguageCodes";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODES)
  private List languageCodes;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_SUBTITLES = "Subtitles";
  @SerializedName(SERIALIZED_NAME_SUBTITLES)
  private TranscriptionJobSubtitles subtitles;

  public static final String SERIALIZED_NAME_LANGUAGE_ID_SETTINGS = "LanguageIdSettings";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_ID_SETTINGS)
  private Map languageIdSettings;

  public static final String SERIALIZED_NAME_TOXICITY_DETECTION = "ToxicityDetection";
  @SerializedName(SERIALIZED_NAME_TOXICITY_DETECTION)
  private List toxicityDetection;

  public StartTranscriptionJobResponseTranscriptionJob() {
  }

  public StartTranscriptionJobResponseTranscriptionJob transcriptionJobName(String transcriptionJobName) {
    this.transcriptionJobName = transcriptionJobName;
    return this;
  }

  /**
   * Get transcriptionJobName
   * @return transcriptionJobName
   */
  @javax.annotation.Nullable
  public String getTranscriptionJobName() {
    return transcriptionJobName;
  }

  public void setTranscriptionJobName(String transcriptionJobName) {
    this.transcriptionJobName = transcriptionJobName;
  }


  public StartTranscriptionJobResponseTranscriptionJob transcriptionJobStatus(TranscriptionJobStatus transcriptionJobStatus) {
    this.transcriptionJobStatus = transcriptionJobStatus;
    return this;
  }

  /**
   * Get transcriptionJobStatus
   * @return transcriptionJobStatus
   */
  @javax.annotation.Nullable
  public TranscriptionJobStatus getTranscriptionJobStatus() {
    return transcriptionJobStatus;
  }

  public void setTranscriptionJobStatus(TranscriptionJobStatus transcriptionJobStatus) {
    this.transcriptionJobStatus = transcriptionJobStatus;
  }


  public StartTranscriptionJobResponseTranscriptionJob languageCode(LanguageCode languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * Get languageCode
   * @return languageCode
   */
  @javax.annotation.Nullable
  public LanguageCode getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(LanguageCode languageCode) {
    this.languageCode = languageCode;
  }


  public StartTranscriptionJobResponseTranscriptionJob mediaSampleRateHertz(Integer mediaSampleRateHertz) {
    this.mediaSampleRateHertz = mediaSampleRateHertz;
    return this;
  }

  /**
   * Get mediaSampleRateHertz
   * @return mediaSampleRateHertz
   */
  @javax.annotation.Nullable
  public Integer getMediaSampleRateHertz() {
    return mediaSampleRateHertz;
  }

  public void setMediaSampleRateHertz(Integer mediaSampleRateHertz) {
    this.mediaSampleRateHertz = mediaSampleRateHertz;
  }


  public StartTranscriptionJobResponseTranscriptionJob mediaFormat(MediaFormat mediaFormat) {
    this.mediaFormat = mediaFormat;
    return this;
  }

  /**
   * Get mediaFormat
   * @return mediaFormat
   */
  @javax.annotation.Nullable
  public MediaFormat getMediaFormat() {
    return mediaFormat;
  }

  public void setMediaFormat(MediaFormat mediaFormat) {
    this.mediaFormat = mediaFormat;
  }


  public StartTranscriptionJobResponseTranscriptionJob media(TranscriptionJobMedia media) {
    this.media = media;
    return this;
  }

  /**
   * Get media
   * @return media
   */
  @javax.annotation.Nullable
  public TranscriptionJobMedia getMedia() {
    return media;
  }

  public void setMedia(TranscriptionJobMedia media) {
    this.media = media;
  }


  public StartTranscriptionJobResponseTranscriptionJob transcript(TranscriptionJobTranscript transcript) {
    this.transcript = transcript;
    return this;
  }

  /**
   * Get transcript
   * @return transcript
   */
  @javax.annotation.Nullable
  public TranscriptionJobTranscript getTranscript() {
    return transcript;
  }

  public void setTranscript(TranscriptionJobTranscript transcript) {
    this.transcript = transcript;
  }


  public StartTranscriptionJobResponseTranscriptionJob startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public StartTranscriptionJobResponseTranscriptionJob creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public StartTranscriptionJobResponseTranscriptionJob completionTime(OffsetDateTime completionTime) {
    this.completionTime = completionTime;
    return this;
  }

  /**
   * Get completionTime
   * @return completionTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCompletionTime() {
    return completionTime;
  }

  public void setCompletionTime(OffsetDateTime completionTime) {
    this.completionTime = completionTime;
  }


  public StartTranscriptionJobResponseTranscriptionJob failureReason(String failureReason) {
    this.failureReason = failureReason;
    return this;
  }

  /**
   * Get failureReason
   * @return failureReason
   */
  @javax.annotation.Nullable
  public String getFailureReason() {
    return failureReason;
  }

  public void setFailureReason(String failureReason) {
    this.failureReason = failureReason;
  }


  public StartTranscriptionJobResponseTranscriptionJob settings(TranscriptionJobSettings settings) {
    this.settings = settings;
    return this;
  }

  /**
   * Get settings
   * @return settings
   */
  @javax.annotation.Nullable
  public TranscriptionJobSettings getSettings() {
    return settings;
  }

  public void setSettings(TranscriptionJobSettings settings) {
    this.settings = settings;
  }


  public StartTranscriptionJobResponseTranscriptionJob modelSettings(TranscriptionJobModelSettings modelSettings) {
    this.modelSettings = modelSettings;
    return this;
  }

  /**
   * Get modelSettings
   * @return modelSettings
   */
  @javax.annotation.Nullable
  public TranscriptionJobModelSettings getModelSettings() {
    return modelSettings;
  }

  public void setModelSettings(TranscriptionJobModelSettings modelSettings) {
    this.modelSettings = modelSettings;
  }


  public StartTranscriptionJobResponseTranscriptionJob jobExecutionSettings(TranscriptionJobJobExecutionSettings jobExecutionSettings) {
    this.jobExecutionSettings = jobExecutionSettings;
    return this;
  }

  /**
   * Get jobExecutionSettings
   * @return jobExecutionSettings
   */
  @javax.annotation.Nullable
  public TranscriptionJobJobExecutionSettings getJobExecutionSettings() {
    return jobExecutionSettings;
  }

  public void setJobExecutionSettings(TranscriptionJobJobExecutionSettings jobExecutionSettings) {
    this.jobExecutionSettings = jobExecutionSettings;
  }


  public StartTranscriptionJobResponseTranscriptionJob contentRedaction(TranscriptionJobContentRedaction contentRedaction) {
    this.contentRedaction = contentRedaction;
    return this;
  }

  /**
   * Get contentRedaction
   * @return contentRedaction
   */
  @javax.annotation.Nullable
  public TranscriptionJobContentRedaction getContentRedaction() {
    return contentRedaction;
  }

  public void setContentRedaction(TranscriptionJobContentRedaction contentRedaction) {
    this.contentRedaction = contentRedaction;
  }


  public StartTranscriptionJobResponseTranscriptionJob identifyLanguage(Boolean identifyLanguage) {
    this.identifyLanguage = identifyLanguage;
    return this;
  }

  /**
   * Get identifyLanguage
   * @return identifyLanguage
   */
  @javax.annotation.Nullable
  public Boolean getIdentifyLanguage() {
    return identifyLanguage;
  }

  public void setIdentifyLanguage(Boolean identifyLanguage) {
    this.identifyLanguage = identifyLanguage;
  }


  public StartTranscriptionJobResponseTranscriptionJob identifyMultipleLanguages(Boolean identifyMultipleLanguages) {
    this.identifyMultipleLanguages = identifyMultipleLanguages;
    return this;
  }

  /**
   * Get identifyMultipleLanguages
   * @return identifyMultipleLanguages
   */
  @javax.annotation.Nullable
  public Boolean getIdentifyMultipleLanguages() {
    return identifyMultipleLanguages;
  }

  public void setIdentifyMultipleLanguages(Boolean identifyMultipleLanguages) {
    this.identifyMultipleLanguages = identifyMultipleLanguages;
  }


  public StartTranscriptionJobResponseTranscriptionJob languageOptions(List languageOptions) {
    this.languageOptions = languageOptions;
    return this;
  }

  /**
   * Get languageOptions
   * @return languageOptions
   */
  @javax.annotation.Nullable
  public List getLanguageOptions() {
    return languageOptions;
  }

  public void setLanguageOptions(List languageOptions) {
    this.languageOptions = languageOptions;
  }


  public StartTranscriptionJobResponseTranscriptionJob identifiedLanguageScore(Float identifiedLanguageScore) {
    this.identifiedLanguageScore = identifiedLanguageScore;
    return this;
  }

  /**
   * Get identifiedLanguageScore
   * @return identifiedLanguageScore
   */
  @javax.annotation.Nullable
  public Float getIdentifiedLanguageScore() {
    return identifiedLanguageScore;
  }

  public void setIdentifiedLanguageScore(Float identifiedLanguageScore) {
    this.identifiedLanguageScore = identifiedLanguageScore;
  }


  public StartTranscriptionJobResponseTranscriptionJob languageCodes(List languageCodes) {
    this.languageCodes = languageCodes;
    return this;
  }

  /**
   * Get languageCodes
   * @return languageCodes
   */
  @javax.annotation.Nullable
  public List getLanguageCodes() {
    return languageCodes;
  }

  public void setLanguageCodes(List languageCodes) {
    this.languageCodes = languageCodes;
  }


  public StartTranscriptionJobResponseTranscriptionJob tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public StartTranscriptionJobResponseTranscriptionJob subtitles(TranscriptionJobSubtitles subtitles) {
    this.subtitles = subtitles;
    return this;
  }

  /**
   * Get subtitles
   * @return subtitles
   */
  @javax.annotation.Nullable
  public TranscriptionJobSubtitles getSubtitles() {
    return subtitles;
  }

  public void setSubtitles(TranscriptionJobSubtitles subtitles) {
    this.subtitles = subtitles;
  }


  public StartTranscriptionJobResponseTranscriptionJob languageIdSettings(Map languageIdSettings) {
    this.languageIdSettings = languageIdSettings;
    return this;
  }

  /**
   * Get languageIdSettings
   * @return languageIdSettings
   */
  @javax.annotation.Nullable
  public Map getLanguageIdSettings() {
    return languageIdSettings;
  }

  public void setLanguageIdSettings(Map languageIdSettings) {
    this.languageIdSettings = languageIdSettings;
  }


  public StartTranscriptionJobResponseTranscriptionJob toxicityDetection(List toxicityDetection) {
    this.toxicityDetection = toxicityDetection;
    return this;
  }

  /**
   * Get toxicityDetection
   * @return toxicityDetection
   */
  @javax.annotation.Nullable
  public List getToxicityDetection() {
    return toxicityDetection;
  }

  public void setToxicityDetection(List toxicityDetection) {
    this.toxicityDetection = toxicityDetection;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartTranscriptionJobResponseTranscriptionJob startTranscriptionJobResponseTranscriptionJob = (StartTranscriptionJobResponseTranscriptionJob) o;
    return Objects.equals(this.transcriptionJobName, startTranscriptionJobResponseTranscriptionJob.transcriptionJobName) &&
        Objects.equals(this.transcriptionJobStatus, startTranscriptionJobResponseTranscriptionJob.transcriptionJobStatus) &&
        Objects.equals(this.languageCode, startTranscriptionJobResponseTranscriptionJob.languageCode) &&
        Objects.equals(this.mediaSampleRateHertz, startTranscriptionJobResponseTranscriptionJob.mediaSampleRateHertz) &&
        Objects.equals(this.mediaFormat, startTranscriptionJobResponseTranscriptionJob.mediaFormat) &&
        Objects.equals(this.media, startTranscriptionJobResponseTranscriptionJob.media) &&
        Objects.equals(this.transcript, startTranscriptionJobResponseTranscriptionJob.transcript) &&
        Objects.equals(this.startTime, startTranscriptionJobResponseTranscriptionJob.startTime) &&
        Objects.equals(this.creationTime, startTranscriptionJobResponseTranscriptionJob.creationTime) &&
        Objects.equals(this.completionTime, startTranscriptionJobResponseTranscriptionJob.completionTime) &&
        Objects.equals(this.failureReason, startTranscriptionJobResponseTranscriptionJob.failureReason) &&
        Objects.equals(this.settings, startTranscriptionJobResponseTranscriptionJob.settings) &&
        Objects.equals(this.modelSettings, startTranscriptionJobResponseTranscriptionJob.modelSettings) &&
        Objects.equals(this.jobExecutionSettings, startTranscriptionJobResponseTranscriptionJob.jobExecutionSettings) &&
        Objects.equals(this.contentRedaction, startTranscriptionJobResponseTranscriptionJob.contentRedaction) &&
        Objects.equals(this.identifyLanguage, startTranscriptionJobResponseTranscriptionJob.identifyLanguage) &&
        Objects.equals(this.identifyMultipleLanguages, startTranscriptionJobResponseTranscriptionJob.identifyMultipleLanguages) &&
        Objects.equals(this.languageOptions, startTranscriptionJobResponseTranscriptionJob.languageOptions) &&
        Objects.equals(this.identifiedLanguageScore, startTranscriptionJobResponseTranscriptionJob.identifiedLanguageScore) &&
        Objects.equals(this.languageCodes, startTranscriptionJobResponseTranscriptionJob.languageCodes) &&
        Objects.equals(this.tags, startTranscriptionJobResponseTranscriptionJob.tags) &&
        Objects.equals(this.subtitles, startTranscriptionJobResponseTranscriptionJob.subtitles) &&
        Objects.equals(this.languageIdSettings, startTranscriptionJobResponseTranscriptionJob.languageIdSettings) &&
        Objects.equals(this.toxicityDetection, startTranscriptionJobResponseTranscriptionJob.toxicityDetection);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transcriptionJobName, transcriptionJobStatus, languageCode, mediaSampleRateHertz, mediaFormat, media, transcript, startTime, creationTime, completionTime, failureReason, settings, modelSettings, jobExecutionSettings, contentRedaction, identifyLanguage, identifyMultipleLanguages, languageOptions, identifiedLanguageScore, languageCodes, tags, subtitles, languageIdSettings, toxicityDetection);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartTranscriptionJobResponseTranscriptionJob {\n");
    sb.append("    transcriptionJobName: ").append(toIndentedString(transcriptionJobName)).append("\n");
    sb.append("    transcriptionJobStatus: ").append(toIndentedString(transcriptionJobStatus)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    mediaSampleRateHertz: ").append(toIndentedString(mediaSampleRateHertz)).append("\n");
    sb.append("    mediaFormat: ").append(toIndentedString(mediaFormat)).append("\n");
    sb.append("    media: ").append(toIndentedString(media)).append("\n");
    sb.append("    transcript: ").append(toIndentedString(transcript)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    completionTime: ").append(toIndentedString(completionTime)).append("\n");
    sb.append("    failureReason: ").append(toIndentedString(failureReason)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    modelSettings: ").append(toIndentedString(modelSettings)).append("\n");
    sb.append("    jobExecutionSettings: ").append(toIndentedString(jobExecutionSettings)).append("\n");
    sb.append("    contentRedaction: ").append(toIndentedString(contentRedaction)).append("\n");
    sb.append("    identifyLanguage: ").append(toIndentedString(identifyLanguage)).append("\n");
    sb.append("    identifyMultipleLanguages: ").append(toIndentedString(identifyMultipleLanguages)).append("\n");
    sb.append("    languageOptions: ").append(toIndentedString(languageOptions)).append("\n");
    sb.append("    identifiedLanguageScore: ").append(toIndentedString(identifiedLanguageScore)).append("\n");
    sb.append("    languageCodes: ").append(toIndentedString(languageCodes)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    subtitles: ").append(toIndentedString(subtitles)).append("\n");
    sb.append("    languageIdSettings: ").append(toIndentedString(languageIdSettings)).append("\n");
    sb.append("    toxicityDetection: ").append(toIndentedString(toxicityDetection)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TranscriptionJobName");
    openapiFields.add("TranscriptionJobStatus");
    openapiFields.add("LanguageCode");
    openapiFields.add("MediaSampleRateHertz");
    openapiFields.add("MediaFormat");
    openapiFields.add("Media");
    openapiFields.add("Transcript");
    openapiFields.add("StartTime");
    openapiFields.add("CreationTime");
    openapiFields.add("CompletionTime");
    openapiFields.add("FailureReason");
    openapiFields.add("Settings");
    openapiFields.add("ModelSettings");
    openapiFields.add("JobExecutionSettings");
    openapiFields.add("ContentRedaction");
    openapiFields.add("IdentifyLanguage");
    openapiFields.add("IdentifyMultipleLanguages");
    openapiFields.add("LanguageOptions");
    openapiFields.add("IdentifiedLanguageScore");
    openapiFields.add("LanguageCodes");
    openapiFields.add("Tags");
    openapiFields.add("Subtitles");
    openapiFields.add("LanguageIdSettings");
    openapiFields.add("ToxicityDetection");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartTranscriptionJobResponseTranscriptionJob
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartTranscriptionJobResponseTranscriptionJob.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartTranscriptionJobResponseTranscriptionJob is not found in the empty JSON string", StartTranscriptionJobResponseTranscriptionJob.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartTranscriptionJobResponseTranscriptionJob.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartTranscriptionJobResponseTranscriptionJob` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `TranscriptionJobName`
      if (jsonObj.get("TranscriptionJobName") != null && !jsonObj.get("TranscriptionJobName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TranscriptionJobName"));
      }
      // validate the optional field `TranscriptionJobStatus`
      if (jsonObj.get("TranscriptionJobStatus") != null && !jsonObj.get("TranscriptionJobStatus").isJsonNull()) {
        TranscriptionJobStatus.validateJsonElement(jsonObj.get("TranscriptionJobStatus"));
      }
      // validate the optional field `LanguageCode`
      if (jsonObj.get("LanguageCode") != null && !jsonObj.get("LanguageCode").isJsonNull()) {
        LanguageCode.validateJsonElement(jsonObj.get("LanguageCode"));
      }
      // validate the optional field `MediaSampleRateHertz`
      if (jsonObj.get("MediaSampleRateHertz") != null && !jsonObj.get("MediaSampleRateHertz").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MediaSampleRateHertz"));
      }
      // validate the optional field `MediaFormat`
      if (jsonObj.get("MediaFormat") != null && !jsonObj.get("MediaFormat").isJsonNull()) {
        MediaFormat.validateJsonElement(jsonObj.get("MediaFormat"));
      }
      // validate the optional field `Media`
      if (jsonObj.get("Media") != null && !jsonObj.get("Media").isJsonNull()) {
        TranscriptionJobMedia.validateJsonElement(jsonObj.get("Media"));
      }
      // validate the optional field `Transcript`
      if (jsonObj.get("Transcript") != null && !jsonObj.get("Transcript").isJsonNull()) {
        TranscriptionJobTranscript.validateJsonElement(jsonObj.get("Transcript"));
      }
      // validate the optional field `StartTime`
      if (jsonObj.get("StartTime") != null && !jsonObj.get("StartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartTime"));
      }
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
      // validate the optional field `CompletionTime`
      if (jsonObj.get("CompletionTime") != null && !jsonObj.get("CompletionTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CompletionTime"));
      }
      // validate the optional field `FailureReason`
      if (jsonObj.get("FailureReason") != null && !jsonObj.get("FailureReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FailureReason"));
      }
      // validate the optional field `Settings`
      if (jsonObj.get("Settings") != null && !jsonObj.get("Settings").isJsonNull()) {
        TranscriptionJobSettings.validateJsonElement(jsonObj.get("Settings"));
      }
      // validate the optional field `ModelSettings`
      if (jsonObj.get("ModelSettings") != null && !jsonObj.get("ModelSettings").isJsonNull()) {
        TranscriptionJobModelSettings.validateJsonElement(jsonObj.get("ModelSettings"));
      }
      // validate the optional field `JobExecutionSettings`
      if (jsonObj.get("JobExecutionSettings") != null && !jsonObj.get("JobExecutionSettings").isJsonNull()) {
        TranscriptionJobJobExecutionSettings.validateJsonElement(jsonObj.get("JobExecutionSettings"));
      }
      // validate the optional field `ContentRedaction`
      if (jsonObj.get("ContentRedaction") != null && !jsonObj.get("ContentRedaction").isJsonNull()) {
        TranscriptionJobContentRedaction.validateJsonElement(jsonObj.get("ContentRedaction"));
      }
      // validate the optional field `IdentifyLanguage`
      if (jsonObj.get("IdentifyLanguage") != null && !jsonObj.get("IdentifyLanguage").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IdentifyLanguage"));
      }
      // validate the optional field `IdentifyMultipleLanguages`
      if (jsonObj.get("IdentifyMultipleLanguages") != null && !jsonObj.get("IdentifyMultipleLanguages").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IdentifyMultipleLanguages"));
      }
      // validate the optional field `LanguageOptions`
      if (jsonObj.get("LanguageOptions") != null && !jsonObj.get("LanguageOptions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("LanguageOptions"));
      }
      // validate the optional field `IdentifiedLanguageScore`
      if (jsonObj.get("IdentifiedLanguageScore") != null && !jsonObj.get("IdentifiedLanguageScore").isJsonNull()) {
        Float.validateJsonElement(jsonObj.get("IdentifiedLanguageScore"));
      }
      // validate the optional field `LanguageCodes`
      if (jsonObj.get("LanguageCodes") != null && !jsonObj.get("LanguageCodes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("LanguageCodes"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `Subtitles`
      if (jsonObj.get("Subtitles") != null && !jsonObj.get("Subtitles").isJsonNull()) {
        TranscriptionJobSubtitles.validateJsonElement(jsonObj.get("Subtitles"));
      }
      // validate the optional field `LanguageIdSettings`
      if (jsonObj.get("LanguageIdSettings") != null && !jsonObj.get("LanguageIdSettings").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("LanguageIdSettings"));
      }
      // validate the optional field `ToxicityDetection`
      if (jsonObj.get("ToxicityDetection") != null && !jsonObj.get("ToxicityDetection").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ToxicityDetection"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartTranscriptionJobResponseTranscriptionJob.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartTranscriptionJobResponseTranscriptionJob' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartTranscriptionJobResponseTranscriptionJob> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartTranscriptionJobResponseTranscriptionJob.class));

       return (TypeAdapter<T>) new TypeAdapter<StartTranscriptionJobResponseTranscriptionJob>() {
           @Override
           public void write(JsonWriter out, StartTranscriptionJobResponseTranscriptionJob value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartTranscriptionJobResponseTranscriptionJob read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartTranscriptionJobResponseTranscriptionJob given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartTranscriptionJobResponseTranscriptionJob
   * @throws IOException if the JSON string is invalid with respect to StartTranscriptionJobResponseTranscriptionJob
   */
  public static StartTranscriptionJobResponseTranscriptionJob fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartTranscriptionJobResponseTranscriptionJob.class);
  }

  /**
   * Convert an instance of StartTranscriptionJobResponseTranscriptionJob to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

