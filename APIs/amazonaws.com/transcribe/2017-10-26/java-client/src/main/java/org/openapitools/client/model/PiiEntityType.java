/*
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets PiiEntityType
 */
@JsonAdapter(PiiEntityType.Adapter.class)
public enum PiiEntityType {
  
  BANK_ACCOUNT_NUMBER("BANK_ACCOUNT_NUMBER"),
  
  BANK_ROUTING("BANK_ROUTING"),
  
  CREDIT_DEBIT_NUMBER("CREDIT_DEBIT_NUMBER"),
  
  CREDIT_DEBIT_CVV("CREDIT_DEBIT_CVV"),
  
  CREDIT_DEBIT_EXPIRY("CREDIT_DEBIT_EXPIRY"),
  
  PIN("PIN"),
  
  EMAIL("EMAIL"),
  
  ADDRESS("ADDRESS"),
  
  NAME("NAME"),
  
  PHONE("PHONE"),
  
  SSN("SSN"),
  
  ALL("ALL");

  private String value;

  PiiEntityType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static PiiEntityType fromValue(String value) {
    for (PiiEntityType b : PiiEntityType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<PiiEntityType> {
    @Override
    public void write(final JsonWriter jsonWriter, final PiiEntityType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public PiiEntityType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return PiiEntityType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    PiiEntityType.fromValue(value);
  }
}

