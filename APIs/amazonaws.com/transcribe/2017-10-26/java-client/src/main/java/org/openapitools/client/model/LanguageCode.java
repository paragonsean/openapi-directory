/*
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets LanguageCode
 */
@JsonAdapter(LanguageCode.Adapter.class)
public enum LanguageCode {
  
  AF_ZA("af-ZA"),
  
  AR_AE("ar-AE"),
  
  AR_SA("ar-SA"),
  
  DA_DK("da-DK"),
  
  DE_CH("de-CH"),
  
  DE_DE("de-DE"),
  
  EN_AB("en-AB"),
  
  EN_AU("en-AU"),
  
  EN_GB("en-GB"),
  
  EN_IE("en-IE"),
  
  EN_IN("en-IN"),
  
  EN_US("en-US"),
  
  EN_WL("en-WL"),
  
  ES_ES("es-ES"),
  
  ES_US("es-US"),
  
  FA_IR("fa-IR"),
  
  FR_CA("fr-CA"),
  
  FR_FR("fr-FR"),
  
  HE_IL("he-IL"),
  
  HI_IN("hi-IN"),
  
  ID_ID("id-ID"),
  
  IT_IT("it-IT"),
  
  JA_JP("ja-JP"),
  
  KO_KR("ko-KR"),
  
  MS_MY("ms-MY"),
  
  NL_NL("nl-NL"),
  
  PT_BR("pt-BR"),
  
  PT_PT("pt-PT"),
  
  RU_RU("ru-RU"),
  
  TA_IN("ta-IN"),
  
  TE_IN("te-IN"),
  
  TR_TR("tr-TR"),
  
  ZH_CN("zh-CN"),
  
  ZH_TW("zh-TW"),
  
  TH_TH("th-TH"),
  
  EN_ZA("en-ZA"),
  
  EN_NZ("en-NZ"),
  
  VI_VN("vi-VN"),
  
  SV_SE("sv-SE");

  private String value;

  LanguageCode(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static LanguageCode fromValue(String value) {
    for (LanguageCode b : LanguageCode.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<LanguageCode> {
    @Override
    public void write(final JsonWriter jsonWriter, final LanguageCode enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public LanguageCode read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return LanguageCode.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    LanguageCode.fromValue(value);
  }
}

