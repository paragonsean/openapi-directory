/*
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.VocabularyFilterMethod;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TranscriptionJobSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:53.580792-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TranscriptionJobSettings {
  public static final String SERIALIZED_NAME_VOCABULARY_NAME = "VocabularyName";
  @SerializedName(SERIALIZED_NAME_VOCABULARY_NAME)
  private String vocabularyName;

  public static final String SERIALIZED_NAME_SHOW_SPEAKER_LABELS = "ShowSpeakerLabels";
  @SerializedName(SERIALIZED_NAME_SHOW_SPEAKER_LABELS)
  private Boolean showSpeakerLabels;

  public static final String SERIALIZED_NAME_MAX_SPEAKER_LABELS = "MaxSpeakerLabels";
  @SerializedName(SERIALIZED_NAME_MAX_SPEAKER_LABELS)
  private Integer maxSpeakerLabels;

  public static final String SERIALIZED_NAME_CHANNEL_IDENTIFICATION = "ChannelIdentification";
  @SerializedName(SERIALIZED_NAME_CHANNEL_IDENTIFICATION)
  private Boolean channelIdentification;

  public static final String SERIALIZED_NAME_SHOW_ALTERNATIVES = "ShowAlternatives";
  @SerializedName(SERIALIZED_NAME_SHOW_ALTERNATIVES)
  private Boolean showAlternatives;

  public static final String SERIALIZED_NAME_MAX_ALTERNATIVES = "MaxAlternatives";
  @SerializedName(SERIALIZED_NAME_MAX_ALTERNATIVES)
  private Integer maxAlternatives;

  public static final String SERIALIZED_NAME_VOCABULARY_FILTER_NAME = "VocabularyFilterName";
  @SerializedName(SERIALIZED_NAME_VOCABULARY_FILTER_NAME)
  private String vocabularyFilterName;

  public static final String SERIALIZED_NAME_VOCABULARY_FILTER_METHOD = "VocabularyFilterMethod";
  @SerializedName(SERIALIZED_NAME_VOCABULARY_FILTER_METHOD)
  private VocabularyFilterMethod vocabularyFilterMethod;

  public TranscriptionJobSettings() {
  }

  public TranscriptionJobSettings vocabularyName(String vocabularyName) {
    this.vocabularyName = vocabularyName;
    return this;
  }

  /**
   * Get vocabularyName
   * @return vocabularyName
   */
  @javax.annotation.Nullable
  public String getVocabularyName() {
    return vocabularyName;
  }

  public void setVocabularyName(String vocabularyName) {
    this.vocabularyName = vocabularyName;
  }


  public TranscriptionJobSettings showSpeakerLabels(Boolean showSpeakerLabels) {
    this.showSpeakerLabels = showSpeakerLabels;
    return this;
  }

  /**
   * Get showSpeakerLabels
   * @return showSpeakerLabels
   */
  @javax.annotation.Nullable
  public Boolean getShowSpeakerLabels() {
    return showSpeakerLabels;
  }

  public void setShowSpeakerLabels(Boolean showSpeakerLabels) {
    this.showSpeakerLabels = showSpeakerLabels;
  }


  public TranscriptionJobSettings maxSpeakerLabels(Integer maxSpeakerLabels) {
    this.maxSpeakerLabels = maxSpeakerLabels;
    return this;
  }

  /**
   * Get maxSpeakerLabels
   * @return maxSpeakerLabels
   */
  @javax.annotation.Nullable
  public Integer getMaxSpeakerLabels() {
    return maxSpeakerLabels;
  }

  public void setMaxSpeakerLabels(Integer maxSpeakerLabels) {
    this.maxSpeakerLabels = maxSpeakerLabels;
  }


  public TranscriptionJobSettings channelIdentification(Boolean channelIdentification) {
    this.channelIdentification = channelIdentification;
    return this;
  }

  /**
   * Get channelIdentification
   * @return channelIdentification
   */
  @javax.annotation.Nullable
  public Boolean getChannelIdentification() {
    return channelIdentification;
  }

  public void setChannelIdentification(Boolean channelIdentification) {
    this.channelIdentification = channelIdentification;
  }


  public TranscriptionJobSettings showAlternatives(Boolean showAlternatives) {
    this.showAlternatives = showAlternatives;
    return this;
  }

  /**
   * Get showAlternatives
   * @return showAlternatives
   */
  @javax.annotation.Nullable
  public Boolean getShowAlternatives() {
    return showAlternatives;
  }

  public void setShowAlternatives(Boolean showAlternatives) {
    this.showAlternatives = showAlternatives;
  }


  public TranscriptionJobSettings maxAlternatives(Integer maxAlternatives) {
    this.maxAlternatives = maxAlternatives;
    return this;
  }

  /**
   * Get maxAlternatives
   * @return maxAlternatives
   */
  @javax.annotation.Nullable
  public Integer getMaxAlternatives() {
    return maxAlternatives;
  }

  public void setMaxAlternatives(Integer maxAlternatives) {
    this.maxAlternatives = maxAlternatives;
  }


  public TranscriptionJobSettings vocabularyFilterName(String vocabularyFilterName) {
    this.vocabularyFilterName = vocabularyFilterName;
    return this;
  }

  /**
   * Get vocabularyFilterName
   * @return vocabularyFilterName
   */
  @javax.annotation.Nullable
  public String getVocabularyFilterName() {
    return vocabularyFilterName;
  }

  public void setVocabularyFilterName(String vocabularyFilterName) {
    this.vocabularyFilterName = vocabularyFilterName;
  }


  public TranscriptionJobSettings vocabularyFilterMethod(VocabularyFilterMethod vocabularyFilterMethod) {
    this.vocabularyFilterMethod = vocabularyFilterMethod;
    return this;
  }

  /**
   * Get vocabularyFilterMethod
   * @return vocabularyFilterMethod
   */
  @javax.annotation.Nullable
  public VocabularyFilterMethod getVocabularyFilterMethod() {
    return vocabularyFilterMethod;
  }

  public void setVocabularyFilterMethod(VocabularyFilterMethod vocabularyFilterMethod) {
    this.vocabularyFilterMethod = vocabularyFilterMethod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TranscriptionJobSettings transcriptionJobSettings = (TranscriptionJobSettings) o;
    return Objects.equals(this.vocabularyName, transcriptionJobSettings.vocabularyName) &&
        Objects.equals(this.showSpeakerLabels, transcriptionJobSettings.showSpeakerLabels) &&
        Objects.equals(this.maxSpeakerLabels, transcriptionJobSettings.maxSpeakerLabels) &&
        Objects.equals(this.channelIdentification, transcriptionJobSettings.channelIdentification) &&
        Objects.equals(this.showAlternatives, transcriptionJobSettings.showAlternatives) &&
        Objects.equals(this.maxAlternatives, transcriptionJobSettings.maxAlternatives) &&
        Objects.equals(this.vocabularyFilterName, transcriptionJobSettings.vocabularyFilterName) &&
        Objects.equals(this.vocabularyFilterMethod, transcriptionJobSettings.vocabularyFilterMethod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vocabularyName, showSpeakerLabels, maxSpeakerLabels, channelIdentification, showAlternatives, maxAlternatives, vocabularyFilterName, vocabularyFilterMethod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TranscriptionJobSettings {\n");
    sb.append("    vocabularyName: ").append(toIndentedString(vocabularyName)).append("\n");
    sb.append("    showSpeakerLabels: ").append(toIndentedString(showSpeakerLabels)).append("\n");
    sb.append("    maxSpeakerLabels: ").append(toIndentedString(maxSpeakerLabels)).append("\n");
    sb.append("    channelIdentification: ").append(toIndentedString(channelIdentification)).append("\n");
    sb.append("    showAlternatives: ").append(toIndentedString(showAlternatives)).append("\n");
    sb.append("    maxAlternatives: ").append(toIndentedString(maxAlternatives)).append("\n");
    sb.append("    vocabularyFilterName: ").append(toIndentedString(vocabularyFilterName)).append("\n");
    sb.append("    vocabularyFilterMethod: ").append(toIndentedString(vocabularyFilterMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("VocabularyName");
    openapiFields.add("ShowSpeakerLabels");
    openapiFields.add("MaxSpeakerLabels");
    openapiFields.add("ChannelIdentification");
    openapiFields.add("ShowAlternatives");
    openapiFields.add("MaxAlternatives");
    openapiFields.add("VocabularyFilterName");
    openapiFields.add("VocabularyFilterMethod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TranscriptionJobSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TranscriptionJobSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TranscriptionJobSettings is not found in the empty JSON string", TranscriptionJobSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TranscriptionJobSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TranscriptionJobSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `VocabularyName`
      if (jsonObj.get("VocabularyName") != null && !jsonObj.get("VocabularyName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VocabularyName"));
      }
      // validate the optional field `ShowSpeakerLabels`
      if (jsonObj.get("ShowSpeakerLabels") != null && !jsonObj.get("ShowSpeakerLabels").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ShowSpeakerLabels"));
      }
      // validate the optional field `MaxSpeakerLabels`
      if (jsonObj.get("MaxSpeakerLabels") != null && !jsonObj.get("MaxSpeakerLabels").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxSpeakerLabels"));
      }
      // validate the optional field `ChannelIdentification`
      if (jsonObj.get("ChannelIdentification") != null && !jsonObj.get("ChannelIdentification").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ChannelIdentification"));
      }
      // validate the optional field `ShowAlternatives`
      if (jsonObj.get("ShowAlternatives") != null && !jsonObj.get("ShowAlternatives").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ShowAlternatives"));
      }
      // validate the optional field `MaxAlternatives`
      if (jsonObj.get("MaxAlternatives") != null && !jsonObj.get("MaxAlternatives").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxAlternatives"));
      }
      // validate the optional field `VocabularyFilterName`
      if (jsonObj.get("VocabularyFilterName") != null && !jsonObj.get("VocabularyFilterName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VocabularyFilterName"));
      }
      // validate the optional field `VocabularyFilterMethod`
      if (jsonObj.get("VocabularyFilterMethod") != null && !jsonObj.get("VocabularyFilterMethod").isJsonNull()) {
        VocabularyFilterMethod.validateJsonElement(jsonObj.get("VocabularyFilterMethod"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TranscriptionJobSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TranscriptionJobSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TranscriptionJobSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TranscriptionJobSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<TranscriptionJobSettings>() {
           @Override
           public void write(JsonWriter out, TranscriptionJobSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TranscriptionJobSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TranscriptionJobSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TranscriptionJobSettings
   * @throws IOException if the JSON string is invalid with respect to TranscriptionJobSettings
   */
  public static TranscriptionJobSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TranscriptionJobSettings.class);
  }

  /**
   * Convert an instance of TranscriptionJobSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

