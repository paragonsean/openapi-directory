/*
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateVocabularyFilterRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:53.580792-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateVocabularyFilterRequest {
  public static final String SERIALIZED_NAME_VOCABULARY_FILTER_NAME = "VocabularyFilterName";
  @SerializedName(SERIALIZED_NAME_VOCABULARY_FILTER_NAME)
  private String vocabularyFilterName;

  public static final String SERIALIZED_NAME_WORDS = "Words";
  @SerializedName(SERIALIZED_NAME_WORDS)
  private List words;

  public static final String SERIALIZED_NAME_VOCABULARY_FILTER_FILE_URI = "VocabularyFilterFileUri";
  @SerializedName(SERIALIZED_NAME_VOCABULARY_FILTER_FILE_URI)
  private String vocabularyFilterFileUri;

  public static final String SERIALIZED_NAME_DATA_ACCESS_ROLE_ARN = "DataAccessRoleArn";
  @SerializedName(SERIALIZED_NAME_DATA_ACCESS_ROLE_ARN)
  private String dataAccessRoleArn;

  public UpdateVocabularyFilterRequest() {
  }

  public UpdateVocabularyFilterRequest vocabularyFilterName(String vocabularyFilterName) {
    this.vocabularyFilterName = vocabularyFilterName;
    return this;
  }

  /**
   * Get vocabularyFilterName
   * @return vocabularyFilterName
   */
  @javax.annotation.Nonnull
  public String getVocabularyFilterName() {
    return vocabularyFilterName;
  }

  public void setVocabularyFilterName(String vocabularyFilterName) {
    this.vocabularyFilterName = vocabularyFilterName;
  }


  public UpdateVocabularyFilterRequest words(List words) {
    this.words = words;
    return this;
  }

  /**
   * Get words
   * @return words
   */
  @javax.annotation.Nullable
  public List getWords() {
    return words;
  }

  public void setWords(List words) {
    this.words = words;
  }


  public UpdateVocabularyFilterRequest vocabularyFilterFileUri(String vocabularyFilterFileUri) {
    this.vocabularyFilterFileUri = vocabularyFilterFileUri;
    return this;
  }

  /**
   * Get vocabularyFilterFileUri
   * @return vocabularyFilterFileUri
   */
  @javax.annotation.Nullable
  public String getVocabularyFilterFileUri() {
    return vocabularyFilterFileUri;
  }

  public void setVocabularyFilterFileUri(String vocabularyFilterFileUri) {
    this.vocabularyFilterFileUri = vocabularyFilterFileUri;
  }


  public UpdateVocabularyFilterRequest dataAccessRoleArn(String dataAccessRoleArn) {
    this.dataAccessRoleArn = dataAccessRoleArn;
    return this;
  }

  /**
   * Get dataAccessRoleArn
   * @return dataAccessRoleArn
   */
  @javax.annotation.Nullable
  public String getDataAccessRoleArn() {
    return dataAccessRoleArn;
  }

  public void setDataAccessRoleArn(String dataAccessRoleArn) {
    this.dataAccessRoleArn = dataAccessRoleArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateVocabularyFilterRequest updateVocabularyFilterRequest = (UpdateVocabularyFilterRequest) o;
    return Objects.equals(this.vocabularyFilterName, updateVocabularyFilterRequest.vocabularyFilterName) &&
        Objects.equals(this.words, updateVocabularyFilterRequest.words) &&
        Objects.equals(this.vocabularyFilterFileUri, updateVocabularyFilterRequest.vocabularyFilterFileUri) &&
        Objects.equals(this.dataAccessRoleArn, updateVocabularyFilterRequest.dataAccessRoleArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vocabularyFilterName, words, vocabularyFilterFileUri, dataAccessRoleArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateVocabularyFilterRequest {\n");
    sb.append("    vocabularyFilterName: ").append(toIndentedString(vocabularyFilterName)).append("\n");
    sb.append("    words: ").append(toIndentedString(words)).append("\n");
    sb.append("    vocabularyFilterFileUri: ").append(toIndentedString(vocabularyFilterFileUri)).append("\n");
    sb.append("    dataAccessRoleArn: ").append(toIndentedString(dataAccessRoleArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("VocabularyFilterName");
    openapiFields.add("Words");
    openapiFields.add("VocabularyFilterFileUri");
    openapiFields.add("DataAccessRoleArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("VocabularyFilterName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateVocabularyFilterRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateVocabularyFilterRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateVocabularyFilterRequest is not found in the empty JSON string", UpdateVocabularyFilterRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateVocabularyFilterRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateVocabularyFilterRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateVocabularyFilterRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `VocabularyFilterName`
      String.validateJsonElement(jsonObj.get("VocabularyFilterName"));
      // validate the optional field `Words`
      if (jsonObj.get("Words") != null && !jsonObj.get("Words").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Words"));
      }
      // validate the optional field `VocabularyFilterFileUri`
      if (jsonObj.get("VocabularyFilterFileUri") != null && !jsonObj.get("VocabularyFilterFileUri").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VocabularyFilterFileUri"));
      }
      // validate the optional field `DataAccessRoleArn`
      if (jsonObj.get("DataAccessRoleArn") != null && !jsonObj.get("DataAccessRoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DataAccessRoleArn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateVocabularyFilterRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateVocabularyFilterRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateVocabularyFilterRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateVocabularyFilterRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateVocabularyFilterRequest>() {
           @Override
           public void write(JsonWriter out, UpdateVocabularyFilterRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateVocabularyFilterRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateVocabularyFilterRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateVocabularyFilterRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateVocabularyFilterRequest
   */
  public static UpdateVocabularyFilterRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateVocabularyFilterRequest.class);
  }

  /**
   * Convert an instance of UpdateVocabularyFilterRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

