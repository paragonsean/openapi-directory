/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonTranscribeService);
  }
}(this, function(expect, AmazonTranscribeService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonTranscribeService.GetTranscriptionJobResponseTranscriptionJob();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetTranscriptionJobResponseTranscriptionJob', function() {
    it('should create an instance of GetTranscriptionJobResponseTranscriptionJob', function() {
      // uncomment below and update the code to test GetTranscriptionJobResponseTranscriptionJob
      //var instance = new AmazonTranscribeService.GetTranscriptionJobResponseTranscriptionJob();
      //expect(instance).to.be.a(AmazonTranscribeService.GetTranscriptionJobResponseTranscriptionJob);
    });

    it('should have the property transcriptionJobName (base name: "TranscriptionJobName")', function() {
      // uncomment below and update the code to test the property transcriptionJobName
      //var instance = new AmazonTranscribeService.GetTranscriptionJobResponseTranscriptionJob();
      //expect(instance).to.be();
    });

    it('should have the property transcriptionJobStatus (base name: "TranscriptionJobStatus")', function() {
      // uncomment below and update the code to test the property transcriptionJobStatus
      //var instance = new AmazonTranscribeService.GetTranscriptionJobResponseTranscriptionJob();
      //expect(instance).to.be();
    });

    it('should have the property languageCode (base name: "LanguageCode")', function() {
      // uncomment below and update the code to test the property languageCode
      //var instance = new AmazonTranscribeService.GetTranscriptionJobResponseTranscriptionJob();
      //expect(instance).to.be();
    });

    it('should have the property mediaSampleRateHertz (base name: "MediaSampleRateHertz")', function() {
      // uncomment below and update the code to test the property mediaSampleRateHertz
      //var instance = new AmazonTranscribeService.GetTranscriptionJobResponseTranscriptionJob();
      //expect(instance).to.be();
    });

    it('should have the property mediaFormat (base name: "MediaFormat")', function() {
      // uncomment below and update the code to test the property mediaFormat
      //var instance = new AmazonTranscribeService.GetTranscriptionJobResponseTranscriptionJob();
      //expect(instance).to.be();
    });

    it('should have the property media (base name: "Media")', function() {
      // uncomment below and update the code to test the property media
      //var instance = new AmazonTranscribeService.GetTranscriptionJobResponseTranscriptionJob();
      //expect(instance).to.be();
    });

    it('should have the property transcript (base name: "Transcript")', function() {
      // uncomment below and update the code to test the property transcript
      //var instance = new AmazonTranscribeService.GetTranscriptionJobResponseTranscriptionJob();
      //expect(instance).to.be();
    });

    it('should have the property startTime (base name: "StartTime")', function() {
      // uncomment below and update the code to test the property startTime
      //var instance = new AmazonTranscribeService.GetTranscriptionJobResponseTranscriptionJob();
      //expect(instance).to.be();
    });

    it('should have the property creationTime (base name: "CreationTime")', function() {
      // uncomment below and update the code to test the property creationTime
      //var instance = new AmazonTranscribeService.GetTranscriptionJobResponseTranscriptionJob();
      //expect(instance).to.be();
    });

    it('should have the property completionTime (base name: "CompletionTime")', function() {
      // uncomment below and update the code to test the property completionTime
      //var instance = new AmazonTranscribeService.GetTranscriptionJobResponseTranscriptionJob();
      //expect(instance).to.be();
    });

    it('should have the property failureReason (base name: "FailureReason")', function() {
      // uncomment below and update the code to test the property failureReason
      //var instance = new AmazonTranscribeService.GetTranscriptionJobResponseTranscriptionJob();
      //expect(instance).to.be();
    });

    it('should have the property settings (base name: "Settings")', function() {
      // uncomment below and update the code to test the property settings
      //var instance = new AmazonTranscribeService.GetTranscriptionJobResponseTranscriptionJob();
      //expect(instance).to.be();
    });

    it('should have the property modelSettings (base name: "ModelSettings")', function() {
      // uncomment below and update the code to test the property modelSettings
      //var instance = new AmazonTranscribeService.GetTranscriptionJobResponseTranscriptionJob();
      //expect(instance).to.be();
    });

    it('should have the property jobExecutionSettings (base name: "JobExecutionSettings")', function() {
      // uncomment below and update the code to test the property jobExecutionSettings
      //var instance = new AmazonTranscribeService.GetTranscriptionJobResponseTranscriptionJob();
      //expect(instance).to.be();
    });

    it('should have the property contentRedaction (base name: "ContentRedaction")', function() {
      // uncomment below and update the code to test the property contentRedaction
      //var instance = new AmazonTranscribeService.GetTranscriptionJobResponseTranscriptionJob();
      //expect(instance).to.be();
    });

    it('should have the property identifyLanguage (base name: "IdentifyLanguage")', function() {
      // uncomment below and update the code to test the property identifyLanguage
      //var instance = new AmazonTranscribeService.GetTranscriptionJobResponseTranscriptionJob();
      //expect(instance).to.be();
    });

    it('should have the property identifyMultipleLanguages (base name: "IdentifyMultipleLanguages")', function() {
      // uncomment below and update the code to test the property identifyMultipleLanguages
      //var instance = new AmazonTranscribeService.GetTranscriptionJobResponseTranscriptionJob();
      //expect(instance).to.be();
    });

    it('should have the property languageOptions (base name: "LanguageOptions")', function() {
      // uncomment below and update the code to test the property languageOptions
      //var instance = new AmazonTranscribeService.GetTranscriptionJobResponseTranscriptionJob();
      //expect(instance).to.be();
    });

    it('should have the property identifiedLanguageScore (base name: "IdentifiedLanguageScore")', function() {
      // uncomment below and update the code to test the property identifiedLanguageScore
      //var instance = new AmazonTranscribeService.GetTranscriptionJobResponseTranscriptionJob();
      //expect(instance).to.be();
    });

    it('should have the property languageCodes (base name: "LanguageCodes")', function() {
      // uncomment below and update the code to test the property languageCodes
      //var instance = new AmazonTranscribeService.GetTranscriptionJobResponseTranscriptionJob();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "Tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new AmazonTranscribeService.GetTranscriptionJobResponseTranscriptionJob();
      //expect(instance).to.be();
    });

    it('should have the property subtitles (base name: "Subtitles")', function() {
      // uncomment below and update the code to test the property subtitles
      //var instance = new AmazonTranscribeService.GetTranscriptionJobResponseTranscriptionJob();
      //expect(instance).to.be();
    });

    it('should have the property languageIdSettings (base name: "LanguageIdSettings")', function() {
      // uncomment below and update the code to test the property languageIdSettings
      //var instance = new AmazonTranscribeService.GetTranscriptionJobResponseTranscriptionJob();
      //expect(instance).to.be();
    });

    it('should have the property toxicityDetection (base name: "ToxicityDetection")', function() {
      // uncomment below and update the code to test the property toxicityDetection
      //var instance = new AmazonTranscribeService.GetTranscriptionJobResponseTranscriptionJob();
      //expect(instance).to.be();
    });

  });

}));
