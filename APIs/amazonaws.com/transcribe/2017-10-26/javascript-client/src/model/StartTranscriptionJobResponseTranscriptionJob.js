/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LanguageCode from './LanguageCode';
import MediaFormat from './MediaFormat';
import TranscriptionJob from './TranscriptionJob';
import TranscriptionJobContentRedaction from './TranscriptionJobContentRedaction';
import TranscriptionJobJobExecutionSettings from './TranscriptionJobJobExecutionSettings';
import TranscriptionJobMedia from './TranscriptionJobMedia';
import TranscriptionJobModelSettings from './TranscriptionJobModelSettings';
import TranscriptionJobSettings from './TranscriptionJobSettings';
import TranscriptionJobStatus from './TranscriptionJobStatus';
import TranscriptionJobSubtitles from './TranscriptionJobSubtitles';
import TranscriptionJobTranscript from './TranscriptionJobTranscript';

/**
 * The StartTranscriptionJobResponseTranscriptionJob model module.
 * @module model/StartTranscriptionJobResponseTranscriptionJob
 * @version 2017-10-26
 */
class StartTranscriptionJobResponseTranscriptionJob {
    /**
     * Constructs a new <code>StartTranscriptionJobResponseTranscriptionJob</code>.
     * @alias module:model/StartTranscriptionJobResponseTranscriptionJob
     * @implements module:model/TranscriptionJob
     */
    constructor() { 
        TranscriptionJob.initialize(this);
        StartTranscriptionJobResponseTranscriptionJob.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StartTranscriptionJobResponseTranscriptionJob</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StartTranscriptionJobResponseTranscriptionJob} obj Optional instance to populate.
     * @return {module:model/StartTranscriptionJobResponseTranscriptionJob} The populated <code>StartTranscriptionJobResponseTranscriptionJob</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StartTranscriptionJobResponseTranscriptionJob();
            TranscriptionJob.constructFromObject(data, obj);

            if (data.hasOwnProperty('TranscriptionJobName')) {
                obj['TranscriptionJobName'] = ApiClient.convertToType(data['TranscriptionJobName'], 'String');
            }
            if (data.hasOwnProperty('TranscriptionJobStatus')) {
                obj['TranscriptionJobStatus'] = ApiClient.convertToType(data['TranscriptionJobStatus'], TranscriptionJobStatus);
            }
            if (data.hasOwnProperty('LanguageCode')) {
                obj['LanguageCode'] = ApiClient.convertToType(data['LanguageCode'], LanguageCode);
            }
            if (data.hasOwnProperty('MediaSampleRateHertz')) {
                obj['MediaSampleRateHertz'] = ApiClient.convertToType(data['MediaSampleRateHertz'], 'Number');
            }
            if (data.hasOwnProperty('MediaFormat')) {
                obj['MediaFormat'] = ApiClient.convertToType(data['MediaFormat'], MediaFormat);
            }
            if (data.hasOwnProperty('Media')) {
                obj['Media'] = TranscriptionJobMedia.constructFromObject(data['Media']);
            }
            if (data.hasOwnProperty('Transcript')) {
                obj['Transcript'] = TranscriptionJobTranscript.constructFromObject(data['Transcript']);
            }
            if (data.hasOwnProperty('StartTime')) {
                obj['StartTime'] = ApiClient.convertToType(data['StartTime'], 'Date');
            }
            if (data.hasOwnProperty('CreationTime')) {
                obj['CreationTime'] = ApiClient.convertToType(data['CreationTime'], 'Date');
            }
            if (data.hasOwnProperty('CompletionTime')) {
                obj['CompletionTime'] = ApiClient.convertToType(data['CompletionTime'], 'Date');
            }
            if (data.hasOwnProperty('FailureReason')) {
                obj['FailureReason'] = ApiClient.convertToType(data['FailureReason'], 'String');
            }
            if (data.hasOwnProperty('Settings')) {
                obj['Settings'] = TranscriptionJobSettings.constructFromObject(data['Settings']);
            }
            if (data.hasOwnProperty('ModelSettings')) {
                obj['ModelSettings'] = TranscriptionJobModelSettings.constructFromObject(data['ModelSettings']);
            }
            if (data.hasOwnProperty('JobExecutionSettings')) {
                obj['JobExecutionSettings'] = TranscriptionJobJobExecutionSettings.constructFromObject(data['JobExecutionSettings']);
            }
            if (data.hasOwnProperty('ContentRedaction')) {
                obj['ContentRedaction'] = TranscriptionJobContentRedaction.constructFromObject(data['ContentRedaction']);
            }
            if (data.hasOwnProperty('IdentifyLanguage')) {
                obj['IdentifyLanguage'] = ApiClient.convertToType(data['IdentifyLanguage'], 'Boolean');
            }
            if (data.hasOwnProperty('IdentifyMultipleLanguages')) {
                obj['IdentifyMultipleLanguages'] = ApiClient.convertToType(data['IdentifyMultipleLanguages'], 'Boolean');
            }
            if (data.hasOwnProperty('LanguageOptions')) {
                obj['LanguageOptions'] = ApiClient.convertToType(data['LanguageOptions'], Array);
            }
            if (data.hasOwnProperty('IdentifiedLanguageScore')) {
                obj['IdentifiedLanguageScore'] = ApiClient.convertToType(data['IdentifiedLanguageScore'], 'Number');
            }
            if (data.hasOwnProperty('LanguageCodes')) {
                obj['LanguageCodes'] = ApiClient.convertToType(data['LanguageCodes'], Array);
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], Array);
            }
            if (data.hasOwnProperty('Subtitles')) {
                obj['Subtitles'] = TranscriptionJobSubtitles.constructFromObject(data['Subtitles']);
            }
            if (data.hasOwnProperty('LanguageIdSettings')) {
                obj['LanguageIdSettings'] = ApiClient.convertToType(data['LanguageIdSettings'], Object);
            }
            if (data.hasOwnProperty('ToxicityDetection')) {
                obj['ToxicityDetection'] = ApiClient.convertToType(data['ToxicityDetection'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StartTranscriptionJobResponseTranscriptionJob</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StartTranscriptionJobResponseTranscriptionJob</code>.
     */
    static validateJSON(data) {
        // validate the optional field `TranscriptionJobName`
        if (data['TranscriptionJobName']) { // data not null
          String.validateJSON(data['TranscriptionJobName']);
        }
        // validate the optional field `TranscriptionJobStatus`
        if (data['TranscriptionJobStatus']) { // data not null
          TranscriptionJobStatus.validateJSON(data['TranscriptionJobStatus']);
        }
        // validate the optional field `LanguageCode`
        if (data['LanguageCode']) { // data not null
          LanguageCode.validateJSON(data['LanguageCode']);
        }
        // validate the optional field `MediaSampleRateHertz`
        if (data['MediaSampleRateHertz']) { // data not null
          Number.validateJSON(data['MediaSampleRateHertz']);
        }
        // validate the optional field `MediaFormat`
        if (data['MediaFormat']) { // data not null
          MediaFormat.validateJSON(data['MediaFormat']);
        }
        // validate the optional field `Media`
        if (data['Media']) { // data not null
          TranscriptionJobMedia.validateJSON(data['Media']);
        }
        // validate the optional field `Transcript`
        if (data['Transcript']) { // data not null
          TranscriptionJobTranscript.validateJSON(data['Transcript']);
        }
        // validate the optional field `StartTime`
        if (data['StartTime']) { // data not null
          Date.validateJSON(data['StartTime']);
        }
        // validate the optional field `CreationTime`
        if (data['CreationTime']) { // data not null
          Date.validateJSON(data['CreationTime']);
        }
        // validate the optional field `CompletionTime`
        if (data['CompletionTime']) { // data not null
          Date.validateJSON(data['CompletionTime']);
        }
        // validate the optional field `FailureReason`
        if (data['FailureReason']) { // data not null
          String.validateJSON(data['FailureReason']);
        }
        // validate the optional field `Settings`
        if (data['Settings']) { // data not null
          TranscriptionJobSettings.validateJSON(data['Settings']);
        }
        // validate the optional field `ModelSettings`
        if (data['ModelSettings']) { // data not null
          TranscriptionJobModelSettings.validateJSON(data['ModelSettings']);
        }
        // validate the optional field `JobExecutionSettings`
        if (data['JobExecutionSettings']) { // data not null
          TranscriptionJobJobExecutionSettings.validateJSON(data['JobExecutionSettings']);
        }
        // validate the optional field `ContentRedaction`
        if (data['ContentRedaction']) { // data not null
          TranscriptionJobContentRedaction.validateJSON(data['ContentRedaction']);
        }
        // validate the optional field `IdentifyLanguage`
        if (data['IdentifyLanguage']) { // data not null
          Boolean.validateJSON(data['IdentifyLanguage']);
        }
        // validate the optional field `IdentifyMultipleLanguages`
        if (data['IdentifyMultipleLanguages']) { // data not null
          Boolean.validateJSON(data['IdentifyMultipleLanguages']);
        }
        // validate the optional field `LanguageOptions`
        if (data['LanguageOptions']) { // data not null
          Array.validateJSON(data['LanguageOptions']);
        }
        // validate the optional field `IdentifiedLanguageScore`
        if (data['IdentifiedLanguageScore']) { // data not null
          Number.validateJSON(data['IdentifiedLanguageScore']);
        }
        // validate the optional field `LanguageCodes`
        if (data['LanguageCodes']) { // data not null
          Array.validateJSON(data['LanguageCodes']);
        }
        // validate the optional field `Tags`
        if (data['Tags']) { // data not null
          Array.validateJSON(data['Tags']);
        }
        // validate the optional field `Subtitles`
        if (data['Subtitles']) { // data not null
          TranscriptionJobSubtitles.validateJSON(data['Subtitles']);
        }
        // validate the optional field `LanguageIdSettings`
        if (data['LanguageIdSettings']) { // data not null
          Object.validateJSON(data['LanguageIdSettings']);
        }
        // validate the optional field `ToxicityDetection`
        if (data['ToxicityDetection']) { // data not null
          Array.validateJSON(data['ToxicityDetection']);
        }

        return true;
    }


}



/**
 * @member {String} TranscriptionJobName
 */
StartTranscriptionJobResponseTranscriptionJob.prototype['TranscriptionJobName'] = undefined;

/**
 * @member {module:model/TranscriptionJobStatus} TranscriptionJobStatus
 */
StartTranscriptionJobResponseTranscriptionJob.prototype['TranscriptionJobStatus'] = undefined;

/**
 * @member {module:model/LanguageCode} LanguageCode
 */
StartTranscriptionJobResponseTranscriptionJob.prototype['LanguageCode'] = undefined;

/**
 * @member {Number} MediaSampleRateHertz
 */
StartTranscriptionJobResponseTranscriptionJob.prototype['MediaSampleRateHertz'] = undefined;

/**
 * @member {module:model/MediaFormat} MediaFormat
 */
StartTranscriptionJobResponseTranscriptionJob.prototype['MediaFormat'] = undefined;

/**
 * @member {module:model/TranscriptionJobMedia} Media
 */
StartTranscriptionJobResponseTranscriptionJob.prototype['Media'] = undefined;

/**
 * @member {module:model/TranscriptionJobTranscript} Transcript
 */
StartTranscriptionJobResponseTranscriptionJob.prototype['Transcript'] = undefined;

/**
 * @member {Date} StartTime
 */
StartTranscriptionJobResponseTranscriptionJob.prototype['StartTime'] = undefined;

/**
 * @member {Date} CreationTime
 */
StartTranscriptionJobResponseTranscriptionJob.prototype['CreationTime'] = undefined;

/**
 * @member {Date} CompletionTime
 */
StartTranscriptionJobResponseTranscriptionJob.prototype['CompletionTime'] = undefined;

/**
 * @member {String} FailureReason
 */
StartTranscriptionJobResponseTranscriptionJob.prototype['FailureReason'] = undefined;

/**
 * @member {module:model/TranscriptionJobSettings} Settings
 */
StartTranscriptionJobResponseTranscriptionJob.prototype['Settings'] = undefined;

/**
 * @member {module:model/TranscriptionJobModelSettings} ModelSettings
 */
StartTranscriptionJobResponseTranscriptionJob.prototype['ModelSettings'] = undefined;

/**
 * @member {module:model/TranscriptionJobJobExecutionSettings} JobExecutionSettings
 */
StartTranscriptionJobResponseTranscriptionJob.prototype['JobExecutionSettings'] = undefined;

/**
 * @member {module:model/TranscriptionJobContentRedaction} ContentRedaction
 */
StartTranscriptionJobResponseTranscriptionJob.prototype['ContentRedaction'] = undefined;

/**
 * @member {Boolean} IdentifyLanguage
 */
StartTranscriptionJobResponseTranscriptionJob.prototype['IdentifyLanguage'] = undefined;

/**
 * @member {Boolean} IdentifyMultipleLanguages
 */
StartTranscriptionJobResponseTranscriptionJob.prototype['IdentifyMultipleLanguages'] = undefined;

/**
 * @member {Array} LanguageOptions
 */
StartTranscriptionJobResponseTranscriptionJob.prototype['LanguageOptions'] = undefined;

/**
 * @member {Number} IdentifiedLanguageScore
 */
StartTranscriptionJobResponseTranscriptionJob.prototype['IdentifiedLanguageScore'] = undefined;

/**
 * @member {Array} LanguageCodes
 */
StartTranscriptionJobResponseTranscriptionJob.prototype['LanguageCodes'] = undefined;

/**
 * @member {Array} Tags
 */
StartTranscriptionJobResponseTranscriptionJob.prototype['Tags'] = undefined;

/**
 * @member {module:model/TranscriptionJobSubtitles} Subtitles
 */
StartTranscriptionJobResponseTranscriptionJob.prototype['Subtitles'] = undefined;

/**
 * @member {Object} LanguageIdSettings
 */
StartTranscriptionJobResponseTranscriptionJob.prototype['LanguageIdSettings'] = undefined;

/**
 * @member {Array} ToxicityDetection
 */
StartTranscriptionJobResponseTranscriptionJob.prototype['ToxicityDetection'] = undefined;


// Implement TranscriptionJob interface:
/**
 * @member {String} TranscriptionJobName
 */
TranscriptionJob.prototype['TranscriptionJobName'] = undefined;
/**
 * @member {module:model/TranscriptionJobStatus} TranscriptionJobStatus
 */
TranscriptionJob.prototype['TranscriptionJobStatus'] = undefined;
/**
 * @member {module:model/LanguageCode} LanguageCode
 */
TranscriptionJob.prototype['LanguageCode'] = undefined;
/**
 * @member {Number} MediaSampleRateHertz
 */
TranscriptionJob.prototype['MediaSampleRateHertz'] = undefined;
/**
 * @member {module:model/MediaFormat} MediaFormat
 */
TranscriptionJob.prototype['MediaFormat'] = undefined;
/**
 * @member {module:model/TranscriptionJobMedia} Media
 */
TranscriptionJob.prototype['Media'] = undefined;
/**
 * @member {module:model/TranscriptionJobTranscript} Transcript
 */
TranscriptionJob.prototype['Transcript'] = undefined;
/**
 * @member {Date} StartTime
 */
TranscriptionJob.prototype['StartTime'] = undefined;
/**
 * @member {Date} CreationTime
 */
TranscriptionJob.prototype['CreationTime'] = undefined;
/**
 * @member {Date} CompletionTime
 */
TranscriptionJob.prototype['CompletionTime'] = undefined;
/**
 * @member {String} FailureReason
 */
TranscriptionJob.prototype['FailureReason'] = undefined;
/**
 * @member {module:model/TranscriptionJobSettings} Settings
 */
TranscriptionJob.prototype['Settings'] = undefined;
/**
 * @member {module:model/TranscriptionJobModelSettings} ModelSettings
 */
TranscriptionJob.prototype['ModelSettings'] = undefined;
/**
 * @member {module:model/TranscriptionJobJobExecutionSettings} JobExecutionSettings
 */
TranscriptionJob.prototype['JobExecutionSettings'] = undefined;
/**
 * @member {module:model/TranscriptionJobContentRedaction} ContentRedaction
 */
TranscriptionJob.prototype['ContentRedaction'] = undefined;
/**
 * @member {Boolean} IdentifyLanguage
 */
TranscriptionJob.prototype['IdentifyLanguage'] = undefined;
/**
 * @member {Boolean} IdentifyMultipleLanguages
 */
TranscriptionJob.prototype['IdentifyMultipleLanguages'] = undefined;
/**
 * @member {Array} LanguageOptions
 */
TranscriptionJob.prototype['LanguageOptions'] = undefined;
/**
 * @member {Number} IdentifiedLanguageScore
 */
TranscriptionJob.prototype['IdentifiedLanguageScore'] = undefined;
/**
 * @member {Array} LanguageCodes
 */
TranscriptionJob.prototype['LanguageCodes'] = undefined;
/**
 * @member {Array} Tags
 */
TranscriptionJob.prototype['Tags'] = undefined;
/**
 * @member {module:model/TranscriptionJobSubtitles} Subtitles
 */
TranscriptionJob.prototype['Subtitles'] = undefined;
/**
 * @member {Object} LanguageIdSettings
 */
TranscriptionJob.prototype['LanguageIdSettings'] = undefined;
/**
 * @member {Array} ToxicityDetection
 */
TranscriptionJob.prototype['ToxicityDetection'] = undefined;




export default StartTranscriptionJobResponseTranscriptionJob;

