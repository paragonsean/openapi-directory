/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LanguageIdSettings model module.
 * @module model/LanguageIdSettings
 * @version 2017-10-26
 */
class LanguageIdSettings {
    /**
     * Constructs a new <code>LanguageIdSettings</code>.
     * &lt;p&gt;If using automatic language identification in your request and you want to apply a custom language model, a custom vocabulary, or a custom vocabulary filter, include &lt;code&gt;LanguageIdSettings&lt;/code&gt; with the relevant sub-parameters (&lt;code&gt;VocabularyName&lt;/code&gt;, &lt;code&gt;LanguageModelName&lt;/code&gt;, and &lt;code&gt;VocabularyFilterName&lt;/code&gt;). Note that multi-language identification (&lt;code&gt;IdentifyMultipleLanguages&lt;/code&gt;) doesn&#39;t support custom language models.&lt;/p&gt; &lt;p&gt; &lt;code&gt;LanguageIdSettings&lt;/code&gt; supports two to five language codes. Each language code you include can have an associated custom language model, custom vocabulary, and custom vocabulary filter. The language codes that you specify must match the languages of the associated custom language models, custom vocabularies, and custom vocabulary filters.&lt;/p&gt; &lt;p&gt;It&#39;s recommended that you include &lt;code&gt;LanguageOptions&lt;/code&gt; when using &lt;code&gt;LanguageIdSettings&lt;/code&gt; to ensure that the correct language dialect is identified. For example, if you specify a custom vocabulary that is in &lt;code&gt;en-US&lt;/code&gt; but Amazon Transcribe determines that the language spoken in your media is &lt;code&gt;en-AU&lt;/code&gt;, your custom vocabulary &lt;i&gt;is not&lt;/i&gt; applied to your transcription. If you include &lt;code&gt;LanguageOptions&lt;/code&gt; and include &lt;code&gt;en-US&lt;/code&gt; as the only English language dialect, your custom vocabulary &lt;i&gt;is&lt;/i&gt; applied to your transcription.&lt;/p&gt; &lt;p&gt;If you want to include a custom language model with your request but &lt;b&gt;do not&lt;/b&gt; want to use automatic language identification, use instead the &lt;code/&gt; parameter with the &lt;code&gt;LanguageModelName&lt;/code&gt; sub-parameter. If you want to include a custom vocabulary or a custom vocabulary filter (or both) with your request but &lt;b&gt;do not&lt;/b&gt; want to use automatic language identification, use instead the &lt;code/&gt; parameter with the &lt;code&gt;VocabularyName&lt;/code&gt; or &lt;code&gt;VocabularyFilterName&lt;/code&gt; (or both) sub-parameter.&lt;/p&gt;
     * @alias module:model/LanguageIdSettings
     */
    constructor() { 
        
        LanguageIdSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LanguageIdSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LanguageIdSettings} obj Optional instance to populate.
     * @return {module:model/LanguageIdSettings} The populated <code>LanguageIdSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LanguageIdSettings();

            if (data.hasOwnProperty('VocabularyName')) {
                obj['VocabularyName'] = ApiClient.convertToType(data['VocabularyName'], 'String');
            }
            if (data.hasOwnProperty('VocabularyFilterName')) {
                obj['VocabularyFilterName'] = ApiClient.convertToType(data['VocabularyFilterName'], 'String');
            }
            if (data.hasOwnProperty('LanguageModelName')) {
                obj['LanguageModelName'] = ApiClient.convertToType(data['LanguageModelName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LanguageIdSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LanguageIdSettings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `VocabularyName`
        if (data['VocabularyName']) { // data not null
          String.validateJSON(data['VocabularyName']);
        }
        // validate the optional field `VocabularyFilterName`
        if (data['VocabularyFilterName']) { // data not null
          String.validateJSON(data['VocabularyFilterName']);
        }
        // validate the optional field `LanguageModelName`
        if (data['LanguageModelName']) { // data not null
          String.validateJSON(data['LanguageModelName']);
        }

        return true;
    }


}



/**
 * @member {String} VocabularyName
 */
LanguageIdSettings.prototype['VocabularyName'] = undefined;

/**
 * @member {String} VocabularyFilterName
 */
LanguageIdSettings.prototype['VocabularyFilterName'] = undefined;

/**
 * @member {String} LanguageModelName
 */
LanguageIdSettings.prototype['LanguageModelName'] = undefined;






export default LanguageIdSettings;

