/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LanguageCode from './LanguageCode';
import Media from './Media';
import MediaFormat from './MediaFormat';
import MedicalContentIdentificationType from './MedicalContentIdentificationType';
import MedicalTranscriptionJob from './MedicalTranscriptionJob';
import MedicalTranscriptionJobSettings from './MedicalTranscriptionJobSettings';
import MedicalTranscriptionJobTranscript from './MedicalTranscriptionJobTranscript';
import Specialty from './Specialty';
import TranscriptionJobStatus from './TranscriptionJobStatus';
import Type from './Type';

/**
 * The StartMedicalTranscriptionJobResponseMedicalTranscriptionJob model module.
 * @module model/StartMedicalTranscriptionJobResponseMedicalTranscriptionJob
 * @version 2017-10-26
 */
class StartMedicalTranscriptionJobResponseMedicalTranscriptionJob {
    /**
     * Constructs a new <code>StartMedicalTranscriptionJobResponseMedicalTranscriptionJob</code>.
     * @alias module:model/StartMedicalTranscriptionJobResponseMedicalTranscriptionJob
     * @implements module:model/MedicalTranscriptionJob
     */
    constructor() { 
        MedicalTranscriptionJob.initialize(this);
        StartMedicalTranscriptionJobResponseMedicalTranscriptionJob.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StartMedicalTranscriptionJobResponseMedicalTranscriptionJob</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StartMedicalTranscriptionJobResponseMedicalTranscriptionJob} obj Optional instance to populate.
     * @return {module:model/StartMedicalTranscriptionJobResponseMedicalTranscriptionJob} The populated <code>StartMedicalTranscriptionJobResponseMedicalTranscriptionJob</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StartMedicalTranscriptionJobResponseMedicalTranscriptionJob();
            MedicalTranscriptionJob.constructFromObject(data, obj);

            if (data.hasOwnProperty('MedicalTranscriptionJobName')) {
                obj['MedicalTranscriptionJobName'] = ApiClient.convertToType(data['MedicalTranscriptionJobName'], 'String');
            }
            if (data.hasOwnProperty('TranscriptionJobStatus')) {
                obj['TranscriptionJobStatus'] = ApiClient.convertToType(data['TranscriptionJobStatus'], TranscriptionJobStatus);
            }
            if (data.hasOwnProperty('LanguageCode')) {
                obj['LanguageCode'] = ApiClient.convertToType(data['LanguageCode'], LanguageCode);
            }
            if (data.hasOwnProperty('MediaSampleRateHertz')) {
                obj['MediaSampleRateHertz'] = ApiClient.convertToType(data['MediaSampleRateHertz'], 'Number');
            }
            if (data.hasOwnProperty('MediaFormat')) {
                obj['MediaFormat'] = ApiClient.convertToType(data['MediaFormat'], MediaFormat);
            }
            if (data.hasOwnProperty('Media')) {
                obj['Media'] = Media.constructFromObject(data['Media']);
            }
            if (data.hasOwnProperty('Transcript')) {
                obj['Transcript'] = MedicalTranscriptionJobTranscript.constructFromObject(data['Transcript']);
            }
            if (data.hasOwnProperty('StartTime')) {
                obj['StartTime'] = ApiClient.convertToType(data['StartTime'], 'Date');
            }
            if (data.hasOwnProperty('CreationTime')) {
                obj['CreationTime'] = ApiClient.convertToType(data['CreationTime'], 'Date');
            }
            if (data.hasOwnProperty('CompletionTime')) {
                obj['CompletionTime'] = ApiClient.convertToType(data['CompletionTime'], 'Date');
            }
            if (data.hasOwnProperty('FailureReason')) {
                obj['FailureReason'] = ApiClient.convertToType(data['FailureReason'], 'String');
            }
            if (data.hasOwnProperty('Settings')) {
                obj['Settings'] = MedicalTranscriptionJobSettings.constructFromObject(data['Settings']);
            }
            if (data.hasOwnProperty('ContentIdentificationType')) {
                obj['ContentIdentificationType'] = ApiClient.convertToType(data['ContentIdentificationType'], MedicalContentIdentificationType);
            }
            if (data.hasOwnProperty('Specialty')) {
                obj['Specialty'] = ApiClient.convertToType(data['Specialty'], Specialty);
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], Type);
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StartMedicalTranscriptionJobResponseMedicalTranscriptionJob</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StartMedicalTranscriptionJobResponseMedicalTranscriptionJob</code>.
     */
    static validateJSON(data) {
        // validate the optional field `MedicalTranscriptionJobName`
        if (data['MedicalTranscriptionJobName']) { // data not null
          String.validateJSON(data['MedicalTranscriptionJobName']);
        }
        // validate the optional field `TranscriptionJobStatus`
        if (data['TranscriptionJobStatus']) { // data not null
          TranscriptionJobStatus.validateJSON(data['TranscriptionJobStatus']);
        }
        // validate the optional field `LanguageCode`
        if (data['LanguageCode']) { // data not null
          LanguageCode.validateJSON(data['LanguageCode']);
        }
        // validate the optional field `MediaSampleRateHertz`
        if (data['MediaSampleRateHertz']) { // data not null
          Number.validateJSON(data['MediaSampleRateHertz']);
        }
        // validate the optional field `MediaFormat`
        if (data['MediaFormat']) { // data not null
          MediaFormat.validateJSON(data['MediaFormat']);
        }
        // validate the optional field `Media`
        if (data['Media']) { // data not null
          Media.validateJSON(data['Media']);
        }
        // validate the optional field `Transcript`
        if (data['Transcript']) { // data not null
          MedicalTranscriptionJobTranscript.validateJSON(data['Transcript']);
        }
        // validate the optional field `StartTime`
        if (data['StartTime']) { // data not null
          Date.validateJSON(data['StartTime']);
        }
        // validate the optional field `CreationTime`
        if (data['CreationTime']) { // data not null
          Date.validateJSON(data['CreationTime']);
        }
        // validate the optional field `CompletionTime`
        if (data['CompletionTime']) { // data not null
          Date.validateJSON(data['CompletionTime']);
        }
        // validate the optional field `FailureReason`
        if (data['FailureReason']) { // data not null
          String.validateJSON(data['FailureReason']);
        }
        // validate the optional field `Settings`
        if (data['Settings']) { // data not null
          MedicalTranscriptionJobSettings.validateJSON(data['Settings']);
        }
        // validate the optional field `ContentIdentificationType`
        if (data['ContentIdentificationType']) { // data not null
          MedicalContentIdentificationType.validateJSON(data['ContentIdentificationType']);
        }
        // validate the optional field `Specialty`
        if (data['Specialty']) { // data not null
          Specialty.validateJSON(data['Specialty']);
        }
        // validate the optional field `Type`
        if (data['Type']) { // data not null
          Type.validateJSON(data['Type']);
        }
        // validate the optional field `Tags`
        if (data['Tags']) { // data not null
          Array.validateJSON(data['Tags']);
        }

        return true;
    }


}



/**
 * @member {String} MedicalTranscriptionJobName
 */
StartMedicalTranscriptionJobResponseMedicalTranscriptionJob.prototype['MedicalTranscriptionJobName'] = undefined;

/**
 * @member {module:model/TranscriptionJobStatus} TranscriptionJobStatus
 */
StartMedicalTranscriptionJobResponseMedicalTranscriptionJob.prototype['TranscriptionJobStatus'] = undefined;

/**
 * @member {module:model/LanguageCode} LanguageCode
 */
StartMedicalTranscriptionJobResponseMedicalTranscriptionJob.prototype['LanguageCode'] = undefined;

/**
 * @member {Number} MediaSampleRateHertz
 */
StartMedicalTranscriptionJobResponseMedicalTranscriptionJob.prototype['MediaSampleRateHertz'] = undefined;

/**
 * @member {module:model/MediaFormat} MediaFormat
 */
StartMedicalTranscriptionJobResponseMedicalTranscriptionJob.prototype['MediaFormat'] = undefined;

/**
 * @member {module:model/Media} Media
 */
StartMedicalTranscriptionJobResponseMedicalTranscriptionJob.prototype['Media'] = undefined;

/**
 * @member {module:model/MedicalTranscriptionJobTranscript} Transcript
 */
StartMedicalTranscriptionJobResponseMedicalTranscriptionJob.prototype['Transcript'] = undefined;

/**
 * @member {Date} StartTime
 */
StartMedicalTranscriptionJobResponseMedicalTranscriptionJob.prototype['StartTime'] = undefined;

/**
 * @member {Date} CreationTime
 */
StartMedicalTranscriptionJobResponseMedicalTranscriptionJob.prototype['CreationTime'] = undefined;

/**
 * @member {Date} CompletionTime
 */
StartMedicalTranscriptionJobResponseMedicalTranscriptionJob.prototype['CompletionTime'] = undefined;

/**
 * @member {String} FailureReason
 */
StartMedicalTranscriptionJobResponseMedicalTranscriptionJob.prototype['FailureReason'] = undefined;

/**
 * @member {module:model/MedicalTranscriptionJobSettings} Settings
 */
StartMedicalTranscriptionJobResponseMedicalTranscriptionJob.prototype['Settings'] = undefined;

/**
 * @member {module:model/MedicalContentIdentificationType} ContentIdentificationType
 */
StartMedicalTranscriptionJobResponseMedicalTranscriptionJob.prototype['ContentIdentificationType'] = undefined;

/**
 * @member {module:model/Specialty} Specialty
 */
StartMedicalTranscriptionJobResponseMedicalTranscriptionJob.prototype['Specialty'] = undefined;

/**
 * @member {module:model/Type} Type
 */
StartMedicalTranscriptionJobResponseMedicalTranscriptionJob.prototype['Type'] = undefined;

/**
 * @member {Array} Tags
 */
StartMedicalTranscriptionJobResponseMedicalTranscriptionJob.prototype['Tags'] = undefined;


// Implement MedicalTranscriptionJob interface:
/**
 * @member {String} MedicalTranscriptionJobName
 */
MedicalTranscriptionJob.prototype['MedicalTranscriptionJobName'] = undefined;
/**
 * @member {module:model/TranscriptionJobStatus} TranscriptionJobStatus
 */
MedicalTranscriptionJob.prototype['TranscriptionJobStatus'] = undefined;
/**
 * @member {module:model/LanguageCode} LanguageCode
 */
MedicalTranscriptionJob.prototype['LanguageCode'] = undefined;
/**
 * @member {Number} MediaSampleRateHertz
 */
MedicalTranscriptionJob.prototype['MediaSampleRateHertz'] = undefined;
/**
 * @member {module:model/MediaFormat} MediaFormat
 */
MedicalTranscriptionJob.prototype['MediaFormat'] = undefined;
/**
 * @member {module:model/Media} Media
 */
MedicalTranscriptionJob.prototype['Media'] = undefined;
/**
 * @member {module:model/MedicalTranscriptionJobTranscript} Transcript
 */
MedicalTranscriptionJob.prototype['Transcript'] = undefined;
/**
 * @member {Date} StartTime
 */
MedicalTranscriptionJob.prototype['StartTime'] = undefined;
/**
 * @member {Date} CreationTime
 */
MedicalTranscriptionJob.prototype['CreationTime'] = undefined;
/**
 * @member {Date} CompletionTime
 */
MedicalTranscriptionJob.prototype['CompletionTime'] = undefined;
/**
 * @member {String} FailureReason
 */
MedicalTranscriptionJob.prototype['FailureReason'] = undefined;
/**
 * @member {module:model/MedicalTranscriptionJobSettings} Settings
 */
MedicalTranscriptionJob.prototype['Settings'] = undefined;
/**
 * @member {module:model/MedicalContentIdentificationType} ContentIdentificationType
 */
MedicalTranscriptionJob.prototype['ContentIdentificationType'] = undefined;
/**
 * @member {module:model/Specialty} Specialty
 */
MedicalTranscriptionJob.prototype['Specialty'] = undefined;
/**
 * @member {module:model/Type} Type
 */
MedicalTranscriptionJob.prototype['Type'] = undefined;
/**
 * @member {Array} Tags
 */
MedicalTranscriptionJob.prototype['Tags'] = undefined;




export default StartMedicalTranscriptionJobResponseMedicalTranscriptionJob;

