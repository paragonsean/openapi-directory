/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AbsoluteTimeRange model module.
 * @module model/AbsoluteTimeRange
 * @version 2017-10-26
 */
class AbsoluteTimeRange {
    /**
     * Constructs a new <code>AbsoluteTimeRange</code>.
     * &lt;p&gt;A time range, in milliseconds, between two points in your media file.&lt;/p&gt; &lt;p&gt;You can use &lt;code&gt;StartTime&lt;/code&gt; and &lt;code&gt;EndTime&lt;/code&gt; to search a custom segment. For example, setting &lt;code&gt;StartTime&lt;/code&gt; to 10000 and &lt;code&gt;EndTime&lt;/code&gt; to 50000 only searches for your specified criteria in the audio contained between the 10,000 millisecond mark and the 50,000 millisecond mark of your media file. You must use &lt;code&gt;StartTime&lt;/code&gt; and &lt;code&gt;EndTime&lt;/code&gt; as a set; that is, if you include one, you must include both.&lt;/p&gt; &lt;p&gt;You can use also &lt;code&gt;First&lt;/code&gt; to search from the start of the audio until the time that you specify, or &lt;code&gt;Last&lt;/code&gt; to search from the time that you specify until the end of the audio. For example, setting &lt;code&gt;First&lt;/code&gt; to 50000 only searches for your specified criteria in the audio contained between the start of the media file to the 50,000 millisecond mark. You can use &lt;code&gt;First&lt;/code&gt; and &lt;code&gt;Last&lt;/code&gt; independently of each other.&lt;/p&gt; &lt;p&gt;If you prefer to use percentage instead of milliseconds, see .&lt;/p&gt;
     * @alias module:model/AbsoluteTimeRange
     */
    constructor() { 
        
        AbsoluteTimeRange.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AbsoluteTimeRange</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AbsoluteTimeRange} obj Optional instance to populate.
     * @return {module:model/AbsoluteTimeRange} The populated <code>AbsoluteTimeRange</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AbsoluteTimeRange();

            if (data.hasOwnProperty('StartTime')) {
                obj['StartTime'] = ApiClient.convertToType(data['StartTime'], 'Number');
            }
            if (data.hasOwnProperty('EndTime')) {
                obj['EndTime'] = ApiClient.convertToType(data['EndTime'], 'Number');
            }
            if (data.hasOwnProperty('First')) {
                obj['First'] = ApiClient.convertToType(data['First'], 'Number');
            }
            if (data.hasOwnProperty('Last')) {
                obj['Last'] = ApiClient.convertToType(data['Last'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AbsoluteTimeRange</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AbsoluteTimeRange</code>.
     */
    static validateJSON(data) {
        // validate the optional field `StartTime`
        if (data['StartTime']) { // data not null
          Number.validateJSON(data['StartTime']);
        }
        // validate the optional field `EndTime`
        if (data['EndTime']) { // data not null
          Number.validateJSON(data['EndTime']);
        }
        // validate the optional field `First`
        if (data['First']) { // data not null
          Number.validateJSON(data['First']);
        }
        // validate the optional field `Last`
        if (data['Last']) { // data not null
          Number.validateJSON(data['Last']);
        }

        return true;
    }


}



/**
 * @member {Number} StartTime
 */
AbsoluteTimeRange.prototype['StartTime'] = undefined;

/**
 * @member {Number} EndTime
 */
AbsoluteTimeRange.prototype['EndTime'] = undefined;

/**
 * @member {Number} First
 */
AbsoluteTimeRange.prototype['First'] = undefined;

/**
 * @member {Number} Last
 */
AbsoluteTimeRange.prototype['Last'] = undefined;






export default AbsoluteTimeRange;

