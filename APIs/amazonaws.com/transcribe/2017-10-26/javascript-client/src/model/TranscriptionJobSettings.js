/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Settings from './Settings';
import VocabularyFilterMethod from './VocabularyFilterMethod';

/**
 * The TranscriptionJobSettings model module.
 * @module model/TranscriptionJobSettings
 * @version 2017-10-26
 */
class TranscriptionJobSettings {
    /**
     * Constructs a new <code>TranscriptionJobSettings</code>.
     * @alias module:model/TranscriptionJobSettings
     * @implements module:model/Settings
     */
    constructor() { 
        Settings.initialize(this);
        TranscriptionJobSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TranscriptionJobSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TranscriptionJobSettings} obj Optional instance to populate.
     * @return {module:model/TranscriptionJobSettings} The populated <code>TranscriptionJobSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TranscriptionJobSettings();
            Settings.constructFromObject(data, obj);

            if (data.hasOwnProperty('VocabularyName')) {
                obj['VocabularyName'] = ApiClient.convertToType(data['VocabularyName'], 'String');
            }
            if (data.hasOwnProperty('ShowSpeakerLabels')) {
                obj['ShowSpeakerLabels'] = ApiClient.convertToType(data['ShowSpeakerLabels'], 'Boolean');
            }
            if (data.hasOwnProperty('MaxSpeakerLabels')) {
                obj['MaxSpeakerLabels'] = ApiClient.convertToType(data['MaxSpeakerLabels'], 'Number');
            }
            if (data.hasOwnProperty('ChannelIdentification')) {
                obj['ChannelIdentification'] = ApiClient.convertToType(data['ChannelIdentification'], 'Boolean');
            }
            if (data.hasOwnProperty('ShowAlternatives')) {
                obj['ShowAlternatives'] = ApiClient.convertToType(data['ShowAlternatives'], 'Boolean');
            }
            if (data.hasOwnProperty('MaxAlternatives')) {
                obj['MaxAlternatives'] = ApiClient.convertToType(data['MaxAlternatives'], 'Number');
            }
            if (data.hasOwnProperty('VocabularyFilterName')) {
                obj['VocabularyFilterName'] = ApiClient.convertToType(data['VocabularyFilterName'], 'String');
            }
            if (data.hasOwnProperty('VocabularyFilterMethod')) {
                obj['VocabularyFilterMethod'] = ApiClient.convertToType(data['VocabularyFilterMethod'], VocabularyFilterMethod);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TranscriptionJobSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TranscriptionJobSettings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `VocabularyName`
        if (data['VocabularyName']) { // data not null
          String.validateJSON(data['VocabularyName']);
        }
        // validate the optional field `ShowSpeakerLabels`
        if (data['ShowSpeakerLabels']) { // data not null
          Boolean.validateJSON(data['ShowSpeakerLabels']);
        }
        // validate the optional field `MaxSpeakerLabels`
        if (data['MaxSpeakerLabels']) { // data not null
          Number.validateJSON(data['MaxSpeakerLabels']);
        }
        // validate the optional field `ChannelIdentification`
        if (data['ChannelIdentification']) { // data not null
          Boolean.validateJSON(data['ChannelIdentification']);
        }
        // validate the optional field `ShowAlternatives`
        if (data['ShowAlternatives']) { // data not null
          Boolean.validateJSON(data['ShowAlternatives']);
        }
        // validate the optional field `MaxAlternatives`
        if (data['MaxAlternatives']) { // data not null
          Number.validateJSON(data['MaxAlternatives']);
        }
        // validate the optional field `VocabularyFilterName`
        if (data['VocabularyFilterName']) { // data not null
          String.validateJSON(data['VocabularyFilterName']);
        }
        // validate the optional field `VocabularyFilterMethod`
        if (data['VocabularyFilterMethod']) { // data not null
          VocabularyFilterMethod.validateJSON(data['VocabularyFilterMethod']);
        }

        return true;
    }


}



/**
 * @member {String} VocabularyName
 */
TranscriptionJobSettings.prototype['VocabularyName'] = undefined;

/**
 * @member {Boolean} ShowSpeakerLabels
 */
TranscriptionJobSettings.prototype['ShowSpeakerLabels'] = undefined;

/**
 * @member {Number} MaxSpeakerLabels
 */
TranscriptionJobSettings.prototype['MaxSpeakerLabels'] = undefined;

/**
 * @member {Boolean} ChannelIdentification
 */
TranscriptionJobSettings.prototype['ChannelIdentification'] = undefined;

/**
 * @member {Boolean} ShowAlternatives
 */
TranscriptionJobSettings.prototype['ShowAlternatives'] = undefined;

/**
 * @member {Number} MaxAlternatives
 */
TranscriptionJobSettings.prototype['MaxAlternatives'] = undefined;

/**
 * @member {String} VocabularyFilterName
 */
TranscriptionJobSettings.prototype['VocabularyFilterName'] = undefined;

/**
 * @member {module:model/VocabularyFilterMethod} VocabularyFilterMethod
 */
TranscriptionJobSettings.prototype['VocabularyFilterMethod'] = undefined;


// Implement Settings interface:
/**
 * @member {String} VocabularyName
 */
Settings.prototype['VocabularyName'] = undefined;
/**
 * @member {Boolean} ShowSpeakerLabels
 */
Settings.prototype['ShowSpeakerLabels'] = undefined;
/**
 * @member {Number} MaxSpeakerLabels
 */
Settings.prototype['MaxSpeakerLabels'] = undefined;
/**
 * @member {Boolean} ChannelIdentification
 */
Settings.prototype['ChannelIdentification'] = undefined;
/**
 * @member {Boolean} ShowAlternatives
 */
Settings.prototype['ShowAlternatives'] = undefined;
/**
 * @member {Number} MaxAlternatives
 */
Settings.prototype['MaxAlternatives'] = undefined;
/**
 * @member {String} VocabularyFilterName
 */
Settings.prototype['VocabularyFilterName'] = undefined;
/**
 * @member {module:model/VocabularyFilterMethod} VocabularyFilterMethod
 */
Settings.prototype['VocabularyFilterMethod'] = undefined;




export default TranscriptionJobSettings;

