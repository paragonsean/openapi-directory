/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BaseModelName from './BaseModelName';
import CLMLanguageCode from './CLMLanguageCode';
import CreateLanguageModelRequestInputDataConfig from './CreateLanguageModelRequestInputDataConfig';

/**
 * The CreateLanguageModelRequest model module.
 * @module model/CreateLanguageModelRequest
 * @version 2017-10-26
 */
class CreateLanguageModelRequest {
    /**
     * Constructs a new <code>CreateLanguageModelRequest</code>.
     * @alias module:model/CreateLanguageModelRequest
     * @param languageCode {module:model/CLMLanguageCode} 
     * @param baseModelName {module:model/BaseModelName} 
     * @param modelName {String} 
     * @param inputDataConfig {module:model/CreateLanguageModelRequestInputDataConfig} 
     */
    constructor(languageCode, baseModelName, modelName, inputDataConfig) { 
        
        CreateLanguageModelRequest.initialize(this, languageCode, baseModelName, modelName, inputDataConfig);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, languageCode, baseModelName, modelName, inputDataConfig) { 
        obj['LanguageCode'] = languageCode;
        obj['BaseModelName'] = baseModelName;
        obj['ModelName'] = modelName;
        obj['InputDataConfig'] = inputDataConfig;
    }

    /**
     * Constructs a <code>CreateLanguageModelRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateLanguageModelRequest} obj Optional instance to populate.
     * @return {module:model/CreateLanguageModelRequest} The populated <code>CreateLanguageModelRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateLanguageModelRequest();

            if (data.hasOwnProperty('LanguageCode')) {
                obj['LanguageCode'] = ApiClient.convertToType(data['LanguageCode'], CLMLanguageCode);
            }
            if (data.hasOwnProperty('BaseModelName')) {
                obj['BaseModelName'] = ApiClient.convertToType(data['BaseModelName'], BaseModelName);
            }
            if (data.hasOwnProperty('ModelName')) {
                obj['ModelName'] = ApiClient.convertToType(data['ModelName'], 'String');
            }
            if (data.hasOwnProperty('InputDataConfig')) {
                obj['InputDataConfig'] = CreateLanguageModelRequestInputDataConfig.constructFromObject(data['InputDataConfig']);
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateLanguageModelRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateLanguageModelRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateLanguageModelRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `LanguageCode`
        if (data['LanguageCode']) { // data not null
          CLMLanguageCode.validateJSON(data['LanguageCode']);
        }
        // validate the optional field `BaseModelName`
        if (data['BaseModelName']) { // data not null
          BaseModelName.validateJSON(data['BaseModelName']);
        }
        // validate the optional field `ModelName`
        if (data['ModelName']) { // data not null
          String.validateJSON(data['ModelName']);
        }
        // validate the optional field `InputDataConfig`
        if (data['InputDataConfig']) { // data not null
          CreateLanguageModelRequestInputDataConfig.validateJSON(data['InputDataConfig']);
        }
        // validate the optional field `Tags`
        if (data['Tags']) { // data not null
          Array.validateJSON(data['Tags']);
        }

        return true;
    }


}

CreateLanguageModelRequest.RequiredProperties = ["LanguageCode", "BaseModelName", "ModelName", "InputDataConfig"];

/**
 * @member {module:model/CLMLanguageCode} LanguageCode
 */
CreateLanguageModelRequest.prototype['LanguageCode'] = undefined;

/**
 * @member {module:model/BaseModelName} BaseModelName
 */
CreateLanguageModelRequest.prototype['BaseModelName'] = undefined;

/**
 * @member {String} ModelName
 */
CreateLanguageModelRequest.prototype['ModelName'] = undefined;

/**
 * @member {module:model/CreateLanguageModelRequestInputDataConfig} InputDataConfig
 */
CreateLanguageModelRequest.prototype['InputDataConfig'] = undefined;

/**
 * @member {Array} Tags
 */
CreateLanguageModelRequest.prototype['Tags'] = undefined;






export default CreateLanguageModelRequest;

