/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContentRedaction from './ContentRedaction';
import RedactionOutput from './RedactionOutput';
import RedactionType from './RedactionType';

/**
 * The StartTranscriptionJobRequestContentRedaction model module.
 * @module model/StartTranscriptionJobRequestContentRedaction
 * @version 2017-10-26
 */
class StartTranscriptionJobRequestContentRedaction {
    /**
     * Constructs a new <code>StartTranscriptionJobRequestContentRedaction</code>.
     * @alias module:model/StartTranscriptionJobRequestContentRedaction
     * @implements module:model/ContentRedaction
     * @param redactionType {module:model/RedactionType} 
     * @param redactionOutput {module:model/RedactionOutput} 
     */
    constructor(redactionType, redactionOutput) { 
        ContentRedaction.initialize(this, redactionType, redactionOutput);
        StartTranscriptionJobRequestContentRedaction.initialize(this, redactionType, redactionOutput);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, redactionType, redactionOutput) { 
        obj['RedactionType'] = redactionType;
        obj['RedactionOutput'] = redactionOutput;
    }

    /**
     * Constructs a <code>StartTranscriptionJobRequestContentRedaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StartTranscriptionJobRequestContentRedaction} obj Optional instance to populate.
     * @return {module:model/StartTranscriptionJobRequestContentRedaction} The populated <code>StartTranscriptionJobRequestContentRedaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StartTranscriptionJobRequestContentRedaction();
            ContentRedaction.constructFromObject(data, obj);

            if (data.hasOwnProperty('RedactionType')) {
                obj['RedactionType'] = ApiClient.convertToType(data['RedactionType'], RedactionType);
            }
            if (data.hasOwnProperty('RedactionOutput')) {
                obj['RedactionOutput'] = ApiClient.convertToType(data['RedactionOutput'], RedactionOutput);
            }
            if (data.hasOwnProperty('PiiEntityTypes')) {
                obj['PiiEntityTypes'] = ApiClient.convertToType(data['PiiEntityTypes'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StartTranscriptionJobRequestContentRedaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StartTranscriptionJobRequestContentRedaction</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StartTranscriptionJobRequestContentRedaction.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `RedactionType`
        if (data['RedactionType']) { // data not null
          RedactionType.validateJSON(data['RedactionType']);
        }
        // validate the optional field `RedactionOutput`
        if (data['RedactionOutput']) { // data not null
          RedactionOutput.validateJSON(data['RedactionOutput']);
        }
        // validate the optional field `PiiEntityTypes`
        if (data['PiiEntityTypes']) { // data not null
          Array.validateJSON(data['PiiEntityTypes']);
        }

        return true;
    }


}

StartTranscriptionJobRequestContentRedaction.RequiredProperties = ["RedactionType", "RedactionOutput"];

/**
 * @member {module:model/RedactionType} RedactionType
 */
StartTranscriptionJobRequestContentRedaction.prototype['RedactionType'] = undefined;

/**
 * @member {module:model/RedactionOutput} RedactionOutput
 */
StartTranscriptionJobRequestContentRedaction.prototype['RedactionOutput'] = undefined;

/**
 * @member {Array} PiiEntityTypes
 */
StartTranscriptionJobRequestContentRedaction.prototype['PiiEntityTypes'] = undefined;


// Implement ContentRedaction interface:
/**
 * @member {module:model/RedactionType} RedactionType
 */
ContentRedaction.prototype['RedactionType'] = undefined;
/**
 * @member {module:model/RedactionOutput} RedactionOutput
 */
ContentRedaction.prototype['RedactionOutput'] = undefined;
/**
 * @member {Array} PiiEntityTypes
 */
ContentRedaction.prototype['PiiEntityTypes'] = undefined;




export default StartTranscriptionJobRequestContentRedaction;

