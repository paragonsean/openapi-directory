/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InterruptionFilterAbsoluteTimeRange from './InterruptionFilterAbsoluteTimeRange';
import InterruptionFilterRelativeTimeRange from './InterruptionFilterRelativeTimeRange';
import ParticipantRole from './ParticipantRole';

/**
 * The InterruptionFilter model module.
 * @module model/InterruptionFilter
 * @version 2017-10-26
 */
class InterruptionFilter {
    /**
     * Constructs a new <code>InterruptionFilter</code>.
     * &lt;p&gt;Flag the presence or absence of interruptions in your Call Analytics transcription output.&lt;/p&gt; &lt;p&gt;Rules using &lt;code&gt;InterruptionFilter&lt;/code&gt; are designed to match:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Instances where an agent interrupts a customer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Instances where a customer interrupts an agent&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Either participant interrupting the other&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A lack of interruptions&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/transcribe/latest/dg/tca-categories-batch.html#tca-rules-batch\&quot;&gt;Rule criteria for post-call categories&lt;/a&gt; for usage examples.&lt;/p&gt;
     * @alias module:model/InterruptionFilter
     */
    constructor() { 
        
        InterruptionFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InterruptionFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InterruptionFilter} obj Optional instance to populate.
     * @return {module:model/InterruptionFilter} The populated <code>InterruptionFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InterruptionFilter();

            if (data.hasOwnProperty('Threshold')) {
                obj['Threshold'] = ApiClient.convertToType(data['Threshold'], 'Number');
            }
            if (data.hasOwnProperty('ParticipantRole')) {
                obj['ParticipantRole'] = ApiClient.convertToType(data['ParticipantRole'], ParticipantRole);
            }
            if (data.hasOwnProperty('AbsoluteTimeRange')) {
                obj['AbsoluteTimeRange'] = InterruptionFilterAbsoluteTimeRange.constructFromObject(data['AbsoluteTimeRange']);
            }
            if (data.hasOwnProperty('RelativeTimeRange')) {
                obj['RelativeTimeRange'] = InterruptionFilterRelativeTimeRange.constructFromObject(data['RelativeTimeRange']);
            }
            if (data.hasOwnProperty('Negate')) {
                obj['Negate'] = ApiClient.convertToType(data['Negate'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InterruptionFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InterruptionFilter</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Threshold`
        if (data['Threshold']) { // data not null
          Number.validateJSON(data['Threshold']);
        }
        // validate the optional field `ParticipantRole`
        if (data['ParticipantRole']) { // data not null
          ParticipantRole.validateJSON(data['ParticipantRole']);
        }
        // validate the optional field `AbsoluteTimeRange`
        if (data['AbsoluteTimeRange']) { // data not null
          InterruptionFilterAbsoluteTimeRange.validateJSON(data['AbsoluteTimeRange']);
        }
        // validate the optional field `RelativeTimeRange`
        if (data['RelativeTimeRange']) { // data not null
          InterruptionFilterRelativeTimeRange.validateJSON(data['RelativeTimeRange']);
        }
        // validate the optional field `Negate`
        if (data['Negate']) { // data not null
          Boolean.validateJSON(data['Negate']);
        }

        return true;
    }


}



/**
 * @member {Number} Threshold
 */
InterruptionFilter.prototype['Threshold'] = undefined;

/**
 * @member {module:model/ParticipantRole} ParticipantRole
 */
InterruptionFilter.prototype['ParticipantRole'] = undefined;

/**
 * @member {module:model/InterruptionFilterAbsoluteTimeRange} AbsoluteTimeRange
 */
InterruptionFilter.prototype['AbsoluteTimeRange'] = undefined;

/**
 * @member {module:model/InterruptionFilterRelativeTimeRange} RelativeTimeRange
 */
InterruptionFilter.prototype['RelativeTimeRange'] = undefined;

/**
 * @member {Boolean} Negate
 */
InterruptionFilter.prototype['Negate'] = undefined;






export default InterruptionFilter;

