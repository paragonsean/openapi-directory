/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BaseModelName from './BaseModelName';
import CLMLanguageCode from './CLMLanguageCode';
import LanguageModelInputDataConfig from './LanguageModelInputDataConfig';
import ModelStatus from './ModelStatus';

/**
 * The LanguageModel model module.
 * @module model/LanguageModel
 * @version 2017-10-26
 */
class LanguageModel {
    /**
     * Constructs a new <code>LanguageModel</code>.
     * &lt;p&gt;Provides information about a custom language model, including:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The base model name&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When the model was created&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The location of the files used to train the model&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When the model was last modified&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The name you chose for the model&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The model&#39;s language&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The model&#39;s processing state&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Any available upgrades for the base model&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @alias module:model/LanguageModel
     */
    constructor() { 
        
        LanguageModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LanguageModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LanguageModel} obj Optional instance to populate.
     * @return {module:model/LanguageModel} The populated <code>LanguageModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LanguageModel();

            if (data.hasOwnProperty('ModelName')) {
                obj['ModelName'] = ApiClient.convertToType(data['ModelName'], 'String');
            }
            if (data.hasOwnProperty('CreateTime')) {
                obj['CreateTime'] = ApiClient.convertToType(data['CreateTime'], 'Date');
            }
            if (data.hasOwnProperty('LastModifiedTime')) {
                obj['LastModifiedTime'] = ApiClient.convertToType(data['LastModifiedTime'], 'Date');
            }
            if (data.hasOwnProperty('LanguageCode')) {
                obj['LanguageCode'] = ApiClient.convertToType(data['LanguageCode'], CLMLanguageCode);
            }
            if (data.hasOwnProperty('BaseModelName')) {
                obj['BaseModelName'] = ApiClient.convertToType(data['BaseModelName'], BaseModelName);
            }
            if (data.hasOwnProperty('ModelStatus')) {
                obj['ModelStatus'] = ApiClient.convertToType(data['ModelStatus'], ModelStatus);
            }
            if (data.hasOwnProperty('UpgradeAvailability')) {
                obj['UpgradeAvailability'] = ApiClient.convertToType(data['UpgradeAvailability'], 'Boolean');
            }
            if (data.hasOwnProperty('FailureReason')) {
                obj['FailureReason'] = ApiClient.convertToType(data['FailureReason'], 'String');
            }
            if (data.hasOwnProperty('InputDataConfig')) {
                obj['InputDataConfig'] = LanguageModelInputDataConfig.constructFromObject(data['InputDataConfig']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LanguageModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LanguageModel</code>.
     */
    static validateJSON(data) {
        // validate the optional field `ModelName`
        if (data['ModelName']) { // data not null
          String.validateJSON(data['ModelName']);
        }
        // validate the optional field `CreateTime`
        if (data['CreateTime']) { // data not null
          Date.validateJSON(data['CreateTime']);
        }
        // validate the optional field `LastModifiedTime`
        if (data['LastModifiedTime']) { // data not null
          Date.validateJSON(data['LastModifiedTime']);
        }
        // validate the optional field `LanguageCode`
        if (data['LanguageCode']) { // data not null
          CLMLanguageCode.validateJSON(data['LanguageCode']);
        }
        // validate the optional field `BaseModelName`
        if (data['BaseModelName']) { // data not null
          BaseModelName.validateJSON(data['BaseModelName']);
        }
        // validate the optional field `ModelStatus`
        if (data['ModelStatus']) { // data not null
          ModelStatus.validateJSON(data['ModelStatus']);
        }
        // validate the optional field `UpgradeAvailability`
        if (data['UpgradeAvailability']) { // data not null
          Boolean.validateJSON(data['UpgradeAvailability']);
        }
        // validate the optional field `FailureReason`
        if (data['FailureReason']) { // data not null
          String.validateJSON(data['FailureReason']);
        }
        // validate the optional field `InputDataConfig`
        if (data['InputDataConfig']) { // data not null
          LanguageModelInputDataConfig.validateJSON(data['InputDataConfig']);
        }

        return true;
    }


}



/**
 * @member {String} ModelName
 */
LanguageModel.prototype['ModelName'] = undefined;

/**
 * @member {Date} CreateTime
 */
LanguageModel.prototype['CreateTime'] = undefined;

/**
 * @member {Date} LastModifiedTime
 */
LanguageModel.prototype['LastModifiedTime'] = undefined;

/**
 * @member {module:model/CLMLanguageCode} LanguageCode
 */
LanguageModel.prototype['LanguageCode'] = undefined;

/**
 * @member {module:model/BaseModelName} BaseModelName
 */
LanguageModel.prototype['BaseModelName'] = undefined;

/**
 * @member {module:model/ModelStatus} ModelStatus
 */
LanguageModel.prototype['ModelStatus'] = undefined;

/**
 * @member {Boolean} UpgradeAvailability
 */
LanguageModel.prototype['UpgradeAvailability'] = undefined;

/**
 * @member {String} FailureReason
 */
LanguageModel.prototype['FailureReason'] = undefined;

/**
 * @member {module:model/LanguageModelInputDataConfig} InputDataConfig
 */
LanguageModel.prototype['InputDataConfig'] = undefined;






export default LanguageModel;

