/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RuleInterruptionFilter from './RuleInterruptionFilter';
import RuleNonTalkTimeFilter from './RuleNonTalkTimeFilter';
import RuleSentimentFilter from './RuleSentimentFilter';
import RuleTranscriptFilter from './RuleTranscriptFilter';

/**
 * The Rule model module.
 * @module model/Rule
 * @version 2017-10-26
 */
class Rule {
    /**
     * Constructs a new <code>Rule</code>.
     * &lt;p&gt;A rule is a set of criteria that you can specify to flag an attribute in your Call Analytics output. Rules define a Call Analytics category.&lt;/p&gt; &lt;p&gt;Rules can include these parameters: , , , and .&lt;/p&gt; &lt;p&gt;To learn more about Call Analytics rules and categories, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/transcribe/latest/dg/tca-categories-batch.html\&quot;&gt;Creating categories for post-call transcriptions&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/transcribe/latest/dg/tca-categories-stream.html\&quot;&gt;Creating categories for real-time transcriptions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To learn more about Call Analytics, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/transcribe/latest/dg/call-analytics.html\&quot;&gt;Analyzing call center audio with Call Analytics&lt;/a&gt;.&lt;/p&gt;
     * @alias module:model/Rule
     */
    constructor() { 
        
        Rule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Rule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Rule} obj Optional instance to populate.
     * @return {module:model/Rule} The populated <code>Rule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Rule();

            if (data.hasOwnProperty('NonTalkTimeFilter')) {
                obj['NonTalkTimeFilter'] = RuleNonTalkTimeFilter.constructFromObject(data['NonTalkTimeFilter']);
            }
            if (data.hasOwnProperty('InterruptionFilter')) {
                obj['InterruptionFilter'] = RuleInterruptionFilter.constructFromObject(data['InterruptionFilter']);
            }
            if (data.hasOwnProperty('TranscriptFilter')) {
                obj['TranscriptFilter'] = RuleTranscriptFilter.constructFromObject(data['TranscriptFilter']);
            }
            if (data.hasOwnProperty('SentimentFilter')) {
                obj['SentimentFilter'] = RuleSentimentFilter.constructFromObject(data['SentimentFilter']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Rule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Rule</code>.
     */
    static validateJSON(data) {
        // validate the optional field `NonTalkTimeFilter`
        if (data['NonTalkTimeFilter']) { // data not null
          RuleNonTalkTimeFilter.validateJSON(data['NonTalkTimeFilter']);
        }
        // validate the optional field `InterruptionFilter`
        if (data['InterruptionFilter']) { // data not null
          RuleInterruptionFilter.validateJSON(data['InterruptionFilter']);
        }
        // validate the optional field `TranscriptFilter`
        if (data['TranscriptFilter']) { // data not null
          RuleTranscriptFilter.validateJSON(data['TranscriptFilter']);
        }
        // validate the optional field `SentimentFilter`
        if (data['SentimentFilter']) { // data not null
          RuleSentimentFilter.validateJSON(data['SentimentFilter']);
        }

        return true;
    }


}



/**
 * @member {module:model/RuleNonTalkTimeFilter} NonTalkTimeFilter
 */
Rule.prototype['NonTalkTimeFilter'] = undefined;

/**
 * @member {module:model/RuleInterruptionFilter} InterruptionFilter
 */
Rule.prototype['InterruptionFilter'] = undefined;

/**
 * @member {module:model/RuleTranscriptFilter} TranscriptFilter
 */
Rule.prototype['TranscriptFilter'] = undefined;

/**
 * @member {module:model/RuleSentimentFilter} SentimentFilter
 */
Rule.prototype['SentimentFilter'] = undefined;






export default Rule;

