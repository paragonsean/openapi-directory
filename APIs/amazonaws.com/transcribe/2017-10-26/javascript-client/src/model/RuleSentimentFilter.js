/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ParticipantRole from './ParticipantRole';
import SentimentFilter from './SentimentFilter';
import SentimentFilterAbsoluteTimeRange from './SentimentFilterAbsoluteTimeRange';
import SentimentFilterRelativeTimeRange from './SentimentFilterRelativeTimeRange';

/**
 * The RuleSentimentFilter model module.
 * @module model/RuleSentimentFilter
 * @version 2017-10-26
 */
class RuleSentimentFilter {
    /**
     * Constructs a new <code>RuleSentimentFilter</code>.
     * @alias module:model/RuleSentimentFilter
     * @implements module:model/SentimentFilter
     * @param sentiments {Array} 
     */
    constructor(sentiments) { 
        SentimentFilter.initialize(this, sentiments);
        RuleSentimentFilter.initialize(this, sentiments);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sentiments) { 
        obj['Sentiments'] = sentiments;
    }

    /**
     * Constructs a <code>RuleSentimentFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RuleSentimentFilter} obj Optional instance to populate.
     * @return {module:model/RuleSentimentFilter} The populated <code>RuleSentimentFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RuleSentimentFilter();
            SentimentFilter.constructFromObject(data, obj);

            if (data.hasOwnProperty('Sentiments')) {
                obj['Sentiments'] = ApiClient.convertToType(data['Sentiments'], Array);
            }
            if (data.hasOwnProperty('AbsoluteTimeRange')) {
                obj['AbsoluteTimeRange'] = SentimentFilterAbsoluteTimeRange.constructFromObject(data['AbsoluteTimeRange']);
            }
            if (data.hasOwnProperty('RelativeTimeRange')) {
                obj['RelativeTimeRange'] = SentimentFilterRelativeTimeRange.constructFromObject(data['RelativeTimeRange']);
            }
            if (data.hasOwnProperty('ParticipantRole')) {
                obj['ParticipantRole'] = ApiClient.convertToType(data['ParticipantRole'], ParticipantRole);
            }
            if (data.hasOwnProperty('Negate')) {
                obj['Negate'] = ApiClient.convertToType(data['Negate'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RuleSentimentFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RuleSentimentFilter</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RuleSentimentFilter.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Sentiments`
        if (data['Sentiments']) { // data not null
          Array.validateJSON(data['Sentiments']);
        }
        // validate the optional field `AbsoluteTimeRange`
        if (data['AbsoluteTimeRange']) { // data not null
          SentimentFilterAbsoluteTimeRange.validateJSON(data['AbsoluteTimeRange']);
        }
        // validate the optional field `RelativeTimeRange`
        if (data['RelativeTimeRange']) { // data not null
          SentimentFilterRelativeTimeRange.validateJSON(data['RelativeTimeRange']);
        }
        // validate the optional field `ParticipantRole`
        if (data['ParticipantRole']) { // data not null
          ParticipantRole.validateJSON(data['ParticipantRole']);
        }
        // validate the optional field `Negate`
        if (data['Negate']) { // data not null
          Boolean.validateJSON(data['Negate']);
        }

        return true;
    }


}

RuleSentimentFilter.RequiredProperties = ["Sentiments"];

/**
 * @member {Array} Sentiments
 */
RuleSentimentFilter.prototype['Sentiments'] = undefined;

/**
 * @member {module:model/SentimentFilterAbsoluteTimeRange} AbsoluteTimeRange
 */
RuleSentimentFilter.prototype['AbsoluteTimeRange'] = undefined;

/**
 * @member {module:model/SentimentFilterRelativeTimeRange} RelativeTimeRange
 */
RuleSentimentFilter.prototype['RelativeTimeRange'] = undefined;

/**
 * @member {module:model/ParticipantRole} ParticipantRole
 */
RuleSentimentFilter.prototype['ParticipantRole'] = undefined;

/**
 * @member {Boolean} Negate
 */
RuleSentimentFilter.prototype['Negate'] = undefined;


// Implement SentimentFilter interface:
/**
 * @member {Array} Sentiments
 */
SentimentFilter.prototype['Sentiments'] = undefined;
/**
 * @member {module:model/SentimentFilterAbsoluteTimeRange} AbsoluteTimeRange
 */
SentimentFilter.prototype['AbsoluteTimeRange'] = undefined;
/**
 * @member {module:model/SentimentFilterRelativeTimeRange} RelativeTimeRange
 */
SentimentFilter.prototype['RelativeTimeRange'] = undefined;
/**
 * @member {module:model/ParticipantRole} ParticipantRole
 */
SentimentFilter.prototype['ParticipantRole'] = undefined;
/**
 * @member {Boolean} Negate
 */
SentimentFilter.prototype['Negate'] = undefined;




export default RuleSentimentFilter;

