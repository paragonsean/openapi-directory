/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LanguageCode from './LanguageCode';

/**
 * The UpdateMedicalVocabularyRequest model module.
 * @module model/UpdateMedicalVocabularyRequest
 * @version 2017-10-26
 */
class UpdateMedicalVocabularyRequest {
    /**
     * Constructs a new <code>UpdateMedicalVocabularyRequest</code>.
     * @alias module:model/UpdateMedicalVocabularyRequest
     * @param vocabularyName {String} 
     * @param languageCode {module:model/LanguageCode} 
     * @param vocabularyFileUri {String} 
     */
    constructor(vocabularyName, languageCode, vocabularyFileUri) { 
        
        UpdateMedicalVocabularyRequest.initialize(this, vocabularyName, languageCode, vocabularyFileUri);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, vocabularyName, languageCode, vocabularyFileUri) { 
        obj['VocabularyName'] = vocabularyName;
        obj['LanguageCode'] = languageCode;
        obj['VocabularyFileUri'] = vocabularyFileUri;
    }

    /**
     * Constructs a <code>UpdateMedicalVocabularyRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateMedicalVocabularyRequest} obj Optional instance to populate.
     * @return {module:model/UpdateMedicalVocabularyRequest} The populated <code>UpdateMedicalVocabularyRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateMedicalVocabularyRequest();

            if (data.hasOwnProperty('VocabularyName')) {
                obj['VocabularyName'] = ApiClient.convertToType(data['VocabularyName'], 'String');
            }
            if (data.hasOwnProperty('LanguageCode')) {
                obj['LanguageCode'] = ApiClient.convertToType(data['LanguageCode'], LanguageCode);
            }
            if (data.hasOwnProperty('VocabularyFileUri')) {
                obj['VocabularyFileUri'] = ApiClient.convertToType(data['VocabularyFileUri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateMedicalVocabularyRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateMedicalVocabularyRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateMedicalVocabularyRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `VocabularyName`
        if (data['VocabularyName']) { // data not null
          String.validateJSON(data['VocabularyName']);
        }
        // validate the optional field `LanguageCode`
        if (data['LanguageCode']) { // data not null
          LanguageCode.validateJSON(data['LanguageCode']);
        }
        // validate the optional field `VocabularyFileUri`
        if (data['VocabularyFileUri']) { // data not null
          String.validateJSON(data['VocabularyFileUri']);
        }

        return true;
    }


}

UpdateMedicalVocabularyRequest.RequiredProperties = ["VocabularyName", "LanguageCode", "VocabularyFileUri"];

/**
 * @member {String} VocabularyName
 */
UpdateMedicalVocabularyRequest.prototype['VocabularyName'] = undefined;

/**
 * @member {module:model/LanguageCode} LanguageCode
 */
UpdateMedicalVocabularyRequest.prototype['LanguageCode'] = undefined;

/**
 * @member {String} VocabularyFileUri
 */
UpdateMedicalVocabularyRequest.prototype['VocabularyFileUri'] = undefined;






export default UpdateMedicalVocabularyRequest;

