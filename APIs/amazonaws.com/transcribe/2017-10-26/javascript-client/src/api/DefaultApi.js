/**
 * Amazon Transcribe Service
 * <p>Amazon Transcribe offers three main types of batch transcription: <b>Standard</b>, <b>Medical</b>, and <b>Call Analytics</b>.</p> <ul> <li> <p> <b>Standard transcriptions</b> are the most common option. Refer to for details.</p> </li> <li> <p> <b>Medical transcriptions</b> are tailored to medical professionals and incorporate medical terms. A common use case for this service is transcribing doctor-patient dialogue into after-visit notes. Refer to for details.</p> </li> <li> <p> <b>Call Analytics transcriptions</b> are designed for use with call center audio on two different channels; if you're looking for insight into customer service calls, use this option. Refer to for details.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateCallAnalyticsCategoryRequest from '../model/CreateCallAnalyticsCategoryRequest';
import CreateCallAnalyticsCategoryResponse from '../model/CreateCallAnalyticsCategoryResponse';
import CreateLanguageModelRequest from '../model/CreateLanguageModelRequest';
import CreateLanguageModelResponse from '../model/CreateLanguageModelResponse';
import CreateMedicalVocabularyRequest from '../model/CreateMedicalVocabularyRequest';
import CreateMedicalVocabularyResponse from '../model/CreateMedicalVocabularyResponse';
import CreateVocabularyFilterRequest from '../model/CreateVocabularyFilterRequest';
import CreateVocabularyFilterResponse from '../model/CreateVocabularyFilterResponse';
import CreateVocabularyRequest from '../model/CreateVocabularyRequest';
import CreateVocabularyResponse from '../model/CreateVocabularyResponse';
import DeleteCallAnalyticsCategoryRequest from '../model/DeleteCallAnalyticsCategoryRequest';
import DeleteCallAnalyticsJobRequest from '../model/DeleteCallAnalyticsJobRequest';
import DeleteLanguageModelRequest from '../model/DeleteLanguageModelRequest';
import DeleteMedicalTranscriptionJobRequest from '../model/DeleteMedicalTranscriptionJobRequest';
import DeleteMedicalVocabularyRequest from '../model/DeleteMedicalVocabularyRequest';
import DeleteTranscriptionJobRequest from '../model/DeleteTranscriptionJobRequest';
import DeleteVocabularyFilterRequest from '../model/DeleteVocabularyFilterRequest';
import DeleteVocabularyRequest from '../model/DeleteVocabularyRequest';
import DescribeLanguageModelRequest from '../model/DescribeLanguageModelRequest';
import DescribeLanguageModelResponse from '../model/DescribeLanguageModelResponse';
import GetCallAnalyticsCategoryRequest from '../model/GetCallAnalyticsCategoryRequest';
import GetCallAnalyticsCategoryResponse from '../model/GetCallAnalyticsCategoryResponse';
import GetCallAnalyticsJobRequest from '../model/GetCallAnalyticsJobRequest';
import GetCallAnalyticsJobResponse from '../model/GetCallAnalyticsJobResponse';
import GetMedicalTranscriptionJobRequest from '../model/GetMedicalTranscriptionJobRequest';
import GetMedicalTranscriptionJobResponse from '../model/GetMedicalTranscriptionJobResponse';
import GetMedicalVocabularyRequest from '../model/GetMedicalVocabularyRequest';
import GetMedicalVocabularyResponse from '../model/GetMedicalVocabularyResponse';
import GetTranscriptionJobRequest from '../model/GetTranscriptionJobRequest';
import GetTranscriptionJobResponse from '../model/GetTranscriptionJobResponse';
import GetVocabularyFilterRequest from '../model/GetVocabularyFilterRequest';
import GetVocabularyFilterResponse from '../model/GetVocabularyFilterResponse';
import GetVocabularyRequest from '../model/GetVocabularyRequest';
import GetVocabularyResponse from '../model/GetVocabularyResponse';
import ListCallAnalyticsCategoriesRequest from '../model/ListCallAnalyticsCategoriesRequest';
import ListCallAnalyticsCategoriesResponse from '../model/ListCallAnalyticsCategoriesResponse';
import ListCallAnalyticsJobsRequest from '../model/ListCallAnalyticsJobsRequest';
import ListCallAnalyticsJobsResponse from '../model/ListCallAnalyticsJobsResponse';
import ListLanguageModelsRequest from '../model/ListLanguageModelsRequest';
import ListLanguageModelsResponse from '../model/ListLanguageModelsResponse';
import ListMedicalTranscriptionJobsRequest from '../model/ListMedicalTranscriptionJobsRequest';
import ListMedicalTranscriptionJobsResponse from '../model/ListMedicalTranscriptionJobsResponse';
import ListMedicalVocabulariesRequest from '../model/ListMedicalVocabulariesRequest';
import ListMedicalVocabulariesResponse from '../model/ListMedicalVocabulariesResponse';
import ListTagsForResourceRequest from '../model/ListTagsForResourceRequest';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import ListTranscriptionJobsRequest from '../model/ListTranscriptionJobsRequest';
import ListTranscriptionJobsResponse from '../model/ListTranscriptionJobsResponse';
import ListVocabulariesRequest from '../model/ListVocabulariesRequest';
import ListVocabulariesResponse from '../model/ListVocabulariesResponse';
import ListVocabularyFiltersRequest from '../model/ListVocabularyFiltersRequest';
import ListVocabularyFiltersResponse from '../model/ListVocabularyFiltersResponse';
import StartCallAnalyticsJobRequest from '../model/StartCallAnalyticsJobRequest';
import StartCallAnalyticsJobResponse from '../model/StartCallAnalyticsJobResponse';
import StartMedicalTranscriptionJobRequest from '../model/StartMedicalTranscriptionJobRequest';
import StartMedicalTranscriptionJobResponse from '../model/StartMedicalTranscriptionJobResponse';
import StartTranscriptionJobRequest from '../model/StartTranscriptionJobRequest';
import StartTranscriptionJobResponse from '../model/StartTranscriptionJobResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UntagResourceRequest from '../model/UntagResourceRequest';
import UpdateCallAnalyticsCategoryRequest from '../model/UpdateCallAnalyticsCategoryRequest';
import UpdateCallAnalyticsCategoryResponse from '../model/UpdateCallAnalyticsCategoryResponse';
import UpdateMedicalVocabularyRequest from '../model/UpdateMedicalVocabularyRequest';
import UpdateMedicalVocabularyResponse from '../model/UpdateMedicalVocabularyResponse';
import UpdateVocabularyFilterRequest from '../model/UpdateVocabularyFilterRequest';
import UpdateVocabularyFilterResponse from '../model/UpdateVocabularyFilterResponse';
import UpdateVocabularyRequest from '../model/UpdateVocabularyRequest';
import UpdateVocabularyResponse from '../model/UpdateVocabularyResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2017-10-26
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCallAnalyticsCategory operation.
     * @callback module:api/DefaultApi~createCallAnalyticsCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCallAnalyticsCategoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new Call Analytics category.</p> <p>All categories are automatically applied to your Call Analytics transcriptions. Note that in order to apply categories to your transcriptions, you must create them before submitting your transcription request, as categories cannot be applied retroactively.</p> <p>When creating a new category, you can use the <code>InputType</code> parameter to label the category as a <code>POST_CALL</code> or a <code>REAL_TIME</code> category. <code>POST_CALL</code> categories can only be applied to post-call transcriptions and <code>REAL_TIME</code> categories can only be applied to real-time transcriptions. If you do not include <code>InputType</code>, your category is created as a <code>POST_CALL</code> category by default.</p> <p>Call Analytics categories are composed of rules. For each category, you must create between 1 and 20 rules. Rules can include these parameters: , , , and .</p> <p>To update an existing category, see .</p> <p>To learn more about Call Analytics categories, see <a href=\"https://docs.aws.amazon.com/transcribe/latest/dg/tca-categories-batch.html\">Creating categories for post-call transcriptions</a> and <a href=\"https://docs.aws.amazon.com/transcribe/latest/dg/tca-categories-stream.html\">Creating categories for real-time transcriptions</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateCallAnalyticsCategoryRequest} createCallAnalyticsCategoryRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createCallAnalyticsCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCallAnalyticsCategoryResponse}
     */
    createCallAnalyticsCategory(xAmzTarget, createCallAnalyticsCategoryRequest, opts, callback) {
      opts = opts || {};
      let postBody = createCallAnalyticsCategoryRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createCallAnalyticsCategory");
      }
      // verify the required parameter 'createCallAnalyticsCategoryRequest' is set
      if (createCallAnalyticsCategoryRequest === undefined || createCallAnalyticsCategoryRequest === null) {
        throw new Error("Missing the required parameter 'createCallAnalyticsCategoryRequest' when calling createCallAnalyticsCategory");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCallAnalyticsCategoryResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.CreateCallAnalyticsCategory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLanguageModel operation.
     * @callback module:api/DefaultApi~createLanguageModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateLanguageModelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new custom language model.</p> <p>When creating a new custom language model, you must specify:</p> <ul> <li> <p>If you want a Wideband (audio sample rates over 16,000 Hz) or Narrowband (audio sample rates under 16,000 Hz) base model</p> </li> <li> <p>The location of your training and tuning files (this must be an Amazon S3 URI)</p> </li> <li> <p>The language of your model</p> </li> <li> <p>A unique name for your model</p> </li> </ul>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateLanguageModelRequest} createLanguageModelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createLanguageModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateLanguageModelResponse}
     */
    createLanguageModel(xAmzTarget, createLanguageModelRequest, opts, callback) {
      opts = opts || {};
      let postBody = createLanguageModelRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createLanguageModel");
      }
      // verify the required parameter 'createLanguageModelRequest' is set
      if (createLanguageModelRequest === undefined || createLanguageModelRequest === null) {
        throw new Error("Missing the required parameter 'createLanguageModelRequest' when calling createLanguageModel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLanguageModelResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.CreateLanguageModel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createMedicalVocabulary operation.
     * @callback module:api/DefaultApi~createMedicalVocabularyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateMedicalVocabularyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new custom medical vocabulary.</p> <p>Before creating a new custom medical vocabulary, you must first upload a text file that contains your vocabulary table into an Amazon S3 bucket. Note that this differs from , where you can include a list of terms within your request using the <code>Phrases</code> flag; <code>CreateMedicalVocabulary</code> does not support the <code>Phrases</code> flag and only accepts vocabularies in table format.</p> <p>Each language has a character set that contains all allowed characters for that specific language. If you use unsupported characters, your custom vocabulary request fails. Refer to <a href=\"https://docs.aws.amazon.com/transcribe/latest/dg/charsets.html\">Character Sets for Custom Vocabularies</a> to get the character set for your language.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/transcribe/latest/dg/custom-vocabulary.html\">Custom vocabularies</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateMedicalVocabularyRequest} createMedicalVocabularyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createMedicalVocabularyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateMedicalVocabularyResponse}
     */
    createMedicalVocabulary(xAmzTarget, createMedicalVocabularyRequest, opts, callback) {
      opts = opts || {};
      let postBody = createMedicalVocabularyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createMedicalVocabulary");
      }
      // verify the required parameter 'createMedicalVocabularyRequest' is set
      if (createMedicalVocabularyRequest === undefined || createMedicalVocabularyRequest === null) {
        throw new Error("Missing the required parameter 'createMedicalVocabularyRequest' when calling createMedicalVocabulary");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateMedicalVocabularyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.CreateMedicalVocabulary', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createVocabulary operation.
     * @callback module:api/DefaultApi~createVocabularyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateVocabularyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new custom vocabulary.</p> <p>When creating a new custom vocabulary, you can either upload a text file that contains your new entries, phrases, and terms into an Amazon S3 bucket and include the URI in your request. Or you can include a list of terms directly in your request using the <code>Phrases</code> flag.</p> <p>Each language has a character set that contains all allowed characters for that specific language. If you use unsupported characters, your custom vocabulary request fails. Refer to <a href=\"https://docs.aws.amazon.com/transcribe/latest/dg/charsets.html\">Character Sets for Custom Vocabularies</a> to get the character set for your language.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/transcribe/latest/dg/custom-vocabulary.html\">Custom vocabularies</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateVocabularyRequest} createVocabularyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createVocabularyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateVocabularyResponse}
     */
    createVocabulary(xAmzTarget, createVocabularyRequest, opts, callback) {
      opts = opts || {};
      let postBody = createVocabularyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createVocabulary");
      }
      // verify the required parameter 'createVocabularyRequest' is set
      if (createVocabularyRequest === undefined || createVocabularyRequest === null) {
        throw new Error("Missing the required parameter 'createVocabularyRequest' when calling createVocabulary");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateVocabularyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.CreateVocabulary', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createVocabularyFilter operation.
     * @callback module:api/DefaultApi~createVocabularyFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateVocabularyFilterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new custom vocabulary filter.</p> <p>You can use custom vocabulary filters to mask, delete, or flag specific words from your transcript. Custom vocabulary filters are commonly used to mask profanity in transcripts.</p> <p>Each language has a character set that contains all allowed characters for that specific language. If you use unsupported characters, your custom vocabulary filter request fails. Refer to <a href=\"https://docs.aws.amazon.com/transcribe/latest/dg/charsets.html\">Character Sets for Custom Vocabularies</a> to get the character set for your language.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/transcribe/latest/dg/vocabulary-filtering.html\">Vocabulary filtering</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateVocabularyFilterRequest} createVocabularyFilterRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createVocabularyFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateVocabularyFilterResponse}
     */
    createVocabularyFilter(xAmzTarget, createVocabularyFilterRequest, opts, callback) {
      opts = opts || {};
      let postBody = createVocabularyFilterRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createVocabularyFilter");
      }
      // verify the required parameter 'createVocabularyFilterRequest' is set
      if (createVocabularyFilterRequest === undefined || createVocabularyFilterRequest === null) {
        throw new Error("Missing the required parameter 'createVocabularyFilterRequest' when calling createVocabularyFilter");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateVocabularyFilterResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.CreateVocabularyFilter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCallAnalyticsCategory operation.
     * @callback module:api/DefaultApi~deleteCallAnalyticsCategoryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Call Analytics category. To use this operation, specify the name of the category you want to delete using <code>CategoryName</code>. Category names are case sensitive.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteCallAnalyticsCategoryRequest} deleteCallAnalyticsCategoryRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteCallAnalyticsCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteCallAnalyticsCategory(xAmzTarget, deleteCallAnalyticsCategoryRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteCallAnalyticsCategoryRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteCallAnalyticsCategory");
      }
      // verify the required parameter 'deleteCallAnalyticsCategoryRequest' is set
      if (deleteCallAnalyticsCategoryRequest === undefined || deleteCallAnalyticsCategoryRequest === null) {
        throw new Error("Missing the required parameter 'deleteCallAnalyticsCategoryRequest' when calling deleteCallAnalyticsCategory");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.DeleteCallAnalyticsCategory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCallAnalyticsJob operation.
     * @callback module:api/DefaultApi~deleteCallAnalyticsJobCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Call Analytics job. To use this operation, specify the name of the job you want to delete using <code>CallAnalyticsJobName</code>. Job names are case sensitive.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteCallAnalyticsJobRequest} deleteCallAnalyticsJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteCallAnalyticsJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteCallAnalyticsJob(xAmzTarget, deleteCallAnalyticsJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteCallAnalyticsJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteCallAnalyticsJob");
      }
      // verify the required parameter 'deleteCallAnalyticsJobRequest' is set
      if (deleteCallAnalyticsJobRequest === undefined || deleteCallAnalyticsJobRequest === null) {
        throw new Error("Missing the required parameter 'deleteCallAnalyticsJobRequest' when calling deleteCallAnalyticsJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.DeleteCallAnalyticsJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLanguageModel operation.
     * @callback module:api/DefaultApi~deleteLanguageModelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a custom language model. To use this operation, specify the name of the language model you want to delete using <code>ModelName</code>. custom language model names are case sensitive.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteLanguageModelRequest} deleteLanguageModelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteLanguageModelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteLanguageModel(xAmzTarget, deleteLanguageModelRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteLanguageModelRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteLanguageModel");
      }
      // verify the required parameter 'deleteLanguageModelRequest' is set
      if (deleteLanguageModelRequest === undefined || deleteLanguageModelRequest === null) {
        throw new Error("Missing the required parameter 'deleteLanguageModelRequest' when calling deleteLanguageModel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.DeleteLanguageModel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMedicalTranscriptionJob operation.
     * @callback module:api/DefaultApi~deleteMedicalTranscriptionJobCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a medical transcription job. To use this operation, specify the name of the job you want to delete using <code>MedicalTranscriptionJobName</code>. Job names are case sensitive.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteMedicalTranscriptionJobRequest} deleteMedicalTranscriptionJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteMedicalTranscriptionJobCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMedicalTranscriptionJob(xAmzTarget, deleteMedicalTranscriptionJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteMedicalTranscriptionJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteMedicalTranscriptionJob");
      }
      // verify the required parameter 'deleteMedicalTranscriptionJobRequest' is set
      if (deleteMedicalTranscriptionJobRequest === undefined || deleteMedicalTranscriptionJobRequest === null) {
        throw new Error("Missing the required parameter 'deleteMedicalTranscriptionJobRequest' when calling deleteMedicalTranscriptionJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.DeleteMedicalTranscriptionJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMedicalVocabulary operation.
     * @callback module:api/DefaultApi~deleteMedicalVocabularyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a custom medical vocabulary. To use this operation, specify the name of the custom vocabulary you want to delete using <code>VocabularyName</code>. Custom vocabulary names are case sensitive.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteMedicalVocabularyRequest} deleteMedicalVocabularyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteMedicalVocabularyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMedicalVocabulary(xAmzTarget, deleteMedicalVocabularyRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteMedicalVocabularyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteMedicalVocabulary");
      }
      // verify the required parameter 'deleteMedicalVocabularyRequest' is set
      if (deleteMedicalVocabularyRequest === undefined || deleteMedicalVocabularyRequest === null) {
        throw new Error("Missing the required parameter 'deleteMedicalVocabularyRequest' when calling deleteMedicalVocabulary");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.DeleteMedicalVocabulary', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTranscriptionJob operation.
     * @callback module:api/DefaultApi~deleteTranscriptionJobCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a transcription job. To use this operation, specify the name of the job you want to delete using <code>TranscriptionJobName</code>. Job names are case sensitive.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteTranscriptionJobRequest} deleteTranscriptionJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteTranscriptionJobCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTranscriptionJob(xAmzTarget, deleteTranscriptionJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteTranscriptionJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteTranscriptionJob");
      }
      // verify the required parameter 'deleteTranscriptionJobRequest' is set
      if (deleteTranscriptionJobRequest === undefined || deleteTranscriptionJobRequest === null) {
        throw new Error("Missing the required parameter 'deleteTranscriptionJobRequest' when calling deleteTranscriptionJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.DeleteTranscriptionJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVocabulary operation.
     * @callback module:api/DefaultApi~deleteVocabularyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a custom vocabulary. To use this operation, specify the name of the custom vocabulary you want to delete using <code>VocabularyName</code>. Custom vocabulary names are case sensitive.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteVocabularyRequest} deleteVocabularyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteVocabularyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVocabulary(xAmzTarget, deleteVocabularyRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteVocabularyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteVocabulary");
      }
      // verify the required parameter 'deleteVocabularyRequest' is set
      if (deleteVocabularyRequest === undefined || deleteVocabularyRequest === null) {
        throw new Error("Missing the required parameter 'deleteVocabularyRequest' when calling deleteVocabulary");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.DeleteVocabulary', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVocabularyFilter operation.
     * @callback module:api/DefaultApi~deleteVocabularyFilterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a custom vocabulary filter. To use this operation, specify the name of the custom vocabulary filter you want to delete using <code>VocabularyFilterName</code>. Custom vocabulary filter names are case sensitive.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteVocabularyFilterRequest} deleteVocabularyFilterRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteVocabularyFilterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVocabularyFilter(xAmzTarget, deleteVocabularyFilterRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteVocabularyFilterRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteVocabularyFilter");
      }
      // verify the required parameter 'deleteVocabularyFilterRequest' is set
      if (deleteVocabularyFilterRequest === undefined || deleteVocabularyFilterRequest === null) {
        throw new Error("Missing the required parameter 'deleteVocabularyFilterRequest' when calling deleteVocabularyFilter");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.DeleteVocabularyFilter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeLanguageModel operation.
     * @callback module:api/DefaultApi~describeLanguageModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeLanguageModelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Provides information about the specified custom language model.</p> <p>This operation also shows if the base language model that you used to create your custom language model has been updated. If Amazon Transcribe has updated the base model, you can create a new custom language model using the updated base model.</p> <p>If you tried to create a new custom language model and the request wasn't successful, you can use <code>DescribeLanguageModel</code> to help identify the reason for this failure.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeLanguageModelRequest} describeLanguageModelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeLanguageModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeLanguageModelResponse}
     */
    describeLanguageModel(xAmzTarget, describeLanguageModelRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeLanguageModelRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeLanguageModel");
      }
      // verify the required parameter 'describeLanguageModelRequest' is set
      if (describeLanguageModelRequest === undefined || describeLanguageModelRequest === null) {
        throw new Error("Missing the required parameter 'describeLanguageModelRequest' when calling describeLanguageModel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeLanguageModelResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.DescribeLanguageModel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCallAnalyticsCategory operation.
     * @callback module:api/DefaultApi~getCallAnalyticsCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCallAnalyticsCategoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Provides information about the specified Call Analytics category.</p> <p>To get a list of your Call Analytics categories, use the operation.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetCallAnalyticsCategoryRequest} getCallAnalyticsCategoryRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getCallAnalyticsCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCallAnalyticsCategoryResponse}
     */
    getCallAnalyticsCategory(xAmzTarget, getCallAnalyticsCategoryRequest, opts, callback) {
      opts = opts || {};
      let postBody = getCallAnalyticsCategoryRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getCallAnalyticsCategory");
      }
      // verify the required parameter 'getCallAnalyticsCategoryRequest' is set
      if (getCallAnalyticsCategoryRequest === undefined || getCallAnalyticsCategoryRequest === null) {
        throw new Error("Missing the required parameter 'getCallAnalyticsCategoryRequest' when calling getCallAnalyticsCategory");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetCallAnalyticsCategoryResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.GetCallAnalyticsCategory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCallAnalyticsJob operation.
     * @callback module:api/DefaultApi~getCallAnalyticsJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCallAnalyticsJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Provides information about the specified Call Analytics job.</p> <p>To view the job's status, refer to <code>CallAnalyticsJobStatus</code>. If the status is <code>COMPLETED</code>, the job is finished. You can find your completed transcript at the URI specified in <code>TranscriptFileUri</code>. If the status is <code>FAILED</code>, <code>FailureReason</code> provides details on why your transcription job failed.</p> <p>If you enabled personally identifiable information (PII) redaction, the redacted transcript appears at the location specified in <code>RedactedTranscriptFileUri</code>.</p> <p>If you chose to redact the audio in your media file, you can find your redacted media file at the location specified in <code>RedactedMediaFileUri</code>.</p> <p>To get a list of your Call Analytics jobs, use the operation.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetCallAnalyticsJobRequest} getCallAnalyticsJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getCallAnalyticsJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCallAnalyticsJobResponse}
     */
    getCallAnalyticsJob(xAmzTarget, getCallAnalyticsJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = getCallAnalyticsJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getCallAnalyticsJob");
      }
      // verify the required parameter 'getCallAnalyticsJobRequest' is set
      if (getCallAnalyticsJobRequest === undefined || getCallAnalyticsJobRequest === null) {
        throw new Error("Missing the required parameter 'getCallAnalyticsJobRequest' when calling getCallAnalyticsJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetCallAnalyticsJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.GetCallAnalyticsJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMedicalTranscriptionJob operation.
     * @callback module:api/DefaultApi~getMedicalTranscriptionJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMedicalTranscriptionJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Provides information about the specified medical transcription job.</p> <p>To view the status of the specified medical transcription job, check the <code>TranscriptionJobStatus</code> field. If the status is <code>COMPLETED</code>, the job is finished. You can find the results at the location specified in <code>TranscriptFileUri</code>. If the status is <code>FAILED</code>, <code>FailureReason</code> provides details on why your transcription job failed.</p> <p>To get a list of your medical transcription jobs, use the operation.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetMedicalTranscriptionJobRequest} getMedicalTranscriptionJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getMedicalTranscriptionJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMedicalTranscriptionJobResponse}
     */
    getMedicalTranscriptionJob(xAmzTarget, getMedicalTranscriptionJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = getMedicalTranscriptionJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getMedicalTranscriptionJob");
      }
      // verify the required parameter 'getMedicalTranscriptionJobRequest' is set
      if (getMedicalTranscriptionJobRequest === undefined || getMedicalTranscriptionJobRequest === null) {
        throw new Error("Missing the required parameter 'getMedicalTranscriptionJobRequest' when calling getMedicalTranscriptionJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetMedicalTranscriptionJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.GetMedicalTranscriptionJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMedicalVocabulary operation.
     * @callback module:api/DefaultApi~getMedicalVocabularyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMedicalVocabularyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Provides information about the specified custom medical vocabulary.</p> <p>To view the status of the specified custom medical vocabulary, check the <code>VocabularyState</code> field. If the status is <code>READY</code>, your custom vocabulary is available to use. If the status is <code>FAILED</code>, <code>FailureReason</code> provides details on why your vocabulary failed.</p> <p>To get a list of your custom medical vocabularies, use the operation.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetMedicalVocabularyRequest} getMedicalVocabularyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getMedicalVocabularyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMedicalVocabularyResponse}
     */
    getMedicalVocabulary(xAmzTarget, getMedicalVocabularyRequest, opts, callback) {
      opts = opts || {};
      let postBody = getMedicalVocabularyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getMedicalVocabulary");
      }
      // verify the required parameter 'getMedicalVocabularyRequest' is set
      if (getMedicalVocabularyRequest === undefined || getMedicalVocabularyRequest === null) {
        throw new Error("Missing the required parameter 'getMedicalVocabularyRequest' when calling getMedicalVocabulary");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetMedicalVocabularyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.GetMedicalVocabulary', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTranscriptionJob operation.
     * @callback module:api/DefaultApi~getTranscriptionJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTranscriptionJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Provides information about the specified transcription job.</p> <p>To view the status of the specified transcription job, check the <code>TranscriptionJobStatus</code> field. If the status is <code>COMPLETED</code>, the job is finished. You can find the results at the location specified in <code>TranscriptFileUri</code>. If the status is <code>FAILED</code>, <code>FailureReason</code> provides details on why your transcription job failed.</p> <p>If you enabled content redaction, the redacted transcript can be found at the location specified in <code>RedactedTranscriptFileUri</code>.</p> <p>To get a list of your transcription jobs, use the operation.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetTranscriptionJobRequest} getTranscriptionJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getTranscriptionJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTranscriptionJobResponse}
     */
    getTranscriptionJob(xAmzTarget, getTranscriptionJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = getTranscriptionJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getTranscriptionJob");
      }
      // verify the required parameter 'getTranscriptionJobRequest' is set
      if (getTranscriptionJobRequest === undefined || getTranscriptionJobRequest === null) {
        throw new Error("Missing the required parameter 'getTranscriptionJobRequest' when calling getTranscriptionJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetTranscriptionJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.GetTranscriptionJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVocabulary operation.
     * @callback module:api/DefaultApi~getVocabularyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetVocabularyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Provides information about the specified custom vocabulary.</p> <p>To view the status of the specified custom vocabulary, check the <code>VocabularyState</code> field. If the status is <code>READY</code>, your custom vocabulary is available to use. If the status is <code>FAILED</code>, <code>FailureReason</code> provides details on why your custom vocabulary failed.</p> <p>To get a list of your custom vocabularies, use the operation.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetVocabularyRequest} getVocabularyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getVocabularyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetVocabularyResponse}
     */
    getVocabulary(xAmzTarget, getVocabularyRequest, opts, callback) {
      opts = opts || {};
      let postBody = getVocabularyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getVocabulary");
      }
      // verify the required parameter 'getVocabularyRequest' is set
      if (getVocabularyRequest === undefined || getVocabularyRequest === null) {
        throw new Error("Missing the required parameter 'getVocabularyRequest' when calling getVocabulary");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetVocabularyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.GetVocabulary', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVocabularyFilter operation.
     * @callback module:api/DefaultApi~getVocabularyFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetVocabularyFilterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Provides information about the specified custom vocabulary filter.</p> <p>To get a list of your custom vocabulary filters, use the operation.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetVocabularyFilterRequest} getVocabularyFilterRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getVocabularyFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetVocabularyFilterResponse}
     */
    getVocabularyFilter(xAmzTarget, getVocabularyFilterRequest, opts, callback) {
      opts = opts || {};
      let postBody = getVocabularyFilterRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getVocabularyFilter");
      }
      // verify the required parameter 'getVocabularyFilterRequest' is set
      if (getVocabularyFilterRequest === undefined || getVocabularyFilterRequest === null) {
        throw new Error("Missing the required parameter 'getVocabularyFilterRequest' when calling getVocabularyFilter");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetVocabularyFilterResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.GetVocabularyFilter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCallAnalyticsCategories operation.
     * @callback module:api/DefaultApi~listCallAnalyticsCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCallAnalyticsCategoriesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Provides a list of Call Analytics categories, including all rules that make up each category.</p> <p>To get detailed information about a specific Call Analytics category, use the operation.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListCallAnalyticsCategoriesRequest} listCallAnalyticsCategoriesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listCallAnalyticsCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCallAnalyticsCategoriesResponse}
     */
    listCallAnalyticsCategories(xAmzTarget, listCallAnalyticsCategoriesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listCallAnalyticsCategoriesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listCallAnalyticsCategories");
      }
      // verify the required parameter 'listCallAnalyticsCategoriesRequest' is set
      if (listCallAnalyticsCategoriesRequest === undefined || listCallAnalyticsCategoriesRequest === null) {
        throw new Error("Missing the required parameter 'listCallAnalyticsCategoriesRequest' when calling listCallAnalyticsCategories");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListCallAnalyticsCategoriesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.ListCallAnalyticsCategories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCallAnalyticsJobs operation.
     * @callback module:api/DefaultApi~listCallAnalyticsJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCallAnalyticsJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Provides a list of Call Analytics jobs that match the specified criteria. If no criteria are specified, all Call Analytics jobs are returned.</p> <p>To get detailed information about a specific Call Analytics job, use the operation.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListCallAnalyticsJobsRequest} listCallAnalyticsJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listCallAnalyticsJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCallAnalyticsJobsResponse}
     */
    listCallAnalyticsJobs(xAmzTarget, listCallAnalyticsJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listCallAnalyticsJobsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listCallAnalyticsJobs");
      }
      // verify the required parameter 'listCallAnalyticsJobsRequest' is set
      if (listCallAnalyticsJobsRequest === undefined || listCallAnalyticsJobsRequest === null) {
        throw new Error("Missing the required parameter 'listCallAnalyticsJobsRequest' when calling listCallAnalyticsJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListCallAnalyticsJobsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.ListCallAnalyticsJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLanguageModels operation.
     * @callback module:api/DefaultApi~listLanguageModelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLanguageModelsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Provides a list of custom language models that match the specified criteria. If no criteria are specified, all custom language models are returned.</p> <p>To get detailed information about a specific custom language model, use the operation.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListLanguageModelsRequest} listLanguageModelsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listLanguageModelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLanguageModelsResponse}
     */
    listLanguageModels(xAmzTarget, listLanguageModelsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listLanguageModelsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listLanguageModels");
      }
      // verify the required parameter 'listLanguageModelsRequest' is set
      if (listLanguageModelsRequest === undefined || listLanguageModelsRequest === null) {
        throw new Error("Missing the required parameter 'listLanguageModelsRequest' when calling listLanguageModels");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListLanguageModelsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.ListLanguageModels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMedicalTranscriptionJobs operation.
     * @callback module:api/DefaultApi~listMedicalTranscriptionJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMedicalTranscriptionJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Provides a list of medical transcription jobs that match the specified criteria. If no criteria are specified, all medical transcription jobs are returned.</p> <p>To get detailed information about a specific medical transcription job, use the operation.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListMedicalTranscriptionJobsRequest} listMedicalTranscriptionJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listMedicalTranscriptionJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMedicalTranscriptionJobsResponse}
     */
    listMedicalTranscriptionJobs(xAmzTarget, listMedicalTranscriptionJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listMedicalTranscriptionJobsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listMedicalTranscriptionJobs");
      }
      // verify the required parameter 'listMedicalTranscriptionJobsRequest' is set
      if (listMedicalTranscriptionJobsRequest === undefined || listMedicalTranscriptionJobsRequest === null) {
        throw new Error("Missing the required parameter 'listMedicalTranscriptionJobsRequest' when calling listMedicalTranscriptionJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListMedicalTranscriptionJobsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.ListMedicalTranscriptionJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMedicalVocabularies operation.
     * @callback module:api/DefaultApi~listMedicalVocabulariesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMedicalVocabulariesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Provides a list of custom medical vocabularies that match the specified criteria. If no criteria are specified, all custom medical vocabularies are returned.</p> <p>To get detailed information about a specific custom medical vocabulary, use the operation.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListMedicalVocabulariesRequest} listMedicalVocabulariesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listMedicalVocabulariesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMedicalVocabulariesResponse}
     */
    listMedicalVocabularies(xAmzTarget, listMedicalVocabulariesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listMedicalVocabulariesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listMedicalVocabularies");
      }
      // verify the required parameter 'listMedicalVocabulariesRequest' is set
      if (listMedicalVocabulariesRequest === undefined || listMedicalVocabulariesRequest === null) {
        throw new Error("Missing the required parameter 'listMedicalVocabulariesRequest' when calling listMedicalVocabularies");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListMedicalVocabulariesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.ListMedicalVocabularies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists all tags associated with the specified transcription job, vocabulary, model, or resource.</p> <p>To learn more about using tags with Amazon Transcribe, refer to <a href=\"https://docs.aws.amazon.com/transcribe/latest/dg/tagging.html\">Tagging resources</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTagsForResourceRequest} listTagsForResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(xAmzTarget, listTagsForResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTagsForResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTagsForResource");
      }
      // verify the required parameter 'listTagsForResourceRequest' is set
      if (listTagsForResourceRequest === undefined || listTagsForResourceRequest === null) {
        throw new Error("Missing the required parameter 'listTagsForResourceRequest' when calling listTagsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.ListTagsForResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTranscriptionJobs operation.
     * @callback module:api/DefaultApi~listTranscriptionJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTranscriptionJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Provides a list of transcription jobs that match the specified criteria. If no criteria are specified, all transcription jobs are returned.</p> <p>To get detailed information about a specific transcription job, use the operation.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTranscriptionJobsRequest} listTranscriptionJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listTranscriptionJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTranscriptionJobsResponse}
     */
    listTranscriptionJobs(xAmzTarget, listTranscriptionJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTranscriptionJobsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTranscriptionJobs");
      }
      // verify the required parameter 'listTranscriptionJobsRequest' is set
      if (listTranscriptionJobsRequest === undefined || listTranscriptionJobsRequest === null) {
        throw new Error("Missing the required parameter 'listTranscriptionJobsRequest' when calling listTranscriptionJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTranscriptionJobsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.ListTranscriptionJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVocabularies operation.
     * @callback module:api/DefaultApi~listVocabulariesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListVocabulariesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Provides a list of custom vocabularies that match the specified criteria. If no criteria are specified, all custom vocabularies are returned.</p> <p>To get detailed information about a specific custom vocabulary, use the operation.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListVocabulariesRequest} listVocabulariesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listVocabulariesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListVocabulariesResponse}
     */
    listVocabularies(xAmzTarget, listVocabulariesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listVocabulariesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listVocabularies");
      }
      // verify the required parameter 'listVocabulariesRequest' is set
      if (listVocabulariesRequest === undefined || listVocabulariesRequest === null) {
        throw new Error("Missing the required parameter 'listVocabulariesRequest' when calling listVocabularies");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListVocabulariesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.ListVocabularies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVocabularyFilters operation.
     * @callback module:api/DefaultApi~listVocabularyFiltersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListVocabularyFiltersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Provides a list of custom vocabulary filters that match the specified criteria. If no criteria are specified, all custom vocabularies are returned.</p> <p>To get detailed information about a specific custom vocabulary filter, use the operation.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListVocabularyFiltersRequest} listVocabularyFiltersRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listVocabularyFiltersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListVocabularyFiltersResponse}
     */
    listVocabularyFilters(xAmzTarget, listVocabularyFiltersRequest, opts, callback) {
      opts = opts || {};
      let postBody = listVocabularyFiltersRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listVocabularyFilters");
      }
      // verify the required parameter 'listVocabularyFiltersRequest' is set
      if (listVocabularyFiltersRequest === undefined || listVocabularyFiltersRequest === null) {
        throw new Error("Missing the required parameter 'listVocabularyFiltersRequest' when calling listVocabularyFilters");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListVocabularyFiltersResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.ListVocabularyFilters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startCallAnalyticsJob operation.
     * @callback module:api/DefaultApi~startCallAnalyticsJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartCallAnalyticsJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Transcribes the audio from a customer service call and applies any additional Request Parameters you choose to include in your request.</p> <p>In addition to many standard transcription features, Call Analytics provides you with call characteristics, call summarization, speaker sentiment, and optional redaction of your text transcript and your audio file. You can also apply custom categories to flag specified conditions. To learn more about these features and insights, refer to <a href=\"https://docs.aws.amazon.com/transcribe/latest/dg/call-analytics.html\">Analyzing call center audio with Call Analytics</a>.</p> <p>If you want to apply categories to your Call Analytics job, you must create them before submitting your job request. Categories cannot be retroactively applied to a job. To create a new category, use the operation. To learn more about Call Analytics categories, see <a href=\"https://docs.aws.amazon.com/transcribe/latest/dg/tca-categories-batch.html\">Creating categories for post-call transcriptions</a> and <a href=\"https://docs.aws.amazon.com/transcribe/latest/dg/tca-categories-stream.html\">Creating categories for real-time transcriptions</a>.</p> <p>To make a <code>StartCallAnalyticsJob</code> request, you must first upload your media file into an Amazon S3 bucket; you can then specify the Amazon S3 location of the file using the <code>Media</code> parameter.</p> <p>Note that job queuing is enabled by default for Call Analytics jobs.</p> <p>You must include the following parameters in your <code>StartCallAnalyticsJob</code> request:</p> <ul> <li> <p> <code>region</code>: The Amazon Web Services Region where you are making your request. For a list of Amazon Web Services Regions supported with Amazon Transcribe, refer to <a href=\"https://docs.aws.amazon.com/general/latest/gr/transcribe.html\">Amazon Transcribe endpoints and quotas</a>.</p> </li> <li> <p> <code>CallAnalyticsJobName</code>: A custom name that you create for your transcription job that's unique within your Amazon Web Services account.</p> </li> <li> <p> <code>DataAccessRoleArn</code>: The Amazon Resource Name (ARN) of an IAM role that has permissions to access the Amazon S3 bucket that contains your input files.</p> </li> <li> <p> <code>Media</code> (<code>MediaFileUri</code> or <code>RedactedMediaFileUri</code>): The Amazon S3 location of your media file.</p> </li> </ul> <note> <p>With Call Analytics, you can redact the audio contained in your media file by including <code>RedactedMediaFileUri</code>, instead of <code>MediaFileUri</code>, to specify the location of your input audio. If you choose to redact your audio, you can find your redacted media at the location specified in the <code>RedactedMediaFileUri</code> field of your response.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartCallAnalyticsJobRequest} startCallAnalyticsJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startCallAnalyticsJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartCallAnalyticsJobResponse}
     */
    startCallAnalyticsJob(xAmzTarget, startCallAnalyticsJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = startCallAnalyticsJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startCallAnalyticsJob");
      }
      // verify the required parameter 'startCallAnalyticsJobRequest' is set
      if (startCallAnalyticsJobRequest === undefined || startCallAnalyticsJobRequest === null) {
        throw new Error("Missing the required parameter 'startCallAnalyticsJobRequest' when calling startCallAnalyticsJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartCallAnalyticsJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.StartCallAnalyticsJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startMedicalTranscriptionJob operation.
     * @callback module:api/DefaultApi~startMedicalTranscriptionJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartMedicalTranscriptionJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Transcribes the audio from a medical dictation or conversation and applies any additional Request Parameters you choose to include in your request.</p> <p>In addition to many standard transcription features, Amazon Transcribe Medical provides you with a robust medical vocabulary and, optionally, content identification, which adds flags to personal health information (PHI). To learn more about these features, refer to <a href=\"https://docs.aws.amazon.com/transcribe/latest/dg/how-it-works-med.html\">How Amazon Transcribe Medical works</a>.</p> <p>To make a <code>StartMedicalTranscriptionJob</code> request, you must first upload your media file into an Amazon S3 bucket; you can then specify the S3 location of the file using the <code>Media</code> parameter.</p> <p>You must include the following parameters in your <code>StartMedicalTranscriptionJob</code> request:</p> <ul> <li> <p> <code>region</code>: The Amazon Web Services Region where you are making your request. For a list of Amazon Web Services Regions supported with Amazon Transcribe, refer to <a href=\"https://docs.aws.amazon.com/general/latest/gr/transcribe.html\">Amazon Transcribe endpoints and quotas</a>.</p> </li> <li> <p> <code>MedicalTranscriptionJobName</code>: A custom name you create for your transcription job that is unique within your Amazon Web Services account.</p> </li> <li> <p> <code>Media</code> (<code>MediaFileUri</code>): The Amazon S3 location of your media file.</p> </li> <li> <p> <code>LanguageCode</code>: This must be <code>en-US</code>.</p> </li> <li> <p> <code>OutputBucketName</code>: The Amazon S3 bucket where you want your transcript stored. If you want your output stored in a sub-folder of this bucket, you must also include <code>OutputKey</code>.</p> </li> <li> <p> <code>Specialty</code>: This must be <code>PRIMARYCARE</code>.</p> </li> <li> <p> <code>Type</code>: Choose whether your audio is a conversation or a dictation.</p> </li> </ul>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartMedicalTranscriptionJobRequest} startMedicalTranscriptionJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startMedicalTranscriptionJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartMedicalTranscriptionJobResponse}
     */
    startMedicalTranscriptionJob(xAmzTarget, startMedicalTranscriptionJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = startMedicalTranscriptionJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startMedicalTranscriptionJob");
      }
      // verify the required parameter 'startMedicalTranscriptionJobRequest' is set
      if (startMedicalTranscriptionJobRequest === undefined || startMedicalTranscriptionJobRequest === null) {
        throw new Error("Missing the required parameter 'startMedicalTranscriptionJobRequest' when calling startMedicalTranscriptionJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartMedicalTranscriptionJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.StartMedicalTranscriptionJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startTranscriptionJob operation.
     * @callback module:api/DefaultApi~startTranscriptionJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartTranscriptionJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Transcribes the audio from a media file and applies any additional Request Parameters you choose to include in your request.</p> <p>To make a <code>StartTranscriptionJob</code> request, you must first upload your media file into an Amazon S3 bucket; you can then specify the Amazon S3 location of the file using the <code>Media</code> parameter.</p> <p>You must include the following parameters in your <code>StartTranscriptionJob</code> request:</p> <ul> <li> <p> <code>region</code>: The Amazon Web Services Region where you are making your request. For a list of Amazon Web Services Regions supported with Amazon Transcribe, refer to <a href=\"https://docs.aws.amazon.com/general/latest/gr/transcribe.html\">Amazon Transcribe endpoints and quotas</a>.</p> </li> <li> <p> <code>TranscriptionJobName</code>: A custom name you create for your transcription job that is unique within your Amazon Web Services account.</p> </li> <li> <p> <code>Media</code> (<code>MediaFileUri</code>): The Amazon S3 location of your media file.</p> </li> <li> <p>One of <code>LanguageCode</code>, <code>IdentifyLanguage</code>, or <code>IdentifyMultipleLanguages</code>: If you know the language of your media file, specify it using the <code>LanguageCode</code> parameter; you can find all valid language codes in the <a href=\"https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html\">Supported languages</a> table. If you don't know the languages spoken in your media, use either <code>IdentifyLanguage</code> or <code>IdentifyMultipleLanguages</code> and let Amazon Transcribe identify the languages for you.</p> </li> </ul>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartTranscriptionJobRequest} startTranscriptionJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startTranscriptionJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartTranscriptionJobResponse}
     */
    startTranscriptionJob(xAmzTarget, startTranscriptionJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = startTranscriptionJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startTranscriptionJob");
      }
      // verify the required parameter 'startTranscriptionJobRequest' is set
      if (startTranscriptionJobRequest === undefined || startTranscriptionJobRequest === null) {
        throw new Error("Missing the required parameter 'startTranscriptionJobRequest' when calling startTranscriptionJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartTranscriptionJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.StartTranscriptionJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Adds one or more custom tags, each in the form of a key:value pair, to the specified resource.</p> <p>To learn more about using tags with Amazon Transcribe, refer to <a href=\"https://docs.aws.amazon.com/transcribe/latest/dg/tagging.html\">Tagging resources</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(xAmzTarget, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.TagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Removes the specified tags from the specified Amazon Transcribe resource.</p> <p>If you include <code>UntagResource</code> in your request, you must also include <code>ResourceArn</code> and <code>TagKeys</code>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UntagResourceRequest} untagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(xAmzTarget, untagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = untagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling untagResource");
      }
      // verify the required parameter 'untagResourceRequest' is set
      if (untagResourceRequest === undefined || untagResourceRequest === null) {
        throw new Error("Missing the required parameter 'untagResourceRequest' when calling untagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.UntagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCallAnalyticsCategory operation.
     * @callback module:api/DefaultApi~updateCallAnalyticsCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateCallAnalyticsCategoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates the specified Call Analytics category with new rules. Note that the <code>UpdateCallAnalyticsCategory</code> operation overwrites all existing rules contained in the specified category. You cannot append additional rules onto an existing category.</p> <p>To create a new category, see .</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateCallAnalyticsCategoryRequest} updateCallAnalyticsCategoryRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateCallAnalyticsCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateCallAnalyticsCategoryResponse}
     */
    updateCallAnalyticsCategory(xAmzTarget, updateCallAnalyticsCategoryRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateCallAnalyticsCategoryRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateCallAnalyticsCategory");
      }
      // verify the required parameter 'updateCallAnalyticsCategoryRequest' is set
      if (updateCallAnalyticsCategoryRequest === undefined || updateCallAnalyticsCategoryRequest === null) {
        throw new Error("Missing the required parameter 'updateCallAnalyticsCategoryRequest' when calling updateCallAnalyticsCategory");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateCallAnalyticsCategoryResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.UpdateCallAnalyticsCategory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMedicalVocabulary operation.
     * @callback module:api/DefaultApi~updateMedicalVocabularyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateMedicalVocabularyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing custom medical vocabulary with new values. This operation overwrites all existing information with your new values; you cannot append new terms onto an existing custom vocabulary.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateMedicalVocabularyRequest} updateMedicalVocabularyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateMedicalVocabularyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateMedicalVocabularyResponse}
     */
    updateMedicalVocabulary(xAmzTarget, updateMedicalVocabularyRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateMedicalVocabularyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateMedicalVocabulary");
      }
      // verify the required parameter 'updateMedicalVocabularyRequest' is set
      if (updateMedicalVocabularyRequest === undefined || updateMedicalVocabularyRequest === null) {
        throw new Error("Missing the required parameter 'updateMedicalVocabularyRequest' when calling updateMedicalVocabulary");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateMedicalVocabularyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.UpdateMedicalVocabulary', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVocabulary operation.
     * @callback module:api/DefaultApi~updateVocabularyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateVocabularyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing custom vocabulary with new values. This operation overwrites all existing information with your new values; you cannot append new terms onto an existing custom vocabulary.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateVocabularyRequest} updateVocabularyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateVocabularyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateVocabularyResponse}
     */
    updateVocabulary(xAmzTarget, updateVocabularyRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateVocabularyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateVocabulary");
      }
      // verify the required parameter 'updateVocabularyRequest' is set
      if (updateVocabularyRequest === undefined || updateVocabularyRequest === null) {
        throw new Error("Missing the required parameter 'updateVocabularyRequest' when calling updateVocabulary");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateVocabularyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.UpdateVocabulary', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVocabularyFilter operation.
     * @callback module:api/DefaultApi~updateVocabularyFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateVocabularyFilterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing custom vocabulary filter with a new list of words. The new list you provide overwrites all previous entries; you cannot append new terms onto an existing custom vocabulary filter.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateVocabularyFilterRequest} updateVocabularyFilterRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateVocabularyFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateVocabularyFilterResponse}
     */
    updateVocabularyFilter(xAmzTarget, updateVocabularyFilterRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateVocabularyFilterRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateVocabularyFilter");
      }
      // verify the required parameter 'updateVocabularyFilterRequest' is set
      if (updateVocabularyFilterRequest === undefined || updateVocabularyFilterRequest === null) {
        throw new Error("Missing the required parameter 'updateVocabularyFilterRequest' when calling updateVocabularyFilter");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateVocabularyFilterResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Transcribe.UpdateVocabularyFilter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
