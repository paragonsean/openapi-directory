# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rule_interruption_filter import RuleInterruptionFilter
from openapi_server.models.rule_non_talk_time_filter import RuleNonTalkTimeFilter
from openapi_server.models.rule_sentiment_filter import RuleSentimentFilter
from openapi_server.models.rule_transcript_filter import RuleTranscriptFilter
from openapi_server import util


class Rule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, non_talk_time_filter: RuleNonTalkTimeFilter=None, interruption_filter: RuleInterruptionFilter=None, transcript_filter: RuleTranscriptFilter=None, sentiment_filter: RuleSentimentFilter=None):
        """Rule - a model defined in OpenAPI

        :param non_talk_time_filter: The non_talk_time_filter of this Rule.
        :param interruption_filter: The interruption_filter of this Rule.
        :param transcript_filter: The transcript_filter of this Rule.
        :param sentiment_filter: The sentiment_filter of this Rule.
        """
        self.openapi_types = {
            'non_talk_time_filter': RuleNonTalkTimeFilter,
            'interruption_filter': RuleInterruptionFilter,
            'transcript_filter': RuleTranscriptFilter,
            'sentiment_filter': RuleSentimentFilter
        }

        self.attribute_map = {
            'non_talk_time_filter': 'NonTalkTimeFilter',
            'interruption_filter': 'InterruptionFilter',
            'transcript_filter': 'TranscriptFilter',
            'sentiment_filter': 'SentimentFilter'
        }

        self._non_talk_time_filter = non_talk_time_filter
        self._interruption_filter = interruption_filter
        self._transcript_filter = transcript_filter
        self._sentiment_filter = sentiment_filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Rule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Rule of this Rule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def non_talk_time_filter(self):
        """Gets the non_talk_time_filter of this Rule.


        :return: The non_talk_time_filter of this Rule.
        :rtype: RuleNonTalkTimeFilter
        """
        return self._non_talk_time_filter

    @non_talk_time_filter.setter
    def non_talk_time_filter(self, non_talk_time_filter):
        """Sets the non_talk_time_filter of this Rule.


        :param non_talk_time_filter: The non_talk_time_filter of this Rule.
        :type non_talk_time_filter: RuleNonTalkTimeFilter
        """

        self._non_talk_time_filter = non_talk_time_filter

    @property
    def interruption_filter(self):
        """Gets the interruption_filter of this Rule.


        :return: The interruption_filter of this Rule.
        :rtype: RuleInterruptionFilter
        """
        return self._interruption_filter

    @interruption_filter.setter
    def interruption_filter(self, interruption_filter):
        """Sets the interruption_filter of this Rule.


        :param interruption_filter: The interruption_filter of this Rule.
        :type interruption_filter: RuleInterruptionFilter
        """

        self._interruption_filter = interruption_filter

    @property
    def transcript_filter(self):
        """Gets the transcript_filter of this Rule.


        :return: The transcript_filter of this Rule.
        :rtype: RuleTranscriptFilter
        """
        return self._transcript_filter

    @transcript_filter.setter
    def transcript_filter(self, transcript_filter):
        """Sets the transcript_filter of this Rule.


        :param transcript_filter: The transcript_filter of this Rule.
        :type transcript_filter: RuleTranscriptFilter
        """

        self._transcript_filter = transcript_filter

    @property
    def sentiment_filter(self):
        """Gets the sentiment_filter of this Rule.


        :return: The sentiment_filter of this Rule.
        :rtype: RuleSentimentFilter
        """
        return self._sentiment_filter

    @sentiment_filter.setter
    def sentiment_filter(self, sentiment_filter):
        """Sets the sentiment_filter of this Rule.


        :param sentiment_filter: The sentiment_filter of this Rule.
        :type sentiment_filter: RuleSentimentFilter
        """

        self._sentiment_filter = sentiment_filter
