# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.language_code import LanguageCode
from openapi_server import util


class CreateVocabularyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, vocabulary_name: str=None, language_code: LanguageCode=None, phrases: List=None, vocabulary_file_uri: str=None, tags: List=None, data_access_role_arn: str=None):
        """CreateVocabularyRequest - a model defined in OpenAPI

        :param vocabulary_name: The vocabulary_name of this CreateVocabularyRequest.
        :param language_code: The language_code of this CreateVocabularyRequest.
        :param phrases: The phrases of this CreateVocabularyRequest.
        :param vocabulary_file_uri: The vocabulary_file_uri of this CreateVocabularyRequest.
        :param tags: The tags of this CreateVocabularyRequest.
        :param data_access_role_arn: The data_access_role_arn of this CreateVocabularyRequest.
        """
        self.openapi_types = {
            'vocabulary_name': str,
            'language_code': LanguageCode,
            'phrases': List,
            'vocabulary_file_uri': str,
            'tags': List,
            'data_access_role_arn': str
        }

        self.attribute_map = {
            'vocabulary_name': 'VocabularyName',
            'language_code': 'LanguageCode',
            'phrases': 'Phrases',
            'vocabulary_file_uri': 'VocabularyFileUri',
            'tags': 'Tags',
            'data_access_role_arn': 'DataAccessRoleArn'
        }

        self._vocabulary_name = vocabulary_name
        self._language_code = language_code
        self._phrases = phrases
        self._vocabulary_file_uri = vocabulary_file_uri
        self._tags = tags
        self._data_access_role_arn = data_access_role_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateVocabularyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateVocabularyRequest of this CreateVocabularyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def vocabulary_name(self):
        """Gets the vocabulary_name of this CreateVocabularyRequest.


        :return: The vocabulary_name of this CreateVocabularyRequest.
        :rtype: str
        """
        return self._vocabulary_name

    @vocabulary_name.setter
    def vocabulary_name(self, vocabulary_name):
        """Sets the vocabulary_name of this CreateVocabularyRequest.


        :param vocabulary_name: The vocabulary_name of this CreateVocabularyRequest.
        :type vocabulary_name: str
        """
        if vocabulary_name is None:
            raise ValueError("Invalid value for `vocabulary_name`, must not be `None`")

        self._vocabulary_name = vocabulary_name

    @property
    def language_code(self):
        """Gets the language_code of this CreateVocabularyRequest.


        :return: The language_code of this CreateVocabularyRequest.
        :rtype: LanguageCode
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this CreateVocabularyRequest.


        :param language_code: The language_code of this CreateVocabularyRequest.
        :type language_code: LanguageCode
        """
        if language_code is None:
            raise ValueError("Invalid value for `language_code`, must not be `None`")

        self._language_code = language_code

    @property
    def phrases(self):
        """Gets the phrases of this CreateVocabularyRequest.


        :return: The phrases of this CreateVocabularyRequest.
        :rtype: List
        """
        return self._phrases

    @phrases.setter
    def phrases(self, phrases):
        """Sets the phrases of this CreateVocabularyRequest.


        :param phrases: The phrases of this CreateVocabularyRequest.
        :type phrases: List
        """

        self._phrases = phrases

    @property
    def vocabulary_file_uri(self):
        """Gets the vocabulary_file_uri of this CreateVocabularyRequest.


        :return: The vocabulary_file_uri of this CreateVocabularyRequest.
        :rtype: str
        """
        return self._vocabulary_file_uri

    @vocabulary_file_uri.setter
    def vocabulary_file_uri(self, vocabulary_file_uri):
        """Sets the vocabulary_file_uri of this CreateVocabularyRequest.


        :param vocabulary_file_uri: The vocabulary_file_uri of this CreateVocabularyRequest.
        :type vocabulary_file_uri: str
        """

        self._vocabulary_file_uri = vocabulary_file_uri

    @property
    def tags(self):
        """Gets the tags of this CreateVocabularyRequest.


        :return: The tags of this CreateVocabularyRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateVocabularyRequest.


        :param tags: The tags of this CreateVocabularyRequest.
        :type tags: List
        """

        self._tags = tags

    @property
    def data_access_role_arn(self):
        """Gets the data_access_role_arn of this CreateVocabularyRequest.


        :return: The data_access_role_arn of this CreateVocabularyRequest.
        :rtype: str
        """
        return self._data_access_role_arn

    @data_access_role_arn.setter
    def data_access_role_arn(self, data_access_role_arn):
        """Sets the data_access_role_arn of this CreateVocabularyRequest.


        :param data_access_role_arn: The data_access_role_arn of this CreateVocabularyRequest.
        :type data_access_role_arn: str
        """

        self._data_access_role_arn = data_access_role_arn
