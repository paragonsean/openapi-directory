# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SentimentFilterRelativeTimeRange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, start_percentage: int=None, end_percentage: int=None, first: int=None, last: int=None):
        """SentimentFilterRelativeTimeRange - a model defined in OpenAPI

        :param start_percentage: The start_percentage of this SentimentFilterRelativeTimeRange.
        :param end_percentage: The end_percentage of this SentimentFilterRelativeTimeRange.
        :param first: The first of this SentimentFilterRelativeTimeRange.
        :param last: The last of this SentimentFilterRelativeTimeRange.
        """
        self.openapi_types = {
            'start_percentage': int,
            'end_percentage': int,
            'first': int,
            'last': int
        }

        self.attribute_map = {
            'start_percentage': 'StartPercentage',
            'end_percentage': 'EndPercentage',
            'first': 'First',
            'last': 'Last'
        }

        self._start_percentage = start_percentage
        self._end_percentage = end_percentage
        self._first = first
        self._last = last

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SentimentFilterRelativeTimeRange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SentimentFilter_RelativeTimeRange of this SentimentFilterRelativeTimeRange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def start_percentage(self):
        """Gets the start_percentage of this SentimentFilterRelativeTimeRange.


        :return: The start_percentage of this SentimentFilterRelativeTimeRange.
        :rtype: int
        """
        return self._start_percentage

    @start_percentage.setter
    def start_percentage(self, start_percentage):
        """Sets the start_percentage of this SentimentFilterRelativeTimeRange.


        :param start_percentage: The start_percentage of this SentimentFilterRelativeTimeRange.
        :type start_percentage: int
        """

        self._start_percentage = start_percentage

    @property
    def end_percentage(self):
        """Gets the end_percentage of this SentimentFilterRelativeTimeRange.


        :return: The end_percentage of this SentimentFilterRelativeTimeRange.
        :rtype: int
        """
        return self._end_percentage

    @end_percentage.setter
    def end_percentage(self, end_percentage):
        """Sets the end_percentage of this SentimentFilterRelativeTimeRange.


        :param end_percentage: The end_percentage of this SentimentFilterRelativeTimeRange.
        :type end_percentage: int
        """

        self._end_percentage = end_percentage

    @property
    def first(self):
        """Gets the first of this SentimentFilterRelativeTimeRange.


        :return: The first of this SentimentFilterRelativeTimeRange.
        :rtype: int
        """
        return self._first

    @first.setter
    def first(self, first):
        """Sets the first of this SentimentFilterRelativeTimeRange.


        :param first: The first of this SentimentFilterRelativeTimeRange.
        :type first: int
        """

        self._first = first

    @property
    def last(self):
        """Gets the last of this SentimentFilterRelativeTimeRange.


        :return: The last of this SentimentFilterRelativeTimeRange.
        :rtype: int
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this SentimentFilterRelativeTimeRange.


        :param last: The last of this SentimentFilterRelativeTimeRange.
        :type last: int
        """

        self._last = last
