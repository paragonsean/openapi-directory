# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.language_code import LanguageCode
from openapi_server.models.media_format import MediaFormat
from openapi_server.models.start_transcription_job_request_content_redaction import StartTranscriptionJobRequestContentRedaction
from openapi_server.models.start_transcription_job_request_job_execution_settings import StartTranscriptionJobRequestJobExecutionSettings
from openapi_server.models.start_transcription_job_request_media import StartTranscriptionJobRequestMedia
from openapi_server.models.start_transcription_job_request_model_settings import StartTranscriptionJobRequestModelSettings
from openapi_server.models.start_transcription_job_request_settings import StartTranscriptionJobRequestSettings
from openapi_server.models.start_transcription_job_request_subtitles import StartTranscriptionJobRequestSubtitles
from openapi_server import util


class StartTranscriptionJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, transcription_job_name: str=None, language_code: LanguageCode=None, media_sample_rate_hertz: int=None, media_format: MediaFormat=None, media: StartTranscriptionJobRequestMedia=None, output_bucket_name: str=None, output_key: str=None, output_encryption_kms_key_id: str=None, kms_encryption_context: Dict=None, settings: StartTranscriptionJobRequestSettings=None, model_settings: StartTranscriptionJobRequestModelSettings=None, job_execution_settings: StartTranscriptionJobRequestJobExecutionSettings=None, content_redaction: StartTranscriptionJobRequestContentRedaction=None, identify_language: bool=None, identify_multiple_languages: bool=None, language_options: List=None, subtitles: StartTranscriptionJobRequestSubtitles=None, tags: List=None, language_id_settings: Dict=None, toxicity_detection: List=None):
        """StartTranscriptionJobRequest - a model defined in OpenAPI

        :param transcription_job_name: The transcription_job_name of this StartTranscriptionJobRequest.
        :param language_code: The language_code of this StartTranscriptionJobRequest.
        :param media_sample_rate_hertz: The media_sample_rate_hertz of this StartTranscriptionJobRequest.
        :param media_format: The media_format of this StartTranscriptionJobRequest.
        :param media: The media of this StartTranscriptionJobRequest.
        :param output_bucket_name: The output_bucket_name of this StartTranscriptionJobRequest.
        :param output_key: The output_key of this StartTranscriptionJobRequest.
        :param output_encryption_kms_key_id: The output_encryption_kms_key_id of this StartTranscriptionJobRequest.
        :param kms_encryption_context: The kms_encryption_context of this StartTranscriptionJobRequest.
        :param settings: The settings of this StartTranscriptionJobRequest.
        :param model_settings: The model_settings of this StartTranscriptionJobRequest.
        :param job_execution_settings: The job_execution_settings of this StartTranscriptionJobRequest.
        :param content_redaction: The content_redaction of this StartTranscriptionJobRequest.
        :param identify_language: The identify_language of this StartTranscriptionJobRequest.
        :param identify_multiple_languages: The identify_multiple_languages of this StartTranscriptionJobRequest.
        :param language_options: The language_options of this StartTranscriptionJobRequest.
        :param subtitles: The subtitles of this StartTranscriptionJobRequest.
        :param tags: The tags of this StartTranscriptionJobRequest.
        :param language_id_settings: The language_id_settings of this StartTranscriptionJobRequest.
        :param toxicity_detection: The toxicity_detection of this StartTranscriptionJobRequest.
        """
        self.openapi_types = {
            'transcription_job_name': str,
            'language_code': LanguageCode,
            'media_sample_rate_hertz': int,
            'media_format': MediaFormat,
            'media': StartTranscriptionJobRequestMedia,
            'output_bucket_name': str,
            'output_key': str,
            'output_encryption_kms_key_id': str,
            'kms_encryption_context': Dict,
            'settings': StartTranscriptionJobRequestSettings,
            'model_settings': StartTranscriptionJobRequestModelSettings,
            'job_execution_settings': StartTranscriptionJobRequestJobExecutionSettings,
            'content_redaction': StartTranscriptionJobRequestContentRedaction,
            'identify_language': bool,
            'identify_multiple_languages': bool,
            'language_options': List,
            'subtitles': StartTranscriptionJobRequestSubtitles,
            'tags': List,
            'language_id_settings': Dict,
            'toxicity_detection': List
        }

        self.attribute_map = {
            'transcription_job_name': 'TranscriptionJobName',
            'language_code': 'LanguageCode',
            'media_sample_rate_hertz': 'MediaSampleRateHertz',
            'media_format': 'MediaFormat',
            'media': 'Media',
            'output_bucket_name': 'OutputBucketName',
            'output_key': 'OutputKey',
            'output_encryption_kms_key_id': 'OutputEncryptionKMSKeyId',
            'kms_encryption_context': 'KMSEncryptionContext',
            'settings': 'Settings',
            'model_settings': 'ModelSettings',
            'job_execution_settings': 'JobExecutionSettings',
            'content_redaction': 'ContentRedaction',
            'identify_language': 'IdentifyLanguage',
            'identify_multiple_languages': 'IdentifyMultipleLanguages',
            'language_options': 'LanguageOptions',
            'subtitles': 'Subtitles',
            'tags': 'Tags',
            'language_id_settings': 'LanguageIdSettings',
            'toxicity_detection': 'ToxicityDetection'
        }

        self._transcription_job_name = transcription_job_name
        self._language_code = language_code
        self._media_sample_rate_hertz = media_sample_rate_hertz
        self._media_format = media_format
        self._media = media
        self._output_bucket_name = output_bucket_name
        self._output_key = output_key
        self._output_encryption_kms_key_id = output_encryption_kms_key_id
        self._kms_encryption_context = kms_encryption_context
        self._settings = settings
        self._model_settings = model_settings
        self._job_execution_settings = job_execution_settings
        self._content_redaction = content_redaction
        self._identify_language = identify_language
        self._identify_multiple_languages = identify_multiple_languages
        self._language_options = language_options
        self._subtitles = subtitles
        self._tags = tags
        self._language_id_settings = language_id_settings
        self._toxicity_detection = toxicity_detection

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartTranscriptionJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartTranscriptionJobRequest of this StartTranscriptionJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transcription_job_name(self):
        """Gets the transcription_job_name of this StartTranscriptionJobRequest.


        :return: The transcription_job_name of this StartTranscriptionJobRequest.
        :rtype: str
        """
        return self._transcription_job_name

    @transcription_job_name.setter
    def transcription_job_name(self, transcription_job_name):
        """Sets the transcription_job_name of this StartTranscriptionJobRequest.


        :param transcription_job_name: The transcription_job_name of this StartTranscriptionJobRequest.
        :type transcription_job_name: str
        """
        if transcription_job_name is None:
            raise ValueError("Invalid value for `transcription_job_name`, must not be `None`")

        self._transcription_job_name = transcription_job_name

    @property
    def language_code(self):
        """Gets the language_code of this StartTranscriptionJobRequest.


        :return: The language_code of this StartTranscriptionJobRequest.
        :rtype: LanguageCode
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this StartTranscriptionJobRequest.


        :param language_code: The language_code of this StartTranscriptionJobRequest.
        :type language_code: LanguageCode
        """

        self._language_code = language_code

    @property
    def media_sample_rate_hertz(self):
        """Gets the media_sample_rate_hertz of this StartTranscriptionJobRequest.


        :return: The media_sample_rate_hertz of this StartTranscriptionJobRequest.
        :rtype: int
        """
        return self._media_sample_rate_hertz

    @media_sample_rate_hertz.setter
    def media_sample_rate_hertz(self, media_sample_rate_hertz):
        """Sets the media_sample_rate_hertz of this StartTranscriptionJobRequest.


        :param media_sample_rate_hertz: The media_sample_rate_hertz of this StartTranscriptionJobRequest.
        :type media_sample_rate_hertz: int
        """

        self._media_sample_rate_hertz = media_sample_rate_hertz

    @property
    def media_format(self):
        """Gets the media_format of this StartTranscriptionJobRequest.


        :return: The media_format of this StartTranscriptionJobRequest.
        :rtype: MediaFormat
        """
        return self._media_format

    @media_format.setter
    def media_format(self, media_format):
        """Sets the media_format of this StartTranscriptionJobRequest.


        :param media_format: The media_format of this StartTranscriptionJobRequest.
        :type media_format: MediaFormat
        """

        self._media_format = media_format

    @property
    def media(self):
        """Gets the media of this StartTranscriptionJobRequest.


        :return: The media of this StartTranscriptionJobRequest.
        :rtype: StartTranscriptionJobRequestMedia
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this StartTranscriptionJobRequest.


        :param media: The media of this StartTranscriptionJobRequest.
        :type media: StartTranscriptionJobRequestMedia
        """
        if media is None:
            raise ValueError("Invalid value for `media`, must not be `None`")

        self._media = media

    @property
    def output_bucket_name(self):
        """Gets the output_bucket_name of this StartTranscriptionJobRequest.


        :return: The output_bucket_name of this StartTranscriptionJobRequest.
        :rtype: str
        """
        return self._output_bucket_name

    @output_bucket_name.setter
    def output_bucket_name(self, output_bucket_name):
        """Sets the output_bucket_name of this StartTranscriptionJobRequest.


        :param output_bucket_name: The output_bucket_name of this StartTranscriptionJobRequest.
        :type output_bucket_name: str
        """

        self._output_bucket_name = output_bucket_name

    @property
    def output_key(self):
        """Gets the output_key of this StartTranscriptionJobRequest.


        :return: The output_key of this StartTranscriptionJobRequest.
        :rtype: str
        """
        return self._output_key

    @output_key.setter
    def output_key(self, output_key):
        """Sets the output_key of this StartTranscriptionJobRequest.


        :param output_key: The output_key of this StartTranscriptionJobRequest.
        :type output_key: str
        """

        self._output_key = output_key

    @property
    def output_encryption_kms_key_id(self):
        """Gets the output_encryption_kms_key_id of this StartTranscriptionJobRequest.


        :return: The output_encryption_kms_key_id of this StartTranscriptionJobRequest.
        :rtype: str
        """
        return self._output_encryption_kms_key_id

    @output_encryption_kms_key_id.setter
    def output_encryption_kms_key_id(self, output_encryption_kms_key_id):
        """Sets the output_encryption_kms_key_id of this StartTranscriptionJobRequest.


        :param output_encryption_kms_key_id: The output_encryption_kms_key_id of this StartTranscriptionJobRequest.
        :type output_encryption_kms_key_id: str
        """

        self._output_encryption_kms_key_id = output_encryption_kms_key_id

    @property
    def kms_encryption_context(self):
        """Gets the kms_encryption_context of this StartTranscriptionJobRequest.


        :return: The kms_encryption_context of this StartTranscriptionJobRequest.
        :rtype: Dict
        """
        return self._kms_encryption_context

    @kms_encryption_context.setter
    def kms_encryption_context(self, kms_encryption_context):
        """Sets the kms_encryption_context of this StartTranscriptionJobRequest.


        :param kms_encryption_context: The kms_encryption_context of this StartTranscriptionJobRequest.
        :type kms_encryption_context: Dict
        """

        self._kms_encryption_context = kms_encryption_context

    @property
    def settings(self):
        """Gets the settings of this StartTranscriptionJobRequest.


        :return: The settings of this StartTranscriptionJobRequest.
        :rtype: StartTranscriptionJobRequestSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this StartTranscriptionJobRequest.


        :param settings: The settings of this StartTranscriptionJobRequest.
        :type settings: StartTranscriptionJobRequestSettings
        """

        self._settings = settings

    @property
    def model_settings(self):
        """Gets the model_settings of this StartTranscriptionJobRequest.


        :return: The model_settings of this StartTranscriptionJobRequest.
        :rtype: StartTranscriptionJobRequestModelSettings
        """
        return self._model_settings

    @model_settings.setter
    def model_settings(self, model_settings):
        """Sets the model_settings of this StartTranscriptionJobRequest.


        :param model_settings: The model_settings of this StartTranscriptionJobRequest.
        :type model_settings: StartTranscriptionJobRequestModelSettings
        """

        self._model_settings = model_settings

    @property
    def job_execution_settings(self):
        """Gets the job_execution_settings of this StartTranscriptionJobRequest.


        :return: The job_execution_settings of this StartTranscriptionJobRequest.
        :rtype: StartTranscriptionJobRequestJobExecutionSettings
        """
        return self._job_execution_settings

    @job_execution_settings.setter
    def job_execution_settings(self, job_execution_settings):
        """Sets the job_execution_settings of this StartTranscriptionJobRequest.


        :param job_execution_settings: The job_execution_settings of this StartTranscriptionJobRequest.
        :type job_execution_settings: StartTranscriptionJobRequestJobExecutionSettings
        """

        self._job_execution_settings = job_execution_settings

    @property
    def content_redaction(self):
        """Gets the content_redaction of this StartTranscriptionJobRequest.


        :return: The content_redaction of this StartTranscriptionJobRequest.
        :rtype: StartTranscriptionJobRequestContentRedaction
        """
        return self._content_redaction

    @content_redaction.setter
    def content_redaction(self, content_redaction):
        """Sets the content_redaction of this StartTranscriptionJobRequest.


        :param content_redaction: The content_redaction of this StartTranscriptionJobRequest.
        :type content_redaction: StartTranscriptionJobRequestContentRedaction
        """

        self._content_redaction = content_redaction

    @property
    def identify_language(self):
        """Gets the identify_language of this StartTranscriptionJobRequest.


        :return: The identify_language of this StartTranscriptionJobRequest.
        :rtype: bool
        """
        return self._identify_language

    @identify_language.setter
    def identify_language(self, identify_language):
        """Sets the identify_language of this StartTranscriptionJobRequest.


        :param identify_language: The identify_language of this StartTranscriptionJobRequest.
        :type identify_language: bool
        """

        self._identify_language = identify_language

    @property
    def identify_multiple_languages(self):
        """Gets the identify_multiple_languages of this StartTranscriptionJobRequest.


        :return: The identify_multiple_languages of this StartTranscriptionJobRequest.
        :rtype: bool
        """
        return self._identify_multiple_languages

    @identify_multiple_languages.setter
    def identify_multiple_languages(self, identify_multiple_languages):
        """Sets the identify_multiple_languages of this StartTranscriptionJobRequest.


        :param identify_multiple_languages: The identify_multiple_languages of this StartTranscriptionJobRequest.
        :type identify_multiple_languages: bool
        """

        self._identify_multiple_languages = identify_multiple_languages

    @property
    def language_options(self):
        """Gets the language_options of this StartTranscriptionJobRequest.


        :return: The language_options of this StartTranscriptionJobRequest.
        :rtype: List
        """
        return self._language_options

    @language_options.setter
    def language_options(self, language_options):
        """Sets the language_options of this StartTranscriptionJobRequest.


        :param language_options: The language_options of this StartTranscriptionJobRequest.
        :type language_options: List
        """

        self._language_options = language_options

    @property
    def subtitles(self):
        """Gets the subtitles of this StartTranscriptionJobRequest.


        :return: The subtitles of this StartTranscriptionJobRequest.
        :rtype: StartTranscriptionJobRequestSubtitles
        """
        return self._subtitles

    @subtitles.setter
    def subtitles(self, subtitles):
        """Sets the subtitles of this StartTranscriptionJobRequest.


        :param subtitles: The subtitles of this StartTranscriptionJobRequest.
        :type subtitles: StartTranscriptionJobRequestSubtitles
        """

        self._subtitles = subtitles

    @property
    def tags(self):
        """Gets the tags of this StartTranscriptionJobRequest.


        :return: The tags of this StartTranscriptionJobRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this StartTranscriptionJobRequest.


        :param tags: The tags of this StartTranscriptionJobRequest.
        :type tags: List
        """

        self._tags = tags

    @property
    def language_id_settings(self):
        """Gets the language_id_settings of this StartTranscriptionJobRequest.


        :return: The language_id_settings of this StartTranscriptionJobRequest.
        :rtype: Dict
        """
        return self._language_id_settings

    @language_id_settings.setter
    def language_id_settings(self, language_id_settings):
        """Sets the language_id_settings of this StartTranscriptionJobRequest.


        :param language_id_settings: The language_id_settings of this StartTranscriptionJobRequest.
        :type language_id_settings: Dict
        """

        self._language_id_settings = language_id_settings

    @property
    def toxicity_detection(self):
        """Gets the toxicity_detection of this StartTranscriptionJobRequest.


        :return: The toxicity_detection of this StartTranscriptionJobRequest.
        :rtype: List
        """
        return self._toxicity_detection

    @toxicity_detection.setter
    def toxicity_detection(self, toxicity_detection):
        """Sets the toxicity_detection of this StartTranscriptionJobRequest.


        :param toxicity_detection: The toxicity_detection of this StartTranscriptionJobRequest.
        :type toxicity_detection: List
        """

        self._toxicity_detection = toxicity_detection
