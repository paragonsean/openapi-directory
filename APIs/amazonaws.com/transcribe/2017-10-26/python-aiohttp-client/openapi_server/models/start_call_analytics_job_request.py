# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.start_call_analytics_job_request_media import StartCallAnalyticsJobRequestMedia
from openapi_server.models.start_call_analytics_job_request_settings import StartCallAnalyticsJobRequestSettings
from openapi_server import util


class StartCallAnalyticsJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, call_analytics_job_name: str=None, media: StartCallAnalyticsJobRequestMedia=None, output_location: str=None, output_encryption_kms_key_id: str=None, data_access_role_arn: str=None, settings: StartCallAnalyticsJobRequestSettings=None, channel_definitions: List=None):
        """StartCallAnalyticsJobRequest - a model defined in OpenAPI

        :param call_analytics_job_name: The call_analytics_job_name of this StartCallAnalyticsJobRequest.
        :param media: The media of this StartCallAnalyticsJobRequest.
        :param output_location: The output_location of this StartCallAnalyticsJobRequest.
        :param output_encryption_kms_key_id: The output_encryption_kms_key_id of this StartCallAnalyticsJobRequest.
        :param data_access_role_arn: The data_access_role_arn of this StartCallAnalyticsJobRequest.
        :param settings: The settings of this StartCallAnalyticsJobRequest.
        :param channel_definitions: The channel_definitions of this StartCallAnalyticsJobRequest.
        """
        self.openapi_types = {
            'call_analytics_job_name': str,
            'media': StartCallAnalyticsJobRequestMedia,
            'output_location': str,
            'output_encryption_kms_key_id': str,
            'data_access_role_arn': str,
            'settings': StartCallAnalyticsJobRequestSettings,
            'channel_definitions': List
        }

        self.attribute_map = {
            'call_analytics_job_name': 'CallAnalyticsJobName',
            'media': 'Media',
            'output_location': 'OutputLocation',
            'output_encryption_kms_key_id': 'OutputEncryptionKMSKeyId',
            'data_access_role_arn': 'DataAccessRoleArn',
            'settings': 'Settings',
            'channel_definitions': 'ChannelDefinitions'
        }

        self._call_analytics_job_name = call_analytics_job_name
        self._media = media
        self._output_location = output_location
        self._output_encryption_kms_key_id = output_encryption_kms_key_id
        self._data_access_role_arn = data_access_role_arn
        self._settings = settings
        self._channel_definitions = channel_definitions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartCallAnalyticsJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartCallAnalyticsJobRequest of this StartCallAnalyticsJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def call_analytics_job_name(self):
        """Gets the call_analytics_job_name of this StartCallAnalyticsJobRequest.


        :return: The call_analytics_job_name of this StartCallAnalyticsJobRequest.
        :rtype: str
        """
        return self._call_analytics_job_name

    @call_analytics_job_name.setter
    def call_analytics_job_name(self, call_analytics_job_name):
        """Sets the call_analytics_job_name of this StartCallAnalyticsJobRequest.


        :param call_analytics_job_name: The call_analytics_job_name of this StartCallAnalyticsJobRequest.
        :type call_analytics_job_name: str
        """
        if call_analytics_job_name is None:
            raise ValueError("Invalid value for `call_analytics_job_name`, must not be `None`")

        self._call_analytics_job_name = call_analytics_job_name

    @property
    def media(self):
        """Gets the media of this StartCallAnalyticsJobRequest.


        :return: The media of this StartCallAnalyticsJobRequest.
        :rtype: StartCallAnalyticsJobRequestMedia
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this StartCallAnalyticsJobRequest.


        :param media: The media of this StartCallAnalyticsJobRequest.
        :type media: StartCallAnalyticsJobRequestMedia
        """
        if media is None:
            raise ValueError("Invalid value for `media`, must not be `None`")

        self._media = media

    @property
    def output_location(self):
        """Gets the output_location of this StartCallAnalyticsJobRequest.


        :return: The output_location of this StartCallAnalyticsJobRequest.
        :rtype: str
        """
        return self._output_location

    @output_location.setter
    def output_location(self, output_location):
        """Sets the output_location of this StartCallAnalyticsJobRequest.


        :param output_location: The output_location of this StartCallAnalyticsJobRequest.
        :type output_location: str
        """

        self._output_location = output_location

    @property
    def output_encryption_kms_key_id(self):
        """Gets the output_encryption_kms_key_id of this StartCallAnalyticsJobRequest.


        :return: The output_encryption_kms_key_id of this StartCallAnalyticsJobRequest.
        :rtype: str
        """
        return self._output_encryption_kms_key_id

    @output_encryption_kms_key_id.setter
    def output_encryption_kms_key_id(self, output_encryption_kms_key_id):
        """Sets the output_encryption_kms_key_id of this StartCallAnalyticsJobRequest.


        :param output_encryption_kms_key_id: The output_encryption_kms_key_id of this StartCallAnalyticsJobRequest.
        :type output_encryption_kms_key_id: str
        """

        self._output_encryption_kms_key_id = output_encryption_kms_key_id

    @property
    def data_access_role_arn(self):
        """Gets the data_access_role_arn of this StartCallAnalyticsJobRequest.


        :return: The data_access_role_arn of this StartCallAnalyticsJobRequest.
        :rtype: str
        """
        return self._data_access_role_arn

    @data_access_role_arn.setter
    def data_access_role_arn(self, data_access_role_arn):
        """Sets the data_access_role_arn of this StartCallAnalyticsJobRequest.


        :param data_access_role_arn: The data_access_role_arn of this StartCallAnalyticsJobRequest.
        :type data_access_role_arn: str
        """

        self._data_access_role_arn = data_access_role_arn

    @property
    def settings(self):
        """Gets the settings of this StartCallAnalyticsJobRequest.


        :return: The settings of this StartCallAnalyticsJobRequest.
        :rtype: StartCallAnalyticsJobRequestSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this StartCallAnalyticsJobRequest.


        :param settings: The settings of this StartCallAnalyticsJobRequest.
        :type settings: StartCallAnalyticsJobRequestSettings
        """

        self._settings = settings

    @property
    def channel_definitions(self):
        """Gets the channel_definitions of this StartCallAnalyticsJobRequest.


        :return: The channel_definitions of this StartCallAnalyticsJobRequest.
        :rtype: List
        """
        return self._channel_definitions

    @channel_definitions.setter
    def channel_definitions(self, channel_definitions):
        """Sets the channel_definitions of this StartCallAnalyticsJobRequest.


        :param channel_definitions: The channel_definitions of this StartCallAnalyticsJobRequest.
        :type channel_definitions: List
        """

        self._channel_definitions = channel_definitions
