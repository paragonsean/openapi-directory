# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.language_code import LanguageCode
from openapi_server.models.media import Media
from openapi_server.models.media_format import MediaFormat
from openapi_server.models.medical_content_identification_type import MedicalContentIdentificationType
from openapi_server.models.specialty import Specialty
from openapi_server.models.start_medical_transcription_job_request_settings import StartMedicalTranscriptionJobRequestSettings
from openapi_server.models.type import Type
from openapi_server import util


class StartMedicalTranscriptionJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, medical_transcription_job_name: str=None, language_code: LanguageCode=None, media_sample_rate_hertz: int=None, media_format: MediaFormat=None, media: Media=None, output_bucket_name: str=None, output_key: str=None, output_encryption_kms_key_id: str=None, kms_encryption_context: Dict=None, settings: StartMedicalTranscriptionJobRequestSettings=None, content_identification_type: MedicalContentIdentificationType=None, specialty: Specialty=None, type: Type=None, tags: List=None):
        """StartMedicalTranscriptionJobRequest - a model defined in OpenAPI

        :param medical_transcription_job_name: The medical_transcription_job_name of this StartMedicalTranscriptionJobRequest.
        :param language_code: The language_code of this StartMedicalTranscriptionJobRequest.
        :param media_sample_rate_hertz: The media_sample_rate_hertz of this StartMedicalTranscriptionJobRequest.
        :param media_format: The media_format of this StartMedicalTranscriptionJobRequest.
        :param media: The media of this StartMedicalTranscriptionJobRequest.
        :param output_bucket_name: The output_bucket_name of this StartMedicalTranscriptionJobRequest.
        :param output_key: The output_key of this StartMedicalTranscriptionJobRequest.
        :param output_encryption_kms_key_id: The output_encryption_kms_key_id of this StartMedicalTranscriptionJobRequest.
        :param kms_encryption_context: The kms_encryption_context of this StartMedicalTranscriptionJobRequest.
        :param settings: The settings of this StartMedicalTranscriptionJobRequest.
        :param content_identification_type: The content_identification_type of this StartMedicalTranscriptionJobRequest.
        :param specialty: The specialty of this StartMedicalTranscriptionJobRequest.
        :param type: The type of this StartMedicalTranscriptionJobRequest.
        :param tags: The tags of this StartMedicalTranscriptionJobRequest.
        """
        self.openapi_types = {
            'medical_transcription_job_name': str,
            'language_code': LanguageCode,
            'media_sample_rate_hertz': int,
            'media_format': MediaFormat,
            'media': Media,
            'output_bucket_name': str,
            'output_key': str,
            'output_encryption_kms_key_id': str,
            'kms_encryption_context': Dict,
            'settings': StartMedicalTranscriptionJobRequestSettings,
            'content_identification_type': MedicalContentIdentificationType,
            'specialty': Specialty,
            'type': Type,
            'tags': List
        }

        self.attribute_map = {
            'medical_transcription_job_name': 'MedicalTranscriptionJobName',
            'language_code': 'LanguageCode',
            'media_sample_rate_hertz': 'MediaSampleRateHertz',
            'media_format': 'MediaFormat',
            'media': 'Media',
            'output_bucket_name': 'OutputBucketName',
            'output_key': 'OutputKey',
            'output_encryption_kms_key_id': 'OutputEncryptionKMSKeyId',
            'kms_encryption_context': 'KMSEncryptionContext',
            'settings': 'Settings',
            'content_identification_type': 'ContentIdentificationType',
            'specialty': 'Specialty',
            'type': 'Type',
            'tags': 'Tags'
        }

        self._medical_transcription_job_name = medical_transcription_job_name
        self._language_code = language_code
        self._media_sample_rate_hertz = media_sample_rate_hertz
        self._media_format = media_format
        self._media = media
        self._output_bucket_name = output_bucket_name
        self._output_key = output_key
        self._output_encryption_kms_key_id = output_encryption_kms_key_id
        self._kms_encryption_context = kms_encryption_context
        self._settings = settings
        self._content_identification_type = content_identification_type
        self._specialty = specialty
        self._type = type
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartMedicalTranscriptionJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartMedicalTranscriptionJobRequest of this StartMedicalTranscriptionJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def medical_transcription_job_name(self):
        """Gets the medical_transcription_job_name of this StartMedicalTranscriptionJobRequest.


        :return: The medical_transcription_job_name of this StartMedicalTranscriptionJobRequest.
        :rtype: str
        """
        return self._medical_transcription_job_name

    @medical_transcription_job_name.setter
    def medical_transcription_job_name(self, medical_transcription_job_name):
        """Sets the medical_transcription_job_name of this StartMedicalTranscriptionJobRequest.


        :param medical_transcription_job_name: The medical_transcription_job_name of this StartMedicalTranscriptionJobRequest.
        :type medical_transcription_job_name: str
        """
        if medical_transcription_job_name is None:
            raise ValueError("Invalid value for `medical_transcription_job_name`, must not be `None`")

        self._medical_transcription_job_name = medical_transcription_job_name

    @property
    def language_code(self):
        """Gets the language_code of this StartMedicalTranscriptionJobRequest.


        :return: The language_code of this StartMedicalTranscriptionJobRequest.
        :rtype: LanguageCode
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this StartMedicalTranscriptionJobRequest.


        :param language_code: The language_code of this StartMedicalTranscriptionJobRequest.
        :type language_code: LanguageCode
        """
        if language_code is None:
            raise ValueError("Invalid value for `language_code`, must not be `None`")

        self._language_code = language_code

    @property
    def media_sample_rate_hertz(self):
        """Gets the media_sample_rate_hertz of this StartMedicalTranscriptionJobRequest.


        :return: The media_sample_rate_hertz of this StartMedicalTranscriptionJobRequest.
        :rtype: int
        """
        return self._media_sample_rate_hertz

    @media_sample_rate_hertz.setter
    def media_sample_rate_hertz(self, media_sample_rate_hertz):
        """Sets the media_sample_rate_hertz of this StartMedicalTranscriptionJobRequest.


        :param media_sample_rate_hertz: The media_sample_rate_hertz of this StartMedicalTranscriptionJobRequest.
        :type media_sample_rate_hertz: int
        """

        self._media_sample_rate_hertz = media_sample_rate_hertz

    @property
    def media_format(self):
        """Gets the media_format of this StartMedicalTranscriptionJobRequest.


        :return: The media_format of this StartMedicalTranscriptionJobRequest.
        :rtype: MediaFormat
        """
        return self._media_format

    @media_format.setter
    def media_format(self, media_format):
        """Sets the media_format of this StartMedicalTranscriptionJobRequest.


        :param media_format: The media_format of this StartMedicalTranscriptionJobRequest.
        :type media_format: MediaFormat
        """

        self._media_format = media_format

    @property
    def media(self):
        """Gets the media of this StartMedicalTranscriptionJobRequest.


        :return: The media of this StartMedicalTranscriptionJobRequest.
        :rtype: Media
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this StartMedicalTranscriptionJobRequest.


        :param media: The media of this StartMedicalTranscriptionJobRequest.
        :type media: Media
        """
        if media is None:
            raise ValueError("Invalid value for `media`, must not be `None`")

        self._media = media

    @property
    def output_bucket_name(self):
        """Gets the output_bucket_name of this StartMedicalTranscriptionJobRequest.


        :return: The output_bucket_name of this StartMedicalTranscriptionJobRequest.
        :rtype: str
        """
        return self._output_bucket_name

    @output_bucket_name.setter
    def output_bucket_name(self, output_bucket_name):
        """Sets the output_bucket_name of this StartMedicalTranscriptionJobRequest.


        :param output_bucket_name: The output_bucket_name of this StartMedicalTranscriptionJobRequest.
        :type output_bucket_name: str
        """
        if output_bucket_name is None:
            raise ValueError("Invalid value for `output_bucket_name`, must not be `None`")

        self._output_bucket_name = output_bucket_name

    @property
    def output_key(self):
        """Gets the output_key of this StartMedicalTranscriptionJobRequest.


        :return: The output_key of this StartMedicalTranscriptionJobRequest.
        :rtype: str
        """
        return self._output_key

    @output_key.setter
    def output_key(self, output_key):
        """Sets the output_key of this StartMedicalTranscriptionJobRequest.


        :param output_key: The output_key of this StartMedicalTranscriptionJobRequest.
        :type output_key: str
        """

        self._output_key = output_key

    @property
    def output_encryption_kms_key_id(self):
        """Gets the output_encryption_kms_key_id of this StartMedicalTranscriptionJobRequest.


        :return: The output_encryption_kms_key_id of this StartMedicalTranscriptionJobRequest.
        :rtype: str
        """
        return self._output_encryption_kms_key_id

    @output_encryption_kms_key_id.setter
    def output_encryption_kms_key_id(self, output_encryption_kms_key_id):
        """Sets the output_encryption_kms_key_id of this StartMedicalTranscriptionJobRequest.


        :param output_encryption_kms_key_id: The output_encryption_kms_key_id of this StartMedicalTranscriptionJobRequest.
        :type output_encryption_kms_key_id: str
        """

        self._output_encryption_kms_key_id = output_encryption_kms_key_id

    @property
    def kms_encryption_context(self):
        """Gets the kms_encryption_context of this StartMedicalTranscriptionJobRequest.


        :return: The kms_encryption_context of this StartMedicalTranscriptionJobRequest.
        :rtype: Dict
        """
        return self._kms_encryption_context

    @kms_encryption_context.setter
    def kms_encryption_context(self, kms_encryption_context):
        """Sets the kms_encryption_context of this StartMedicalTranscriptionJobRequest.


        :param kms_encryption_context: The kms_encryption_context of this StartMedicalTranscriptionJobRequest.
        :type kms_encryption_context: Dict
        """

        self._kms_encryption_context = kms_encryption_context

    @property
    def settings(self):
        """Gets the settings of this StartMedicalTranscriptionJobRequest.


        :return: The settings of this StartMedicalTranscriptionJobRequest.
        :rtype: StartMedicalTranscriptionJobRequestSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this StartMedicalTranscriptionJobRequest.


        :param settings: The settings of this StartMedicalTranscriptionJobRequest.
        :type settings: StartMedicalTranscriptionJobRequestSettings
        """

        self._settings = settings

    @property
    def content_identification_type(self):
        """Gets the content_identification_type of this StartMedicalTranscriptionJobRequest.


        :return: The content_identification_type of this StartMedicalTranscriptionJobRequest.
        :rtype: MedicalContentIdentificationType
        """
        return self._content_identification_type

    @content_identification_type.setter
    def content_identification_type(self, content_identification_type):
        """Sets the content_identification_type of this StartMedicalTranscriptionJobRequest.


        :param content_identification_type: The content_identification_type of this StartMedicalTranscriptionJobRequest.
        :type content_identification_type: MedicalContentIdentificationType
        """

        self._content_identification_type = content_identification_type

    @property
    def specialty(self):
        """Gets the specialty of this StartMedicalTranscriptionJobRequest.


        :return: The specialty of this StartMedicalTranscriptionJobRequest.
        :rtype: Specialty
        """
        return self._specialty

    @specialty.setter
    def specialty(self, specialty):
        """Sets the specialty of this StartMedicalTranscriptionJobRequest.


        :param specialty: The specialty of this StartMedicalTranscriptionJobRequest.
        :type specialty: Specialty
        """
        if specialty is None:
            raise ValueError("Invalid value for `specialty`, must not be `None`")

        self._specialty = specialty

    @property
    def type(self):
        """Gets the type of this StartMedicalTranscriptionJobRequest.


        :return: The type of this StartMedicalTranscriptionJobRequest.
        :rtype: Type
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StartMedicalTranscriptionJobRequest.


        :param type: The type of this StartMedicalTranscriptionJobRequest.
        :type type: Type
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def tags(self):
        """Gets the tags of this StartMedicalTranscriptionJobRequest.


        :return: The tags of this StartMedicalTranscriptionJobRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this StartMedicalTranscriptionJobRequest.


        :param tags: The tags of this StartMedicalTranscriptionJobRequest.
        :type tags: List
        """

        self._tags = tags
