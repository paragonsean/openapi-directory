# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.redaction_output import RedactionOutput
from openapi_server.models.redaction_type import RedactionType
from openapi_server import util


class TranscriptionJobContentRedaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, redaction_type: RedactionType=None, redaction_output: RedactionOutput=None, pii_entity_types: List=None):
        """TranscriptionJobContentRedaction - a model defined in OpenAPI

        :param redaction_type: The redaction_type of this TranscriptionJobContentRedaction.
        :param redaction_output: The redaction_output of this TranscriptionJobContentRedaction.
        :param pii_entity_types: The pii_entity_types of this TranscriptionJobContentRedaction.
        """
        self.openapi_types = {
            'redaction_type': RedactionType,
            'redaction_output': RedactionOutput,
            'pii_entity_types': List
        }

        self.attribute_map = {
            'redaction_type': 'RedactionType',
            'redaction_output': 'RedactionOutput',
            'pii_entity_types': 'PiiEntityTypes'
        }

        self._redaction_type = redaction_type
        self._redaction_output = redaction_output
        self._pii_entity_types = pii_entity_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TranscriptionJobContentRedaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TranscriptionJob_ContentRedaction of this TranscriptionJobContentRedaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def redaction_type(self):
        """Gets the redaction_type of this TranscriptionJobContentRedaction.


        :return: The redaction_type of this TranscriptionJobContentRedaction.
        :rtype: RedactionType
        """
        return self._redaction_type

    @redaction_type.setter
    def redaction_type(self, redaction_type):
        """Sets the redaction_type of this TranscriptionJobContentRedaction.


        :param redaction_type: The redaction_type of this TranscriptionJobContentRedaction.
        :type redaction_type: RedactionType
        """
        if redaction_type is None:
            raise ValueError("Invalid value for `redaction_type`, must not be `None`")

        self._redaction_type = redaction_type

    @property
    def redaction_output(self):
        """Gets the redaction_output of this TranscriptionJobContentRedaction.


        :return: The redaction_output of this TranscriptionJobContentRedaction.
        :rtype: RedactionOutput
        """
        return self._redaction_output

    @redaction_output.setter
    def redaction_output(self, redaction_output):
        """Sets the redaction_output of this TranscriptionJobContentRedaction.


        :param redaction_output: The redaction_output of this TranscriptionJobContentRedaction.
        :type redaction_output: RedactionOutput
        """
        if redaction_output is None:
            raise ValueError("Invalid value for `redaction_output`, must not be `None`")

        self._redaction_output = redaction_output

    @property
    def pii_entity_types(self):
        """Gets the pii_entity_types of this TranscriptionJobContentRedaction.


        :return: The pii_entity_types of this TranscriptionJobContentRedaction.
        :rtype: List
        """
        return self._pii_entity_types

    @pii_entity_types.setter
    def pii_entity_types(self, pii_entity_types):
        """Sets the pii_entity_types of this TranscriptionJobContentRedaction.


        :param pii_entity_types: The pii_entity_types of this TranscriptionJobContentRedaction.
        :type pii_entity_types: List
        """

        self._pii_entity_types = pii_entity_types
