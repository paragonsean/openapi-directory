# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.language_code import LanguageCode
from openapi_server import util


class UpdateMedicalVocabularyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, vocabulary_name: str=None, language_code: LanguageCode=None, vocabulary_file_uri: str=None):
        """UpdateMedicalVocabularyRequest - a model defined in OpenAPI

        :param vocabulary_name: The vocabulary_name of this UpdateMedicalVocabularyRequest.
        :param language_code: The language_code of this UpdateMedicalVocabularyRequest.
        :param vocabulary_file_uri: The vocabulary_file_uri of this UpdateMedicalVocabularyRequest.
        """
        self.openapi_types = {
            'vocabulary_name': str,
            'language_code': LanguageCode,
            'vocabulary_file_uri': str
        }

        self.attribute_map = {
            'vocabulary_name': 'VocabularyName',
            'language_code': 'LanguageCode',
            'vocabulary_file_uri': 'VocabularyFileUri'
        }

        self._vocabulary_name = vocabulary_name
        self._language_code = language_code
        self._vocabulary_file_uri = vocabulary_file_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateMedicalVocabularyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateMedicalVocabularyRequest of this UpdateMedicalVocabularyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def vocabulary_name(self):
        """Gets the vocabulary_name of this UpdateMedicalVocabularyRequest.


        :return: The vocabulary_name of this UpdateMedicalVocabularyRequest.
        :rtype: str
        """
        return self._vocabulary_name

    @vocabulary_name.setter
    def vocabulary_name(self, vocabulary_name):
        """Sets the vocabulary_name of this UpdateMedicalVocabularyRequest.


        :param vocabulary_name: The vocabulary_name of this UpdateMedicalVocabularyRequest.
        :type vocabulary_name: str
        """
        if vocabulary_name is None:
            raise ValueError("Invalid value for `vocabulary_name`, must not be `None`")

        self._vocabulary_name = vocabulary_name

    @property
    def language_code(self):
        """Gets the language_code of this UpdateMedicalVocabularyRequest.


        :return: The language_code of this UpdateMedicalVocabularyRequest.
        :rtype: LanguageCode
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this UpdateMedicalVocabularyRequest.


        :param language_code: The language_code of this UpdateMedicalVocabularyRequest.
        :type language_code: LanguageCode
        """
        if language_code is None:
            raise ValueError("Invalid value for `language_code`, must not be `None`")

        self._language_code = language_code

    @property
    def vocabulary_file_uri(self):
        """Gets the vocabulary_file_uri of this UpdateMedicalVocabularyRequest.


        :return: The vocabulary_file_uri of this UpdateMedicalVocabularyRequest.
        :rtype: str
        """
        return self._vocabulary_file_uri

    @vocabulary_file_uri.setter
    def vocabulary_file_uri(self, vocabulary_file_uri):
        """Sets the vocabulary_file_uri of this UpdateMedicalVocabularyRequest.


        :param vocabulary_file_uri: The vocabulary_file_uri of this UpdateMedicalVocabularyRequest.
        :type vocabulary_file_uri: str
        """
        if vocabulary_file_uri is None:
            raise ValueError("Invalid value for `vocabulary_file_uri`, must not be `None`")

        self._vocabulary_file_uri = vocabulary_file_uri
