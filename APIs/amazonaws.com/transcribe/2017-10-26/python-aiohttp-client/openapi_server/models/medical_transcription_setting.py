# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MedicalTranscriptionSetting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, show_speaker_labels: bool=None, max_speaker_labels: int=None, channel_identification: bool=None, show_alternatives: bool=None, max_alternatives: int=None, vocabulary_name: str=None):
        """MedicalTranscriptionSetting - a model defined in OpenAPI

        :param show_speaker_labels: The show_speaker_labels of this MedicalTranscriptionSetting.
        :param max_speaker_labels: The max_speaker_labels of this MedicalTranscriptionSetting.
        :param channel_identification: The channel_identification of this MedicalTranscriptionSetting.
        :param show_alternatives: The show_alternatives of this MedicalTranscriptionSetting.
        :param max_alternatives: The max_alternatives of this MedicalTranscriptionSetting.
        :param vocabulary_name: The vocabulary_name of this MedicalTranscriptionSetting.
        """
        self.openapi_types = {
            'show_speaker_labels': bool,
            'max_speaker_labels': int,
            'channel_identification': bool,
            'show_alternatives': bool,
            'max_alternatives': int,
            'vocabulary_name': str
        }

        self.attribute_map = {
            'show_speaker_labels': 'ShowSpeakerLabels',
            'max_speaker_labels': 'MaxSpeakerLabels',
            'channel_identification': 'ChannelIdentification',
            'show_alternatives': 'ShowAlternatives',
            'max_alternatives': 'MaxAlternatives',
            'vocabulary_name': 'VocabularyName'
        }

        self._show_speaker_labels = show_speaker_labels
        self._max_speaker_labels = max_speaker_labels
        self._channel_identification = channel_identification
        self._show_alternatives = show_alternatives
        self._max_alternatives = max_alternatives
        self._vocabulary_name = vocabulary_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MedicalTranscriptionSetting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MedicalTranscriptionSetting of this MedicalTranscriptionSetting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def show_speaker_labels(self):
        """Gets the show_speaker_labels of this MedicalTranscriptionSetting.


        :return: The show_speaker_labels of this MedicalTranscriptionSetting.
        :rtype: bool
        """
        return self._show_speaker_labels

    @show_speaker_labels.setter
    def show_speaker_labels(self, show_speaker_labels):
        """Sets the show_speaker_labels of this MedicalTranscriptionSetting.


        :param show_speaker_labels: The show_speaker_labels of this MedicalTranscriptionSetting.
        :type show_speaker_labels: bool
        """

        self._show_speaker_labels = show_speaker_labels

    @property
    def max_speaker_labels(self):
        """Gets the max_speaker_labels of this MedicalTranscriptionSetting.


        :return: The max_speaker_labels of this MedicalTranscriptionSetting.
        :rtype: int
        """
        return self._max_speaker_labels

    @max_speaker_labels.setter
    def max_speaker_labels(self, max_speaker_labels):
        """Sets the max_speaker_labels of this MedicalTranscriptionSetting.


        :param max_speaker_labels: The max_speaker_labels of this MedicalTranscriptionSetting.
        :type max_speaker_labels: int
        """

        self._max_speaker_labels = max_speaker_labels

    @property
    def channel_identification(self):
        """Gets the channel_identification of this MedicalTranscriptionSetting.


        :return: The channel_identification of this MedicalTranscriptionSetting.
        :rtype: bool
        """
        return self._channel_identification

    @channel_identification.setter
    def channel_identification(self, channel_identification):
        """Sets the channel_identification of this MedicalTranscriptionSetting.


        :param channel_identification: The channel_identification of this MedicalTranscriptionSetting.
        :type channel_identification: bool
        """

        self._channel_identification = channel_identification

    @property
    def show_alternatives(self):
        """Gets the show_alternatives of this MedicalTranscriptionSetting.


        :return: The show_alternatives of this MedicalTranscriptionSetting.
        :rtype: bool
        """
        return self._show_alternatives

    @show_alternatives.setter
    def show_alternatives(self, show_alternatives):
        """Sets the show_alternatives of this MedicalTranscriptionSetting.


        :param show_alternatives: The show_alternatives of this MedicalTranscriptionSetting.
        :type show_alternatives: bool
        """

        self._show_alternatives = show_alternatives

    @property
    def max_alternatives(self):
        """Gets the max_alternatives of this MedicalTranscriptionSetting.


        :return: The max_alternatives of this MedicalTranscriptionSetting.
        :rtype: int
        """
        return self._max_alternatives

    @max_alternatives.setter
    def max_alternatives(self, max_alternatives):
        """Sets the max_alternatives of this MedicalTranscriptionSetting.


        :param max_alternatives: The max_alternatives of this MedicalTranscriptionSetting.
        :type max_alternatives: int
        """

        self._max_alternatives = max_alternatives

    @property
    def vocabulary_name(self):
        """Gets the vocabulary_name of this MedicalTranscriptionSetting.


        :return: The vocabulary_name of this MedicalTranscriptionSetting.
        :rtype: str
        """
        return self._vocabulary_name

    @vocabulary_name.setter
    def vocabulary_name(self, vocabulary_name):
        """Sets the vocabulary_name of this MedicalTranscriptionSetting.


        :param vocabulary_name: The vocabulary_name of this MedicalTranscriptionSetting.
        :type vocabulary_name: str
        """

        self._vocabulary_name = vocabulary_name
