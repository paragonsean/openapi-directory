# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.non_talk_time_filter_absolute_time_range import NonTalkTimeFilterAbsoluteTimeRange
from openapi_server.models.non_talk_time_filter_relative_time_range import NonTalkTimeFilterRelativeTimeRange
from openapi_server import util


class NonTalkTimeFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, threshold: int=None, absolute_time_range: NonTalkTimeFilterAbsoluteTimeRange=None, relative_time_range: NonTalkTimeFilterRelativeTimeRange=None, negate: bool=None):
        """NonTalkTimeFilter - a model defined in OpenAPI

        :param threshold: The threshold of this NonTalkTimeFilter.
        :param absolute_time_range: The absolute_time_range of this NonTalkTimeFilter.
        :param relative_time_range: The relative_time_range of this NonTalkTimeFilter.
        :param negate: The negate of this NonTalkTimeFilter.
        """
        self.openapi_types = {
            'threshold': int,
            'absolute_time_range': NonTalkTimeFilterAbsoluteTimeRange,
            'relative_time_range': NonTalkTimeFilterRelativeTimeRange,
            'negate': bool
        }

        self.attribute_map = {
            'threshold': 'Threshold',
            'absolute_time_range': 'AbsoluteTimeRange',
            'relative_time_range': 'RelativeTimeRange',
            'negate': 'Negate'
        }

        self._threshold = threshold
        self._absolute_time_range = absolute_time_range
        self._relative_time_range = relative_time_range
        self._negate = negate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NonTalkTimeFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NonTalkTimeFilter of this NonTalkTimeFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def threshold(self):
        """Gets the threshold of this NonTalkTimeFilter.


        :return: The threshold of this NonTalkTimeFilter.
        :rtype: int
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this NonTalkTimeFilter.


        :param threshold: The threshold of this NonTalkTimeFilter.
        :type threshold: int
        """

        self._threshold = threshold

    @property
    def absolute_time_range(self):
        """Gets the absolute_time_range of this NonTalkTimeFilter.


        :return: The absolute_time_range of this NonTalkTimeFilter.
        :rtype: NonTalkTimeFilterAbsoluteTimeRange
        """
        return self._absolute_time_range

    @absolute_time_range.setter
    def absolute_time_range(self, absolute_time_range):
        """Sets the absolute_time_range of this NonTalkTimeFilter.


        :param absolute_time_range: The absolute_time_range of this NonTalkTimeFilter.
        :type absolute_time_range: NonTalkTimeFilterAbsoluteTimeRange
        """

        self._absolute_time_range = absolute_time_range

    @property
    def relative_time_range(self):
        """Gets the relative_time_range of this NonTalkTimeFilter.


        :return: The relative_time_range of this NonTalkTimeFilter.
        :rtype: NonTalkTimeFilterRelativeTimeRange
        """
        return self._relative_time_range

    @relative_time_range.setter
    def relative_time_range(self, relative_time_range):
        """Sets the relative_time_range of this NonTalkTimeFilter.


        :param relative_time_range: The relative_time_range of this NonTalkTimeFilter.
        :type relative_time_range: NonTalkTimeFilterRelativeTimeRange
        """

        self._relative_time_range = relative_time_range

    @property
    def negate(self):
        """Gets the negate of this NonTalkTimeFilter.


        :return: The negate of this NonTalkTimeFilter.
        :rtype: bool
        """
        return self._negate

    @negate.setter
    def negate(self, negate):
        """Sets the negate of this NonTalkTimeFilter.


        :param negate: The negate of this NonTalkTimeFilter.
        :type negate: bool
        """

        self._negate = negate
