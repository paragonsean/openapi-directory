# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.vocabulary_state import VocabularyState
from openapi_server import util


class ListMedicalVocabulariesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_token: str=None, max_results: int=None, state_equals: VocabularyState=None, name_contains: str=None):
        """ListMedicalVocabulariesRequest - a model defined in OpenAPI

        :param next_token: The next_token of this ListMedicalVocabulariesRequest.
        :param max_results: The max_results of this ListMedicalVocabulariesRequest.
        :param state_equals: The state_equals of this ListMedicalVocabulariesRequest.
        :param name_contains: The name_contains of this ListMedicalVocabulariesRequest.
        """
        self.openapi_types = {
            'next_token': str,
            'max_results': int,
            'state_equals': VocabularyState,
            'name_contains': str
        }

        self.attribute_map = {
            'next_token': 'NextToken',
            'max_results': 'MaxResults',
            'state_equals': 'StateEquals',
            'name_contains': 'NameContains'
        }

        self._next_token = next_token
        self._max_results = max_results
        self._state_equals = state_equals
        self._name_contains = name_contains

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListMedicalVocabulariesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListMedicalVocabulariesRequest of this ListMedicalVocabulariesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_token(self):
        """Gets the next_token of this ListMedicalVocabulariesRequest.


        :return: The next_token of this ListMedicalVocabulariesRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListMedicalVocabulariesRequest.


        :param next_token: The next_token of this ListMedicalVocabulariesRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this ListMedicalVocabulariesRequest.


        :return: The max_results of this ListMedicalVocabulariesRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListMedicalVocabulariesRequest.


        :param max_results: The max_results of this ListMedicalVocabulariesRequest.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def state_equals(self):
        """Gets the state_equals of this ListMedicalVocabulariesRequest.


        :return: The state_equals of this ListMedicalVocabulariesRequest.
        :rtype: VocabularyState
        """
        return self._state_equals

    @state_equals.setter
    def state_equals(self, state_equals):
        """Sets the state_equals of this ListMedicalVocabulariesRequest.


        :param state_equals: The state_equals of this ListMedicalVocabulariesRequest.
        :type state_equals: VocabularyState
        """

        self._state_equals = state_equals

    @property
    def name_contains(self):
        """Gets the name_contains of this ListMedicalVocabulariesRequest.


        :return: The name_contains of this ListMedicalVocabulariesRequest.
        :rtype: str
        """
        return self._name_contains

    @name_contains.setter
    def name_contains(self, name_contains):
        """Sets the name_contains of this ListMedicalVocabulariesRequest.


        :param name_contains: The name_contains of this ListMedicalVocabulariesRequest.
        :type name_contains: str
        """

        self._name_contains = name_contains
