# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.input_type import InputType
from openapi_server import util


class UpdateCallAnalyticsCategoryRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_name: str=None, rules: List=None, input_type: InputType=None):
        """UpdateCallAnalyticsCategoryRequest - a model defined in OpenAPI

        :param category_name: The category_name of this UpdateCallAnalyticsCategoryRequest.
        :param rules: The rules of this UpdateCallAnalyticsCategoryRequest.
        :param input_type: The input_type of this UpdateCallAnalyticsCategoryRequest.
        """
        self.openapi_types = {
            'category_name': str,
            'rules': List,
            'input_type': InputType
        }

        self.attribute_map = {
            'category_name': 'CategoryName',
            'rules': 'Rules',
            'input_type': 'InputType'
        }

        self._category_name = category_name
        self._rules = rules
        self._input_type = input_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateCallAnalyticsCategoryRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateCallAnalyticsCategoryRequest of this UpdateCallAnalyticsCategoryRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_name(self):
        """Gets the category_name of this UpdateCallAnalyticsCategoryRequest.


        :return: The category_name of this UpdateCallAnalyticsCategoryRequest.
        :rtype: str
        """
        return self._category_name

    @category_name.setter
    def category_name(self, category_name):
        """Sets the category_name of this UpdateCallAnalyticsCategoryRequest.


        :param category_name: The category_name of this UpdateCallAnalyticsCategoryRequest.
        :type category_name: str
        """
        if category_name is None:
            raise ValueError("Invalid value for `category_name`, must not be `None`")

        self._category_name = category_name

    @property
    def rules(self):
        """Gets the rules of this UpdateCallAnalyticsCategoryRequest.


        :return: The rules of this UpdateCallAnalyticsCategoryRequest.
        :rtype: List
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this UpdateCallAnalyticsCategoryRequest.


        :param rules: The rules of this UpdateCallAnalyticsCategoryRequest.
        :type rules: List
        """
        if rules is None:
            raise ValueError("Invalid value for `rules`, must not be `None`")

        self._rules = rules

    @property
    def input_type(self):
        """Gets the input_type of this UpdateCallAnalyticsCategoryRequest.


        :return: The input_type of this UpdateCallAnalyticsCategoryRequest.
        :rtype: InputType
        """
        return self._input_type

    @input_type.setter
    def input_type(self, input_type):
        """Sets the input_type of this UpdateCallAnalyticsCategoryRequest.


        :param input_type: The input_type of this UpdateCallAnalyticsCategoryRequest.
        :type input_type: InputType
        """

        self._input_type = input_type
