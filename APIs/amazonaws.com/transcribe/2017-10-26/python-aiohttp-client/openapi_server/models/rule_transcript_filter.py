# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.participant_role import ParticipantRole
from openapi_server.models.transcript_filter_absolute_time_range import TranscriptFilterAbsoluteTimeRange
from openapi_server.models.transcript_filter_relative_time_range import TranscriptFilterRelativeTimeRange
from openapi_server.models.transcript_filter_type import TranscriptFilterType
from openapi_server import util


class RuleTranscriptFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, transcript_filter_type: TranscriptFilterType=None, absolute_time_range: TranscriptFilterAbsoluteTimeRange=None, relative_time_range: TranscriptFilterRelativeTimeRange=None, participant_role: ParticipantRole=None, negate: bool=None, targets: List=None):
        """RuleTranscriptFilter - a model defined in OpenAPI

        :param transcript_filter_type: The transcript_filter_type of this RuleTranscriptFilter.
        :param absolute_time_range: The absolute_time_range of this RuleTranscriptFilter.
        :param relative_time_range: The relative_time_range of this RuleTranscriptFilter.
        :param participant_role: The participant_role of this RuleTranscriptFilter.
        :param negate: The negate of this RuleTranscriptFilter.
        :param targets: The targets of this RuleTranscriptFilter.
        """
        self.openapi_types = {
            'transcript_filter_type': TranscriptFilterType,
            'absolute_time_range': TranscriptFilterAbsoluteTimeRange,
            'relative_time_range': TranscriptFilterRelativeTimeRange,
            'participant_role': ParticipantRole,
            'negate': bool,
            'targets': List
        }

        self.attribute_map = {
            'transcript_filter_type': 'TranscriptFilterType',
            'absolute_time_range': 'AbsoluteTimeRange',
            'relative_time_range': 'RelativeTimeRange',
            'participant_role': 'ParticipantRole',
            'negate': 'Negate',
            'targets': 'Targets'
        }

        self._transcript_filter_type = transcript_filter_type
        self._absolute_time_range = absolute_time_range
        self._relative_time_range = relative_time_range
        self._participant_role = participant_role
        self._negate = negate
        self._targets = targets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleTranscriptFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Rule_TranscriptFilter of this RuleTranscriptFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transcript_filter_type(self):
        """Gets the transcript_filter_type of this RuleTranscriptFilter.


        :return: The transcript_filter_type of this RuleTranscriptFilter.
        :rtype: TranscriptFilterType
        """
        return self._transcript_filter_type

    @transcript_filter_type.setter
    def transcript_filter_type(self, transcript_filter_type):
        """Sets the transcript_filter_type of this RuleTranscriptFilter.


        :param transcript_filter_type: The transcript_filter_type of this RuleTranscriptFilter.
        :type transcript_filter_type: TranscriptFilterType
        """
        if transcript_filter_type is None:
            raise ValueError("Invalid value for `transcript_filter_type`, must not be `None`")

        self._transcript_filter_type = transcript_filter_type

    @property
    def absolute_time_range(self):
        """Gets the absolute_time_range of this RuleTranscriptFilter.


        :return: The absolute_time_range of this RuleTranscriptFilter.
        :rtype: TranscriptFilterAbsoluteTimeRange
        """
        return self._absolute_time_range

    @absolute_time_range.setter
    def absolute_time_range(self, absolute_time_range):
        """Sets the absolute_time_range of this RuleTranscriptFilter.


        :param absolute_time_range: The absolute_time_range of this RuleTranscriptFilter.
        :type absolute_time_range: TranscriptFilterAbsoluteTimeRange
        """

        self._absolute_time_range = absolute_time_range

    @property
    def relative_time_range(self):
        """Gets the relative_time_range of this RuleTranscriptFilter.


        :return: The relative_time_range of this RuleTranscriptFilter.
        :rtype: TranscriptFilterRelativeTimeRange
        """
        return self._relative_time_range

    @relative_time_range.setter
    def relative_time_range(self, relative_time_range):
        """Sets the relative_time_range of this RuleTranscriptFilter.


        :param relative_time_range: The relative_time_range of this RuleTranscriptFilter.
        :type relative_time_range: TranscriptFilterRelativeTimeRange
        """

        self._relative_time_range = relative_time_range

    @property
    def participant_role(self):
        """Gets the participant_role of this RuleTranscriptFilter.


        :return: The participant_role of this RuleTranscriptFilter.
        :rtype: ParticipantRole
        """
        return self._participant_role

    @participant_role.setter
    def participant_role(self, participant_role):
        """Sets the participant_role of this RuleTranscriptFilter.


        :param participant_role: The participant_role of this RuleTranscriptFilter.
        :type participant_role: ParticipantRole
        """

        self._participant_role = participant_role

    @property
    def negate(self):
        """Gets the negate of this RuleTranscriptFilter.


        :return: The negate of this RuleTranscriptFilter.
        :rtype: bool
        """
        return self._negate

    @negate.setter
    def negate(self, negate):
        """Sets the negate of this RuleTranscriptFilter.


        :param negate: The negate of this RuleTranscriptFilter.
        :type negate: bool
        """

        self._negate = negate

    @property
    def targets(self):
        """Gets the targets of this RuleTranscriptFilter.


        :return: The targets of this RuleTranscriptFilter.
        :rtype: List
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this RuleTranscriptFilter.


        :param targets: The targets of this RuleTranscriptFilter.
        :type targets: List
        """
        if targets is None:
            raise ValueError("Invalid value for `targets`, must not be `None`")

        self._targets = targets
