# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.base_model_name import BaseModelName
from openapi_server.models.clm_language_code import CLMLanguageCode
from openapi_server.models.create_language_model_request_input_data_config import CreateLanguageModelRequestInputDataConfig
from openapi_server import util


class CreateLanguageModelRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, language_code: CLMLanguageCode=None, base_model_name: BaseModelName=None, model_name: str=None, input_data_config: CreateLanguageModelRequestInputDataConfig=None, tags: List=None):
        """CreateLanguageModelRequest - a model defined in OpenAPI

        :param language_code: The language_code of this CreateLanguageModelRequest.
        :param base_model_name: The base_model_name of this CreateLanguageModelRequest.
        :param model_name: The model_name of this CreateLanguageModelRequest.
        :param input_data_config: The input_data_config of this CreateLanguageModelRequest.
        :param tags: The tags of this CreateLanguageModelRequest.
        """
        self.openapi_types = {
            'language_code': CLMLanguageCode,
            'base_model_name': BaseModelName,
            'model_name': str,
            'input_data_config': CreateLanguageModelRequestInputDataConfig,
            'tags': List
        }

        self.attribute_map = {
            'language_code': 'LanguageCode',
            'base_model_name': 'BaseModelName',
            'model_name': 'ModelName',
            'input_data_config': 'InputDataConfig',
            'tags': 'Tags'
        }

        self._language_code = language_code
        self._base_model_name = base_model_name
        self._model_name = model_name
        self._input_data_config = input_data_config
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateLanguageModelRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateLanguageModelRequest of this CreateLanguageModelRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def language_code(self):
        """Gets the language_code of this CreateLanguageModelRequest.


        :return: The language_code of this CreateLanguageModelRequest.
        :rtype: CLMLanguageCode
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this CreateLanguageModelRequest.


        :param language_code: The language_code of this CreateLanguageModelRequest.
        :type language_code: CLMLanguageCode
        """
        if language_code is None:
            raise ValueError("Invalid value for `language_code`, must not be `None`")

        self._language_code = language_code

    @property
    def base_model_name(self):
        """Gets the base_model_name of this CreateLanguageModelRequest.


        :return: The base_model_name of this CreateLanguageModelRequest.
        :rtype: BaseModelName
        """
        return self._base_model_name

    @base_model_name.setter
    def base_model_name(self, base_model_name):
        """Sets the base_model_name of this CreateLanguageModelRequest.


        :param base_model_name: The base_model_name of this CreateLanguageModelRequest.
        :type base_model_name: BaseModelName
        """
        if base_model_name is None:
            raise ValueError("Invalid value for `base_model_name`, must not be `None`")

        self._base_model_name = base_model_name

    @property
    def model_name(self):
        """Gets the model_name of this CreateLanguageModelRequest.


        :return: The model_name of this CreateLanguageModelRequest.
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this CreateLanguageModelRequest.


        :param model_name: The model_name of this CreateLanguageModelRequest.
        :type model_name: str
        """
        if model_name is None:
            raise ValueError("Invalid value for `model_name`, must not be `None`")

        self._model_name = model_name

    @property
    def input_data_config(self):
        """Gets the input_data_config of this CreateLanguageModelRequest.


        :return: The input_data_config of this CreateLanguageModelRequest.
        :rtype: CreateLanguageModelRequestInputDataConfig
        """
        return self._input_data_config

    @input_data_config.setter
    def input_data_config(self, input_data_config):
        """Sets the input_data_config of this CreateLanguageModelRequest.


        :param input_data_config: The input_data_config of this CreateLanguageModelRequest.
        :type input_data_config: CreateLanguageModelRequestInputDataConfig
        """
        if input_data_config is None:
            raise ValueError("Invalid value for `input_data_config`, must not be `None`")

        self._input_data_config = input_data_config

    @property
    def tags(self):
        """Gets the tags of this CreateLanguageModelRequest.


        :return: The tags of this CreateLanguageModelRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateLanguageModelRequest.


        :param tags: The tags of this CreateLanguageModelRequest.
        :type tags: List
        """

        self._tags = tags
