# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeleteCallAnalyticsCategoryRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_name: str=None):
        """DeleteCallAnalyticsCategoryRequest - a model defined in OpenAPI

        :param category_name: The category_name of this DeleteCallAnalyticsCategoryRequest.
        """
        self.openapi_types = {
            'category_name': str
        }

        self.attribute_map = {
            'category_name': 'CategoryName'
        }

        self._category_name = category_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteCallAnalyticsCategoryRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteCallAnalyticsCategoryRequest of this DeleteCallAnalyticsCategoryRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_name(self):
        """Gets the category_name of this DeleteCallAnalyticsCategoryRequest.


        :return: The category_name of this DeleteCallAnalyticsCategoryRequest.
        :rtype: str
        """
        return self._category_name

    @category_name.setter
    def category_name(self, category_name):
        """Sets the category_name of this DeleteCallAnalyticsCategoryRequest.


        :param category_name: The category_name of this DeleteCallAnalyticsCategoryRequest.
        :type category_name: str
        """
        if category_name is None:
            raise ValueError("Invalid value for `category_name`, must not be `None`")

        self._category_name = category_name
