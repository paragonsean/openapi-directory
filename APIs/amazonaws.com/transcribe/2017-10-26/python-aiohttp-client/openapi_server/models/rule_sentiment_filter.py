# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.participant_role import ParticipantRole
from openapi_server.models.sentiment_filter_absolute_time_range import SentimentFilterAbsoluteTimeRange
from openapi_server.models.sentiment_filter_relative_time_range import SentimentFilterRelativeTimeRange
from openapi_server import util


class RuleSentimentFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sentiments: List=None, absolute_time_range: SentimentFilterAbsoluteTimeRange=None, relative_time_range: SentimentFilterRelativeTimeRange=None, participant_role: ParticipantRole=None, negate: bool=None):
        """RuleSentimentFilter - a model defined in OpenAPI

        :param sentiments: The sentiments of this RuleSentimentFilter.
        :param absolute_time_range: The absolute_time_range of this RuleSentimentFilter.
        :param relative_time_range: The relative_time_range of this RuleSentimentFilter.
        :param participant_role: The participant_role of this RuleSentimentFilter.
        :param negate: The negate of this RuleSentimentFilter.
        """
        self.openapi_types = {
            'sentiments': List,
            'absolute_time_range': SentimentFilterAbsoluteTimeRange,
            'relative_time_range': SentimentFilterRelativeTimeRange,
            'participant_role': ParticipantRole,
            'negate': bool
        }

        self.attribute_map = {
            'sentiments': 'Sentiments',
            'absolute_time_range': 'AbsoluteTimeRange',
            'relative_time_range': 'RelativeTimeRange',
            'participant_role': 'ParticipantRole',
            'negate': 'Negate'
        }

        self._sentiments = sentiments
        self._absolute_time_range = absolute_time_range
        self._relative_time_range = relative_time_range
        self._participant_role = participant_role
        self._negate = negate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleSentimentFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Rule_SentimentFilter of this RuleSentimentFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sentiments(self):
        """Gets the sentiments of this RuleSentimentFilter.


        :return: The sentiments of this RuleSentimentFilter.
        :rtype: List
        """
        return self._sentiments

    @sentiments.setter
    def sentiments(self, sentiments):
        """Sets the sentiments of this RuleSentimentFilter.


        :param sentiments: The sentiments of this RuleSentimentFilter.
        :type sentiments: List
        """
        if sentiments is None:
            raise ValueError("Invalid value for `sentiments`, must not be `None`")

        self._sentiments = sentiments

    @property
    def absolute_time_range(self):
        """Gets the absolute_time_range of this RuleSentimentFilter.


        :return: The absolute_time_range of this RuleSentimentFilter.
        :rtype: SentimentFilterAbsoluteTimeRange
        """
        return self._absolute_time_range

    @absolute_time_range.setter
    def absolute_time_range(self, absolute_time_range):
        """Sets the absolute_time_range of this RuleSentimentFilter.


        :param absolute_time_range: The absolute_time_range of this RuleSentimentFilter.
        :type absolute_time_range: SentimentFilterAbsoluteTimeRange
        """

        self._absolute_time_range = absolute_time_range

    @property
    def relative_time_range(self):
        """Gets the relative_time_range of this RuleSentimentFilter.


        :return: The relative_time_range of this RuleSentimentFilter.
        :rtype: SentimentFilterRelativeTimeRange
        """
        return self._relative_time_range

    @relative_time_range.setter
    def relative_time_range(self, relative_time_range):
        """Sets the relative_time_range of this RuleSentimentFilter.


        :param relative_time_range: The relative_time_range of this RuleSentimentFilter.
        :type relative_time_range: SentimentFilterRelativeTimeRange
        """

        self._relative_time_range = relative_time_range

    @property
    def participant_role(self):
        """Gets the participant_role of this RuleSentimentFilter.


        :return: The participant_role of this RuleSentimentFilter.
        :rtype: ParticipantRole
        """
        return self._participant_role

    @participant_role.setter
    def participant_role(self, participant_role):
        """Sets the participant_role of this RuleSentimentFilter.


        :param participant_role: The participant_role of this RuleSentimentFilter.
        :type participant_role: ParticipantRole
        """

        self._participant_role = participant_role

    @property
    def negate(self):
        """Gets the negate of this RuleSentimentFilter.


        :return: The negate of this RuleSentimentFilter.
        :rtype: bool
        """
        return self._negate

    @negate.setter
    def negate(self, negate):
        """Sets the negate of this RuleSentimentFilter.


        :param negate: The negate of this RuleSentimentFilter.
        :type negate: bool
        """

        self._negate = negate
