/**
 * AWS EC2 Instance Connect
 * Amazon EC2 Instance Connect enables system administrators to publish one-time use SSH public keys to EC2, providing users a simple and secure way to connect to their instances.
 *
 * The version of the OpenAPI document: 2018-04-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendSSHPublicKeyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendSSHPublicKeyRequest::OAISendSSHPublicKeyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendSSHPublicKeyRequest::OAISendSSHPublicKeyRequest() {
    this->initializeModel();
}

OAISendSSHPublicKeyRequest::~OAISendSSHPublicKeyRequest() {}

void OAISendSSHPublicKeyRequest::initializeModel() {

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_instance_os_user_isSet = false;
    m_instance_os_user_isValid = false;

    m_ssh_public_key_isSet = false;
    m_ssh_public_key_isValid = false;

    m_availability_zone_isSet = false;
    m_availability_zone_isValid = false;
}

void OAISendSSHPublicKeyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendSSHPublicKeyRequest::fromJsonObject(QJsonObject json) {

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("InstanceId")]);
    m_instance_id_isSet = !json[QString("InstanceId")].isNull() && m_instance_id_isValid;

    m_instance_os_user_isValid = ::OpenAPI::fromJsonValue(m_instance_os_user, json[QString("InstanceOSUser")]);
    m_instance_os_user_isSet = !json[QString("InstanceOSUser")].isNull() && m_instance_os_user_isValid;

    m_ssh_public_key_isValid = ::OpenAPI::fromJsonValue(m_ssh_public_key, json[QString("SSHPublicKey")]);
    m_ssh_public_key_isSet = !json[QString("SSHPublicKey")].isNull() && m_ssh_public_key_isValid;

    m_availability_zone_isValid = ::OpenAPI::fromJsonValue(m_availability_zone, json[QString("AvailabilityZone")]);
    m_availability_zone_isSet = !json[QString("AvailabilityZone")].isNull() && m_availability_zone_isValid;
}

QString OAISendSSHPublicKeyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendSSHPublicKeyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_id_isSet) {
        obj.insert(QString("InstanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_instance_os_user_isSet) {
        obj.insert(QString("InstanceOSUser"), ::OpenAPI::toJsonValue(m_instance_os_user));
    }
    if (m_ssh_public_key_isSet) {
        obj.insert(QString("SSHPublicKey"), ::OpenAPI::toJsonValue(m_ssh_public_key));
    }
    if (m_availability_zone_isSet) {
        obj.insert(QString("AvailabilityZone"), ::OpenAPI::toJsonValue(m_availability_zone));
    }
    return obj;
}

QString OAISendSSHPublicKeyRequest::getInstanceId() const {
    return m_instance_id;
}
void OAISendSSHPublicKeyRequest::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAISendSSHPublicKeyRequest::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAISendSSHPublicKeyRequest::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QString OAISendSSHPublicKeyRequest::getInstanceOsUser() const {
    return m_instance_os_user;
}
void OAISendSSHPublicKeyRequest::setInstanceOsUser(const QString &instance_os_user) {
    m_instance_os_user = instance_os_user;
    m_instance_os_user_isSet = true;
}

bool OAISendSSHPublicKeyRequest::is_instance_os_user_Set() const{
    return m_instance_os_user_isSet;
}

bool OAISendSSHPublicKeyRequest::is_instance_os_user_Valid() const{
    return m_instance_os_user_isValid;
}

QString OAISendSSHPublicKeyRequest::getSshPublicKey() const {
    return m_ssh_public_key;
}
void OAISendSSHPublicKeyRequest::setSshPublicKey(const QString &ssh_public_key) {
    m_ssh_public_key = ssh_public_key;
    m_ssh_public_key_isSet = true;
}

bool OAISendSSHPublicKeyRequest::is_ssh_public_key_Set() const{
    return m_ssh_public_key_isSet;
}

bool OAISendSSHPublicKeyRequest::is_ssh_public_key_Valid() const{
    return m_ssh_public_key_isValid;
}

QString OAISendSSHPublicKeyRequest::getAvailabilityZone() const {
    return m_availability_zone;
}
void OAISendSSHPublicKeyRequest::setAvailabilityZone(const QString &availability_zone) {
    m_availability_zone = availability_zone;
    m_availability_zone_isSet = true;
}

bool OAISendSSHPublicKeyRequest::is_availability_zone_Set() const{
    return m_availability_zone_isSet;
}

bool OAISendSSHPublicKeyRequest::is_availability_zone_Valid() const{
    return m_availability_zone_isValid;
}

bool OAISendSSHPublicKeyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_os_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssh_public_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendSSHPublicKeyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_instance_id_isValid && m_instance_os_user_isValid && m_ssh_public_key_isValid && true;
}

} // namespace OpenAPI
