/**
 * AWS EC2 Instance Connect
 * Amazon EC2 Instance Connect enables system administrators to publish one-time use SSH public keys to EC2, providing users a simple and secure way to connect to their instances.
 *
 * The version of the OpenAPI document: 2018-04-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendSerialConsoleSSHPublicKeyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendSerialConsoleSSHPublicKeyRequest::OAISendSerialConsoleSSHPublicKeyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendSerialConsoleSSHPublicKeyRequest::OAISendSerialConsoleSSHPublicKeyRequest() {
    this->initializeModel();
}

OAISendSerialConsoleSSHPublicKeyRequest::~OAISendSerialConsoleSSHPublicKeyRequest() {}

void OAISendSerialConsoleSSHPublicKeyRequest::initializeModel() {

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_serial_port_isSet = false;
    m_serial_port_isValid = false;

    m_ssh_public_key_isSet = false;
    m_ssh_public_key_isValid = false;
}

void OAISendSerialConsoleSSHPublicKeyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendSerialConsoleSSHPublicKeyRequest::fromJsonObject(QJsonObject json) {

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("InstanceId")]);
    m_instance_id_isSet = !json[QString("InstanceId")].isNull() && m_instance_id_isValid;

    m_serial_port_isValid = ::OpenAPI::fromJsonValue(m_serial_port, json[QString("SerialPort")]);
    m_serial_port_isSet = !json[QString("SerialPort")].isNull() && m_serial_port_isValid;

    m_ssh_public_key_isValid = ::OpenAPI::fromJsonValue(m_ssh_public_key, json[QString("SSHPublicKey")]);
    m_ssh_public_key_isSet = !json[QString("SSHPublicKey")].isNull() && m_ssh_public_key_isValid;
}

QString OAISendSerialConsoleSSHPublicKeyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendSerialConsoleSSHPublicKeyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_id_isSet) {
        obj.insert(QString("InstanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_serial_port_isSet) {
        obj.insert(QString("SerialPort"), ::OpenAPI::toJsonValue(m_serial_port));
    }
    if (m_ssh_public_key_isSet) {
        obj.insert(QString("SSHPublicKey"), ::OpenAPI::toJsonValue(m_ssh_public_key));
    }
    return obj;
}

QString OAISendSerialConsoleSSHPublicKeyRequest::getInstanceId() const {
    return m_instance_id;
}
void OAISendSerialConsoleSSHPublicKeyRequest::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAISendSerialConsoleSSHPublicKeyRequest::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAISendSerialConsoleSSHPublicKeyRequest::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

qint32 OAISendSerialConsoleSSHPublicKeyRequest::getSerialPort() const {
    return m_serial_port;
}
void OAISendSerialConsoleSSHPublicKeyRequest::setSerialPort(const qint32 &serial_port) {
    m_serial_port = serial_port;
    m_serial_port_isSet = true;
}

bool OAISendSerialConsoleSSHPublicKeyRequest::is_serial_port_Set() const{
    return m_serial_port_isSet;
}

bool OAISendSerialConsoleSSHPublicKeyRequest::is_serial_port_Valid() const{
    return m_serial_port_isValid;
}

QString OAISendSerialConsoleSSHPublicKeyRequest::getSshPublicKey() const {
    return m_ssh_public_key;
}
void OAISendSerialConsoleSSHPublicKeyRequest::setSshPublicKey(const QString &ssh_public_key) {
    m_ssh_public_key = ssh_public_key;
    m_ssh_public_key_isSet = true;
}

bool OAISendSerialConsoleSSHPublicKeyRequest::is_ssh_public_key_Set() const{
    return m_ssh_public_key_isSet;
}

bool OAISendSerialConsoleSSHPublicKeyRequest::is_ssh_public_key_Valid() const{
    return m_ssh_public_key_isValid;
}

bool OAISendSerialConsoleSSHPublicKeyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssh_public_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendSerialConsoleSSHPublicKeyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_instance_id_isValid && m_ssh_public_key_isValid && true;
}

} // namespace OpenAPI
