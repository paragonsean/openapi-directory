/*
 * AWS EC2 Instance Connect
 * Amazon EC2 Instance Connect enables system administrators to publish one-time use SSH public keys to EC2, providing users a simple and secure way to connect to their instances.
 *
 * The version of the OpenAPI document: 2018-04-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.SendSSHPublicKeyRequest;
import org.openapitools.client.model.SendSSHPublicKeyResponse;
import org.openapitools.client.model.SendSerialConsoleSSHPublicKeyRequest;
import org.openapitools.client.model.SendSerialConsoleSSHPublicKeyResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for sendSSHPublicKey
     * @param xAmzTarget  (required)
     * @param sendSSHPublicKeyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EC2InstanceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EC2InstanceStateInvalidException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EC2InstanceUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendSSHPublicKeyCall(String xAmzTarget, SendSSHPublicKeyRequest sendSSHPublicKeyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendSSHPublicKeyRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSEC2InstanceConnectService.SendSSHPublicKey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendSSHPublicKeyValidateBeforeCall(String xAmzTarget, SendSSHPublicKeyRequest sendSSHPublicKeyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling sendSSHPublicKey(Async)");
        }

        // verify the required parameter 'sendSSHPublicKeyRequest' is set
        if (sendSSHPublicKeyRequest == null) {
            throw new ApiException("Missing the required parameter 'sendSSHPublicKeyRequest' when calling sendSSHPublicKey(Async)");
        }

        return sendSSHPublicKeyCall(xAmzTarget, sendSSHPublicKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Pushes an SSH public key to the specified EC2 instance for use by the specified user. The key remains for 60 seconds. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Connect-using-EC2-Instance-Connect.html\&quot;&gt;Connect to your Linux instance using EC2 Instance Connect&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param sendSSHPublicKeyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return SendSSHPublicKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EC2InstanceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EC2InstanceStateInvalidException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EC2InstanceUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public SendSSHPublicKeyResponse sendSSHPublicKey(String xAmzTarget, SendSSHPublicKeyRequest sendSSHPublicKeyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<SendSSHPublicKeyResponse> localVarResp = sendSSHPublicKeyWithHttpInfo(xAmzTarget, sendSSHPublicKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Pushes an SSH public key to the specified EC2 instance for use by the specified user. The key remains for 60 seconds. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Connect-using-EC2-Instance-Connect.html\&quot;&gt;Connect to your Linux instance using EC2 Instance Connect&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param sendSSHPublicKeyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;SendSSHPublicKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EC2InstanceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EC2InstanceStateInvalidException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EC2InstanceUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendSSHPublicKeyResponse> sendSSHPublicKeyWithHttpInfo(String xAmzTarget, SendSSHPublicKeyRequest sendSSHPublicKeyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = sendSSHPublicKeyValidateBeforeCall(xAmzTarget, sendSSHPublicKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<SendSSHPublicKeyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Pushes an SSH public key to the specified EC2 instance for use by the specified user. The key remains for 60 seconds. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Connect-using-EC2-Instance-Connect.html\&quot;&gt;Connect to your Linux instance using EC2 Instance Connect&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param sendSSHPublicKeyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArgsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EC2InstanceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EC2InstanceStateInvalidException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EC2InstanceUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendSSHPublicKeyAsync(String xAmzTarget, SendSSHPublicKeyRequest sendSSHPublicKeyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<SendSSHPublicKeyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendSSHPublicKeyValidateBeforeCall(xAmzTarget, sendSSHPublicKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<SendSSHPublicKeyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendSerialConsoleSSHPublicKey
     * @param xAmzTarget  (required)
     * @param sendSerialConsoleSSHPublicKeyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SerialConsoleAccessDisabledException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EC2InstanceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EC2InstanceTypeInvalidException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SerialConsoleSessionLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> SerialConsoleSessionUnavailableException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EC2InstanceStateInvalidException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EC2InstanceUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendSerialConsoleSSHPublicKeyCall(String xAmzTarget, SendSerialConsoleSSHPublicKeyRequest sendSerialConsoleSSHPublicKeyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendSerialConsoleSSHPublicKeyRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSEC2InstanceConnectService.SendSerialConsoleSSHPublicKey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendSerialConsoleSSHPublicKeyValidateBeforeCall(String xAmzTarget, SendSerialConsoleSSHPublicKeyRequest sendSerialConsoleSSHPublicKeyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling sendSerialConsoleSSHPublicKey(Async)");
        }

        // verify the required parameter 'sendSerialConsoleSSHPublicKeyRequest' is set
        if (sendSerialConsoleSSHPublicKeyRequest == null) {
            throw new ApiException("Missing the required parameter 'sendSerialConsoleSSHPublicKeyRequest' when calling sendSerialConsoleSSHPublicKey(Async)");
        }

        return sendSerialConsoleSSHPublicKeyCall(xAmzTarget, sendSerialConsoleSSHPublicKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Pushes an SSH public key to the specified EC2 instance. The key remains for 60 seconds, which gives you 60 seconds to establish a serial console connection to the instance using SSH. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-serial-console.html\&quot;&gt;EC2 Serial Console&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param sendSerialConsoleSSHPublicKeyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return SendSerialConsoleSSHPublicKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SerialConsoleAccessDisabledException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EC2InstanceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EC2InstanceTypeInvalidException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SerialConsoleSessionLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> SerialConsoleSessionUnavailableException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EC2InstanceStateInvalidException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EC2InstanceUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public SendSerialConsoleSSHPublicKeyResponse sendSerialConsoleSSHPublicKey(String xAmzTarget, SendSerialConsoleSSHPublicKeyRequest sendSerialConsoleSSHPublicKeyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<SendSerialConsoleSSHPublicKeyResponse> localVarResp = sendSerialConsoleSSHPublicKeyWithHttpInfo(xAmzTarget, sendSerialConsoleSSHPublicKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Pushes an SSH public key to the specified EC2 instance. The key remains for 60 seconds, which gives you 60 seconds to establish a serial console connection to the instance using SSH. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-serial-console.html\&quot;&gt;EC2 Serial Console&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param sendSerialConsoleSSHPublicKeyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;SendSerialConsoleSSHPublicKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SerialConsoleAccessDisabledException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EC2InstanceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EC2InstanceTypeInvalidException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SerialConsoleSessionLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> SerialConsoleSessionUnavailableException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EC2InstanceStateInvalidException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EC2InstanceUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendSerialConsoleSSHPublicKeyResponse> sendSerialConsoleSSHPublicKeyWithHttpInfo(String xAmzTarget, SendSerialConsoleSSHPublicKeyRequest sendSerialConsoleSSHPublicKeyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = sendSerialConsoleSSHPublicKeyValidateBeforeCall(xAmzTarget, sendSerialConsoleSSHPublicKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<SendSerialConsoleSSHPublicKeyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Pushes an SSH public key to the specified EC2 instance. The key remains for 60 seconds, which gives you 60 seconds to establish a serial console connection to the instance using SSH. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-serial-console.html\&quot;&gt;EC2 Serial Console&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param sendSerialConsoleSSHPublicKeyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AuthException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SerialConsoleAccessDisabledException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> EC2InstanceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> EC2InstanceTypeInvalidException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SerialConsoleSessionLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> SerialConsoleSessionUnavailableException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EC2InstanceStateInvalidException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> EC2InstanceUnavailableException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendSerialConsoleSSHPublicKeyAsync(String xAmzTarget, SendSerialConsoleSSHPublicKeyRequest sendSerialConsoleSSHPublicKeyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<SendSerialConsoleSSHPublicKeyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendSerialConsoleSSHPublicKeyValidateBeforeCall(xAmzTarget, sendSerialConsoleSSHPublicKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<SendSerialConsoleSSHPublicKeyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
