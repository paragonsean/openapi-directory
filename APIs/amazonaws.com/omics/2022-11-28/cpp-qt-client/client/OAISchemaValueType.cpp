/**
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISchemaValueType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISchemaValueType::OAISchemaValueType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISchemaValueType::OAISchemaValueType() {
    this->initializeModel();
}

OAISchemaValueType::~OAISchemaValueType() {}

void OAISchemaValueType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISchemaValueType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISchemaValueType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("LONG", Qt::CaseInsensitive) == 0) {
        m_value = eOAISchemaValueType::LONG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INT", Qt::CaseInsensitive) == 0) {
        m_value = eOAISchemaValueType::INT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STRING", Qt::CaseInsensitive) == 0) {
        m_value = eOAISchemaValueType::STRING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FLOAT", Qt::CaseInsensitive) == 0) {
        m_value = eOAISchemaValueType::FLOAT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DOUBLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAISchemaValueType::DOUBLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BOOLEAN", Qt::CaseInsensitive) == 0) {
        m_value = eOAISchemaValueType::BOOLEAN;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISchemaValueType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAISchemaValueType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISchemaValueType::LONG:
            val = "LONG";
            break;
        case eOAISchemaValueType::INT:
            val = "INT";
            break;
        case eOAISchemaValueType::STRING:
            val = "STRING";
            break;
        case eOAISchemaValueType::FLOAT:
            val = "FLOAT";
            break;
        case eOAISchemaValueType::DOUBLE:
            val = "DOUBLE";
            break;
        case eOAISchemaValueType::BOOLEAN:
            val = "BOOLEAN";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISchemaValueType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAISchemaValueType::eOAISchemaValueType OAISchemaValueType::getValue() const {
    return m_value;
}

void OAISchemaValueType::setValue(const OAISchemaValueType::eOAISchemaValueType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISchemaValueType::isSet() const {
    
    return m_value_isSet;
}

bool OAISchemaValueType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
