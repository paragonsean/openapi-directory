/**
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartReadSetImportJob_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartReadSetImportJob_request::OAIStartReadSetImportJob_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartReadSetImportJob_request::OAIStartReadSetImportJob_request() {
    this->initializeModel();
}

OAIStartReadSetImportJob_request::~OAIStartReadSetImportJob_request() {}

void OAIStartReadSetImportJob_request::initializeModel() {

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;
}

void OAIStartReadSetImportJob_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartReadSetImportJob_request::fromJsonObject(QJsonObject json) {

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("roleArn")]);
    m_role_arn_isSet = !json[QString("roleArn")].isNull() && m_role_arn_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;
}

QString OAIStartReadSetImportJob_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartReadSetImportJob_request::asJsonObject() const {
    QJsonObject obj;
    if (m_role_arn_isSet) {
        obj.insert(QString("roleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    return obj;
}

QString OAIStartReadSetImportJob_request::getRoleArn() const {
    return m_role_arn;
}
void OAIStartReadSetImportJob_request::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIStartReadSetImportJob_request::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIStartReadSetImportJob_request::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QString OAIStartReadSetImportJob_request::getClientToken() const {
    return m_client_token;
}
void OAIStartReadSetImportJob_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIStartReadSetImportJob_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIStartReadSetImportJob_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QList<OAIStartReadSetImportJobSourceItem> OAIStartReadSetImportJob_request::getSources() const {
    return m_sources;
}
void OAIStartReadSetImportJob_request::setSources(const QList<OAIStartReadSetImportJobSourceItem> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAIStartReadSetImportJob_request::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAIStartReadSetImportJob_request::is_sources_Valid() const{
    return m_sources_isValid;
}

bool OAIStartReadSetImportJob_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartReadSetImportJob_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_role_arn_isValid && m_sources_isValid && true;
}

} // namespace OpenAPI
