/**
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetReadSetMetadataResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetReadSetMetadataResponse::OAIGetReadSetMetadataResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetReadSetMetadataResponse::OAIGetReadSetMetadataResponse() {
    this->initializeModel();
}

OAIGetReadSetMetadataResponse::~OAIGetReadSetMetadataResponse() {}

void OAIGetReadSetMetadataResponse::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_sequence_store_id_isSet = false;
    m_sequence_store_id_isValid = false;

    m_subject_id_isSet = false;
    m_subject_id_isValid = false;

    m_sample_id_isSet = false;
    m_sample_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_file_type_isSet = false;
    m_file_type_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_sequence_information_isSet = false;
    m_sequence_information_isValid = false;

    m_reference_arn_isSet = false;
    m_reference_arn_isValid = false;

    m_files_isSet = false;
    m_files_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_creation_type_isSet = false;
    m_creation_type_isValid = false;
}

void OAIGetReadSetMetadataResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetReadSetMetadataResponse::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_sequence_store_id_isValid = ::OpenAPI::fromJsonValue(m_sequence_store_id, json[QString("sequenceStoreId")]);
    m_sequence_store_id_isSet = !json[QString("sequenceStoreId")].isNull() && m_sequence_store_id_isValid;

    m_subject_id_isValid = ::OpenAPI::fromJsonValue(m_subject_id, json[QString("subjectId")]);
    m_subject_id_isSet = !json[QString("subjectId")].isNull() && m_subject_id_isValid;

    m_sample_id_isValid = ::OpenAPI::fromJsonValue(m_sample_id, json[QString("sampleId")]);
    m_sample_id_isSet = !json[QString("sampleId")].isNull() && m_sample_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_file_type_isValid = ::OpenAPI::fromJsonValue(m_file_type, json[QString("fileType")]);
    m_file_type_isSet = !json[QString("fileType")].isNull() && m_file_type_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_sequence_information_isValid = ::OpenAPI::fromJsonValue(m_sequence_information, json[QString("sequenceInformation")]);
    m_sequence_information_isSet = !json[QString("sequenceInformation")].isNull() && m_sequence_information_isValid;

    m_reference_arn_isValid = ::OpenAPI::fromJsonValue(m_reference_arn, json[QString("referenceArn")]);
    m_reference_arn_isSet = !json[QString("referenceArn")].isNull() && m_reference_arn_isValid;

    m_files_isValid = ::OpenAPI::fromJsonValue(m_files, json[QString("files")]);
    m_files_isSet = !json[QString("files")].isNull() && m_files_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("statusMessage")]);
    m_status_message_isSet = !json[QString("statusMessage")].isNull() && m_status_message_isValid;

    m_creation_type_isValid = ::OpenAPI::fromJsonValue(m_creation_type, json[QString("creationType")]);
    m_creation_type_isSet = !json[QString("creationType")].isNull() && m_creation_type_isValid;
}

QString OAIGetReadSetMetadataResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetReadSetMetadataResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_sequence_store_id_isSet) {
        obj.insert(QString("sequenceStoreId"), ::OpenAPI::toJsonValue(m_sequence_store_id));
    }
    if (m_subject_id_isSet) {
        obj.insert(QString("subjectId"), ::OpenAPI::toJsonValue(m_subject_id));
    }
    if (m_sample_id_isSet) {
        obj.insert(QString("sampleId"), ::OpenAPI::toJsonValue(m_sample_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_file_type.isSet()) {
        obj.insert(QString("fileType"), ::OpenAPI::toJsonValue(m_file_type));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_sequence_information.isSet()) {
        obj.insert(QString("sequenceInformation"), ::OpenAPI::toJsonValue(m_sequence_information));
    }
    if (m_reference_arn_isSet) {
        obj.insert(QString("referenceArn"), ::OpenAPI::toJsonValue(m_reference_arn));
    }
    if (m_files.isSet()) {
        obj.insert(QString("files"), ::OpenAPI::toJsonValue(m_files));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("statusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_creation_type.isSet()) {
        obj.insert(QString("creationType"), ::OpenAPI::toJsonValue(m_creation_type));
    }
    return obj;
}

QString OAIGetReadSetMetadataResponse::getId() const {
    return m_id;
}
void OAIGetReadSetMetadataResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetReadSetMetadataResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetReadSetMetadataResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetReadSetMetadataResponse::getArn() const {
    return m_arn;
}
void OAIGetReadSetMetadataResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIGetReadSetMetadataResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIGetReadSetMetadataResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIGetReadSetMetadataResponse::getSequenceStoreId() const {
    return m_sequence_store_id;
}
void OAIGetReadSetMetadataResponse::setSequenceStoreId(const QString &sequence_store_id) {
    m_sequence_store_id = sequence_store_id;
    m_sequence_store_id_isSet = true;
}

bool OAIGetReadSetMetadataResponse::is_sequence_store_id_Set() const{
    return m_sequence_store_id_isSet;
}

bool OAIGetReadSetMetadataResponse::is_sequence_store_id_Valid() const{
    return m_sequence_store_id_isValid;
}

QString OAIGetReadSetMetadataResponse::getSubjectId() const {
    return m_subject_id;
}
void OAIGetReadSetMetadataResponse::setSubjectId(const QString &subject_id) {
    m_subject_id = subject_id;
    m_subject_id_isSet = true;
}

bool OAIGetReadSetMetadataResponse::is_subject_id_Set() const{
    return m_subject_id_isSet;
}

bool OAIGetReadSetMetadataResponse::is_subject_id_Valid() const{
    return m_subject_id_isValid;
}

QString OAIGetReadSetMetadataResponse::getSampleId() const {
    return m_sample_id;
}
void OAIGetReadSetMetadataResponse::setSampleId(const QString &sample_id) {
    m_sample_id = sample_id;
    m_sample_id_isSet = true;
}

bool OAIGetReadSetMetadataResponse::is_sample_id_Set() const{
    return m_sample_id_isSet;
}

bool OAIGetReadSetMetadataResponse::is_sample_id_Valid() const{
    return m_sample_id_isValid;
}

OAIReadSetStatus OAIGetReadSetMetadataResponse::getStatus() const {
    return m_status;
}
void OAIGetReadSetMetadataResponse::setStatus(const OAIReadSetStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetReadSetMetadataResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetReadSetMetadataResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGetReadSetMetadataResponse::getName() const {
    return m_name;
}
void OAIGetReadSetMetadataResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetReadSetMetadataResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetReadSetMetadataResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetReadSetMetadataResponse::getDescription() const {
    return m_description;
}
void OAIGetReadSetMetadataResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGetReadSetMetadataResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGetReadSetMetadataResponse::is_description_Valid() const{
    return m_description_isValid;
}

OAIFileType OAIGetReadSetMetadataResponse::getFileType() const {
    return m_file_type;
}
void OAIGetReadSetMetadataResponse::setFileType(const OAIFileType &file_type) {
    m_file_type = file_type;
    m_file_type_isSet = true;
}

bool OAIGetReadSetMetadataResponse::is_file_type_Set() const{
    return m_file_type_isSet;
}

bool OAIGetReadSetMetadataResponse::is_file_type_Valid() const{
    return m_file_type_isValid;
}

QDateTime OAIGetReadSetMetadataResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIGetReadSetMetadataResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIGetReadSetMetadataResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIGetReadSetMetadataResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

OAIGetReadSetMetadataResponse_sequenceInformation OAIGetReadSetMetadataResponse::getSequenceInformation() const {
    return m_sequence_information;
}
void OAIGetReadSetMetadataResponse::setSequenceInformation(const OAIGetReadSetMetadataResponse_sequenceInformation &sequence_information) {
    m_sequence_information = sequence_information;
    m_sequence_information_isSet = true;
}

bool OAIGetReadSetMetadataResponse::is_sequence_information_Set() const{
    return m_sequence_information_isSet;
}

bool OAIGetReadSetMetadataResponse::is_sequence_information_Valid() const{
    return m_sequence_information_isValid;
}

QString OAIGetReadSetMetadataResponse::getReferenceArn() const {
    return m_reference_arn;
}
void OAIGetReadSetMetadataResponse::setReferenceArn(const QString &reference_arn) {
    m_reference_arn = reference_arn;
    m_reference_arn_isSet = true;
}

bool OAIGetReadSetMetadataResponse::is_reference_arn_Set() const{
    return m_reference_arn_isSet;
}

bool OAIGetReadSetMetadataResponse::is_reference_arn_Valid() const{
    return m_reference_arn_isValid;
}

OAIGetReadSetMetadataResponse_files OAIGetReadSetMetadataResponse::getFiles() const {
    return m_files;
}
void OAIGetReadSetMetadataResponse::setFiles(const OAIGetReadSetMetadataResponse_files &files) {
    m_files = files;
    m_files_isSet = true;
}

bool OAIGetReadSetMetadataResponse::is_files_Set() const{
    return m_files_isSet;
}

bool OAIGetReadSetMetadataResponse::is_files_Valid() const{
    return m_files_isValid;
}

QString OAIGetReadSetMetadataResponse::getStatusMessage() const {
    return m_status_message;
}
void OAIGetReadSetMetadataResponse::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIGetReadSetMetadataResponse::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIGetReadSetMetadataResponse::is_status_message_Valid() const{
    return m_status_message_isValid;
}

OAICreationType OAIGetReadSetMetadataResponse::getCreationType() const {
    return m_creation_type;
}
void OAIGetReadSetMetadataResponse::setCreationType(const OAICreationType &creation_type) {
    m_creation_type = creation_type;
    m_creation_type_isSet = true;
}

bool OAIGetReadSetMetadataResponse::is_creation_type_Set() const{
    return m_creation_type_isSet;
}

bool OAIGetReadSetMetadataResponse::is_creation_type_Valid() const{
    return m_creation_type_isValid;
}

bool OAIGetReadSetMetadataResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_store_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_information.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_files.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetReadSetMetadataResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_arn_isValid && m_sequence_store_id_isValid && m_status_isValid && m_file_type_isValid && m_creation_time_isValid && true;
}

} // namespace OpenAPI
