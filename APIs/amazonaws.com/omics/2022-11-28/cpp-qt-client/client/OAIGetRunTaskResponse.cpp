/**
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetRunTaskResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetRunTaskResponse::OAIGetRunTaskResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetRunTaskResponse::OAIGetRunTaskResponse() {
    this->initializeModel();
}

OAIGetRunTaskResponse::~OAIGetRunTaskResponse() {}

void OAIGetRunTaskResponse::initializeModel() {

    m_task_id_isSet = false;
    m_task_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_cpus_isSet = false;
    m_cpus_isValid = false;

    m_memory_isSet = false;
    m_memory_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_stop_time_isSet = false;
    m_stop_time_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_log_stream_isSet = false;
    m_log_stream_isValid = false;

    m_gpus_isSet = false;
    m_gpus_isValid = false;
}

void OAIGetRunTaskResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetRunTaskResponse::fromJsonObject(QJsonObject json) {

    m_task_id_isValid = ::OpenAPI::fromJsonValue(m_task_id, json[QString("taskId")]);
    m_task_id_isSet = !json[QString("taskId")].isNull() && m_task_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_cpus_isValid = ::OpenAPI::fromJsonValue(m_cpus, json[QString("cpus")]);
    m_cpus_isSet = !json[QString("cpus")].isNull() && m_cpus_isValid;

    m_memory_isValid = ::OpenAPI::fromJsonValue(m_memory, json[QString("memory")]);
    m_memory_isSet = !json[QString("memory")].isNull() && m_memory_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_stop_time_isValid = ::OpenAPI::fromJsonValue(m_stop_time, json[QString("stopTime")]);
    m_stop_time_isSet = !json[QString("stopTime")].isNull() && m_stop_time_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("statusMessage")]);
    m_status_message_isSet = !json[QString("statusMessage")].isNull() && m_status_message_isValid;

    m_log_stream_isValid = ::OpenAPI::fromJsonValue(m_log_stream, json[QString("logStream")]);
    m_log_stream_isSet = !json[QString("logStream")].isNull() && m_log_stream_isValid;

    m_gpus_isValid = ::OpenAPI::fromJsonValue(m_gpus, json[QString("gpus")]);
    m_gpus_isSet = !json[QString("gpus")].isNull() && m_gpus_isValid;
}

QString OAIGetRunTaskResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetRunTaskResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_task_id_isSet) {
        obj.insert(QString("taskId"), ::OpenAPI::toJsonValue(m_task_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_cpus_isSet) {
        obj.insert(QString("cpus"), ::OpenAPI::toJsonValue(m_cpus));
    }
    if (m_memory_isSet) {
        obj.insert(QString("memory"), ::OpenAPI::toJsonValue(m_memory));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_stop_time_isSet) {
        obj.insert(QString("stopTime"), ::OpenAPI::toJsonValue(m_stop_time));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("statusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_log_stream_isSet) {
        obj.insert(QString("logStream"), ::OpenAPI::toJsonValue(m_log_stream));
    }
    if (m_gpus_isSet) {
        obj.insert(QString("gpus"), ::OpenAPI::toJsonValue(m_gpus));
    }
    return obj;
}

QString OAIGetRunTaskResponse::getTaskId() const {
    return m_task_id;
}
void OAIGetRunTaskResponse::setTaskId(const QString &task_id) {
    m_task_id = task_id;
    m_task_id_isSet = true;
}

bool OAIGetRunTaskResponse::is_task_id_Set() const{
    return m_task_id_isSet;
}

bool OAIGetRunTaskResponse::is_task_id_Valid() const{
    return m_task_id_isValid;
}

OAITaskStatus OAIGetRunTaskResponse::getStatus() const {
    return m_status;
}
void OAIGetRunTaskResponse::setStatus(const OAITaskStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetRunTaskResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetRunTaskResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGetRunTaskResponse::getName() const {
    return m_name;
}
void OAIGetRunTaskResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetRunTaskResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetRunTaskResponse::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIGetRunTaskResponse::getCpus() const {
    return m_cpus;
}
void OAIGetRunTaskResponse::setCpus(const qint32 &cpus) {
    m_cpus = cpus;
    m_cpus_isSet = true;
}

bool OAIGetRunTaskResponse::is_cpus_Set() const{
    return m_cpus_isSet;
}

bool OAIGetRunTaskResponse::is_cpus_Valid() const{
    return m_cpus_isValid;
}

qint32 OAIGetRunTaskResponse::getMemory() const {
    return m_memory;
}
void OAIGetRunTaskResponse::setMemory(const qint32 &memory) {
    m_memory = memory;
    m_memory_isSet = true;
}

bool OAIGetRunTaskResponse::is_memory_Set() const{
    return m_memory_isSet;
}

bool OAIGetRunTaskResponse::is_memory_Valid() const{
    return m_memory_isValid;
}

QDateTime OAIGetRunTaskResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIGetRunTaskResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIGetRunTaskResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIGetRunTaskResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIGetRunTaskResponse::getStartTime() const {
    return m_start_time;
}
void OAIGetRunTaskResponse::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGetRunTaskResponse::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGetRunTaskResponse::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIGetRunTaskResponse::getStopTime() const {
    return m_stop_time;
}
void OAIGetRunTaskResponse::setStopTime(const QDateTime &stop_time) {
    m_stop_time = stop_time;
    m_stop_time_isSet = true;
}

bool OAIGetRunTaskResponse::is_stop_time_Set() const{
    return m_stop_time_isSet;
}

bool OAIGetRunTaskResponse::is_stop_time_Valid() const{
    return m_stop_time_isValid;
}

QString OAIGetRunTaskResponse::getStatusMessage() const {
    return m_status_message;
}
void OAIGetRunTaskResponse::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIGetRunTaskResponse::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIGetRunTaskResponse::is_status_message_Valid() const{
    return m_status_message_isValid;
}

QString OAIGetRunTaskResponse::getLogStream() const {
    return m_log_stream;
}
void OAIGetRunTaskResponse::setLogStream(const QString &log_stream) {
    m_log_stream = log_stream;
    m_log_stream_isSet = true;
}

bool OAIGetRunTaskResponse::is_log_stream_Set() const{
    return m_log_stream_isSet;
}

bool OAIGetRunTaskResponse::is_log_stream_Valid() const{
    return m_log_stream_isValid;
}

qint32 OAIGetRunTaskResponse::getGpus() const {
    return m_gpus;
}
void OAIGetRunTaskResponse::setGpus(const qint32 &gpus) {
    m_gpus = gpus;
    m_gpus_isSet = true;
}

bool OAIGetRunTaskResponse::is_gpus_Set() const{
    return m_gpus_isSet;
}

bool OAIGetRunTaskResponse::is_gpus_Valid() const{
    return m_gpus_isValid;
}

bool OAIGetRunTaskResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_task_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_stream_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gpus_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetRunTaskResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
