/**
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAnnotationStoreItem.h
 *
 * An annotation store.
 */

#ifndef OAIAnnotationStoreItem_H
#define OAIAnnotationStoreItem_H

#include <QJsonObject>

#include "OAICreateVariantStoreResponse_reference.h"
#include "OAIGetAnnotationStoreResponse_sseConfig.h"
#include "OAIStoreFormat.h"
#include "OAIStoreStatus.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateVariantStoreResponse_reference;
class OAIGetAnnotationStoreResponse_sseConfig;

class OAIAnnotationStoreItem : public OAIObject {
public:
    OAIAnnotationStoreItem();
    OAIAnnotationStoreItem(QString json);
    ~OAIAnnotationStoreItem() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAICreateVariantStoreResponse_reference getReference() const;
    void setReference(const OAICreateVariantStoreResponse_reference &reference);
    bool is_reference_Set() const;
    bool is_reference_Valid() const;

    OAIStoreStatus getStatus() const;
    void setStatus(const OAIStoreStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getStoreArn() const;
    void setStoreArn(const QString &store_arn);
    bool is_store_arn_Set() const;
    bool is_store_arn_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIStoreFormat getStoreFormat() const;
    void setStoreFormat(const OAIStoreFormat &store_format);
    bool is_store_format_Set() const;
    bool is_store_format_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIGetAnnotationStoreResponse_sseConfig getSseConfig() const;
    void setSseConfig(const OAIGetAnnotationStoreResponse_sseConfig &sse_config);
    bool is_sse_config_Set() const;
    bool is_sse_config_Valid() const;

    QDateTime getCreationTime() const;
    void setCreationTime(const QDateTime &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    QDateTime getUpdateTime() const;
    void setUpdateTime(const QDateTime &update_time);
    bool is_update_time_Set() const;
    bool is_update_time_Valid() const;

    QString getStatusMessage() const;
    void setStatusMessage(const QString &status_message);
    bool is_status_message_Set() const;
    bool is_status_message_Valid() const;

    qint32 getStoreSizeBytes() const;
    void setStoreSizeBytes(const qint32 &store_size_bytes);
    bool is_store_size_bytes_Set() const;
    bool is_store_size_bytes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAICreateVariantStoreResponse_reference m_reference;
    bool m_reference_isSet;
    bool m_reference_isValid;

    OAIStoreStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_store_arn;
    bool m_store_arn_isSet;
    bool m_store_arn_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIStoreFormat m_store_format;
    bool m_store_format_isSet;
    bool m_store_format_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIGetAnnotationStoreResponse_sseConfig m_sse_config;
    bool m_sse_config_isSet;
    bool m_sse_config_isValid;

    QDateTime m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;

    QDateTime m_update_time;
    bool m_update_time_isSet;
    bool m_update_time_isValid;

    QString m_status_message;
    bool m_status_message_isSet;
    bool m_status_message_isValid;

    qint32 m_store_size_bytes;
    bool m_store_size_bytes_isSet;
    bool m_store_size_bytes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAnnotationStoreItem)

#endif // OAIAnnotationStoreItem_H
