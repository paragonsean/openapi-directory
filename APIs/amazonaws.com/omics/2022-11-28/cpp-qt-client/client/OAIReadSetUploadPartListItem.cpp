/**
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReadSetUploadPartListItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReadSetUploadPartListItem::OAIReadSetUploadPartListItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReadSetUploadPartListItem::OAIReadSetUploadPartListItem() {
    this->initializeModel();
}

OAIReadSetUploadPartListItem::~OAIReadSetUploadPartListItem() {}

void OAIReadSetUploadPartListItem::initializeModel() {

    m_part_number_isSet = false;
    m_part_number_isValid = false;

    m_part_size_isSet = false;
    m_part_size_isValid = false;

    m_part_source_isSet = false;
    m_part_source_isValid = false;

    m_checksum_isSet = false;
    m_checksum_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;
}

void OAIReadSetUploadPartListItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReadSetUploadPartListItem::fromJsonObject(QJsonObject json) {

    m_part_number_isValid = ::OpenAPI::fromJsonValue(m_part_number, json[QString("partNumber")]);
    m_part_number_isSet = !json[QString("partNumber")].isNull() && m_part_number_isValid;

    m_part_size_isValid = ::OpenAPI::fromJsonValue(m_part_size, json[QString("partSize")]);
    m_part_size_isSet = !json[QString("partSize")].isNull() && m_part_size_isValid;

    m_part_source_isValid = ::OpenAPI::fromJsonValue(m_part_source, json[QString("partSource")]);
    m_part_source_isSet = !json[QString("partSource")].isNull() && m_part_source_isValid;

    m_checksum_isValid = ::OpenAPI::fromJsonValue(m_checksum, json[QString("checksum")]);
    m_checksum_isSet = !json[QString("checksum")].isNull() && m_checksum_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("lastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("lastUpdatedTime")].isNull() && m_last_updated_time_isValid;
}

QString OAIReadSetUploadPartListItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReadSetUploadPartListItem::asJsonObject() const {
    QJsonObject obj;
    if (m_part_number_isSet) {
        obj.insert(QString("partNumber"), ::OpenAPI::toJsonValue(m_part_number));
    }
    if (m_part_size_isSet) {
        obj.insert(QString("partSize"), ::OpenAPI::toJsonValue(m_part_size));
    }
    if (m_part_source.isSet()) {
        obj.insert(QString("partSource"), ::OpenAPI::toJsonValue(m_part_source));
    }
    if (m_checksum_isSet) {
        obj.insert(QString("checksum"), ::OpenAPI::toJsonValue(m_checksum));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("lastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    return obj;
}

qint32 OAIReadSetUploadPartListItem::getPartNumber() const {
    return m_part_number;
}
void OAIReadSetUploadPartListItem::setPartNumber(const qint32 &part_number) {
    m_part_number = part_number;
    m_part_number_isSet = true;
}

bool OAIReadSetUploadPartListItem::is_part_number_Set() const{
    return m_part_number_isSet;
}

bool OAIReadSetUploadPartListItem::is_part_number_Valid() const{
    return m_part_number_isValid;
}

qint32 OAIReadSetUploadPartListItem::getPartSize() const {
    return m_part_size;
}
void OAIReadSetUploadPartListItem::setPartSize(const qint32 &part_size) {
    m_part_size = part_size;
    m_part_size_isSet = true;
}

bool OAIReadSetUploadPartListItem::is_part_size_Set() const{
    return m_part_size_isSet;
}

bool OAIReadSetUploadPartListItem::is_part_size_Valid() const{
    return m_part_size_isValid;
}

OAIReadSetPartSource OAIReadSetUploadPartListItem::getPartSource() const {
    return m_part_source;
}
void OAIReadSetUploadPartListItem::setPartSource(const OAIReadSetPartSource &part_source) {
    m_part_source = part_source;
    m_part_source_isSet = true;
}

bool OAIReadSetUploadPartListItem::is_part_source_Set() const{
    return m_part_source_isSet;
}

bool OAIReadSetUploadPartListItem::is_part_source_Valid() const{
    return m_part_source_isValid;
}

QString OAIReadSetUploadPartListItem::getChecksum() const {
    return m_checksum;
}
void OAIReadSetUploadPartListItem::setChecksum(const QString &checksum) {
    m_checksum = checksum;
    m_checksum_isSet = true;
}

bool OAIReadSetUploadPartListItem::is_checksum_Set() const{
    return m_checksum_isSet;
}

bool OAIReadSetUploadPartListItem::is_checksum_Valid() const{
    return m_checksum_isValid;
}

QDateTime OAIReadSetUploadPartListItem::getCreationTime() const {
    return m_creation_time;
}
void OAIReadSetUploadPartListItem::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIReadSetUploadPartListItem::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIReadSetUploadPartListItem::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIReadSetUploadPartListItem::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIReadSetUploadPartListItem::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIReadSetUploadPartListItem::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIReadSetUploadPartListItem::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

bool OAIReadSetUploadPartListItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_part_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_part_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_part_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_checksum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReadSetUploadPartListItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_part_number_isValid && m_part_size_isValid && m_part_source_isValid && m_checksum_isValid && true;
}

} // namespace OpenAPI
