/**
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRunListItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRunListItem::OAIRunListItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRunListItem::OAIRunListItem() {
    this->initializeModel();
}

OAIRunListItem::~OAIRunListItem() {}

void OAIRunListItem::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_workflow_id_isSet = false;
    m_workflow_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_storage_capacity_isSet = false;
    m_storage_capacity_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_stop_time_isSet = false;
    m_stop_time_isValid = false;
}

void OAIRunListItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRunListItem::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_workflow_id_isValid = ::OpenAPI::fromJsonValue(m_workflow_id, json[QString("workflowId")]);
    m_workflow_id_isSet = !json[QString("workflowId")].isNull() && m_workflow_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_storage_capacity_isValid = ::OpenAPI::fromJsonValue(m_storage_capacity, json[QString("storageCapacity")]);
    m_storage_capacity_isSet = !json[QString("storageCapacity")].isNull() && m_storage_capacity_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_stop_time_isValid = ::OpenAPI::fromJsonValue(m_stop_time, json[QString("stopTime")]);
    m_stop_time_isSet = !json[QString("stopTime")].isNull() && m_stop_time_isValid;
}

QString OAIRunListItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRunListItem::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_workflow_id_isSet) {
        obj.insert(QString("workflowId"), ::OpenAPI::toJsonValue(m_workflow_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_storage_capacity_isSet) {
        obj.insert(QString("storageCapacity"), ::OpenAPI::toJsonValue(m_storage_capacity));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_stop_time_isSet) {
        obj.insert(QString("stopTime"), ::OpenAPI::toJsonValue(m_stop_time));
    }
    return obj;
}

QString OAIRunListItem::getArn() const {
    return m_arn;
}
void OAIRunListItem::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIRunListItem::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIRunListItem::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIRunListItem::getId() const {
    return m_id;
}
void OAIRunListItem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRunListItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRunListItem::is_id_Valid() const{
    return m_id_isValid;
}

OAIRunStatus OAIRunListItem::getStatus() const {
    return m_status;
}
void OAIRunListItem::setStatus(const OAIRunStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRunListItem::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRunListItem::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIRunListItem::getWorkflowId() const {
    return m_workflow_id;
}
void OAIRunListItem::setWorkflowId(const QString &workflow_id) {
    m_workflow_id = workflow_id;
    m_workflow_id_isSet = true;
}

bool OAIRunListItem::is_workflow_id_Set() const{
    return m_workflow_id_isSet;
}

bool OAIRunListItem::is_workflow_id_Valid() const{
    return m_workflow_id_isValid;
}

QString OAIRunListItem::getName() const {
    return m_name;
}
void OAIRunListItem::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRunListItem::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRunListItem::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIRunListItem::getPriority() const {
    return m_priority;
}
void OAIRunListItem::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIRunListItem::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIRunListItem::is_priority_Valid() const{
    return m_priority_isValid;
}

qint32 OAIRunListItem::getStorageCapacity() const {
    return m_storage_capacity;
}
void OAIRunListItem::setStorageCapacity(const qint32 &storage_capacity) {
    m_storage_capacity = storage_capacity;
    m_storage_capacity_isSet = true;
}

bool OAIRunListItem::is_storage_capacity_Set() const{
    return m_storage_capacity_isSet;
}

bool OAIRunListItem::is_storage_capacity_Valid() const{
    return m_storage_capacity_isValid;
}

QDateTime OAIRunListItem::getCreationTime() const {
    return m_creation_time;
}
void OAIRunListItem::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIRunListItem::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIRunListItem::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIRunListItem::getStartTime() const {
    return m_start_time;
}
void OAIRunListItem::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIRunListItem::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIRunListItem::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIRunListItem::getStopTime() const {
    return m_stop_time;
}
void OAIRunListItem::setStopTime(const QDateTime &stop_time) {
    m_stop_time = stop_time;
    m_stop_time_isSet = true;
}

bool OAIRunListItem::is_stop_time_Set() const{
    return m_stop_time_isSet;
}

bool OAIRunListItem::is_stop_time_Valid() const{
    return m_stop_time_isValid;
}

bool OAIRunListItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRunListItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
