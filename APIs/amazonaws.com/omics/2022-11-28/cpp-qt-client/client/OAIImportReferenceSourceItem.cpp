/**
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportReferenceSourceItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportReferenceSourceItem::OAIImportReferenceSourceItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportReferenceSourceItem::OAIImportReferenceSourceItem() {
    this->initializeModel();
}

OAIImportReferenceSourceItem::~OAIImportReferenceSourceItem() {}

void OAIImportReferenceSourceItem::initializeModel() {

    m_source_file_isSet = false;
    m_source_file_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIImportReferenceSourceItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportReferenceSourceItem::fromJsonObject(QJsonObject json) {

    m_source_file_isValid = ::OpenAPI::fromJsonValue(m_source_file, json[QString("sourceFile")]);
    m_source_file_isSet = !json[QString("sourceFile")].isNull() && m_source_file_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("statusMessage")]);
    m_status_message_isSet = !json[QString("statusMessage")].isNull() && m_status_message_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIImportReferenceSourceItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportReferenceSourceItem::asJsonObject() const {
    QJsonObject obj;
    if (m_source_file_isSet) {
        obj.insert(QString("sourceFile"), ::OpenAPI::toJsonValue(m_source_file));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("statusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIImportReferenceSourceItem::getSourceFile() const {
    return m_source_file;
}
void OAIImportReferenceSourceItem::setSourceFile(const QString &source_file) {
    m_source_file = source_file;
    m_source_file_isSet = true;
}

bool OAIImportReferenceSourceItem::is_source_file_Set() const{
    return m_source_file_isSet;
}

bool OAIImportReferenceSourceItem::is_source_file_Valid() const{
    return m_source_file_isValid;
}

OAIReferenceImportJobItemStatus OAIImportReferenceSourceItem::getStatus() const {
    return m_status;
}
void OAIImportReferenceSourceItem::setStatus(const OAIReferenceImportJobItemStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIImportReferenceSourceItem::is_status_Set() const{
    return m_status_isSet;
}

bool OAIImportReferenceSourceItem::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIImportReferenceSourceItem::getStatusMessage() const {
    return m_status_message;
}
void OAIImportReferenceSourceItem::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIImportReferenceSourceItem::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIImportReferenceSourceItem::is_status_message_Valid() const{
    return m_status_message_isValid;
}

QString OAIImportReferenceSourceItem::getName() const {
    return m_name;
}
void OAIImportReferenceSourceItem::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIImportReferenceSourceItem::is_name_Set() const{
    return m_name_isSet;
}

bool OAIImportReferenceSourceItem::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIImportReferenceSourceItem::getDescription() const {
    return m_description;
}
void OAIImportReferenceSourceItem::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIImportReferenceSourceItem::is_description_Set() const{
    return m_description_isSet;
}

bool OAIImportReferenceSourceItem::is_description_Valid() const{
    return m_description_isValid;
}

QMap OAIImportReferenceSourceItem::getTags() const {
    return m_tags;
}
void OAIImportReferenceSourceItem::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIImportReferenceSourceItem::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIImportReferenceSourceItem::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIImportReferenceSourceItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportReferenceSourceItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_isValid && true;
}

} // namespace OpenAPI
