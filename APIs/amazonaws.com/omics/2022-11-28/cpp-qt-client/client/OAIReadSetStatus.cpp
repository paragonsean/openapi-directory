/**
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReadSetStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReadSetStatus::OAIReadSetStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReadSetStatus::OAIReadSetStatus() {
    this->initializeModel();
}

OAIReadSetStatus::~OAIReadSetStatus() {}

void OAIReadSetStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIReadSetStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIReadSetStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ARCHIVED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReadSetStatus::ARCHIVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACTIVATING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReadSetStatus::ACTIVATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACTIVE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReadSetStatus::ACTIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReadSetStatus::DELETING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReadSetStatus::DELETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PROCESSING_UPLOAD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReadSetStatus::PROCESSING_UPLOAD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UPLOAD_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReadSetStatus::UPLOAD_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIReadSetStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIReadSetStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIReadSetStatus::ARCHIVED:
            val = "ARCHIVED";
            break;
        case eOAIReadSetStatus::ACTIVATING:
            val = "ACTIVATING";
            break;
        case eOAIReadSetStatus::ACTIVE:
            val = "ACTIVE";
            break;
        case eOAIReadSetStatus::DELETING:
            val = "DELETING";
            break;
        case eOAIReadSetStatus::DELETED:
            val = "DELETED";
            break;
        case eOAIReadSetStatus::PROCESSING_UPLOAD:
            val = "PROCESSING_UPLOAD";
            break;
        case eOAIReadSetStatus::UPLOAD_FAILED:
            val = "UPLOAD_FAILED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIReadSetStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIReadSetStatus::eOAIReadSetStatus OAIReadSetStatus::getValue() const {
    return m_value;
}

void OAIReadSetStatus::setValue(const OAIReadSetStatus::eOAIReadSetStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIReadSetStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIReadSetStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
