/**
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskStatus::OAITaskStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskStatus::OAITaskStatus() {
    this->initializeModel();
}

OAITaskStatus::~OAITaskStatus() {}

void OAITaskStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITaskStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITaskStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PENDING", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaskStatus::PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STARTING", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaskStatus::STARTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RUNNING", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaskStatus::RUNNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STOPPING", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaskStatus::STOPPING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COMPLETED", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaskStatus::COMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CANCELLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaskStatus::CANCELLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAITaskStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITaskStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITaskStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITaskStatus::PENDING:
            val = "PENDING";
            break;
        case eOAITaskStatus::STARTING:
            val = "STARTING";
            break;
        case eOAITaskStatus::RUNNING:
            val = "RUNNING";
            break;
        case eOAITaskStatus::STOPPING:
            val = "STOPPING";
            break;
        case eOAITaskStatus::COMPLETED:
            val = "COMPLETED";
            break;
        case eOAITaskStatus::CANCELLED:
            val = "CANCELLED";
            break;
        case eOAITaskStatus::FAILED:
            val = "FAILED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITaskStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITaskStatus::eOAITaskStatus OAITaskStatus::getValue() const {
    return m_value;
}

void OAITaskStatus::setValue(const OAITaskStatus::eOAITaskStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITaskStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAITaskStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
