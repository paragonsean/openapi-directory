/**
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReadOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReadOptions::OAIReadOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReadOptions::OAIReadOptions() {
    this->initializeModel();
}

OAIReadOptions::~OAIReadOptions() {}

void OAIReadOptions::initializeModel() {

    m_sep_isSet = false;
    m_sep_isValid = false;

    m_encoding_isSet = false;
    m_encoding_isValid = false;

    m_quote_isSet = false;
    m_quote_isValid = false;

    m_quote_all_isSet = false;
    m_quote_all_isValid = false;

    m_escape_isSet = false;
    m_escape_isValid = false;

    m_escape_quotes_isSet = false;
    m_escape_quotes_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_header_isSet = false;
    m_header_isValid = false;

    m_line_sep_isSet = false;
    m_line_sep_isValid = false;
}

void OAIReadOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReadOptions::fromJsonObject(QJsonObject json) {

    m_sep_isValid = ::OpenAPI::fromJsonValue(m_sep, json[QString("sep")]);
    m_sep_isSet = !json[QString("sep")].isNull() && m_sep_isValid;

    m_encoding_isValid = ::OpenAPI::fromJsonValue(m_encoding, json[QString("encoding")]);
    m_encoding_isSet = !json[QString("encoding")].isNull() && m_encoding_isValid;

    m_quote_isValid = ::OpenAPI::fromJsonValue(m_quote, json[QString("quote")]);
    m_quote_isSet = !json[QString("quote")].isNull() && m_quote_isValid;

    m_quote_all_isValid = ::OpenAPI::fromJsonValue(m_quote_all, json[QString("quoteAll")]);
    m_quote_all_isSet = !json[QString("quoteAll")].isNull() && m_quote_all_isValid;

    m_escape_isValid = ::OpenAPI::fromJsonValue(m_escape, json[QString("escape")]);
    m_escape_isSet = !json[QString("escape")].isNull() && m_escape_isValid;

    m_escape_quotes_isValid = ::OpenAPI::fromJsonValue(m_escape_quotes, json[QString("escapeQuotes")]);
    m_escape_quotes_isSet = !json[QString("escapeQuotes")].isNull() && m_escape_quotes_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_header_isValid = ::OpenAPI::fromJsonValue(m_header, json[QString("header")]);
    m_header_isSet = !json[QString("header")].isNull() && m_header_isValid;

    m_line_sep_isValid = ::OpenAPI::fromJsonValue(m_line_sep, json[QString("lineSep")]);
    m_line_sep_isSet = !json[QString("lineSep")].isNull() && m_line_sep_isValid;
}

QString OAIReadOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReadOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_sep_isSet) {
        obj.insert(QString("sep"), ::OpenAPI::toJsonValue(m_sep));
    }
    if (m_encoding_isSet) {
        obj.insert(QString("encoding"), ::OpenAPI::toJsonValue(m_encoding));
    }
    if (m_quote_isSet) {
        obj.insert(QString("quote"), ::OpenAPI::toJsonValue(m_quote));
    }
    if (m_quote_all_isSet) {
        obj.insert(QString("quoteAll"), ::OpenAPI::toJsonValue(m_quote_all));
    }
    if (m_escape_isSet) {
        obj.insert(QString("escape"), ::OpenAPI::toJsonValue(m_escape));
    }
    if (m_escape_quotes_isSet) {
        obj.insert(QString("escapeQuotes"), ::OpenAPI::toJsonValue(m_escape_quotes));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_header_isSet) {
        obj.insert(QString("header"), ::OpenAPI::toJsonValue(m_header));
    }
    if (m_line_sep_isSet) {
        obj.insert(QString("lineSep"), ::OpenAPI::toJsonValue(m_line_sep));
    }
    return obj;
}

QString OAIReadOptions::getSep() const {
    return m_sep;
}
void OAIReadOptions::setSep(const QString &sep) {
    m_sep = sep;
    m_sep_isSet = true;
}

bool OAIReadOptions::is_sep_Set() const{
    return m_sep_isSet;
}

bool OAIReadOptions::is_sep_Valid() const{
    return m_sep_isValid;
}

QString OAIReadOptions::getEncoding() const {
    return m_encoding;
}
void OAIReadOptions::setEncoding(const QString &encoding) {
    m_encoding = encoding;
    m_encoding_isSet = true;
}

bool OAIReadOptions::is_encoding_Set() const{
    return m_encoding_isSet;
}

bool OAIReadOptions::is_encoding_Valid() const{
    return m_encoding_isValid;
}

QString OAIReadOptions::getQuote() const {
    return m_quote;
}
void OAIReadOptions::setQuote(const QString &quote) {
    m_quote = quote;
    m_quote_isSet = true;
}

bool OAIReadOptions::is_quote_Set() const{
    return m_quote_isSet;
}

bool OAIReadOptions::is_quote_Valid() const{
    return m_quote_isValid;
}

bool OAIReadOptions::getQuoteAll() const {
    return m_quote_all;
}
void OAIReadOptions::setQuoteAll(const bool &quote_all) {
    m_quote_all = quote_all;
    m_quote_all_isSet = true;
}

bool OAIReadOptions::is_quote_all_Set() const{
    return m_quote_all_isSet;
}

bool OAIReadOptions::is_quote_all_Valid() const{
    return m_quote_all_isValid;
}

QString OAIReadOptions::getEscape() const {
    return m_escape;
}
void OAIReadOptions::setEscape(const QString &escape) {
    m_escape = escape;
    m_escape_isSet = true;
}

bool OAIReadOptions::is_escape_Set() const{
    return m_escape_isSet;
}

bool OAIReadOptions::is_escape_Valid() const{
    return m_escape_isValid;
}

bool OAIReadOptions::getEscapeQuotes() const {
    return m_escape_quotes;
}
void OAIReadOptions::setEscapeQuotes(const bool &escape_quotes) {
    m_escape_quotes = escape_quotes;
    m_escape_quotes_isSet = true;
}

bool OAIReadOptions::is_escape_quotes_Set() const{
    return m_escape_quotes_isSet;
}

bool OAIReadOptions::is_escape_quotes_Valid() const{
    return m_escape_quotes_isValid;
}

QString OAIReadOptions::getComment() const {
    return m_comment;
}
void OAIReadOptions::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIReadOptions::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIReadOptions::is_comment_Valid() const{
    return m_comment_isValid;
}

bool OAIReadOptions::getHeader() const {
    return m_header;
}
void OAIReadOptions::setHeader(const bool &header) {
    m_header = header;
    m_header_isSet = true;
}

bool OAIReadOptions::is_header_Set() const{
    return m_header_isSet;
}

bool OAIReadOptions::is_header_Valid() const{
    return m_header_isValid;
}

QString OAIReadOptions::getLineSep() const {
    return m_line_sep;
}
void OAIReadOptions::setLineSep(const QString &line_sep) {
    m_line_sep = line_sep;
    m_line_sep_isSet = true;
}

bool OAIReadOptions::is_line_sep_Set() const{
    return m_line_sep_isSet;
}

bool OAIReadOptions::is_line_sep_Valid() const{
    return m_line_sep_isValid;
}

bool OAIReadOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sep_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_all_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_escape_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_escape_quotes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_sep_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReadOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
