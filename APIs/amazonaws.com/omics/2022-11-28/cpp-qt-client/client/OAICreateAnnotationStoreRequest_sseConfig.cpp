/**
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAnnotationStoreRequest_sseConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAnnotationStoreRequest_sseConfig::OAICreateAnnotationStoreRequest_sseConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAnnotationStoreRequest_sseConfig::OAICreateAnnotationStoreRequest_sseConfig() {
    this->initializeModel();
}

OAICreateAnnotationStoreRequest_sseConfig::~OAICreateAnnotationStoreRequest_sseConfig() {}

void OAICreateAnnotationStoreRequest_sseConfig::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_key_arn_isSet = false;
    m_key_arn_isValid = false;
}

void OAICreateAnnotationStoreRequest_sseConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAnnotationStoreRequest_sseConfig::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_key_arn_isValid = ::OpenAPI::fromJsonValue(m_key_arn, json[QString("keyArn")]);
    m_key_arn_isSet = !json[QString("keyArn")].isNull() && m_key_arn_isValid;
}

QString OAICreateAnnotationStoreRequest_sseConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAnnotationStoreRequest_sseConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_key_arn_isSet) {
        obj.insert(QString("keyArn"), ::OpenAPI::toJsonValue(m_key_arn));
    }
    return obj;
}

OAIEncryptionType OAICreateAnnotationStoreRequest_sseConfig::getType() const {
    return m_type;
}
void OAICreateAnnotationStoreRequest_sseConfig::setType(const OAIEncryptionType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateAnnotationStoreRequest_sseConfig::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateAnnotationStoreRequest_sseConfig::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICreateAnnotationStoreRequest_sseConfig::getKeyArn() const {
    return m_key_arn;
}
void OAICreateAnnotationStoreRequest_sseConfig::setKeyArn(const QString &key_arn) {
    m_key_arn = key_arn;
    m_key_arn_isSet = true;
}

bool OAICreateAnnotationStoreRequest_sseConfig::is_key_arn_Set() const{
    return m_key_arn_isSet;
}

bool OAICreateAnnotationStoreRequest_sseConfig::is_key_arn_Valid() const{
    return m_key_arn_isValid;
}

bool OAICreateAnnotationStoreRequest_sseConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAnnotationStoreRequest_sseConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
