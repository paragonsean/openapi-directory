/**
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFileInformation::OAIFileInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFileInformation::OAIFileInformation() {
    this->initializeModel();
}

OAIFileInformation::~OAIFileInformation() {}

void OAIFileInformation::initializeModel() {

    m_total_parts_isSet = false;
    m_total_parts_isValid = false;

    m_part_size_isSet = false;
    m_part_size_isValid = false;

    m_content_length_isSet = false;
    m_content_length_isValid = false;
}

void OAIFileInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFileInformation::fromJsonObject(QJsonObject json) {

    m_total_parts_isValid = ::OpenAPI::fromJsonValue(m_total_parts, json[QString("totalParts")]);
    m_total_parts_isSet = !json[QString("totalParts")].isNull() && m_total_parts_isValid;

    m_part_size_isValid = ::OpenAPI::fromJsonValue(m_part_size, json[QString("partSize")]);
    m_part_size_isSet = !json[QString("partSize")].isNull() && m_part_size_isValid;

    m_content_length_isValid = ::OpenAPI::fromJsonValue(m_content_length, json[QString("contentLength")]);
    m_content_length_isSet = !json[QString("contentLength")].isNull() && m_content_length_isValid;
}

QString OAIFileInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFileInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_total_parts_isSet) {
        obj.insert(QString("totalParts"), ::OpenAPI::toJsonValue(m_total_parts));
    }
    if (m_part_size_isSet) {
        obj.insert(QString("partSize"), ::OpenAPI::toJsonValue(m_part_size));
    }
    if (m_content_length_isSet) {
        obj.insert(QString("contentLength"), ::OpenAPI::toJsonValue(m_content_length));
    }
    return obj;
}

qint32 OAIFileInformation::getTotalParts() const {
    return m_total_parts;
}
void OAIFileInformation::setTotalParts(const qint32 &total_parts) {
    m_total_parts = total_parts;
    m_total_parts_isSet = true;
}

bool OAIFileInformation::is_total_parts_Set() const{
    return m_total_parts_isSet;
}

bool OAIFileInformation::is_total_parts_Valid() const{
    return m_total_parts_isValid;
}

qint32 OAIFileInformation::getPartSize() const {
    return m_part_size;
}
void OAIFileInformation::setPartSize(const qint32 &part_size) {
    m_part_size = part_size;
    m_part_size_isSet = true;
}

bool OAIFileInformation::is_part_size_Set() const{
    return m_part_size_isSet;
}

bool OAIFileInformation::is_part_size_Valid() const{
    return m_part_size_isValid;
}

qint32 OAIFileInformation::getContentLength() const {
    return m_content_length;
}
void OAIFileInformation::setContentLength(const qint32 &content_length) {
    m_content_length = content_length;
    m_content_length_isSet = true;
}

bool OAIFileInformation::is_content_length_Set() const{
    return m_content_length_isSet;
}

bool OAIFileInformation::is_content_length_Valid() const{
    return m_content_length_isValid;
}

bool OAIFileInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_total_parts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_part_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_length_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFileInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
