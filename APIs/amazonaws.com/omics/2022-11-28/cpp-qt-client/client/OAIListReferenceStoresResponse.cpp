/**
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListReferenceStoresResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListReferenceStoresResponse::OAIListReferenceStoresResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListReferenceStoresResponse::OAIListReferenceStoresResponse() {
    this->initializeModel();
}

OAIListReferenceStoresResponse::~OAIListReferenceStoresResponse() {}

void OAIListReferenceStoresResponse::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_reference_stores_isSet = false;
    m_reference_stores_isValid = false;
}

void OAIListReferenceStoresResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListReferenceStoresResponse::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_reference_stores_isValid = ::OpenAPI::fromJsonValue(m_reference_stores, json[QString("referenceStores")]);
    m_reference_stores_isSet = !json[QString("referenceStores")].isNull() && m_reference_stores_isValid;
}

QString OAIListReferenceStoresResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListReferenceStoresResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_reference_stores.isSet()) {
        obj.insert(QString("referenceStores"), ::OpenAPI::toJsonValue(m_reference_stores));
    }
    return obj;
}

QString OAIListReferenceStoresResponse::getNextToken() const {
    return m_next_token;
}
void OAIListReferenceStoresResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListReferenceStoresResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListReferenceStoresResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIListReferenceStoresResponse::getReferenceStores() const {
    return m_reference_stores;
}
void OAIListReferenceStoresResponse::setReferenceStores(const QList &reference_stores) {
    m_reference_stores = reference_stores;
    m_reference_stores_isSet = true;
}

bool OAIListReferenceStoresResponse::is_reference_stores_Set() const{
    return m_reference_stores_isSet;
}

bool OAIListReferenceStoresResponse::is_reference_stores_Valid() const{
    return m_reference_stores_isValid;
}

bool OAIListReferenceStoresResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_stores.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListReferenceStoresResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_reference_stores_isValid && true;
}

} // namespace OpenAPI
