/**
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetWorkflowResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetWorkflowResponse::OAIGetWorkflowResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetWorkflowResponse::OAIGetWorkflowResponse() {
    this->initializeModel();
}

OAIGetWorkflowResponse::~OAIGetWorkflowResponse() {}

void OAIGetWorkflowResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_definition_isSet = false;
    m_definition_isValid = false;

    m_main_isSet = false;
    m_main_isValid = false;

    m_digest_isSet = false;
    m_digest_isValid = false;

    m_parameter_template_isSet = false;
    m_parameter_template_isValid = false;

    m_storage_capacity_isSet = false;
    m_storage_capacity_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_accelerators_isSet = false;
    m_accelerators_isValid = false;
}

void OAIGetWorkflowResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetWorkflowResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("engine")]);
    m_engine_isSet = !json[QString("engine")].isNull() && m_engine_isValid;

    m_definition_isValid = ::OpenAPI::fromJsonValue(m_definition, json[QString("definition")]);
    m_definition_isSet = !json[QString("definition")].isNull() && m_definition_isValid;

    m_main_isValid = ::OpenAPI::fromJsonValue(m_main, json[QString("main")]);
    m_main_isSet = !json[QString("main")].isNull() && m_main_isValid;

    m_digest_isValid = ::OpenAPI::fromJsonValue(m_digest, json[QString("digest")]);
    m_digest_isSet = !json[QString("digest")].isNull() && m_digest_isValid;

    m_parameter_template_isValid = ::OpenAPI::fromJsonValue(m_parameter_template, json[QString("parameterTemplate")]);
    m_parameter_template_isSet = !json[QString("parameterTemplate")].isNull() && m_parameter_template_isValid;

    m_storage_capacity_isValid = ::OpenAPI::fromJsonValue(m_storage_capacity, json[QString("storageCapacity")]);
    m_storage_capacity_isSet = !json[QString("storageCapacity")].isNull() && m_storage_capacity_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("statusMessage")]);
    m_status_message_isSet = !json[QString("statusMessage")].isNull() && m_status_message_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_accelerators_isValid = ::OpenAPI::fromJsonValue(m_accelerators, json[QString("accelerators")]);
    m_accelerators_isSet = !json[QString("accelerators")].isNull() && m_accelerators_isValid;
}

QString OAIGetWorkflowResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetWorkflowResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_engine.isSet()) {
        obj.insert(QString("engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_definition_isSet) {
        obj.insert(QString("definition"), ::OpenAPI::toJsonValue(m_definition));
    }
    if (m_main_isSet) {
        obj.insert(QString("main"), ::OpenAPI::toJsonValue(m_main));
    }
    if (m_digest_isSet) {
        obj.insert(QString("digest"), ::OpenAPI::toJsonValue(m_digest));
    }
    if (m_parameter_template.isSet()) {
        obj.insert(QString("parameterTemplate"), ::OpenAPI::toJsonValue(m_parameter_template));
    }
    if (m_storage_capacity_isSet) {
        obj.insert(QString("storageCapacity"), ::OpenAPI::toJsonValue(m_storage_capacity));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("statusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_accelerators.isSet()) {
        obj.insert(QString("accelerators"), ::OpenAPI::toJsonValue(m_accelerators));
    }
    return obj;
}

QString OAIGetWorkflowResponse::getArn() const {
    return m_arn;
}
void OAIGetWorkflowResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIGetWorkflowResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIGetWorkflowResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIGetWorkflowResponse::getId() const {
    return m_id;
}
void OAIGetWorkflowResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetWorkflowResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetWorkflowResponse::is_id_Valid() const{
    return m_id_isValid;
}

OAIWorkflowStatus OAIGetWorkflowResponse::getStatus() const {
    return m_status;
}
void OAIGetWorkflowResponse::setStatus(const OAIWorkflowStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetWorkflowResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetWorkflowResponse::is_status_Valid() const{
    return m_status_isValid;
}

OAIWorkflowType OAIGetWorkflowResponse::getType() const {
    return m_type;
}
void OAIGetWorkflowResponse::setType(const OAIWorkflowType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGetWorkflowResponse::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGetWorkflowResponse::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIGetWorkflowResponse::getName() const {
    return m_name;
}
void OAIGetWorkflowResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetWorkflowResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetWorkflowResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetWorkflowResponse::getDescription() const {
    return m_description;
}
void OAIGetWorkflowResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGetWorkflowResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGetWorkflowResponse::is_description_Valid() const{
    return m_description_isValid;
}

OAIWorkflowEngine OAIGetWorkflowResponse::getEngine() const {
    return m_engine;
}
void OAIGetWorkflowResponse::setEngine(const OAIWorkflowEngine &engine) {
    m_engine = engine;
    m_engine_isSet = true;
}

bool OAIGetWorkflowResponse::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAIGetWorkflowResponse::is_engine_Valid() const{
    return m_engine_isValid;
}

QString OAIGetWorkflowResponse::getDefinition() const {
    return m_definition;
}
void OAIGetWorkflowResponse::setDefinition(const QString &definition) {
    m_definition = definition;
    m_definition_isSet = true;
}

bool OAIGetWorkflowResponse::is_definition_Set() const{
    return m_definition_isSet;
}

bool OAIGetWorkflowResponse::is_definition_Valid() const{
    return m_definition_isValid;
}

QString OAIGetWorkflowResponse::getMain() const {
    return m_main;
}
void OAIGetWorkflowResponse::setMain(const QString &main) {
    m_main = main;
    m_main_isSet = true;
}

bool OAIGetWorkflowResponse::is_main_Set() const{
    return m_main_isSet;
}

bool OAIGetWorkflowResponse::is_main_Valid() const{
    return m_main_isValid;
}

QString OAIGetWorkflowResponse::getDigest() const {
    return m_digest;
}
void OAIGetWorkflowResponse::setDigest(const QString &digest) {
    m_digest = digest;
    m_digest_isSet = true;
}

bool OAIGetWorkflowResponse::is_digest_Set() const{
    return m_digest_isSet;
}

bool OAIGetWorkflowResponse::is_digest_Valid() const{
    return m_digest_isValid;
}

QMap OAIGetWorkflowResponse::getParameterTemplate() const {
    return m_parameter_template;
}
void OAIGetWorkflowResponse::setParameterTemplate(const QMap &parameter_template) {
    m_parameter_template = parameter_template;
    m_parameter_template_isSet = true;
}

bool OAIGetWorkflowResponse::is_parameter_template_Set() const{
    return m_parameter_template_isSet;
}

bool OAIGetWorkflowResponse::is_parameter_template_Valid() const{
    return m_parameter_template_isValid;
}

qint32 OAIGetWorkflowResponse::getStorageCapacity() const {
    return m_storage_capacity;
}
void OAIGetWorkflowResponse::setStorageCapacity(const qint32 &storage_capacity) {
    m_storage_capacity = storage_capacity;
    m_storage_capacity_isSet = true;
}

bool OAIGetWorkflowResponse::is_storage_capacity_Set() const{
    return m_storage_capacity_isSet;
}

bool OAIGetWorkflowResponse::is_storage_capacity_Valid() const{
    return m_storage_capacity_isValid;
}

QDateTime OAIGetWorkflowResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIGetWorkflowResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIGetWorkflowResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIGetWorkflowResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIGetWorkflowResponse::getStatusMessage() const {
    return m_status_message;
}
void OAIGetWorkflowResponse::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIGetWorkflowResponse::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIGetWorkflowResponse::is_status_message_Valid() const{
    return m_status_message_isValid;
}

QMap OAIGetWorkflowResponse::getTags() const {
    return m_tags;
}
void OAIGetWorkflowResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetWorkflowResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetWorkflowResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

QMap OAIGetWorkflowResponse::getMetadata() const {
    return m_metadata;
}
void OAIGetWorkflowResponse::setMetadata(const QMap &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIGetWorkflowResponse::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIGetWorkflowResponse::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIAccelerators OAIGetWorkflowResponse::getAccelerators() const {
    return m_accelerators;
}
void OAIGetWorkflowResponse::setAccelerators(const OAIAccelerators &accelerators) {
    m_accelerators = accelerators;
    m_accelerators_isSet = true;
}

bool OAIGetWorkflowResponse::is_accelerators_Set() const{
    return m_accelerators_isSet;
}

bool OAIGetWorkflowResponse::is_accelerators_Valid() const{
    return m_accelerators_isValid;
}

bool OAIGetWorkflowResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_digest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_template.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_accelerators.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetWorkflowResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
