/**
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnnotationImportJobItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnnotationImportJobItem::OAIAnnotationImportJobItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnnotationImportJobItem::OAIAnnotationImportJobItem() {
    this->initializeModel();
}

OAIAnnotationImportJobItem::~OAIAnnotationImportJobItem() {}

void OAIAnnotationImportJobItem::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_destination_name_isSet = false;
    m_destination_name_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_completion_time_isSet = false;
    m_completion_time_isValid = false;

    m_run_left_normalization_isSet = false;
    m_run_left_normalization_isValid = false;

    m_annotation_fields_isSet = false;
    m_annotation_fields_isValid = false;
}

void OAIAnnotationImportJobItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnnotationImportJobItem::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_destination_name_isValid = ::OpenAPI::fromJsonValue(m_destination_name, json[QString("destinationName")]);
    m_destination_name_isSet = !json[QString("destinationName")].isNull() && m_destination_name_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("roleArn")]);
    m_role_arn_isSet = !json[QString("roleArn")].isNull() && m_role_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_completion_time_isValid = ::OpenAPI::fromJsonValue(m_completion_time, json[QString("completionTime")]);
    m_completion_time_isSet = !json[QString("completionTime")].isNull() && m_completion_time_isValid;

    m_run_left_normalization_isValid = ::OpenAPI::fromJsonValue(m_run_left_normalization, json[QString("runLeftNormalization")]);
    m_run_left_normalization_isSet = !json[QString("runLeftNormalization")].isNull() && m_run_left_normalization_isValid;

    m_annotation_fields_isValid = ::OpenAPI::fromJsonValue(m_annotation_fields, json[QString("annotationFields")]);
    m_annotation_fields_isSet = !json[QString("annotationFields")].isNull() && m_annotation_fields_isValid;
}

QString OAIAnnotationImportJobItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnnotationImportJobItem::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_destination_name_isSet) {
        obj.insert(QString("destinationName"), ::OpenAPI::toJsonValue(m_destination_name));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("roleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_completion_time_isSet) {
        obj.insert(QString("completionTime"), ::OpenAPI::toJsonValue(m_completion_time));
    }
    if (m_run_left_normalization_isSet) {
        obj.insert(QString("runLeftNormalization"), ::OpenAPI::toJsonValue(m_run_left_normalization));
    }
    if (m_annotation_fields.isSet()) {
        obj.insert(QString("annotationFields"), ::OpenAPI::toJsonValue(m_annotation_fields));
    }
    return obj;
}

QString OAIAnnotationImportJobItem::getId() const {
    return m_id;
}
void OAIAnnotationImportJobItem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAnnotationImportJobItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAnnotationImportJobItem::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAnnotationImportJobItem::getDestinationName() const {
    return m_destination_name;
}
void OAIAnnotationImportJobItem::setDestinationName(const QString &destination_name) {
    m_destination_name = destination_name;
    m_destination_name_isSet = true;
}

bool OAIAnnotationImportJobItem::is_destination_name_Set() const{
    return m_destination_name_isSet;
}

bool OAIAnnotationImportJobItem::is_destination_name_Valid() const{
    return m_destination_name_isValid;
}

QString OAIAnnotationImportJobItem::getRoleArn() const {
    return m_role_arn;
}
void OAIAnnotationImportJobItem::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIAnnotationImportJobItem::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIAnnotationImportJobItem::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

OAIJobStatus OAIAnnotationImportJobItem::getStatus() const {
    return m_status;
}
void OAIAnnotationImportJobItem::setStatus(const OAIJobStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAnnotationImportJobItem::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAnnotationImportJobItem::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIAnnotationImportJobItem::getCreationTime() const {
    return m_creation_time;
}
void OAIAnnotationImportJobItem::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIAnnotationImportJobItem::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIAnnotationImportJobItem::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIAnnotationImportJobItem::getUpdateTime() const {
    return m_update_time;
}
void OAIAnnotationImportJobItem::setUpdateTime(const QDateTime &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIAnnotationImportJobItem::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIAnnotationImportJobItem::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QDateTime OAIAnnotationImportJobItem::getCompletionTime() const {
    return m_completion_time;
}
void OAIAnnotationImportJobItem::setCompletionTime(const QDateTime &completion_time) {
    m_completion_time = completion_time;
    m_completion_time_isSet = true;
}

bool OAIAnnotationImportJobItem::is_completion_time_Set() const{
    return m_completion_time_isSet;
}

bool OAIAnnotationImportJobItem::is_completion_time_Valid() const{
    return m_completion_time_isValid;
}

bool OAIAnnotationImportJobItem::getRunLeftNormalization() const {
    return m_run_left_normalization;
}
void OAIAnnotationImportJobItem::setRunLeftNormalization(const bool &run_left_normalization) {
    m_run_left_normalization = run_left_normalization;
    m_run_left_normalization_isSet = true;
}

bool OAIAnnotationImportJobItem::is_run_left_normalization_Set() const{
    return m_run_left_normalization_isSet;
}

bool OAIAnnotationImportJobItem::is_run_left_normalization_Valid() const{
    return m_run_left_normalization_isValid;
}

QMap OAIAnnotationImportJobItem::getAnnotationFields() const {
    return m_annotation_fields;
}
void OAIAnnotationImportJobItem::setAnnotationFields(const QMap &annotation_fields) {
    m_annotation_fields = annotation_fields;
    m_annotation_fields_isSet = true;
}

bool OAIAnnotationImportJobItem::is_annotation_fields_Set() const{
    return m_annotation_fields_isSet;
}

bool OAIAnnotationImportJobItem::is_annotation_fields_Valid() const{
    return m_annotation_fields_isValid;
}

bool OAIAnnotationImportJobItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_left_normalization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_annotation_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnnotationImportJobItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_destination_name_isValid && m_role_arn_isValid && m_status_isValid && m_creation_time_isValid && m_update_time_isValid && true;
}

} // namespace OpenAPI
