/**
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateWorkflowRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateWorkflowRequest::OAICreateWorkflowRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateWorkflowRequest::OAICreateWorkflowRequest() {
    this->initializeModel();
}

OAICreateWorkflowRequest::~OAICreateWorkflowRequest() {}

void OAICreateWorkflowRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_definition_zip_isSet = false;
    m_definition_zip_isValid = false;

    m_definition_uri_isSet = false;
    m_definition_uri_isValid = false;

    m_main_isSet = false;
    m_main_isValid = false;

    m_parameter_template_isSet = false;
    m_parameter_template_isValid = false;

    m_storage_capacity_isSet = false;
    m_storage_capacity_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_accelerators_isSet = false;
    m_accelerators_isValid = false;
}

void OAICreateWorkflowRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateWorkflowRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("engine")]);
    m_engine_isSet = !json[QString("engine")].isNull() && m_engine_isValid;

    m_definition_zip_isValid = ::OpenAPI::fromJsonValue(m_definition_zip, json[QString("definitionZip")]);
    m_definition_zip_isSet = !json[QString("definitionZip")].isNull() && m_definition_zip_isValid;

    m_definition_uri_isValid = ::OpenAPI::fromJsonValue(m_definition_uri, json[QString("definitionUri")]);
    m_definition_uri_isSet = !json[QString("definitionUri")].isNull() && m_definition_uri_isValid;

    m_main_isValid = ::OpenAPI::fromJsonValue(m_main, json[QString("main")]);
    m_main_isSet = !json[QString("main")].isNull() && m_main_isValid;

    m_parameter_template_isValid = ::OpenAPI::fromJsonValue(m_parameter_template, json[QString("parameterTemplate")]);
    m_parameter_template_isSet = !json[QString("parameterTemplate")].isNull() && m_parameter_template_isValid;

    m_storage_capacity_isValid = ::OpenAPI::fromJsonValue(m_storage_capacity, json[QString("storageCapacity")]);
    m_storage_capacity_isSet = !json[QString("storageCapacity")].isNull() && m_storage_capacity_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_accelerators_isValid = ::OpenAPI::fromJsonValue(m_accelerators, json[QString("accelerators")]);
    m_accelerators_isSet = !json[QString("accelerators")].isNull() && m_accelerators_isValid;
}

QString OAICreateWorkflowRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateWorkflowRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_engine.isSet()) {
        obj.insert(QString("engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_definition_zip_isSet) {
        obj.insert(QString("definitionZip"), ::OpenAPI::toJsonValue(m_definition_zip));
    }
    if (m_definition_uri_isSet) {
        obj.insert(QString("definitionUri"), ::OpenAPI::toJsonValue(m_definition_uri));
    }
    if (m_main_isSet) {
        obj.insert(QString("main"), ::OpenAPI::toJsonValue(m_main));
    }
    if (m_parameter_template.isSet()) {
        obj.insert(QString("parameterTemplate"), ::OpenAPI::toJsonValue(m_parameter_template));
    }
    if (m_storage_capacity_isSet) {
        obj.insert(QString("storageCapacity"), ::OpenAPI::toJsonValue(m_storage_capacity));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_accelerators.isSet()) {
        obj.insert(QString("accelerators"), ::OpenAPI::toJsonValue(m_accelerators));
    }
    return obj;
}

QString OAICreateWorkflowRequest::getName() const {
    return m_name;
}
void OAICreateWorkflowRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateWorkflowRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateWorkflowRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateWorkflowRequest::getDescription() const {
    return m_description;
}
void OAICreateWorkflowRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateWorkflowRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateWorkflowRequest::is_description_Valid() const{
    return m_description_isValid;
}

OAIWorkflowEngine OAICreateWorkflowRequest::getEngine() const {
    return m_engine;
}
void OAICreateWorkflowRequest::setEngine(const OAIWorkflowEngine &engine) {
    m_engine = engine;
    m_engine_isSet = true;
}

bool OAICreateWorkflowRequest::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAICreateWorkflowRequest::is_engine_Valid() const{
    return m_engine_isValid;
}

QString OAICreateWorkflowRequest::getDefinitionZip() const {
    return m_definition_zip;
}
void OAICreateWorkflowRequest::setDefinitionZip(const QString &definition_zip) {
    m_definition_zip = definition_zip;
    m_definition_zip_isSet = true;
}

bool OAICreateWorkflowRequest::is_definition_zip_Set() const{
    return m_definition_zip_isSet;
}

bool OAICreateWorkflowRequest::is_definition_zip_Valid() const{
    return m_definition_zip_isValid;
}

QString OAICreateWorkflowRequest::getDefinitionUri() const {
    return m_definition_uri;
}
void OAICreateWorkflowRequest::setDefinitionUri(const QString &definition_uri) {
    m_definition_uri = definition_uri;
    m_definition_uri_isSet = true;
}

bool OAICreateWorkflowRequest::is_definition_uri_Set() const{
    return m_definition_uri_isSet;
}

bool OAICreateWorkflowRequest::is_definition_uri_Valid() const{
    return m_definition_uri_isValid;
}

QString OAICreateWorkflowRequest::getMain() const {
    return m_main;
}
void OAICreateWorkflowRequest::setMain(const QString &main) {
    m_main = main;
    m_main_isSet = true;
}

bool OAICreateWorkflowRequest::is_main_Set() const{
    return m_main_isSet;
}

bool OAICreateWorkflowRequest::is_main_Valid() const{
    return m_main_isValid;
}

QMap OAICreateWorkflowRequest::getParameterTemplate() const {
    return m_parameter_template;
}
void OAICreateWorkflowRequest::setParameterTemplate(const QMap &parameter_template) {
    m_parameter_template = parameter_template;
    m_parameter_template_isSet = true;
}

bool OAICreateWorkflowRequest::is_parameter_template_Set() const{
    return m_parameter_template_isSet;
}

bool OAICreateWorkflowRequest::is_parameter_template_Valid() const{
    return m_parameter_template_isValid;
}

qint32 OAICreateWorkflowRequest::getStorageCapacity() const {
    return m_storage_capacity;
}
void OAICreateWorkflowRequest::setStorageCapacity(const qint32 &storage_capacity) {
    m_storage_capacity = storage_capacity;
    m_storage_capacity_isSet = true;
}

bool OAICreateWorkflowRequest::is_storage_capacity_Set() const{
    return m_storage_capacity_isSet;
}

bool OAICreateWorkflowRequest::is_storage_capacity_Valid() const{
    return m_storage_capacity_isValid;
}

QMap OAICreateWorkflowRequest::getTags() const {
    return m_tags;
}
void OAICreateWorkflowRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateWorkflowRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateWorkflowRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateWorkflowRequest::getRequestId() const {
    return m_request_id;
}
void OAICreateWorkflowRequest::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAICreateWorkflowRequest::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAICreateWorkflowRequest::is_request_id_Valid() const{
    return m_request_id_isValid;
}

OAIAccelerators OAICreateWorkflowRequest::getAccelerators() const {
    return m_accelerators;
}
void OAICreateWorkflowRequest::setAccelerators(const OAIAccelerators &accelerators) {
    m_accelerators = accelerators;
    m_accelerators_isSet = true;
}

bool OAICreateWorkflowRequest::is_accelerators_Set() const{
    return m_accelerators_isSet;
}

bool OAICreateWorkflowRequest::is_accelerators_Valid() const{
    return m_accelerators_isValid;
}

bool OAICreateWorkflowRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_template.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accelerators.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateWorkflowRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_request_id_isValid && true;
}

} // namespace OpenAPI
