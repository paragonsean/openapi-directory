/**
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivateReadSetSourceItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivateReadSetSourceItem::OAIActivateReadSetSourceItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivateReadSetSourceItem::OAIActivateReadSetSourceItem() {
    this->initializeModel();
}

OAIActivateReadSetSourceItem::~OAIActivateReadSetSourceItem() {}

void OAIActivateReadSetSourceItem::initializeModel() {

    m_read_set_id_isSet = false;
    m_read_set_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;
}

void OAIActivateReadSetSourceItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivateReadSetSourceItem::fromJsonObject(QJsonObject json) {

    m_read_set_id_isValid = ::OpenAPI::fromJsonValue(m_read_set_id, json[QString("readSetId")]);
    m_read_set_id_isSet = !json[QString("readSetId")].isNull() && m_read_set_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("statusMessage")]);
    m_status_message_isSet = !json[QString("statusMessage")].isNull() && m_status_message_isValid;
}

QString OAIActivateReadSetSourceItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivateReadSetSourceItem::asJsonObject() const {
    QJsonObject obj;
    if (m_read_set_id_isSet) {
        obj.insert(QString("readSetId"), ::OpenAPI::toJsonValue(m_read_set_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("statusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    return obj;
}

QString OAIActivateReadSetSourceItem::getReadSetId() const {
    return m_read_set_id;
}
void OAIActivateReadSetSourceItem::setReadSetId(const QString &read_set_id) {
    m_read_set_id = read_set_id;
    m_read_set_id_isSet = true;
}

bool OAIActivateReadSetSourceItem::is_read_set_id_Set() const{
    return m_read_set_id_isSet;
}

bool OAIActivateReadSetSourceItem::is_read_set_id_Valid() const{
    return m_read_set_id_isValid;
}

OAIReadSetActivationJobItemStatus OAIActivateReadSetSourceItem::getStatus() const {
    return m_status;
}
void OAIActivateReadSetSourceItem::setStatus(const OAIReadSetActivationJobItemStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIActivateReadSetSourceItem::is_status_Set() const{
    return m_status_isSet;
}

bool OAIActivateReadSetSourceItem::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIActivateReadSetSourceItem::getStatusMessage() const {
    return m_status_message;
}
void OAIActivateReadSetSourceItem::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIActivateReadSetSourceItem::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIActivateReadSetSourceItem::is_status_message_Valid() const{
    return m_status_message_isValid;
}

bool OAIActivateReadSetSourceItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_read_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivateReadSetSourceItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_read_set_id_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
