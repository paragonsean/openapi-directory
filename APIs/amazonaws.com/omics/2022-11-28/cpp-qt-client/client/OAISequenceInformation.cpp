/**
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISequenceInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISequenceInformation::OAISequenceInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISequenceInformation::OAISequenceInformation() {
    this->initializeModel();
}

OAISequenceInformation::~OAISequenceInformation() {}

void OAISequenceInformation::initializeModel() {

    m_total_read_count_isSet = false;
    m_total_read_count_isValid = false;

    m_total_base_count_isSet = false;
    m_total_base_count_isValid = false;

    m_generated_from_isSet = false;
    m_generated_from_isValid = false;

    m_alignment_isSet = false;
    m_alignment_isValid = false;
}

void OAISequenceInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISequenceInformation::fromJsonObject(QJsonObject json) {

    m_total_read_count_isValid = ::OpenAPI::fromJsonValue(m_total_read_count, json[QString("totalReadCount")]);
    m_total_read_count_isSet = !json[QString("totalReadCount")].isNull() && m_total_read_count_isValid;

    m_total_base_count_isValid = ::OpenAPI::fromJsonValue(m_total_base_count, json[QString("totalBaseCount")]);
    m_total_base_count_isSet = !json[QString("totalBaseCount")].isNull() && m_total_base_count_isValid;

    m_generated_from_isValid = ::OpenAPI::fromJsonValue(m_generated_from, json[QString("generatedFrom")]);
    m_generated_from_isSet = !json[QString("generatedFrom")].isNull() && m_generated_from_isValid;

    m_alignment_isValid = ::OpenAPI::fromJsonValue(m_alignment, json[QString("alignment")]);
    m_alignment_isSet = !json[QString("alignment")].isNull() && m_alignment_isValid;
}

QString OAISequenceInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISequenceInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_total_read_count_isSet) {
        obj.insert(QString("totalReadCount"), ::OpenAPI::toJsonValue(m_total_read_count));
    }
    if (m_total_base_count_isSet) {
        obj.insert(QString("totalBaseCount"), ::OpenAPI::toJsonValue(m_total_base_count));
    }
    if (m_generated_from_isSet) {
        obj.insert(QString("generatedFrom"), ::OpenAPI::toJsonValue(m_generated_from));
    }
    if (m_alignment_isSet) {
        obj.insert(QString("alignment"), ::OpenAPI::toJsonValue(m_alignment));
    }
    return obj;
}

qint32 OAISequenceInformation::getTotalReadCount() const {
    return m_total_read_count;
}
void OAISequenceInformation::setTotalReadCount(const qint32 &total_read_count) {
    m_total_read_count = total_read_count;
    m_total_read_count_isSet = true;
}

bool OAISequenceInformation::is_total_read_count_Set() const{
    return m_total_read_count_isSet;
}

bool OAISequenceInformation::is_total_read_count_Valid() const{
    return m_total_read_count_isValid;
}

qint32 OAISequenceInformation::getTotalBaseCount() const {
    return m_total_base_count;
}
void OAISequenceInformation::setTotalBaseCount(const qint32 &total_base_count) {
    m_total_base_count = total_base_count;
    m_total_base_count_isSet = true;
}

bool OAISequenceInformation::is_total_base_count_Set() const{
    return m_total_base_count_isSet;
}

bool OAISequenceInformation::is_total_base_count_Valid() const{
    return m_total_base_count_isValid;
}

QString OAISequenceInformation::getGeneratedFrom() const {
    return m_generated_from;
}
void OAISequenceInformation::setGeneratedFrom(const QString &generated_from) {
    m_generated_from = generated_from;
    m_generated_from_isSet = true;
}

bool OAISequenceInformation::is_generated_from_Set() const{
    return m_generated_from_isSet;
}

bool OAISequenceInformation::is_generated_from_Valid() const{
    return m_generated_from_isValid;
}

QString OAISequenceInformation::getAlignment() const {
    return m_alignment;
}
void OAISequenceInformation::setAlignment(const QString &alignment) {
    m_alignment = alignment;
    m_alignment_isSet = true;
}

bool OAISequenceInformation::is_alignment_Set() const{
    return m_alignment_isSet;
}

bool OAISequenceInformation::is_alignment_Valid() const{
    return m_alignment_isValid;
}

bool OAISequenceInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_total_read_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_base_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generated_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alignment_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISequenceInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
