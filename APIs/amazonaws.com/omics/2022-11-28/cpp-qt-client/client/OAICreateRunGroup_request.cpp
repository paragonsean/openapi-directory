/**
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateRunGroup_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateRunGroup_request::OAICreateRunGroup_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateRunGroup_request::OAICreateRunGroup_request() {
    this->initializeModel();
}

OAICreateRunGroup_request::~OAICreateRunGroup_request() {}

void OAICreateRunGroup_request::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_max_cpus_isSet = false;
    m_max_cpus_isValid = false;

    m_max_runs_isSet = false;
    m_max_runs_isValid = false;

    m_max_duration_isSet = false;
    m_max_duration_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_max_gpus_isSet = false;
    m_max_gpus_isValid = false;
}

void OAICreateRunGroup_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateRunGroup_request::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_max_cpus_isValid = ::OpenAPI::fromJsonValue(m_max_cpus, json[QString("maxCpus")]);
    m_max_cpus_isSet = !json[QString("maxCpus")].isNull() && m_max_cpus_isValid;

    m_max_runs_isValid = ::OpenAPI::fromJsonValue(m_max_runs, json[QString("maxRuns")]);
    m_max_runs_isSet = !json[QString("maxRuns")].isNull() && m_max_runs_isValid;

    m_max_duration_isValid = ::OpenAPI::fromJsonValue(m_max_duration, json[QString("maxDuration")]);
    m_max_duration_isSet = !json[QString("maxDuration")].isNull() && m_max_duration_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_max_gpus_isValid = ::OpenAPI::fromJsonValue(m_max_gpus, json[QString("maxGpus")]);
    m_max_gpus_isSet = !json[QString("maxGpus")].isNull() && m_max_gpus_isValid;
}

QString OAICreateRunGroup_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateRunGroup_request::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_max_cpus_isSet) {
        obj.insert(QString("maxCpus"), ::OpenAPI::toJsonValue(m_max_cpus));
    }
    if (m_max_runs_isSet) {
        obj.insert(QString("maxRuns"), ::OpenAPI::toJsonValue(m_max_runs));
    }
    if (m_max_duration_isSet) {
        obj.insert(QString("maxDuration"), ::OpenAPI::toJsonValue(m_max_duration));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_max_gpus_isSet) {
        obj.insert(QString("maxGpus"), ::OpenAPI::toJsonValue(m_max_gpus));
    }
    return obj;
}

QString OAICreateRunGroup_request::getName() const {
    return m_name;
}
void OAICreateRunGroup_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateRunGroup_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateRunGroup_request::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAICreateRunGroup_request::getMaxCpus() const {
    return m_max_cpus;
}
void OAICreateRunGroup_request::setMaxCpus(const qint32 &max_cpus) {
    m_max_cpus = max_cpus;
    m_max_cpus_isSet = true;
}

bool OAICreateRunGroup_request::is_max_cpus_Set() const{
    return m_max_cpus_isSet;
}

bool OAICreateRunGroup_request::is_max_cpus_Valid() const{
    return m_max_cpus_isValid;
}

qint32 OAICreateRunGroup_request::getMaxRuns() const {
    return m_max_runs;
}
void OAICreateRunGroup_request::setMaxRuns(const qint32 &max_runs) {
    m_max_runs = max_runs;
    m_max_runs_isSet = true;
}

bool OAICreateRunGroup_request::is_max_runs_Set() const{
    return m_max_runs_isSet;
}

bool OAICreateRunGroup_request::is_max_runs_Valid() const{
    return m_max_runs_isValid;
}

qint32 OAICreateRunGroup_request::getMaxDuration() const {
    return m_max_duration;
}
void OAICreateRunGroup_request::setMaxDuration(const qint32 &max_duration) {
    m_max_duration = max_duration;
    m_max_duration_isSet = true;
}

bool OAICreateRunGroup_request::is_max_duration_Set() const{
    return m_max_duration_isSet;
}

bool OAICreateRunGroup_request::is_max_duration_Valid() const{
    return m_max_duration_isValid;
}

QMap<QString, QString> OAICreateRunGroup_request::getTags() const {
    return m_tags;
}
void OAICreateRunGroup_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateRunGroup_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateRunGroup_request::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateRunGroup_request::getRequestId() const {
    return m_request_id;
}
void OAICreateRunGroup_request::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAICreateRunGroup_request::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAICreateRunGroup_request::is_request_id_Valid() const{
    return m_request_id_isValid;
}

qint32 OAICreateRunGroup_request::getMaxGpus() const {
    return m_max_gpus;
}
void OAICreateRunGroup_request::setMaxGpus(const qint32 &max_gpus) {
    m_max_gpus = max_gpus;
    m_max_gpus_isSet = true;
}

bool OAICreateRunGroup_request::is_max_gpus_Set() const{
    return m_max_gpus_isSet;
}

bool OAICreateRunGroup_request::is_max_gpus_Valid() const{
    return m_max_gpus_isValid;
}

bool OAICreateRunGroup_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_cpus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_runs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_gpus_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateRunGroup_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_request_id_isValid && true;
}

} // namespace OpenAPI
