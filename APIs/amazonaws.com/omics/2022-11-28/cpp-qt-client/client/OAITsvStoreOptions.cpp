/**
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITsvStoreOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITsvStoreOptions::OAITsvStoreOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITsvStoreOptions::OAITsvStoreOptions() {
    this->initializeModel();
}

OAITsvStoreOptions::~OAITsvStoreOptions() {}

void OAITsvStoreOptions::initializeModel() {

    m_annotation_type_isSet = false;
    m_annotation_type_isValid = false;

    m_format_to_header_isSet = false;
    m_format_to_header_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;
}

void OAITsvStoreOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITsvStoreOptions::fromJsonObject(QJsonObject json) {

    m_annotation_type_isValid = ::OpenAPI::fromJsonValue(m_annotation_type, json[QString("annotationType")]);
    m_annotation_type_isSet = !json[QString("annotationType")].isNull() && m_annotation_type_isValid;

    m_format_to_header_isValid = ::OpenAPI::fromJsonValue(m_format_to_header, json[QString("formatToHeader")]);
    m_format_to_header_isSet = !json[QString("formatToHeader")].isNull() && m_format_to_header_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;
}

QString OAITsvStoreOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITsvStoreOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_annotation_type.isSet()) {
        obj.insert(QString("annotationType"), ::OpenAPI::toJsonValue(m_annotation_type));
    }
    if (m_format_to_header.isSet()) {
        obj.insert(QString("formatToHeader"), ::OpenAPI::toJsonValue(m_format_to_header));
    }
    if (m_schema.isSet()) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    return obj;
}

OAIAnnotationType OAITsvStoreOptions::getAnnotationType() const {
    return m_annotation_type;
}
void OAITsvStoreOptions::setAnnotationType(const OAIAnnotationType &annotation_type) {
    m_annotation_type = annotation_type;
    m_annotation_type_isSet = true;
}

bool OAITsvStoreOptions::is_annotation_type_Set() const{
    return m_annotation_type_isSet;
}

bool OAITsvStoreOptions::is_annotation_type_Valid() const{
    return m_annotation_type_isValid;
}

QMap OAITsvStoreOptions::getFormatToHeader() const {
    return m_format_to_header;
}
void OAITsvStoreOptions::setFormatToHeader(const QMap &format_to_header) {
    m_format_to_header = format_to_header;
    m_format_to_header_isSet = true;
}

bool OAITsvStoreOptions::is_format_to_header_Set() const{
    return m_format_to_header_isSet;
}

bool OAITsvStoreOptions::is_format_to_header_Valid() const{
    return m_format_to_header_isValid;
}

QList OAITsvStoreOptions::getSchema() const {
    return m_schema;
}
void OAITsvStoreOptions::setSchema(const QList &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAITsvStoreOptions::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAITsvStoreOptions::is_schema_Valid() const{
    return m_schema_isValid;
}

bool OAITsvStoreOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotation_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_to_header.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITsvStoreOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
