/**
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetReadSetMetadataResponse_files.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetReadSetMetadataResponse_files::OAIGetReadSetMetadataResponse_files(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetReadSetMetadataResponse_files::OAIGetReadSetMetadataResponse_files() {
    this->initializeModel();
}

OAIGetReadSetMetadataResponse_files::~OAIGetReadSetMetadataResponse_files() {}

void OAIGetReadSetMetadataResponse_files::initializeModel() {

    m_source1_isSet = false;
    m_source1_isValid = false;

    m_source2_isSet = false;
    m_source2_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;
}

void OAIGetReadSetMetadataResponse_files::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetReadSetMetadataResponse_files::fromJsonObject(QJsonObject json) {

    m_source1_isValid = ::OpenAPI::fromJsonValue(m_source1, json[QString("source1")]);
    m_source1_isSet = !json[QString("source1")].isNull() && m_source1_isValid;

    m_source2_isValid = ::OpenAPI::fromJsonValue(m_source2, json[QString("source2")]);
    m_source2_isSet = !json[QString("source2")].isNull() && m_source2_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;
}

QString OAIGetReadSetMetadataResponse_files::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetReadSetMetadataResponse_files::asJsonObject() const {
    QJsonObject obj;
    if (m_source1.isSet()) {
        obj.insert(QString("source1"), ::OpenAPI::toJsonValue(m_source1));
    }
    if (m_source2.isSet()) {
        obj.insert(QString("source2"), ::OpenAPI::toJsonValue(m_source2));
    }
    if (m_index.isSet()) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    return obj;
}

OAIReadSetFiles_source1 OAIGetReadSetMetadataResponse_files::getSource1() const {
    return m_source1;
}
void OAIGetReadSetMetadataResponse_files::setSource1(const OAIReadSetFiles_source1 &source1) {
    m_source1 = source1;
    m_source1_isSet = true;
}

bool OAIGetReadSetMetadataResponse_files::is_source1_Set() const{
    return m_source1_isSet;
}

bool OAIGetReadSetMetadataResponse_files::is_source1_Valid() const{
    return m_source1_isValid;
}

OAIReadSetFiles_source2 OAIGetReadSetMetadataResponse_files::getSource2() const {
    return m_source2;
}
void OAIGetReadSetMetadataResponse_files::setSource2(const OAIReadSetFiles_source2 &source2) {
    m_source2 = source2;
    m_source2_isSet = true;
}

bool OAIGetReadSetMetadataResponse_files::is_source2_Set() const{
    return m_source2_isSet;
}

bool OAIGetReadSetMetadataResponse_files::is_source2_Valid() const{
    return m_source2_isValid;
}

OAIReadSetFiles_index OAIGetReadSetMetadataResponse_files::getIndex() const {
    return m_index;
}
void OAIGetReadSetMetadataResponse_files::setIndex(const OAIReadSetFiles_index &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIGetReadSetMetadataResponse_files::is_index_Set() const{
    return m_index_isSet;
}

bool OAIGetReadSetMetadataResponse_files::is_index_Valid() const{
    return m_index_isValid;
}

bool OAIGetReadSetMetadataResponse_files::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source1.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source2.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_index.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetReadSetMetadataResponse_files::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
