/**
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateMultipartReadSetUploadRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateMultipartReadSetUploadRequest::OAICreateMultipartReadSetUploadRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateMultipartReadSetUploadRequest::OAICreateMultipartReadSetUploadRequest() {
    this->initializeModel();
}

OAICreateMultipartReadSetUploadRequest::~OAICreateMultipartReadSetUploadRequest() {}

void OAICreateMultipartReadSetUploadRequest::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_source_file_type_isSet = false;
    m_source_file_type_isValid = false;

    m_subject_id_isSet = false;
    m_subject_id_isValid = false;

    m_sample_id_isSet = false;
    m_sample_id_isValid = false;

    m_generated_from_isSet = false;
    m_generated_from_isValid = false;

    m_reference_arn_isSet = false;
    m_reference_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateMultipartReadSetUploadRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateMultipartReadSetUploadRequest::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_source_file_type_isValid = ::OpenAPI::fromJsonValue(m_source_file_type, json[QString("sourceFileType")]);
    m_source_file_type_isSet = !json[QString("sourceFileType")].isNull() && m_source_file_type_isValid;

    m_subject_id_isValid = ::OpenAPI::fromJsonValue(m_subject_id, json[QString("subjectId")]);
    m_subject_id_isSet = !json[QString("subjectId")].isNull() && m_subject_id_isValid;

    m_sample_id_isValid = ::OpenAPI::fromJsonValue(m_sample_id, json[QString("sampleId")]);
    m_sample_id_isSet = !json[QString("sampleId")].isNull() && m_sample_id_isValid;

    m_generated_from_isValid = ::OpenAPI::fromJsonValue(m_generated_from, json[QString("generatedFrom")]);
    m_generated_from_isSet = !json[QString("generatedFrom")].isNull() && m_generated_from_isValid;

    m_reference_arn_isValid = ::OpenAPI::fromJsonValue(m_reference_arn, json[QString("referenceArn")]);
    m_reference_arn_isSet = !json[QString("referenceArn")].isNull() && m_reference_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateMultipartReadSetUploadRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateMultipartReadSetUploadRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_source_file_type.isSet()) {
        obj.insert(QString("sourceFileType"), ::OpenAPI::toJsonValue(m_source_file_type));
    }
    if (m_subject_id_isSet) {
        obj.insert(QString("subjectId"), ::OpenAPI::toJsonValue(m_subject_id));
    }
    if (m_sample_id_isSet) {
        obj.insert(QString("sampleId"), ::OpenAPI::toJsonValue(m_sample_id));
    }
    if (m_generated_from_isSet) {
        obj.insert(QString("generatedFrom"), ::OpenAPI::toJsonValue(m_generated_from));
    }
    if (m_reference_arn_isSet) {
        obj.insert(QString("referenceArn"), ::OpenAPI::toJsonValue(m_reference_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateMultipartReadSetUploadRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateMultipartReadSetUploadRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateMultipartReadSetUploadRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateMultipartReadSetUploadRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

OAIFileType OAICreateMultipartReadSetUploadRequest::getSourceFileType() const {
    return m_source_file_type;
}
void OAICreateMultipartReadSetUploadRequest::setSourceFileType(const OAIFileType &source_file_type) {
    m_source_file_type = source_file_type;
    m_source_file_type_isSet = true;
}

bool OAICreateMultipartReadSetUploadRequest::is_source_file_type_Set() const{
    return m_source_file_type_isSet;
}

bool OAICreateMultipartReadSetUploadRequest::is_source_file_type_Valid() const{
    return m_source_file_type_isValid;
}

QString OAICreateMultipartReadSetUploadRequest::getSubjectId() const {
    return m_subject_id;
}
void OAICreateMultipartReadSetUploadRequest::setSubjectId(const QString &subject_id) {
    m_subject_id = subject_id;
    m_subject_id_isSet = true;
}

bool OAICreateMultipartReadSetUploadRequest::is_subject_id_Set() const{
    return m_subject_id_isSet;
}

bool OAICreateMultipartReadSetUploadRequest::is_subject_id_Valid() const{
    return m_subject_id_isValid;
}

QString OAICreateMultipartReadSetUploadRequest::getSampleId() const {
    return m_sample_id;
}
void OAICreateMultipartReadSetUploadRequest::setSampleId(const QString &sample_id) {
    m_sample_id = sample_id;
    m_sample_id_isSet = true;
}

bool OAICreateMultipartReadSetUploadRequest::is_sample_id_Set() const{
    return m_sample_id_isSet;
}

bool OAICreateMultipartReadSetUploadRequest::is_sample_id_Valid() const{
    return m_sample_id_isValid;
}

QString OAICreateMultipartReadSetUploadRequest::getGeneratedFrom() const {
    return m_generated_from;
}
void OAICreateMultipartReadSetUploadRequest::setGeneratedFrom(const QString &generated_from) {
    m_generated_from = generated_from;
    m_generated_from_isSet = true;
}

bool OAICreateMultipartReadSetUploadRequest::is_generated_from_Set() const{
    return m_generated_from_isSet;
}

bool OAICreateMultipartReadSetUploadRequest::is_generated_from_Valid() const{
    return m_generated_from_isValid;
}

QString OAICreateMultipartReadSetUploadRequest::getReferenceArn() const {
    return m_reference_arn;
}
void OAICreateMultipartReadSetUploadRequest::setReferenceArn(const QString &reference_arn) {
    m_reference_arn = reference_arn;
    m_reference_arn_isSet = true;
}

bool OAICreateMultipartReadSetUploadRequest::is_reference_arn_Set() const{
    return m_reference_arn_isSet;
}

bool OAICreateMultipartReadSetUploadRequest::is_reference_arn_Valid() const{
    return m_reference_arn_isValid;
}

QString OAICreateMultipartReadSetUploadRequest::getName() const {
    return m_name;
}
void OAICreateMultipartReadSetUploadRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateMultipartReadSetUploadRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateMultipartReadSetUploadRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateMultipartReadSetUploadRequest::getDescription() const {
    return m_description;
}
void OAICreateMultipartReadSetUploadRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateMultipartReadSetUploadRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateMultipartReadSetUploadRequest::is_description_Valid() const{
    return m_description_isValid;
}

QMap OAICreateMultipartReadSetUploadRequest::getTags() const {
    return m_tags;
}
void OAICreateMultipartReadSetUploadRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateMultipartReadSetUploadRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateMultipartReadSetUploadRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateMultipartReadSetUploadRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_file_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generated_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateMultipartReadSetUploadRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_file_type_isValid && m_subject_id_isValid && m_sample_id_isValid && m_reference_arn_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
