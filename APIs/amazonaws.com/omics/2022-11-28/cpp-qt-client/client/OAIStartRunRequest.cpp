/**
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartRunRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartRunRequest::OAIStartRunRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartRunRequest::OAIStartRunRequest() {
    this->initializeModel();
}

OAIStartRunRequest::~OAIStartRunRequest() {}

void OAIStartRunRequest::initializeModel() {

    m_workflow_id_isSet = false;
    m_workflow_id_isValid = false;

    m_workflow_type_isSet = false;
    m_workflow_type_isValid = false;

    m_run_id_isSet = false;
    m_run_id_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_run_group_id_isSet = false;
    m_run_group_id_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_storage_capacity_isSet = false;
    m_storage_capacity_isValid = false;

    m_output_uri_isSet = false;
    m_output_uri_isValid = false;

    m_log_level_isSet = false;
    m_log_level_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAIStartRunRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartRunRequest::fromJsonObject(QJsonObject json) {

    m_workflow_id_isValid = ::OpenAPI::fromJsonValue(m_workflow_id, json[QString("workflowId")]);
    m_workflow_id_isSet = !json[QString("workflowId")].isNull() && m_workflow_id_isValid;

    m_workflow_type_isValid = ::OpenAPI::fromJsonValue(m_workflow_type, json[QString("workflowType")]);
    m_workflow_type_isSet = !json[QString("workflowType")].isNull() && m_workflow_type_isValid;

    m_run_id_isValid = ::OpenAPI::fromJsonValue(m_run_id, json[QString("runId")]);
    m_run_id_isSet = !json[QString("runId")].isNull() && m_run_id_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("roleArn")]);
    m_role_arn_isSet = !json[QString("roleArn")].isNull() && m_role_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_run_group_id_isValid = ::OpenAPI::fromJsonValue(m_run_group_id, json[QString("runGroupId")]);
    m_run_group_id_isSet = !json[QString("runGroupId")].isNull() && m_run_group_id_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_storage_capacity_isValid = ::OpenAPI::fromJsonValue(m_storage_capacity, json[QString("storageCapacity")]);
    m_storage_capacity_isSet = !json[QString("storageCapacity")].isNull() && m_storage_capacity_isValid;

    m_output_uri_isValid = ::OpenAPI::fromJsonValue(m_output_uri, json[QString("outputUri")]);
    m_output_uri_isSet = !json[QString("outputUri")].isNull() && m_output_uri_isValid;

    m_log_level_isValid = ::OpenAPI::fromJsonValue(m_log_level, json[QString("logLevel")]);
    m_log_level_isSet = !json[QString("logLevel")].isNull() && m_log_level_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;
}

QString OAIStartRunRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartRunRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_workflow_id_isSet) {
        obj.insert(QString("workflowId"), ::OpenAPI::toJsonValue(m_workflow_id));
    }
    if (m_workflow_type.isSet()) {
        obj.insert(QString("workflowType"), ::OpenAPI::toJsonValue(m_workflow_type));
    }
    if (m_run_id_isSet) {
        obj.insert(QString("runId"), ::OpenAPI::toJsonValue(m_run_id));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("roleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_run_group_id_isSet) {
        obj.insert(QString("runGroupId"), ::OpenAPI::toJsonValue(m_run_group_id));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_storage_capacity_isSet) {
        obj.insert(QString("storageCapacity"), ::OpenAPI::toJsonValue(m_storage_capacity));
    }
    if (m_output_uri_isSet) {
        obj.insert(QString("outputUri"), ::OpenAPI::toJsonValue(m_output_uri));
    }
    if (m_log_level.isSet()) {
        obj.insert(QString("logLevel"), ::OpenAPI::toJsonValue(m_log_level));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

QString OAIStartRunRequest::getWorkflowId() const {
    return m_workflow_id;
}
void OAIStartRunRequest::setWorkflowId(const QString &workflow_id) {
    m_workflow_id = workflow_id;
    m_workflow_id_isSet = true;
}

bool OAIStartRunRequest::is_workflow_id_Set() const{
    return m_workflow_id_isSet;
}

bool OAIStartRunRequest::is_workflow_id_Valid() const{
    return m_workflow_id_isValid;
}

OAIWorkflowType OAIStartRunRequest::getWorkflowType() const {
    return m_workflow_type;
}
void OAIStartRunRequest::setWorkflowType(const OAIWorkflowType &workflow_type) {
    m_workflow_type = workflow_type;
    m_workflow_type_isSet = true;
}

bool OAIStartRunRequest::is_workflow_type_Set() const{
    return m_workflow_type_isSet;
}

bool OAIStartRunRequest::is_workflow_type_Valid() const{
    return m_workflow_type_isValid;
}

QString OAIStartRunRequest::getRunId() const {
    return m_run_id;
}
void OAIStartRunRequest::setRunId(const QString &run_id) {
    m_run_id = run_id;
    m_run_id_isSet = true;
}

bool OAIStartRunRequest::is_run_id_Set() const{
    return m_run_id_isSet;
}

bool OAIStartRunRequest::is_run_id_Valid() const{
    return m_run_id_isValid;
}

QString OAIStartRunRequest::getRoleArn() const {
    return m_role_arn;
}
void OAIStartRunRequest::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIStartRunRequest::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIStartRunRequest::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QString OAIStartRunRequest::getName() const {
    return m_name;
}
void OAIStartRunRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStartRunRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStartRunRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIStartRunRequest::getRunGroupId() const {
    return m_run_group_id;
}
void OAIStartRunRequest::setRunGroupId(const QString &run_group_id) {
    m_run_group_id = run_group_id;
    m_run_group_id_isSet = true;
}

bool OAIStartRunRequest::is_run_group_id_Set() const{
    return m_run_group_id_isSet;
}

bool OAIStartRunRequest::is_run_group_id_Valid() const{
    return m_run_group_id_isValid;
}

qint32 OAIStartRunRequest::getPriority() const {
    return m_priority;
}
void OAIStartRunRequest::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIStartRunRequest::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIStartRunRequest::is_priority_Valid() const{
    return m_priority_isValid;
}

OAIObject OAIStartRunRequest::getParameters() const {
    return m_parameters;
}
void OAIStartRunRequest::setParameters(const OAIObject &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIStartRunRequest::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIStartRunRequest::is_parameters_Valid() const{
    return m_parameters_isValid;
}

qint32 OAIStartRunRequest::getStorageCapacity() const {
    return m_storage_capacity;
}
void OAIStartRunRequest::setStorageCapacity(const qint32 &storage_capacity) {
    m_storage_capacity = storage_capacity;
    m_storage_capacity_isSet = true;
}

bool OAIStartRunRequest::is_storage_capacity_Set() const{
    return m_storage_capacity_isSet;
}

bool OAIStartRunRequest::is_storage_capacity_Valid() const{
    return m_storage_capacity_isValid;
}

QString OAIStartRunRequest::getOutputUri() const {
    return m_output_uri;
}
void OAIStartRunRequest::setOutputUri(const QString &output_uri) {
    m_output_uri = output_uri;
    m_output_uri_isSet = true;
}

bool OAIStartRunRequest::is_output_uri_Set() const{
    return m_output_uri_isSet;
}

bool OAIStartRunRequest::is_output_uri_Valid() const{
    return m_output_uri_isValid;
}

OAIRunLogLevel OAIStartRunRequest::getLogLevel() const {
    return m_log_level;
}
void OAIStartRunRequest::setLogLevel(const OAIRunLogLevel &log_level) {
    m_log_level = log_level;
    m_log_level_isSet = true;
}

bool OAIStartRunRequest::is_log_level_Set() const{
    return m_log_level_isSet;
}

bool OAIStartRunRequest::is_log_level_Valid() const{
    return m_log_level_isValid;
}

QMap OAIStartRunRequest::getTags() const {
    return m_tags;
}
void OAIStartRunRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIStartRunRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIStartRunRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIStartRunRequest::getRequestId() const {
    return m_request_id;
}
void OAIStartRunRequest::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIStartRunRequest::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIStartRunRequest::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAIStartRunRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_workflow_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartRunRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_role_arn_isValid && m_request_id_isValid && true;
}

} // namespace OpenAPI
