/**
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReferenceFiles.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReferenceFiles::OAIReferenceFiles(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReferenceFiles::OAIReferenceFiles() {
    this->initializeModel();
}

OAIReferenceFiles::~OAIReferenceFiles() {}

void OAIReferenceFiles::initializeModel() {

    m_source_isSet = false;
    m_source_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;
}

void OAIReferenceFiles::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReferenceFiles::fromJsonObject(QJsonObject json) {

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;
}

QString OAIReferenceFiles::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReferenceFiles::asJsonObject() const {
    QJsonObject obj;
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_index.isSet()) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    return obj;
}

OAIReferenceFiles_source OAIReferenceFiles::getSource() const {
    return m_source;
}
void OAIReferenceFiles::setSource(const OAIReferenceFiles_source &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIReferenceFiles::is_source_Set() const{
    return m_source_isSet;
}

bool OAIReferenceFiles::is_source_Valid() const{
    return m_source_isValid;
}

OAIReadSetFiles_index OAIReferenceFiles::getIndex() const {
    return m_index;
}
void OAIReferenceFiles::setIndex(const OAIReadSetFiles_index &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIReferenceFiles::is_index_Set() const{
    return m_index_isSet;
}

bool OAIReferenceFiles::is_index_Valid() const{
    return m_index_isValid;
}

bool OAIReferenceFiles::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_index.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReferenceFiles::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
