/**
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListAnnotationImportJobsFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListAnnotationImportJobsFilter::OAIListAnnotationImportJobsFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListAnnotationImportJobsFilter::OAIListAnnotationImportJobsFilter() {
    this->initializeModel();
}

OAIListAnnotationImportJobsFilter::~OAIListAnnotationImportJobsFilter() {}

void OAIListAnnotationImportJobsFilter::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_store_name_isSet = false;
    m_store_name_isValid = false;
}

void OAIListAnnotationImportJobsFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListAnnotationImportJobsFilter::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_store_name_isValid = ::OpenAPI::fromJsonValue(m_store_name, json[QString("storeName")]);
    m_store_name_isSet = !json[QString("storeName")].isNull() && m_store_name_isValid;
}

QString OAIListAnnotationImportJobsFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListAnnotationImportJobsFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_store_name_isSet) {
        obj.insert(QString("storeName"), ::OpenAPI::toJsonValue(m_store_name));
    }
    return obj;
}

OAIJobStatus OAIListAnnotationImportJobsFilter::getStatus() const {
    return m_status;
}
void OAIListAnnotationImportJobsFilter::setStatus(const OAIJobStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIListAnnotationImportJobsFilter::is_status_Set() const{
    return m_status_isSet;
}

bool OAIListAnnotationImportJobsFilter::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIListAnnotationImportJobsFilter::getStoreName() const {
    return m_store_name;
}
void OAIListAnnotationImportJobsFilter::setStoreName(const QString &store_name) {
    m_store_name = store_name;
    m_store_name_isSet = true;
}

bool OAIListAnnotationImportJobsFilter::is_store_name_Set() const{
    return m_store_name_isSet;
}

bool OAIListAnnotationImportJobsFilter::is_store_name_Valid() const{
    return m_store_name_isValid;
}

bool OAIListAnnotationImportJobsFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListAnnotationImportJobsFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
