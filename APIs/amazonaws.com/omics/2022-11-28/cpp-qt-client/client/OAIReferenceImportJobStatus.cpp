/**
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReferenceImportJobStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReferenceImportJobStatus::OAIReferenceImportJobStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReferenceImportJobStatus::OAIReferenceImportJobStatus() {
    this->initializeModel();
}

OAIReferenceImportJobStatus::~OAIReferenceImportJobStatus() {}

void OAIReferenceImportJobStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIReferenceImportJobStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIReferenceImportJobStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("SUBMITTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReferenceImportJobStatus::SUBMITTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReferenceImportJobStatus::IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CANCELLING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReferenceImportJobStatus::CANCELLING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CANCELLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReferenceImportJobStatus::CANCELLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReferenceImportJobStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COMPLETED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReferenceImportJobStatus::COMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COMPLETED_WITH_FAILURES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReferenceImportJobStatus::COMPLETED_WITH_FAILURES;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIReferenceImportJobStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIReferenceImportJobStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIReferenceImportJobStatus::SUBMITTED:
            val = "SUBMITTED";
            break;
        case eOAIReferenceImportJobStatus::IN_PROGRESS:
            val = "IN_PROGRESS";
            break;
        case eOAIReferenceImportJobStatus::CANCELLING:
            val = "CANCELLING";
            break;
        case eOAIReferenceImportJobStatus::CANCELLED:
            val = "CANCELLED";
            break;
        case eOAIReferenceImportJobStatus::FAILED:
            val = "FAILED";
            break;
        case eOAIReferenceImportJobStatus::COMPLETED:
            val = "COMPLETED";
            break;
        case eOAIReferenceImportJobStatus::COMPLETED_WITH_FAILURES:
            val = "COMPLETED_WITH_FAILURES";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIReferenceImportJobStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIReferenceImportJobStatus::eOAIReferenceImportJobStatus OAIReferenceImportJobStatus::getValue() const {
    return m_value;
}

void OAIReferenceImportJobStatus::setValue(const OAIReferenceImportJobStatus::eOAIReferenceImportJobStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIReferenceImportJobStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIReferenceImportJobStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
