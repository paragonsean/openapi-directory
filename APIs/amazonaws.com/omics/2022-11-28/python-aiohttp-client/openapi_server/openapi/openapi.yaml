openapi: 3.0.0
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  description: "This is the <i>AWS HealthOmics API Reference</i>. For an introduction\
    \ to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\"\
    >What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>."
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  termsOfService: https://aws.amazon.com/service-terms/
  title: Amazon Omics
  version: 2022-11-28
  x-release: v4
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: '#FFFFFF'
  x-providerName: amazonaws.com
  x-serviceName: omics
  x-aws-signingName: omics
  x-origin:
  - contentType: application/json
    url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/omics-2022-11-28.normal.json
    converter:
      url: https://github.com/mermade/aws2openapi
      version: 1.0.0
    x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
  - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/omics/
servers:
- description: The Amazon Omics multi-region endpoint
  url: "http://omics.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The Amazon Omics multi-region endpoint
  url: "https://omics.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The Amazon Omics endpoint for China (Beijing) and China (Ningxia)
  url: "http://omics.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
- description: The Amazon Omics endpoint for China (Beijing) and China (Ningxia)
  url: "https://omics.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
security:
- hmac: []
paths:
  /annotationStore:
    post:
      description: Creates an annotation store.
      operationId: create_annotation_store
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAnnotationStore_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAnnotationStoreResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /annotationStore/{name}:
    delete:
      description: Deletes an annotation store.
      operationId: delete_annotation_store
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The store's name.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to force deletion.
        explode: true
        in: query
        name: force
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteAnnotationStoreResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Gets information about an annotation store.
      operationId: get_annotation_store
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The store's name.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAnnotationStoreResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: Updates an annotation store.
      operationId: update_annotation_store
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: A name for the store.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAnnotationStore_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAnnotationStoreResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /annotationStores:
    post:
      description: Retrieves a list of annotation stores.
      operationId: list_annotation_stores
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The maximum number of stores to return in one page of results.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: Specify the pagination token from a previous request to retrieve
          the next page of results.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          maxLength: 10000
          minLength: 1
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListAnnotationStores_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAnnotationStoresResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /import/annotation:
    post:
      description: Starts an annotation import job.
      operationId: start_annotation_import_job
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartAnnotationImportJob_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartAnnotationImportResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /import/annotation/{jobId}:
    delete:
      description: Cancels an annotation import job.
      operationId: cancel_annotation_import_job
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The job's ID.
        explode: false
        in: path
        name: jobId
        required: true
        schema:
          pattern: "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancelAnnotationImportResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Gets information about an annotation import job.
      operationId: get_annotation_import_job
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The job's ID.
        explode: false
        in: path
        name: jobId
        required: true
        schema:
          pattern: "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAnnotationImportResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /import/annotations:
    post:
      description: Retrieves a list of annotation import jobs.
      operationId: list_annotation_import_jobs
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The maximum number of jobs to return in one page of results.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: Specify the pagination token from a previous request to retrieve
          the next page of results.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          maxLength: 10000
          minLength: 1
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListAnnotationImportJobs_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAnnotationImportJobsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /import/variant:
    post:
      description: Starts a variant import job.
      operationId: start_variant_import_job
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartVariantImportJob_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartVariantImportResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /import/variant/{jobId}:
    delete:
      description: Cancels a variant import job.
      operationId: cancel_variant_import_job
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The job's ID.
        explode: false
        in: path
        name: jobId
        required: true
        schema:
          pattern: "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancelVariantImportResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Gets information about a variant import job.
      operationId: get_variant_import_job
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The job's ID.
        explode: false
        in: path
        name: jobId
        required: true
        schema:
          pattern: "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVariantImportResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /import/variants:
    post:
      description: Retrieves a list of variant import jobs.
      operationId: list_variant_import_jobs
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The maximum number of import jobs to return in one page of results.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: Specify the pagination token from a previous request to retrieve
          the next page of results.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          maxLength: 10000
          minLength: 1
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListVariantImportJobs_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVariantImportJobsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /referencestore:
    post:
      description: Creates a reference store.
      operationId: create_reference_store
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReferenceStore_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateReferenceStoreResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /referencestore/{id}:
    delete:
      description: Deletes a genome reference store.
      operationId: delete_reference_store
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The store's ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteReferenceStoreResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Gets information about a reference store.
      operationId: get_reference_store
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The store's ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetReferenceStoreResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /referencestore/{referenceStoreId}/importjob:
    post:
      description: Starts a reference import job.
      operationId: start_reference_import_job
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The job's reference store ID.
        explode: false
        in: path
        name: referenceStoreId
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartReferenceImportJob_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartReferenceImportJobResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /referencestore/{referenceStoreId}/importjob/{id}:
    get:
      description: Gets information about a reference import job.
      operationId: get_reference_import_job
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The job's ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      - description: The job's reference store ID.
        explode: false
        in: path
        name: referenceStoreId
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetReferenceImportJobResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /referencestore/{referenceStoreId}/importjobs:
    post:
      description: Retrieves a list of reference import jobs.
      operationId: list_reference_import_jobs
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The maximum number of jobs to return in one page of results.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: Specify the pagination token from a previous request to retrieve
          the next page of results.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          maxLength: 6144
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          type: string
        style: form
      - description: The job's reference store ID.
        explode: false
        in: path
        name: referenceStoreId
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListReferenceImportJobs_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListReferenceImportJobsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /referencestore/{referenceStoreId}/reference/{id}:
    delete:
      description: Deletes a genome reference.
      operationId: delete_reference
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The reference's ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      - description: The reference's store ID.
        explode: false
        in: path
        name: referenceStoreId
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteReferenceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /referencestore/{referenceStoreId}/reference/{id}#partNumber:
    get:
      description: Gets a reference file.
      operationId: get_reference
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The reference's ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      - description: The reference's store ID.
        explode: false
        in: path
        name: referenceStoreId
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      - description: The range to retrieve.
        explode: false
        in: header
        name: Range
        required: false
        schema:
          maxLength: 127
          minLength: 1
          pattern: "[\\p{N}||\\p{P}]+"
          type: string
        style: simple
      - description: The part number to retrieve.
        explode: true
        in: query
        name: partNumber
        required: true
        schema:
          maximum: 10000
          minimum: 1
          type: integer
        style: form
      - description: The file to retrieve.
        explode: true
        in: query
        name: file
        required: false
        schema:
          enum:
          - SOURCE
          - INDEX
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetReferenceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RangeNotSatisfiableException'
          description: RangeNotSatisfiableException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /referencestore/{referenceStoreId}/reference/{id}/metadata:
    get:
      description: Gets information about a genome reference's metadata.
      operationId: get_reference_metadata
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The reference's ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      - description: The reference's reference store ID.
        explode: false
        in: path
        name: referenceStoreId
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetReferenceMetadataResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /referencestore/{referenceStoreId}/references:
    post:
      description: Retrieves a list of references.
      operationId: list_references
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The references' reference store ID.
        explode: false
        in: path
        name: referenceStoreId
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      - description: The maximum number of references to return in one page of results.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: Specify the pagination token from a previous request to retrieve
          the next page of results.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          maxLength: 6144
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListReferences_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListReferencesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /referencestores:
    post:
      description: Retrieves a list of reference stores.
      operationId: list_reference_stores
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The maximum number of stores to return in one page of results.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: Specify the pagination token from a previous request to retrieve
          the next page of results.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          maxLength: 6144
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListReferenceStores_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListReferenceStoresResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /run:
    get:
      description: Retrieves a list of runs.
      operationId: list_runs
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Filter the list by run name.
        explode: true
        in: query
        name: name
        required: false
        schema:
          maxLength: 128
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          type: string
        style: form
      - description: Filter the list by run group ID.
        explode: true
        in: query
        name: runGroupId
        required: false
        schema:
          maxLength: 18
          minLength: 1
          pattern: "[0-9]+"
          type: string
        style: form
      - description: Specify the pagination token from a previous request to retrieve
          the next page of results.
        explode: true
        in: query
        name: startingToken
        required: false
        schema:
          maxLength: 128
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          type: string
        style: form
      - description: The maximum number of runs to return in one page of results.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: ' The status of a run. '
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - PENDING
          - STARTING
          - RUNNING
          - STOPPING
          - COMPLETED
          - DELETED
          - CANCELLED
          - FAILED
          maxLength: 64
          minLength: 1
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRunsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: Starts a run.
      operationId: start_run
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartRun_request'
        required: true
        x-body-name: body
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartRunResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /run/{id}:
    delete:
      description: Deletes a workflow run.
      operationId: delete_run
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The run's ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 18
          minLength: 1
          pattern: "[0-9]+"
          type: string
        style: simple
      responses:
        "202":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Gets information about a workflow run.
      operationId: get_run
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The run's ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 18
          minLength: 1
          pattern: "[0-9]+"
          type: string
        style: simple
      - description: The run's export format.
        explode: true
        in: query
        name: export
        required: false
        schema:
          items:
            $ref: '#/components/schemas/RunExport'
          maxItems: 32
          minItems: 0
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRunResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /run/{id}/cancel:
    post:
      description: Cancels a run.
      operationId: cancel_run
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The run's ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 18
          minLength: 1
          pattern: "[0-9]+"
          type: string
        style: simple
      responses:
        "202":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /run/{id}/task:
    get:
      description: Retrieves a list of tasks for a run.
      operationId: list_run_tasks
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The run's ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 18
          minLength: 1
          pattern: "[0-9]+"
          type: string
        style: simple
      - description: Filter the list by status.
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - PENDING
          - STARTING
          - RUNNING
          - STOPPING
          - COMPLETED
          - CANCELLED
          - FAILED
          maxLength: 64
          minLength: 1
          type: string
        style: form
      - description: Specify the pagination token from a previous request to retrieve
          the next page of results.
        explode: true
        in: query
        name: startingToken
        required: false
        schema:
          maxLength: 128
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          type: string
        style: form
      - description: The maximum number of run tasks to return in one page of results.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRunTasksResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /run/{id}/task/{taskId}:
    get:
      description: Gets information about a workflow run task.
      operationId: get_run_task
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The task's ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 18
          minLength: 1
          pattern: "[0-9]+"
          type: string
        style: simple
      - description: The task's ID.
        explode: false
        in: path
        name: taskId
        required: true
        schema:
          maxLength: 18
          minLength: 1
          pattern: "[0-9]+"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRunTaskResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /runGroup:
    get:
      description: Retrieves a list of run groups.
      operationId: list_run_groups
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The run groups' name.
        explode: true
        in: query
        name: name
        required: false
        schema:
          maxLength: 128
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          type: string
        style: form
      - description: Specify the pagination token from a previous request to retrieve
          the next page of results.
        explode: true
        in: query
        name: startingToken
        required: false
        schema:
          maxLength: 128
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          type: string
        style: form
      - description: The maximum number of run groups to return in one page of results.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRunGroupsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: Creates a run group.
      operationId: create_run_group
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRunGroup_request'
        required: true
        x-body-name: body
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRunGroupResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /runGroup/{id}:
    delete:
      description: Deletes a workflow run group.
      operationId: delete_run_group
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The run group's ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 18
          minLength: 1
          pattern: "[0-9]+"
          type: string
        style: simple
      responses:
        "202":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Gets information about a workflow run group.
      operationId: get_run_group
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The group's ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 18
          minLength: 1
          pattern: "[0-9]+"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRunGroupResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: Updates a run group.
      operationId: update_run_group
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The group's ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 18
          minLength: 1
          pattern: "[0-9]+"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRunGroup_request'
        required: true
        x-body-name: body
      responses:
        "202":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /sequencestore:
    post:
      description: Creates a sequence store.
      operationId: create_sequence_store
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSequenceStore_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSequenceStoreResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /sequencestore/{id}:
    delete:
      description: Deletes a sequence store.
      operationId: delete_sequence_store
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The sequence store's ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSequenceStoreResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Gets information about a sequence store.
      operationId: get_sequence_store
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The store's ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSequenceStoreResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /sequencestore/{sequenceStoreId}/activationjob:
    post:
      description: "Activates an archived read set. To reduce storage charges, Amazon\
        \ Omics archives unused read sets after 30 days."
      operationId: start_read_set_activation_job
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The read set's sequence store ID.
        explode: false
        in: path
        name: sequenceStoreId
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartReadSetActivationJob_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartReadSetActivationJobResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /sequencestore/{sequenceStoreId}/activationjob/{id}:
    get:
      description: Gets information about a read set activation job.
      operationId: get_read_set_activation_job
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The job's ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      - description: The job's sequence store ID.
        explode: false
        in: path
        name: sequenceStoreId
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetReadSetActivationJobResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /sequencestore/{sequenceStoreId}/activationjobs:
    post:
      description: Retrieves a list of read set activation jobs.
      operationId: list_read_set_activation_jobs
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The read set's sequence store ID.
        explode: false
        in: path
        name: sequenceStoreId
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      - description: The maximum number of read set activation jobs to return in one
          page of results.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: Specify the pagination token from a previous request to retrieve
          the next page of results.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          maxLength: 6144
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListReadSetActivationJobs_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListReadSetActivationJobsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /sequencestore/{sequenceStoreId}/exportjob:
    post:
      description: Exports a read set to Amazon S3.
      operationId: start_read_set_export_job
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The read set's sequence store ID.
        explode: false
        in: path
        name: sequenceStoreId
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartReadSetExportJob_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartReadSetExportJobResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /sequencestore/{sequenceStoreId}/exportjob/{id}:
    get:
      description: Gets information about a read set export job.
      operationId: get_read_set_export_job
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The job's sequence store ID.
        explode: false
        in: path
        name: sequenceStoreId
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      - description: The job's ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetReadSetExportJobResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /sequencestore/{sequenceStoreId}/exportjobs:
    post:
      description: Retrieves a list of read set export jobs.
      operationId: list_read_set_export_jobs
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The jobs' sequence store ID.
        explode: false
        in: path
        name: sequenceStoreId
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      - description: The maximum number of jobs to return in one page of results.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: Specify the pagination token from a previous request to retrieve
          the next page of results.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          maxLength: 6144
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListReadSetExportJobs_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListReadSetExportJobsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /sequencestore/{sequenceStoreId}/importjob:
    post:
      description: Starts a read set import job.
      operationId: start_read_set_import_job
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The read set's sequence store ID.
        explode: false
        in: path
        name: sequenceStoreId
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartReadSetImportJob_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartReadSetImportJobResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /sequencestore/{sequenceStoreId}/importjob/{id}:
    get:
      description: Gets information about a read set import job.
      operationId: get_read_set_import_job
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The job's ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      - description: The job's sequence store ID.
        explode: false
        in: path
        name: sequenceStoreId
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetReadSetImportJobResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /sequencestore/{sequenceStoreId}/importjobs:
    post:
      description: Retrieves a list of read set import jobs.
      operationId: list_read_set_import_jobs
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The maximum number of jobs to return in one page of results.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: Specify the pagination token from a previous request to retrieve
          the next page of results.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          maxLength: 6144
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          type: string
        style: form
      - description: The jobs' sequence store ID.
        explode: false
        in: path
        name: sequenceStoreId
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListReadSetImportJobs_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListReadSetImportJobsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /sequencestore/{sequenceStoreId}/readset/batch/delete:
    post:
      description: Deletes one or more read sets.
      operationId: batch_delete_read_set
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The read sets' sequence store ID.
        explode: false
        in: path
        name: sequenceStoreId
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchDeleteReadSet_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchDeleteReadSetResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /sequencestore/{sequenceStoreId}/readset/{id}#partNumber:
    get:
      description: Gets a file from a read set.
      operationId: get_read_set
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The read set's ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      - description: The read set's sequence store ID.
        explode: false
        in: path
        name: sequenceStoreId
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      - description: The file to retrieve.
        explode: true
        in: query
        name: file
        required: false
        schema:
          enum:
          - SOURCE1
          - SOURCE2
          - INDEX
          type: string
        style: form
      - description: The part number to retrieve.
        explode: true
        in: query
        name: partNumber
        required: true
        schema:
          maximum: 10000
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetReadSetResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RangeNotSatisfiableException'
          description: RangeNotSatisfiableException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /sequencestore/{sequenceStoreId}/readset/{id}/metadata:
    get:
      description: Gets details about a read set.
      operationId: get_read_set_metadata
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The read set's ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      - description: The read set's sequence store ID.
        explode: false
        in: path
        name: sequenceStoreId
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetReadSetMetadataResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /sequencestore/{sequenceStoreId}/readsets:
    post:
      description: Retrieves a list of read sets.
      operationId: list_read_sets
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The jobs' sequence store ID.
        explode: false
        in: path
        name: sequenceStoreId
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      - description: The maximum number of read sets to return in one page of results.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: Specify the pagination token from a previous request to retrieve
          the next page of results.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          maxLength: 6144
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListReadSets_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListReadSetsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /sequencestore/{sequenceStoreId}/upload:
    post:
      description: ' Begins a multipart read set upload. '
      operationId: create_multipart_read_set_upload
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: ' The sequence store ID for the store that is the destination
          of the multipart uploads. '
        explode: false
        in: path
        name: sequenceStoreId
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMultipartReadSetUpload_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateMultipartReadSetUploadResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedOperationException'
          description: NotSupportedOperationException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /sequencestore/{sequenceStoreId}/upload/{uploadId}/abort:
    delete:
      description: ' Stops a multipart upload. '
      operationId: abort_multipart_read_set_upload
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: ' The sequence store ID for the store involved in the multipart
          upload. '
        explode: false
        in: path
        name: sequenceStoreId
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      - description: ' The ID for the multipart upload. '
        explode: false
        in: path
        name: uploadId
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AbortMultipartReadSetUploadResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedOperationException'
          description: NotSupportedOperationException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /sequencestore/{sequenceStoreId}/upload/{uploadId}/complete:
    post:
      description: ' Concludes a multipart upload once you have uploaded all the components. '
      operationId: complete_multipart_read_set_upload
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: ' The sequence store ID for the store involved in the multipart
          upload. '
        explode: false
        in: path
        name: sequenceStoreId
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      - description: ' The ID for the multipart upload. '
        explode: false
        in: path
        name: uploadId
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteMultipartReadSetUpload_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompleteMultipartReadSetUploadResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedOperationException'
          description: NotSupportedOperationException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /sequencestore/{sequenceStoreId}/upload/{uploadId}/part#partSource&partNumber:
    put:
      description: " This operation uploads a specific part of a read set. If you\
        \ upload a new part using a previously used part number, the previously uploaded\
        \ part will be overwritten. "
      operationId: upload_read_set_part
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: ' The Sequence Store ID used for the multipart upload. '
        explode: false
        in: path
        name: sequenceStoreId
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      - description: ' The ID for the initiated multipart upload. '
        explode: false
        in: path
        name: uploadId
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      - description: ' The source file for an upload part. '
        explode: true
        in: query
        name: partSource
        required: true
        schema:
          enum:
          - SOURCE1
          - SOURCE2
          type: string
        style: form
      - description: ' The number of the part being uploaded. '
        explode: true
        in: query
        name: partNumber
        required: true
        schema:
          maximum: 10000
          minimum: 1
          type: integer
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadReadSetPart_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadReadSetPartResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedOperationException'
          description: NotSupportedOperationException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /sequencestore/{sequenceStoreId}/upload/{uploadId}/parts:
    post:
      description: ' This operation will list all parts in a requested multipart upload
        for a sequence store. '
      operationId: list_read_set_upload_parts
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: ' The Sequence Store ID used for the multipart uploads. '
        explode: false
        in: path
        name: sequenceStoreId
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      - description: ' The ID for the initiated multipart upload. '
        explode: false
        in: path
        name: uploadId
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      - description: ' The maximum number of read set upload parts returned in a page. '
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: ' Next token returned in the response of a previous ListReadSetUploadPartsRequest
          call. Used to get the next page of results. '
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          maxLength: 6144
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListReadSetUploadParts_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListReadSetUploadPartsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedOperationException'
          description: NotSupportedOperationException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /sequencestore/{sequenceStoreId}/uploads:
    post:
      description: ' Lists all multipart read set uploads and their statuses. '
      operationId: list_multipart_read_set_uploads
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: ' The Sequence Store ID used for the multipart uploads. '
        explode: false
        in: path
        name: sequenceStoreId
        required: true
        schema:
          maxLength: 36
          minLength: 10
          pattern: "[0-9]+"
          type: string
        style: simple
      - description: ' The maximum number of multipart uploads returned in a page. '
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: ' Next token returned in the response of a previous ListMultipartReadSetUploads
          call. Used to get the next page of results. '
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          maxLength: 6144
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMultipartReadSetUploadsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedOperationException'
          description: NotSupportedOperationException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /sequencestores:
    post:
      description: Retrieves a list of sequence stores.
      operationId: list_sequence_stores
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The maximum number of stores to return in one page of results.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: Specify the pagination token from a previous request to retrieve
          the next page of results.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          maxLength: 6144
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListSequenceStores_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSequenceStoresResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /tags/{resourceArn}:
    get:
      description: Retrieves a list of tags for a resource.
      operationId: list_tags_for_resource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The resource's ARN.
        explode: false
        in: path
        name: resourceArn
        required: true
        schema:
          maxLength: 128
          minLength: 1
          pattern: arn:.+
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: Tags a resource.
      operationId: tag_resource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The resource's ARN.
        explode: false
        in: path
        name: resourceArn
        required: true
        schema:
          maxLength: 128
          minLength: 1
          pattern: arn:.+
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagResource_request'
        required: true
        x-body-name: body
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /tags/{resourceArn}#tagKeys:
    delete:
      description: Removes tags from a resource.
      operationId: untag_resource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The resource's ARN.
        explode: false
        in: path
        name: resourceArn
        required: true
        schema:
          maxLength: 128
          minLength: 1
          pattern: arn:.+
          type: string
        style: simple
      - description: Keys of tags to remove.
        explode: true
        in: query
        name: tagKeys
        required: true
        schema:
          items:
            $ref: '#/components/schemas/TagKey'
          maxItems: 50
          minItems: 0
          type: array
        style: form
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UntagResourceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /variantStore:
    post:
      description: Creates a variant store.
      operationId: create_variant_store
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVariantStore_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVariantStoreResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /variantStore/{name}:
    delete:
      description: Deletes a variant store.
      operationId: delete_variant_store
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The store's name.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to force deletion.
        explode: true
        in: query
        name: force
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteVariantStoreResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Gets information about a variant store.
      operationId: get_variant_store
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The store's name.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVariantStoreResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: Updates a variant store.
      operationId: update_variant_store
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: A name for the store.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAnnotationStore_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateVariantStoreResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /variantStores:
    post:
      description: Retrieves a list of variant stores.
      operationId: list_variant_stores
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The maximum number of stores to return in one page of results.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: Specify the pagination token from a previous request to retrieve
          the next page of results.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          maxLength: 10000
          minLength: 1
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListVariantStores_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVariantStoresResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /workflow:
    get:
      description: Retrieves a list of workflows.
      operationId: list_workflows
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The workflows' type.
        explode: true
        in: query
        name: type
        required: false
        schema:
          enum:
          - PRIVATE
          - READY2RUN
          maxLength: 64
          minLength: 1
          type: string
        style: form
      - description: The workflows' name.
        explode: true
        in: query
        name: name
        required: false
        schema:
          maxLength: 128
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          type: string
        style: form
      - description: Specify the pagination token from a previous request to retrieve
          the next page of results.
        explode: true
        in: query
        name: startingToken
        required: false
        schema:
          maxLength: 128
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          type: string
        style: form
      - description: The maximum number of workflows to return in one page of results.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListWorkflowsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: Creates a workflow.
      operationId: create_workflow
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkflow_request'
        required: true
        x-body-name: body
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateWorkflowResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /workflow/{id}:
    delete:
      description: Deletes a workflow.
      operationId: delete_workflow
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The workflow's ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 18
          minLength: 1
          pattern: "[0-9]+"
          type: string
        style: simple
      responses:
        "202":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Gets information about a workflow.
      operationId: get_workflow
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The workflow's ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 18
          minLength: 1
          pattern: "[0-9]+"
          type: string
        style: simple
      - description: The workflow's type.
        explode: true
        in: query
        name: type
        required: false
        schema:
          enum:
          - PRIVATE
          - READY2RUN
          maxLength: 64
          minLength: 1
          type: string
        style: form
      - description: The export format for the workflow.
        explode: true
        in: query
        name: export
        required: false
        schema:
          items:
            $ref: '#/components/schemas/WorkflowExport'
          maxItems: 32
          minItems: 0
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWorkflowResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    post:
      description: Updates a workflow.
      operationId: update_workflow
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The workflow's ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          maxLength: 18
          minLength: 1
          pattern: "[0-9]+"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWorkflow_request'
        required: true
        x-body-name: body
      responses:
        "202":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
components:
  parameters:
    X-Amz-Content-Sha256:
      explode: false
      in: header
      name: X-Amz-Content-Sha256
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Date:
      explode: false
      in: header
      name: X-Amz-Date
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Algorithm:
      explode: false
      in: header
      name: X-Amz-Algorithm
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Credential:
      explode: false
      in: header
      name: X-Amz-Credential
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Security-Token:
      explode: false
      in: header
      name: X-Amz-Security-Token
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Signature:
      explode: false
      in: header
      name: X-Amz-Signature
      required: false
      schema:
        type: string
      style: simple
    X-Amz-SignedHeaders:
      explode: false
      in: header
      name: X-Amz-SignedHeaders
      required: false
      schema:
        type: string
      style: simple
  schemas:
    AbortMultipartReadSetUploadResponse:
      properties: {}
      type: object
    InternalServerException: {}
    NotSupportedOperationException: {}
    ServiceQuotaExceededException: {}
    ThrottlingException: {}
    ValidationException: {}
    ResourceNotFoundException: {}
    AccessDeniedException: {}
    RequestTimeoutException: {}
    BatchDeleteReadSetResponse:
      example:
        errors: ""
      properties:
        errors:
          allOf:
          - $ref: '#/components/schemas/ReadSetBatchErrorList'
          - description: Errors returned by individual delete operations.
          title: errors
      title: BatchDeleteReadSetResponse
      type: object
    ReadSetId:
      maxLength: 36
      minLength: 10
      pattern: "[0-9]+"
      title: ReadSetId
      type: string
    CancelAnnotationImportResponse:
      properties: {}
      type: object
    ConflictException: {}
    CancelVariantImportResponse:
      properties: {}
      type: object
    CompleteMultipartReadSetUploadResponse:
      example:
        readSetId: ""
      properties:
        readSetId:
          allOf:
          - $ref: '#/components/schemas/ReadSetId'
          - description: ' The read set ID created for an uploaded read set. '
          title: readSetId
      required:
      - readSetId
      title: CompleteMultipartReadSetUploadResponse
      type: object
    CompleteReadSetUploadPartListItem:
      description: " Part of the response to the CompleteReadSetUpload API, including\
        \ metadata. "
      properties:
        partNumber:
          allOf:
          - $ref: '#/components/schemas/CompleteReadSetUploadPartListItemPartNumberInteger'
          - description: ' A number identifying the part in a read set upload. '
          title: partNumber
        partSource:
          allOf:
          - $ref: '#/components/schemas/ReadSetPartSource'
          - description: ' The source file of the part being uploaded. '
          title: partSource
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: ' A unique identifier used to confirm that parts are being
              added to the correct upload. '
          title: checksum
      required:
      - checksum
      - partNumber
      - partSource
      title: CompleteReadSetUploadPartListItem
      type: object
    CreateAnnotationStoreResponse:
      example:
        reference:
          referenceArn: ""
        creationTime: ""
        storeFormat: ""
        storeOptions:
          tsvStoreOptions:
            schema: ""
            annotationType: ""
            formatToHeader: ""
        name: ""
        id: ""
        status: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          - description: The store's ID.
          title: id
        reference:
          $ref: '#/components/schemas/CreateAnnotationStoreResponse_reference'
        storeFormat:
          allOf:
          - $ref: '#/components/schemas/StoreFormat'
          - description: The annotation file format of the store.
          title: storeFormat
        storeOptions:
          $ref: '#/components/schemas/CreateAnnotationStoreResponse_storeOptions'
        status:
          allOf:
          - $ref: '#/components/schemas/StoreStatus'
          - description: The store's status.
          title: status
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The store's name.
          title: name
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          - description: When the store was created.
          title: creationTime
      required:
      - creationTime
      - id
      - name
      - status
      title: CreateAnnotationStoreResponse
      type: object
    ReferenceArn:
      maxLength: 127
      minLength: 1
      pattern: arn:.+
      type: string
    TagValue:
      maxLength: 256
      minLength: 0
      title: TagValue
      type: string
    EncryptionType:
      enum:
      - KMS
      title: EncryptionType
      type: string
    SseConfigKeyArnString:
      maxLength: 2048
      minLength: 20
      pattern: ".*arn:([^: ]*):([^: ]*):([^: ]*):([0-9]{12}):([^: ]*).*"
      type: string
    TsvStoreOptions:
      description: File settings for a TSV store.
      properties:
        annotationType:
          allOf:
          - $ref: '#/components/schemas/AnnotationType'
          - description: The store's annotation type.
          title: annotationType
        formatToHeader:
          allOf:
          - $ref: '#/components/schemas/FormatToHeader'
          - description: The store's header key to column name mapping.
          title: formatToHeader
        schema:
          allOf:
          - $ref: '#/components/schemas/TsvStoreOptionsSchemaList'
          - description: The store's schema.
          title: schema
      title: TsvStoreOptions
      type: object
    CreateMultipartReadSetUploadResponse:
      example:
        sourceFileType: ""
        uploadId: ""
        creationTime: ""
        sampleId: ""
        name: ""
        referenceArn: ""
        description: ""
        sequenceStoreId: ""
        subjectId: ""
        generatedFrom: ""
        tags: ""
      properties:
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          - description: ' The sequence store ID for the store that the read set will
              be created in. '
          title: sequenceStoreId
        uploadId:
          allOf:
          - $ref: '#/components/schemas/UploadId'
          - description: ' he ID for the initiated multipart upload. '
          title: uploadId
        sourceFileType:
          allOf:
          - $ref: '#/components/schemas/FileType'
          - description: ' The file type of the read set source. '
          title: sourceFileType
        subjectId:
          allOf:
          - $ref: '#/components/schemas/SubjectId'
          - description: ' The source''s subject ID. '
          title: subjectId
        sampleId:
          allOf:
          - $ref: '#/components/schemas/SampleId'
          - description: ' The source''s sample ID. '
          title: sampleId
        generatedFrom:
          allOf:
          - $ref: '#/components/schemas/GeneratedFrom'
          - description: ' The source of the read set. '
          title: generatedFrom
        referenceArn:
          allOf:
          - $ref: '#/components/schemas/ReferenceArn'
          - description: ' The read set source''s reference ARN. '
          title: referenceArn
        name:
          allOf:
          - $ref: '#/components/schemas/ReadSetName'
          - description: ' The name of the read set. '
          title: name
        description:
          allOf:
          - $ref: '#/components/schemas/ReadSetDescription'
          - description: ' The description of the read set. '
          title: description
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: ' The tags to add to the read set. '
          title: tags
        creationTime:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: ' The creation time of the multipart upload. '
          title: creationTime
      required:
      - creationTime
      - referenceArn
      - sampleId
      - sequenceStoreId
      - sourceFileType
      - subjectId
      - uploadId
      title: CreateMultipartReadSetUploadResponse
      type: object
    CreateReferenceStoreResponse:
      example:
        creationTime: ""
        name: ""
        description: ""
        sseConfig:
          keyArn: ""
          type: ""
        id: ""
        arn: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreId'
          - description: The store's ID.
          title: id
        arn:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreArn'
          - description: The store's ARN.
          title: arn
        name:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreName'
          - description: The store's name.
          title: name
        description:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreDescription'
          - description: The store's description.
          title: description
        sseConfig:
          $ref: '#/components/schemas/CreateReferenceStoreResponse_sseConfig'
        creationTime:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: When the store was created.
          title: creationTime
      required:
      - arn
      - creationTime
      - id
      title: CreateReferenceStoreResponse
      type: object
    CreateRunGroupResponse:
      example:
        id: ""
        arn: ""
        tags: ""
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/RunGroupArn'
          - description: The group's ARN.
          title: arn
        id:
          allOf:
          - $ref: '#/components/schemas/RunGroupId'
          - description: The group's ID.
          title: id
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: Tags for the run group.
          title: tags
      title: CreateRunGroupResponse
      type: object
    CreateSequenceStoreResponse:
      example:
        creationTime: ""
        name: ""
        description: ""
        sseConfig:
          keyArn: ""
          type: ""
        fallbackLocation: ""
        id: ""
        arn: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          - description: The store's ID.
          title: id
        arn:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreArn'
          - description: The store's ARN.
          title: arn
        name:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreName'
          - description: The store's name.
          title: name
        description:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreDescription'
          - description: The store's description.
          title: description
        sseConfig:
          $ref: '#/components/schemas/CreateReferenceStoreResponse_sseConfig'
        creationTime:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: When the store was created.
          title: creationTime
        fallbackLocation:
          allOf:
          - $ref: '#/components/schemas/S3Destination'
          - description: ' An S3 location that is used to store files that have failed
              a direct upload. '
          title: fallbackLocation
      required:
      - arn
      - creationTime
      - id
      title: CreateSequenceStoreResponse
      type: object
    CreateVariantStoreResponse:
      example:
        reference:
          referenceArn: ""
        creationTime: ""
        name: ""
        id: ""
        status: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          - description: The store's ID.
          title: id
        reference:
          $ref: '#/components/schemas/CreateVariantStoreResponse_reference'
        status:
          allOf:
          - $ref: '#/components/schemas/StoreStatus'
          - description: The store's status.
          title: status
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The store's name.
          title: name
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          - description: When the store was created.
          title: creationTime
      required:
      - creationTime
      - id
      - name
      - status
      title: CreateVariantStoreResponse
      type: object
    CreateWorkflowResponse:
      example:
        id: ""
        arn: ""
        status: ""
        tags: ""
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/WorkflowArn'
          - description: The workflow's ARN.
          title: arn
        id:
          allOf:
          - $ref: '#/components/schemas/WorkflowId'
          - description: The workflow's ID.
          title: id
        status:
          allOf:
          - $ref: '#/components/schemas/WorkflowStatus'
          - description: The workflow's status.
          title: status
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: The workflow's tags.
          title: tags
      title: CreateWorkflowResponse
      type: object
    WorkflowParameter:
      description: A workflow parameter.
      properties:
        description:
          allOf:
          - $ref: '#/components/schemas/WorkflowParameterDescription'
          - description: The parameter's description.
          title: description
        optional:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: Whether the parameter is optional.
          title: optional
      title: WorkflowParameter
      type: object
    DeleteAnnotationStoreResponse:
      example:
        status: ""
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/StoreStatus'
          - description: The store's status.
          title: status
      required:
      - status
      title: DeleteAnnotationStoreResponse
      type: object
    DeleteReferenceResponse:
      properties: {}
      type: object
    DeleteReferenceStoreResponse:
      properties: {}
      type: object
    DeleteSequenceStoreResponse:
      properties: {}
      type: object
    DeleteVariantStoreResponse:
      example:
        status: ""
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/StoreStatus'
          - description: The store's status.
          title: status
      required:
      - status
      title: DeleteVariantStoreResponse
      type: object
    GetAnnotationImportResponse:
      example:
        completionTime: ""
        creationTime: ""
        roleArn: ""
        destinationName: ""
        runLeftNormalization: ""
        updateTime: ""
        formatOptions:
          tsvOptions:
            readOptions:
              lineSep: ""
              quote: ""
              escapeQuotes: ""
              header: ""
              comment: ""
              encoding: ""
              quoteAll: ""
              escape: ""
              sep: ""
          vcfOptions:
            ignoreFilterField: ""
            ignoreQualField: ""
        annotationFields: ""
        id: ""
        items: ""
        statusMessage: ""
        status: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          - description: The job's ID.
          title: id
        destinationName:
          allOf:
          - $ref: '#/components/schemas/StoreName'
          - description: The job's destination annotation store.
          title: destinationName
        roleArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The job's service role ARN.
          title: roleArn
        status:
          allOf:
          - $ref: '#/components/schemas/JobStatus'
          - description: The job's status.
          title: status
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/JobStatusMsg'
          - description: The job's status message.
          title: statusMessage
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          - description: When the job was created.
          title: creationTime
        updateTime:
          allOf:
          - $ref: '#/components/schemas/UpdateTime'
          - description: When the job was updated.
          title: updateTime
        completionTime:
          allOf:
          - $ref: '#/components/schemas/CompletionTime'
          - description: When the job completed.
          title: completionTime
        items:
          allOf:
          - $ref: '#/components/schemas/AnnotationImportItemDetails'
          - description: The job's imported items.
          title: items
        runLeftNormalization:
          allOf:
          - $ref: '#/components/schemas/RunLeftNormalization'
          - description: The job's left normalization setting.
          title: runLeftNormalization
        formatOptions:
          $ref: '#/components/schemas/FormatOptions'
        annotationFields:
          allOf:
          - $ref: '#/components/schemas/AnnotationFieldMap'
          - description: ' The annotation schema generated by the parsed annotation
              data. '
          title: annotationFields
      required:
      - completionTime
      - creationTime
      - destinationName
      - formatOptions
      - id
      - items
      - roleArn
      - runLeftNormalization
      - status
      - statusMessage
      - updateTime
      title: GetAnnotationImportResponse
      type: object
    GetAnnotationStoreResponse:
      example:
        creationTime: ""
        storeArn: ""
        storeOptions:
          tsvStoreOptions:
            schema: ""
            annotationType: ""
            formatToHeader: ""
        description: ""
        updateTime: ""
        statusMessage: ""
        tags: ""
        reference:
          referenceArn: ""
        storeFormat: ""
        name: ""
        sseConfig:
          keyArn: ""
          type: ""
        storeSizeBytes: ""
        id: ""
        status: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          - description: The store's ID.
          title: id
        reference:
          $ref: '#/components/schemas/CreateVariantStoreResponse_reference'
        status:
          allOf:
          - $ref: '#/components/schemas/StoreStatus'
          - description: The store's status.
          title: status
        storeArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The store's ARN.
          title: storeArn
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The store's name.
          title: name
        description:
          allOf:
          - $ref: '#/components/schemas/StoreDescription'
          - description: The store's description.
          title: description
        sseConfig:
          $ref: '#/components/schemas/GetAnnotationStoreResponse_sseConfig'
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          - description: When the store was created.
          title: creationTime
        updateTime:
          allOf:
          - $ref: '#/components/schemas/UpdateTime'
          - description: When the store was updated.
          title: updateTime
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: The store's tags.
          title: tags
        storeOptions:
          $ref: '#/components/schemas/GetAnnotationStoreResponse_storeOptions'
        storeFormat:
          allOf:
          - $ref: '#/components/schemas/StoreFormat'
          - description: The store's annotation file format.
          title: storeFormat
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/StatusMessage'
          - description: A status message.
          title: statusMessage
        storeSizeBytes:
          allOf:
          - $ref: '#/components/schemas/Long'
          - description: The store's size in bytes.
          title: storeSizeBytes
      required:
      - creationTime
      - description
      - id
      - name
      - reference
      - sseConfig
      - status
      - statusMessage
      - storeArn
      - storeSizeBytes
      - tags
      - updateTime
      title: GetAnnotationStoreResponse
      type: object
    GetReadSetResponse:
      example:
        payload: ""
      properties:
        payload:
          allOf:
          - $ref: '#/components/schemas/ReadSetStreamingBlob'
          - description: The read set file payload.
          title: payload
      title: GetReadSetResponse
      type: object
    RangeNotSatisfiableException: {}
    GetReadSetActivationJobResponse:
      example:
        completionTime: ""
        creationTime: ""
        sources: ""
        id: ""
        sequenceStoreId: ""
        statusMessage: ""
        status: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ActivationJobId'
          - description: The job's ID.
          title: id
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          - description: The job's sequence store ID.
          title: sequenceStoreId
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetActivationJobStatus'
          - description: The job's status.
          title: status
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/JobStatusMessage'
          - description: The job's status message.
          title: statusMessage
        creationTime:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: When the job was created.
          title: creationTime
        completionTime:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: When the job completed.
          title: completionTime
        sources:
          allOf:
          - $ref: '#/components/schemas/ActivateReadSetSourceList'
          - description: The job's source files.
          title: sources
      required:
      - creationTime
      - id
      - sequenceStoreId
      - status
      title: GetReadSetActivationJobResponse
      type: object
    GetReadSetExportJobResponse:
      example:
        completionTime: ""
        creationTime: ""
        destination: ""
        id: ""
        sequenceStoreId: ""
        statusMessage: ""
        readSets: ""
        status: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ExportJobId'
          - description: The job's ID.
          title: id
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          - description: The job's sequence store ID.
          title: sequenceStoreId
        destination:
          allOf:
          - $ref: '#/components/schemas/S3Destination'
          - description: The job's destination in Amazon S3.
          title: destination
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetExportJobStatus'
          - description: The job's status.
          title: status
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/JobStatusMessage'
          - description: The job's status message.
          title: statusMessage
        creationTime:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: When the job was created.
          title: creationTime
        completionTime:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: When the job completed.
          title: completionTime
        readSets:
          allOf:
          - $ref: '#/components/schemas/ExportReadSetDetailList'
          - description: The job's read sets.
          title: readSets
      required:
      - creationTime
      - destination
      - id
      - sequenceStoreId
      - status
      title: GetReadSetExportJobResponse
      type: object
    GetReadSetImportJobResponse:
      example:
        completionTime: ""
        creationTime: ""
        sources: ""
        roleArn: ""
        id: ""
        sequenceStoreId: ""
        statusMessage: ""
        status: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ImportJobId'
          - description: The job's ID.
          title: id
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          - description: The job's sequence store ID.
          title: sequenceStoreId
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          - description: The job's service role ARN.
          title: roleArn
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetImportJobStatus'
          - description: The job's status.
          title: status
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/JobStatusMessage'
          - description: The job's status message.
          title: statusMessage
        creationTime:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: When the job was created.
          title: creationTime
        completionTime:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: When the job completed.
          title: completionTime
        sources:
          allOf:
          - $ref: '#/components/schemas/ImportReadSetSourceList'
          - description: The job's source files.
          title: sources
      required:
      - creationTime
      - id
      - roleArn
      - sequenceStoreId
      - sources
      - status
      title: GetReadSetImportJobResponse
      type: object
    GetReadSetMetadataResponse:
      example:
        creationTime: ""
        sampleId: ""
        description: ""
        sequenceStoreId: ""
        subjectId: ""
        statusMessage: ""
        creationType: ""
        sequenceInformation:
          totalBaseCount: ""
          totalReadCount: ""
          alignment: ""
          generatedFrom: ""
        name: ""
        referenceArn: ""
        files:
          index:
            totalParts: ""
            partSize: ""
            contentLength: ""
          source1:
            totalParts: ""
            partSize: ""
            contentLength: ""
          source2:
            totalParts: ""
            partSize: ""
            contentLength: ""
        id: ""
        arn: ""
        fileType: ""
        status: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ReadSetId'
          - description: The read set's ID.
          title: id
        arn:
          allOf:
          - $ref: '#/components/schemas/ReadSetArn'
          - description: The read set's ARN.
          title: arn
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          - description: The read set's sequence store ID.
          title: sequenceStoreId
        subjectId:
          allOf:
          - $ref: '#/components/schemas/SubjectId'
          - description: The read set's subject ID.
          title: subjectId
        sampleId:
          allOf:
          - $ref: '#/components/schemas/SampleId'
          - description: The read set's sample ID.
          title: sampleId
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetStatus'
          - description: The read set's status.
          title: status
        name:
          allOf:
          - $ref: '#/components/schemas/ReadSetName'
          - description: The read set's name.
          title: name
        description:
          allOf:
          - $ref: '#/components/schemas/ReadSetDescription'
          - description: The read set's description.
          title: description
        fileType:
          allOf:
          - $ref: '#/components/schemas/FileType'
          - description: The read set's file type.
          title: fileType
        creationTime:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: When the read set was created.
          title: creationTime
        sequenceInformation:
          $ref: '#/components/schemas/GetReadSetMetadataResponse_sequenceInformation'
        referenceArn:
          allOf:
          - $ref: '#/components/schemas/ReferenceArn'
          - description: The read set's genome reference ARN.
          title: referenceArn
        files:
          $ref: '#/components/schemas/GetReadSetMetadataResponse_files'
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/ReadSetStatusMessage'
          - description: ' The status message for a read set. It provides more detail
              as to why the read set has a status. '
          title: statusMessage
        creationType:
          allOf:
          - $ref: '#/components/schemas/CreationType'
          - description: ' The creation type of the read set. '
          title: creationType
      required:
      - arn
      - creationTime
      - fileType
      - id
      - sequenceStoreId
      - status
      title: GetReadSetMetadataResponse
      type: object
    GetReferenceResponse:
      example:
        payload: ""
      properties:
        payload:
          allOf:
          - $ref: '#/components/schemas/ReferenceStreamingBlob'
          - description: The reference file payload.
          title: payload
      title: GetReferenceResponse
      type: object
    GetReferenceImportJobResponse:
      example:
        referenceStoreId: ""
        completionTime: ""
        creationTime: ""
        sources: ""
        roleArn: ""
        id: ""
        statusMessage: ""
        status: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ImportJobId'
          - description: The job's ID.
          title: id
        referenceStoreId:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreId'
          - description: The job's reference store ID.
          title: referenceStoreId
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          - description: The job's service role ARN.
          title: roleArn
        status:
          allOf:
          - $ref: '#/components/schemas/ReferenceImportJobStatus'
          - description: The job's status.
          title: status
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/JobStatusMessage'
          - description: The job's status message.
          title: statusMessage
        creationTime:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: When the job was created.
          title: creationTime
        completionTime:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: When the job completed.
          title: completionTime
        sources:
          allOf:
          - $ref: '#/components/schemas/ImportReferenceSourceList'
          - description: The job's source files.
          title: sources
      required:
      - creationTime
      - id
      - referenceStoreId
      - roleArn
      - sources
      - status
      title: GetReferenceImportJobResponse
      type: object
    GetReferenceMetadataResponse:
      example:
        referenceStoreId: ""
        creationTime: ""
        name: ""
        description: ""
        files:
          index:
            totalParts: ""
            partSize: ""
            contentLength: ""
          source:
            totalParts: ""
            partSize: ""
            contentLength: ""
        updateTime: ""
        id: ""
        arn: ""
        md5: ""
        status: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ReferenceId'
          - description: The reference's ID.
          title: id
        arn:
          allOf:
          - $ref: '#/components/schemas/ReferenceArn'
          - description: The reference's ARN.
          title: arn
        referenceStoreId:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreId'
          - description: The reference's reference store ID.
          title: referenceStoreId
        md5:
          allOf:
          - $ref: '#/components/schemas/Md5'
          - description: The reference's MD5 checksum.
          title: md5
        status:
          allOf:
          - $ref: '#/components/schemas/ReferenceStatus'
          - description: The reference's status.
          title: status
        name:
          allOf:
          - $ref: '#/components/schemas/ReferenceName'
          - description: The reference's name.
          title: name
        description:
          allOf:
          - $ref: '#/components/schemas/ReferenceDescription'
          - description: The reference's description.
          title: description
        creationTime:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: When the reference was created.
          title: creationTime
        updateTime:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: When the reference was updated.
          title: updateTime
        files:
          $ref: '#/components/schemas/GetReferenceMetadataResponse_files'
      required:
      - arn
      - creationTime
      - id
      - md5
      - referenceStoreId
      - updateTime
      title: GetReferenceMetadataResponse
      type: object
    GetReferenceStoreResponse:
      example:
        creationTime: ""
        name: ""
        description: ""
        sseConfig:
          keyArn: ""
          type: ""
        id: ""
        arn: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreId'
          - description: The store's ID.
          title: id
        arn:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreArn'
          - description: The store's ARN.
          title: arn
        name:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreName'
          - description: The store's name.
          title: name
        description:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreDescription'
          - description: The store's description.
          title: description
        sseConfig:
          $ref: '#/components/schemas/GetAnnotationStoreResponse_sseConfig'
        creationTime:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: When the store was created.
          title: creationTime
      required:
      - arn
      - creationTime
      - id
      title: GetReferenceStoreResponse
      type: object
    GetRunResponse:
      example:
        creationTime: ""
        outputUri: ""
        startedBy: ""
        storageCapacity: ""
        priority: ""
        resourceDigests: ""
        statusMessage: ""
        tags: ""
        logLevel: ""
        roleArn: ""
        name: ""
        digest: ""
        accelerators: ""
        workflowType: ""
        definition: ""
        startTime: ""
        stopTime: ""
        id: ""
        runId: ""
        arn: ""
        runGroupId: ""
        parameters: ""
        workflowId: ""
        status: ""
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/RunArn'
          - description: The run's ARN.
          title: arn
        id:
          allOf:
          - $ref: '#/components/schemas/RunId'
          - description: The run's ID.
          title: id
        status:
          allOf:
          - $ref: '#/components/schemas/RunStatus'
          - description: The run's status.
          title: status
        workflowId:
          allOf:
          - $ref: '#/components/schemas/WorkflowId'
          - description: The run's workflow ID.
          title: workflowId
        workflowType:
          allOf:
          - $ref: '#/components/schemas/WorkflowType'
          - description: The run's workflow type.
          title: workflowType
        runId:
          allOf:
          - $ref: '#/components/schemas/RunId'
          - description: The run's ID.
          title: runId
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RunRoleArn'
          - description: The run's service role ARN.
          title: roleArn
        name:
          allOf:
          - $ref: '#/components/schemas/RunName'
          - description: The run's name.
          title: name
        runGroupId:
          allOf:
          - $ref: '#/components/schemas/RunGroupId'
          - description: The run's group ID.
          title: runGroupId
        priority:
          allOf:
          - $ref: '#/components/schemas/GetRunResponsePriorityInteger'
          - description: The run's priority.
          title: priority
        definition:
          allOf:
          - $ref: '#/components/schemas/WorkflowDefinition'
          - description: The run's definition.
          title: definition
        digest:
          allOf:
          - $ref: '#/components/schemas/WorkflowDigest'
          - description: The run's digest.
          title: digest
        parameters:
          allOf:
          - $ref: '#/components/schemas/RunParameters'
          - description: The run's parameters.
          title: parameters
        storageCapacity:
          allOf:
          - $ref: '#/components/schemas/GetRunResponseStorageCapacityInteger'
          - description: The run's storage capacity in gigabytes.
          title: storageCapacity
        outputUri:
          allOf:
          - $ref: '#/components/schemas/RunOutputUri'
          - description: The run's output URI.
          title: outputUri
        logLevel:
          allOf:
          - $ref: '#/components/schemas/RunLogLevel'
          - description: The run's log level.
          title: logLevel
        resourceDigests:
          allOf:
          - $ref: '#/components/schemas/RunResourceDigests'
          - description: The run's resource digests.
          title: resourceDigests
        startedBy:
          allOf:
          - $ref: '#/components/schemas/RunStartedBy'
          - description: Who started the run.
          title: startedBy
        creationTime:
          allOf:
          - $ref: '#/components/schemas/RunTimestamp'
          - description: When the run was created.
          title: creationTime
        startTime:
          allOf:
          - $ref: '#/components/schemas/RunTimestamp'
          - description: When the run started.
          title: startTime
        stopTime:
          allOf:
          - $ref: '#/components/schemas/RunTimestamp'
          - description: The run's stop time.
          title: stopTime
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/RunStatusMessage'
          - description: The run's status message.
          title: statusMessage
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: The run's tags.
          title: tags
        accelerators:
          allOf:
          - $ref: '#/components/schemas/Accelerators'
          - description: ' The computational accelerator used to run the workflow. '
          title: accelerators
      title: GetRunResponse
      type: object
    RunExport:
      enum:
      - DEFINITION
      maxLength: 64
      minLength: 1
      title: RunExport
      type: string
    GetRunGroupResponse:
      example:
        maxGpus: ""
        maxRuns: ""
        creationTime: ""
        maxCpus: ""
        name: ""
        id: ""
        arn: ""
        maxDuration: ""
        tags: ""
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/RunGroupArn'
          - description: The group's ARN.
          title: arn
        id:
          allOf:
          - $ref: '#/components/schemas/RunGroupId'
          - description: The group's ID.
          title: id
        name:
          allOf:
          - $ref: '#/components/schemas/RunGroupName'
          - description: The group's name.
          title: name
        maxCpus:
          allOf:
          - $ref: '#/components/schemas/GetRunGroupResponseMaxCpusInteger'
          - description: The group's maximum number of CPUs to use.
          title: maxCpus
        maxRuns:
          allOf:
          - $ref: '#/components/schemas/GetRunGroupResponseMaxRunsInteger'
          - description: The maximum number of concurrent runs for the group.
          title: maxRuns
        maxDuration:
          allOf:
          - $ref: '#/components/schemas/GetRunGroupResponseMaxDurationInteger'
          - description: The group's maximum run time in minutes.
          title: maxDuration
        creationTime:
          allOf:
          - $ref: '#/components/schemas/RunGroupTimestamp'
          - description: When the group was created.
          title: creationTime
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: The group's tags.
          title: tags
        maxGpus:
          allOf:
          - $ref: '#/components/schemas/GetRunGroupResponseMaxGpusInteger'
          - description: ' The maximum GPUs that can be used by a run group. '
          title: maxGpus
      title: GetRunGroupResponse
      type: object
    GetRunTaskResponse:
      example:
        memory: ""
        creationTime: ""
        cpus: ""
        gpus: ""
        name: ""
        logStream: ""
        startTime: ""
        stopTime: ""
        taskId: ""
        statusMessage: ""
        status: ""
      properties:
        taskId:
          allOf:
          - $ref: '#/components/schemas/TaskId'
          - description: The task's ID.
          title: taskId
        status:
          allOf:
          - $ref: '#/components/schemas/TaskStatus'
          - description: The task's status.
          title: status
        name:
          allOf:
          - $ref: '#/components/schemas/TaskName'
          - description: The task's name.
          title: name
        cpus:
          allOf:
          - $ref: '#/components/schemas/GetRunTaskResponseCpusInteger'
          - description: The task's CPU usage.
          title: cpus
        memory:
          allOf:
          - $ref: '#/components/schemas/GetRunTaskResponseMemoryInteger'
          - description: The task's memory use in gigabytes.
          title: memory
        creationTime:
          allOf:
          - $ref: '#/components/schemas/TaskTimestamp'
          - description: When the task was created.
          title: creationTime
        startTime:
          allOf:
          - $ref: '#/components/schemas/TaskTimestamp'
          - description: The task's start time.
          title: startTime
        stopTime:
          allOf:
          - $ref: '#/components/schemas/TaskTimestamp'
          - description: The task's stop time.
          title: stopTime
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/TaskStatusMessage'
          - description: The task's status message.
          title: statusMessage
        logStream:
          allOf:
          - $ref: '#/components/schemas/TaskLogStream'
          - description: The task's log stream.
          title: logStream
        gpus:
          allOf:
          - $ref: '#/components/schemas/GetRunTaskResponseGpusInteger'
          - description: ' The number of Graphics Processing Units (GPU) specified
              in the task. '
          title: gpus
      title: GetRunTaskResponse
      type: object
    GetSequenceStoreResponse:
      example:
        creationTime: ""
        name: ""
        description: ""
        sseConfig:
          keyArn: ""
          type: ""
        fallbackLocation: ""
        id: ""
        arn: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          - description: The store's ID.
          title: id
        arn:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreArn'
          - description: The store's ARN.
          title: arn
        name:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreName'
          - description: The store's name.
          title: name
        description:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreDescription'
          - description: The store's description.
          title: description
        sseConfig:
          $ref: '#/components/schemas/GetAnnotationStoreResponse_sseConfig'
        creationTime:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: When the store was created.
          title: creationTime
        fallbackLocation:
          allOf:
          - $ref: '#/components/schemas/S3Destination'
          - description: ' An S3 location that is used to store files that have failed
              a direct upload. '
          title: fallbackLocation
      required:
      - arn
      - creationTime
      - id
      title: GetSequenceStoreResponse
      type: object
    GetVariantImportResponse:
      example:
        completionTime: ""
        creationTime: ""
        roleArn: ""
        destinationName: ""
        runLeftNormalization: ""
        updateTime: ""
        annotationFields: ""
        id: ""
        items: ""
        statusMessage: ""
        status: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          - description: The job's ID.
          title: id
        destinationName:
          allOf:
          - $ref: '#/components/schemas/StoreName'
          - description: The job's destination variant store.
          title: destinationName
        roleArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The job's service role ARN.
          title: roleArn
        status:
          allOf:
          - $ref: '#/components/schemas/JobStatus'
          - description: The job's status.
          title: status
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/JobStatusMsg'
          - description: The job's status message.
          title: statusMessage
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          - description: When the job was created.
          title: creationTime
        updateTime:
          allOf:
          - $ref: '#/components/schemas/UpdateTime'
          - description: When the job was updated.
          title: updateTime
        completionTime:
          allOf:
          - $ref: '#/components/schemas/CompletionTime'
          - description: When the job completed.
          title: completionTime
        items:
          allOf:
          - $ref: '#/components/schemas/VariantImportItemDetails'
          - description: The job's items.
          title: items
        runLeftNormalization:
          allOf:
          - $ref: '#/components/schemas/RunLeftNormalization'
          - description: The job's left normalization setting.
          title: runLeftNormalization
        annotationFields:
          allOf:
          - $ref: '#/components/schemas/AnnotationFieldMap'
          - description: ' The annotation schema generated by the parsed annotation
              data. '
          title: annotationFields
      required:
      - creationTime
      - destinationName
      - id
      - items
      - roleArn
      - runLeftNormalization
      - status
      - statusMessage
      - updateTime
      title: GetVariantImportResponse
      type: object
    GetVariantStoreResponse:
      example:
        reference:
          referenceArn: ""
        creationTime: ""
        storeArn: ""
        name: ""
        description: ""
        sseConfig:
          keyArn: ""
          type: ""
        storeSizeBytes: ""
        updateTime: ""
        id: ""
        statusMessage: ""
        status: ""
        tags: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          - description: The store's ID.
          title: id
        reference:
          $ref: '#/components/schemas/CreateVariantStoreResponse_reference'
        status:
          allOf:
          - $ref: '#/components/schemas/StoreStatus'
          - description: The store's status.
          title: status
        storeArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The store's ARN.
          title: storeArn
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The store's name.
          title: name
        description:
          allOf:
          - $ref: '#/components/schemas/StoreDescription'
          - description: The store's description.
          title: description
        sseConfig:
          $ref: '#/components/schemas/GetAnnotationStoreResponse_sseConfig'
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          - description: When the store was created.
          title: creationTime
        updateTime:
          allOf:
          - $ref: '#/components/schemas/UpdateTime'
          - description: When the store was updated.
          title: updateTime
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: The store's tags.
          title: tags
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/StatusMessage'
          - description: The store's status message.
          title: statusMessage
        storeSizeBytes:
          allOf:
          - $ref: '#/components/schemas/Long'
          - description: The store's size in bytes.
          title: storeSizeBytes
      required:
      - creationTime
      - description
      - id
      - name
      - reference
      - sseConfig
      - status
      - statusMessage
      - storeArn
      - storeSizeBytes
      - tags
      - updateTime
      title: GetVariantStoreResponse
      type: object
    GetWorkflowResponse:
      example:
        metadata: ""
        creationTime: ""
        description: ""
        main: ""
        storageCapacity: ""
        type: ""
        statusMessage: ""
        tags: ""
        engine: ""
        name: ""
        digest: ""
        accelerators: ""
        definition: ""
        id: ""
        arn: ""
        parameterTemplate: ""
        status: ""
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/WorkflowArn'
          - description: The workflow's ARN.
          title: arn
        id:
          allOf:
          - $ref: '#/components/schemas/WorkflowId'
          - description: The workflow's ID.
          title: id
        status:
          allOf:
          - $ref: '#/components/schemas/WorkflowStatus'
          - description: The workflow's status.
          title: status
        type:
          allOf:
          - $ref: '#/components/schemas/WorkflowType'
          - description: The workflow's type.
          title: type
        name:
          allOf:
          - $ref: '#/components/schemas/WorkflowName'
          - description: The workflow's name.
          title: name
        description:
          allOf:
          - $ref: '#/components/schemas/WorkflowDescription'
          - description: The workflow's description.
          title: description
        engine:
          allOf:
          - $ref: '#/components/schemas/WorkflowEngine'
          - description: The workflow's engine.
          title: engine
        definition:
          allOf:
          - $ref: '#/components/schemas/WorkflowDefinition'
          - description: The workflow's definition.
          title: definition
        main:
          allOf:
          - $ref: '#/components/schemas/WorkflowMain'
          - description: The path of the main definition file for the workflow.
          title: main
        digest:
          allOf:
          - $ref: '#/components/schemas/WorkflowDigest'
          - description: The workflow's digest.
          title: digest
        parameterTemplate:
          allOf:
          - $ref: '#/components/schemas/WorkflowParameterTemplate'
          - description: The workflow's parameter template.
          title: parameterTemplate
        storageCapacity:
          allOf:
          - $ref: '#/components/schemas/GetWorkflowResponseStorageCapacityInteger'
          - description: The workflow's storage capacity in gigabytes.
          title: storageCapacity
        creationTime:
          allOf:
          - $ref: '#/components/schemas/WorkflowTimestamp'
          - description: When the workflow was created.
          title: creationTime
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/WorkflowStatusMessage'
          - description: The workflow's status message.
          title: statusMessage
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: The workflow's tags.
          title: tags
        metadata:
          allOf:
          - $ref: '#/components/schemas/WorkflowMetadata'
          - description: ' Gets metadata for workflow. '
          title: metadata
        accelerators:
          allOf:
          - $ref: '#/components/schemas/Accelerators'
          - description: ' The computational accelerator specified to run the workflow. '
          title: accelerators
      title: GetWorkflowResponse
      type: object
    WorkflowExport:
      enum:
      - DEFINITION
      maxLength: 64
      minLength: 1
      title: WorkflowExport
      type: string
    ListAnnotationImportJobsResponse:
      example:
        nextToken: ""
        annotationImportJobs: ""
      properties:
        annotationImportJobs:
          allOf:
          - $ref: '#/components/schemas/AnnotationImportJobItems'
          - description: A list of jobs.
          title: annotationImportJobs
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: A pagination token that's included if more results are available.
          title: nextToken
      title: ListAnnotationImportJobsResponse
      type: object
    ResourceIdentifier:
      maxLength: 50
      minLength: 1
      title: ResourceIdentifier
      type: string
    JobStatus:
      enum:
      - SUBMITTED
      - IN_PROGRESS
      - CANCELLED
      - COMPLETED
      - FAILED
      - COMPLETED_WITH_FAILURES
      title: JobStatus
      type: string
    String:
      type: string
    ListAnnotationStoresResponse:
      example:
        annotationStores: ""
        nextToken: ""
      properties:
        annotationStores:
          allOf:
          - $ref: '#/components/schemas/AnnotationStoreItems'
          - description: A list of stores.
          title: annotationStores
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: A pagination token that's included if more results are available.
          title: nextToken
      title: ListAnnotationStoresResponse
      type: object
    StoreStatus:
      enum:
      - CREATING
      - UPDATING
      - DELETING
      - ACTIVE
      - FAILED
      title: StoreStatus
      type: string
    ListMultipartReadSetUploadsResponse:
      example:
        nextToken: ""
        uploads: ""
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: ' Next token returned in the response of a previous ListMultipartReadSetUploads
              call. Used to get the next page of results. '
          title: nextToken
        uploads:
          allOf:
          - $ref: '#/components/schemas/MultipartReadSetUploadList'
          - description: ' An array of multipart uploads. '
          title: uploads
      title: ListMultipartReadSetUploadsResponse
      type: object
    ListReadSetActivationJobsResponse:
      example:
        nextToken: ""
        activationJobs: ""
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: A pagination token that's included if more results are available.
          title: nextToken
        activationJobs:
          allOf:
          - $ref: '#/components/schemas/ActivateReadSetJobList'
          - description: A list of jobs.
          title: activationJobs
      title: ListReadSetActivationJobsResponse
      type: object
    ReadSetActivationJobStatus:
      enum:
      - SUBMITTED
      - IN_PROGRESS
      - CANCELLING
      - CANCELLED
      - FAILED
      - COMPLETED
      - COMPLETED_WITH_FAILURES
      title: ReadSetActivationJobStatus
      type: string
    SyntheticTimestamp_date_time:
      format: date-time
      type: string
    ListReadSetExportJobsResponse:
      example:
        nextToken: ""
        exportJobs: ""
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: A pagination token that's included if more results are available.
          title: nextToken
        exportJobs:
          allOf:
          - $ref: '#/components/schemas/ExportReadSetJobDetailList'
          - description: A list of jobs.
          title: exportJobs
      title: ListReadSetExportJobsResponse
      type: object
    ReadSetExportJobStatus:
      enum:
      - SUBMITTED
      - IN_PROGRESS
      - CANCELLING
      - CANCELLED
      - FAILED
      - COMPLETED
      - COMPLETED_WITH_FAILURES
      title: ReadSetExportJobStatus
      type: string
    ListReadSetImportJobsResponse:
      example:
        importJobs: ""
        nextToken: ""
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: A pagination token that's included if more results are available.
          title: nextToken
        importJobs:
          allOf:
          - $ref: '#/components/schemas/ImportReadSetJobList'
          - description: A list of jobs.
          title: importJobs
      title: ListReadSetImportJobsResponse
      type: object
    ReadSetImportJobStatus:
      enum:
      - SUBMITTED
      - IN_PROGRESS
      - CANCELLING
      - CANCELLED
      - FAILED
      - COMPLETED
      - COMPLETED_WITH_FAILURES
      title: ReadSetImportJobStatus
      type: string
    ListReadSetUploadPartsResponse:
      example:
        nextToken: ""
        parts: ""
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: ' Next token returned in the response of a previous ListReadSetUploadParts
              call. Used to get the next page of results. '
          title: nextToken
        parts:
          allOf:
          - $ref: '#/components/schemas/ReadSetUploadPartList'
          - description: ' An array of upload parts. '
          title: parts
      title: ListReadSetUploadPartsResponse
      type: object
    ListReadSetsResponse:
      example:
        nextToken: ""
        readSets: ""
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: A pagination token that's included if more results are available.
          title: nextToken
        readSets:
          allOf:
          - $ref: '#/components/schemas/ReadSetList'
          - description: A list of read sets.
          title: readSets
      required:
      - readSets
      title: ListReadSetsResponse
      type: object
    ReadSetName:
      maxLength: 127
      minLength: 1
      pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
      type: string
    ReadSetStatus:
      enum:
      - ARCHIVED
      - ACTIVATING
      - ACTIVE
      - DELETING
      - DELETED
      - PROCESSING_UPLOAD
      - UPLOAD_FAILED
      title: ReadSetStatus
      type: string
    SampleId:
      maxLength: 127
      minLength: 1
      pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
      type: string
    SubjectId:
      maxLength: 127
      minLength: 1
      pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
      type: string
    GeneratedFrom:
      maxLength: 127
      minLength: 1
      pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
      type: string
    CreationType:
      enum:
      - IMPORT
      - UPLOAD
      title: CreationType
      type: string
    ListReferenceImportJobsResponse:
      example:
        importJobs: ""
        nextToken: ""
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: A pagination token that's included if more results are available.
          title: nextToken
        importJobs:
          allOf:
          - $ref: '#/components/schemas/ImportReferenceJobList'
          - description: A lis of jobs.
          title: importJobs
      title: ListReferenceImportJobsResponse
      type: object
    ReferenceImportJobStatus:
      enum:
      - SUBMITTED
      - IN_PROGRESS
      - CANCELLING
      - CANCELLED
      - FAILED
      - COMPLETED
      - COMPLETED_WITH_FAILURES
      title: ReferenceImportJobStatus
      type: string
    ListReferenceStoresResponse:
      example:
        referenceStores: ""
        nextToken: ""
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: A pagination token that's included if more results are available.
          title: nextToken
        referenceStores:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreDetailList'
          - description: A list of reference stores.
          title: referenceStores
      required:
      - referenceStores
      title: ListReferenceStoresResponse
      type: object
    ReferenceStoreName:
      maxLength: 127
      minLength: 1
      pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
      type: string
    ListReferencesResponse:
      example:
        references: ""
        nextToken: ""
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: A pagination token that's included if more results are available.
          title: nextToken
        references:
          allOf:
          - $ref: '#/components/schemas/ReferenceList'
          - description: A list of references.
          title: references
      required:
      - references
      title: ListReferencesResponse
      type: object
    ReferenceName:
      maxLength: 255
      minLength: 3
      pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
      type: string
    Md5:
      maxLength: 255
      minLength: 1
      pattern: "[\\p{L}||\\p{N}]+"
      type: string
    ListRunGroupsResponse:
      example:
        nextToken: ""
        items: ""
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/RunGroupList'
          - description: A list of groups.
          title: items
        nextToken:
          allOf:
          - $ref: '#/components/schemas/RunGroupListToken'
          - description: A pagination token that's included if more results are available.
          title: nextToken
      title: ListRunGroupsResponse
      type: object
    ListRunTasksResponse:
      example:
        nextToken: ""
        items: ""
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/TaskList'
          - description: A list of tasks.
          title: items
        nextToken:
          allOf:
          - $ref: '#/components/schemas/TaskListToken'
          - description: A pagination token that's included if more results are available.
          title: nextToken
      title: ListRunTasksResponse
      type: object
    ListRunsResponse:
      example:
        nextToken: ""
        items: ""
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/RunList'
          - description: A list of runs.
          title: items
        nextToken:
          allOf:
          - $ref: '#/components/schemas/RunListToken'
          - description: A pagination token that's included if more results are available.
          title: nextToken
      title: ListRunsResponse
      type: object
    ListSequenceStoresResponse:
      example:
        sequenceStores: ""
        nextToken: ""
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: A pagination token that's included if more results are available.
          title: nextToken
        sequenceStores:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreDetailList'
          - description: A list of sequence stores.
          title: sequenceStores
      required:
      - sequenceStores
      title: ListSequenceStoresResponse
      type: object
    SequenceStoreName:
      maxLength: 127
      minLength: 1
      pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
      type: string
    ListTagsForResourceResponse:
      example:
        tags: ""
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: A list of tags.
          title: tags
      required:
      - tags
      title: ListTagsForResourceResponse
      type: object
    ListVariantImportJobsResponse:
      example:
        variantImportJobs: ""
        nextToken: ""
      properties:
        variantImportJobs:
          allOf:
          - $ref: '#/components/schemas/VariantImportJobItems'
          - description: A list of jobs.
          title: variantImportJobs
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: A pagination token that's included if more results are available.
          title: nextToken
      title: ListVariantImportJobsResponse
      type: object
    ListVariantStoresResponse:
      example:
        variantStores: ""
        nextToken: ""
      properties:
        variantStores:
          allOf:
          - $ref: '#/components/schemas/VariantStoreItems'
          - description: A list of variant stores.
          title: variantStores
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: A pagination token that's included if more results are available.
          title: nextToken
      title: ListVariantStoresResponse
      type: object
    ListWorkflowsResponse:
      example:
        nextToken: ""
        items: ""
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/WorkflowList'
          - description: The workflows' items.
          title: items
        nextToken:
          allOf:
          - $ref: '#/components/schemas/WorkflowListToken'
          - description: A pagination token that's included if more results are available.
          title: nextToken
      title: ListWorkflowsResponse
      type: object
    StartAnnotationImportResponse:
      example:
        jobId: ""
      properties:
        jobId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          - description: The job's ID.
          title: jobId
      required:
      - jobId
      title: StartAnnotationImportResponse
      type: object
    AnnotationImportItemSource:
      description: A source for an annotation import job.
      properties:
        source:
          allOf:
          - $ref: '#/components/schemas/S3Uri'
          - description: The source file's location in Amazon S3.
          title: source
      required:
      - source
      title: AnnotationImportItemSource
      type: object
    TsvOptions:
      description: Formatting options for a TSV file.
      properties:
        readOptions:
          $ref: '#/components/schemas/TsvOptions_readOptions'
      title: TsvOptions
      type: object
    VcfOptions:
      description: Formatting options for a VCF file.
      properties:
        ignoreQualField:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: The file's ignore qual field setting.
          title: ignoreQualField
        ignoreFilterField:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: The file's ignore filter field setting.
          title: ignoreFilterField
      title: VcfOptions
      type: object
    AnnotationFieldMapValueString:
      maxLength: 21
      minLength: 1
      title: AnnotationFieldMapValueString
      type: string
    StartReadSetActivationJobResponse:
      example:
        creationTime: ""
        id: ""
        sequenceStoreId: ""
        status: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ActivationJobId'
          - description: The job's ID.
          title: id
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          - description: The read set's sequence store ID.
          title: sequenceStoreId
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetActivationJobStatus'
          - description: The job's status.
          title: status
        creationTime:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: When the job was created.
          title: creationTime
      required:
      - creationTime
      - id
      - sequenceStoreId
      - status
      title: StartReadSetActivationJobResponse
      type: object
    StartReadSetActivationJobSourceItem:
      description: A source for a read set activation job.
      properties:
        readSetId:
          allOf:
          - $ref: '#/components/schemas/ReadSetId'
          - description: The source's read set ID.
          title: readSetId
      required:
      - readSetId
      title: StartReadSetActivationJobSourceItem
      type: object
    StartReadSetExportJobResponse:
      example:
        creationTime: ""
        destination: ""
        id: ""
        sequenceStoreId: ""
        status: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ExportJobId'
          - description: The job's ID.
          title: id
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          - description: The read set's sequence store ID.
          title: sequenceStoreId
        destination:
          allOf:
          - $ref: '#/components/schemas/S3Destination'
          - description: The job's output location.
          title: destination
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetExportJobStatus'
          - description: The job's status.
          title: status
        creationTime:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: When the job was created.
          title: creationTime
      required:
      - creationTime
      - destination
      - id
      - sequenceStoreId
      - status
      title: StartReadSetExportJobResponse
      type: object
    ExportReadSet:
      description: A read set.
      properties:
        readSetId:
          allOf:
          - $ref: '#/components/schemas/ReadSetId'
          - description: The set's ID.
          title: readSetId
      required:
      - readSetId
      title: ExportReadSet
      type: object
    StartReadSetImportJobResponse:
      example:
        creationTime: ""
        roleArn: ""
        id: ""
        sequenceStoreId: ""
        status: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ImportJobId'
          - description: The job's ID.
          title: id
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          - description: The read set's sequence store ID.
          title: sequenceStoreId
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          - description: The job's service role ARN.
          title: roleArn
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetImportJobStatus'
          - description: The job's status.
          title: status
        creationTime:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: When the job was created.
          title: creationTime
      required:
      - creationTime
      - id
      - roleArn
      - sequenceStoreId
      - status
      title: StartReadSetImportJobResponse
      type: object
    StartReadSetImportJobSourceItem:
      description: A source for a read set import job.
      properties:
        sourceFiles:
          $ref: '#/components/schemas/StartReadSetImportJobSourceItem_sourceFiles'
        sourceFileType:
          allOf:
          - $ref: '#/components/schemas/FileType'
          - description: The source's file type.
          title: sourceFileType
        subjectId:
          allOf:
          - $ref: '#/components/schemas/SubjectId'
          - description: The source's subject ID.
          title: subjectId
        sampleId:
          allOf:
          - $ref: '#/components/schemas/SampleId'
          - description: The source's sample ID.
          title: sampleId
        generatedFrom:
          allOf:
          - $ref: '#/components/schemas/GeneratedFrom'
          - description: Where the source originated.
          title: generatedFrom
        referenceArn:
          allOf:
          - $ref: '#/components/schemas/ReferenceArn'
          - description: The source's reference ARN.
          title: referenceArn
        name:
          allOf:
          - $ref: '#/components/schemas/ReadSetName'
          - description: The source's name.
          title: name
        description:
          allOf:
          - $ref: '#/components/schemas/ReadSetDescription'
          - description: The source's description.
          title: description
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: The source's tags.
          title: tags
      required:
      - referenceArn
      - sampleId
      - sourceFileType
      - sourceFiles
      - subjectId
      title: StartReadSetImportJobSourceItem
      type: object
    StartReferenceImportJobResponse:
      example:
        referenceStoreId: ""
        creationTime: ""
        roleArn: ""
        id: ""
        status: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ImportJobId'
          - description: The job's ID.
          title: id
        referenceStoreId:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreId'
          - description: The job's reference store ID.
          title: referenceStoreId
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          - description: The job's service role ARN.
          title: roleArn
        status:
          allOf:
          - $ref: '#/components/schemas/ReferenceImportJobStatus'
          - description: The job's status.
          title: status
        creationTime:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: When the job was created.
          title: creationTime
      required:
      - creationTime
      - id
      - referenceStoreId
      - roleArn
      - status
      title: StartReferenceImportJobResponse
      type: object
    StartReferenceImportJobSourceItem:
      description: A source for a reference import job.
      properties:
        sourceFile:
          allOf:
          - $ref: '#/components/schemas/S3Uri'
          - description: The source file's location in Amazon S3.
          title: sourceFile
        name:
          allOf:
          - $ref: '#/components/schemas/ReferenceName'
          - description: The source's name.
          title: name
        description:
          allOf:
          - $ref: '#/components/schemas/ReferenceDescription'
          - description: The source's description.
          title: description
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: The source's tags.
          title: tags
      required:
      - name
      - sourceFile
      title: StartReferenceImportJobSourceItem
      type: object
    StartRunResponse:
      example:
        id: ""
        arn: ""
        status: ""
        tags: ""
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/RunArn'
          - description: The run's ARN.
          title: arn
        id:
          allOf:
          - $ref: '#/components/schemas/RunId'
          - description: The run's ID.
          title: id
        status:
          allOf:
          - $ref: '#/components/schemas/RunStatus'
          - description: The run's status.
          title: status
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: The run's tags.
          title: tags
      title: StartRunResponse
      type: object
    StartVariantImportResponse:
      example:
        jobId: ""
      properties:
        jobId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          - description: The job's ID.
          title: jobId
      required:
      - jobId
      title: StartVariantImportResponse
      type: object
    VariantImportItemSource:
      description: A imported variant item's source.
      properties:
        source:
          allOf:
          - $ref: '#/components/schemas/S3Uri'
          - description: The source file's location in Amazon S3.
          title: source
      required:
      - source
      title: VariantImportItemSource
      type: object
    TagResourceResponse:
      properties: {}
      type: object
    UntagResourceResponse:
      properties: {}
      type: object
    TagKey:
      maxLength: 128
      minLength: 1
      title: TagKey
      type: string
    UpdateAnnotationStoreResponse:
      example:
        reference:
          referenceArn: ""
        creationTime: ""
        storeFormat: ""
        name: ""
        storeOptions:
          tsvStoreOptions:
            schema: ""
            annotationType: ""
            formatToHeader: ""
        description: ""
        updateTime: ""
        id: ""
        status: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          - description: The store's ID.
          title: id
        reference:
          $ref: '#/components/schemas/CreateVariantStoreResponse_reference'
        status:
          allOf:
          - $ref: '#/components/schemas/StoreStatus'
          - description: The store's status.
          title: status
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The store's name.
          title: name
        description:
          allOf:
          - $ref: '#/components/schemas/StoreDescription'
          - description: The store's description.
          title: description
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          - description: When the store was created.
          title: creationTime
        updateTime:
          allOf:
          - $ref: '#/components/schemas/UpdateTime'
          - description: When the store was updated.
          title: updateTime
        storeOptions:
          $ref: '#/components/schemas/UpdateAnnotationStoreResponse_storeOptions'
        storeFormat:
          allOf:
          - $ref: '#/components/schemas/StoreFormat'
          - description: The annotation file format of the store.
          title: storeFormat
      required:
      - creationTime
      - description
      - id
      - name
      - reference
      - status
      - updateTime
      title: UpdateAnnotationStoreResponse
      type: object
    UpdateVariantStoreResponse:
      example:
        reference:
          referenceArn: ""
        creationTime: ""
        name: ""
        description: ""
        updateTime: ""
        id: ""
        status: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          - description: The store's ID.
          title: id
        reference:
          $ref: '#/components/schemas/CreateVariantStoreResponse_reference'
        status:
          allOf:
          - $ref: '#/components/schemas/StoreStatus'
          - description: The store's status.
          title: status
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The store's name.
          title: name
        description:
          allOf:
          - $ref: '#/components/schemas/StoreDescription'
          - description: The store's description.
          title: description
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          - description: When the store was created.
          title: creationTime
        updateTime:
          allOf:
          - $ref: '#/components/schemas/UpdateTime'
          - description: When the store was updated.
          title: updateTime
      required:
      - creationTime
      - description
      - id
      - name
      - reference
      - status
      - updateTime
      title: UpdateVariantStoreResponse
      type: object
    UploadReadSetPartResponse:
      example:
        checksum: ""
      properties:
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: ' An identifier used to confirm that parts are being added
              to the intended upload. '
          title: checksum
      required:
      - checksum
      title: UploadReadSetPartResponse
      type: object
    SequenceStoreId:
      maxLength: 36
      minLength: 10
      pattern: "[0-9]+"
      type: string
    UploadId:
      maxLength: 36
      minLength: 10
      pattern: "[0-9]+"
      type: string
    AbortMultipartReadSetUploadRequest:
      properties: {}
      title: AbortMultipartReadSetUploadRequest
      type: object
    Accelerators:
      enum:
      - GPU
      maxLength: 64
      minLength: 1
      title: Accelerators
      type: string
    ActivateReadSetFilter:
      description: A read set activation job filter.
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetActivationJobStatus'
          - description: The filter's status.
          title: status
        createdAfter:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: The filter's start date.
          title: createdAfter
        createdBefore:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: The filter's end date.
          title: createdBefore
      title: ActivateReadSetFilter
      type: object
    ActivationJobId:
      maxLength: 36
      minLength: 10
      pattern: "[0-9]+"
      type: string
    ActivateReadSetJobItem:
      description: A read set activation job.
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ActivationJobId'
          - description: The job's ID.
          title: id
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          - description: The job's sequence store ID.
          title: sequenceStoreId
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetActivationJobStatus'
          - description: The job's status.
          title: status
        creationTime:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: When the job was created.
          title: creationTime
        completionTime:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: When the job completed.
          title: completionTime
      required:
      - creationTime
      - id
      - sequenceStoreId
      - status
      title: ActivateReadSetJobItem
      type: object
    ActivateReadSetJobList:
      items:
        $ref: '#/components/schemas/ActivateReadSetJobItem'
      type: array
    ReadSetActivationJobItemStatus:
      enum:
      - NOT_STARTED
      - IN_PROGRESS
      - FINISHED
      - FAILED
      title: ReadSetActivationJobItemStatus
      type: string
    JobStatusMessage:
      maxLength: 127
      minLength: 1
      pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
      type: string
    ActivateReadSetSourceItem:
      description: A source for a read set activation job.
      properties:
        readSetId:
          allOf:
          - $ref: '#/components/schemas/ReadSetId'
          - description: The source's read set ID.
          title: readSetId
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetActivationJobItemStatus'
          - description: The source's status.
          title: status
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/JobStatusMessage'
          - description: The source's status message.
          title: statusMessage
      required:
      - readSetId
      - status
      title: ActivateReadSetSourceItem
      type: object
    ActivateReadSetSourceList:
      items:
        $ref: '#/components/schemas/ActivateReadSetSourceItem'
      type: array
    AnnotationFieldMap:
      additionalProperties:
        $ref: '#/components/schemas/AnnotationFieldMapValueString'
      type: object
    AnnotationFieldMapKeyString:
      maxLength: 21
      minLength: 1
      type: string
    S3Uri:
      pattern: "s3://([a-z0-9][a-z0-9-.]{1,61}[a-z0-9])/(.{1,1024})"
      type: string
    AnnotationImportItemDetail:
      description: Details about an imported annotation item.
      properties:
        source:
          allOf:
          - $ref: '#/components/schemas/S3Uri'
          - description: The source file's location in Amazon S3.
          title: source
        jobStatus:
          allOf:
          - $ref: '#/components/schemas/JobStatus'
          - description: The item's job status.
          title: jobStatus
      required:
      - jobStatus
      - source
      title: AnnotationImportItemDetail
      type: object
    AnnotationImportItemDetails:
      items:
        $ref: '#/components/schemas/AnnotationImportItemDetail'
      maxItems: 1
      minItems: 1
      type: array
    AnnotationImportItemSources:
      items:
        $ref: '#/components/schemas/AnnotationImportItemSource'
      minItems: 1
      type: array
    Arn:
      maxLength: 2048
      minLength: 20
      pattern: "arn:([^: ]*):([^: ]*):([^: ]*):([0-9]{12}):([^: ]*)"
      type: string
    CreationTime:
      format: date-time
      type: string
    UpdateTime:
      format: date-time
      type: string
    CompletionTime:
      format: date-time
      type: string
    RunLeftNormalization:
      type: boolean
    AnnotationImportJobItem:
      description: An annotation import job.
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The job's ID.
          title: id
        destinationName:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The job's destination annotation store.
          title: destinationName
        roleArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The job's service role ARN.
          title: roleArn
        status:
          allOf:
          - $ref: '#/components/schemas/JobStatus'
          - description: The job's status.
          title: status
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          - description: When the job was created.
          title: creationTime
        updateTime:
          allOf:
          - $ref: '#/components/schemas/UpdateTime'
          - description: When the job was updated.
          title: updateTime
        completionTime:
          allOf:
          - $ref: '#/components/schemas/CompletionTime'
          - description: When the job completed.
          title: completionTime
        runLeftNormalization:
          allOf:
          - $ref: '#/components/schemas/RunLeftNormalization'
          - description: The job's left normalization setting.
          title: runLeftNormalization
        annotationFields:
          allOf:
          - $ref: '#/components/schemas/AnnotationFieldMap'
          - description: ' The annotation schema generated by the parsed annotation
              data. '
          title: annotationFields
      required:
      - creationTime
      - destinationName
      - id
      - roleArn
      - status
      - updateTime
      title: AnnotationImportJobItem
      type: object
    AnnotationImportJobItems:
      items:
        $ref: '#/components/schemas/AnnotationImportJobItem'
      type: array
    ResourceId:
      pattern: "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}"
      type: string
    ReferenceItem:
      description: A genome reference.
      properties:
        referenceArn:
          allOf:
          - $ref: '#/components/schemas/ReferenceArn'
          - description: The reference's ARN.
          title: referenceArn
      title: ReferenceItem
      type: object
    StoreFormat:
      enum:
      - GFF
      - TSV
      - VCF
      title: StoreFormat
      type: string
    StoreDescription:
      maxLength: 500
      minLength: 0
      type: string
    SseConfig:
      description: Server-side encryption (SSE) settings for a store.
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/EncryptionType'
          - description: The encryption type.
          title: type
        keyArn:
          allOf:
          - $ref: '#/components/schemas/SseConfigKeyArnString'
          - description: An encryption key ARN.
          title: keyArn
      required:
      - type
      title: SseConfig
      type: object
    StatusMessage:
      maxLength: 1000
      minLength: 0
      type: string
    Long:
      type: integer
    AnnotationStoreItem:
      description: An annotation store.
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          - description: The store's ID.
          title: id
        reference:
          $ref: '#/components/schemas/CreateVariantStoreResponse_reference'
        status:
          allOf:
          - $ref: '#/components/schemas/StoreStatus'
          - description: The store's status.
          title: status
        storeArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The store's ARN.
          title: storeArn
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The store's name.
          title: name
        storeFormat:
          allOf:
          - $ref: '#/components/schemas/StoreFormat'
          - description: The store's file format.
          title: storeFormat
        description:
          allOf:
          - $ref: '#/components/schemas/StoreDescription'
          - description: The store's description.
          title: description
        sseConfig:
          $ref: '#/components/schemas/GetAnnotationStoreResponse_sseConfig'
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          - description: The store's creation time.
          title: creationTime
        updateTime:
          allOf:
          - $ref: '#/components/schemas/UpdateTime'
          - description: When the store was updated.
          title: updateTime
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/StatusMessage'
          - description: The store's status message.
          title: statusMessage
        storeSizeBytes:
          allOf:
          - $ref: '#/components/schemas/Long'
          - description: The store's size in bytes.
          title: storeSizeBytes
      required:
      - creationTime
      - description
      - id
      - name
      - reference
      - sseConfig
      - status
      - statusMessage
      - storeArn
      - storeFormat
      - storeSizeBytes
      - updateTime
      title: AnnotationStoreItem
      type: object
    AnnotationStoreItems:
      items:
        $ref: '#/components/schemas/AnnotationStoreItem'
      type: array
    AnnotationType:
      enum:
      - GENERIC
      - CHR_POS
      - CHR_POS_REF_ALT
      - CHR_START_END_ONE_BASE
      - CHR_START_END_REF_ALT_ONE_BASE
      - CHR_START_END_ZERO_BASE
      - CHR_START_END_REF_ALT_ZERO_BASE
      title: AnnotationType
      type: string
    ReadSetIdList:
      items:
        $ref: '#/components/schemas/ReadSetId'
      maxItems: 100
      minItems: 1
      type: array
    BatchDeleteReadSetRequest:
      example:
        ids: ""
      properties:
        ids:
          allOf:
          - $ref: '#/components/schemas/ReadSetIdList'
          - description: The read sets' IDs.
      required:
      - ids
      title: BatchDeleteReadSetRequest
      type: object
    ReadSetBatchErrorList:
      items:
        $ref: '#/components/schemas/ReadSetBatchError'
      type: array
    Blob:
      type: string
    Boolean:
      type: boolean
    CancelAnnotationImportRequest:
      properties: {}
      title: CancelAnnotationImportRequest
      type: object
    RunId:
      maxLength: 18
      minLength: 1
      pattern: "[0-9]+"
      type: string
    CancelRunRequest:
      properties: {}
      title: CancelRunRequest
      type: object
    CancelVariantImportRequest:
      properties: {}
      title: CancelVariantImportRequest
      type: object
    ClientToken:
      maxLength: 127
      minLength: 1
      pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
      type: string
    CommentChar:
      maxLength: 1
      minLength: 1
      type: string
    CompleteReadSetUploadPartList:
      items:
        $ref: '#/components/schemas/CompleteReadSetUploadPartListItem'
      type: array
    CompleteMultipartReadSetUploadRequest:
      example:
        parts: ""
      properties:
        parts:
          allOf:
          - $ref: '#/components/schemas/CompleteReadSetUploadPartList'
          - description: ' The individual uploads or parts of a multipart upload. '
      required:
      - parts
      title: CompleteMultipartReadSetUploadRequest
      type: object
    CompleteReadSetUploadPartListItemPartNumberInteger:
      maximum: 10000
      minimum: 1
      type: integer
    ReadSetPartSource:
      enum:
      - SOURCE1
      - SOURCE2
      title: ReadSetPartSource
      type: string
    CreateAnnotationStoreRequestNameString:
      pattern: "([a-z]){1}([a-z0-9_]){2,254}"
      type: string
    TagMap:
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
      type: object
    StoreOptions:
      description: Settings for a store.
      properties:
        tsvStoreOptions:
          $ref: '#/components/schemas/CreateAnnotationStore_request_storeOptions_tsvStoreOptions'
      title: StoreOptions
      type: object
    CreateAnnotationStoreRequest:
      example:
        reference:
          referenceArn: ""
        storeFormat: ""
        name: ""
        storeOptions:
          tsvStoreOptions:
            schema: ""
            annotationType: ""
            formatToHeader: ""
        description: ""
        sseConfig:
          keyArn: ""
          type: ""
        tags: ""
      properties:
        reference:
          $ref: '#/components/schemas/CreateAnnotationStoreRequest_reference'
        name:
          allOf:
          - $ref: '#/components/schemas/CreateAnnotationStoreRequestNameString'
          - description: A name for the store.
        description:
          allOf:
          - $ref: '#/components/schemas/StoreDescription'
          - description: A description for the store.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: Tags for the store.
        sseConfig:
          $ref: '#/components/schemas/CreateAnnotationStoreRequest_sseConfig'
        storeFormat:
          allOf:
          - $ref: '#/components/schemas/StoreFormat'
          - description: The annotation file format of the store.
        storeOptions:
          $ref: '#/components/schemas/CreateAnnotationStoreRequest_storeOptions'
      required:
      - storeFormat
      title: CreateAnnotationStoreRequest
      type: object
    FileType:
      enum:
      - FASTQ
      - BAM
      - CRAM
      title: FileType
      type: string
    ReadSetDescription:
      maxLength: 255
      minLength: 1
      pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
      type: string
    CreateMultipartReadSetUploadRequest:
      example:
        sourceFileType: ""
        sampleId: ""
        clientToken: ""
        name: ""
        referenceArn: ""
        description: ""
        subjectId: ""
        generatedFrom: ""
        tags: ""
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          - description: ' An idempotency token that can be used to avoid triggering
              multiple multipart uploads. '
        sourceFileType:
          allOf:
          - $ref: '#/components/schemas/FileType'
          - description: ' The type of file being uploaded. '
        subjectId:
          allOf:
          - $ref: '#/components/schemas/SubjectId'
          - description: ' The source''s subject ID. '
        sampleId:
          allOf:
          - $ref: '#/components/schemas/SampleId'
          - description: ' The source''s sample ID. '
        generatedFrom:
          allOf:
          - $ref: '#/components/schemas/GeneratedFrom'
          - description: ' Where the source originated. '
        referenceArn:
          allOf:
          - $ref: '#/components/schemas/ReferenceArn'
          - description: ' The ARN of the reference. '
        name:
          allOf:
          - $ref: '#/components/schemas/ReadSetName'
          - description: ' The name of the read set. '
        description:
          allOf:
          - $ref: '#/components/schemas/ReadSetDescription'
          - description: ' The description of the read set. '
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: ' Any tags to add to the read set. '
      required:
      - name
      - referenceArn
      - sampleId
      - sourceFileType
      - subjectId
      title: CreateMultipartReadSetUploadRequest
      type: object
    ReferenceStoreDescription:
      maxLength: 255
      minLength: 1
      pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
      type: string
    CreateReferenceStoreRequest:
      example:
        clientToken: ""
        name: ""
        description: ""
        sseConfig:
          keyArn: ""
          type: ""
        tags: ""
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreName'
          - description: A name for the store.
        description:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreDescription'
          - description: A description for the store.
        sseConfig:
          $ref: '#/components/schemas/CreateAnnotationStoreRequest_sseConfig'
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: Tags for the store.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          - description: "To ensure that requests don't run multiple times, specify\
              \ a unique token for each request."
      required:
      - name
      title: CreateReferenceStoreRequest
      type: object
    ReferenceStoreId:
      maxLength: 36
      minLength: 10
      pattern: "[0-9]+"
      type: string
    ReferenceStoreArn:
      maxLength: 127
      minLength: 1
      pattern: arn:.+
      type: string
    RunGroupName:
      maxLength: 128
      minLength: 1
      pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
      type: string
    CreateRunGroupRequestMaxCpusInteger:
      maximum: 100000
      minimum: 1
      type: integer
    CreateRunGroupRequestMaxRunsInteger:
      maximum: 100000
      minimum: 1
      type: integer
    CreateRunGroupRequestMaxDurationInteger:
      maximum: 100000
      minimum: 1
      type: integer
    RunGroupRequestId:
      maxLength: 128
      minLength: 1
      pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
      type: string
    CreateRunGroupRequestMaxGpusInteger:
      maximum: 100000
      minimum: 1
      type: integer
    CreateRunGroupRequest:
      example:
        maxGpus: ""
        maxRuns: ""
        requestId: ""
        maxCpus: ""
        name: ""
        maxDuration: ""
        tags: ""
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/RunGroupName'
          - description: A name for the group.
        maxCpus:
          allOf:
          - $ref: '#/components/schemas/CreateRunGroupRequestMaxCpusInteger'
          - description: The maximum number of CPUs to use in the group.
        maxRuns:
          allOf:
          - $ref: '#/components/schemas/CreateRunGroupRequestMaxRunsInteger'
          - description: The maximum number of concurrent runs for the group.
        maxDuration:
          allOf:
          - $ref: '#/components/schemas/CreateRunGroupRequestMaxDurationInteger'
          - description: A maximum run time for the group in minutes.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: Tags for the group.
        requestId:
          allOf:
          - $ref: '#/components/schemas/RunGroupRequestId'
          - description: "To ensure that requests don't run multiple times, specify\
              \ a unique ID for each request."
        maxGpus:
          allOf:
          - $ref: '#/components/schemas/CreateRunGroupRequestMaxGpusInteger'
          - description: ' The maximum GPUs that can be used by a run group. '
      required:
      - requestId
      title: CreateRunGroupRequest
      type: object
    RunGroupArn:
      maxLength: 128
      minLength: 1
      pattern: arn:.+
      type: string
    RunGroupId:
      maxLength: 18
      minLength: 1
      pattern: "[0-9]+"
      type: string
    SequenceStoreDescription:
      maxLength: 255
      minLength: 1
      pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
      type: string
    S3Destination:
      pattern: "s3://([a-z0-9][a-z0-9-.]{1,61}[a-z0-9])/?((.{1,1024})/)?"
      type: string
    CreateSequenceStoreRequest:
      example:
        clientToken: ""
        name: ""
        description: ""
        sseConfig:
          keyArn: ""
          type: ""
        fallbackLocation: ""
        tags: ""
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreName'
          - description: A name for the store.
        description:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreDescription'
          - description: A description for the store.
        sseConfig:
          $ref: '#/components/schemas/CreateAnnotationStoreRequest_sseConfig'
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: Tags for the store.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          - description: "To ensure that requests don't run multiple times, specify\
              \ a unique token for each request."
        fallbackLocation:
          allOf:
          - $ref: '#/components/schemas/S3Destination'
          - description: ' An S3 location that is used to store files that have failed
              a direct upload. '
      required:
      - name
      title: CreateSequenceStoreRequest
      type: object
    SequenceStoreArn:
      maxLength: 127
      minLength: 1
      pattern: arn:.+
      type: string
    CreateVariantStoreRequestNameString:
      pattern: "([a-z]){1}([a-z0-9_]){2,254}"
      type: string
    CreateVariantStoreRequest:
      example:
        reference:
          referenceArn: ""
        name: ""
        description: ""
        sseConfig:
          keyArn: ""
          type: ""
        tags: ""
      properties:
        reference:
          $ref: '#/components/schemas/CreateVariantStoreRequest_reference'
        name:
          allOf:
          - $ref: '#/components/schemas/CreateVariantStoreRequestNameString'
          - description: A name for the store.
        description:
          allOf:
          - $ref: '#/components/schemas/StoreDescription'
          - description: A description for the store.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: Tags for the store.
        sseConfig:
          $ref: '#/components/schemas/CreateAnnotationStoreRequest_sseConfig'
      required:
      - reference
      title: CreateVariantStoreRequest
      type: object
    WorkflowName:
      maxLength: 128
      minLength: 1
      pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
      type: string
    WorkflowDescription:
      maxLength: 256
      minLength: 1
      pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
      type: string
    WorkflowEngine:
      enum:
      - WDL
      - NEXTFLOW
      - CWL
      maxLength: 64
      minLength: 1
      title: WorkflowEngine
      type: string
    WorkflowDefinition:
      maxLength: 256
      minLength: 1
      pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
      type: string
    WorkflowMain:
      maxLength: 128
      minLength: 1
      pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
      type: string
    WorkflowParameterTemplate:
      additionalProperties:
        $ref: '#/components/schemas/WorkflowParameter'
      maxProperties: 1000
      minProperties: 1
      type: object
    CreateWorkflowRequestStorageCapacityInteger:
      maximum: 100000
      minimum: 0
      type: integer
    WorkflowRequestId:
      maxLength: 128
      minLength: 1
      pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
      type: string
    CreateWorkflowRequest:
      example:
        engine: ""
        requestId: ""
        name: ""
        description: ""
        accelerators: ""
        main: ""
        storageCapacity: ""
        definitionZip: ""
        definitionUri: ""
        parameterTemplate: ""
        tags: ""
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/WorkflowName'
          - description: A name for the workflow.
        description:
          allOf:
          - $ref: '#/components/schemas/WorkflowDescription'
          - description: A description for the workflow.
        engine:
          allOf:
          - $ref: '#/components/schemas/WorkflowEngine'
          - description: An engine for the workflow.
        definitionZip:
          allOf:
          - $ref: '#/components/schemas/Blob'
          - description: A ZIP archive for the workflow.
        definitionUri:
          allOf:
          - $ref: '#/components/schemas/WorkflowDefinition'
          - description: The URI of a definition for the workflow.
        main:
          allOf:
          - $ref: '#/components/schemas/WorkflowMain'
          - description: The path of the main definition file for the workflow.
        parameterTemplate:
          allOf:
          - $ref: '#/components/schemas/WorkflowParameterTemplate'
          - description: A parameter template for the workflow.
        storageCapacity:
          allOf:
          - $ref: '#/components/schemas/CreateWorkflowRequestStorageCapacityInteger'
          - description: A storage capacity for the workflow in gigabytes.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: Tags for the workflow.
        requestId:
          allOf:
          - $ref: '#/components/schemas/WorkflowRequestId'
          - description: "To ensure that requests don't run multiple times, specify\
              \ a unique ID for each request."
        accelerators:
          allOf:
          - $ref: '#/components/schemas/Accelerators'
          - description: ' The computational accelerator specified to run the workflow. '
      required:
      - requestId
      title: CreateWorkflowRequest
      type: object
    WorkflowArn:
      maxLength: 128
      minLength: 1
      pattern: arn:.+
      type: string
    WorkflowId:
      maxLength: 18
      minLength: 1
      pattern: "[0-9]+"
      type: string
    WorkflowStatus:
      enum:
      - CREATING
      - ACTIVE
      - UPDATING
      - DELETED
      - FAILED
      - INACTIVE
      maxLength: 64
      minLength: 1
      title: WorkflowStatus
      type: string
    PrimitiveBoolean:
      type: boolean
    DeleteAnnotationStoreRequest:
      properties: {}
      title: DeleteAnnotationStoreRequest
      type: object
    ReferenceId:
      maxLength: 36
      minLength: 10
      pattern: "[0-9]+"
      type: string
    DeleteReferenceRequest:
      properties: {}
      title: DeleteReferenceRequest
      type: object
    DeleteReferenceStoreRequest:
      properties: {}
      title: DeleteReferenceStoreRequest
      type: object
    DeleteRunGroupRequest:
      properties: {}
      title: DeleteRunGroupRequest
      type: object
    DeleteRunRequest:
      properties: {}
      title: DeleteRunRequest
      type: object
    DeleteSequenceStoreRequest:
      properties: {}
      title: DeleteSequenceStoreRequest
      type: object
    DeleteVariantStoreRequest:
      properties: {}
      title: DeleteVariantStoreRequest
      type: object
    DeleteWorkflowRequest:
      properties: {}
      title: DeleteWorkflowRequest
      type: object
    Encoding:
      maxLength: 20
      minLength: 1
      type: string
    EscapeChar:
      maxLength: 1
      minLength: 1
      type: string
    EscapeQuotes:
      type: boolean
    ExportJobId:
      maxLength: 36
      minLength: 10
      pattern: "[0-9]+"
      type: string
    ReadSetExportJobItemStatus:
      enum:
      - NOT_STARTED
      - IN_PROGRESS
      - FINISHED
      - FAILED
      title: ReadSetExportJobItemStatus
      type: string
    ExportReadSetDetail:
      description: Details about a read set.
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ReadSetId'
          - description: The set's ID.
          title: id
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetExportJobItemStatus'
          - description: The set's status.
          title: status
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/JobStatusMessage'
          - description: The set's status message.
          title: statusMessage
      required:
      - id
      - status
      title: ExportReadSetDetail
      type: object
    ExportReadSetDetailList:
      items:
        $ref: '#/components/schemas/ExportReadSetDetail'
      type: array
    ExportReadSetFilter:
      description: An read set export job filter.
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetExportJobStatus'
          - description: A status to filter on.
          title: status
        createdAfter:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: The filter's start date.
          title: createdAfter
        createdBefore:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: The filter's end date.
          title: createdBefore
      title: ExportReadSetFilter
      type: object
    ExportReadSetJobDetail:
      description: Details about a read set export job.
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ExportJobId'
          - description: The job's ID.
          title: id
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          - description: The job's sequence store ID.
          title: sequenceStoreId
        destination:
          allOf:
          - $ref: '#/components/schemas/S3Destination'
          - description: The job's destination in Amazon S3.
          title: destination
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetExportJobStatus'
          - description: The job's status.
          title: status
        creationTime:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: When the job was created.
          title: creationTime
        completionTime:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: When the job completed.
          title: completionTime
      required:
      - creationTime
      - destination
      - id
      - sequenceStoreId
      - status
      title: ExportReadSetJobDetail
      type: object
    ExportReadSetJobDetailList:
      items:
        $ref: '#/components/schemas/ExportReadSetJobDetail'
      type: array
    FileInformationTotalPartsInteger:
      maximum: 10000
      minimum: 1
      type: integer
    FileInformationPartSizeLong:
      maximum: 5368709120
      minimum: 1
      type: integer
    FileInformationContentLengthLong:
      maximum: 5497558138880
      minimum: 1
      type: integer
    FileInformation:
      description: Details about a file.
      properties:
        totalParts:
          allOf:
          - $ref: '#/components/schemas/FileInformationTotalPartsInteger'
          - description: The file's total parts.
          title: totalParts
        partSize:
          allOf:
          - $ref: '#/components/schemas/FileInformationPartSizeLong'
          - description: The file's part size.
          title: partSize
        contentLength:
          allOf:
          - $ref: '#/components/schemas/FileInformationContentLengthLong'
          - description: The file's content length.
          title: contentLength
      title: FileInformation
      type: object
    FormatOptions:
      description: Formatting options for a file.
      example:
        tsvOptions:
          readOptions:
            lineSep: ""
            quote: ""
            escapeQuotes: ""
            header: ""
            comment: ""
            encoding: ""
            quoteAll: ""
            escape: ""
            sep: ""
        vcfOptions:
          ignoreFilterField: ""
          ignoreQualField: ""
      properties:
        tsvOptions:
          $ref: '#/components/schemas/StartAnnotationImportJob_request_formatOptions_tsvOptions'
        vcfOptions:
          $ref: '#/components/schemas/StartAnnotationImportJob_request_formatOptions_vcfOptions'
      title: FormatOptions
      type: object
    FormatToHeaderValueString:
      maxLength: 1000
      minLength: 0
      title: FormatToHeaderValueString
      type: string
    FormatToHeader:
      additionalProperties:
        $ref: '#/components/schemas/FormatToHeaderValueString'
      type: object
    FormatToHeaderKey:
      enum:
      - CHR
      - START
      - END
      - REF
      - ALT
      - POS
      type: string
    GetAnnotationImportRequest:
      properties: {}
      title: GetAnnotationImportRequest
      type: object
    StoreName:
      maxLength: 255
      minLength: 3
      pattern: "([a-z]){1}([a-z0-9_]){2,254}"
      type: string
    JobStatusMsg:
      type: string
    GetAnnotationStoreRequest:
      properties: {}
      title: GetAnnotationStoreRequest
      type: object
    GetReadSetActivationJobRequest:
      properties: {}
      title: GetReadSetActivationJobRequest
      type: object
    GetReadSetExportJobRequest:
      properties: {}
      title: GetReadSetExportJobRequest
      type: object
    ImportJobId:
      maxLength: 36
      minLength: 10
      pattern: "[0-9]+"
      type: string
    GetReadSetImportJobRequest:
      properties: {}
      title: GetReadSetImportJobRequest
      type: object
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.*
      type: string
    ImportReadSetSourceList:
      items:
        $ref: '#/components/schemas/ImportReadSetSourceItem'
      type: array
    GetReadSetMetadataRequest:
      properties: {}
      title: GetReadSetMetadataRequest
      type: object
    ReadSetArn:
      maxLength: 127
      minLength: 1
      pattern: arn:.+
      type: string
    SequenceInformation:
      description: Details about a sequence.
      properties:
        totalReadCount:
          allOf:
          - $ref: '#/components/schemas/Long'
          - description: The sequence's total read count.
          title: totalReadCount
        totalBaseCount:
          allOf:
          - $ref: '#/components/schemas/Long'
          - description: The sequence's total base count.
          title: totalBaseCount
        generatedFrom:
          allOf:
          - $ref: '#/components/schemas/GeneratedFrom'
          - description: Where the sequence originated.
          title: generatedFrom
        alignment:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The sequence's alignment setting.
          title: alignment
      title: SequenceInformation
      type: object
    ReadSetFiles:
      description: Files in a read set.
      properties:
        source1:
          $ref: '#/components/schemas/ReadSetFiles_source1'
        source2:
          $ref: '#/components/schemas/ReadSetFiles_source2'
        index:
          $ref: '#/components/schemas/ReadSetFiles_index'
      title: ReadSetFiles
      type: object
    ReadSetStatusMessage:
      maxLength: 255
      minLength: 1
      pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
      type: string
    ReadSetFile:
      enum:
      - SOURCE1
      - SOURCE2
      - INDEX
      type: string
    GetReadSetRequestPartNumberInteger:
      maximum: 10000
      minimum: 1
      type: integer
    GetReadSetRequest:
      properties: {}
      title: GetReadSetRequest
      type: object
    ReadSetStreamingBlob:
      type: string
    GetReferenceImportJobRequest:
      properties: {}
      title: GetReferenceImportJobRequest
      type: object
    ImportReferenceSourceList:
      items:
        $ref: '#/components/schemas/ImportReferenceSourceItem'
      type: array
    GetReferenceMetadataRequest:
      properties: {}
      title: GetReferenceMetadataRequest
      type: object
    ReferenceStatus:
      enum:
      - ACTIVE
      - DELETING
      - DELETED
      title: ReferenceStatus
      type: string
    ReferenceDescription:
      maxLength: 255
      minLength: 1
      pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
      type: string
    ReferenceFiles:
      description: A set of genome reference files.
      properties:
        source:
          $ref: '#/components/schemas/ReferenceFiles_source'
        index:
          $ref: '#/components/schemas/ReadSetFiles_index'
      title: ReferenceFiles
      type: object
    Range:
      maxLength: 127
      minLength: 1
      pattern: "[\\p{N}||\\p{P}]+"
      type: string
    GetReferenceRequestPartNumberInteger:
      maximum: 10000
      minimum: 1
      type: integer
    ReferenceFile:
      enum:
      - SOURCE
      - INDEX
      type: string
    GetReferenceRequest:
      properties: {}
      title: GetReferenceRequest
      type: object
    ReferenceStreamingBlob:
      type: string
    GetReferenceStoreRequest:
      properties: {}
      title: GetReferenceStoreRequest
      type: object
    GetRunGroupRequest:
      properties: {}
      title: GetRunGroupRequest
      type: object
    GetRunGroupResponseMaxCpusInteger:
      maximum: 100000
      minimum: 1
      type: integer
    GetRunGroupResponseMaxRunsInteger:
      maximum: 100000
      minimum: 1
      type: integer
    GetRunGroupResponseMaxDurationInteger:
      maximum: 100000
      minimum: 1
      type: integer
    RunGroupTimestamp:
      format: date-time
      type: string
    GetRunGroupResponseMaxGpusInteger:
      maximum: 100000
      minimum: 1
      type: integer
    RunExportList:
      items:
        $ref: '#/components/schemas/RunExport'
      maxItems: 32
      minItems: 0
      type: array
    GetRunRequest:
      properties: {}
      title: GetRunRequest
      type: object
    RunArn:
      maxLength: 128
      minLength: 1
      pattern: arn:.+
      type: string
    RunStatus:
      enum:
      - PENDING
      - STARTING
      - RUNNING
      - STOPPING
      - COMPLETED
      - DELETED
      - CANCELLED
      - FAILED
      maxLength: 64
      minLength: 1
      title: RunStatus
      type: string
    WorkflowType:
      enum:
      - PRIVATE
      - READY2RUN
      maxLength: 64
      minLength: 1
      title: WorkflowType
      type: string
    RunRoleArn:
      maxLength: 128
      minLength: 1
      pattern: arn:.+
      type: string
    RunName:
      maxLength: 128
      minLength: 1
      pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
      type: string
    GetRunResponsePriorityInteger:
      maximum: 100000
      minimum: 0
      type: integer
    WorkflowDigest:
      maxLength: 64
      minLength: 1
      type: string
    RunParameters:
      properties: {}
      type: object
    GetRunResponseStorageCapacityInteger:
      maximum: 100000
      minimum: 0
      type: integer
    RunOutputUri:
      maxLength: 128
      minLength: 1
      pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
      type: string
    RunLogLevel:
      enum:
      - "OFF"
      - FATAL
      - ERROR
      - ALL
      maxLength: 64
      minLength: 1
      title: RunLogLevel
      type: string
    RunResourceDigests:
      additionalProperties:
        $ref: '#/components/schemas/RunResourceDigest'
      type: object
    RunStartedBy:
      maxLength: 128
      minLength: 1
      type: string
    RunTimestamp:
      format: date-time
      type: string
    RunStatusMessage:
      pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
      type: string
    TaskId:
      maxLength: 18
      minLength: 1
      pattern: "[0-9]+"
      type: string
    GetRunTaskRequest:
      properties: {}
      title: GetRunTaskRequest
      type: object
    TaskStatus:
      enum:
      - PENDING
      - STARTING
      - RUNNING
      - STOPPING
      - COMPLETED
      - CANCELLED
      - FAILED
      maxLength: 64
      minLength: 1
      title: TaskStatus
      type: string
    TaskName:
      maxLength: 128
      minLength: 1
      type: string
    GetRunTaskResponseCpusInteger:
      minimum: 1
      type: integer
    GetRunTaskResponseMemoryInteger:
      minimum: 1
      type: integer
    TaskTimestamp:
      format: date-time
      type: string
    TaskStatusMessage:
      pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
      type: string
    TaskLogStream:
      pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
      type: string
    GetRunTaskResponseGpusInteger:
      minimum: 0
      type: integer
    GetSequenceStoreRequest:
      properties: {}
      title: GetSequenceStoreRequest
      type: object
    GetVariantImportRequest:
      properties: {}
      title: GetVariantImportRequest
      type: object
    VariantImportItemDetails:
      items:
        $ref: '#/components/schemas/VariantImportItemDetail'
      minItems: 1
      type: array
    GetVariantStoreRequest:
      properties: {}
      title: GetVariantStoreRequest
      type: object
    WorkflowExportList:
      items:
        $ref: '#/components/schemas/WorkflowExport'
      maxItems: 32
      minItems: 0
      type: array
    GetWorkflowRequest:
      properties: {}
      title: GetWorkflowRequest
      type: object
    GetWorkflowResponseStorageCapacityInteger:
      maximum: 100000
      minimum: 0
      type: integer
    WorkflowTimestamp:
      format: date-time
      type: string
    WorkflowStatusMessage:
      pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
      type: string
    WorkflowMetadata:
      additionalProperties:
        $ref: '#/components/schemas/WorkflowMetadataValue'
      type: object
    Header:
      type: boolean
    ImportReadSetFilter:
      description: A filter for import read set jobs.
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetImportJobStatus'
          - description: A status to filter on.
          title: status
        createdAfter:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: The filter's start date.
          title: createdAfter
        createdBefore:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: The filter's end date.
          title: createdBefore
      title: ImportReadSetFilter
      type: object
    ImportReadSetJobItem:
      description: An import read set job.
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ImportJobId'
          - description: The job's ID.
          title: id
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          - description: The job's sequence store ID.
          title: sequenceStoreId
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          - description: The job's service role ARN.
          title: roleArn
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetImportJobStatus'
          - description: The job's status.
          title: status
        creationTime:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: When the job was created.
          title: creationTime
        completionTime:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: When the job completed.
          title: completionTime
      required:
      - creationTime
      - id
      - roleArn
      - sequenceStoreId
      - status
      title: ImportReadSetJobItem
      type: object
    ImportReadSetJobList:
      items:
        $ref: '#/components/schemas/ImportReadSetJobItem'
      type: array
    SourceFiles:
      description: Source files for a sequence.
      properties:
        source1:
          allOf:
          - $ref: '#/components/schemas/S3Uri'
          - description: The location of the first file in Amazon S3.
          title: source1
        source2:
          allOf:
          - $ref: '#/components/schemas/S3Uri'
          - description: The location of the second file in Amazon S3.
          title: source2
      required:
      - source1
      title: SourceFiles
      type: object
    ReadSetImportJobItemStatus:
      enum:
      - NOT_STARTED
      - IN_PROGRESS
      - FINISHED
      - FAILED
      title: ReadSetImportJobItemStatus
      type: string
    ImportReadSetSourceItem:
      description: A source for an import read set job.
      properties:
        sourceFiles:
          $ref: '#/components/schemas/StartReadSetImportJobSourceItem_sourceFiles'
        sourceFileType:
          allOf:
          - $ref: '#/components/schemas/FileType'
          - description: The source's file type.
          title: sourceFileType
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetImportJobItemStatus'
          - description: The source's status.
          title: status
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/JobStatusMessage'
          - description: The source's status message.
          title: statusMessage
        subjectId:
          allOf:
          - $ref: '#/components/schemas/SubjectId'
          - description: The source's subject ID.
          title: subjectId
        sampleId:
          allOf:
          - $ref: '#/components/schemas/SampleId'
          - description: The source's sample ID.
          title: sampleId
        generatedFrom:
          allOf:
          - $ref: '#/components/schemas/GeneratedFrom'
          - description: Where the source originated.
          title: generatedFrom
        referenceArn:
          allOf:
          - $ref: '#/components/schemas/ReferenceArn'
          - description: The source's genome reference ARN.
          title: referenceArn
        name:
          allOf:
          - $ref: '#/components/schemas/ReadSetName'
          - description: The source's name.
          title: name
        description:
          allOf:
          - $ref: '#/components/schemas/ReadSetDescription'
          - description: The source's description.
          title: description
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: The source's tags.
          title: tags
      required:
      - sampleId
      - sourceFileType
      - sourceFiles
      - status
      - subjectId
      title: ImportReadSetSourceItem
      type: object
    ImportReferenceFilter:
      description: A filter for import references.
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/ReferenceImportJobStatus'
          - description: A status to filter on.
          title: status
        createdAfter:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: The filter's start date.
          title: createdAfter
        createdBefore:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: The filter's end date.
          title: createdBefore
      title: ImportReferenceFilter
      type: object
    ImportReferenceJobItem:
      description: An import reference job.
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ImportJobId'
          - description: The job's ID.
          title: id
        referenceStoreId:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreId'
          - description: The job's reference store ID.
          title: referenceStoreId
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          - description: The job's service role ARN.
          title: roleArn
        status:
          allOf:
          - $ref: '#/components/schemas/ReferenceImportJobStatus'
          - description: The job's status.
          title: status
        creationTime:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: When the job was created.
          title: creationTime
        completionTime:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: When the job completed.
          title: completionTime
      required:
      - creationTime
      - id
      - referenceStoreId
      - roleArn
      - status
      title: ImportReferenceJobItem
      type: object
    ImportReferenceJobList:
      items:
        $ref: '#/components/schemas/ImportReferenceJobItem'
      type: array
    ReferenceImportJobItemStatus:
      enum:
      - NOT_STARTED
      - IN_PROGRESS
      - FINISHED
      - FAILED
      title: ReferenceImportJobItemStatus
      type: string
    ImportReferenceSourceItem:
      description: An genome reference source.
      properties:
        sourceFile:
          allOf:
          - $ref: '#/components/schemas/S3Uri'
          - description: The source file's location in Amazon S3.
          title: sourceFile
        status:
          allOf:
          - $ref: '#/components/schemas/ReferenceImportJobItemStatus'
          - description: The source's status.
          title: status
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/JobStatusMessage'
          - description: The source's status message.
          title: statusMessage
        name:
          allOf:
          - $ref: '#/components/schemas/ReferenceName'
          - description: The source's name.
          title: name
        description:
          allOf:
          - $ref: '#/components/schemas/ReferenceDescription'
          - description: The source's description.
          title: description
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: The source's tags.
          title: tags
      required:
      - status
      title: ImportReferenceSourceItem
      type: object
    LineSep:
      maxLength: 20
      minLength: 1
      type: string
    ListAnnotationImportJobsFilter:
      description: A filter for annotation import jobs.
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/JobStatus'
          - description: A status to filter on.
          title: status
        storeName:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: A store name to filter on.
          title: storeName
      title: ListAnnotationImportJobsFilter
      type: object
    ListAnnotationImportJobsRequestMaxResultsInteger:
      maximum: 100
      minimum: 1
      type: integer
    ListAnnotationImportJobsRequestIdsList:
      items:
        $ref: '#/components/schemas/ResourceIdentifier'
      maxItems: 20
      minItems: 1
      type: array
    ListAnnotationImportJobsRequestNextTokenString:
      maxLength: 10000
      minLength: 1
      type: string
    ListAnnotationImportJobsRequest:
      example:
        filter:
          storeName: ""
          status: ""
        ids: ""
      properties:
        ids:
          allOf:
          - $ref: '#/components/schemas/ListAnnotationImportJobsRequestIdsList'
          - description: IDs of annotation import jobs to retrieve.
        filter:
          $ref: '#/components/schemas/ListAnnotationImportJobsRequest_filter'
      title: ListAnnotationImportJobsRequest
      type: object
    ListAnnotationStoresFilter:
      description: A filter for annotation stores.
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/StoreStatus'
          - description: A status to filter on.
          title: status
      title: ListAnnotationStoresFilter
      type: object
    ListAnnotationStoresRequestIdsList:
      items:
        $ref: '#/components/schemas/ResourceIdentifier'
      maxItems: 20
      minItems: 1
      type: array
    ListAnnotationStoresRequestMaxResultsInteger:
      maximum: 100
      minimum: 1
      type: integer
    ListAnnotationStoresRequestNextTokenString:
      maxLength: 10000
      minLength: 1
      type: string
    ListAnnotationStoresRequest:
      example:
        filter:
          status: ""
        ids: ""
      properties:
        ids:
          allOf:
          - $ref: '#/components/schemas/ListAnnotationStoresRequestIdsList'
          - description: IDs of stores to list.
        filter:
          $ref: '#/components/schemas/ListAnnotationStoresRequest_filter'
      title: ListAnnotationStoresRequest
      type: object
    ListMultipartReadSetUploadsRequestMaxResultsInteger:
      maximum: 100
      minimum: 1
      type: integer
    NextToken:
      maxLength: 6144
      minLength: 1
      pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
      type: string
    ListMultipartReadSetUploadsRequest:
      properties: {}
      title: ListMultipartReadSetUploadsRequest
      type: object
    MultipartReadSetUploadList:
      items:
        $ref: '#/components/schemas/MultipartReadSetUploadListItem'
      type: array
    ListReadSetActivationJobsRequestMaxResultsInteger:
      maximum: 100
      minimum: 1
      type: integer
    ListReadSetActivationJobsRequest:
      example:
        filter:
          createdBefore: ""
          createdAfter: ""
          status: ""
      properties:
        filter:
          $ref: '#/components/schemas/ListReadSetActivationJobsRequest_filter'
      title: ListReadSetActivationJobsRequest
      type: object
    ListReadSetExportJobsRequestMaxResultsInteger:
      maximum: 100
      minimum: 1
      type: integer
    ListReadSetExportJobsRequest:
      example:
        filter:
          createdBefore: ""
          createdAfter: ""
          status: ""
      properties:
        filter:
          $ref: '#/components/schemas/ListReadSetExportJobsRequest_filter'
      title: ListReadSetExportJobsRequest
      type: object
    ListReadSetImportJobsRequestMaxResultsInteger:
      maximum: 100
      minimum: 1
      type: integer
    ListReadSetImportJobsRequest:
      example:
        filter:
          createdBefore: ""
          createdAfter: ""
          status: ""
      properties:
        filter:
          $ref: '#/components/schemas/ListReadSetImportJobsRequest_filter'
      title: ListReadSetImportJobsRequest
      type: object
    ListReadSetUploadPartsRequestMaxResultsInteger:
      maximum: 100
      minimum: 1
      type: integer
    ReadSetUploadPartListFilter:
      description: ' Filter settings that select for read set upload parts of interest. '
      properties:
        createdAfter:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: ' Filters for read set uploads after a specified time. '
          title: createdAfter
        createdBefore:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: ' Filters for read set part uploads before a specified time. '
          title: createdBefore
      title: ReadSetUploadPartListFilter
      type: object
    ListReadSetUploadPartsRequest:
      example:
        filter:
          createdBefore: ""
          createdAfter: ""
        partSource: ""
      properties:
        partSource:
          allOf:
          - $ref: '#/components/schemas/ReadSetPartSource'
          - description: ' The source file for the upload part. '
        filter:
          $ref: '#/components/schemas/ListReadSetUploadPartsRequest_filter'
      required:
      - partSource
      title: ListReadSetUploadPartsRequest
      type: object
    ReadSetUploadPartList:
      items:
        $ref: '#/components/schemas/ReadSetUploadPartListItem'
      type: array
    ListReadSetsRequestMaxResultsInteger:
      maximum: 100
      minimum: 1
      type: integer
    ReadSetFilter:
      description: A filter for read sets.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ReadSetName'
          - description: A name to filter on.
          title: name
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetStatus'
          - description: A status to filter on.
          title: status
        referenceArn:
          allOf:
          - $ref: '#/components/schemas/ReferenceArn'
          - description: A genome reference ARN to filter on.
          title: referenceArn
        createdAfter:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: The filter's start date.
          title: createdAfter
        createdBefore:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: The filter's end date.
          title: createdBefore
        sampleId:
          allOf:
          - $ref: '#/components/schemas/SampleId'
          - description: ' The read set source''s sample ID. '
          title: sampleId
        subjectId:
          allOf:
          - $ref: '#/components/schemas/SubjectId'
          - description: ' The read set source''s subject ID. '
          title: subjectId
        generatedFrom:
          allOf:
          - $ref: '#/components/schemas/GeneratedFrom'
          - description: ' Where the source originated. '
          title: generatedFrom
        creationType:
          allOf:
          - $ref: '#/components/schemas/CreationType'
          - description: ' The creation type of the read set. '
          title: creationType
      title: ReadSetFilter
      type: object
    ListReadSetsRequest:
      example:
        filter:
          creationType: ""
          sampleId: ""
          name: ""
          referenceArn: ""
          createdBefore: ""
          createdAfter: ""
          subjectId: ""
          status: ""
          generatedFrom: ""
      properties:
        filter:
          $ref: '#/components/schemas/ListReadSetsRequest_filter'
      title: ListReadSetsRequest
      type: object
    ReadSetList:
      items:
        $ref: '#/components/schemas/ReadSetListItem'
      type: array
    ListReferenceImportJobsRequestMaxResultsInteger:
      maximum: 100
      minimum: 1
      type: integer
    ListReferenceImportJobsRequest:
      example:
        filter:
          createdBefore: ""
          createdAfter: ""
          status: ""
      properties:
        filter:
          $ref: '#/components/schemas/ListReferenceImportJobsRequest_filter'
      title: ListReferenceImportJobsRequest
      type: object
    ListReferenceStoresRequestMaxResultsInteger:
      maximum: 100
      minimum: 1
      type: integer
    ReferenceStoreFilter:
      description: A filter for reference stores.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreName'
          - description: The name to filter on.
          title: name
        createdAfter:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: The filter's start date.
          title: createdAfter
        createdBefore:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: The filter's end date.
          title: createdBefore
      title: ReferenceStoreFilter
      type: object
    ListReferenceStoresRequest:
      example:
        filter:
          name: ""
          createdBefore: ""
          createdAfter: ""
      properties:
        filter:
          $ref: '#/components/schemas/ListReferenceStoresRequest_filter'
      title: ListReferenceStoresRequest
      type: object
    ReferenceStoreDetailList:
      items:
        $ref: '#/components/schemas/ReferenceStoreDetail'
      type: array
    ListReferencesRequestMaxResultsInteger:
      maximum: 100
      minimum: 1
      type: integer
    ReferenceFilter:
      description: A filter for references.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ReferenceName'
          - description: A name to filter on.
          title: name
        md5:
          allOf:
          - $ref: '#/components/schemas/Md5'
          - description: An MD5 checksum to filter on.
          title: md5
        createdAfter:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: The filter's start date.
          title: createdAfter
        createdBefore:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: The filter's end date.
          title: createdBefore
      title: ReferenceFilter
      type: object
    ListReferencesRequest:
      example:
        filter:
          name: ""
          createdBefore: ""
          createdAfter: ""
          md5: ""
      properties:
        filter:
          $ref: '#/components/schemas/ListReferencesRequest_filter'
      title: ListReferencesRequest
      type: object
    ReferenceList:
      items:
        $ref: '#/components/schemas/ReferenceListItem'
      type: array
    RunGroupListToken:
      maxLength: 128
      minLength: 1
      pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
      type: string
    ListRunGroupsRequestMaxResultsInteger:
      maximum: 100
      minimum: 1
      type: integer
    ListRunGroupsRequest:
      properties: {}
      title: ListRunGroupsRequest
      type: object
    RunGroupList:
      items:
        $ref: '#/components/schemas/RunGroupListItem'
      type: array
    TaskListToken:
      maxLength: 128
      minLength: 1
      pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
      type: string
    ListRunTasksRequestMaxResultsInteger:
      maximum: 100
      minimum: 1
      type: integer
    ListRunTasksRequest:
      properties: {}
      title: ListRunTasksRequest
      type: object
    TaskList:
      items:
        $ref: '#/components/schemas/TaskListItem'
      type: array
    RunListToken:
      maxLength: 128
      minLength: 1
      pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
      type: string
    ListRunsRequestMaxResultsInteger:
      maximum: 100
      minimum: 1
      type: integer
    ListRunsRequest:
      properties: {}
      title: ListRunsRequest
      type: object
    RunList:
      items:
        $ref: '#/components/schemas/RunListItem'
      type: array
    ListSequenceStoresRequestMaxResultsInteger:
      maximum: 100
      minimum: 1
      type: integer
    SequenceStoreFilter:
      description: A filter for a sequence store.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreName'
          - description: A name to filter on.
          title: name
        createdAfter:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: The filter's start date.
          title: createdAfter
        createdBefore:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: The filter's end date.
          title: createdBefore
      title: SequenceStoreFilter
      type: object
    ListSequenceStoresRequest:
      example:
        filter:
          name: ""
          createdBefore: ""
          createdAfter: ""
      properties:
        filter:
          $ref: '#/components/schemas/ListSequenceStoresRequest_filter'
      title: ListSequenceStoresRequest
      type: object
    SequenceStoreDetailList:
      items:
        $ref: '#/components/schemas/SequenceStoreDetail'
      type: array
    TagArn:
      maxLength: 128
      minLength: 1
      pattern: arn:.+
      type: string
    ListTagsForResourceRequest:
      properties: {}
      title: ListTagsForResourceRequest
      type: object
    ListVariantImportJobsFilter:
      description: A filter for variant import jobs.
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/JobStatus'
          - description: A status to filter on.
          title: status
        storeName:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: A store name to filter on.
          title: storeName
      title: ListVariantImportJobsFilter
      type: object
    ListVariantImportJobsRequestMaxResultsInteger:
      maximum: 100
      minimum: 1
      type: integer
    ListVariantImportJobsRequestIdsList:
      items:
        $ref: '#/components/schemas/ResourceIdentifier'
      maxItems: 20
      minItems: 1
      type: array
    ListVariantImportJobsRequestNextTokenString:
      maxLength: 10000
      minLength: 1
      type: string
    ListVariantImportJobsRequest:
      example:
        filter:
          storeName: ""
          status: ""
        ids: ""
      properties:
        ids:
          allOf:
          - $ref: '#/components/schemas/ListVariantImportJobsRequestIdsList'
          - description: A list of job IDs.
        filter:
          $ref: '#/components/schemas/ListVariantImportJobsRequest_filter'
      title: ListVariantImportJobsRequest
      type: object
    VariantImportJobItems:
      items:
        $ref: '#/components/schemas/VariantImportJobItem'
      type: array
    ListVariantStoresFilter:
      description: A filter for variant stores.
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/StoreStatus'
          - description: A status to filter on.
          title: status
      title: ListVariantStoresFilter
      type: object
    ListVariantStoresRequestMaxResultsInteger:
      maximum: 100
      minimum: 1
      type: integer
    ListVariantStoresRequestIdsList:
      items:
        $ref: '#/components/schemas/ResourceIdentifier'
      maxItems: 20
      minItems: 1
      type: array
    ListVariantStoresRequestNextTokenString:
      maxLength: 10000
      minLength: 1
      type: string
    ListVariantStoresRequest:
      example:
        filter:
          status: ""
        ids: ""
      properties:
        ids:
          allOf:
          - $ref: '#/components/schemas/ListVariantStoresRequestIdsList'
          - description: A list of store IDs.
        filter:
          $ref: '#/components/schemas/ListVariantStoresRequest_filter'
      title: ListVariantStoresRequest
      type: object
    VariantStoreItems:
      items:
        $ref: '#/components/schemas/VariantStoreItem'
      type: array
    WorkflowListToken:
      maxLength: 128
      minLength: 1
      pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
      type: string
    ListWorkflowsRequestMaxResultsInteger:
      maximum: 100
      minimum: 1
      type: integer
    ListWorkflowsRequest:
      properties: {}
      title: ListWorkflowsRequest
      type: object
    WorkflowList:
      items:
        $ref: '#/components/schemas/WorkflowListItem'
      type: array
    MultipartReadSetUploadListItem:
      description: " Part of the response to ListMultipartReadSetUploads, excluding\
        \ completed and aborted multipart uploads. "
      properties:
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          - description: ' The sequence store ID used for the multipart upload. '
          title: sequenceStoreId
        uploadId:
          allOf:
          - $ref: '#/components/schemas/UploadId'
          - description: ' The ID for the initiated multipart upload. '
          title: uploadId
        sourceFileType:
          allOf:
          - $ref: '#/components/schemas/FileType'
          - description: ' The type of file the read set originated from. '
          title: sourceFileType
        subjectId:
          allOf:
          - $ref: '#/components/schemas/SubjectId'
          - description: ' The read set source''s subject ID. '
          title: subjectId
        sampleId:
          allOf:
          - $ref: '#/components/schemas/SampleId'
          - description: ' The read set source''s sample ID. '
          title: sampleId
        generatedFrom:
          allOf:
          - $ref: '#/components/schemas/GeneratedFrom'
          - description: ' The source of an uploaded part. '
          title: generatedFrom
        referenceArn:
          allOf:
          - $ref: '#/components/schemas/ReferenceArn'
          - description: ' The source''s reference ARN. '
          title: referenceArn
        name:
          allOf:
          - $ref: '#/components/schemas/ReadSetName'
          - description: ' The name of a read set. '
          title: name
        description:
          allOf:
          - $ref: '#/components/schemas/ReadSetDescription'
          - description: ' The description of a read set. '
          title: description
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: ' Any tags you wish to add to a read set. '
          title: tags
        creationTime:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: ' The time stamp for when a direct upload was created. '
          title: creationTime
      required:
      - creationTime
      - generatedFrom
      - referenceArn
      - sampleId
      - sequenceStoreId
      - sourceFileType
      - subjectId
      - uploadId
      title: MultipartReadSetUploadListItem
      type: object
    Quote:
      maxLength: 1
      minLength: 1
      type: string
    QuoteAll:
      type: boolean
    Separator:
      maxLength: 20
      minLength: 1
      type: string
    ReadOptions:
      description: Read options for an annotation import job.
      properties:
        sep:
          allOf:
          - $ref: '#/components/schemas/Separator'
          - description: The file's field separator.
          title: sep
        encoding:
          allOf:
          - $ref: '#/components/schemas/Encoding'
          - description: The file's encoding.
          title: encoding
        quote:
          allOf:
          - $ref: '#/components/schemas/Quote'
          - description: The file's quote character.
          title: quote
        quoteAll:
          allOf:
          - $ref: '#/components/schemas/QuoteAll'
          - description: "Whether all values need to be quoted, or just those that\
              \ contain quotes."
          title: quoteAll
        escape:
          allOf:
          - $ref: '#/components/schemas/EscapeChar'
          - description: A character for escaping quotes in the file.
          title: escape
        escapeQuotes:
          allOf:
          - $ref: '#/components/schemas/EscapeQuotes'
          - description: Whether quotes need to be escaped in the file.
          title: escapeQuotes
        comment:
          allOf:
          - $ref: '#/components/schemas/CommentChar'
          - description: The file's comment character.
          title: comment
        header:
          allOf:
          - $ref: '#/components/schemas/Header'
          - description: Whether the file has a header row.
          title: header
        lineSep:
          allOf:
          - $ref: '#/components/schemas/LineSep'
          - description: A line separator for the file.
          title: lineSep
      title: ReadOptions
      type: object
    ReadSetBatchError:
      description: An error from a batch read set operation.
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ReadSetId'
          - description: The error's ID.
          title: id
        code:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The error's code.
          title: code
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The error's message.
          title: message
      required:
      - code
      - id
      - message
      title: ReadSetBatchError
      type: object
    ReadSetListItem:
      description: A read set.
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ReadSetId'
          - description: The read set's ID.
          title: id
        arn:
          allOf:
          - $ref: '#/components/schemas/ReadSetArn'
          - description: The read set's ARN.
          title: arn
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          - description: The read set's sequence store ID.
          title: sequenceStoreId
        subjectId:
          allOf:
          - $ref: '#/components/schemas/SubjectId'
          - description: The read set's subject ID.
          title: subjectId
        sampleId:
          allOf:
          - $ref: '#/components/schemas/SampleId'
          - description: The read set's sample ID.
          title: sampleId
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetStatus'
          - description: The read set's status.
          title: status
        name:
          allOf:
          - $ref: '#/components/schemas/ReadSetName'
          - description: The read set's name.
          title: name
        description:
          allOf:
          - $ref: '#/components/schemas/ReadSetDescription'
          - description: The read set's description.
          title: description
        referenceArn:
          allOf:
          - $ref: '#/components/schemas/ReferenceArn'
          - description: The read set's genome reference ARN.
          title: referenceArn
        fileType:
          allOf:
          - $ref: '#/components/schemas/FileType'
          - description: The read set's file type.
          title: fileType
        sequenceInformation:
          $ref: '#/components/schemas/SequenceInformation'
        creationTime:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: When the read set was created.
          title: creationTime
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/ReadSetStatusMessage'
          - description: ' The status for a read set. It provides more detail as to
              why the read set has a status. '
          title: statusMessage
        creationType:
          allOf:
          - $ref: '#/components/schemas/CreationType'
          - description: ' The creation type of the read set. '
          title: creationType
      required:
      - arn
      - creationTime
      - fileType
      - id
      - sequenceStoreId
      - status
      title: ReadSetListItem
      type: object
    ReadSetPartStreamingBlob:
      type: string
    ReadSetUploadPartListItem:
      description: ' The metadata of a single part of a file that was added to a multipart
        upload. A list of these parts is returned in the response to the ListReadSetUploadParts
        API. '
      properties:
        partNumber:
          allOf:
          - $ref: '#/components/schemas/ReadSetUploadPartListItemPartNumberInteger'
          - description: ' The number identifying the part in an upload. '
          title: partNumber
        partSize:
          allOf:
          - $ref: '#/components/schemas/ReadSetUploadPartListItemPartSizeLong'
          - description: ' The size of the the part in an upload. '
          title: partSize
        partSource:
          allOf:
          - $ref: '#/components/schemas/ReadSetPartSource'
          - description: ' The origin of the part being direct uploaded. '
          title: partSource
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: ' A unique identifier used to confirm that parts are being
              added to the correct upload. '
          title: checksum
        creationTime:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: ' The time stamp for when a direct upload was created. '
          title: creationTime
        lastUpdatedTime:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: ' The time stamp for the most recent update to an uploaded
              part. '
          title: lastUpdatedTime
      required:
      - checksum
      - partNumber
      - partSize
      - partSource
      title: ReadSetUploadPartListItem
      type: object
    ReadSetUploadPartListItemPartNumberInteger:
      maximum: 10000
      minimum: 1
      type: integer
    ReadSetUploadPartListItemPartSizeLong:
      maximum: 5368709120
      minimum: 1
      type: integer
    ReferenceListItem:
      description: A genome reference.
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ReferenceId'
          - description: The reference's ID.
          title: id
        arn:
          allOf:
          - $ref: '#/components/schemas/ReferenceArn'
          - description: The reference's ARN.
          title: arn
        referenceStoreId:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreId'
          - description: The reference's store ID.
          title: referenceStoreId
        md5:
          allOf:
          - $ref: '#/components/schemas/Md5'
          - description: The reference's MD5 checksum.
          title: md5
        status:
          allOf:
          - $ref: '#/components/schemas/ReferenceStatus'
          - description: The reference's status.
          title: status
        name:
          allOf:
          - $ref: '#/components/schemas/ReferenceName'
          - description: The reference's name.
          title: name
        description:
          allOf:
          - $ref: '#/components/schemas/ReferenceDescription'
          - description: The reference's description.
          title: description
        creationTime:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: When the reference was created.
          title: creationTime
        updateTime:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: When the reference was updated.
          title: updateTime
      required:
      - arn
      - creationTime
      - id
      - md5
      - referenceStoreId
      - updateTime
      title: ReferenceListItem
      type: object
    ReferenceStoreDetail:
      description: Details about a reference store.
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreArn'
          - description: The store's ARN.
          title: arn
        id:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreId'
          - description: The store's ID.
          title: id
        name:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreName'
          - description: The store's name.
          title: name
        description:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreDescription'
          - description: The store's description.
          title: description
        sseConfig:
          $ref: '#/components/schemas/GetAnnotationStoreResponse_sseConfig'
        creationTime:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: When the store was created.
          title: creationTime
      required:
      - arn
      - creationTime
      - id
      title: ReferenceStoreDetail
      type: object
    RunGroupListItem:
      description: A run group.
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/RunGroupArn'
          - description: The group's ARN.
          title: arn
        id:
          allOf:
          - $ref: '#/components/schemas/RunGroupId'
          - description: The group's ID.
          title: id
        name:
          allOf:
          - $ref: '#/components/schemas/RunGroupName'
          - description: The group's name.
          title: name
        maxCpus:
          allOf:
          - $ref: '#/components/schemas/RunGroupListItemMaxCpusInteger'
          - description: The group's maximum CPU count setting.
          title: maxCpus
        maxRuns:
          allOf:
          - $ref: '#/components/schemas/RunGroupListItemMaxRunsInteger'
          - description: The group's maximum concurrent run setting.
          title: maxRuns
        maxDuration:
          allOf:
          - $ref: '#/components/schemas/RunGroupListItemMaxDurationInteger'
          - description: The group's maximum duration setting in minutes.
          title: maxDuration
        creationTime:
          allOf:
          - $ref: '#/components/schemas/RunGroupTimestamp'
          - description: When the group was created.
          title: creationTime
        maxGpus:
          allOf:
          - $ref: '#/components/schemas/RunGroupListItemMaxGpusInteger'
          - description: ' The maximum GPUs that can be used by a run group. '
          title: maxGpus
      title: RunGroupListItem
      type: object
    RunGroupListItemMaxCpusInteger:
      maximum: 100000
      minimum: 1
      type: integer
    RunGroupListItemMaxRunsInteger:
      maximum: 100000
      minimum: 1
      type: integer
    RunGroupListItemMaxDurationInteger:
      maximum: 100000
      minimum: 1
      type: integer
    RunGroupListItemMaxGpusInteger:
      maximum: 100000
      minimum: 1
      type: integer
    RunListItem:
      description: A workflow run.
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/RunArn'
          - description: The run's ARN.
          title: arn
        id:
          allOf:
          - $ref: '#/components/schemas/RunId'
          - description: The run's ID.
          title: id
        status:
          allOf:
          - $ref: '#/components/schemas/RunStatus'
          - description: The run's status.
          title: status
        workflowId:
          allOf:
          - $ref: '#/components/schemas/WorkflowId'
          - description: The run's workflow ID.
          title: workflowId
        name:
          allOf:
          - $ref: '#/components/schemas/RunName'
          - description: The run's name.
          title: name
        priority:
          allOf:
          - $ref: '#/components/schemas/RunListItemPriorityInteger'
          - description: The run's priority.
          title: priority
        storageCapacity:
          allOf:
          - $ref: '#/components/schemas/RunListItemStorageCapacityInteger'
          - description: The run's storage capacity.
          title: storageCapacity
        creationTime:
          allOf:
          - $ref: '#/components/schemas/RunTimestamp'
          - description: When the run was created.
          title: creationTime
        startTime:
          allOf:
          - $ref: '#/components/schemas/RunTimestamp'
          - description: When the run started.
          title: startTime
        stopTime:
          allOf:
          - $ref: '#/components/schemas/RunTimestamp'
          - description: When the run stopped.
          title: stopTime
      title: RunListItem
      type: object
    RunListItemPriorityInteger:
      maximum: 100000
      minimum: 0
      type: integer
    RunListItemStorageCapacityInteger:
      maximum: 100000
      minimum: 0
      type: integer
    RunRequestId:
      maxLength: 128
      minLength: 1
      pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
      type: string
    RunResourceDigest:
      maxLength: 64
      minLength: 0
      pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
      title: RunResourceDigest
      type: string
    RunResourceDigestKey:
      maxLength: 256
      minLength: 1
      pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
      type: string
    SchemaValueType:
      enum:
      - LONG
      - INT
      - STRING
      - FLOAT
      - DOUBLE
      - BOOLEAN
      title: SchemaValueType
      type: string
    SchemaItem:
      additionalProperties:
        $ref: '#/components/schemas/SchemaValueType'
      maxProperties: 1
      minProperties: 1
      title: SchemaItem
      type: object
    SchemaItemKeyString:
      pattern: "[a-z0-9_]{1,255}"
      type: string
    SequenceStoreDetail:
      description: Details about a sequence store.
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreArn'
          - description: The store's ARN.
          title: arn
        id:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          - description: The store's ID.
          title: id
        name:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreName'
          - description: The store's name.
          title: name
        description:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreDescription'
          - description: The store's description.
          title: description
        sseConfig:
          $ref: '#/components/schemas/GetAnnotationStoreResponse_sseConfig'
        creationTime:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: When the store was created.
          title: creationTime
        fallbackLocation:
          allOf:
          - $ref: '#/components/schemas/S3Destination'
          - description: ' An S3 location that is used to store files that have failed
              a direct upload. '
          title: fallbackLocation
      required:
      - arn
      - creationTime
      - id
      title: SequenceStoreDetail
      type: object
    StartAnnotationImportRequest:
      properties:
        destinationName:
          allOf:
          - $ref: '#/components/schemas/StoreName'
          - description: A destination annotation store for the job.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: A service role for the job.
        items:
          allOf:
          - $ref: '#/components/schemas/AnnotationImportItemSources'
          - description: Items to import.
        formatOptions:
          $ref: '#/components/schemas/StartAnnotationImportRequest_formatOptions'
        runLeftNormalization:
          allOf:
          - $ref: '#/components/schemas/RunLeftNormalization'
          - description: The job's left normalization setting.
        annotationFields:
          allOf:
          - $ref: '#/components/schemas/AnnotationFieldMap'
          - description: ' The annotation schema generated by the parsed annotation
              data. '
      required:
      - destinationName
      - items
      - roleArn
      title: StartAnnotationImportRequest
      type: object
    StartReadSetActivationJobRequestSourcesList:
      items:
        $ref: '#/components/schemas/StartReadSetActivationJobSourceItem'
      maxItems: 20
      minItems: 1
      type: array
    StartReadSetActivationJobRequest:
      example:
        sources: ""
        clientToken: ""
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          - description: "To ensure that jobs don't run multiple times, specify a\
              \ unique token for each job."
        sources:
          allOf:
          - $ref: '#/components/schemas/StartReadSetActivationJobRequestSourcesList'
          - description: The job's source files.
      required:
      - sources
      title: StartReadSetActivationJobRequest
      type: object
    StartReadSetExportJobRequestSourcesList:
      items:
        $ref: '#/components/schemas/ExportReadSet'
      maxItems: 100
      minItems: 1
      type: array
    StartReadSetExportJobRequest:
      example:
        sources: ""
        roleArn: ""
        clientToken: ""
        destination: ""
      properties:
        destination:
          allOf:
          - $ref: '#/components/schemas/S3Destination'
          - description: A location for exported files in Amazon S3.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          - description: A service role for the job.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          - description: "To ensure that jobs don't run multiple times, specify a\
              \ unique token for each job."
        sources:
          allOf:
          - $ref: '#/components/schemas/StartReadSetExportJobRequestSourcesList'
          - description: The job's source files.
      required:
      - destination
      - roleArn
      - sources
      title: StartReadSetExportJobRequest
      type: object
    StartReadSetImportJobRequestSourcesList:
      items:
        $ref: '#/components/schemas/StartReadSetImportJobSourceItem'
      maxItems: 100
      minItems: 1
      type: array
    StartReadSetImportJobRequest:
      example:
        sources: ""
        roleArn: ""
        clientToken: ""
      properties:
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          - description: A service role for the job.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          - description: "To ensure that jobs don't run multiple times, specify a\
              \ unique token for each job."
        sources:
          allOf:
          - $ref: '#/components/schemas/StartReadSetImportJobRequestSourcesList'
          - description: The job's source files.
      required:
      - roleArn
      - sources
      title: StartReadSetImportJobRequest
      type: object
    StartReferenceImportJobRequestSourcesList:
      items:
        $ref: '#/components/schemas/StartReferenceImportJobSourceItem'
      maxItems: 100
      minItems: 1
      type: array
    StartReferenceImportJobRequest:
      example:
        sources: ""
        roleArn: ""
        clientToken: ""
      properties:
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          - description: A service role for the job.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          - description: "To ensure that jobs don't run multiple times, specify a\
              \ unique token for each job."
        sources:
          allOf:
          - $ref: '#/components/schemas/StartReferenceImportJobRequestSourcesList'
          - description: The job's source files.
      required:
      - roleArn
      - sources
      title: StartReferenceImportJobRequest
      type: object
    StartRunRequestPriorityInteger:
      maximum: 100000
      minimum: 0
      type: integer
    StartRunRequestStorageCapacityInteger:
      maximum: 100000
      minimum: 0
      type: integer
    StartRunRequest:
      example:
        outputUri: ""
        storageCapacity: ""
        priority: ""
        tags: ""
        logLevel: ""
        roleArn: ""
        requestId: ""
        name: ""
        workflowType: ""
        runId: ""
        runGroupId: ""
        parameters: ""
        workflowId: ""
      properties:
        workflowId:
          allOf:
          - $ref: '#/components/schemas/WorkflowId'
          - description: The run's workflow ID.
        workflowType:
          allOf:
          - $ref: '#/components/schemas/WorkflowType'
          - description: The run's workflows type.
        runId:
          allOf:
          - $ref: '#/components/schemas/RunId'
          - description: The run's ID.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RunRoleArn'
          - description: A service role for the run.
        name:
          allOf:
          - $ref: '#/components/schemas/RunName'
          - description: A name for the run.
        runGroupId:
          allOf:
          - $ref: '#/components/schemas/RunGroupId'
          - description: The run's group ID.
        priority:
          allOf:
          - $ref: '#/components/schemas/StartRunRequestPriorityInteger'
          - description: A priority for the run.
        parameters:
          allOf:
          - $ref: '#/components/schemas/RunParameters'
          - description: Parameters for the run.
        storageCapacity:
          allOf:
          - $ref: '#/components/schemas/StartRunRequestStorageCapacityInteger'
          - description: A storage capacity for the run in gigabytes.
        outputUri:
          allOf:
          - $ref: '#/components/schemas/RunOutputUri'
          - description: An output URI for the run.
        logLevel:
          allOf:
          - $ref: '#/components/schemas/RunLogLevel'
          - description: A log level for the run.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          - description: Tags for the run.
        requestId:
          allOf:
          - $ref: '#/components/schemas/RunRequestId'
          - description: "To ensure that requests don't run multiple times, specify\
              \ a unique ID for each request."
      required:
      - requestId
      - roleArn
      title: StartRunRequest
      type: object
    VariantImportItemSources:
      items:
        $ref: '#/components/schemas/VariantImportItemSource'
      minItems: 1
      type: array
    StartVariantImportRequest:
      properties:
        destinationName:
          allOf:
          - $ref: '#/components/schemas/StoreName'
          - description: The destination variant store for the job.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: A service role for the job.
        items:
          allOf:
          - $ref: '#/components/schemas/VariantImportItemSources'
          - description: Items to import.
        runLeftNormalization:
          allOf:
          - $ref: '#/components/schemas/RunLeftNormalization'
          - description: The job's left normalization setting.
        annotationFields:
          allOf:
          - $ref: '#/components/schemas/AnnotationFieldMap'
          - description: ' The annotation schema generated by the parsed annotation
              data. '
      required:
      - destinationName
      - items
      - roleArn
      title: StartVariantImportRequest
      type: object
    TagKeyList:
      items:
        $ref: '#/components/schemas/TagKey'
      maxItems: 50
      minItems: 0
      type: array
    TagResourceRequestTagsMap:
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
      maxProperties: 50
      minProperties: 0
      type: object
    TagResourceRequest:
      example:
        tags: ""
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagResourceRequestTagsMap'
          - description: Tags for the resource.
      required:
      - tags
      title: TagResourceRequest
      type: object
    TaskListItem:
      description: A workflow run task.
      properties:
        taskId:
          allOf:
          - $ref: '#/components/schemas/TaskId'
          - description: The task's ID.
          title: taskId
        status:
          allOf:
          - $ref: '#/components/schemas/TaskStatus'
          - description: The task's status.
          title: status
        name:
          allOf:
          - $ref: '#/components/schemas/TaskName'
          - description: The task's name.
          title: name
        cpus:
          allOf:
          - $ref: '#/components/schemas/TaskListItemCpusInteger'
          - description: The task's CPU count.
          title: cpus
        memory:
          allOf:
          - $ref: '#/components/schemas/TaskListItemMemoryInteger'
          - description: The task's memory use in gigabyes.
          title: memory
        creationTime:
          allOf:
          - $ref: '#/components/schemas/TaskTimestamp'
          - description: When the task was created.
          title: creationTime
        startTime:
          allOf:
          - $ref: '#/components/schemas/TaskTimestamp'
          - description: When the task started.
          title: startTime
        stopTime:
          allOf:
          - $ref: '#/components/schemas/TaskTimestamp'
          - description: When the task stopped.
          title: stopTime
        gpus:
          allOf:
          - $ref: '#/components/schemas/TaskListItemGpusInteger'
          - description: ' The number of Graphics Processing Units (GPU) specified
              for the task. '
          title: gpus
      title: TaskListItem
      type: object
    TaskListItemCpusInteger:
      minimum: 1
      type: integer
    TaskListItemMemoryInteger:
      minimum: 1
      type: integer
    TaskListItemGpusInteger:
      minimum: 0
      type: integer
    TsvStoreOptionsSchemaList:
      items:
        $ref: '#/components/schemas/SchemaItem'
      maxItems: 5000
      minItems: 1
      type: array
    UntagResourceRequest:
      properties: {}
      title: UntagResourceRequest
      type: object
    UpdateAnnotationStoreRequest:
      example:
        description: ""
      properties:
        description:
          allOf:
          - $ref: '#/components/schemas/StoreDescription'
          - description: A description for the store.
      title: UpdateAnnotationStoreRequest
      type: object
    UpdateRunGroupRequestMaxCpusInteger:
      maximum: 100000
      minimum: 1
      type: integer
    UpdateRunGroupRequestMaxRunsInteger:
      maximum: 100000
      minimum: 1
      type: integer
    UpdateRunGroupRequestMaxDurationInteger:
      maximum: 100000
      minimum: 1
      type: integer
    UpdateRunGroupRequestMaxGpusInteger:
      maximum: 100000
      minimum: 1
      type: integer
    UpdateRunGroupRequest:
      example:
        maxGpus: ""
        maxRuns: ""
        maxCpus: ""
        name: ""
        maxDuration: ""
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/RunGroupName'
          - description: A name for the group.
        maxCpus:
          allOf:
          - $ref: '#/components/schemas/UpdateRunGroupRequestMaxCpusInteger'
          - description: The maximum number of CPUs to use.
        maxRuns:
          allOf:
          - $ref: '#/components/schemas/UpdateRunGroupRequestMaxRunsInteger'
          - description: The maximum number of concurrent runs for the group.
        maxDuration:
          allOf:
          - $ref: '#/components/schemas/UpdateRunGroupRequestMaxDurationInteger'
          - description: A maximum run time for the group in minutes.
        maxGpus:
          allOf:
          - $ref: '#/components/schemas/UpdateRunGroupRequestMaxGpusInteger'
          - description: ' The maximum GPUs that can be used by a run group. '
      title: UpdateRunGroupRequest
      type: object
    UpdateVariantStoreRequest:
      properties:
        description:
          allOf:
          - $ref: '#/components/schemas/StoreDescription'
          - description: A description for the store.
      title: UpdateVariantStoreRequest
      type: object
    UpdateWorkflowRequest:
      example:
        name: ""
        description: ""
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/WorkflowName'
          - description: A name for the workflow.
        description:
          allOf:
          - $ref: '#/components/schemas/WorkflowDescription'
          - description: A description for the workflow.
      title: UpdateWorkflowRequest
      type: object
    UploadReadSetPartRequestPartNumberInteger:
      maximum: 10000
      minimum: 1
      type: integer
    UploadReadSetPartRequest:
      example:
        payload: ""
      properties:
        payload:
          allOf:
          - $ref: '#/components/schemas/ReadSetPartStreamingBlob'
          - description: ' The read set data to upload for a part. '
      required:
      - payload
      title: UploadReadSetPartRequest
      type: object
    VariantImportItemDetail:
      description: Details about an imported variant item.
      properties:
        source:
          allOf:
          - $ref: '#/components/schemas/S3Uri'
          - description: The source file's location in Amazon S3.
          title: source
        jobStatus:
          allOf:
          - $ref: '#/components/schemas/JobStatus'
          - description: The item's job status.
          title: jobStatus
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/JobStatusMsg'
          - description: ' A message that provides additional context about a job '
          title: statusMessage
      required:
      - jobStatus
      - source
      title: VariantImportItemDetail
      type: object
    VariantImportJobItem:
      description: A variant import job.
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The job's ID.
          title: id
        destinationName:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The job's destination variant store.
          title: destinationName
        roleArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The job's service role ARN.
          title: roleArn
        status:
          allOf:
          - $ref: '#/components/schemas/JobStatus'
          - description: The job's status.
          title: status
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          - description: When the job was created.
          title: creationTime
        updateTime:
          allOf:
          - $ref: '#/components/schemas/UpdateTime'
          - description: When the job was updated.
          title: updateTime
        completionTime:
          allOf:
          - $ref: '#/components/schemas/CompletionTime'
          - description: When the job completed.
          title: completionTime
        runLeftNormalization:
          allOf:
          - $ref: '#/components/schemas/RunLeftNormalization'
          - description: The job's left normalization setting.
          title: runLeftNormalization
        annotationFields:
          allOf:
          - $ref: '#/components/schemas/AnnotationFieldMap'
          - description: ' The annotation schema generated by the parsed annotation
              data. '
          title: annotationFields
      required:
      - creationTime
      - destinationName
      - id
      - roleArn
      - status
      - updateTime
      title: VariantImportJobItem
      type: object
    VariantStoreItem:
      description: A variant store.
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          - description: The store's ID.
          title: id
        reference:
          $ref: '#/components/schemas/CreateVariantStoreResponse_reference'
        status:
          allOf:
          - $ref: '#/components/schemas/StoreStatus'
          - description: The store's status.
          title: status
        storeArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The store's ARN.
          title: storeArn
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The store's name.
          title: name
        description:
          allOf:
          - $ref: '#/components/schemas/StoreDescription'
          - description: The store's description.
          title: description
        sseConfig:
          $ref: '#/components/schemas/GetAnnotationStoreResponse_sseConfig'
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          - description: When the store was created.
          title: creationTime
        updateTime:
          allOf:
          - $ref: '#/components/schemas/UpdateTime'
          - description: When the store was updated.
          title: updateTime
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/StatusMessage'
          - description: The store's status message.
          title: statusMessage
        storeSizeBytes:
          allOf:
          - $ref: '#/components/schemas/Long'
          - description: The store's size in bytes.
          title: storeSizeBytes
      required:
      - creationTime
      - description
      - id
      - name
      - reference
      - sseConfig
      - status
      - statusMessage
      - storeArn
      - storeSizeBytes
      - updateTime
      title: VariantStoreItem
      type: object
    WorkflowListItem:
      description: A workflow.
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/WorkflowArn'
          - description: The workflow's ARN.
          title: arn
        id:
          allOf:
          - $ref: '#/components/schemas/WorkflowId'
          - description: The workflow's ID.
          title: id
        name:
          allOf:
          - $ref: '#/components/schemas/WorkflowName'
          - description: The workflow's name.
          title: name
        status:
          allOf:
          - $ref: '#/components/schemas/WorkflowStatus'
          - description: The workflow's status.
          title: status
        type:
          allOf:
          - $ref: '#/components/schemas/WorkflowType'
          - description: The workflow's type.
          title: type
        digest:
          allOf:
          - $ref: '#/components/schemas/WorkflowDigest'
          - description: The workflow's digest.
          title: digest
        creationTime:
          allOf:
          - $ref: '#/components/schemas/WorkflowTimestamp'
          - description: When the workflow was created.
          title: creationTime
        metadata:
          allOf:
          - $ref: '#/components/schemas/WorkflowMetadata'
          - description: " Any metadata available for workflow. The information listed\
              \ may vary depending on the workflow, and there may also be no metadata\
              \ to return. "
          title: metadata
      title: WorkflowListItem
      type: object
    WorkflowMetadataValue:
      maxLength: 256
      minLength: 0
      title: WorkflowMetadataValue
      type: string
    WorkflowMetadataKey:
      maxLength: 128
      minLength: 1
      type: string
    WorkflowParameterDescription:
      maxLength: 256
      minLength: 0
      pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
      type: string
    WorkflowParameterName:
      maxLength: 128
      minLength: 1
      pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
      type: string
    BatchDeleteReadSet_request:
      properties:
        ids:
          description: The read sets' IDs.
          items:
            $ref: '#/components/schemas/ReadSetId'
          maxItems: 100
          minItems: 1
          title: ids
          type: array
      required:
      - ids
      title: BatchDeleteReadSet_request
      type: object
    CompleteMultipartReadSetUpload_request:
      properties:
        parts:
          description: ' The individual uploads or parts of a multipart upload. '
          items:
            $ref: '#/components/schemas/CompleteReadSetUploadPartListItem'
          title: parts
          type: array
      required:
      - parts
      title: CompleteMultipartReadSetUpload_request
      type: object
    CreateAnnotationStore_request_reference:
      description: A genome reference.
      properties:
        referenceArn:
          allOf:
          - $ref: '#/components/schemas/ReferenceArn'
          - description: The reference's ARN.
          title: referenceArn
      title: CreateAnnotationStore_request_reference
      type: object
    CreateAnnotationStore_request_sseConfig:
      description: Server-side encryption (SSE) settings for a store.
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/EncryptionType'
          - description: The encryption type.
          title: type
        keyArn:
          allOf:
          - $ref: '#/components/schemas/SseConfigKeyArnString'
          - description: An encryption key ARN.
          title: keyArn
      title: CreateAnnotationStore_request_sseConfig
      type: object
    CreateAnnotationStore_request_storeOptions_tsvStoreOptions:
      allOf:
      - $ref: '#/components/schemas/TsvStoreOptions'
      - description: File settings for a TSV store.
      example:
        schema: ""
        annotationType: ""
        formatToHeader: ""
      title: CreateAnnotationStore_request_storeOptions_tsvStoreOptions
    CreateAnnotationStore_request_storeOptions:
      description: Settings for a store.
      properties:
        tsvStoreOptions:
          $ref: '#/components/schemas/CreateAnnotationStore_request_storeOptions_tsvStoreOptions'
      title: CreateAnnotationStore_request_storeOptions
      type: object
    CreateAnnotationStore_request:
      properties:
        reference:
          $ref: '#/components/schemas/CreateAnnotationStore_request_reference'
        name:
          description: A name for the store.
          pattern: "([a-z]){1}([a-z0-9_]){2,254}"
          title: name
          type: string
        description:
          description: A description for the store.
          maxLength: 500
          minLength: 0
          title: description
          type: string
        tags:
          additionalProperties:
            $ref: '#/components/schemas/TagValue'
          description: Tags for the store.
          title: tags
          type: object
        sseConfig:
          $ref: '#/components/schemas/CreateAnnotationStore_request_sseConfig'
        storeFormat:
          description: The annotation file format of the store.
          enum:
          - GFF
          - TSV
          - VCF
          title: storeFormat
          type: string
        storeOptions:
          $ref: '#/components/schemas/CreateAnnotationStore_request_storeOptions'
      required:
      - storeFormat
      title: CreateAnnotationStore_request
      type: object
    CreateMultipartReadSetUpload_request:
      properties:
        clientToken:
          description: ' An idempotency token that can be used to avoid triggering
            multiple multipart uploads. '
          maxLength: 127
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          title: clientToken
          type: string
        sourceFileType:
          description: ' The type of file being uploaded. '
          enum:
          - FASTQ
          - BAM
          - CRAM
          title: sourceFileType
          type: string
        subjectId:
          description: ' The source''s subject ID. '
          maxLength: 127
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          title: subjectId
          type: string
        sampleId:
          description: ' The source''s sample ID. '
          maxLength: 127
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          title: sampleId
          type: string
        generatedFrom:
          description: ' Where the source originated. '
          maxLength: 127
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          title: generatedFrom
          type: string
        referenceArn:
          description: ' The ARN of the reference. '
          maxLength: 127
          minLength: 1
          pattern: arn:.+
          title: referenceArn
          type: string
        name:
          description: ' The name of the read set. '
          maxLength: 127
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          title: name
          type: string
        description:
          description: ' The description of the read set. '
          maxLength: 255
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          title: description
          type: string
        tags:
          additionalProperties:
            $ref: '#/components/schemas/TagValue'
          description: ' Any tags to add to the read set. '
          title: tags
          type: object
      required:
      - name
      - referenceArn
      - sampleId
      - sourceFileType
      - subjectId
      title: CreateMultipartReadSetUpload_request
      type: object
    CreateReferenceStore_request:
      properties:
        name:
          description: A name for the store.
          maxLength: 127
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          title: name
          type: string
        description:
          description: A description for the store.
          maxLength: 255
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          title: description
          type: string
        sseConfig:
          $ref: '#/components/schemas/CreateAnnotationStore_request_sseConfig'
        tags:
          additionalProperties:
            $ref: '#/components/schemas/TagValue'
          description: Tags for the store.
          title: tags
          type: object
        clientToken:
          description: "To ensure that requests don't run multiple times, specify\
            \ a unique token for each request."
          maxLength: 127
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          title: clientToken
          type: string
      required:
      - name
      title: CreateReferenceStore_request
      type: object
    CreateRunGroup_request:
      properties:
        name:
          description: A name for the group.
          maxLength: 128
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          title: name
          type: string
        maxCpus:
          description: The maximum number of CPUs to use in the group.
          maximum: 100000
          minimum: 1
          title: maxCpus
          type: integer
        maxRuns:
          description: The maximum number of concurrent runs for the group.
          maximum: 100000
          minimum: 1
          title: maxRuns
          type: integer
        maxDuration:
          description: A maximum run time for the group in minutes.
          maximum: 100000
          minimum: 1
          title: maxDuration
          type: integer
        tags:
          additionalProperties:
            $ref: '#/components/schemas/TagValue'
          description: Tags for the group.
          title: tags
          type: object
        requestId:
          description: "To ensure that requests don't run multiple times, specify\
            \ a unique ID for each request."
          maxLength: 128
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          title: requestId
          type: string
        maxGpus:
          description: ' The maximum GPUs that can be used by a run group. '
          maximum: 100000
          minimum: 1
          title: maxGpus
          type: integer
      required:
      - requestId
      title: CreateRunGroup_request
      type: object
    CreateSequenceStore_request:
      properties:
        name:
          description: A name for the store.
          maxLength: 127
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          title: name
          type: string
        description:
          description: A description for the store.
          maxLength: 255
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          title: description
          type: string
        sseConfig:
          $ref: '#/components/schemas/CreateAnnotationStore_request_sseConfig'
        tags:
          additionalProperties:
            $ref: '#/components/schemas/TagValue'
          description: Tags for the store.
          title: tags
          type: object
        clientToken:
          description: "To ensure that requests don't run multiple times, specify\
            \ a unique token for each request."
          maxLength: 127
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          title: clientToken
          type: string
        fallbackLocation:
          description: ' An S3 location that is used to store files that have failed
            a direct upload. '
          pattern: "s3://([a-z0-9][a-z0-9-.]{1,61}[a-z0-9])/?((.{1,1024})/)?"
          title: fallbackLocation
          type: string
      required:
      - name
      title: CreateSequenceStore_request
      type: object
    CreateVariantStore_request:
      properties:
        reference:
          $ref: '#/components/schemas/CreateAnnotationStore_request_reference'
        name:
          description: A name for the store.
          pattern: "([a-z]){1}([a-z0-9_]){2,254}"
          title: name
          type: string
        description:
          description: A description for the store.
          maxLength: 500
          minLength: 0
          title: description
          type: string
        tags:
          additionalProperties:
            $ref: '#/components/schemas/TagValue'
          description: Tags for the store.
          title: tags
          type: object
        sseConfig:
          $ref: '#/components/schemas/CreateAnnotationStore_request_sseConfig'
      required:
      - reference
      title: CreateVariantStore_request
      type: object
    CreateWorkflow_request:
      properties:
        name:
          description: A name for the workflow.
          maxLength: 128
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          title: name
          type: string
        description:
          description: A description for the workflow.
          maxLength: 256
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          title: description
          type: string
        engine:
          description: An engine for the workflow.
          enum:
          - WDL
          - NEXTFLOW
          - CWL
          maxLength: 64
          minLength: 1
          title: engine
          type: string
        definitionZip:
          description: A ZIP archive for the workflow.
          title: definitionZip
          type: string
        definitionUri:
          description: The URI of a definition for the workflow.
          maxLength: 256
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          title: definitionUri
          type: string
        main:
          description: The path of the main definition file for the workflow.
          maxLength: 128
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          title: main
          type: string
        parameterTemplate:
          additionalProperties:
            $ref: '#/components/schemas/WorkflowParameter'
          description: A parameter template for the workflow.
          maxProperties: 1000
          minProperties: 1
          title: parameterTemplate
          type: object
        storageCapacity:
          description: A storage capacity for the workflow in gigabytes.
          maximum: 100000
          minimum: 0
          title: storageCapacity
          type: integer
        tags:
          additionalProperties:
            $ref: '#/components/schemas/TagValue'
          description: Tags for the workflow.
          title: tags
          type: object
        requestId:
          description: "To ensure that requests don't run multiple times, specify\
            \ a unique ID for each request."
          maxLength: 128
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          title: requestId
          type: string
        accelerators:
          description: ' The computational accelerator specified to run the workflow. '
          enum:
          - GPU
          maxLength: 64
          minLength: 1
          title: accelerators
          type: string
      required:
      - requestId
      title: CreateWorkflow_request
      type: object
    UpdateAnnotationStore_request:
      properties:
        description:
          description: A description for the store.
          maxLength: 500
          minLength: 0
          title: description
          type: string
      title: UpdateAnnotationStore_request
      type: object
    UpdateRunGroup_request:
      properties:
        name:
          description: A name for the group.
          maxLength: 128
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          title: name
          type: string
        maxCpus:
          description: The maximum number of CPUs to use.
          maximum: 100000
          minimum: 1
          title: maxCpus
          type: integer
        maxRuns:
          description: The maximum number of concurrent runs for the group.
          maximum: 100000
          minimum: 1
          title: maxRuns
          type: integer
        maxDuration:
          description: A maximum run time for the group in minutes.
          maximum: 100000
          minimum: 1
          title: maxDuration
          type: integer
        maxGpus:
          description: ' The maximum GPUs that can be used by a run group. '
          maximum: 100000
          minimum: 1
          title: maxGpus
          type: integer
      title: UpdateRunGroup_request
      type: object
    UpdateWorkflow_request:
      properties:
        name:
          description: A name for the workflow.
          maxLength: 128
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          title: name
          type: string
        description:
          description: A description for the workflow.
          maxLength: 256
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          title: description
          type: string
      title: UpdateWorkflow_request
      type: object
    ListAnnotationImportJobs_request_filter:
      description: A filter for annotation import jobs.
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/JobStatus'
          - description: A status to filter on.
          title: status
        storeName:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: A store name to filter on.
          title: storeName
      title: ListAnnotationImportJobs_request_filter
      type: object
    ListAnnotationImportJobs_request:
      properties:
        ids:
          description: IDs of annotation import jobs to retrieve.
          items:
            $ref: '#/components/schemas/ResourceIdentifier'
          maxItems: 20
          minItems: 1
          title: ids
          type: array
        filter:
          $ref: '#/components/schemas/ListAnnotationImportJobs_request_filter'
      title: ListAnnotationImportJobs_request
      type: object
    ListAnnotationStores_request_filter:
      description: A filter for annotation stores.
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/StoreStatus'
          - description: A status to filter on.
          title: status
      title: ListAnnotationStores_request_filter
      type: object
    ListAnnotationStores_request:
      properties:
        ids:
          description: IDs of stores to list.
          items:
            $ref: '#/components/schemas/ResourceIdentifier'
          maxItems: 20
          minItems: 1
          title: ids
          type: array
        filter:
          $ref: '#/components/schemas/ListAnnotationStores_request_filter'
      title: ListAnnotationStores_request
      type: object
    ListReadSetActivationJobs_request_filter:
      description: A read set activation job filter.
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetActivationJobStatus'
          - description: The filter's status.
          title: status
        createdAfter:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: The filter's start date.
          title: createdAfter
        createdBefore:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: The filter's end date.
          title: createdBefore
      title: ListReadSetActivationJobs_request_filter
      type: object
    ListReadSetActivationJobs_request:
      properties:
        filter:
          $ref: '#/components/schemas/ListReadSetActivationJobs_request_filter'
      title: ListReadSetActivationJobs_request
      type: object
    ListReadSetExportJobs_request_filter:
      description: An read set export job filter.
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetExportJobStatus'
          - description: A status to filter on.
          title: status
        createdAfter:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: The filter's start date.
          title: createdAfter
        createdBefore:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: The filter's end date.
          title: createdBefore
      title: ListReadSetExportJobs_request_filter
      type: object
    ListReadSetExportJobs_request:
      properties:
        filter:
          $ref: '#/components/schemas/ListReadSetExportJobs_request_filter'
      title: ListReadSetExportJobs_request
      type: object
    ListReadSetImportJobs_request_filter:
      description: A filter for import read set jobs.
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetImportJobStatus'
          - description: A status to filter on.
          title: status
        createdAfter:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: The filter's start date.
          title: createdAfter
        createdBefore:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: The filter's end date.
          title: createdBefore
      title: ListReadSetImportJobs_request_filter
      type: object
    ListReadSetImportJobs_request:
      properties:
        filter:
          $ref: '#/components/schemas/ListReadSetImportJobs_request_filter'
      title: ListReadSetImportJobs_request
      type: object
    ListReadSetUploadParts_request_filter:
      description: ' Filter settings that select for read set upload parts of interest. '
      properties:
        createdAfter:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: ' Filters for read set uploads after a specified time. '
          title: createdAfter
        createdBefore:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: ' Filters for read set part uploads before a specified time. '
          title: createdBefore
      title: ListReadSetUploadParts_request_filter
      type: object
    ListReadSetUploadParts_request:
      properties:
        partSource:
          description: ' The source file for the upload part. '
          enum:
          - SOURCE1
          - SOURCE2
          title: partSource
          type: string
        filter:
          $ref: '#/components/schemas/ListReadSetUploadParts_request_filter'
      required:
      - partSource
      title: ListReadSetUploadParts_request
      type: object
    ListReadSets_request_filter:
      description: A filter for read sets.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ReadSetName'
          - description: A name to filter on.
          title: name
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetStatus'
          - description: A status to filter on.
          title: status
        referenceArn:
          allOf:
          - $ref: '#/components/schemas/ReferenceArn'
          - description: A genome reference ARN to filter on.
          title: referenceArn
        createdAfter:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: The filter's start date.
          title: createdAfter
        createdBefore:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: The filter's end date.
          title: createdBefore
        sampleId:
          allOf:
          - $ref: '#/components/schemas/SampleId'
          - description: ' The read set source''s sample ID. '
          title: sampleId
        subjectId:
          allOf:
          - $ref: '#/components/schemas/SubjectId'
          - description: ' The read set source''s subject ID. '
          title: subjectId
        generatedFrom:
          allOf:
          - $ref: '#/components/schemas/GeneratedFrom'
          - description: ' Where the source originated. '
          title: generatedFrom
        creationType:
          allOf:
          - $ref: '#/components/schemas/CreationType'
          - description: ' The creation type of the read set. '
          title: creationType
      title: ListReadSets_request_filter
      type: object
    ListReadSets_request:
      properties:
        filter:
          $ref: '#/components/schemas/ListReadSets_request_filter'
      title: ListReadSets_request
      type: object
    ListReferenceImportJobs_request_filter:
      description: A filter for import references.
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/ReferenceImportJobStatus'
          - description: A status to filter on.
          title: status
        createdAfter:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: The filter's start date.
          title: createdAfter
        createdBefore:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: The filter's end date.
          title: createdBefore
      title: ListReferenceImportJobs_request_filter
      type: object
    ListReferenceImportJobs_request:
      properties:
        filter:
          $ref: '#/components/schemas/ListReferenceImportJobs_request_filter'
      title: ListReferenceImportJobs_request
      type: object
    ListReferenceStores_request_filter:
      description: A filter for reference stores.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreName'
          - description: The name to filter on.
          title: name
        createdAfter:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: The filter's start date.
          title: createdAfter
        createdBefore:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: The filter's end date.
          title: createdBefore
      title: ListReferenceStores_request_filter
      type: object
    ListReferenceStores_request:
      properties:
        filter:
          $ref: '#/components/schemas/ListReferenceStores_request_filter'
      title: ListReferenceStores_request
      type: object
    ListReferences_request_filter:
      description: A filter for references.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ReferenceName'
          - description: A name to filter on.
          title: name
        md5:
          allOf:
          - $ref: '#/components/schemas/Md5'
          - description: An MD5 checksum to filter on.
          title: md5
        createdAfter:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: The filter's start date.
          title: createdAfter
        createdBefore:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: The filter's end date.
          title: createdBefore
      title: ListReferences_request_filter
      type: object
    ListReferences_request:
      properties:
        filter:
          $ref: '#/components/schemas/ListReferences_request_filter'
      title: ListReferences_request
      type: object
    StartRun_request:
      properties:
        workflowId:
          description: The run's workflow ID.
          maxLength: 18
          minLength: 1
          pattern: "[0-9]+"
          title: workflowId
          type: string
        workflowType:
          description: The run's workflows type.
          enum:
          - PRIVATE
          - READY2RUN
          maxLength: 64
          minLength: 1
          title: workflowType
          type: string
        runId:
          description: The run's ID.
          maxLength: 18
          minLength: 1
          pattern: "[0-9]+"
          title: runId
          type: string
        roleArn:
          description: A service role for the run.
          maxLength: 128
          minLength: 1
          pattern: arn:.+
          title: roleArn
          type: string
        name:
          description: A name for the run.
          maxLength: 128
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          title: name
          type: string
        runGroupId:
          description: The run's group ID.
          maxLength: 18
          minLength: 1
          pattern: "[0-9]+"
          title: runGroupId
          type: string
        priority:
          description: A priority for the run.
          maximum: 100000
          minimum: 0
          title: priority
          type: integer
        parameters:
          description: Parameters for the run.
          properties: {}
          title: parameters
          type: object
        storageCapacity:
          description: A storage capacity for the run in gigabytes.
          maximum: 100000
          minimum: 0
          title: storageCapacity
          type: integer
        outputUri:
          description: An output URI for the run.
          maxLength: 128
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          title: outputUri
          type: string
        logLevel:
          description: A log level for the run.
          enum:
          - "OFF"
          - FATAL
          - ERROR
          - ALL
          maxLength: 64
          minLength: 1
          title: logLevel
          type: string
        tags:
          additionalProperties:
            $ref: '#/components/schemas/TagValue'
          description: Tags for the run.
          title: tags
          type: object
        requestId:
          description: "To ensure that requests don't run multiple times, specify\
            \ a unique ID for each request."
          maxLength: 128
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          title: requestId
          type: string
      required:
      - requestId
      - roleArn
      title: StartRun_request
      type: object
    ListSequenceStores_request_filter:
      description: A filter for a sequence store.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreName'
          - description: A name to filter on.
          title: name
        createdAfter:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: The filter's start date.
          title: createdAfter
        createdBefore:
          allOf:
          - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
          - description: The filter's end date.
          title: createdBefore
      title: ListSequenceStores_request_filter
      type: object
    ListSequenceStores_request:
      properties:
        filter:
          $ref: '#/components/schemas/ListSequenceStores_request_filter'
      title: ListSequenceStores_request
      type: object
    TagResource_request:
      properties:
        tags:
          additionalProperties:
            $ref: '#/components/schemas/TagValue'
          description: Tags for the resource.
          maxProperties: 50
          minProperties: 0
          title: tags
          type: object
      required:
      - tags
      title: TagResource_request
      type: object
    ListVariantImportJobs_request_filter:
      description: A filter for variant import jobs.
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/JobStatus'
          - description: A status to filter on.
          title: status
        storeName:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: A store name to filter on.
          title: storeName
      title: ListVariantImportJobs_request_filter
      type: object
    ListVariantImportJobs_request:
      properties:
        ids:
          description: A list of job IDs.
          items:
            $ref: '#/components/schemas/ResourceIdentifier'
          maxItems: 20
          minItems: 1
          title: ids
          type: array
        filter:
          $ref: '#/components/schemas/ListVariantImportJobs_request_filter'
      title: ListVariantImportJobs_request
      type: object
    ListVariantStores_request_filter:
      description: A filter for variant stores.
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/StoreStatus'
          - description: A status to filter on.
          title: status
      title: ListVariantStores_request_filter
      type: object
    ListVariantStores_request:
      properties:
        ids:
          description: A list of store IDs.
          items:
            $ref: '#/components/schemas/ResourceIdentifier'
          maxItems: 20
          minItems: 1
          title: ids
          type: array
        filter:
          $ref: '#/components/schemas/ListVariantStores_request_filter'
      title: ListVariantStores_request
      type: object
    StartAnnotationImportJob_request_formatOptions_tsvOptions:
      allOf:
      - $ref: '#/components/schemas/TsvOptions'
      - description: Options for a TSV file.
      example:
        readOptions:
          lineSep: ""
          quote: ""
          escapeQuotes: ""
          header: ""
          comment: ""
          encoding: ""
          quoteAll: ""
          escape: ""
          sep: ""
      title: StartAnnotationImportJob_request_formatOptions_tsvOptions
    StartAnnotationImportJob_request_formatOptions_vcfOptions:
      allOf:
      - $ref: '#/components/schemas/VcfOptions'
      - description: Options for a VCF file.
      example:
        ignoreFilterField: ""
        ignoreQualField: ""
      title: StartAnnotationImportJob_request_formatOptions_vcfOptions
    StartAnnotationImportJob_request_formatOptions:
      description: Formatting options for a file.
      properties:
        tsvOptions:
          $ref: '#/components/schemas/StartAnnotationImportJob_request_formatOptions_tsvOptions'
        vcfOptions:
          $ref: '#/components/schemas/StartAnnotationImportJob_request_formatOptions_vcfOptions'
      title: StartAnnotationImportJob_request_formatOptions
      type: object
    StartAnnotationImportJob_request:
      properties:
        destinationName:
          description: A destination annotation store for the job.
          maxLength: 255
          minLength: 3
          pattern: "([a-z]){1}([a-z0-9_]){2,254}"
          title: destinationName
          type: string
        roleArn:
          description: A service role for the job.
          maxLength: 2048
          minLength: 20
          pattern: "arn:([^: ]*):([^: ]*):([^: ]*):([0-9]{12}):([^: ]*)"
          title: roleArn
          type: string
        items:
          description: Items to import.
          items:
            $ref: '#/components/schemas/AnnotationImportItemSource'
          minItems: 1
          title: items
          type: array
        formatOptions:
          $ref: '#/components/schemas/StartAnnotationImportJob_request_formatOptions'
        runLeftNormalization:
          description: The job's left normalization setting.
          title: runLeftNormalization
          type: boolean
        annotationFields:
          additionalProperties:
            $ref: '#/components/schemas/AnnotationFieldMapValueString'
          description: ' The annotation schema generated by the parsed annotation
            data. '
          title: annotationFields
          type: object
      required:
      - destinationName
      - items
      - roleArn
      title: StartAnnotationImportJob_request
      type: object
    StartReadSetActivationJob_request:
      properties:
        clientToken:
          description: "To ensure that jobs don't run multiple times, specify a unique\
            \ token for each job."
          maxLength: 127
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          title: clientToken
          type: string
        sources:
          description: The job's source files.
          items:
            $ref: '#/components/schemas/StartReadSetActivationJobSourceItem'
          maxItems: 20
          minItems: 1
          title: sources
          type: array
      required:
      - sources
      title: StartReadSetActivationJob_request
      type: object
    StartReadSetExportJob_request:
      properties:
        destination:
          description: A location for exported files in Amazon S3.
          pattern: "s3://([a-z0-9][a-z0-9-.]{1,61}[a-z0-9])/?((.{1,1024})/)?"
          title: destination
          type: string
        roleArn:
          description: A service role for the job.
          maxLength: 2048
          minLength: 20
          pattern: arn:.*
          title: roleArn
          type: string
        clientToken:
          description: "To ensure that jobs don't run multiple times, specify a unique\
            \ token for each job."
          maxLength: 127
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          title: clientToken
          type: string
        sources:
          description: The job's source files.
          items:
            $ref: '#/components/schemas/ExportReadSet'
          maxItems: 100
          minItems: 1
          title: sources
          type: array
      required:
      - destination
      - roleArn
      - sources
      title: StartReadSetExportJob_request
      type: object
    StartReadSetImportJob_request:
      properties:
        roleArn:
          description: A service role for the job.
          maxLength: 2048
          minLength: 20
          pattern: arn:.*
          title: roleArn
          type: string
        clientToken:
          description: "To ensure that jobs don't run multiple times, specify a unique\
            \ token for each job."
          maxLength: 127
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          title: clientToken
          type: string
        sources:
          description: The job's source files.
          items:
            $ref: '#/components/schemas/StartReadSetImportJobSourceItem'
          maxItems: 100
          minItems: 1
          title: sources
          type: array
      required:
      - roleArn
      - sources
      title: StartReadSetImportJob_request
      type: object
    StartReferenceImportJob_request:
      properties:
        roleArn:
          description: A service role for the job.
          maxLength: 2048
          minLength: 20
          pattern: arn:.*
          title: roleArn
          type: string
        clientToken:
          description: "To ensure that jobs don't run multiple times, specify a unique\
            \ token for each job."
          maxLength: 127
          minLength: 1
          pattern: "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+"
          title: clientToken
          type: string
        sources:
          description: The job's source files.
          items:
            $ref: '#/components/schemas/StartReferenceImportJobSourceItem'
          maxItems: 100
          minItems: 1
          title: sources
          type: array
      required:
      - roleArn
      - sources
      title: StartReferenceImportJob_request
      type: object
    StartVariantImportJob_request:
      properties:
        destinationName:
          description: The destination variant store for the job.
          maxLength: 255
          minLength: 3
          pattern: "([a-z]){1}([a-z0-9_]){2,254}"
          title: destinationName
          type: string
        roleArn:
          description: A service role for the job.
          maxLength: 2048
          minLength: 20
          pattern: "arn:([^: ]*):([^: ]*):([^: ]*):([0-9]{12}):([^: ]*)"
          title: roleArn
          type: string
        items:
          description: Items to import.
          items:
            $ref: '#/components/schemas/VariantImportItemSource'
          minItems: 1
          title: items
          type: array
        runLeftNormalization:
          description: The job's left normalization setting.
          title: runLeftNormalization
          type: boolean
        annotationFields:
          additionalProperties:
            $ref: '#/components/schemas/AnnotationFieldMapValueString'
          description: ' The annotation schema generated by the parsed annotation
            data. '
          title: annotationFields
          type: object
      required:
      - destinationName
      - items
      - roleArn
      title: StartVariantImportJob_request
      type: object
    UploadReadSetPart_request:
      properties:
        payload:
          description: ' The read set data to upload for a part. '
          title: payload
          type: string
      required:
      - payload
      title: UploadReadSetPart_request
      type: object
    CreateAnnotationStoreResponse_reference:
      allOf:
      - $ref: '#/components/schemas/ReferenceItem'
      - description: The store's genome reference. Required for all stores except
          TSV format with generic annotations.
      example:
        referenceArn: ""
      title: CreateAnnotationStoreResponse_reference
    CreateAnnotationStoreResponse_storeOptions:
      allOf:
      - $ref: '#/components/schemas/StoreOptions'
      - description: The store's file parsing options.
      example:
        tsvStoreOptions:
          schema: ""
          annotationType: ""
          formatToHeader: ""
      title: CreateAnnotationStoreResponse_storeOptions
    CreateReferenceStoreResponse_sseConfig:
      allOf:
      - $ref: '#/components/schemas/SseConfig'
      - description: The store's SSE settings.
      example:
        keyArn: ""
        type: ""
      title: CreateReferenceStoreResponse_sseConfig
    CreateVariantStoreResponse_reference:
      allOf:
      - $ref: '#/components/schemas/ReferenceItem'
      - description: The store's genome reference.
      example:
        referenceArn: ""
      title: CreateVariantStoreResponse_reference
    GetAnnotationStoreResponse_sseConfig:
      allOf:
      - $ref: '#/components/schemas/SseConfig'
      - description: The store's server-side encryption (SSE) settings.
      example:
        keyArn: ""
        type: ""
      title: GetAnnotationStoreResponse_sseConfig
    GetAnnotationStoreResponse_storeOptions:
      allOf:
      - $ref: '#/components/schemas/StoreOptions'
      - description: The store's parsing options.
      example:
        tsvStoreOptions:
          schema: ""
          annotationType: ""
          formatToHeader: ""
      title: GetAnnotationStoreResponse_storeOptions
    GetReadSetMetadataResponse_sequenceInformation:
      allOf:
      - $ref: '#/components/schemas/SequenceInformation'
      - description: The read set's sequence information.
      example:
        totalBaseCount: ""
        totalReadCount: ""
        alignment: ""
        generatedFrom: ""
      title: GetReadSetMetadataResponse_sequenceInformation
    GetReadSetMetadataResponse_files:
      allOf:
      - $ref: '#/components/schemas/ReadSetFiles'
      - description: The read set's files.
      example:
        index:
          totalParts: ""
          partSize: ""
          contentLength: ""
        source1:
          totalParts: ""
          partSize: ""
          contentLength: ""
        source2:
          totalParts: ""
          partSize: ""
          contentLength: ""
      title: GetReadSetMetadataResponse_files
    GetReferenceMetadataResponse_files:
      allOf:
      - $ref: '#/components/schemas/ReferenceFiles'
      - description: The reference's files.
      example:
        index:
          totalParts: ""
          partSize: ""
          contentLength: ""
        source:
          totalParts: ""
          partSize: ""
          contentLength: ""
      title: GetReferenceMetadataResponse_files
    TsvOptions_readOptions:
      allOf:
      - $ref: '#/components/schemas/ReadOptions'
      - description: The file's read options.
      example:
        lineSep: ""
        quote: ""
        escapeQuotes: ""
        header: ""
        comment: ""
        encoding: ""
        quoteAll: ""
        escape: ""
        sep: ""
      title: TsvOptions_readOptions
    StartReadSetImportJobSourceItem_sourceFiles:
      allOf:
      - $ref: '#/components/schemas/SourceFiles'
      - description: The source files' location in Amazon S3.
      title: StartReadSetImportJobSourceItem_sourceFiles
    UpdateAnnotationStoreResponse_storeOptions:
      allOf:
      - $ref: '#/components/schemas/StoreOptions'
      - description: Parsing options for the store.
      example:
        tsvStoreOptions:
          schema: ""
          annotationType: ""
          formatToHeader: ""
      title: UpdateAnnotationStoreResponse_storeOptions
    CreateAnnotationStoreRequest_reference:
      allOf:
      - $ref: '#/components/schemas/ReferenceItem'
      - description: The genome reference for the store's annotations.
      example:
        referenceArn: ""
      title: CreateAnnotationStoreRequest_reference
    CreateAnnotationStoreRequest_sseConfig:
      allOf:
      - $ref: '#/components/schemas/SseConfig'
      - description: Server-side encryption (SSE) settings for the store.
      example:
        keyArn: ""
        type: ""
      title: CreateAnnotationStoreRequest_sseConfig
    CreateAnnotationStoreRequest_storeOptions:
      allOf:
      - $ref: '#/components/schemas/StoreOptions'
      - description: File parsing options for the annotation store.
      example:
        tsvStoreOptions:
          schema: ""
          annotationType: ""
          formatToHeader: ""
      title: CreateAnnotationStoreRequest_storeOptions
    CreateVariantStoreRequest_reference:
      allOf:
      - $ref: '#/components/schemas/ReferenceItem'
      - description: The genome reference for the store's variants.
      example:
        referenceArn: ""
      title: CreateVariantStoreRequest_reference
    ReadSetFiles_source1:
      allOf:
      - $ref: '#/components/schemas/FileInformation'
      - description: The location of the first file in Amazon S3.
      example:
        totalParts: ""
        partSize: ""
        contentLength: ""
      title: ReadSetFiles_source1
    ReadSetFiles_source2:
      allOf:
      - $ref: '#/components/schemas/FileInformation'
      - description: The location of the second file in Amazon S3.
      example:
        totalParts: ""
        partSize: ""
        contentLength: ""
      title: ReadSetFiles_source2
    ReadSetFiles_index:
      allOf:
      - $ref: '#/components/schemas/FileInformation'
      - description: The files' index.
      example:
        totalParts: ""
        partSize: ""
        contentLength: ""
      title: ReadSetFiles_index
    ReferenceFiles_source:
      allOf:
      - $ref: '#/components/schemas/FileInformation'
      - description: The source file's location in Amazon S3.
      example:
        totalParts: ""
        partSize: ""
        contentLength: ""
      title: ReferenceFiles_source
    ListAnnotationImportJobsRequest_filter:
      allOf:
      - $ref: '#/components/schemas/ListAnnotationImportJobsFilter'
      - description: A filter to apply to the list.
      example:
        storeName: ""
        status: ""
      title: ListAnnotationImportJobsRequest_filter
    ListAnnotationStoresRequest_filter:
      allOf:
      - $ref: '#/components/schemas/ListAnnotationStoresFilter'
      - description: A filter to apply to the list.
      example:
        status: ""
      title: ListAnnotationStoresRequest_filter
    ListReadSetActivationJobsRequest_filter:
      allOf:
      - $ref: '#/components/schemas/ActivateReadSetFilter'
      - description: A filter to apply to the list.
      example:
        createdBefore: ""
        createdAfter: ""
        status: ""
      title: ListReadSetActivationJobsRequest_filter
    ListReadSetExportJobsRequest_filter:
      allOf:
      - $ref: '#/components/schemas/ExportReadSetFilter'
      - description: A filter to apply to the list.
      example:
        createdBefore: ""
        createdAfter: ""
        status: ""
      title: ListReadSetExportJobsRequest_filter
    ListReadSetImportJobsRequest_filter:
      allOf:
      - $ref: '#/components/schemas/ImportReadSetFilter'
      - description: A filter to apply to the list.
      example:
        createdBefore: ""
        createdAfter: ""
        status: ""
      title: ListReadSetImportJobsRequest_filter
    ListReadSetUploadPartsRequest_filter:
      allOf:
      - $ref: '#/components/schemas/ReadSetUploadPartListFilter'
      - description: ' Attributes used to filter for a specific subset of read set
          part uploads. '
      example:
        createdBefore: ""
        createdAfter: ""
      title: ListReadSetUploadPartsRequest_filter
    ListReadSetsRequest_filter:
      allOf:
      - $ref: '#/components/schemas/ReadSetFilter'
      - description: A filter to apply to the list.
      example:
        creationType: ""
        sampleId: ""
        name: ""
        referenceArn: ""
        createdBefore: ""
        createdAfter: ""
        subjectId: ""
        status: ""
        generatedFrom: ""
      title: ListReadSetsRequest_filter
    ListReferenceImportJobsRequest_filter:
      allOf:
      - $ref: '#/components/schemas/ImportReferenceFilter'
      - description: A filter to apply to the list.
      example:
        createdBefore: ""
        createdAfter: ""
        status: ""
      title: ListReferenceImportJobsRequest_filter
    ListReferenceStoresRequest_filter:
      allOf:
      - $ref: '#/components/schemas/ReferenceStoreFilter'
      - description: A filter to apply to the list.
      example:
        name: ""
        createdBefore: ""
        createdAfter: ""
      title: ListReferenceStoresRequest_filter
    ListReferencesRequest_filter:
      allOf:
      - $ref: '#/components/schemas/ReferenceFilter'
      - description: A filter to apply to the list.
      example:
        name: ""
        createdBefore: ""
        createdAfter: ""
        md5: ""
      title: ListReferencesRequest_filter
    ListSequenceStoresRequest_filter:
      allOf:
      - $ref: '#/components/schemas/SequenceStoreFilter'
      - description: A filter to apply to the list.
      example:
        name: ""
        createdBefore: ""
        createdAfter: ""
      title: ListSequenceStoresRequest_filter
    ListVariantImportJobsRequest_filter:
      allOf:
      - $ref: '#/components/schemas/ListVariantImportJobsFilter'
      - description: A filter to apply to the list.
      example:
        storeName: ""
        status: ""
      title: ListVariantImportJobsRequest_filter
    ListVariantStoresRequest_filter:
      allOf:
      - $ref: '#/components/schemas/ListVariantStoresFilter'
      - description: A filter to apply to the list.
      example:
        status: ""
      title: ListVariantStoresRequest_filter
    StartAnnotationImportRequest_formatOptions:
      allOf:
      - $ref: '#/components/schemas/FormatOptions'
      - description: Formatting options for the annotation file.
      title: StartAnnotationImportRequest_formatOptions
  securitySchemes:
    hmac:
      description: Amazon Signature authorization v4
      in: header
      name: Authorization
      type: apiKey
      x-amazon-apigateway-authtype: awsSigv4
      x-apikeyInfoFunc: openapi_server.controllers.security_controller.info_from_hmac
x-hasEquivalentPaths: true
