# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.read_set_part_source import ReadSetPartSource
from openapi_server import util


class ReadSetUploadPartListItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, part_number: int=None, part_size: int=None, part_source: ReadSetPartSource=None, checksum: str=None, creation_time: datetime=None, last_updated_time: datetime=None):
        """ReadSetUploadPartListItem - a model defined in OpenAPI

        :param part_number: The part_number of this ReadSetUploadPartListItem.
        :param part_size: The part_size of this ReadSetUploadPartListItem.
        :param part_source: The part_source of this ReadSetUploadPartListItem.
        :param checksum: The checksum of this ReadSetUploadPartListItem.
        :param creation_time: The creation_time of this ReadSetUploadPartListItem.
        :param last_updated_time: The last_updated_time of this ReadSetUploadPartListItem.
        """
        self.openapi_types = {
            'part_number': int,
            'part_size': int,
            'part_source': ReadSetPartSource,
            'checksum': str,
            'creation_time': datetime,
            'last_updated_time': datetime
        }

        self.attribute_map = {
            'part_number': 'partNumber',
            'part_size': 'partSize',
            'part_source': 'partSource',
            'checksum': 'checksum',
            'creation_time': 'creationTime',
            'last_updated_time': 'lastUpdatedTime'
        }

        self._part_number = part_number
        self._part_size = part_size
        self._part_source = part_source
        self._checksum = checksum
        self._creation_time = creation_time
        self._last_updated_time = last_updated_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReadSetUploadPartListItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReadSetUploadPartListItem of this ReadSetUploadPartListItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def part_number(self):
        """Gets the part_number of this ReadSetUploadPartListItem.


        :return: The part_number of this ReadSetUploadPartListItem.
        :rtype: int
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """Sets the part_number of this ReadSetUploadPartListItem.


        :param part_number: The part_number of this ReadSetUploadPartListItem.
        :type part_number: int
        """
        if part_number is None:
            raise ValueError("Invalid value for `part_number`, must not be `None`")

        self._part_number = part_number

    @property
    def part_size(self):
        """Gets the part_size of this ReadSetUploadPartListItem.


        :return: The part_size of this ReadSetUploadPartListItem.
        :rtype: int
        """
        return self._part_size

    @part_size.setter
    def part_size(self, part_size):
        """Sets the part_size of this ReadSetUploadPartListItem.


        :param part_size: The part_size of this ReadSetUploadPartListItem.
        :type part_size: int
        """
        if part_size is None:
            raise ValueError("Invalid value for `part_size`, must not be `None`")

        self._part_size = part_size

    @property
    def part_source(self):
        """Gets the part_source of this ReadSetUploadPartListItem.


        :return: The part_source of this ReadSetUploadPartListItem.
        :rtype: ReadSetPartSource
        """
        return self._part_source

    @part_source.setter
    def part_source(self, part_source):
        """Sets the part_source of this ReadSetUploadPartListItem.


        :param part_source: The part_source of this ReadSetUploadPartListItem.
        :type part_source: ReadSetPartSource
        """
        if part_source is None:
            raise ValueError("Invalid value for `part_source`, must not be `None`")

        self._part_source = part_source

    @property
    def checksum(self):
        """Gets the checksum of this ReadSetUploadPartListItem.


        :return: The checksum of this ReadSetUploadPartListItem.
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this ReadSetUploadPartListItem.


        :param checksum: The checksum of this ReadSetUploadPartListItem.
        :type checksum: str
        """
        if checksum is None:
            raise ValueError("Invalid value for `checksum`, must not be `None`")

        self._checksum = checksum

    @property
    def creation_time(self):
        """Gets the creation_time of this ReadSetUploadPartListItem.


        :return: The creation_time of this ReadSetUploadPartListItem.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this ReadSetUploadPartListItem.


        :param creation_time: The creation_time of this ReadSetUploadPartListItem.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this ReadSetUploadPartListItem.


        :return: The last_updated_time of this ReadSetUploadPartListItem.
        :rtype: datetime
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this ReadSetUploadPartListItem.


        :param last_updated_time: The last_updated_time of this ReadSetUploadPartListItem.
        :type last_updated_time: datetime
        """

        self._last_updated_time = last_updated_time
