# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class StartRunRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, workflow_id: str=None, workflow_type: str=None, run_id: str=None, role_arn: str=None, name: str=None, run_group_id: str=None, priority: int=None, parameters: object=None, storage_capacity: int=None, output_uri: str=None, log_level: str=None, tags: Dict[str, str]=None, request_id: str=None):
        """StartRunRequest - a model defined in OpenAPI

        :param workflow_id: The workflow_id of this StartRunRequest.
        :param workflow_type: The workflow_type of this StartRunRequest.
        :param run_id: The run_id of this StartRunRequest.
        :param role_arn: The role_arn of this StartRunRequest.
        :param name: The name of this StartRunRequest.
        :param run_group_id: The run_group_id of this StartRunRequest.
        :param priority: The priority of this StartRunRequest.
        :param parameters: The parameters of this StartRunRequest.
        :param storage_capacity: The storage_capacity of this StartRunRequest.
        :param output_uri: The output_uri of this StartRunRequest.
        :param log_level: The log_level of this StartRunRequest.
        :param tags: The tags of this StartRunRequest.
        :param request_id: The request_id of this StartRunRequest.
        """
        self.openapi_types = {
            'workflow_id': str,
            'workflow_type': str,
            'run_id': str,
            'role_arn': str,
            'name': str,
            'run_group_id': str,
            'priority': int,
            'parameters': object,
            'storage_capacity': int,
            'output_uri': str,
            'log_level': str,
            'tags': Dict[str, str],
            'request_id': str
        }

        self.attribute_map = {
            'workflow_id': 'workflowId',
            'workflow_type': 'workflowType',
            'run_id': 'runId',
            'role_arn': 'roleArn',
            'name': 'name',
            'run_group_id': 'runGroupId',
            'priority': 'priority',
            'parameters': 'parameters',
            'storage_capacity': 'storageCapacity',
            'output_uri': 'outputUri',
            'log_level': 'logLevel',
            'tags': 'tags',
            'request_id': 'requestId'
        }

        self._workflow_id = workflow_id
        self._workflow_type = workflow_type
        self._run_id = run_id
        self._role_arn = role_arn
        self._name = name
        self._run_group_id = run_group_id
        self._priority = priority
        self._parameters = parameters
        self._storage_capacity = storage_capacity
        self._output_uri = output_uri
        self._log_level = log_level
        self._tags = tags
        self._request_id = request_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartRunRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartRun_request of this StartRunRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def workflow_id(self):
        """Gets the workflow_id of this StartRunRequest.

        The run's workflow ID.

        :return: The workflow_id of this StartRunRequest.
        :rtype: str
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this StartRunRequest.

        The run's workflow ID.

        :param workflow_id: The workflow_id of this StartRunRequest.
        :type workflow_id: str
        """
        if workflow_id is not None and len(workflow_id) > 18:
            raise ValueError("Invalid value for `workflow_id`, length must be less than or equal to `18`")
        if workflow_id is not None and len(workflow_id) < 1:
            raise ValueError("Invalid value for `workflow_id`, length must be greater than or equal to `1`")
        if workflow_id is not None and not re.search(r'[0-9]+', workflow_id):
            raise ValueError("Invalid value for `workflow_id`, must be a follow pattern or equal to `/[0-9]+/`")

        self._workflow_id = workflow_id

    @property
    def workflow_type(self):
        """Gets the workflow_type of this StartRunRequest.

        The run's workflows type.

        :return: The workflow_type of this StartRunRequest.
        :rtype: str
        """
        return self._workflow_type

    @workflow_type.setter
    def workflow_type(self, workflow_type):
        """Sets the workflow_type of this StartRunRequest.

        The run's workflows type.

        :param workflow_type: The workflow_type of this StartRunRequest.
        :type workflow_type: str
        """
        allowed_values = ["PRIVATE", "READY2RUN"]  # noqa: E501
        if workflow_type not in allowed_values:
            raise ValueError(
                "Invalid value for `workflow_type` ({0}), must be one of {1}"
                .format(workflow_type, allowed_values)
            )

        self._workflow_type = workflow_type

    @property
    def run_id(self):
        """Gets the run_id of this StartRunRequest.

        The run's ID.

        :return: The run_id of this StartRunRequest.
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this StartRunRequest.

        The run's ID.

        :param run_id: The run_id of this StartRunRequest.
        :type run_id: str
        """
        if run_id is not None and len(run_id) > 18:
            raise ValueError("Invalid value for `run_id`, length must be less than or equal to `18`")
        if run_id is not None and len(run_id) < 1:
            raise ValueError("Invalid value for `run_id`, length must be greater than or equal to `1`")
        if run_id is not None and not re.search(r'[0-9]+', run_id):
            raise ValueError("Invalid value for `run_id`, must be a follow pattern or equal to `/[0-9]+/`")

        self._run_id = run_id

    @property
    def role_arn(self):
        """Gets the role_arn of this StartRunRequest.

        A service role for the run.

        :return: The role_arn of this StartRunRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this StartRunRequest.

        A service role for the run.

        :param role_arn: The role_arn of this StartRunRequest.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")
        if role_arn is not None and len(role_arn) > 128:
            raise ValueError("Invalid value for `role_arn`, length must be less than or equal to `128`")
        if role_arn is not None and len(role_arn) < 1:
            raise ValueError("Invalid value for `role_arn`, length must be greater than or equal to `1`")
        if role_arn is not None and not re.search(r'arn:.+', role_arn):
            raise ValueError("Invalid value for `role_arn`, must be a follow pattern or equal to `/arn:.+/`")

        self._role_arn = role_arn

    @property
    def name(self):
        """Gets the name of this StartRunRequest.

        A name for the run.

        :return: The name of this StartRunRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StartRunRequest.

        A name for the run.

        :param name: The name of this StartRunRequest.
        :type name: str
        """
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+/`")

        self._name = name

    @property
    def run_group_id(self):
        """Gets the run_group_id of this StartRunRequest.

        The run's group ID.

        :return: The run_group_id of this StartRunRequest.
        :rtype: str
        """
        return self._run_group_id

    @run_group_id.setter
    def run_group_id(self, run_group_id):
        """Sets the run_group_id of this StartRunRequest.

        The run's group ID.

        :param run_group_id: The run_group_id of this StartRunRequest.
        :type run_group_id: str
        """
        if run_group_id is not None and len(run_group_id) > 18:
            raise ValueError("Invalid value for `run_group_id`, length must be less than or equal to `18`")
        if run_group_id is not None and len(run_group_id) < 1:
            raise ValueError("Invalid value for `run_group_id`, length must be greater than or equal to `1`")
        if run_group_id is not None and not re.search(r'[0-9]+', run_group_id):
            raise ValueError("Invalid value for `run_group_id`, must be a follow pattern or equal to `/[0-9]+/`")

        self._run_group_id = run_group_id

    @property
    def priority(self):
        """Gets the priority of this StartRunRequest.

        A priority for the run.

        :return: The priority of this StartRunRequest.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this StartRunRequest.

        A priority for the run.

        :param priority: The priority of this StartRunRequest.
        :type priority: int
        """
        if priority is not None and priority > 100000:
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `100000`")
        if priority is not None and priority < 0:
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `0`")

        self._priority = priority

    @property
    def parameters(self):
        """Gets the parameters of this StartRunRequest.

        Parameters for the run.

        :return: The parameters of this StartRunRequest.
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this StartRunRequest.

        Parameters for the run.

        :param parameters: The parameters of this StartRunRequest.
        :type parameters: object
        """

        self._parameters = parameters

    @property
    def storage_capacity(self):
        """Gets the storage_capacity of this StartRunRequest.

        A storage capacity for the run in gigabytes.

        :return: The storage_capacity of this StartRunRequest.
        :rtype: int
        """
        return self._storage_capacity

    @storage_capacity.setter
    def storage_capacity(self, storage_capacity):
        """Sets the storage_capacity of this StartRunRequest.

        A storage capacity for the run in gigabytes.

        :param storage_capacity: The storage_capacity of this StartRunRequest.
        :type storage_capacity: int
        """
        if storage_capacity is not None and storage_capacity > 100000:
            raise ValueError("Invalid value for `storage_capacity`, must be a value less than or equal to `100000`")
        if storage_capacity is not None and storage_capacity < 0:
            raise ValueError("Invalid value for `storage_capacity`, must be a value greater than or equal to `0`")

        self._storage_capacity = storage_capacity

    @property
    def output_uri(self):
        """Gets the output_uri of this StartRunRequest.

        An output URI for the run.

        :return: The output_uri of this StartRunRequest.
        :rtype: str
        """
        return self._output_uri

    @output_uri.setter
    def output_uri(self, output_uri):
        """Sets the output_uri of this StartRunRequest.

        An output URI for the run.

        :param output_uri: The output_uri of this StartRunRequest.
        :type output_uri: str
        """
        if output_uri is not None and len(output_uri) > 128:
            raise ValueError("Invalid value for `output_uri`, length must be less than or equal to `128`")
        if output_uri is not None and len(output_uri) < 1:
            raise ValueError("Invalid value for `output_uri`, length must be greater than or equal to `1`")
        if output_uri is not None and not re.search(r'[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+', output_uri):
            raise ValueError("Invalid value for `output_uri`, must be a follow pattern or equal to `/[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+/`")

        self._output_uri = output_uri

    @property
    def log_level(self):
        """Gets the log_level of this StartRunRequest.

        A log level for the run.

        :return: The log_level of this StartRunRequest.
        :rtype: str
        """
        return self._log_level

    @log_level.setter
    def log_level(self, log_level):
        """Sets the log_level of this StartRunRequest.

        A log level for the run.

        :param log_level: The log_level of this StartRunRequest.
        :type log_level: str
        """
        allowed_values = ["OFF", "FATAL", "ERROR", "ALL"]  # noqa: E501
        if log_level not in allowed_values:
            raise ValueError(
                "Invalid value for `log_level` ({0}), must be one of {1}"
                .format(log_level, allowed_values)
            )

        self._log_level = log_level

    @property
    def tags(self):
        """Gets the tags of this StartRunRequest.

        Tags for the run.

        :return: The tags of this StartRunRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this StartRunRequest.

        Tags for the run.

        :param tags: The tags of this StartRunRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags

    @property
    def request_id(self):
        """Gets the request_id of this StartRunRequest.

        To ensure that requests don't run multiple times, specify a unique ID for each request.

        :return: The request_id of this StartRunRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this StartRunRequest.

        To ensure that requests don't run multiple times, specify a unique ID for each request.

        :param request_id: The request_id of this StartRunRequest.
        :type request_id: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")
        if request_id is not None and len(request_id) > 128:
            raise ValueError("Invalid value for `request_id`, length must be less than or equal to `128`")
        if request_id is not None and len(request_id) < 1:
            raise ValueError("Invalid value for `request_id`, length must be greater than or equal to `1`")
        if request_id is not None and not re.search(r'[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+', request_id):
            raise ValueError("Invalid value for `request_id`, must be a follow pattern or equal to `/[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+/`")

        self._request_id = request_id
