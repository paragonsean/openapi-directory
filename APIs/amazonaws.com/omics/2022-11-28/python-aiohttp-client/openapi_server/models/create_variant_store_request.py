# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_annotation_store_request_reference import CreateAnnotationStoreRequestReference
from openapi_server.models.create_annotation_store_request_sse_config import CreateAnnotationStoreRequestSseConfig
import re
from openapi_server import util


class CreateVariantStoreRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, reference: CreateAnnotationStoreRequestReference=None, name: str=None, description: str=None, tags: Dict[str, str]=None, sse_config: CreateAnnotationStoreRequestSseConfig=None):
        """CreateVariantStoreRequest - a model defined in OpenAPI

        :param reference: The reference of this CreateVariantStoreRequest.
        :param name: The name of this CreateVariantStoreRequest.
        :param description: The description of this CreateVariantStoreRequest.
        :param tags: The tags of this CreateVariantStoreRequest.
        :param sse_config: The sse_config of this CreateVariantStoreRequest.
        """
        self.openapi_types = {
            'reference': CreateAnnotationStoreRequestReference,
            'name': str,
            'description': str,
            'tags': Dict[str, str],
            'sse_config': CreateAnnotationStoreRequestSseConfig
        }

        self.attribute_map = {
            'reference': 'reference',
            'name': 'name',
            'description': 'description',
            'tags': 'tags',
            'sse_config': 'sseConfig'
        }

        self._reference = reference
        self._name = name
        self._description = description
        self._tags = tags
        self._sse_config = sse_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateVariantStoreRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateVariantStore_request of this CreateVariantStoreRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reference(self):
        """Gets the reference of this CreateVariantStoreRequest.


        :return: The reference of this CreateVariantStoreRequest.
        :rtype: CreateAnnotationStoreRequestReference
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this CreateVariantStoreRequest.


        :param reference: The reference of this CreateVariantStoreRequest.
        :type reference: CreateAnnotationStoreRequestReference
        """
        if reference is None:
            raise ValueError("Invalid value for `reference`, must not be `None`")

        self._reference = reference

    @property
    def name(self):
        """Gets the name of this CreateVariantStoreRequest.

        A name for the store.

        :return: The name of this CreateVariantStoreRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateVariantStoreRequest.

        A name for the store.

        :param name: The name of this CreateVariantStoreRequest.
        :type name: str
        """
        if name is not None and not re.search(r'([a-z]){1}([a-z0-9_]){2,254}', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/([a-z]){1}([a-z0-9_]){2,254}/`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateVariantStoreRequest.

        A description for the store.

        :return: The description of this CreateVariantStoreRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateVariantStoreRequest.

        A description for the store.

        :param description: The description of this CreateVariantStoreRequest.
        :type description: str
        """
        if description is not None and len(description) > 500:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `500`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this CreateVariantStoreRequest.

        Tags for the store.

        :return: The tags of this CreateVariantStoreRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateVariantStoreRequest.

        Tags for the store.

        :param tags: The tags of this CreateVariantStoreRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags

    @property
    def sse_config(self):
        """Gets the sse_config of this CreateVariantStoreRequest.


        :return: The sse_config of this CreateVariantStoreRequest.
        :rtype: CreateAnnotationStoreRequestSseConfig
        """
        return self._sse_config

    @sse_config.setter
    def sse_config(self, sse_config):
        """Sets the sse_config of this CreateVariantStoreRequest.


        :param sse_config: The sse_config of this CreateVariantStoreRequest.
        :type sse_config: CreateAnnotationStoreRequestSseConfig
        """

        self._sse_config = sse_config
