# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.read_set_export_job_status import ReadSetExportJobStatus
from openapi_server import util


class GetReadSetExportJobResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, sequence_store_id: str=None, destination: str=None, status: ReadSetExportJobStatus=None, status_message: str=None, creation_time: datetime=None, completion_time: datetime=None, read_sets: List=None):
        """GetReadSetExportJobResponse - a model defined in OpenAPI

        :param id: The id of this GetReadSetExportJobResponse.
        :param sequence_store_id: The sequence_store_id of this GetReadSetExportJobResponse.
        :param destination: The destination of this GetReadSetExportJobResponse.
        :param status: The status of this GetReadSetExportJobResponse.
        :param status_message: The status_message of this GetReadSetExportJobResponse.
        :param creation_time: The creation_time of this GetReadSetExportJobResponse.
        :param completion_time: The completion_time of this GetReadSetExportJobResponse.
        :param read_sets: The read_sets of this GetReadSetExportJobResponse.
        """
        self.openapi_types = {
            'id': str,
            'sequence_store_id': str,
            'destination': str,
            'status': ReadSetExportJobStatus,
            'status_message': str,
            'creation_time': datetime,
            'completion_time': datetime,
            'read_sets': List
        }

        self.attribute_map = {
            'id': 'id',
            'sequence_store_id': 'sequenceStoreId',
            'destination': 'destination',
            'status': 'status',
            'status_message': 'statusMessage',
            'creation_time': 'creationTime',
            'completion_time': 'completionTime',
            'read_sets': 'readSets'
        }

        self._id = id
        self._sequence_store_id = sequence_store_id
        self._destination = destination
        self._status = status
        self._status_message = status_message
        self._creation_time = creation_time
        self._completion_time = completion_time
        self._read_sets = read_sets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetReadSetExportJobResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetReadSetExportJobResponse of this GetReadSetExportJobResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this GetReadSetExportJobResponse.


        :return: The id of this GetReadSetExportJobResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetReadSetExportJobResponse.


        :param id: The id of this GetReadSetExportJobResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def sequence_store_id(self):
        """Gets the sequence_store_id of this GetReadSetExportJobResponse.


        :return: The sequence_store_id of this GetReadSetExportJobResponse.
        :rtype: str
        """
        return self._sequence_store_id

    @sequence_store_id.setter
    def sequence_store_id(self, sequence_store_id):
        """Sets the sequence_store_id of this GetReadSetExportJobResponse.


        :param sequence_store_id: The sequence_store_id of this GetReadSetExportJobResponse.
        :type sequence_store_id: str
        """
        if sequence_store_id is None:
            raise ValueError("Invalid value for `sequence_store_id`, must not be `None`")

        self._sequence_store_id = sequence_store_id

    @property
    def destination(self):
        """Gets the destination of this GetReadSetExportJobResponse.


        :return: The destination of this GetReadSetExportJobResponse.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this GetReadSetExportJobResponse.


        :param destination: The destination of this GetReadSetExportJobResponse.
        :type destination: str
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")

        self._destination = destination

    @property
    def status(self):
        """Gets the status of this GetReadSetExportJobResponse.


        :return: The status of this GetReadSetExportJobResponse.
        :rtype: ReadSetExportJobStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetReadSetExportJobResponse.


        :param status: The status of this GetReadSetExportJobResponse.
        :type status: ReadSetExportJobStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this GetReadSetExportJobResponse.


        :return: The status_message of this GetReadSetExportJobResponse.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this GetReadSetExportJobResponse.


        :param status_message: The status_message of this GetReadSetExportJobResponse.
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def creation_time(self):
        """Gets the creation_time of this GetReadSetExportJobResponse.


        :return: The creation_time of this GetReadSetExportJobResponse.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this GetReadSetExportJobResponse.


        :param creation_time: The creation_time of this GetReadSetExportJobResponse.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def completion_time(self):
        """Gets the completion_time of this GetReadSetExportJobResponse.


        :return: The completion_time of this GetReadSetExportJobResponse.
        :rtype: datetime
        """
        return self._completion_time

    @completion_time.setter
    def completion_time(self, completion_time):
        """Sets the completion_time of this GetReadSetExportJobResponse.


        :param completion_time: The completion_time of this GetReadSetExportJobResponse.
        :type completion_time: datetime
        """

        self._completion_time = completion_time

    @property
    def read_sets(self):
        """Gets the read_sets of this GetReadSetExportJobResponse.


        :return: The read_sets of this GetReadSetExportJobResponse.
        :rtype: List
        """
        return self._read_sets

    @read_sets.setter
    def read_sets(self, read_sets):
        """Sets the read_sets of this GetReadSetExportJobResponse.


        :param read_sets: The read_sets of this GetReadSetExportJobResponse.
        :type read_sets: List
        """

        self._read_sets = read_sets
