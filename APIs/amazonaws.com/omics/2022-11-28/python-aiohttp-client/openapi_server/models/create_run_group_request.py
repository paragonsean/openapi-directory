# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateRunGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, max_cpus: int=None, max_runs: int=None, max_duration: int=None, tags: Dict[str, str]=None, request_id: str=None, max_gpus: int=None):
        """CreateRunGroupRequest - a model defined in OpenAPI

        :param name: The name of this CreateRunGroupRequest.
        :param max_cpus: The max_cpus of this CreateRunGroupRequest.
        :param max_runs: The max_runs of this CreateRunGroupRequest.
        :param max_duration: The max_duration of this CreateRunGroupRequest.
        :param tags: The tags of this CreateRunGroupRequest.
        :param request_id: The request_id of this CreateRunGroupRequest.
        :param max_gpus: The max_gpus of this CreateRunGroupRequest.
        """
        self.openapi_types = {
            'name': str,
            'max_cpus': int,
            'max_runs': int,
            'max_duration': int,
            'tags': Dict[str, str],
            'request_id': str,
            'max_gpus': int
        }

        self.attribute_map = {
            'name': 'name',
            'max_cpus': 'maxCpus',
            'max_runs': 'maxRuns',
            'max_duration': 'maxDuration',
            'tags': 'tags',
            'request_id': 'requestId',
            'max_gpus': 'maxGpus'
        }

        self._name = name
        self._max_cpus = max_cpus
        self._max_runs = max_runs
        self._max_duration = max_duration
        self._tags = tags
        self._request_id = request_id
        self._max_gpus = max_gpus

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateRunGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateRunGroup_request of this CreateRunGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateRunGroupRequest.

        A name for the group.

        :return: The name of this CreateRunGroupRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateRunGroupRequest.

        A name for the group.

        :param name: The name of this CreateRunGroupRequest.
        :type name: str
        """
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+/`")

        self._name = name

    @property
    def max_cpus(self):
        """Gets the max_cpus of this CreateRunGroupRequest.

        The maximum number of CPUs to use in the group.

        :return: The max_cpus of this CreateRunGroupRequest.
        :rtype: int
        """
        return self._max_cpus

    @max_cpus.setter
    def max_cpus(self, max_cpus):
        """Sets the max_cpus of this CreateRunGroupRequest.

        The maximum number of CPUs to use in the group.

        :param max_cpus: The max_cpus of this CreateRunGroupRequest.
        :type max_cpus: int
        """
        if max_cpus is not None and max_cpus > 100000:
            raise ValueError("Invalid value for `max_cpus`, must be a value less than or equal to `100000`")
        if max_cpus is not None and max_cpus < 1:
            raise ValueError("Invalid value for `max_cpus`, must be a value greater than or equal to `1`")

        self._max_cpus = max_cpus

    @property
    def max_runs(self):
        """Gets the max_runs of this CreateRunGroupRequest.

        The maximum number of concurrent runs for the group.

        :return: The max_runs of this CreateRunGroupRequest.
        :rtype: int
        """
        return self._max_runs

    @max_runs.setter
    def max_runs(self, max_runs):
        """Sets the max_runs of this CreateRunGroupRequest.

        The maximum number of concurrent runs for the group.

        :param max_runs: The max_runs of this CreateRunGroupRequest.
        :type max_runs: int
        """
        if max_runs is not None and max_runs > 100000:
            raise ValueError("Invalid value for `max_runs`, must be a value less than or equal to `100000`")
        if max_runs is not None and max_runs < 1:
            raise ValueError("Invalid value for `max_runs`, must be a value greater than or equal to `1`")

        self._max_runs = max_runs

    @property
    def max_duration(self):
        """Gets the max_duration of this CreateRunGroupRequest.

        A maximum run time for the group in minutes.

        :return: The max_duration of this CreateRunGroupRequest.
        :rtype: int
        """
        return self._max_duration

    @max_duration.setter
    def max_duration(self, max_duration):
        """Sets the max_duration of this CreateRunGroupRequest.

        A maximum run time for the group in minutes.

        :param max_duration: The max_duration of this CreateRunGroupRequest.
        :type max_duration: int
        """
        if max_duration is not None and max_duration > 100000:
            raise ValueError("Invalid value for `max_duration`, must be a value less than or equal to `100000`")
        if max_duration is not None and max_duration < 1:
            raise ValueError("Invalid value for `max_duration`, must be a value greater than or equal to `1`")

        self._max_duration = max_duration

    @property
    def tags(self):
        """Gets the tags of this CreateRunGroupRequest.

        Tags for the group.

        :return: The tags of this CreateRunGroupRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateRunGroupRequest.

        Tags for the group.

        :param tags: The tags of this CreateRunGroupRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags

    @property
    def request_id(self):
        """Gets the request_id of this CreateRunGroupRequest.

        To ensure that requests don't run multiple times, specify a unique ID for each request.

        :return: The request_id of this CreateRunGroupRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this CreateRunGroupRequest.

        To ensure that requests don't run multiple times, specify a unique ID for each request.

        :param request_id: The request_id of this CreateRunGroupRequest.
        :type request_id: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")
        if request_id is not None and len(request_id) > 128:
            raise ValueError("Invalid value for `request_id`, length must be less than or equal to `128`")
        if request_id is not None and len(request_id) < 1:
            raise ValueError("Invalid value for `request_id`, length must be greater than or equal to `1`")
        if request_id is not None and not re.search(r'[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+', request_id):
            raise ValueError("Invalid value for `request_id`, must be a follow pattern or equal to `/[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+/`")

        self._request_id = request_id

    @property
    def max_gpus(self):
        """Gets the max_gpus of this CreateRunGroupRequest.

         The maximum GPUs that can be used by a run group. 

        :return: The max_gpus of this CreateRunGroupRequest.
        :rtype: int
        """
        return self._max_gpus

    @max_gpus.setter
    def max_gpus(self, max_gpus):
        """Sets the max_gpus of this CreateRunGroupRequest.

         The maximum GPUs that can be used by a run group. 

        :param max_gpus: The max_gpus of this CreateRunGroupRequest.
        :type max_gpus: int
        """
        if max_gpus is not None and max_gpus > 100000:
            raise ValueError("Invalid value for `max_gpus`, must be a value less than or equal to `100000`")
        if max_gpus is not None and max_gpus < 1:
            raise ValueError("Invalid value for `max_gpus`, must be a value greater than or equal to `1`")

        self._max_gpus = max_gpus
