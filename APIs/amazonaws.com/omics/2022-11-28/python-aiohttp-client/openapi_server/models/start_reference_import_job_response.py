# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.reference_import_job_status import ReferenceImportJobStatus
from openapi_server import util


class StartReferenceImportJobResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, reference_store_id: str=None, role_arn: str=None, status: ReferenceImportJobStatus=None, creation_time: datetime=None):
        """StartReferenceImportJobResponse - a model defined in OpenAPI

        :param id: The id of this StartReferenceImportJobResponse.
        :param reference_store_id: The reference_store_id of this StartReferenceImportJobResponse.
        :param role_arn: The role_arn of this StartReferenceImportJobResponse.
        :param status: The status of this StartReferenceImportJobResponse.
        :param creation_time: The creation_time of this StartReferenceImportJobResponse.
        """
        self.openapi_types = {
            'id': str,
            'reference_store_id': str,
            'role_arn': str,
            'status': ReferenceImportJobStatus,
            'creation_time': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'reference_store_id': 'referenceStoreId',
            'role_arn': 'roleArn',
            'status': 'status',
            'creation_time': 'creationTime'
        }

        self._id = id
        self._reference_store_id = reference_store_id
        self._role_arn = role_arn
        self._status = status
        self._creation_time = creation_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartReferenceImportJobResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartReferenceImportJobResponse of this StartReferenceImportJobResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this StartReferenceImportJobResponse.


        :return: The id of this StartReferenceImportJobResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StartReferenceImportJobResponse.


        :param id: The id of this StartReferenceImportJobResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def reference_store_id(self):
        """Gets the reference_store_id of this StartReferenceImportJobResponse.


        :return: The reference_store_id of this StartReferenceImportJobResponse.
        :rtype: str
        """
        return self._reference_store_id

    @reference_store_id.setter
    def reference_store_id(self, reference_store_id):
        """Sets the reference_store_id of this StartReferenceImportJobResponse.


        :param reference_store_id: The reference_store_id of this StartReferenceImportJobResponse.
        :type reference_store_id: str
        """
        if reference_store_id is None:
            raise ValueError("Invalid value for `reference_store_id`, must not be `None`")

        self._reference_store_id = reference_store_id

    @property
    def role_arn(self):
        """Gets the role_arn of this StartReferenceImportJobResponse.


        :return: The role_arn of this StartReferenceImportJobResponse.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this StartReferenceImportJobResponse.


        :param role_arn: The role_arn of this StartReferenceImportJobResponse.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def status(self):
        """Gets the status of this StartReferenceImportJobResponse.


        :return: The status of this StartReferenceImportJobResponse.
        :rtype: ReferenceImportJobStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StartReferenceImportJobResponse.


        :param status: The status of this StartReferenceImportJobResponse.
        :type status: ReferenceImportJobStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def creation_time(self):
        """Gets the creation_time of this StartReferenceImportJobResponse.


        :return: The creation_time of this StartReferenceImportJobResponse.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this StartReferenceImportJobResponse.


        :param creation_time: The creation_time of this StartReferenceImportJobResponse.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time
