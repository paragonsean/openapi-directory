# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.list_variant_stores_request_filter import ListVariantStoresRequestFilter
from openapi_server import util


class ListVariantStoresRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ids: List[str]=None, filter: ListVariantStoresRequestFilter=None):
        """ListVariantStoresRequest - a model defined in OpenAPI

        :param ids: The ids of this ListVariantStoresRequest.
        :param filter: The filter of this ListVariantStoresRequest.
        """
        self.openapi_types = {
            'ids': List[str],
            'filter': ListVariantStoresRequestFilter
        }

        self.attribute_map = {
            'ids': 'ids',
            'filter': 'filter'
        }

        self._ids = ids
        self._filter = filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListVariantStoresRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListVariantStores_request of this ListVariantStoresRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ids(self):
        """Gets the ids of this ListVariantStoresRequest.

        A list of store IDs.

        :return: The ids of this ListVariantStoresRequest.
        :rtype: List[str]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this ListVariantStoresRequest.

        A list of store IDs.

        :param ids: The ids of this ListVariantStoresRequest.
        :type ids: List[str]
        """
        if ids is not None and len(ids) > 20:
            raise ValueError("Invalid value for `ids`, number of items must be less than or equal to `20`")
        if ids is not None and len(ids) < 1:
            raise ValueError("Invalid value for `ids`, number of items must be greater than or equal to `1`")

        self._ids = ids

    @property
    def filter(self):
        """Gets the filter of this ListVariantStoresRequest.


        :return: The filter of this ListVariantStoresRequest.
        :rtype: ListVariantStoresRequestFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this ListVariantStoresRequest.


        :param filter: The filter of this ListVariantStoresRequest.
        :type filter: ListVariantStoresRequestFilter
        """

        self._filter = filter
