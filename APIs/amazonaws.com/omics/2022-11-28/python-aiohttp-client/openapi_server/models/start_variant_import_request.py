# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StartVariantImportRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_name: str=None, role_arn: str=None, items: List=None, run_left_normalization: bool=None, annotation_fields: Dict=None):
        """StartVariantImportRequest - a model defined in OpenAPI

        :param destination_name: The destination_name of this StartVariantImportRequest.
        :param role_arn: The role_arn of this StartVariantImportRequest.
        :param items: The items of this StartVariantImportRequest.
        :param run_left_normalization: The run_left_normalization of this StartVariantImportRequest.
        :param annotation_fields: The annotation_fields of this StartVariantImportRequest.
        """
        self.openapi_types = {
            'destination_name': str,
            'role_arn': str,
            'items': List,
            'run_left_normalization': bool,
            'annotation_fields': Dict
        }

        self.attribute_map = {
            'destination_name': 'destinationName',
            'role_arn': 'roleArn',
            'items': 'items',
            'run_left_normalization': 'runLeftNormalization',
            'annotation_fields': 'annotationFields'
        }

        self._destination_name = destination_name
        self._role_arn = role_arn
        self._items = items
        self._run_left_normalization = run_left_normalization
        self._annotation_fields = annotation_fields

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartVariantImportRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartVariantImportRequest of this StartVariantImportRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_name(self):
        """Gets the destination_name of this StartVariantImportRequest.


        :return: The destination_name of this StartVariantImportRequest.
        :rtype: str
        """
        return self._destination_name

    @destination_name.setter
    def destination_name(self, destination_name):
        """Sets the destination_name of this StartVariantImportRequest.


        :param destination_name: The destination_name of this StartVariantImportRequest.
        :type destination_name: str
        """
        if destination_name is None:
            raise ValueError("Invalid value for `destination_name`, must not be `None`")

        self._destination_name = destination_name

    @property
    def role_arn(self):
        """Gets the role_arn of this StartVariantImportRequest.


        :return: The role_arn of this StartVariantImportRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this StartVariantImportRequest.


        :param role_arn: The role_arn of this StartVariantImportRequest.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def items(self):
        """Gets the items of this StartVariantImportRequest.


        :return: The items of this StartVariantImportRequest.
        :rtype: List
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this StartVariantImportRequest.


        :param items: The items of this StartVariantImportRequest.
        :type items: List
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def run_left_normalization(self):
        """Gets the run_left_normalization of this StartVariantImportRequest.


        :return: The run_left_normalization of this StartVariantImportRequest.
        :rtype: bool
        """
        return self._run_left_normalization

    @run_left_normalization.setter
    def run_left_normalization(self, run_left_normalization):
        """Sets the run_left_normalization of this StartVariantImportRequest.


        :param run_left_normalization: The run_left_normalization of this StartVariantImportRequest.
        :type run_left_normalization: bool
        """

        self._run_left_normalization = run_left_normalization

    @property
    def annotation_fields(self):
        """Gets the annotation_fields of this StartVariantImportRequest.


        :return: The annotation_fields of this StartVariantImportRequest.
        :rtype: Dict
        """
        return self._annotation_fields

    @annotation_fields.setter
    def annotation_fields(self, annotation_fields):
        """Sets the annotation_fields of this StartVariantImportRequest.


        :param annotation_fields: The annotation_fields of this StartVariantImportRequest.
        :type annotation_fields: Dict
        """

        self._annotation_fields = annotation_fields
