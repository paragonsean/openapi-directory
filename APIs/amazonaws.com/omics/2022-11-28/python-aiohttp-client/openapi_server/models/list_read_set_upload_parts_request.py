# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.list_read_set_upload_parts_request_filter import ListReadSetUploadPartsRequestFilter
from openapi_server import util


class ListReadSetUploadPartsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, part_source: str=None, filter: ListReadSetUploadPartsRequestFilter=None):
        """ListReadSetUploadPartsRequest - a model defined in OpenAPI

        :param part_source: The part_source of this ListReadSetUploadPartsRequest.
        :param filter: The filter of this ListReadSetUploadPartsRequest.
        """
        self.openapi_types = {
            'part_source': str,
            'filter': ListReadSetUploadPartsRequestFilter
        }

        self.attribute_map = {
            'part_source': 'partSource',
            'filter': 'filter'
        }

        self._part_source = part_source
        self._filter = filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListReadSetUploadPartsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListReadSetUploadParts_request of this ListReadSetUploadPartsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def part_source(self):
        """Gets the part_source of this ListReadSetUploadPartsRequest.

         The source file for the upload part. 

        :return: The part_source of this ListReadSetUploadPartsRequest.
        :rtype: str
        """
        return self._part_source

    @part_source.setter
    def part_source(self, part_source):
        """Sets the part_source of this ListReadSetUploadPartsRequest.

         The source file for the upload part. 

        :param part_source: The part_source of this ListReadSetUploadPartsRequest.
        :type part_source: str
        """
        allowed_values = ["SOURCE1", "SOURCE2"]  # noqa: E501
        if part_source not in allowed_values:
            raise ValueError(
                "Invalid value for `part_source` ({0}), must be one of {1}"
                .format(part_source, allowed_values)
            )

        self._part_source = part_source

    @property
    def filter(self):
        """Gets the filter of this ListReadSetUploadPartsRequest.


        :return: The filter of this ListReadSetUploadPartsRequest.
        :rtype: ListReadSetUploadPartsRequestFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this ListReadSetUploadPartsRequest.


        :param filter: The filter of this ListReadSetUploadPartsRequest.
        :type filter: ListReadSetUploadPartsRequestFilter
        """

        self._filter = filter
