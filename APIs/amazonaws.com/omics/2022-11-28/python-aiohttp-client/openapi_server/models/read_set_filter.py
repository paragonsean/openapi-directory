# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.creation_type import CreationType
from openapi_server.models.read_set_status import ReadSetStatus
from openapi_server import util


class ReadSetFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, status: ReadSetStatus=None, reference_arn: str=None, created_after: datetime=None, created_before: datetime=None, sample_id: str=None, subject_id: str=None, generated_from: str=None, creation_type: CreationType=None):
        """ReadSetFilter - a model defined in OpenAPI

        :param name: The name of this ReadSetFilter.
        :param status: The status of this ReadSetFilter.
        :param reference_arn: The reference_arn of this ReadSetFilter.
        :param created_after: The created_after of this ReadSetFilter.
        :param created_before: The created_before of this ReadSetFilter.
        :param sample_id: The sample_id of this ReadSetFilter.
        :param subject_id: The subject_id of this ReadSetFilter.
        :param generated_from: The generated_from of this ReadSetFilter.
        :param creation_type: The creation_type of this ReadSetFilter.
        """
        self.openapi_types = {
            'name': str,
            'status': ReadSetStatus,
            'reference_arn': str,
            'created_after': datetime,
            'created_before': datetime,
            'sample_id': str,
            'subject_id': str,
            'generated_from': str,
            'creation_type': CreationType
        }

        self.attribute_map = {
            'name': 'name',
            'status': 'status',
            'reference_arn': 'referenceArn',
            'created_after': 'createdAfter',
            'created_before': 'createdBefore',
            'sample_id': 'sampleId',
            'subject_id': 'subjectId',
            'generated_from': 'generatedFrom',
            'creation_type': 'creationType'
        }

        self._name = name
        self._status = status
        self._reference_arn = reference_arn
        self._created_after = created_after
        self._created_before = created_before
        self._sample_id = sample_id
        self._subject_id = subject_id
        self._generated_from = generated_from
        self._creation_type = creation_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReadSetFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReadSetFilter of this ReadSetFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ReadSetFilter.


        :return: The name of this ReadSetFilter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReadSetFilter.


        :param name: The name of this ReadSetFilter.
        :type name: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this ReadSetFilter.


        :return: The status of this ReadSetFilter.
        :rtype: ReadSetStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ReadSetFilter.


        :param status: The status of this ReadSetFilter.
        :type status: ReadSetStatus
        """

        self._status = status

    @property
    def reference_arn(self):
        """Gets the reference_arn of this ReadSetFilter.


        :return: The reference_arn of this ReadSetFilter.
        :rtype: str
        """
        return self._reference_arn

    @reference_arn.setter
    def reference_arn(self, reference_arn):
        """Sets the reference_arn of this ReadSetFilter.


        :param reference_arn: The reference_arn of this ReadSetFilter.
        :type reference_arn: str
        """

        self._reference_arn = reference_arn

    @property
    def created_after(self):
        """Gets the created_after of this ReadSetFilter.


        :return: The created_after of this ReadSetFilter.
        :rtype: datetime
        """
        return self._created_after

    @created_after.setter
    def created_after(self, created_after):
        """Sets the created_after of this ReadSetFilter.


        :param created_after: The created_after of this ReadSetFilter.
        :type created_after: datetime
        """

        self._created_after = created_after

    @property
    def created_before(self):
        """Gets the created_before of this ReadSetFilter.


        :return: The created_before of this ReadSetFilter.
        :rtype: datetime
        """
        return self._created_before

    @created_before.setter
    def created_before(self, created_before):
        """Sets the created_before of this ReadSetFilter.


        :param created_before: The created_before of this ReadSetFilter.
        :type created_before: datetime
        """

        self._created_before = created_before

    @property
    def sample_id(self):
        """Gets the sample_id of this ReadSetFilter.


        :return: The sample_id of this ReadSetFilter.
        :rtype: str
        """
        return self._sample_id

    @sample_id.setter
    def sample_id(self, sample_id):
        """Sets the sample_id of this ReadSetFilter.


        :param sample_id: The sample_id of this ReadSetFilter.
        :type sample_id: str
        """

        self._sample_id = sample_id

    @property
    def subject_id(self):
        """Gets the subject_id of this ReadSetFilter.


        :return: The subject_id of this ReadSetFilter.
        :rtype: str
        """
        return self._subject_id

    @subject_id.setter
    def subject_id(self, subject_id):
        """Sets the subject_id of this ReadSetFilter.


        :param subject_id: The subject_id of this ReadSetFilter.
        :type subject_id: str
        """

        self._subject_id = subject_id

    @property
    def generated_from(self):
        """Gets the generated_from of this ReadSetFilter.


        :return: The generated_from of this ReadSetFilter.
        :rtype: str
        """
        return self._generated_from

    @generated_from.setter
    def generated_from(self, generated_from):
        """Sets the generated_from of this ReadSetFilter.


        :param generated_from: The generated_from of this ReadSetFilter.
        :type generated_from: str
        """

        self._generated_from = generated_from

    @property
    def creation_type(self):
        """Gets the creation_type of this ReadSetFilter.


        :return: The creation_type of this ReadSetFilter.
        :rtype: CreationType
        """
        return self._creation_type

    @creation_type.setter
    def creation_type(self, creation_type):
        """Sets the creation_type of this ReadSetFilter.


        :param creation_type: The creation_type of this ReadSetFilter.
        :type creation_type: CreationType
        """

        self._creation_type = creation_type
