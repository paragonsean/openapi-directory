# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.variant_import_item_source import VariantImportItemSource
import re
from openapi_server import util


class StartVariantImportJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_name: str=None, role_arn: str=None, items: List[VariantImportItemSource]=None, run_left_normalization: bool=None, annotation_fields: Dict[str, str]=None):
        """StartVariantImportJobRequest - a model defined in OpenAPI

        :param destination_name: The destination_name of this StartVariantImportJobRequest.
        :param role_arn: The role_arn of this StartVariantImportJobRequest.
        :param items: The items of this StartVariantImportJobRequest.
        :param run_left_normalization: The run_left_normalization of this StartVariantImportJobRequest.
        :param annotation_fields: The annotation_fields of this StartVariantImportJobRequest.
        """
        self.openapi_types = {
            'destination_name': str,
            'role_arn': str,
            'items': List[VariantImportItemSource],
            'run_left_normalization': bool,
            'annotation_fields': Dict[str, str]
        }

        self.attribute_map = {
            'destination_name': 'destinationName',
            'role_arn': 'roleArn',
            'items': 'items',
            'run_left_normalization': 'runLeftNormalization',
            'annotation_fields': 'annotationFields'
        }

        self._destination_name = destination_name
        self._role_arn = role_arn
        self._items = items
        self._run_left_normalization = run_left_normalization
        self._annotation_fields = annotation_fields

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartVariantImportJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartVariantImportJob_request of this StartVariantImportJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_name(self):
        """Gets the destination_name of this StartVariantImportJobRequest.

        The destination variant store for the job.

        :return: The destination_name of this StartVariantImportJobRequest.
        :rtype: str
        """
        return self._destination_name

    @destination_name.setter
    def destination_name(self, destination_name):
        """Sets the destination_name of this StartVariantImportJobRequest.

        The destination variant store for the job.

        :param destination_name: The destination_name of this StartVariantImportJobRequest.
        :type destination_name: str
        """
        if destination_name is None:
            raise ValueError("Invalid value for `destination_name`, must not be `None`")
        if destination_name is not None and len(destination_name) > 255:
            raise ValueError("Invalid value for `destination_name`, length must be less than or equal to `255`")
        if destination_name is not None and len(destination_name) < 3:
            raise ValueError("Invalid value for `destination_name`, length must be greater than or equal to `3`")
        if destination_name is not None and not re.search(r'([a-z]){1}([a-z0-9_]){2,254}', destination_name):
            raise ValueError("Invalid value for `destination_name`, must be a follow pattern or equal to `/([a-z]){1}([a-z0-9_]){2,254}/`")

        self._destination_name = destination_name

    @property
    def role_arn(self):
        """Gets the role_arn of this StartVariantImportJobRequest.

        A service role for the job.

        :return: The role_arn of this StartVariantImportJobRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this StartVariantImportJobRequest.

        A service role for the job.

        :param role_arn: The role_arn of this StartVariantImportJobRequest.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")
        if role_arn is not None and len(role_arn) > 2048:
            raise ValueError("Invalid value for `role_arn`, length must be less than or equal to `2048`")
        if role_arn is not None and len(role_arn) < 20:
            raise ValueError("Invalid value for `role_arn`, length must be greater than or equal to `20`")
        if role_arn is not None and not re.search(r'arn:([^: ]*):([^: ]*):([^: ]*):([0-9]{12}):([^: ]*)', role_arn):
            raise ValueError("Invalid value for `role_arn`, must be a follow pattern or equal to `/arn:([^: ]*):([^: ]*):([^: ]*):([0-9]{12}):([^: ]*)/`")

        self._role_arn = role_arn

    @property
    def items(self):
        """Gets the items of this StartVariantImportJobRequest.

        Items to import.

        :return: The items of this StartVariantImportJobRequest.
        :rtype: List[VariantImportItemSource]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this StartVariantImportJobRequest.

        Items to import.

        :param items: The items of this StartVariantImportJobRequest.
        :type items: List[VariantImportItemSource]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")
        if items is not None and len(items) < 1:
            raise ValueError("Invalid value for `items`, number of items must be greater than or equal to `1`")

        self._items = items

    @property
    def run_left_normalization(self):
        """Gets the run_left_normalization of this StartVariantImportJobRequest.

        The job's left normalization setting.

        :return: The run_left_normalization of this StartVariantImportJobRequest.
        :rtype: bool
        """
        return self._run_left_normalization

    @run_left_normalization.setter
    def run_left_normalization(self, run_left_normalization):
        """Sets the run_left_normalization of this StartVariantImportJobRequest.

        The job's left normalization setting.

        :param run_left_normalization: The run_left_normalization of this StartVariantImportJobRequest.
        :type run_left_normalization: bool
        """

        self._run_left_normalization = run_left_normalization

    @property
    def annotation_fields(self):
        """Gets the annotation_fields of this StartVariantImportJobRequest.

         The annotation schema generated by the parsed annotation data. 

        :return: The annotation_fields of this StartVariantImportJobRequest.
        :rtype: Dict[str, str]
        """
        return self._annotation_fields

    @annotation_fields.setter
    def annotation_fields(self, annotation_fields):
        """Sets the annotation_fields of this StartVariantImportJobRequest.

         The annotation schema generated by the parsed annotation data. 

        :param annotation_fields: The annotation_fields of this StartVariantImportJobRequest.
        :type annotation_fields: Dict[str, str]
        """

        self._annotation_fields = annotation_fields
