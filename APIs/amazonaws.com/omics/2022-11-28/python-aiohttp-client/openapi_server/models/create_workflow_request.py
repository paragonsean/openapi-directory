# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.workflow_parameter import WorkflowParameter
import re
from openapi_server import util


class CreateWorkflowRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, engine: str=None, definition_zip: str=None, definition_uri: str=None, main: str=None, parameter_template: Dict[str, WorkflowParameter]=None, storage_capacity: int=None, tags: Dict[str, str]=None, request_id: str=None, accelerators: str=None):
        """CreateWorkflowRequest - a model defined in OpenAPI

        :param name: The name of this CreateWorkflowRequest.
        :param description: The description of this CreateWorkflowRequest.
        :param engine: The engine of this CreateWorkflowRequest.
        :param definition_zip: The definition_zip of this CreateWorkflowRequest.
        :param definition_uri: The definition_uri of this CreateWorkflowRequest.
        :param main: The main of this CreateWorkflowRequest.
        :param parameter_template: The parameter_template of this CreateWorkflowRequest.
        :param storage_capacity: The storage_capacity of this CreateWorkflowRequest.
        :param tags: The tags of this CreateWorkflowRequest.
        :param request_id: The request_id of this CreateWorkflowRequest.
        :param accelerators: The accelerators of this CreateWorkflowRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'engine': str,
            'definition_zip': str,
            'definition_uri': str,
            'main': str,
            'parameter_template': Dict[str, WorkflowParameter],
            'storage_capacity': int,
            'tags': Dict[str, str],
            'request_id': str,
            'accelerators': str
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'engine': 'engine',
            'definition_zip': 'definitionZip',
            'definition_uri': 'definitionUri',
            'main': 'main',
            'parameter_template': 'parameterTemplate',
            'storage_capacity': 'storageCapacity',
            'tags': 'tags',
            'request_id': 'requestId',
            'accelerators': 'accelerators'
        }

        self._name = name
        self._description = description
        self._engine = engine
        self._definition_zip = definition_zip
        self._definition_uri = definition_uri
        self._main = main
        self._parameter_template = parameter_template
        self._storage_capacity = storage_capacity
        self._tags = tags
        self._request_id = request_id
        self._accelerators = accelerators

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateWorkflowRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateWorkflow_request of this CreateWorkflowRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateWorkflowRequest.

        A name for the workflow.

        :return: The name of this CreateWorkflowRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateWorkflowRequest.

        A name for the workflow.

        :param name: The name of this CreateWorkflowRequest.
        :type name: str
        """
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+/`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateWorkflowRequest.

        A description for the workflow.

        :return: The description of this CreateWorkflowRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateWorkflowRequest.

        A description for the workflow.

        :param description: The description of this CreateWorkflowRequest.
        :type description: str
        """
        if description is not None and len(description) > 256:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `256`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")
        if description is not None and not re.search(r'[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+/`")

        self._description = description

    @property
    def engine(self):
        """Gets the engine of this CreateWorkflowRequest.

        An engine for the workflow.

        :return: The engine of this CreateWorkflowRequest.
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this CreateWorkflowRequest.

        An engine for the workflow.

        :param engine: The engine of this CreateWorkflowRequest.
        :type engine: str
        """
        allowed_values = ["WDL", "NEXTFLOW", "CWL"]  # noqa: E501
        if engine not in allowed_values:
            raise ValueError(
                "Invalid value for `engine` ({0}), must be one of {1}"
                .format(engine, allowed_values)
            )

        self._engine = engine

    @property
    def definition_zip(self):
        """Gets the definition_zip of this CreateWorkflowRequest.

        A ZIP archive for the workflow.

        :return: The definition_zip of this CreateWorkflowRequest.
        :rtype: str
        """
        return self._definition_zip

    @definition_zip.setter
    def definition_zip(self, definition_zip):
        """Sets the definition_zip of this CreateWorkflowRequest.

        A ZIP archive for the workflow.

        :param definition_zip: The definition_zip of this CreateWorkflowRequest.
        :type definition_zip: str
        """

        self._definition_zip = definition_zip

    @property
    def definition_uri(self):
        """Gets the definition_uri of this CreateWorkflowRequest.

        The URI of a definition for the workflow.

        :return: The definition_uri of this CreateWorkflowRequest.
        :rtype: str
        """
        return self._definition_uri

    @definition_uri.setter
    def definition_uri(self, definition_uri):
        """Sets the definition_uri of this CreateWorkflowRequest.

        The URI of a definition for the workflow.

        :param definition_uri: The definition_uri of this CreateWorkflowRequest.
        :type definition_uri: str
        """
        if definition_uri is not None and len(definition_uri) > 256:
            raise ValueError("Invalid value for `definition_uri`, length must be less than or equal to `256`")
        if definition_uri is not None and len(definition_uri) < 1:
            raise ValueError("Invalid value for `definition_uri`, length must be greater than or equal to `1`")
        if definition_uri is not None and not re.search(r'[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+', definition_uri):
            raise ValueError("Invalid value for `definition_uri`, must be a follow pattern or equal to `/[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+/`")

        self._definition_uri = definition_uri

    @property
    def main(self):
        """Gets the main of this CreateWorkflowRequest.

        The path of the main definition file for the workflow.

        :return: The main of this CreateWorkflowRequest.
        :rtype: str
        """
        return self._main

    @main.setter
    def main(self, main):
        """Sets the main of this CreateWorkflowRequest.

        The path of the main definition file for the workflow.

        :param main: The main of this CreateWorkflowRequest.
        :type main: str
        """
        if main is not None and len(main) > 128:
            raise ValueError("Invalid value for `main`, length must be less than or equal to `128`")
        if main is not None and len(main) < 1:
            raise ValueError("Invalid value for `main`, length must be greater than or equal to `1`")
        if main is not None and not re.search(r'[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+', main):
            raise ValueError("Invalid value for `main`, must be a follow pattern or equal to `/[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+/`")

        self._main = main

    @property
    def parameter_template(self):
        """Gets the parameter_template of this CreateWorkflowRequest.

        A parameter template for the workflow.

        :return: The parameter_template of this CreateWorkflowRequest.
        :rtype: Dict[str, WorkflowParameter]
        """
        return self._parameter_template

    @parameter_template.setter
    def parameter_template(self, parameter_template):
        """Sets the parameter_template of this CreateWorkflowRequest.

        A parameter template for the workflow.

        :param parameter_template: The parameter_template of this CreateWorkflowRequest.
        :type parameter_template: Dict[str, WorkflowParameter]
        """
        if parameter_template is not None and len(parameter_template) > 1000:
            raise ValueError("Invalid value for `parameter_template`, number of items must be less than or equal to `1000`")
        if parameter_template is not None and len(parameter_template) < 1:
            raise ValueError("Invalid value for `parameter_template`, number of items must be greater than or equal to `1`")

        self._parameter_template = parameter_template

    @property
    def storage_capacity(self):
        """Gets the storage_capacity of this CreateWorkflowRequest.

        A storage capacity for the workflow in gigabytes.

        :return: The storage_capacity of this CreateWorkflowRequest.
        :rtype: int
        """
        return self._storage_capacity

    @storage_capacity.setter
    def storage_capacity(self, storage_capacity):
        """Sets the storage_capacity of this CreateWorkflowRequest.

        A storage capacity for the workflow in gigabytes.

        :param storage_capacity: The storage_capacity of this CreateWorkflowRequest.
        :type storage_capacity: int
        """
        if storage_capacity is not None and storage_capacity > 100000:
            raise ValueError("Invalid value for `storage_capacity`, must be a value less than or equal to `100000`")
        if storage_capacity is not None and storage_capacity < 0:
            raise ValueError("Invalid value for `storage_capacity`, must be a value greater than or equal to `0`")

        self._storage_capacity = storage_capacity

    @property
    def tags(self):
        """Gets the tags of this CreateWorkflowRequest.

        Tags for the workflow.

        :return: The tags of this CreateWorkflowRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateWorkflowRequest.

        Tags for the workflow.

        :param tags: The tags of this CreateWorkflowRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags

    @property
    def request_id(self):
        """Gets the request_id of this CreateWorkflowRequest.

        To ensure that requests don't run multiple times, specify a unique ID for each request.

        :return: The request_id of this CreateWorkflowRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this CreateWorkflowRequest.

        To ensure that requests don't run multiple times, specify a unique ID for each request.

        :param request_id: The request_id of this CreateWorkflowRequest.
        :type request_id: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")
        if request_id is not None and len(request_id) > 128:
            raise ValueError("Invalid value for `request_id`, length must be less than or equal to `128`")
        if request_id is not None and len(request_id) < 1:
            raise ValueError("Invalid value for `request_id`, length must be greater than or equal to `1`")
        if request_id is not None and not re.search(r'[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+', request_id):
            raise ValueError("Invalid value for `request_id`, must be a follow pattern or equal to `/[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+/`")

        self._request_id = request_id

    @property
    def accelerators(self):
        """Gets the accelerators of this CreateWorkflowRequest.

         The computational accelerator specified to run the workflow. 

        :return: The accelerators of this CreateWorkflowRequest.
        :rtype: str
        """
        return self._accelerators

    @accelerators.setter
    def accelerators(self, accelerators):
        """Sets the accelerators of this CreateWorkflowRequest.

         The computational accelerator specified to run the workflow. 

        :param accelerators: The accelerators of this CreateWorkflowRequest.
        :type accelerators: str
        """
        allowed_values = ["GPU"]  # noqa: E501
        if accelerators not in allowed_values:
            raise ValueError(
                "Invalid value for `accelerators` ({0}), must be one of {1}"
                .format(accelerators, allowed_values)
            )

        self._accelerators = accelerators
