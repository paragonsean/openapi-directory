# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.start_reference_import_job_source_item import StartReferenceImportJobSourceItem
import re
from openapi_server import util


class StartReferenceImportJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, role_arn: str=None, client_token: str=None, sources: List[StartReferenceImportJobSourceItem]=None):
        """StartReferenceImportJobRequest - a model defined in OpenAPI

        :param role_arn: The role_arn of this StartReferenceImportJobRequest.
        :param client_token: The client_token of this StartReferenceImportJobRequest.
        :param sources: The sources of this StartReferenceImportJobRequest.
        """
        self.openapi_types = {
            'role_arn': str,
            'client_token': str,
            'sources': List[StartReferenceImportJobSourceItem]
        }

        self.attribute_map = {
            'role_arn': 'roleArn',
            'client_token': 'clientToken',
            'sources': 'sources'
        }

        self._role_arn = role_arn
        self._client_token = client_token
        self._sources = sources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartReferenceImportJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartReferenceImportJob_request of this StartReferenceImportJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def role_arn(self):
        """Gets the role_arn of this StartReferenceImportJobRequest.

        A service role for the job.

        :return: The role_arn of this StartReferenceImportJobRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this StartReferenceImportJobRequest.

        A service role for the job.

        :param role_arn: The role_arn of this StartReferenceImportJobRequest.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")
        if role_arn is not None and len(role_arn) > 2048:
            raise ValueError("Invalid value for `role_arn`, length must be less than or equal to `2048`")
        if role_arn is not None and len(role_arn) < 20:
            raise ValueError("Invalid value for `role_arn`, length must be greater than or equal to `20`")
        if role_arn is not None and not re.search(r'arn:.*', role_arn):
            raise ValueError("Invalid value for `role_arn`, must be a follow pattern or equal to `/arn:.*/`")

        self._role_arn = role_arn

    @property
    def client_token(self):
        """Gets the client_token of this StartReferenceImportJobRequest.

        To ensure that jobs don't run multiple times, specify a unique token for each job.

        :return: The client_token of this StartReferenceImportJobRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this StartReferenceImportJobRequest.

        To ensure that jobs don't run multiple times, specify a unique token for each job.

        :param client_token: The client_token of this StartReferenceImportJobRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 127:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `127`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+/`")

        self._client_token = client_token

    @property
    def sources(self):
        """Gets the sources of this StartReferenceImportJobRequest.

        The job's source files.

        :return: The sources of this StartReferenceImportJobRequest.
        :rtype: List[StartReferenceImportJobSourceItem]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this StartReferenceImportJobRequest.

        The job's source files.

        :param sources: The sources of this StartReferenceImportJobRequest.
        :type sources: List[StartReferenceImportJobSourceItem]
        """
        if sources is None:
            raise ValueError("Invalid value for `sources`, must not be `None`")
        if sources is not None and len(sources) > 100:
            raise ValueError("Invalid value for `sources`, number of items must be less than or equal to `100`")
        if sources is not None and len(sources) < 1:
            raise ValueError("Invalid value for `sources`, number of items must be greater than or equal to `1`")

        self._sources = sources
