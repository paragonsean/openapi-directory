# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_annotation_store_request_sse_config import CreateAnnotationStoreRequestSseConfig
import re
from openapi_server import util


class CreateSequenceStoreRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, sse_config: CreateAnnotationStoreRequestSseConfig=None, tags: Dict[str, str]=None, client_token: str=None, fallback_location: str=None):
        """CreateSequenceStoreRequest - a model defined in OpenAPI

        :param name: The name of this CreateSequenceStoreRequest.
        :param description: The description of this CreateSequenceStoreRequest.
        :param sse_config: The sse_config of this CreateSequenceStoreRequest.
        :param tags: The tags of this CreateSequenceStoreRequest.
        :param client_token: The client_token of this CreateSequenceStoreRequest.
        :param fallback_location: The fallback_location of this CreateSequenceStoreRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'sse_config': CreateAnnotationStoreRequestSseConfig,
            'tags': Dict[str, str],
            'client_token': str,
            'fallback_location': str
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'sse_config': 'sseConfig',
            'tags': 'tags',
            'client_token': 'clientToken',
            'fallback_location': 'fallbackLocation'
        }

        self._name = name
        self._description = description
        self._sse_config = sse_config
        self._tags = tags
        self._client_token = client_token
        self._fallback_location = fallback_location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSequenceStoreRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSequenceStore_request of this CreateSequenceStoreRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateSequenceStoreRequest.

        A name for the store.

        :return: The name of this CreateSequenceStoreRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateSequenceStoreRequest.

        A name for the store.

        :param name: The name of this CreateSequenceStoreRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 127:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `127`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+/`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateSequenceStoreRequest.

        A description for the store.

        :return: The description of this CreateSequenceStoreRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateSequenceStoreRequest.

        A description for the store.

        :param description: The description of this CreateSequenceStoreRequest.
        :type description: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")
        if description is not None and not re.search(r'[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+/`")

        self._description = description

    @property
    def sse_config(self):
        """Gets the sse_config of this CreateSequenceStoreRequest.


        :return: The sse_config of this CreateSequenceStoreRequest.
        :rtype: CreateAnnotationStoreRequestSseConfig
        """
        return self._sse_config

    @sse_config.setter
    def sse_config(self, sse_config):
        """Sets the sse_config of this CreateSequenceStoreRequest.


        :param sse_config: The sse_config of this CreateSequenceStoreRequest.
        :type sse_config: CreateAnnotationStoreRequestSseConfig
        """

        self._sse_config = sse_config

    @property
    def tags(self):
        """Gets the tags of this CreateSequenceStoreRequest.

        Tags for the store.

        :return: The tags of this CreateSequenceStoreRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateSequenceStoreRequest.

        Tags for the store.

        :param tags: The tags of this CreateSequenceStoreRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags

    @property
    def client_token(self):
        """Gets the client_token of this CreateSequenceStoreRequest.

        To ensure that requests don't run multiple times, specify a unique token for each request.

        :return: The client_token of this CreateSequenceStoreRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateSequenceStoreRequest.

        To ensure that requests don't run multiple times, specify a unique token for each request.

        :param client_token: The client_token of this CreateSequenceStoreRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 127:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `127`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+/`")

        self._client_token = client_token

    @property
    def fallback_location(self):
        """Gets the fallback_location of this CreateSequenceStoreRequest.

         An S3 location that is used to store files that have failed a direct upload. 

        :return: The fallback_location of this CreateSequenceStoreRequest.
        :rtype: str
        """
        return self._fallback_location

    @fallback_location.setter
    def fallback_location(self, fallback_location):
        """Sets the fallback_location of this CreateSequenceStoreRequest.

         An S3 location that is used to store files that have failed a direct upload. 

        :param fallback_location: The fallback_location of this CreateSequenceStoreRequest.
        :type fallback_location: str
        """
        if fallback_location is not None and not re.search(r's3:\/\/([a-z0-9][a-z0-9-.]{1,61}[a-z0-9])\/?((.{1,1024})\/)?', fallback_location):
            raise ValueError("Invalid value for `fallback_location`, must be a follow pattern or equal to `/s3:\/\/([a-z0-9][a-z0-9-.]{1,61}[a-z0-9])\/?((.{1,1024})\/)?/`")

        self._fallback_location = fallback_location
