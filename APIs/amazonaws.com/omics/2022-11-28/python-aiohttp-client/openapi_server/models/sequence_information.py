# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SequenceInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, total_read_count: int=None, total_base_count: int=None, generated_from: str=None, alignment: str=None):
        """SequenceInformation - a model defined in OpenAPI

        :param total_read_count: The total_read_count of this SequenceInformation.
        :param total_base_count: The total_base_count of this SequenceInformation.
        :param generated_from: The generated_from of this SequenceInformation.
        :param alignment: The alignment of this SequenceInformation.
        """
        self.openapi_types = {
            'total_read_count': int,
            'total_base_count': int,
            'generated_from': str,
            'alignment': str
        }

        self.attribute_map = {
            'total_read_count': 'totalReadCount',
            'total_base_count': 'totalBaseCount',
            'generated_from': 'generatedFrom',
            'alignment': 'alignment'
        }

        self._total_read_count = total_read_count
        self._total_base_count = total_base_count
        self._generated_from = generated_from
        self._alignment = alignment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SequenceInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SequenceInformation of this SequenceInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def total_read_count(self):
        """Gets the total_read_count of this SequenceInformation.


        :return: The total_read_count of this SequenceInformation.
        :rtype: int
        """
        return self._total_read_count

    @total_read_count.setter
    def total_read_count(self, total_read_count):
        """Sets the total_read_count of this SequenceInformation.


        :param total_read_count: The total_read_count of this SequenceInformation.
        :type total_read_count: int
        """

        self._total_read_count = total_read_count

    @property
    def total_base_count(self):
        """Gets the total_base_count of this SequenceInformation.


        :return: The total_base_count of this SequenceInformation.
        :rtype: int
        """
        return self._total_base_count

    @total_base_count.setter
    def total_base_count(self, total_base_count):
        """Sets the total_base_count of this SequenceInformation.


        :param total_base_count: The total_base_count of this SequenceInformation.
        :type total_base_count: int
        """

        self._total_base_count = total_base_count

    @property
    def generated_from(self):
        """Gets the generated_from of this SequenceInformation.


        :return: The generated_from of this SequenceInformation.
        :rtype: str
        """
        return self._generated_from

    @generated_from.setter
    def generated_from(self, generated_from):
        """Sets the generated_from of this SequenceInformation.


        :param generated_from: The generated_from of this SequenceInformation.
        :type generated_from: str
        """

        self._generated_from = generated_from

    @property
    def alignment(self):
        """Gets the alignment of this SequenceInformation.


        :return: The alignment of this SequenceInformation.
        :rtype: str
        """
        return self._alignment

    @alignment.setter
    def alignment(self, alignment):
        """Sets the alignment of this SequenceInformation.


        :param alignment: The alignment of this SequenceInformation.
        :type alignment: str
        """

        self._alignment = alignment
