# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.file_type import FileType
from openapi_server.models.read_set_import_job_item_status import ReadSetImportJobItemStatus
from openapi_server.models.start_read_set_import_job_source_item_source_files import StartReadSetImportJobSourceItemSourceFiles
from openapi_server import util


class ImportReadSetSourceItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source_files: StartReadSetImportJobSourceItemSourceFiles=None, source_file_type: FileType=None, status: ReadSetImportJobItemStatus=None, status_message: str=None, subject_id: str=None, sample_id: str=None, generated_from: str=None, reference_arn: str=None, name: str=None, description: str=None, tags: Dict=None):
        """ImportReadSetSourceItem - a model defined in OpenAPI

        :param source_files: The source_files of this ImportReadSetSourceItem.
        :param source_file_type: The source_file_type of this ImportReadSetSourceItem.
        :param status: The status of this ImportReadSetSourceItem.
        :param status_message: The status_message of this ImportReadSetSourceItem.
        :param subject_id: The subject_id of this ImportReadSetSourceItem.
        :param sample_id: The sample_id of this ImportReadSetSourceItem.
        :param generated_from: The generated_from of this ImportReadSetSourceItem.
        :param reference_arn: The reference_arn of this ImportReadSetSourceItem.
        :param name: The name of this ImportReadSetSourceItem.
        :param description: The description of this ImportReadSetSourceItem.
        :param tags: The tags of this ImportReadSetSourceItem.
        """
        self.openapi_types = {
            'source_files': StartReadSetImportJobSourceItemSourceFiles,
            'source_file_type': FileType,
            'status': ReadSetImportJobItemStatus,
            'status_message': str,
            'subject_id': str,
            'sample_id': str,
            'generated_from': str,
            'reference_arn': str,
            'name': str,
            'description': str,
            'tags': Dict
        }

        self.attribute_map = {
            'source_files': 'sourceFiles',
            'source_file_type': 'sourceFileType',
            'status': 'status',
            'status_message': 'statusMessage',
            'subject_id': 'subjectId',
            'sample_id': 'sampleId',
            'generated_from': 'generatedFrom',
            'reference_arn': 'referenceArn',
            'name': 'name',
            'description': 'description',
            'tags': 'tags'
        }

        self._source_files = source_files
        self._source_file_type = source_file_type
        self._status = status
        self._status_message = status_message
        self._subject_id = subject_id
        self._sample_id = sample_id
        self._generated_from = generated_from
        self._reference_arn = reference_arn
        self._name = name
        self._description = description
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportReadSetSourceItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportReadSetSourceItem of this ImportReadSetSourceItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_files(self):
        """Gets the source_files of this ImportReadSetSourceItem.


        :return: The source_files of this ImportReadSetSourceItem.
        :rtype: StartReadSetImportJobSourceItemSourceFiles
        """
        return self._source_files

    @source_files.setter
    def source_files(self, source_files):
        """Sets the source_files of this ImportReadSetSourceItem.


        :param source_files: The source_files of this ImportReadSetSourceItem.
        :type source_files: StartReadSetImportJobSourceItemSourceFiles
        """
        if source_files is None:
            raise ValueError("Invalid value for `source_files`, must not be `None`")

        self._source_files = source_files

    @property
    def source_file_type(self):
        """Gets the source_file_type of this ImportReadSetSourceItem.


        :return: The source_file_type of this ImportReadSetSourceItem.
        :rtype: FileType
        """
        return self._source_file_type

    @source_file_type.setter
    def source_file_type(self, source_file_type):
        """Sets the source_file_type of this ImportReadSetSourceItem.


        :param source_file_type: The source_file_type of this ImportReadSetSourceItem.
        :type source_file_type: FileType
        """
        if source_file_type is None:
            raise ValueError("Invalid value for `source_file_type`, must not be `None`")

        self._source_file_type = source_file_type

    @property
    def status(self):
        """Gets the status of this ImportReadSetSourceItem.


        :return: The status of this ImportReadSetSourceItem.
        :rtype: ReadSetImportJobItemStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ImportReadSetSourceItem.


        :param status: The status of this ImportReadSetSourceItem.
        :type status: ReadSetImportJobItemStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this ImportReadSetSourceItem.


        :return: The status_message of this ImportReadSetSourceItem.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this ImportReadSetSourceItem.


        :param status_message: The status_message of this ImportReadSetSourceItem.
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def subject_id(self):
        """Gets the subject_id of this ImportReadSetSourceItem.


        :return: The subject_id of this ImportReadSetSourceItem.
        :rtype: str
        """
        return self._subject_id

    @subject_id.setter
    def subject_id(self, subject_id):
        """Sets the subject_id of this ImportReadSetSourceItem.


        :param subject_id: The subject_id of this ImportReadSetSourceItem.
        :type subject_id: str
        """
        if subject_id is None:
            raise ValueError("Invalid value for `subject_id`, must not be `None`")

        self._subject_id = subject_id

    @property
    def sample_id(self):
        """Gets the sample_id of this ImportReadSetSourceItem.


        :return: The sample_id of this ImportReadSetSourceItem.
        :rtype: str
        """
        return self._sample_id

    @sample_id.setter
    def sample_id(self, sample_id):
        """Sets the sample_id of this ImportReadSetSourceItem.


        :param sample_id: The sample_id of this ImportReadSetSourceItem.
        :type sample_id: str
        """
        if sample_id is None:
            raise ValueError("Invalid value for `sample_id`, must not be `None`")

        self._sample_id = sample_id

    @property
    def generated_from(self):
        """Gets the generated_from of this ImportReadSetSourceItem.


        :return: The generated_from of this ImportReadSetSourceItem.
        :rtype: str
        """
        return self._generated_from

    @generated_from.setter
    def generated_from(self, generated_from):
        """Sets the generated_from of this ImportReadSetSourceItem.


        :param generated_from: The generated_from of this ImportReadSetSourceItem.
        :type generated_from: str
        """

        self._generated_from = generated_from

    @property
    def reference_arn(self):
        """Gets the reference_arn of this ImportReadSetSourceItem.


        :return: The reference_arn of this ImportReadSetSourceItem.
        :rtype: str
        """
        return self._reference_arn

    @reference_arn.setter
    def reference_arn(self, reference_arn):
        """Sets the reference_arn of this ImportReadSetSourceItem.


        :param reference_arn: The reference_arn of this ImportReadSetSourceItem.
        :type reference_arn: str
        """

        self._reference_arn = reference_arn

    @property
    def name(self):
        """Gets the name of this ImportReadSetSourceItem.


        :return: The name of this ImportReadSetSourceItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImportReadSetSourceItem.


        :param name: The name of this ImportReadSetSourceItem.
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ImportReadSetSourceItem.


        :return: The description of this ImportReadSetSourceItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ImportReadSetSourceItem.


        :param description: The description of this ImportReadSetSourceItem.
        :type description: str
        """

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this ImportReadSetSourceItem.


        :return: The tags of this ImportReadSetSourceItem.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ImportReadSetSourceItem.


        :param tags: The tags of this ImportReadSetSourceItem.
        :type tags: Dict
        """

        self._tags = tags
