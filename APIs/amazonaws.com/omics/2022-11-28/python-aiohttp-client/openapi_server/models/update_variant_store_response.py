# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_variant_store_response_reference import CreateVariantStoreResponseReference
from openapi_server.models.store_status import StoreStatus
from openapi_server import util


class UpdateVariantStoreResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, reference: CreateVariantStoreResponseReference=None, status: StoreStatus=None, name: str=None, description: str=None, creation_time: datetime=None, update_time: datetime=None):
        """UpdateVariantStoreResponse - a model defined in OpenAPI

        :param id: The id of this UpdateVariantStoreResponse.
        :param reference: The reference of this UpdateVariantStoreResponse.
        :param status: The status of this UpdateVariantStoreResponse.
        :param name: The name of this UpdateVariantStoreResponse.
        :param description: The description of this UpdateVariantStoreResponse.
        :param creation_time: The creation_time of this UpdateVariantStoreResponse.
        :param update_time: The update_time of this UpdateVariantStoreResponse.
        """
        self.openapi_types = {
            'id': str,
            'reference': CreateVariantStoreResponseReference,
            'status': StoreStatus,
            'name': str,
            'description': str,
            'creation_time': datetime,
            'update_time': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'reference': 'reference',
            'status': 'status',
            'name': 'name',
            'description': 'description',
            'creation_time': 'creationTime',
            'update_time': 'updateTime'
        }

        self._id = id
        self._reference = reference
        self._status = status
        self._name = name
        self._description = description
        self._creation_time = creation_time
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateVariantStoreResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateVariantStoreResponse of this UpdateVariantStoreResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this UpdateVariantStoreResponse.


        :return: The id of this UpdateVariantStoreResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UpdateVariantStoreResponse.


        :param id: The id of this UpdateVariantStoreResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def reference(self):
        """Gets the reference of this UpdateVariantStoreResponse.


        :return: The reference of this UpdateVariantStoreResponse.
        :rtype: CreateVariantStoreResponseReference
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this UpdateVariantStoreResponse.


        :param reference: The reference of this UpdateVariantStoreResponse.
        :type reference: CreateVariantStoreResponseReference
        """
        if reference is None:
            raise ValueError("Invalid value for `reference`, must not be `None`")

        self._reference = reference

    @property
    def status(self):
        """Gets the status of this UpdateVariantStoreResponse.


        :return: The status of this UpdateVariantStoreResponse.
        :rtype: StoreStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpdateVariantStoreResponse.


        :param status: The status of this UpdateVariantStoreResponse.
        :type status: StoreStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def name(self):
        """Gets the name of this UpdateVariantStoreResponse.


        :return: The name of this UpdateVariantStoreResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateVariantStoreResponse.


        :param name: The name of this UpdateVariantStoreResponse.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this UpdateVariantStoreResponse.


        :return: The description of this UpdateVariantStoreResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateVariantStoreResponse.


        :param description: The description of this UpdateVariantStoreResponse.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def creation_time(self):
        """Gets the creation_time of this UpdateVariantStoreResponse.


        :return: The creation_time of this UpdateVariantStoreResponse.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this UpdateVariantStoreResponse.


        :param creation_time: The creation_time of this UpdateVariantStoreResponse.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def update_time(self):
        """Gets the update_time of this UpdateVariantStoreResponse.


        :return: The update_time of this UpdateVariantStoreResponse.
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this UpdateVariantStoreResponse.


        :param update_time: The update_time of this UpdateVariantStoreResponse.
        :type update_time: datetime
        """
        if update_time is None:
            raise ValueError("Invalid value for `update_time`, must not be `None`")

        self._update_time = update_time
