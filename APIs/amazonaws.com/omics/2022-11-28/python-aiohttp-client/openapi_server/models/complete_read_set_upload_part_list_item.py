# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.read_set_part_source import ReadSetPartSource
from openapi_server import util


class CompleteReadSetUploadPartListItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, part_number: int=None, part_source: ReadSetPartSource=None, checksum: str=None):
        """CompleteReadSetUploadPartListItem - a model defined in OpenAPI

        :param part_number: The part_number of this CompleteReadSetUploadPartListItem.
        :param part_source: The part_source of this CompleteReadSetUploadPartListItem.
        :param checksum: The checksum of this CompleteReadSetUploadPartListItem.
        """
        self.openapi_types = {
            'part_number': int,
            'part_source': ReadSetPartSource,
            'checksum': str
        }

        self.attribute_map = {
            'part_number': 'partNumber',
            'part_source': 'partSource',
            'checksum': 'checksum'
        }

        self._part_number = part_number
        self._part_source = part_source
        self._checksum = checksum

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompleteReadSetUploadPartListItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompleteReadSetUploadPartListItem of this CompleteReadSetUploadPartListItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def part_number(self):
        """Gets the part_number of this CompleteReadSetUploadPartListItem.


        :return: The part_number of this CompleteReadSetUploadPartListItem.
        :rtype: int
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """Sets the part_number of this CompleteReadSetUploadPartListItem.


        :param part_number: The part_number of this CompleteReadSetUploadPartListItem.
        :type part_number: int
        """
        if part_number is None:
            raise ValueError("Invalid value for `part_number`, must not be `None`")

        self._part_number = part_number

    @property
    def part_source(self):
        """Gets the part_source of this CompleteReadSetUploadPartListItem.


        :return: The part_source of this CompleteReadSetUploadPartListItem.
        :rtype: ReadSetPartSource
        """
        return self._part_source

    @part_source.setter
    def part_source(self, part_source):
        """Sets the part_source of this CompleteReadSetUploadPartListItem.


        :param part_source: The part_source of this CompleteReadSetUploadPartListItem.
        :type part_source: ReadSetPartSource
        """
        if part_source is None:
            raise ValueError("Invalid value for `part_source`, must not be `None`")

        self._part_source = part_source

    @property
    def checksum(self):
        """Gets the checksum of this CompleteReadSetUploadPartListItem.


        :return: The checksum of this CompleteReadSetUploadPartListItem.
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this CompleteReadSetUploadPartListItem.


        :param checksum: The checksum of this CompleteReadSetUploadPartListItem.
        :type checksum: str
        """
        if checksum is None:
            raise ValueError("Invalid value for `checksum`, must not be `None`")

        self._checksum = checksum
