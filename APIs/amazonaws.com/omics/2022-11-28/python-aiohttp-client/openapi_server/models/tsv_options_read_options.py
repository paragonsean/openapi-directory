# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TsvOptionsReadOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sep: str=None, encoding: str=None, quote: str=None, quote_all: bool=None, escape: str=None, escape_quotes: bool=None, comment: str=None, header: bool=None, line_sep: str=None):
        """TsvOptionsReadOptions - a model defined in OpenAPI

        :param sep: The sep of this TsvOptionsReadOptions.
        :param encoding: The encoding of this TsvOptionsReadOptions.
        :param quote: The quote of this TsvOptionsReadOptions.
        :param quote_all: The quote_all of this TsvOptionsReadOptions.
        :param escape: The escape of this TsvOptionsReadOptions.
        :param escape_quotes: The escape_quotes of this TsvOptionsReadOptions.
        :param comment: The comment of this TsvOptionsReadOptions.
        :param header: The header of this TsvOptionsReadOptions.
        :param line_sep: The line_sep of this TsvOptionsReadOptions.
        """
        self.openapi_types = {
            'sep': str,
            'encoding': str,
            'quote': str,
            'quote_all': bool,
            'escape': str,
            'escape_quotes': bool,
            'comment': str,
            'header': bool,
            'line_sep': str
        }

        self.attribute_map = {
            'sep': 'sep',
            'encoding': 'encoding',
            'quote': 'quote',
            'quote_all': 'quoteAll',
            'escape': 'escape',
            'escape_quotes': 'escapeQuotes',
            'comment': 'comment',
            'header': 'header',
            'line_sep': 'lineSep'
        }

        self._sep = sep
        self._encoding = encoding
        self._quote = quote
        self._quote_all = quote_all
        self._escape = escape
        self._escape_quotes = escape_quotes
        self._comment = comment
        self._header = header
        self._line_sep = line_sep

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TsvOptionsReadOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TsvOptions_readOptions of this TsvOptionsReadOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sep(self):
        """Gets the sep of this TsvOptionsReadOptions.


        :return: The sep of this TsvOptionsReadOptions.
        :rtype: str
        """
        return self._sep

    @sep.setter
    def sep(self, sep):
        """Sets the sep of this TsvOptionsReadOptions.


        :param sep: The sep of this TsvOptionsReadOptions.
        :type sep: str
        """

        self._sep = sep

    @property
    def encoding(self):
        """Gets the encoding of this TsvOptionsReadOptions.


        :return: The encoding of this TsvOptionsReadOptions.
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this TsvOptionsReadOptions.


        :param encoding: The encoding of this TsvOptionsReadOptions.
        :type encoding: str
        """

        self._encoding = encoding

    @property
    def quote(self):
        """Gets the quote of this TsvOptionsReadOptions.


        :return: The quote of this TsvOptionsReadOptions.
        :rtype: str
        """
        return self._quote

    @quote.setter
    def quote(self, quote):
        """Sets the quote of this TsvOptionsReadOptions.


        :param quote: The quote of this TsvOptionsReadOptions.
        :type quote: str
        """

        self._quote = quote

    @property
    def quote_all(self):
        """Gets the quote_all of this TsvOptionsReadOptions.


        :return: The quote_all of this TsvOptionsReadOptions.
        :rtype: bool
        """
        return self._quote_all

    @quote_all.setter
    def quote_all(self, quote_all):
        """Sets the quote_all of this TsvOptionsReadOptions.


        :param quote_all: The quote_all of this TsvOptionsReadOptions.
        :type quote_all: bool
        """

        self._quote_all = quote_all

    @property
    def escape(self):
        """Gets the escape of this TsvOptionsReadOptions.


        :return: The escape of this TsvOptionsReadOptions.
        :rtype: str
        """
        return self._escape

    @escape.setter
    def escape(self, escape):
        """Sets the escape of this TsvOptionsReadOptions.


        :param escape: The escape of this TsvOptionsReadOptions.
        :type escape: str
        """

        self._escape = escape

    @property
    def escape_quotes(self):
        """Gets the escape_quotes of this TsvOptionsReadOptions.


        :return: The escape_quotes of this TsvOptionsReadOptions.
        :rtype: bool
        """
        return self._escape_quotes

    @escape_quotes.setter
    def escape_quotes(self, escape_quotes):
        """Sets the escape_quotes of this TsvOptionsReadOptions.


        :param escape_quotes: The escape_quotes of this TsvOptionsReadOptions.
        :type escape_quotes: bool
        """

        self._escape_quotes = escape_quotes

    @property
    def comment(self):
        """Gets the comment of this TsvOptionsReadOptions.


        :return: The comment of this TsvOptionsReadOptions.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this TsvOptionsReadOptions.


        :param comment: The comment of this TsvOptionsReadOptions.
        :type comment: str
        """

        self._comment = comment

    @property
    def header(self):
        """Gets the header of this TsvOptionsReadOptions.


        :return: The header of this TsvOptionsReadOptions.
        :rtype: bool
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this TsvOptionsReadOptions.


        :param header: The header of this TsvOptionsReadOptions.
        :type header: bool
        """

        self._header = header

    @property
    def line_sep(self):
        """Gets the line_sep of this TsvOptionsReadOptions.


        :return: The line_sep of this TsvOptionsReadOptions.
        :rtype: str
        """
        return self._line_sep

    @line_sep.setter
    def line_sep(self, line_sep):
        """Sets the line_sep of this TsvOptionsReadOptions.


        :param line_sep: The line_sep of this TsvOptionsReadOptions.
        :type line_sep: str
        """

        self._line_sep = line_sep
