# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.format_options import FormatOptions
from openapi_server.models.job_status import JobStatus
from openapi_server import util


class GetAnnotationImportResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, destination_name: str=None, role_arn: str=None, status: JobStatus=None, status_message: str=None, creation_time: datetime=None, update_time: datetime=None, completion_time: datetime=None, items: List=None, run_left_normalization: bool=None, format_options: FormatOptions=None, annotation_fields: Dict=None):
        """GetAnnotationImportResponse - a model defined in OpenAPI

        :param id: The id of this GetAnnotationImportResponse.
        :param destination_name: The destination_name of this GetAnnotationImportResponse.
        :param role_arn: The role_arn of this GetAnnotationImportResponse.
        :param status: The status of this GetAnnotationImportResponse.
        :param status_message: The status_message of this GetAnnotationImportResponse.
        :param creation_time: The creation_time of this GetAnnotationImportResponse.
        :param update_time: The update_time of this GetAnnotationImportResponse.
        :param completion_time: The completion_time of this GetAnnotationImportResponse.
        :param items: The items of this GetAnnotationImportResponse.
        :param run_left_normalization: The run_left_normalization of this GetAnnotationImportResponse.
        :param format_options: The format_options of this GetAnnotationImportResponse.
        :param annotation_fields: The annotation_fields of this GetAnnotationImportResponse.
        """
        self.openapi_types = {
            'id': str,
            'destination_name': str,
            'role_arn': str,
            'status': JobStatus,
            'status_message': str,
            'creation_time': datetime,
            'update_time': datetime,
            'completion_time': datetime,
            'items': List,
            'run_left_normalization': bool,
            'format_options': FormatOptions,
            'annotation_fields': Dict
        }

        self.attribute_map = {
            'id': 'id',
            'destination_name': 'destinationName',
            'role_arn': 'roleArn',
            'status': 'status',
            'status_message': 'statusMessage',
            'creation_time': 'creationTime',
            'update_time': 'updateTime',
            'completion_time': 'completionTime',
            'items': 'items',
            'run_left_normalization': 'runLeftNormalization',
            'format_options': 'formatOptions',
            'annotation_fields': 'annotationFields'
        }

        self._id = id
        self._destination_name = destination_name
        self._role_arn = role_arn
        self._status = status
        self._status_message = status_message
        self._creation_time = creation_time
        self._update_time = update_time
        self._completion_time = completion_time
        self._items = items
        self._run_left_normalization = run_left_normalization
        self._format_options = format_options
        self._annotation_fields = annotation_fields

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetAnnotationImportResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetAnnotationImportResponse of this GetAnnotationImportResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this GetAnnotationImportResponse.


        :return: The id of this GetAnnotationImportResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetAnnotationImportResponse.


        :param id: The id of this GetAnnotationImportResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def destination_name(self):
        """Gets the destination_name of this GetAnnotationImportResponse.


        :return: The destination_name of this GetAnnotationImportResponse.
        :rtype: str
        """
        return self._destination_name

    @destination_name.setter
    def destination_name(self, destination_name):
        """Sets the destination_name of this GetAnnotationImportResponse.


        :param destination_name: The destination_name of this GetAnnotationImportResponse.
        :type destination_name: str
        """
        if destination_name is None:
            raise ValueError("Invalid value for `destination_name`, must not be `None`")

        self._destination_name = destination_name

    @property
    def role_arn(self):
        """Gets the role_arn of this GetAnnotationImportResponse.


        :return: The role_arn of this GetAnnotationImportResponse.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this GetAnnotationImportResponse.


        :param role_arn: The role_arn of this GetAnnotationImportResponse.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def status(self):
        """Gets the status of this GetAnnotationImportResponse.


        :return: The status of this GetAnnotationImportResponse.
        :rtype: JobStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetAnnotationImportResponse.


        :param status: The status of this GetAnnotationImportResponse.
        :type status: JobStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this GetAnnotationImportResponse.


        :return: The status_message of this GetAnnotationImportResponse.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this GetAnnotationImportResponse.


        :param status_message: The status_message of this GetAnnotationImportResponse.
        :type status_message: str
        """
        if status_message is None:
            raise ValueError("Invalid value for `status_message`, must not be `None`")

        self._status_message = status_message

    @property
    def creation_time(self):
        """Gets the creation_time of this GetAnnotationImportResponse.


        :return: The creation_time of this GetAnnotationImportResponse.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this GetAnnotationImportResponse.


        :param creation_time: The creation_time of this GetAnnotationImportResponse.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def update_time(self):
        """Gets the update_time of this GetAnnotationImportResponse.


        :return: The update_time of this GetAnnotationImportResponse.
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GetAnnotationImportResponse.


        :param update_time: The update_time of this GetAnnotationImportResponse.
        :type update_time: datetime
        """
        if update_time is None:
            raise ValueError("Invalid value for `update_time`, must not be `None`")

        self._update_time = update_time

    @property
    def completion_time(self):
        """Gets the completion_time of this GetAnnotationImportResponse.


        :return: The completion_time of this GetAnnotationImportResponse.
        :rtype: datetime
        """
        return self._completion_time

    @completion_time.setter
    def completion_time(self, completion_time):
        """Sets the completion_time of this GetAnnotationImportResponse.


        :param completion_time: The completion_time of this GetAnnotationImportResponse.
        :type completion_time: datetime
        """
        if completion_time is None:
            raise ValueError("Invalid value for `completion_time`, must not be `None`")

        self._completion_time = completion_time

    @property
    def items(self):
        """Gets the items of this GetAnnotationImportResponse.


        :return: The items of this GetAnnotationImportResponse.
        :rtype: List
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this GetAnnotationImportResponse.


        :param items: The items of this GetAnnotationImportResponse.
        :type items: List
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def run_left_normalization(self):
        """Gets the run_left_normalization of this GetAnnotationImportResponse.


        :return: The run_left_normalization of this GetAnnotationImportResponse.
        :rtype: bool
        """
        return self._run_left_normalization

    @run_left_normalization.setter
    def run_left_normalization(self, run_left_normalization):
        """Sets the run_left_normalization of this GetAnnotationImportResponse.


        :param run_left_normalization: The run_left_normalization of this GetAnnotationImportResponse.
        :type run_left_normalization: bool
        """
        if run_left_normalization is None:
            raise ValueError("Invalid value for `run_left_normalization`, must not be `None`")

        self._run_left_normalization = run_left_normalization

    @property
    def format_options(self):
        """Gets the format_options of this GetAnnotationImportResponse.


        :return: The format_options of this GetAnnotationImportResponse.
        :rtype: FormatOptions
        """
        return self._format_options

    @format_options.setter
    def format_options(self, format_options):
        """Sets the format_options of this GetAnnotationImportResponse.


        :param format_options: The format_options of this GetAnnotationImportResponse.
        :type format_options: FormatOptions
        """
        if format_options is None:
            raise ValueError("Invalid value for `format_options`, must not be `None`")

        self._format_options = format_options

    @property
    def annotation_fields(self):
        """Gets the annotation_fields of this GetAnnotationImportResponse.


        :return: The annotation_fields of this GetAnnotationImportResponse.
        :rtype: Dict
        """
        return self._annotation_fields

    @annotation_fields.setter
    def annotation_fields(self, annotation_fields):
        """Sets the annotation_fields of this GetAnnotationImportResponse.


        :param annotation_fields: The annotation_fields of this GetAnnotationImportResponse.
        :type annotation_fields: Dict
        """

        self._annotation_fields = annotation_fields
