# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_variant_store_response_reference import CreateVariantStoreResponseReference
from openapi_server.models.get_annotation_store_response_sse_config import GetAnnotationStoreResponseSseConfig
from openapi_server.models.store_status import StoreStatus
from openapi_server import util


class GetVariantStoreResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, reference: CreateVariantStoreResponseReference=None, status: StoreStatus=None, store_arn: str=None, name: str=None, description: str=None, sse_config: GetAnnotationStoreResponseSseConfig=None, creation_time: datetime=None, update_time: datetime=None, tags: Dict=None, status_message: str=None, store_size_bytes: int=None):
        """GetVariantStoreResponse - a model defined in OpenAPI

        :param id: The id of this GetVariantStoreResponse.
        :param reference: The reference of this GetVariantStoreResponse.
        :param status: The status of this GetVariantStoreResponse.
        :param store_arn: The store_arn of this GetVariantStoreResponse.
        :param name: The name of this GetVariantStoreResponse.
        :param description: The description of this GetVariantStoreResponse.
        :param sse_config: The sse_config of this GetVariantStoreResponse.
        :param creation_time: The creation_time of this GetVariantStoreResponse.
        :param update_time: The update_time of this GetVariantStoreResponse.
        :param tags: The tags of this GetVariantStoreResponse.
        :param status_message: The status_message of this GetVariantStoreResponse.
        :param store_size_bytes: The store_size_bytes of this GetVariantStoreResponse.
        """
        self.openapi_types = {
            'id': str,
            'reference': CreateVariantStoreResponseReference,
            'status': StoreStatus,
            'store_arn': str,
            'name': str,
            'description': str,
            'sse_config': GetAnnotationStoreResponseSseConfig,
            'creation_time': datetime,
            'update_time': datetime,
            'tags': Dict,
            'status_message': str,
            'store_size_bytes': int
        }

        self.attribute_map = {
            'id': 'id',
            'reference': 'reference',
            'status': 'status',
            'store_arn': 'storeArn',
            'name': 'name',
            'description': 'description',
            'sse_config': 'sseConfig',
            'creation_time': 'creationTime',
            'update_time': 'updateTime',
            'tags': 'tags',
            'status_message': 'statusMessage',
            'store_size_bytes': 'storeSizeBytes'
        }

        self._id = id
        self._reference = reference
        self._status = status
        self._store_arn = store_arn
        self._name = name
        self._description = description
        self._sse_config = sse_config
        self._creation_time = creation_time
        self._update_time = update_time
        self._tags = tags
        self._status_message = status_message
        self._store_size_bytes = store_size_bytes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetVariantStoreResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetVariantStoreResponse of this GetVariantStoreResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this GetVariantStoreResponse.


        :return: The id of this GetVariantStoreResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetVariantStoreResponse.


        :param id: The id of this GetVariantStoreResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def reference(self):
        """Gets the reference of this GetVariantStoreResponse.


        :return: The reference of this GetVariantStoreResponse.
        :rtype: CreateVariantStoreResponseReference
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this GetVariantStoreResponse.


        :param reference: The reference of this GetVariantStoreResponse.
        :type reference: CreateVariantStoreResponseReference
        """
        if reference is None:
            raise ValueError("Invalid value for `reference`, must not be `None`")

        self._reference = reference

    @property
    def status(self):
        """Gets the status of this GetVariantStoreResponse.


        :return: The status of this GetVariantStoreResponse.
        :rtype: StoreStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetVariantStoreResponse.


        :param status: The status of this GetVariantStoreResponse.
        :type status: StoreStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def store_arn(self):
        """Gets the store_arn of this GetVariantStoreResponse.


        :return: The store_arn of this GetVariantStoreResponse.
        :rtype: str
        """
        return self._store_arn

    @store_arn.setter
    def store_arn(self, store_arn):
        """Sets the store_arn of this GetVariantStoreResponse.


        :param store_arn: The store_arn of this GetVariantStoreResponse.
        :type store_arn: str
        """
        if store_arn is None:
            raise ValueError("Invalid value for `store_arn`, must not be `None`")

        self._store_arn = store_arn

    @property
    def name(self):
        """Gets the name of this GetVariantStoreResponse.


        :return: The name of this GetVariantStoreResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetVariantStoreResponse.


        :param name: The name of this GetVariantStoreResponse.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this GetVariantStoreResponse.


        :return: The description of this GetVariantStoreResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetVariantStoreResponse.


        :param description: The description of this GetVariantStoreResponse.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def sse_config(self):
        """Gets the sse_config of this GetVariantStoreResponse.


        :return: The sse_config of this GetVariantStoreResponse.
        :rtype: GetAnnotationStoreResponseSseConfig
        """
        return self._sse_config

    @sse_config.setter
    def sse_config(self, sse_config):
        """Sets the sse_config of this GetVariantStoreResponse.


        :param sse_config: The sse_config of this GetVariantStoreResponse.
        :type sse_config: GetAnnotationStoreResponseSseConfig
        """
        if sse_config is None:
            raise ValueError("Invalid value for `sse_config`, must not be `None`")

        self._sse_config = sse_config

    @property
    def creation_time(self):
        """Gets the creation_time of this GetVariantStoreResponse.


        :return: The creation_time of this GetVariantStoreResponse.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this GetVariantStoreResponse.


        :param creation_time: The creation_time of this GetVariantStoreResponse.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def update_time(self):
        """Gets the update_time of this GetVariantStoreResponse.


        :return: The update_time of this GetVariantStoreResponse.
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GetVariantStoreResponse.


        :param update_time: The update_time of this GetVariantStoreResponse.
        :type update_time: datetime
        """
        if update_time is None:
            raise ValueError("Invalid value for `update_time`, must not be `None`")

        self._update_time = update_time

    @property
    def tags(self):
        """Gets the tags of this GetVariantStoreResponse.


        :return: The tags of this GetVariantStoreResponse.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this GetVariantStoreResponse.


        :param tags: The tags of this GetVariantStoreResponse.
        :type tags: Dict
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")

        self._tags = tags

    @property
    def status_message(self):
        """Gets the status_message of this GetVariantStoreResponse.


        :return: The status_message of this GetVariantStoreResponse.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this GetVariantStoreResponse.


        :param status_message: The status_message of this GetVariantStoreResponse.
        :type status_message: str
        """
        if status_message is None:
            raise ValueError("Invalid value for `status_message`, must not be `None`")

        self._status_message = status_message

    @property
    def store_size_bytes(self):
        """Gets the store_size_bytes of this GetVariantStoreResponse.


        :return: The store_size_bytes of this GetVariantStoreResponse.
        :rtype: int
        """
        return self._store_size_bytes

    @store_size_bytes.setter
    def store_size_bytes(self, store_size_bytes):
        """Sets the store_size_bytes of this GetVariantStoreResponse.


        :param store_size_bytes: The store_size_bytes of this GetVariantStoreResponse.
        :type store_size_bytes: int
        """
        if store_size_bytes is None:
            raise ValueError("Invalid value for `store_size_bytes`, must not be `None`")

        self._store_size_bytes = store_size_bytes
