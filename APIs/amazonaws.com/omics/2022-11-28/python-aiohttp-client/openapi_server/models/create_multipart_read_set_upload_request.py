# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateMultipartReadSetUploadRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, source_file_type: str=None, subject_id: str=None, sample_id: str=None, generated_from: str=None, reference_arn: str=None, name: str=None, description: str=None, tags: Dict[str, str]=None):
        """CreateMultipartReadSetUploadRequest - a model defined in OpenAPI

        :param client_token: The client_token of this CreateMultipartReadSetUploadRequest.
        :param source_file_type: The source_file_type of this CreateMultipartReadSetUploadRequest.
        :param subject_id: The subject_id of this CreateMultipartReadSetUploadRequest.
        :param sample_id: The sample_id of this CreateMultipartReadSetUploadRequest.
        :param generated_from: The generated_from of this CreateMultipartReadSetUploadRequest.
        :param reference_arn: The reference_arn of this CreateMultipartReadSetUploadRequest.
        :param name: The name of this CreateMultipartReadSetUploadRequest.
        :param description: The description of this CreateMultipartReadSetUploadRequest.
        :param tags: The tags of this CreateMultipartReadSetUploadRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'source_file_type': str,
            'subject_id': str,
            'sample_id': str,
            'generated_from': str,
            'reference_arn': str,
            'name': str,
            'description': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'client_token': 'clientToken',
            'source_file_type': 'sourceFileType',
            'subject_id': 'subjectId',
            'sample_id': 'sampleId',
            'generated_from': 'generatedFrom',
            'reference_arn': 'referenceArn',
            'name': 'name',
            'description': 'description',
            'tags': 'tags'
        }

        self._client_token = client_token
        self._source_file_type = source_file_type
        self._subject_id = subject_id
        self._sample_id = sample_id
        self._generated_from = generated_from
        self._reference_arn = reference_arn
        self._name = name
        self._description = description
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateMultipartReadSetUploadRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateMultipartReadSetUpload_request of this CreateMultipartReadSetUploadRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateMultipartReadSetUploadRequest.

         An idempotency token that can be used to avoid triggering multiple multipart uploads. 

        :return: The client_token of this CreateMultipartReadSetUploadRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateMultipartReadSetUploadRequest.

         An idempotency token that can be used to avoid triggering multiple multipart uploads. 

        :param client_token: The client_token of this CreateMultipartReadSetUploadRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 127:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `127`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+/`")

        self._client_token = client_token

    @property
    def source_file_type(self):
        """Gets the source_file_type of this CreateMultipartReadSetUploadRequest.

         The type of file being uploaded. 

        :return: The source_file_type of this CreateMultipartReadSetUploadRequest.
        :rtype: str
        """
        return self._source_file_type

    @source_file_type.setter
    def source_file_type(self, source_file_type):
        """Sets the source_file_type of this CreateMultipartReadSetUploadRequest.

         The type of file being uploaded. 

        :param source_file_type: The source_file_type of this CreateMultipartReadSetUploadRequest.
        :type source_file_type: str
        """
        allowed_values = ["FASTQ", "BAM", "CRAM"]  # noqa: E501
        if source_file_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_file_type` ({0}), must be one of {1}"
                .format(source_file_type, allowed_values)
            )

        self._source_file_type = source_file_type

    @property
    def subject_id(self):
        """Gets the subject_id of this CreateMultipartReadSetUploadRequest.

         The source's subject ID. 

        :return: The subject_id of this CreateMultipartReadSetUploadRequest.
        :rtype: str
        """
        return self._subject_id

    @subject_id.setter
    def subject_id(self, subject_id):
        """Sets the subject_id of this CreateMultipartReadSetUploadRequest.

         The source's subject ID. 

        :param subject_id: The subject_id of this CreateMultipartReadSetUploadRequest.
        :type subject_id: str
        """
        if subject_id is None:
            raise ValueError("Invalid value for `subject_id`, must not be `None`")
        if subject_id is not None and len(subject_id) > 127:
            raise ValueError("Invalid value for `subject_id`, length must be less than or equal to `127`")
        if subject_id is not None and len(subject_id) < 1:
            raise ValueError("Invalid value for `subject_id`, length must be greater than or equal to `1`")
        if subject_id is not None and not re.search(r'[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+', subject_id):
            raise ValueError("Invalid value for `subject_id`, must be a follow pattern or equal to `/[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+/`")

        self._subject_id = subject_id

    @property
    def sample_id(self):
        """Gets the sample_id of this CreateMultipartReadSetUploadRequest.

         The source's sample ID. 

        :return: The sample_id of this CreateMultipartReadSetUploadRequest.
        :rtype: str
        """
        return self._sample_id

    @sample_id.setter
    def sample_id(self, sample_id):
        """Sets the sample_id of this CreateMultipartReadSetUploadRequest.

         The source's sample ID. 

        :param sample_id: The sample_id of this CreateMultipartReadSetUploadRequest.
        :type sample_id: str
        """
        if sample_id is None:
            raise ValueError("Invalid value for `sample_id`, must not be `None`")
        if sample_id is not None and len(sample_id) > 127:
            raise ValueError("Invalid value for `sample_id`, length must be less than or equal to `127`")
        if sample_id is not None and len(sample_id) < 1:
            raise ValueError("Invalid value for `sample_id`, length must be greater than or equal to `1`")
        if sample_id is not None and not re.search(r'[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+', sample_id):
            raise ValueError("Invalid value for `sample_id`, must be a follow pattern or equal to `/[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+/`")

        self._sample_id = sample_id

    @property
    def generated_from(self):
        """Gets the generated_from of this CreateMultipartReadSetUploadRequest.

         Where the source originated. 

        :return: The generated_from of this CreateMultipartReadSetUploadRequest.
        :rtype: str
        """
        return self._generated_from

    @generated_from.setter
    def generated_from(self, generated_from):
        """Sets the generated_from of this CreateMultipartReadSetUploadRequest.

         Where the source originated. 

        :param generated_from: The generated_from of this CreateMultipartReadSetUploadRequest.
        :type generated_from: str
        """
        if generated_from is not None and len(generated_from) > 127:
            raise ValueError("Invalid value for `generated_from`, length must be less than or equal to `127`")
        if generated_from is not None and len(generated_from) < 1:
            raise ValueError("Invalid value for `generated_from`, length must be greater than or equal to `1`")
        if generated_from is not None and not re.search(r'[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+', generated_from):
            raise ValueError("Invalid value for `generated_from`, must be a follow pattern or equal to `/[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+/`")

        self._generated_from = generated_from

    @property
    def reference_arn(self):
        """Gets the reference_arn of this CreateMultipartReadSetUploadRequest.

         The ARN of the reference. 

        :return: The reference_arn of this CreateMultipartReadSetUploadRequest.
        :rtype: str
        """
        return self._reference_arn

    @reference_arn.setter
    def reference_arn(self, reference_arn):
        """Sets the reference_arn of this CreateMultipartReadSetUploadRequest.

         The ARN of the reference. 

        :param reference_arn: The reference_arn of this CreateMultipartReadSetUploadRequest.
        :type reference_arn: str
        """
        if reference_arn is None:
            raise ValueError("Invalid value for `reference_arn`, must not be `None`")
        if reference_arn is not None and len(reference_arn) > 127:
            raise ValueError("Invalid value for `reference_arn`, length must be less than or equal to `127`")
        if reference_arn is not None and len(reference_arn) < 1:
            raise ValueError("Invalid value for `reference_arn`, length must be greater than or equal to `1`")
        if reference_arn is not None and not re.search(r'arn:.+', reference_arn):
            raise ValueError("Invalid value for `reference_arn`, must be a follow pattern or equal to `/arn:.+/`")

        self._reference_arn = reference_arn

    @property
    def name(self):
        """Gets the name of this CreateMultipartReadSetUploadRequest.

         The name of the read set. 

        :return: The name of this CreateMultipartReadSetUploadRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateMultipartReadSetUploadRequest.

         The name of the read set. 

        :param name: The name of this CreateMultipartReadSetUploadRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 127:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `127`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+/`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateMultipartReadSetUploadRequest.

         The description of the read set. 

        :return: The description of this CreateMultipartReadSetUploadRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateMultipartReadSetUploadRequest.

         The description of the read set. 

        :param description: The description of this CreateMultipartReadSetUploadRequest.
        :type description: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")
        if description is not None and not re.search(r'[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+/`")

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this CreateMultipartReadSetUploadRequest.

         Any tags to add to the read set. 

        :return: The tags of this CreateMultipartReadSetUploadRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateMultipartReadSetUploadRequest.

         Any tags to add to the read set. 

        :param tags: The tags of this CreateMultipartReadSetUploadRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags
