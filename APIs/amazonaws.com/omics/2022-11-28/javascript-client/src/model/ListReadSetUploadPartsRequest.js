/**
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ListReadSetUploadPartsRequestFilter from './ListReadSetUploadPartsRequestFilter';

/**
 * The ListReadSetUploadPartsRequest model module.
 * @module model/ListReadSetUploadPartsRequest
 * @version 2022-11-28
 */
class ListReadSetUploadPartsRequest {
    /**
     * Constructs a new <code>ListReadSetUploadPartsRequest</code>.
     * @alias module:model/ListReadSetUploadPartsRequest
     * @param partSource {module:model/ListReadSetUploadPartsRequest.PartSourceEnum}  The source file for the upload part. 
     */
    constructor(partSource) { 
        
        ListReadSetUploadPartsRequest.initialize(this, partSource);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, partSource) { 
        obj['partSource'] = partSource;
    }

    /**
     * Constructs a <code>ListReadSetUploadPartsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListReadSetUploadPartsRequest} obj Optional instance to populate.
     * @return {module:model/ListReadSetUploadPartsRequest} The populated <code>ListReadSetUploadPartsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListReadSetUploadPartsRequest();

            if (data.hasOwnProperty('partSource')) {
                obj['partSource'] = ApiClient.convertToType(data['partSource'], 'String');
            }
            if (data.hasOwnProperty('filter')) {
                obj['filter'] = ListReadSetUploadPartsRequestFilter.constructFromObject(data['filter']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListReadSetUploadPartsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListReadSetUploadPartsRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ListReadSetUploadPartsRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['partSource'] && !(typeof data['partSource'] === 'string' || data['partSource'] instanceof String)) {
            throw new Error("Expected the field `partSource` to be a primitive type in the JSON string but got " + data['partSource']);
        }
        // validate the optional field `filter`
        if (data['filter']) { // data not null
          ListReadSetUploadPartsRequestFilter.validateJSON(data['filter']);
        }

        return true;
    }


}

ListReadSetUploadPartsRequest.RequiredProperties = ["partSource"];

/**
 *  The source file for the upload part. 
 * @member {module:model/ListReadSetUploadPartsRequest.PartSourceEnum} partSource
 */
ListReadSetUploadPartsRequest.prototype['partSource'] = undefined;

/**
 * @member {module:model/ListReadSetUploadPartsRequestFilter} filter
 */
ListReadSetUploadPartsRequest.prototype['filter'] = undefined;





/**
 * Allowed values for the <code>partSource</code> property.
 * @enum {String}
 * @readonly
 */
ListReadSetUploadPartsRequest['PartSourceEnum'] = {

    /**
     * value: "SOURCE1"
     * @const
     */
    "SOURCE1": "SOURCE1",

    /**
     * value: "SOURCE2"
     * @const
     */
    "SOURCE2": "SOURCE2"
};



export default ListReadSetUploadPartsRequest;

