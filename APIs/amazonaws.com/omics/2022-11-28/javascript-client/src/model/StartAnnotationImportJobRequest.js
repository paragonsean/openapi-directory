/**
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnnotationImportItemSource from './AnnotationImportItemSource';
import StartAnnotationImportJobRequestFormatOptions from './StartAnnotationImportJobRequestFormatOptions';

/**
 * The StartAnnotationImportJobRequest model module.
 * @module model/StartAnnotationImportJobRequest
 * @version 2022-11-28
 */
class StartAnnotationImportJobRequest {
    /**
     * Constructs a new <code>StartAnnotationImportJobRequest</code>.
     * @alias module:model/StartAnnotationImportJobRequest
     * @param destinationName {String} A destination annotation store for the job.
     * @param roleArn {String} A service role for the job.
     * @param items {Array.<module:model/AnnotationImportItemSource>} Items to import.
     */
    constructor(destinationName, roleArn, items) { 
        
        StartAnnotationImportJobRequest.initialize(this, destinationName, roleArn, items);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, destinationName, roleArn, items) { 
        obj['destinationName'] = destinationName;
        obj['roleArn'] = roleArn;
        obj['items'] = items;
    }

    /**
     * Constructs a <code>StartAnnotationImportJobRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StartAnnotationImportJobRequest} obj Optional instance to populate.
     * @return {module:model/StartAnnotationImportJobRequest} The populated <code>StartAnnotationImportJobRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StartAnnotationImportJobRequest();

            if (data.hasOwnProperty('destinationName')) {
                obj['destinationName'] = ApiClient.convertToType(data['destinationName'], 'String');
            }
            if (data.hasOwnProperty('roleArn')) {
                obj['roleArn'] = ApiClient.convertToType(data['roleArn'], 'String');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [AnnotationImportItemSource]);
            }
            if (data.hasOwnProperty('formatOptions')) {
                obj['formatOptions'] = StartAnnotationImportJobRequestFormatOptions.constructFromObject(data['formatOptions']);
            }
            if (data.hasOwnProperty('runLeftNormalization')) {
                obj['runLeftNormalization'] = ApiClient.convertToType(data['runLeftNormalization'], 'Boolean');
            }
            if (data.hasOwnProperty('annotationFields')) {
                obj['annotationFields'] = ApiClient.convertToType(data['annotationFields'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StartAnnotationImportJobRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StartAnnotationImportJobRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StartAnnotationImportJobRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['destinationName'] && !(typeof data['destinationName'] === 'string' || data['destinationName'] instanceof String)) {
            throw new Error("Expected the field `destinationName` to be a primitive type in the JSON string but got " + data['destinationName']);
        }
        // ensure the json data is a string
        if (data['roleArn'] && !(typeof data['roleArn'] === 'string' || data['roleArn'] instanceof String)) {
            throw new Error("Expected the field `roleArn` to be a primitive type in the JSON string but got " + data['roleArn']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                AnnotationImportItemSource.validateJSON(item);
            };
        }
        // validate the optional field `formatOptions`
        if (data['formatOptions']) { // data not null
          StartAnnotationImportJobRequestFormatOptions.validateJSON(data['formatOptions']);
        }

        return true;
    }


}

StartAnnotationImportJobRequest.RequiredProperties = ["destinationName", "roleArn", "items"];

/**
 * A destination annotation store for the job.
 * @member {String} destinationName
 */
StartAnnotationImportJobRequest.prototype['destinationName'] = undefined;

/**
 * A service role for the job.
 * @member {String} roleArn
 */
StartAnnotationImportJobRequest.prototype['roleArn'] = undefined;

/**
 * Items to import.
 * @member {Array.<module:model/AnnotationImportItemSource>} items
 */
StartAnnotationImportJobRequest.prototype['items'] = undefined;

/**
 * @member {module:model/StartAnnotationImportJobRequestFormatOptions} formatOptions
 */
StartAnnotationImportJobRequest.prototype['formatOptions'] = undefined;

/**
 * The job's left normalization setting.
 * @member {Boolean} runLeftNormalization
 */
StartAnnotationImportJobRequest.prototype['runLeftNormalization'] = undefined;

/**
 *  The annotation schema generated by the parsed annotation data. 
 * @member {Object.<String, String>} annotationFields
 */
StartAnnotationImportJobRequest.prototype['annotationFields'] = undefined;






export default StartAnnotationImportJobRequest;

