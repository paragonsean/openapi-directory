/**
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JobStatus from './JobStatus';

/**
 * The AnnotationImportJobItem model module.
 * @module model/AnnotationImportJobItem
 * @version 2022-11-28
 */
class AnnotationImportJobItem {
    /**
     * Constructs a new <code>AnnotationImportJobItem</code>.
     * An annotation import job.
     * @alias module:model/AnnotationImportJobItem
     * @param id {String} 
     * @param destinationName {String} 
     * @param roleArn {String} 
     * @param status {module:model/JobStatus} 
     * @param creationTime {Date} 
     * @param updateTime {Date} 
     */
    constructor(id, destinationName, roleArn, status, creationTime, updateTime) { 
        
        AnnotationImportJobItem.initialize(this, id, destinationName, roleArn, status, creationTime, updateTime);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, destinationName, roleArn, status, creationTime, updateTime) { 
        obj['id'] = id;
        obj['destinationName'] = destinationName;
        obj['roleArn'] = roleArn;
        obj['status'] = status;
        obj['creationTime'] = creationTime;
        obj['updateTime'] = updateTime;
    }

    /**
     * Constructs a <code>AnnotationImportJobItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AnnotationImportJobItem} obj Optional instance to populate.
     * @return {module:model/AnnotationImportJobItem} The populated <code>AnnotationImportJobItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AnnotationImportJobItem();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('destinationName')) {
                obj['destinationName'] = ApiClient.convertToType(data['destinationName'], 'String');
            }
            if (data.hasOwnProperty('roleArn')) {
                obj['roleArn'] = ApiClient.convertToType(data['roleArn'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], JobStatus);
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'Date');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'Date');
            }
            if (data.hasOwnProperty('completionTime')) {
                obj['completionTime'] = ApiClient.convertToType(data['completionTime'], 'Date');
            }
            if (data.hasOwnProperty('runLeftNormalization')) {
                obj['runLeftNormalization'] = ApiClient.convertToType(data['runLeftNormalization'], 'Boolean');
            }
            if (data.hasOwnProperty('annotationFields')) {
                obj['annotationFields'] = ApiClient.convertToType(data['annotationFields'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AnnotationImportJobItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AnnotationImportJobItem</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AnnotationImportJobItem.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `id`
        if (data['id']) { // data not null
          String.validateJSON(data['id']);
        }
        // validate the optional field `destinationName`
        if (data['destinationName']) { // data not null
          String.validateJSON(data['destinationName']);
        }
        // validate the optional field `roleArn`
        if (data['roleArn']) { // data not null
          String.validateJSON(data['roleArn']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          JobStatus.validateJSON(data['status']);
        }
        // validate the optional field `creationTime`
        if (data['creationTime']) { // data not null
          Date.validateJSON(data['creationTime']);
        }
        // validate the optional field `updateTime`
        if (data['updateTime']) { // data not null
          Date.validateJSON(data['updateTime']);
        }
        // validate the optional field `completionTime`
        if (data['completionTime']) { // data not null
          Date.validateJSON(data['completionTime']);
        }
        // validate the optional field `runLeftNormalization`
        if (data['runLeftNormalization']) { // data not null
          Boolean.validateJSON(data['runLeftNormalization']);
        }
        // validate the optional field `annotationFields`
        if (data['annotationFields']) { // data not null
          Object.validateJSON(data['annotationFields']);
        }

        return true;
    }


}

AnnotationImportJobItem.RequiredProperties = ["id", "destinationName", "roleArn", "status", "creationTime", "updateTime"];

/**
 * @member {String} id
 */
AnnotationImportJobItem.prototype['id'] = undefined;

/**
 * @member {String} destinationName
 */
AnnotationImportJobItem.prototype['destinationName'] = undefined;

/**
 * @member {String} roleArn
 */
AnnotationImportJobItem.prototype['roleArn'] = undefined;

/**
 * @member {module:model/JobStatus} status
 */
AnnotationImportJobItem.prototype['status'] = undefined;

/**
 * @member {Date} creationTime
 */
AnnotationImportJobItem.prototype['creationTime'] = undefined;

/**
 * @member {Date} updateTime
 */
AnnotationImportJobItem.prototype['updateTime'] = undefined;

/**
 * @member {Date} completionTime
 */
AnnotationImportJobItem.prototype['completionTime'] = undefined;

/**
 * @member {Boolean} runLeftNormalization
 */
AnnotationImportJobItem.prototype['runLeftNormalization'] = undefined;

/**
 * @member {Object} annotationFields
 */
AnnotationImportJobItem.prototype['annotationFields'] = undefined;






export default AnnotationImportJobItem;

