/**
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Accelerators from './Accelerators';
import WorkflowEngine from './WorkflowEngine';
import WorkflowStatus from './WorkflowStatus';
import WorkflowType from './WorkflowType';

/**
 * The GetWorkflowResponse model module.
 * @module model/GetWorkflowResponse
 * @version 2022-11-28
 */
class GetWorkflowResponse {
    /**
     * Constructs a new <code>GetWorkflowResponse</code>.
     * @alias module:model/GetWorkflowResponse
     */
    constructor() { 
        
        GetWorkflowResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetWorkflowResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetWorkflowResponse} obj Optional instance to populate.
     * @return {module:model/GetWorkflowResponse} The populated <code>GetWorkflowResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetWorkflowResponse();

            if (data.hasOwnProperty('arn')) {
                obj['arn'] = ApiClient.convertToType(data['arn'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], WorkflowStatus);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], WorkflowType);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('engine')) {
                obj['engine'] = ApiClient.convertToType(data['engine'], WorkflowEngine);
            }
            if (data.hasOwnProperty('definition')) {
                obj['definition'] = ApiClient.convertToType(data['definition'], 'String');
            }
            if (data.hasOwnProperty('main')) {
                obj['main'] = ApiClient.convertToType(data['main'], 'String');
            }
            if (data.hasOwnProperty('digest')) {
                obj['digest'] = ApiClient.convertToType(data['digest'], 'String');
            }
            if (data.hasOwnProperty('parameterTemplate')) {
                obj['parameterTemplate'] = ApiClient.convertToType(data['parameterTemplate'], Object);
            }
            if (data.hasOwnProperty('storageCapacity')) {
                obj['storageCapacity'] = ApiClient.convertToType(data['storageCapacity'], 'Number');
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'Date');
            }
            if (data.hasOwnProperty('statusMessage')) {
                obj['statusMessage'] = ApiClient.convertToType(data['statusMessage'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], Object);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('accelerators')) {
                obj['accelerators'] = ApiClient.convertToType(data['accelerators'], Accelerators);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetWorkflowResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetWorkflowResponse</code>.
     */
    static validateJSON(data) {
        // validate the optional field `arn`
        if (data['arn']) { // data not null
          String.validateJSON(data['arn']);
        }
        // validate the optional field `id`
        if (data['id']) { // data not null
          String.validateJSON(data['id']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          WorkflowStatus.validateJSON(data['status']);
        }
        // validate the optional field `type`
        if (data['type']) { // data not null
          WorkflowType.validateJSON(data['type']);
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          String.validateJSON(data['name']);
        }
        // validate the optional field `description`
        if (data['description']) { // data not null
          String.validateJSON(data['description']);
        }
        // validate the optional field `engine`
        if (data['engine']) { // data not null
          WorkflowEngine.validateJSON(data['engine']);
        }
        // validate the optional field `definition`
        if (data['definition']) { // data not null
          String.validateJSON(data['definition']);
        }
        // validate the optional field `main`
        if (data['main']) { // data not null
          String.validateJSON(data['main']);
        }
        // validate the optional field `digest`
        if (data['digest']) { // data not null
          String.validateJSON(data['digest']);
        }
        // validate the optional field `parameterTemplate`
        if (data['parameterTemplate']) { // data not null
          Object.validateJSON(data['parameterTemplate']);
        }
        // validate the optional field `storageCapacity`
        if (data['storageCapacity']) { // data not null
          Number.validateJSON(data['storageCapacity']);
        }
        // validate the optional field `creationTime`
        if (data['creationTime']) { // data not null
          Date.validateJSON(data['creationTime']);
        }
        // validate the optional field `statusMessage`
        if (data['statusMessage']) { // data not null
          String.validateJSON(data['statusMessage']);
        }
        // validate the optional field `tags`
        if (data['tags']) { // data not null
          Object.validateJSON(data['tags']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          Object.validateJSON(data['metadata']);
        }
        // validate the optional field `accelerators`
        if (data['accelerators']) { // data not null
          Accelerators.validateJSON(data['accelerators']);
        }

        return true;
    }


}



/**
 * @member {String} arn
 */
GetWorkflowResponse.prototype['arn'] = undefined;

/**
 * @member {String} id
 */
GetWorkflowResponse.prototype['id'] = undefined;

/**
 * @member {module:model/WorkflowStatus} status
 */
GetWorkflowResponse.prototype['status'] = undefined;

/**
 * @member {module:model/WorkflowType} type
 */
GetWorkflowResponse.prototype['type'] = undefined;

/**
 * @member {String} name
 */
GetWorkflowResponse.prototype['name'] = undefined;

/**
 * @member {String} description
 */
GetWorkflowResponse.prototype['description'] = undefined;

/**
 * @member {module:model/WorkflowEngine} engine
 */
GetWorkflowResponse.prototype['engine'] = undefined;

/**
 * @member {String} definition
 */
GetWorkflowResponse.prototype['definition'] = undefined;

/**
 * @member {String} main
 */
GetWorkflowResponse.prototype['main'] = undefined;

/**
 * @member {String} digest
 */
GetWorkflowResponse.prototype['digest'] = undefined;

/**
 * @member {Object} parameterTemplate
 */
GetWorkflowResponse.prototype['parameterTemplate'] = undefined;

/**
 * @member {Number} storageCapacity
 */
GetWorkflowResponse.prototype['storageCapacity'] = undefined;

/**
 * @member {Date} creationTime
 */
GetWorkflowResponse.prototype['creationTime'] = undefined;

/**
 * @member {String} statusMessage
 */
GetWorkflowResponse.prototype['statusMessage'] = undefined;

/**
 * @member {Object} tags
 */
GetWorkflowResponse.prototype['tags'] = undefined;

/**
 * @member {Object} metadata
 */
GetWorkflowResponse.prototype['metadata'] = undefined;

/**
 * @member {module:model/Accelerators} accelerators
 */
GetWorkflowResponse.prototype['accelerators'] = undefined;






export default GetWorkflowResponse;

