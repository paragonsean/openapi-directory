/**
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateMultipartReadSetUploadRequest model module.
 * @module model/CreateMultipartReadSetUploadRequest
 * @version 2022-11-28
 */
class CreateMultipartReadSetUploadRequest {
    /**
     * Constructs a new <code>CreateMultipartReadSetUploadRequest</code>.
     * @alias module:model/CreateMultipartReadSetUploadRequest
     * @param sourceFileType {module:model/CreateMultipartReadSetUploadRequest.SourceFileTypeEnum}  The type of file being uploaded. 
     * @param subjectId {String}  The source's subject ID. 
     * @param sampleId {String}  The source's sample ID. 
     * @param referenceArn {String}  The ARN of the reference. 
     * @param name {String}  The name of the read set. 
     */
    constructor(sourceFileType, subjectId, sampleId, referenceArn, name) { 
        
        CreateMultipartReadSetUploadRequest.initialize(this, sourceFileType, subjectId, sampleId, referenceArn, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sourceFileType, subjectId, sampleId, referenceArn, name) { 
        obj['sourceFileType'] = sourceFileType;
        obj['subjectId'] = subjectId;
        obj['sampleId'] = sampleId;
        obj['referenceArn'] = referenceArn;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>CreateMultipartReadSetUploadRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateMultipartReadSetUploadRequest} obj Optional instance to populate.
     * @return {module:model/CreateMultipartReadSetUploadRequest} The populated <code>CreateMultipartReadSetUploadRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateMultipartReadSetUploadRequest();

            if (data.hasOwnProperty('clientToken')) {
                obj['clientToken'] = ApiClient.convertToType(data['clientToken'], 'String');
            }
            if (data.hasOwnProperty('sourceFileType')) {
                obj['sourceFileType'] = ApiClient.convertToType(data['sourceFileType'], 'String');
            }
            if (data.hasOwnProperty('subjectId')) {
                obj['subjectId'] = ApiClient.convertToType(data['subjectId'], 'String');
            }
            if (data.hasOwnProperty('sampleId')) {
                obj['sampleId'] = ApiClient.convertToType(data['sampleId'], 'String');
            }
            if (data.hasOwnProperty('generatedFrom')) {
                obj['generatedFrom'] = ApiClient.convertToType(data['generatedFrom'], 'String');
            }
            if (data.hasOwnProperty('referenceArn')) {
                obj['referenceArn'] = ApiClient.convertToType(data['referenceArn'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateMultipartReadSetUploadRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateMultipartReadSetUploadRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateMultipartReadSetUploadRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['clientToken'] && !(typeof data['clientToken'] === 'string' || data['clientToken'] instanceof String)) {
            throw new Error("Expected the field `clientToken` to be a primitive type in the JSON string but got " + data['clientToken']);
        }
        // ensure the json data is a string
        if (data['sourceFileType'] && !(typeof data['sourceFileType'] === 'string' || data['sourceFileType'] instanceof String)) {
            throw new Error("Expected the field `sourceFileType` to be a primitive type in the JSON string but got " + data['sourceFileType']);
        }
        // ensure the json data is a string
        if (data['subjectId'] && !(typeof data['subjectId'] === 'string' || data['subjectId'] instanceof String)) {
            throw new Error("Expected the field `subjectId` to be a primitive type in the JSON string but got " + data['subjectId']);
        }
        // ensure the json data is a string
        if (data['sampleId'] && !(typeof data['sampleId'] === 'string' || data['sampleId'] instanceof String)) {
            throw new Error("Expected the field `sampleId` to be a primitive type in the JSON string but got " + data['sampleId']);
        }
        // ensure the json data is a string
        if (data['generatedFrom'] && !(typeof data['generatedFrom'] === 'string' || data['generatedFrom'] instanceof String)) {
            throw new Error("Expected the field `generatedFrom` to be a primitive type in the JSON string but got " + data['generatedFrom']);
        }
        // ensure the json data is a string
        if (data['referenceArn'] && !(typeof data['referenceArn'] === 'string' || data['referenceArn'] instanceof String)) {
            throw new Error("Expected the field `referenceArn` to be a primitive type in the JSON string but got " + data['referenceArn']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }

        return true;
    }


}

CreateMultipartReadSetUploadRequest.RequiredProperties = ["sourceFileType", "subjectId", "sampleId", "referenceArn", "name"];

/**
 *  An idempotency token that can be used to avoid triggering multiple multipart uploads. 
 * @member {String} clientToken
 */
CreateMultipartReadSetUploadRequest.prototype['clientToken'] = undefined;

/**
 *  The type of file being uploaded. 
 * @member {module:model/CreateMultipartReadSetUploadRequest.SourceFileTypeEnum} sourceFileType
 */
CreateMultipartReadSetUploadRequest.prototype['sourceFileType'] = undefined;

/**
 *  The source's subject ID. 
 * @member {String} subjectId
 */
CreateMultipartReadSetUploadRequest.prototype['subjectId'] = undefined;

/**
 *  The source's sample ID. 
 * @member {String} sampleId
 */
CreateMultipartReadSetUploadRequest.prototype['sampleId'] = undefined;

/**
 *  Where the source originated. 
 * @member {String} generatedFrom
 */
CreateMultipartReadSetUploadRequest.prototype['generatedFrom'] = undefined;

/**
 *  The ARN of the reference. 
 * @member {String} referenceArn
 */
CreateMultipartReadSetUploadRequest.prototype['referenceArn'] = undefined;

/**
 *  The name of the read set. 
 * @member {String} name
 */
CreateMultipartReadSetUploadRequest.prototype['name'] = undefined;

/**
 *  The description of the read set. 
 * @member {String} description
 */
CreateMultipartReadSetUploadRequest.prototype['description'] = undefined;

/**
 *  Any tags to add to the read set. 
 * @member {Object.<String, String>} tags
 */
CreateMultipartReadSetUploadRequest.prototype['tags'] = undefined;





/**
 * Allowed values for the <code>sourceFileType</code> property.
 * @enum {String}
 * @readonly
 */
CreateMultipartReadSetUploadRequest['SourceFileTypeEnum'] = {

    /**
     * value: "FASTQ"
     * @const
     */
    "FASTQ": "FASTQ",

    /**
     * value: "BAM"
     * @const
     */
    "BAM": "BAM",

    /**
     * value: "CRAM"
     * @const
     */
    "CRAM": "CRAM"
};



export default CreateMultipartReadSetUploadRequest;

