/**
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateVariantStoreResponseReference from './CreateVariantStoreResponseReference';
import StoreFormat from './StoreFormat';
import StoreStatus from './StoreStatus';
import UpdateAnnotationStoreResponseStoreOptions from './UpdateAnnotationStoreResponseStoreOptions';

/**
 * The UpdateAnnotationStoreResponse model module.
 * @module model/UpdateAnnotationStoreResponse
 * @version 2022-11-28
 */
class UpdateAnnotationStoreResponse {
    /**
     * Constructs a new <code>UpdateAnnotationStoreResponse</code>.
     * @alias module:model/UpdateAnnotationStoreResponse
     * @param id {String} 
     * @param reference {module:model/CreateVariantStoreResponseReference} 
     * @param status {module:model/StoreStatus} 
     * @param name {String} 
     * @param description {String} 
     * @param creationTime {Date} 
     * @param updateTime {Date} 
     */
    constructor(id, reference, status, name, description, creationTime, updateTime) { 
        
        UpdateAnnotationStoreResponse.initialize(this, id, reference, status, name, description, creationTime, updateTime);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, reference, status, name, description, creationTime, updateTime) { 
        obj['id'] = id;
        obj['reference'] = reference;
        obj['status'] = status;
        obj['name'] = name;
        obj['description'] = description;
        obj['creationTime'] = creationTime;
        obj['updateTime'] = updateTime;
    }

    /**
     * Constructs a <code>UpdateAnnotationStoreResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateAnnotationStoreResponse} obj Optional instance to populate.
     * @return {module:model/UpdateAnnotationStoreResponse} The populated <code>UpdateAnnotationStoreResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateAnnotationStoreResponse();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = CreateVariantStoreResponseReference.constructFromObject(data['reference']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], StoreStatus);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'Date');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'Date');
            }
            if (data.hasOwnProperty('storeOptions')) {
                obj['storeOptions'] = UpdateAnnotationStoreResponseStoreOptions.constructFromObject(data['storeOptions']);
            }
            if (data.hasOwnProperty('storeFormat')) {
                obj['storeFormat'] = ApiClient.convertToType(data['storeFormat'], StoreFormat);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateAnnotationStoreResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateAnnotationStoreResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateAnnotationStoreResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `id`
        if (data['id']) { // data not null
          String.validateJSON(data['id']);
        }
        // validate the optional field `reference`
        if (data['reference']) { // data not null
          CreateVariantStoreResponseReference.validateJSON(data['reference']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          StoreStatus.validateJSON(data['status']);
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          String.validateJSON(data['name']);
        }
        // validate the optional field `description`
        if (data['description']) { // data not null
          String.validateJSON(data['description']);
        }
        // validate the optional field `creationTime`
        if (data['creationTime']) { // data not null
          Date.validateJSON(data['creationTime']);
        }
        // validate the optional field `updateTime`
        if (data['updateTime']) { // data not null
          Date.validateJSON(data['updateTime']);
        }
        // validate the optional field `storeOptions`
        if (data['storeOptions']) { // data not null
          UpdateAnnotationStoreResponseStoreOptions.validateJSON(data['storeOptions']);
        }
        // validate the optional field `storeFormat`
        if (data['storeFormat']) { // data not null
          StoreFormat.validateJSON(data['storeFormat']);
        }

        return true;
    }


}

UpdateAnnotationStoreResponse.RequiredProperties = ["id", "reference", "status", "name", "description", "creationTime", "updateTime"];

/**
 * @member {String} id
 */
UpdateAnnotationStoreResponse.prototype['id'] = undefined;

/**
 * @member {module:model/CreateVariantStoreResponseReference} reference
 */
UpdateAnnotationStoreResponse.prototype['reference'] = undefined;

/**
 * @member {module:model/StoreStatus} status
 */
UpdateAnnotationStoreResponse.prototype['status'] = undefined;

/**
 * @member {String} name
 */
UpdateAnnotationStoreResponse.prototype['name'] = undefined;

/**
 * @member {String} description
 */
UpdateAnnotationStoreResponse.prototype['description'] = undefined;

/**
 * @member {Date} creationTime
 */
UpdateAnnotationStoreResponse.prototype['creationTime'] = undefined;

/**
 * @member {Date} updateTime
 */
UpdateAnnotationStoreResponse.prototype['updateTime'] = undefined;

/**
 * @member {module:model/UpdateAnnotationStoreResponseStoreOptions} storeOptions
 */
UpdateAnnotationStoreResponse.prototype['storeOptions'] = undefined;

/**
 * @member {module:model/StoreFormat} storeFormat
 */
UpdateAnnotationStoreResponse.prototype['storeFormat'] = undefined;






export default UpdateAnnotationStoreResponse;

