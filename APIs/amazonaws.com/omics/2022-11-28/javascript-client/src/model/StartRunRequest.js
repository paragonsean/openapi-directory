/**
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StartRunRequest model module.
 * @module model/StartRunRequest
 * @version 2022-11-28
 */
class StartRunRequest {
    /**
     * Constructs a new <code>StartRunRequest</code>.
     * @alias module:model/StartRunRequest
     * @param roleArn {String} A service role for the run.
     * @param requestId {String} To ensure that requests don't run multiple times, specify a unique ID for each request.
     */
    constructor(roleArn, requestId) { 
        
        StartRunRequest.initialize(this, roleArn, requestId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, roleArn, requestId) { 
        obj['roleArn'] = roleArn;
        obj['requestId'] = requestId;
    }

    /**
     * Constructs a <code>StartRunRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StartRunRequest} obj Optional instance to populate.
     * @return {module:model/StartRunRequest} The populated <code>StartRunRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StartRunRequest();

            if (data.hasOwnProperty('workflowId')) {
                obj['workflowId'] = ApiClient.convertToType(data['workflowId'], 'String');
            }
            if (data.hasOwnProperty('workflowType')) {
                obj['workflowType'] = ApiClient.convertToType(data['workflowType'], 'String');
            }
            if (data.hasOwnProperty('runId')) {
                obj['runId'] = ApiClient.convertToType(data['runId'], 'String');
            }
            if (data.hasOwnProperty('roleArn')) {
                obj['roleArn'] = ApiClient.convertToType(data['roleArn'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('runGroupId')) {
                obj['runGroupId'] = ApiClient.convertToType(data['runGroupId'], 'String');
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'Number');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], Object);
            }
            if (data.hasOwnProperty('storageCapacity')) {
                obj['storageCapacity'] = ApiClient.convertToType(data['storageCapacity'], 'Number');
            }
            if (data.hasOwnProperty('outputUri')) {
                obj['outputUri'] = ApiClient.convertToType(data['outputUri'], 'String');
            }
            if (data.hasOwnProperty('logLevel')) {
                obj['logLevel'] = ApiClient.convertToType(data['logLevel'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StartRunRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StartRunRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StartRunRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['workflowId'] && !(typeof data['workflowId'] === 'string' || data['workflowId'] instanceof String)) {
            throw new Error("Expected the field `workflowId` to be a primitive type in the JSON string but got " + data['workflowId']);
        }
        // ensure the json data is a string
        if (data['workflowType'] && !(typeof data['workflowType'] === 'string' || data['workflowType'] instanceof String)) {
            throw new Error("Expected the field `workflowType` to be a primitive type in the JSON string but got " + data['workflowType']);
        }
        // ensure the json data is a string
        if (data['runId'] && !(typeof data['runId'] === 'string' || data['runId'] instanceof String)) {
            throw new Error("Expected the field `runId` to be a primitive type in the JSON string but got " + data['runId']);
        }
        // ensure the json data is a string
        if (data['roleArn'] && !(typeof data['roleArn'] === 'string' || data['roleArn'] instanceof String)) {
            throw new Error("Expected the field `roleArn` to be a primitive type in the JSON string but got " + data['roleArn']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['runGroupId'] && !(typeof data['runGroupId'] === 'string' || data['runGroupId'] instanceof String)) {
            throw new Error("Expected the field `runGroupId` to be a primitive type in the JSON string but got " + data['runGroupId']);
        }
        // ensure the json data is a string
        if (data['outputUri'] && !(typeof data['outputUri'] === 'string' || data['outputUri'] instanceof String)) {
            throw new Error("Expected the field `outputUri` to be a primitive type in the JSON string but got " + data['outputUri']);
        }
        // ensure the json data is a string
        if (data['logLevel'] && !(typeof data['logLevel'] === 'string' || data['logLevel'] instanceof String)) {
            throw new Error("Expected the field `logLevel` to be a primitive type in the JSON string but got " + data['logLevel']);
        }
        // ensure the json data is a string
        if (data['requestId'] && !(typeof data['requestId'] === 'string' || data['requestId'] instanceof String)) {
            throw new Error("Expected the field `requestId` to be a primitive type in the JSON string but got " + data['requestId']);
        }

        return true;
    }


}

StartRunRequest.RequiredProperties = ["roleArn", "requestId"];

/**
 * The run's workflow ID.
 * @member {String} workflowId
 */
StartRunRequest.prototype['workflowId'] = undefined;

/**
 * The run's workflows type.
 * @member {module:model/StartRunRequest.WorkflowTypeEnum} workflowType
 */
StartRunRequest.prototype['workflowType'] = undefined;

/**
 * The run's ID.
 * @member {String} runId
 */
StartRunRequest.prototype['runId'] = undefined;

/**
 * A service role for the run.
 * @member {String} roleArn
 */
StartRunRequest.prototype['roleArn'] = undefined;

/**
 * A name for the run.
 * @member {String} name
 */
StartRunRequest.prototype['name'] = undefined;

/**
 * The run's group ID.
 * @member {String} runGroupId
 */
StartRunRequest.prototype['runGroupId'] = undefined;

/**
 * A priority for the run.
 * @member {Number} priority
 */
StartRunRequest.prototype['priority'] = undefined;

/**
 * Parameters for the run.
 * @member {Object} parameters
 */
StartRunRequest.prototype['parameters'] = undefined;

/**
 * A storage capacity for the run in gigabytes.
 * @member {Number} storageCapacity
 */
StartRunRequest.prototype['storageCapacity'] = undefined;

/**
 * An output URI for the run.
 * @member {String} outputUri
 */
StartRunRequest.prototype['outputUri'] = undefined;

/**
 * A log level for the run.
 * @member {module:model/StartRunRequest.LogLevelEnum} logLevel
 */
StartRunRequest.prototype['logLevel'] = undefined;

/**
 * Tags for the run.
 * @member {Object.<String, String>} tags
 */
StartRunRequest.prototype['tags'] = undefined;

/**
 * To ensure that requests don't run multiple times, specify a unique ID for each request.
 * @member {String} requestId
 */
StartRunRequest.prototype['requestId'] = undefined;





/**
 * Allowed values for the <code>workflowType</code> property.
 * @enum {String}
 * @readonly
 */
StartRunRequest['WorkflowTypeEnum'] = {

    /**
     * value: "PRIVATE"
     * @const
     */
    "PRIVATE": "PRIVATE",

    /**
     * value: "READY2RUN"
     * @const
     */
    "READY2RUN": "READY2RUN"
};


/**
 * Allowed values for the <code>logLevel</code> property.
 * @enum {String}
 * @readonly
 */
StartRunRequest['LogLevelEnum'] = {

    /**
     * value: "OFF"
     * @const
     */
    "OFF": "OFF",

    /**
     * value: "FATAL"
     * @const
     */
    "FATAL": "FATAL",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR",

    /**
     * value: "ALL"
     * @const
     */
    "ALL": "ALL"
};



export default StartRunRequest;

