/**
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchDeleteReadSetRequest from '../model/BatchDeleteReadSetRequest';
import BatchDeleteReadSetResponse from '../model/BatchDeleteReadSetResponse';
import CompleteMultipartReadSetUploadRequest from '../model/CompleteMultipartReadSetUploadRequest';
import CompleteMultipartReadSetUploadResponse from '../model/CompleteMultipartReadSetUploadResponse';
import CreateAnnotationStoreRequest from '../model/CreateAnnotationStoreRequest';
import CreateAnnotationStoreResponse from '../model/CreateAnnotationStoreResponse';
import CreateMultipartReadSetUploadRequest from '../model/CreateMultipartReadSetUploadRequest';
import CreateMultipartReadSetUploadResponse from '../model/CreateMultipartReadSetUploadResponse';
import CreateReferenceStoreRequest from '../model/CreateReferenceStoreRequest';
import CreateReferenceStoreResponse from '../model/CreateReferenceStoreResponse';
import CreateRunGroupRequest from '../model/CreateRunGroupRequest';
import CreateRunGroupResponse from '../model/CreateRunGroupResponse';
import CreateSequenceStoreRequest from '../model/CreateSequenceStoreRequest';
import CreateSequenceStoreResponse from '../model/CreateSequenceStoreResponse';
import CreateVariantStoreRequest from '../model/CreateVariantStoreRequest';
import CreateVariantStoreResponse from '../model/CreateVariantStoreResponse';
import CreateWorkflowRequest from '../model/CreateWorkflowRequest';
import CreateWorkflowResponse from '../model/CreateWorkflowResponse';
import DeleteAnnotationStoreResponse from '../model/DeleteAnnotationStoreResponse';
import DeleteVariantStoreResponse from '../model/DeleteVariantStoreResponse';
import GetAnnotationImportResponse from '../model/GetAnnotationImportResponse';
import GetAnnotationStoreResponse from '../model/GetAnnotationStoreResponse';
import GetReadSetActivationJobResponse from '../model/GetReadSetActivationJobResponse';
import GetReadSetExportJobResponse from '../model/GetReadSetExportJobResponse';
import GetReadSetImportJobResponse from '../model/GetReadSetImportJobResponse';
import GetReadSetMetadataResponse from '../model/GetReadSetMetadataResponse';
import GetReadSetResponse from '../model/GetReadSetResponse';
import GetReferenceImportJobResponse from '../model/GetReferenceImportJobResponse';
import GetReferenceMetadataResponse from '../model/GetReferenceMetadataResponse';
import GetReferenceResponse from '../model/GetReferenceResponse';
import GetReferenceStoreResponse from '../model/GetReferenceStoreResponse';
import GetRunGroupResponse from '../model/GetRunGroupResponse';
import GetRunResponse from '../model/GetRunResponse';
import GetRunTaskResponse from '../model/GetRunTaskResponse';
import GetSequenceStoreResponse from '../model/GetSequenceStoreResponse';
import GetVariantImportResponse from '../model/GetVariantImportResponse';
import GetVariantStoreResponse from '../model/GetVariantStoreResponse';
import GetWorkflowResponse from '../model/GetWorkflowResponse';
import ListAnnotationImportJobsRequest from '../model/ListAnnotationImportJobsRequest';
import ListAnnotationImportJobsResponse from '../model/ListAnnotationImportJobsResponse';
import ListAnnotationStoresRequest from '../model/ListAnnotationStoresRequest';
import ListAnnotationStoresResponse from '../model/ListAnnotationStoresResponse';
import ListMultipartReadSetUploadsResponse from '../model/ListMultipartReadSetUploadsResponse';
import ListReadSetActivationJobsRequest from '../model/ListReadSetActivationJobsRequest';
import ListReadSetActivationJobsResponse from '../model/ListReadSetActivationJobsResponse';
import ListReadSetExportJobsRequest from '../model/ListReadSetExportJobsRequest';
import ListReadSetExportJobsResponse from '../model/ListReadSetExportJobsResponse';
import ListReadSetImportJobsRequest from '../model/ListReadSetImportJobsRequest';
import ListReadSetImportJobsResponse from '../model/ListReadSetImportJobsResponse';
import ListReadSetUploadPartsRequest from '../model/ListReadSetUploadPartsRequest';
import ListReadSetUploadPartsResponse from '../model/ListReadSetUploadPartsResponse';
import ListReadSetsRequest from '../model/ListReadSetsRequest';
import ListReadSetsResponse from '../model/ListReadSetsResponse';
import ListReferenceImportJobsRequest from '../model/ListReferenceImportJobsRequest';
import ListReferenceImportJobsResponse from '../model/ListReferenceImportJobsResponse';
import ListReferenceStoresRequest from '../model/ListReferenceStoresRequest';
import ListReferenceStoresResponse from '../model/ListReferenceStoresResponse';
import ListReferencesRequest from '../model/ListReferencesRequest';
import ListReferencesResponse from '../model/ListReferencesResponse';
import ListRunGroupsResponse from '../model/ListRunGroupsResponse';
import ListRunTasksResponse from '../model/ListRunTasksResponse';
import ListRunsResponse from '../model/ListRunsResponse';
import ListSequenceStoresRequest from '../model/ListSequenceStoresRequest';
import ListSequenceStoresResponse from '../model/ListSequenceStoresResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import ListVariantImportJobsRequest from '../model/ListVariantImportJobsRequest';
import ListVariantImportJobsResponse from '../model/ListVariantImportJobsResponse';
import ListVariantStoresRequest from '../model/ListVariantStoresRequest';
import ListVariantStoresResponse from '../model/ListVariantStoresResponse';
import ListWorkflowsResponse from '../model/ListWorkflowsResponse';
import RunExport from '../model/RunExport';
import StartAnnotationImportJobRequest from '../model/StartAnnotationImportJobRequest';
import StartAnnotationImportResponse from '../model/StartAnnotationImportResponse';
import StartReadSetActivationJobRequest from '../model/StartReadSetActivationJobRequest';
import StartReadSetActivationJobResponse from '../model/StartReadSetActivationJobResponse';
import StartReadSetExportJobRequest from '../model/StartReadSetExportJobRequest';
import StartReadSetExportJobResponse from '../model/StartReadSetExportJobResponse';
import StartReadSetImportJobRequest from '../model/StartReadSetImportJobRequest';
import StartReadSetImportJobResponse from '../model/StartReadSetImportJobResponse';
import StartReferenceImportJobRequest from '../model/StartReferenceImportJobRequest';
import StartReferenceImportJobResponse from '../model/StartReferenceImportJobResponse';
import StartRunRequest from '../model/StartRunRequest';
import StartRunResponse from '../model/StartRunResponse';
import StartVariantImportJobRequest from '../model/StartVariantImportJobRequest';
import StartVariantImportResponse from '../model/StartVariantImportResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UpdateAnnotationStoreRequest from '../model/UpdateAnnotationStoreRequest';
import UpdateAnnotationStoreResponse from '../model/UpdateAnnotationStoreResponse';
import UpdateRunGroupRequest from '../model/UpdateRunGroupRequest';
import UpdateVariantStoreResponse from '../model/UpdateVariantStoreResponse';
import UpdateWorkflowRequest from '../model/UpdateWorkflowRequest';
import UploadReadSetPartRequest from '../model/UploadReadSetPartRequest';
import UploadReadSetPartResponse from '../model/UploadReadSetPartResponse';
import WorkflowExport from '../model/WorkflowExport';

/**
* Default service.
* @module api/DefaultApi
* @version 2022-11-28
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the abortMultipartReadSetUpload operation.
     * @callback module:api/DefaultApi~abortMultipartReadSetUploadCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Stops a multipart upload. 
     * @param {String} sequenceStoreId  The sequence store ID for the store involved in the multipart upload. 
     * @param {String} uploadId  The ID for the multipart upload. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~abortMultipartReadSetUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    abortMultipartReadSetUpload(sequenceStoreId, uploadId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sequenceStoreId' is set
      if (sequenceStoreId === undefined || sequenceStoreId === null) {
        throw new Error("Missing the required parameter 'sequenceStoreId' when calling abortMultipartReadSetUpload");
      }
      // verify the required parameter 'uploadId' is set
      if (uploadId === undefined || uploadId === null) {
        throw new Error("Missing the required parameter 'uploadId' when calling abortMultipartReadSetUpload");
      }

      let pathParams = {
        'sequenceStoreId': sequenceStoreId,
        'uploadId': uploadId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/sequencestore/{sequenceStoreId}/upload/{uploadId}/abort', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchDeleteReadSet operation.
     * @callback module:api/DefaultApi~batchDeleteReadSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDeleteReadSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes one or more read sets.
     * @param {String} sequenceStoreId The read sets' sequence store ID.
     * @param {module:model/BatchDeleteReadSetRequest} batchDeleteReadSetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchDeleteReadSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchDeleteReadSetResponse}
     */
    batchDeleteReadSet(sequenceStoreId, batchDeleteReadSetRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchDeleteReadSetRequest;
      // verify the required parameter 'sequenceStoreId' is set
      if (sequenceStoreId === undefined || sequenceStoreId === null) {
        throw new Error("Missing the required parameter 'sequenceStoreId' when calling batchDeleteReadSet");
      }
      // verify the required parameter 'batchDeleteReadSetRequest' is set
      if (batchDeleteReadSetRequest === undefined || batchDeleteReadSetRequest === null) {
        throw new Error("Missing the required parameter 'batchDeleteReadSetRequest' when calling batchDeleteReadSet");
      }

      let pathParams = {
        'sequenceStoreId': sequenceStoreId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchDeleteReadSetResponse;
      return this.apiClient.callApi(
        '/sequencestore/{sequenceStoreId}/readset/batch/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelAnnotationImportJob operation.
     * @callback module:api/DefaultApi~cancelAnnotationImportJobCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels an annotation import job.
     * @param {String} jobId The job's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~cancelAnnotationImportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    cancelAnnotationImportJob(jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling cancelAnnotationImportJob");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/import/annotation/{jobId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelRun operation.
     * @callback module:api/DefaultApi~cancelRunCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a run.
     * @param {String} id The run's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~cancelRunCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelRun(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cancelRun");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/run/{id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelVariantImportJob operation.
     * @callback module:api/DefaultApi~cancelVariantImportJobCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a variant import job.
     * @param {String} jobId The job's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~cancelVariantImportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    cancelVariantImportJob(jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling cancelVariantImportJob");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/import/variant/{jobId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the completeMultipartReadSetUpload operation.
     * @callback module:api/DefaultApi~completeMultipartReadSetUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompleteMultipartReadSetUploadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Concludes a multipart upload once you have uploaded all the components. 
     * @param {String} sequenceStoreId  The sequence store ID for the store involved in the multipart upload. 
     * @param {String} uploadId  The ID for the multipart upload. 
     * @param {module:model/CompleteMultipartReadSetUploadRequest} completeMultipartReadSetUploadRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~completeMultipartReadSetUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompleteMultipartReadSetUploadResponse}
     */
    completeMultipartReadSetUpload(sequenceStoreId, uploadId, completeMultipartReadSetUploadRequest, opts, callback) {
      opts = opts || {};
      let postBody = completeMultipartReadSetUploadRequest;
      // verify the required parameter 'sequenceStoreId' is set
      if (sequenceStoreId === undefined || sequenceStoreId === null) {
        throw new Error("Missing the required parameter 'sequenceStoreId' when calling completeMultipartReadSetUpload");
      }
      // verify the required parameter 'uploadId' is set
      if (uploadId === undefined || uploadId === null) {
        throw new Error("Missing the required parameter 'uploadId' when calling completeMultipartReadSetUpload");
      }
      // verify the required parameter 'completeMultipartReadSetUploadRequest' is set
      if (completeMultipartReadSetUploadRequest === undefined || completeMultipartReadSetUploadRequest === null) {
        throw new Error("Missing the required parameter 'completeMultipartReadSetUploadRequest' when calling completeMultipartReadSetUpload");
      }

      let pathParams = {
        'sequenceStoreId': sequenceStoreId,
        'uploadId': uploadId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CompleteMultipartReadSetUploadResponse;
      return this.apiClient.callApi(
        '/sequencestore/{sequenceStoreId}/upload/{uploadId}/complete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAnnotationStore operation.
     * @callback module:api/DefaultApi~createAnnotationStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAnnotationStoreResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an annotation store.
     * @param {module:model/CreateAnnotationStoreRequest} createAnnotationStoreRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAnnotationStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAnnotationStoreResponse}
     */
    createAnnotationStore(createAnnotationStoreRequest, opts, callback) {
      opts = opts || {};
      let postBody = createAnnotationStoreRequest;
      // verify the required parameter 'createAnnotationStoreRequest' is set
      if (createAnnotationStoreRequest === undefined || createAnnotationStoreRequest === null) {
        throw new Error("Missing the required parameter 'createAnnotationStoreRequest' when calling createAnnotationStore");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAnnotationStoreResponse;
      return this.apiClient.callApi(
        '/annotationStore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createMultipartReadSetUpload operation.
     * @callback module:api/DefaultApi~createMultipartReadSetUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateMultipartReadSetUploadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Begins a multipart read set upload. 
     * @param {String} sequenceStoreId  The sequence store ID for the store that is the destination of the multipart uploads. 
     * @param {module:model/CreateMultipartReadSetUploadRequest} createMultipartReadSetUploadRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createMultipartReadSetUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateMultipartReadSetUploadResponse}
     */
    createMultipartReadSetUpload(sequenceStoreId, createMultipartReadSetUploadRequest, opts, callback) {
      opts = opts || {};
      let postBody = createMultipartReadSetUploadRequest;
      // verify the required parameter 'sequenceStoreId' is set
      if (sequenceStoreId === undefined || sequenceStoreId === null) {
        throw new Error("Missing the required parameter 'sequenceStoreId' when calling createMultipartReadSetUpload");
      }
      // verify the required parameter 'createMultipartReadSetUploadRequest' is set
      if (createMultipartReadSetUploadRequest === undefined || createMultipartReadSetUploadRequest === null) {
        throw new Error("Missing the required parameter 'createMultipartReadSetUploadRequest' when calling createMultipartReadSetUpload");
      }

      let pathParams = {
        'sequenceStoreId': sequenceStoreId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateMultipartReadSetUploadResponse;
      return this.apiClient.callApi(
        '/sequencestore/{sequenceStoreId}/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createReferenceStore operation.
     * @callback module:api/DefaultApi~createReferenceStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateReferenceStoreResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a reference store.
     * @param {module:model/CreateReferenceStoreRequest} createReferenceStoreRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createReferenceStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateReferenceStoreResponse}
     */
    createReferenceStore(createReferenceStoreRequest, opts, callback) {
      opts = opts || {};
      let postBody = createReferenceStoreRequest;
      // verify the required parameter 'createReferenceStoreRequest' is set
      if (createReferenceStoreRequest === undefined || createReferenceStoreRequest === null) {
        throw new Error("Missing the required parameter 'createReferenceStoreRequest' when calling createReferenceStore");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateReferenceStoreResponse;
      return this.apiClient.callApi(
        '/referencestore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRunGroup operation.
     * @callback module:api/DefaultApi~createRunGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateRunGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a run group.
     * @param {module:model/CreateRunGroupRequest} createRunGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createRunGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateRunGroupResponse}
     */
    createRunGroup(createRunGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = createRunGroupRequest;
      // verify the required parameter 'createRunGroupRequest' is set
      if (createRunGroupRequest === undefined || createRunGroupRequest === null) {
        throw new Error("Missing the required parameter 'createRunGroupRequest' when calling createRunGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRunGroupResponse;
      return this.apiClient.callApi(
        '/runGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSequenceStore operation.
     * @callback module:api/DefaultApi~createSequenceStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSequenceStoreResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a sequence store.
     * @param {module:model/CreateSequenceStoreRequest} createSequenceStoreRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createSequenceStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSequenceStoreResponse}
     */
    createSequenceStore(createSequenceStoreRequest, opts, callback) {
      opts = opts || {};
      let postBody = createSequenceStoreRequest;
      // verify the required parameter 'createSequenceStoreRequest' is set
      if (createSequenceStoreRequest === undefined || createSequenceStoreRequest === null) {
        throw new Error("Missing the required parameter 'createSequenceStoreRequest' when calling createSequenceStore");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSequenceStoreResponse;
      return this.apiClient.callApi(
        '/sequencestore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createVariantStore operation.
     * @callback module:api/DefaultApi~createVariantStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateVariantStoreResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a variant store.
     * @param {module:model/CreateVariantStoreRequest} createVariantStoreRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createVariantStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateVariantStoreResponse}
     */
    createVariantStore(createVariantStoreRequest, opts, callback) {
      opts = opts || {};
      let postBody = createVariantStoreRequest;
      // verify the required parameter 'createVariantStoreRequest' is set
      if (createVariantStoreRequest === undefined || createVariantStoreRequest === null) {
        throw new Error("Missing the required parameter 'createVariantStoreRequest' when calling createVariantStore");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateVariantStoreResponse;
      return this.apiClient.callApi(
        '/variantStore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createWorkflow operation.
     * @callback module:api/DefaultApi~createWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateWorkflowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a workflow.
     * @param {module:model/CreateWorkflowRequest} createWorkflowRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateWorkflowResponse}
     */
    createWorkflow(createWorkflowRequest, opts, callback) {
      opts = opts || {};
      let postBody = createWorkflowRequest;
      // verify the required parameter 'createWorkflowRequest' is set
      if (createWorkflowRequest === undefined || createWorkflowRequest === null) {
        throw new Error("Missing the required parameter 'createWorkflowRequest' when calling createWorkflow");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateWorkflowResponse;
      return this.apiClient.callApi(
        '/workflow', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAnnotationStore operation.
     * @callback module:api/DefaultApi~deleteAnnotationStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteAnnotationStoreResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an annotation store.
     * @param {String} name The store's name.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [force] Whether to force deletion.
     * @param {module:api/DefaultApi~deleteAnnotationStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteAnnotationStoreResponse}
     */
    deleteAnnotationStore(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteAnnotationStore");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteAnnotationStoreResponse;
      return this.apiClient.callApi(
        '/annotationStore/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReference operation.
     * @callback module:api/DefaultApi~deleteReferenceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a genome reference.
     * @param {String} id The reference's ID.
     * @param {String} referenceStoreId The reference's store ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteReferenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteReference(id, referenceStoreId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteReference");
      }
      // verify the required parameter 'referenceStoreId' is set
      if (referenceStoreId === undefined || referenceStoreId === null) {
        throw new Error("Missing the required parameter 'referenceStoreId' when calling deleteReference");
      }

      let pathParams = {
        'id': id,
        'referenceStoreId': referenceStoreId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/referencestore/{referenceStoreId}/reference/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReferenceStore operation.
     * @callback module:api/DefaultApi~deleteReferenceStoreCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a genome reference store.
     * @param {String} id The store's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteReferenceStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteReferenceStore(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteReferenceStore");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/referencestore/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRun operation.
     * @callback module:api/DefaultApi~deleteRunCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a workflow run.
     * @param {String} id The run's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteRunCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRun(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRun");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/run/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRunGroup operation.
     * @callback module:api/DefaultApi~deleteRunGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a workflow run group.
     * @param {String} id The run group's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteRunGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRunGroup(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRunGroup");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/runGroup/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSequenceStore operation.
     * @callback module:api/DefaultApi~deleteSequenceStoreCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a sequence store.
     * @param {String} id The sequence store's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteSequenceStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteSequenceStore(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSequenceStore");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/sequencestore/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVariantStore operation.
     * @callback module:api/DefaultApi~deleteVariantStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteVariantStoreResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a variant store.
     * @param {String} name The store's name.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [force] Whether to force deletion.
     * @param {module:api/DefaultApi~deleteVariantStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteVariantStoreResponse}
     */
    deleteVariantStore(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteVariantStore");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteVariantStoreResponse;
      return this.apiClient.callApi(
        '/variantStore/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWorkflow operation.
     * @callback module:api/DefaultApi~deleteWorkflowCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a workflow.
     * @param {String} id The workflow's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteWorkflow(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteWorkflow");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/workflow/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnnotationImportJob operation.
     * @callback module:api/DefaultApi~getAnnotationImportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAnnotationImportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about an annotation import job.
     * @param {String} jobId The job's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAnnotationImportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAnnotationImportResponse}
     */
    getAnnotationImportJob(jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getAnnotationImportJob");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAnnotationImportResponse;
      return this.apiClient.callApi(
        '/import/annotation/{jobId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnnotationStore operation.
     * @callback module:api/DefaultApi~getAnnotationStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAnnotationStoreResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about an annotation store.
     * @param {String} name The store's name.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAnnotationStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAnnotationStoreResponse}
     */
    getAnnotationStore(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getAnnotationStore");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAnnotationStoreResponse;
      return this.apiClient.callApi(
        '/annotationStore/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReadSet operation.
     * @callback module:api/DefaultApi~getReadSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetReadSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a file from a read set.
     * @param {String} id The read set's ID.
     * @param {String} sequenceStoreId The read set's sequence store ID.
     * @param {Number} partNumber The part number to retrieve.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [file] The file to retrieve.
     * @param {module:api/DefaultApi~getReadSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetReadSetResponse}
     */
    getReadSet(id, sequenceStoreId, partNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getReadSet");
      }
      // verify the required parameter 'sequenceStoreId' is set
      if (sequenceStoreId === undefined || sequenceStoreId === null) {
        throw new Error("Missing the required parameter 'sequenceStoreId' when calling getReadSet");
      }
      // verify the required parameter 'partNumber' is set
      if (partNumber === undefined || partNumber === null) {
        throw new Error("Missing the required parameter 'partNumber' when calling getReadSet");
      }

      let pathParams = {
        'id': id,
        'sequenceStoreId': sequenceStoreId
      };
      let queryParams = {
        'file': opts['file'],
        'partNumber': partNumber
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetReadSetResponse;
      return this.apiClient.callApi(
        '/sequencestore/{sequenceStoreId}/readset/{id}#partNumber', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReadSetActivationJob operation.
     * @callback module:api/DefaultApi~getReadSetActivationJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetReadSetActivationJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a read set activation job.
     * @param {String} id The job's ID.
     * @param {String} sequenceStoreId The job's sequence store ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getReadSetActivationJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetReadSetActivationJobResponse}
     */
    getReadSetActivationJob(id, sequenceStoreId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getReadSetActivationJob");
      }
      // verify the required parameter 'sequenceStoreId' is set
      if (sequenceStoreId === undefined || sequenceStoreId === null) {
        throw new Error("Missing the required parameter 'sequenceStoreId' when calling getReadSetActivationJob");
      }

      let pathParams = {
        'id': id,
        'sequenceStoreId': sequenceStoreId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetReadSetActivationJobResponse;
      return this.apiClient.callApi(
        '/sequencestore/{sequenceStoreId}/activationjob/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReadSetExportJob operation.
     * @callback module:api/DefaultApi~getReadSetExportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetReadSetExportJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a read set export job.
     * @param {String} sequenceStoreId The job's sequence store ID.
     * @param {String} id The job's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getReadSetExportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetReadSetExportJobResponse}
     */
    getReadSetExportJob(sequenceStoreId, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sequenceStoreId' is set
      if (sequenceStoreId === undefined || sequenceStoreId === null) {
        throw new Error("Missing the required parameter 'sequenceStoreId' when calling getReadSetExportJob");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getReadSetExportJob");
      }

      let pathParams = {
        'sequenceStoreId': sequenceStoreId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetReadSetExportJobResponse;
      return this.apiClient.callApi(
        '/sequencestore/{sequenceStoreId}/exportjob/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReadSetImportJob operation.
     * @callback module:api/DefaultApi~getReadSetImportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetReadSetImportJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a read set import job.
     * @param {String} id The job's ID.
     * @param {String} sequenceStoreId The job's sequence store ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getReadSetImportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetReadSetImportJobResponse}
     */
    getReadSetImportJob(id, sequenceStoreId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getReadSetImportJob");
      }
      // verify the required parameter 'sequenceStoreId' is set
      if (sequenceStoreId === undefined || sequenceStoreId === null) {
        throw new Error("Missing the required parameter 'sequenceStoreId' when calling getReadSetImportJob");
      }

      let pathParams = {
        'id': id,
        'sequenceStoreId': sequenceStoreId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetReadSetImportJobResponse;
      return this.apiClient.callApi(
        '/sequencestore/{sequenceStoreId}/importjob/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReadSetMetadata operation.
     * @callback module:api/DefaultApi~getReadSetMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetReadSetMetadataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets details about a read set.
     * @param {String} id The read set's ID.
     * @param {String} sequenceStoreId The read set's sequence store ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getReadSetMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetReadSetMetadataResponse}
     */
    getReadSetMetadata(id, sequenceStoreId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getReadSetMetadata");
      }
      // verify the required parameter 'sequenceStoreId' is set
      if (sequenceStoreId === undefined || sequenceStoreId === null) {
        throw new Error("Missing the required parameter 'sequenceStoreId' when calling getReadSetMetadata");
      }

      let pathParams = {
        'id': id,
        'sequenceStoreId': sequenceStoreId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetReadSetMetadataResponse;
      return this.apiClient.callApi(
        '/sequencestore/{sequenceStoreId}/readset/{id}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReference operation.
     * @callback module:api/DefaultApi~getReferenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetReferenceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a reference file.
     * @param {String} id The reference's ID.
     * @param {String} referenceStoreId The reference's store ID.
     * @param {Number} partNumber The part number to retrieve.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [range] The range to retrieve.
     * @param {module:model/String} [file] The file to retrieve.
     * @param {module:api/DefaultApi~getReferenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetReferenceResponse}
     */
    getReference(id, referenceStoreId, partNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getReference");
      }
      // verify the required parameter 'referenceStoreId' is set
      if (referenceStoreId === undefined || referenceStoreId === null) {
        throw new Error("Missing the required parameter 'referenceStoreId' when calling getReference");
      }
      // verify the required parameter 'partNumber' is set
      if (partNumber === undefined || partNumber === null) {
        throw new Error("Missing the required parameter 'partNumber' when calling getReference");
      }

      let pathParams = {
        'id': id,
        'referenceStoreId': referenceStoreId
      };
      let queryParams = {
        'partNumber': partNumber,
        'file': opts['file']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'Range': opts['range']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetReferenceResponse;
      return this.apiClient.callApi(
        '/referencestore/{referenceStoreId}/reference/{id}#partNumber', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReferenceImportJob operation.
     * @callback module:api/DefaultApi~getReferenceImportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetReferenceImportJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a reference import job.
     * @param {String} id The job's ID.
     * @param {String} referenceStoreId The job's reference store ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getReferenceImportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetReferenceImportJobResponse}
     */
    getReferenceImportJob(id, referenceStoreId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getReferenceImportJob");
      }
      // verify the required parameter 'referenceStoreId' is set
      if (referenceStoreId === undefined || referenceStoreId === null) {
        throw new Error("Missing the required parameter 'referenceStoreId' when calling getReferenceImportJob");
      }

      let pathParams = {
        'id': id,
        'referenceStoreId': referenceStoreId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetReferenceImportJobResponse;
      return this.apiClient.callApi(
        '/referencestore/{referenceStoreId}/importjob/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReferenceMetadata operation.
     * @callback module:api/DefaultApi~getReferenceMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetReferenceMetadataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a genome reference's metadata.
     * @param {String} id The reference's ID.
     * @param {String} referenceStoreId The reference's reference store ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getReferenceMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetReferenceMetadataResponse}
     */
    getReferenceMetadata(id, referenceStoreId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getReferenceMetadata");
      }
      // verify the required parameter 'referenceStoreId' is set
      if (referenceStoreId === undefined || referenceStoreId === null) {
        throw new Error("Missing the required parameter 'referenceStoreId' when calling getReferenceMetadata");
      }

      let pathParams = {
        'id': id,
        'referenceStoreId': referenceStoreId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetReferenceMetadataResponse;
      return this.apiClient.callApi(
        '/referencestore/{referenceStoreId}/reference/{id}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReferenceStore operation.
     * @callback module:api/DefaultApi~getReferenceStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetReferenceStoreResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a reference store.
     * @param {String} id The store's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getReferenceStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetReferenceStoreResponse}
     */
    getReferenceStore(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getReferenceStore");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetReferenceStoreResponse;
      return this.apiClient.callApi(
        '/referencestore/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRun operation.
     * @callback module:api/DefaultApi~getRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRunResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a workflow run.
     * @param {String} id The run's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<module:model/RunExport>} [_export] The run's export format.
     * @param {module:api/DefaultApi~getRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRunResponse}
     */
    getRun(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRun");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'export': this.apiClient.buildCollectionParam(opts['_export'], 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRunResponse;
      return this.apiClient.callApi(
        '/run/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRunGroup operation.
     * @callback module:api/DefaultApi~getRunGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRunGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a workflow run group.
     * @param {String} id The group's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getRunGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRunGroupResponse}
     */
    getRunGroup(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRunGroup");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRunGroupResponse;
      return this.apiClient.callApi(
        '/runGroup/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRunTask operation.
     * @callback module:api/DefaultApi~getRunTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRunTaskResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a workflow run task.
     * @param {String} id The task's ID.
     * @param {String} taskId The task's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getRunTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRunTaskResponse}
     */
    getRunTask(id, taskId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRunTask");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling getRunTask");
      }

      let pathParams = {
        'id': id,
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRunTaskResponse;
      return this.apiClient.callApi(
        '/run/{id}/task/{taskId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSequenceStore operation.
     * @callback module:api/DefaultApi~getSequenceStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSequenceStoreResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a sequence store.
     * @param {String} id The store's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSequenceStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSequenceStoreResponse}
     */
    getSequenceStore(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSequenceStore");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSequenceStoreResponse;
      return this.apiClient.callApi(
        '/sequencestore/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariantImportJob operation.
     * @callback module:api/DefaultApi~getVariantImportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetVariantImportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a variant import job.
     * @param {String} jobId The job's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getVariantImportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetVariantImportResponse}
     */
    getVariantImportJob(jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getVariantImportJob");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetVariantImportResponse;
      return this.apiClient.callApi(
        '/import/variant/{jobId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariantStore operation.
     * @callback module:api/DefaultApi~getVariantStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetVariantStoreResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a variant store.
     * @param {String} name The store's name.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getVariantStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetVariantStoreResponse}
     */
    getVariantStore(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getVariantStore");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetVariantStoreResponse;
      return this.apiClient.callApi(
        '/variantStore/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkflow operation.
     * @callback module:api/DefaultApi~getWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetWorkflowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a workflow.
     * @param {String} id The workflow's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [type] The workflow's type.
     * @param {Array.<module:model/WorkflowExport>} [_export] The export format for the workflow.
     * @param {module:api/DefaultApi~getWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetWorkflowResponse}
     */
    getWorkflow(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWorkflow");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'type': opts['type'],
        'export': this.apiClient.buildCollectionParam(opts['_export'], 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetWorkflowResponse;
      return this.apiClient.callApi(
        '/workflow/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAnnotationImportJobs operation.
     * @callback module:api/DefaultApi~listAnnotationImportJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAnnotationImportJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of annotation import jobs.
     * @param {module:model/ListAnnotationImportJobsRequest} listAnnotationImportJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of jobs to return in one page of results.
     * @param {String} [nextToken] Specify the pagination token from a previous request to retrieve the next page of results.
     * @param {module:api/DefaultApi~listAnnotationImportJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAnnotationImportJobsResponse}
     */
    listAnnotationImportJobs(listAnnotationImportJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listAnnotationImportJobsRequest;
      // verify the required parameter 'listAnnotationImportJobsRequest' is set
      if (listAnnotationImportJobsRequest === undefined || listAnnotationImportJobsRequest === null) {
        throw new Error("Missing the required parameter 'listAnnotationImportJobsRequest' when calling listAnnotationImportJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAnnotationImportJobsResponse;
      return this.apiClient.callApi(
        '/import/annotations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAnnotationStores operation.
     * @callback module:api/DefaultApi~listAnnotationStoresCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAnnotationStoresResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of annotation stores.
     * @param {module:model/ListAnnotationStoresRequest} listAnnotationStoresRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of stores to return in one page of results.
     * @param {String} [nextToken] Specify the pagination token from a previous request to retrieve the next page of results.
     * @param {module:api/DefaultApi~listAnnotationStoresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAnnotationStoresResponse}
     */
    listAnnotationStores(listAnnotationStoresRequest, opts, callback) {
      opts = opts || {};
      let postBody = listAnnotationStoresRequest;
      // verify the required parameter 'listAnnotationStoresRequest' is set
      if (listAnnotationStoresRequest === undefined || listAnnotationStoresRequest === null) {
        throw new Error("Missing the required parameter 'listAnnotationStoresRequest' when calling listAnnotationStores");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAnnotationStoresResponse;
      return this.apiClient.callApi(
        '/annotationStores', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMultipartReadSetUploads operation.
     * @callback module:api/DefaultApi~listMultipartReadSetUploadsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMultipartReadSetUploadsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Lists all multipart read set uploads and their statuses. 
     * @param {String} sequenceStoreId  The Sequence Store ID used for the multipart uploads. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults]  The maximum number of multipart uploads returned in a page. 
     * @param {String} [nextToken]  Next token returned in the response of a previous ListMultipartReadSetUploads call. Used to get the next page of results. 
     * @param {module:api/DefaultApi~listMultipartReadSetUploadsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMultipartReadSetUploadsResponse}
     */
    listMultipartReadSetUploads(sequenceStoreId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sequenceStoreId' is set
      if (sequenceStoreId === undefined || sequenceStoreId === null) {
        throw new Error("Missing the required parameter 'sequenceStoreId' when calling listMultipartReadSetUploads");
      }

      let pathParams = {
        'sequenceStoreId': sequenceStoreId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListMultipartReadSetUploadsResponse;
      return this.apiClient.callApi(
        '/sequencestore/{sequenceStoreId}/uploads', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listReadSetActivationJobs operation.
     * @callback module:api/DefaultApi~listReadSetActivationJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListReadSetActivationJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of read set activation jobs.
     * @param {String} sequenceStoreId The read set's sequence store ID.
     * @param {module:model/ListReadSetActivationJobsRequest} listReadSetActivationJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of read set activation jobs to return in one page of results.
     * @param {String} [nextToken] Specify the pagination token from a previous request to retrieve the next page of results.
     * @param {module:api/DefaultApi~listReadSetActivationJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListReadSetActivationJobsResponse}
     */
    listReadSetActivationJobs(sequenceStoreId, listReadSetActivationJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listReadSetActivationJobsRequest;
      // verify the required parameter 'sequenceStoreId' is set
      if (sequenceStoreId === undefined || sequenceStoreId === null) {
        throw new Error("Missing the required parameter 'sequenceStoreId' when calling listReadSetActivationJobs");
      }
      // verify the required parameter 'listReadSetActivationJobsRequest' is set
      if (listReadSetActivationJobsRequest === undefined || listReadSetActivationJobsRequest === null) {
        throw new Error("Missing the required parameter 'listReadSetActivationJobsRequest' when calling listReadSetActivationJobs");
      }

      let pathParams = {
        'sequenceStoreId': sequenceStoreId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListReadSetActivationJobsResponse;
      return this.apiClient.callApi(
        '/sequencestore/{sequenceStoreId}/activationjobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listReadSetExportJobs operation.
     * @callback module:api/DefaultApi~listReadSetExportJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListReadSetExportJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of read set export jobs.
     * @param {String} sequenceStoreId The jobs' sequence store ID.
     * @param {module:model/ListReadSetExportJobsRequest} listReadSetExportJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of jobs to return in one page of results.
     * @param {String} [nextToken] Specify the pagination token from a previous request to retrieve the next page of results.
     * @param {module:api/DefaultApi~listReadSetExportJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListReadSetExportJobsResponse}
     */
    listReadSetExportJobs(sequenceStoreId, listReadSetExportJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listReadSetExportJobsRequest;
      // verify the required parameter 'sequenceStoreId' is set
      if (sequenceStoreId === undefined || sequenceStoreId === null) {
        throw new Error("Missing the required parameter 'sequenceStoreId' when calling listReadSetExportJobs");
      }
      // verify the required parameter 'listReadSetExportJobsRequest' is set
      if (listReadSetExportJobsRequest === undefined || listReadSetExportJobsRequest === null) {
        throw new Error("Missing the required parameter 'listReadSetExportJobsRequest' when calling listReadSetExportJobs");
      }

      let pathParams = {
        'sequenceStoreId': sequenceStoreId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListReadSetExportJobsResponse;
      return this.apiClient.callApi(
        '/sequencestore/{sequenceStoreId}/exportjobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listReadSetImportJobs operation.
     * @callback module:api/DefaultApi~listReadSetImportJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListReadSetImportJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of read set import jobs.
     * @param {String} sequenceStoreId The jobs' sequence store ID.
     * @param {module:model/ListReadSetImportJobsRequest} listReadSetImportJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of jobs to return in one page of results.
     * @param {String} [nextToken] Specify the pagination token from a previous request to retrieve the next page of results.
     * @param {module:api/DefaultApi~listReadSetImportJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListReadSetImportJobsResponse}
     */
    listReadSetImportJobs(sequenceStoreId, listReadSetImportJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listReadSetImportJobsRequest;
      // verify the required parameter 'sequenceStoreId' is set
      if (sequenceStoreId === undefined || sequenceStoreId === null) {
        throw new Error("Missing the required parameter 'sequenceStoreId' when calling listReadSetImportJobs");
      }
      // verify the required parameter 'listReadSetImportJobsRequest' is set
      if (listReadSetImportJobsRequest === undefined || listReadSetImportJobsRequest === null) {
        throw new Error("Missing the required parameter 'listReadSetImportJobsRequest' when calling listReadSetImportJobs");
      }

      let pathParams = {
        'sequenceStoreId': sequenceStoreId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListReadSetImportJobsResponse;
      return this.apiClient.callApi(
        '/sequencestore/{sequenceStoreId}/importjobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listReadSetUploadParts operation.
     * @callback module:api/DefaultApi~listReadSetUploadPartsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListReadSetUploadPartsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  This operation will list all parts in a requested multipart upload for a sequence store. 
     * @param {String} sequenceStoreId  The Sequence Store ID used for the multipart uploads. 
     * @param {String} uploadId  The ID for the initiated multipart upload. 
     * @param {module:model/ListReadSetUploadPartsRequest} listReadSetUploadPartsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults]  The maximum number of read set upload parts returned in a page. 
     * @param {String} [nextToken]  Next token returned in the response of a previous ListReadSetUploadPartsRequest call. Used to get the next page of results. 
     * @param {module:api/DefaultApi~listReadSetUploadPartsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListReadSetUploadPartsResponse}
     */
    listReadSetUploadParts(sequenceStoreId, uploadId, listReadSetUploadPartsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listReadSetUploadPartsRequest;
      // verify the required parameter 'sequenceStoreId' is set
      if (sequenceStoreId === undefined || sequenceStoreId === null) {
        throw new Error("Missing the required parameter 'sequenceStoreId' when calling listReadSetUploadParts");
      }
      // verify the required parameter 'uploadId' is set
      if (uploadId === undefined || uploadId === null) {
        throw new Error("Missing the required parameter 'uploadId' when calling listReadSetUploadParts");
      }
      // verify the required parameter 'listReadSetUploadPartsRequest' is set
      if (listReadSetUploadPartsRequest === undefined || listReadSetUploadPartsRequest === null) {
        throw new Error("Missing the required parameter 'listReadSetUploadPartsRequest' when calling listReadSetUploadParts");
      }

      let pathParams = {
        'sequenceStoreId': sequenceStoreId,
        'uploadId': uploadId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListReadSetUploadPartsResponse;
      return this.apiClient.callApi(
        '/sequencestore/{sequenceStoreId}/upload/{uploadId}/parts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listReadSets operation.
     * @callback module:api/DefaultApi~listReadSetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListReadSetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of read sets.
     * @param {String} sequenceStoreId The jobs' sequence store ID.
     * @param {module:model/ListReadSetsRequest} listReadSetsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of read sets to return in one page of results.
     * @param {String} [nextToken] Specify the pagination token from a previous request to retrieve the next page of results.
     * @param {module:api/DefaultApi~listReadSetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListReadSetsResponse}
     */
    listReadSets(sequenceStoreId, listReadSetsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listReadSetsRequest;
      // verify the required parameter 'sequenceStoreId' is set
      if (sequenceStoreId === undefined || sequenceStoreId === null) {
        throw new Error("Missing the required parameter 'sequenceStoreId' when calling listReadSets");
      }
      // verify the required parameter 'listReadSetsRequest' is set
      if (listReadSetsRequest === undefined || listReadSetsRequest === null) {
        throw new Error("Missing the required parameter 'listReadSetsRequest' when calling listReadSets");
      }

      let pathParams = {
        'sequenceStoreId': sequenceStoreId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListReadSetsResponse;
      return this.apiClient.callApi(
        '/sequencestore/{sequenceStoreId}/readsets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listReferenceImportJobs operation.
     * @callback module:api/DefaultApi~listReferenceImportJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListReferenceImportJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of reference import jobs.
     * @param {String} referenceStoreId The job's reference store ID.
     * @param {module:model/ListReferenceImportJobsRequest} listReferenceImportJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of jobs to return in one page of results.
     * @param {String} [nextToken] Specify the pagination token from a previous request to retrieve the next page of results.
     * @param {module:api/DefaultApi~listReferenceImportJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListReferenceImportJobsResponse}
     */
    listReferenceImportJobs(referenceStoreId, listReferenceImportJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listReferenceImportJobsRequest;
      // verify the required parameter 'referenceStoreId' is set
      if (referenceStoreId === undefined || referenceStoreId === null) {
        throw new Error("Missing the required parameter 'referenceStoreId' when calling listReferenceImportJobs");
      }
      // verify the required parameter 'listReferenceImportJobsRequest' is set
      if (listReferenceImportJobsRequest === undefined || listReferenceImportJobsRequest === null) {
        throw new Error("Missing the required parameter 'listReferenceImportJobsRequest' when calling listReferenceImportJobs");
      }

      let pathParams = {
        'referenceStoreId': referenceStoreId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListReferenceImportJobsResponse;
      return this.apiClient.callApi(
        '/referencestore/{referenceStoreId}/importjobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listReferenceStores operation.
     * @callback module:api/DefaultApi~listReferenceStoresCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListReferenceStoresResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of reference stores.
     * @param {module:model/ListReferenceStoresRequest} listReferenceStoresRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of stores to return in one page of results.
     * @param {String} [nextToken] Specify the pagination token from a previous request to retrieve the next page of results.
     * @param {module:api/DefaultApi~listReferenceStoresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListReferenceStoresResponse}
     */
    listReferenceStores(listReferenceStoresRequest, opts, callback) {
      opts = opts || {};
      let postBody = listReferenceStoresRequest;
      // verify the required parameter 'listReferenceStoresRequest' is set
      if (listReferenceStoresRequest === undefined || listReferenceStoresRequest === null) {
        throw new Error("Missing the required parameter 'listReferenceStoresRequest' when calling listReferenceStores");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListReferenceStoresResponse;
      return this.apiClient.callApi(
        '/referencestores', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listReferences operation.
     * @callback module:api/DefaultApi~listReferencesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListReferencesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of references.
     * @param {String} referenceStoreId The references' reference store ID.
     * @param {module:model/ListReferencesRequest} listReferencesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of references to return in one page of results.
     * @param {String} [nextToken] Specify the pagination token from a previous request to retrieve the next page of results.
     * @param {module:api/DefaultApi~listReferencesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListReferencesResponse}
     */
    listReferences(referenceStoreId, listReferencesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listReferencesRequest;
      // verify the required parameter 'referenceStoreId' is set
      if (referenceStoreId === undefined || referenceStoreId === null) {
        throw new Error("Missing the required parameter 'referenceStoreId' when calling listReferences");
      }
      // verify the required parameter 'listReferencesRequest' is set
      if (listReferencesRequest === undefined || listReferencesRequest === null) {
        throw new Error("Missing the required parameter 'listReferencesRequest' when calling listReferences");
      }

      let pathParams = {
        'referenceStoreId': referenceStoreId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListReferencesResponse;
      return this.apiClient.callApi(
        '/referencestore/{referenceStoreId}/references', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRunGroups operation.
     * @callback module:api/DefaultApi~listRunGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRunGroupsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of run groups.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [name] The run groups' name.
     * @param {String} [startingToken] Specify the pagination token from a previous request to retrieve the next page of results.
     * @param {Number} [maxResults] The maximum number of run groups to return in one page of results.
     * @param {module:api/DefaultApi~listRunGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRunGroupsResponse}
     */
    listRunGroups(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'startingToken': opts['startingToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListRunGroupsResponse;
      return this.apiClient.callApi(
        '/runGroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRunTasks operation.
     * @callback module:api/DefaultApi~listRunTasksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRunTasksResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of tasks for a run.
     * @param {String} id The run's ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [status] Filter the list by status.
     * @param {String} [startingToken] Specify the pagination token from a previous request to retrieve the next page of results.
     * @param {Number} [maxResults] The maximum number of run tasks to return in one page of results.
     * @param {module:api/DefaultApi~listRunTasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRunTasksResponse}
     */
    listRunTasks(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listRunTasks");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'status': opts['status'],
        'startingToken': opts['startingToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListRunTasksResponse;
      return this.apiClient.callApi(
        '/run/{id}/task', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRuns operation.
     * @callback module:api/DefaultApi~listRunsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRunsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of runs.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [name] Filter the list by run name.
     * @param {String} [runGroupId] Filter the list by run group ID.
     * @param {String} [startingToken] Specify the pagination token from a previous request to retrieve the next page of results.
     * @param {Number} [maxResults] The maximum number of runs to return in one page of results.
     * @param {module:model/String} [status]  The status of a run. 
     * @param {module:api/DefaultApi~listRunsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRunsResponse}
     */
    listRuns(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'runGroupId': opts['runGroupId'],
        'startingToken': opts['startingToken'],
        'maxResults': opts['maxResults'],
        'status': opts['status']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListRunsResponse;
      return this.apiClient.callApi(
        '/run', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSequenceStores operation.
     * @callback module:api/DefaultApi~listSequenceStoresCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSequenceStoresResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of sequence stores.
     * @param {module:model/ListSequenceStoresRequest} listSequenceStoresRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of stores to return in one page of results.
     * @param {String} [nextToken] Specify the pagination token from a previous request to retrieve the next page of results.
     * @param {module:api/DefaultApi~listSequenceStoresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSequenceStoresResponse}
     */
    listSequenceStores(listSequenceStoresRequest, opts, callback) {
      opts = opts || {};
      let postBody = listSequenceStoresRequest;
      // verify the required parameter 'listSequenceStoresRequest' is set
      if (listSequenceStoresRequest === undefined || listSequenceStoresRequest === null) {
        throw new Error("Missing the required parameter 'listSequenceStoresRequest' when calling listSequenceStores");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListSequenceStoresResponse;
      return this.apiClient.callApi(
        '/sequencestores', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of tags for a resource.
     * @param {String} resourceArn The resource's ARN.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVariantImportJobs operation.
     * @callback module:api/DefaultApi~listVariantImportJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListVariantImportJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of variant import jobs.
     * @param {module:model/ListVariantImportJobsRequest} listVariantImportJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of import jobs to return in one page of results.
     * @param {String} [nextToken] Specify the pagination token from a previous request to retrieve the next page of results.
     * @param {module:api/DefaultApi~listVariantImportJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListVariantImportJobsResponse}
     */
    listVariantImportJobs(listVariantImportJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listVariantImportJobsRequest;
      // verify the required parameter 'listVariantImportJobsRequest' is set
      if (listVariantImportJobsRequest === undefined || listVariantImportJobsRequest === null) {
        throw new Error("Missing the required parameter 'listVariantImportJobsRequest' when calling listVariantImportJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListVariantImportJobsResponse;
      return this.apiClient.callApi(
        '/import/variants', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVariantStores operation.
     * @callback module:api/DefaultApi~listVariantStoresCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListVariantStoresResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of variant stores.
     * @param {module:model/ListVariantStoresRequest} listVariantStoresRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of stores to return in one page of results.
     * @param {String} [nextToken] Specify the pagination token from a previous request to retrieve the next page of results.
     * @param {module:api/DefaultApi~listVariantStoresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListVariantStoresResponse}
     */
    listVariantStores(listVariantStoresRequest, opts, callback) {
      opts = opts || {};
      let postBody = listVariantStoresRequest;
      // verify the required parameter 'listVariantStoresRequest' is set
      if (listVariantStoresRequest === undefined || listVariantStoresRequest === null) {
        throw new Error("Missing the required parameter 'listVariantStoresRequest' when calling listVariantStores");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListVariantStoresResponse;
      return this.apiClient.callApi(
        '/variantStores', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listWorkflows operation.
     * @callback module:api/DefaultApi~listWorkflowsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListWorkflowsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of workflows.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [type] The workflows' type.
     * @param {String} [name] The workflows' name.
     * @param {String} [startingToken] Specify the pagination token from a previous request to retrieve the next page of results.
     * @param {Number} [maxResults] The maximum number of workflows to return in one page of results.
     * @param {module:api/DefaultApi~listWorkflowsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListWorkflowsResponse}
     */
    listWorkflows(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'type': opts['type'],
        'name': opts['name'],
        'startingToken': opts['startingToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListWorkflowsResponse;
      return this.apiClient.callApi(
        '/workflow', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startAnnotationImportJob operation.
     * @callback module:api/DefaultApi~startAnnotationImportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartAnnotationImportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts an annotation import job.
     * @param {module:model/StartAnnotationImportJobRequest} startAnnotationImportJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startAnnotationImportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartAnnotationImportResponse}
     */
    startAnnotationImportJob(startAnnotationImportJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = startAnnotationImportJobRequest;
      // verify the required parameter 'startAnnotationImportJobRequest' is set
      if (startAnnotationImportJobRequest === undefined || startAnnotationImportJobRequest === null) {
        throw new Error("Missing the required parameter 'startAnnotationImportJobRequest' when calling startAnnotationImportJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartAnnotationImportResponse;
      return this.apiClient.callApi(
        '/import/annotation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startReadSetActivationJob operation.
     * @callback module:api/DefaultApi~startReadSetActivationJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartReadSetActivationJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activates an archived read set. To reduce storage charges, Amazon Omics archives unused read sets after 30 days.
     * @param {String} sequenceStoreId The read set's sequence store ID.
     * @param {module:model/StartReadSetActivationJobRequest} startReadSetActivationJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startReadSetActivationJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartReadSetActivationJobResponse}
     */
    startReadSetActivationJob(sequenceStoreId, startReadSetActivationJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = startReadSetActivationJobRequest;
      // verify the required parameter 'sequenceStoreId' is set
      if (sequenceStoreId === undefined || sequenceStoreId === null) {
        throw new Error("Missing the required parameter 'sequenceStoreId' when calling startReadSetActivationJob");
      }
      // verify the required parameter 'startReadSetActivationJobRequest' is set
      if (startReadSetActivationJobRequest === undefined || startReadSetActivationJobRequest === null) {
        throw new Error("Missing the required parameter 'startReadSetActivationJobRequest' when calling startReadSetActivationJob");
      }

      let pathParams = {
        'sequenceStoreId': sequenceStoreId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartReadSetActivationJobResponse;
      return this.apiClient.callApi(
        '/sequencestore/{sequenceStoreId}/activationjob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startReadSetExportJob operation.
     * @callback module:api/DefaultApi~startReadSetExportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartReadSetExportJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exports a read set to Amazon S3.
     * @param {String} sequenceStoreId The read set's sequence store ID.
     * @param {module:model/StartReadSetExportJobRequest} startReadSetExportJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startReadSetExportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartReadSetExportJobResponse}
     */
    startReadSetExportJob(sequenceStoreId, startReadSetExportJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = startReadSetExportJobRequest;
      // verify the required parameter 'sequenceStoreId' is set
      if (sequenceStoreId === undefined || sequenceStoreId === null) {
        throw new Error("Missing the required parameter 'sequenceStoreId' when calling startReadSetExportJob");
      }
      // verify the required parameter 'startReadSetExportJobRequest' is set
      if (startReadSetExportJobRequest === undefined || startReadSetExportJobRequest === null) {
        throw new Error("Missing the required parameter 'startReadSetExportJobRequest' when calling startReadSetExportJob");
      }

      let pathParams = {
        'sequenceStoreId': sequenceStoreId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartReadSetExportJobResponse;
      return this.apiClient.callApi(
        '/sequencestore/{sequenceStoreId}/exportjob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startReadSetImportJob operation.
     * @callback module:api/DefaultApi~startReadSetImportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartReadSetImportJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a read set import job.
     * @param {String} sequenceStoreId The read set's sequence store ID.
     * @param {module:model/StartReadSetImportJobRequest} startReadSetImportJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startReadSetImportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartReadSetImportJobResponse}
     */
    startReadSetImportJob(sequenceStoreId, startReadSetImportJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = startReadSetImportJobRequest;
      // verify the required parameter 'sequenceStoreId' is set
      if (sequenceStoreId === undefined || sequenceStoreId === null) {
        throw new Error("Missing the required parameter 'sequenceStoreId' when calling startReadSetImportJob");
      }
      // verify the required parameter 'startReadSetImportJobRequest' is set
      if (startReadSetImportJobRequest === undefined || startReadSetImportJobRequest === null) {
        throw new Error("Missing the required parameter 'startReadSetImportJobRequest' when calling startReadSetImportJob");
      }

      let pathParams = {
        'sequenceStoreId': sequenceStoreId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartReadSetImportJobResponse;
      return this.apiClient.callApi(
        '/sequencestore/{sequenceStoreId}/importjob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startReferenceImportJob operation.
     * @callback module:api/DefaultApi~startReferenceImportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartReferenceImportJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a reference import job.
     * @param {String} referenceStoreId The job's reference store ID.
     * @param {module:model/StartReferenceImportJobRequest} startReferenceImportJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startReferenceImportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartReferenceImportJobResponse}
     */
    startReferenceImportJob(referenceStoreId, startReferenceImportJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = startReferenceImportJobRequest;
      // verify the required parameter 'referenceStoreId' is set
      if (referenceStoreId === undefined || referenceStoreId === null) {
        throw new Error("Missing the required parameter 'referenceStoreId' when calling startReferenceImportJob");
      }
      // verify the required parameter 'startReferenceImportJobRequest' is set
      if (startReferenceImportJobRequest === undefined || startReferenceImportJobRequest === null) {
        throw new Error("Missing the required parameter 'startReferenceImportJobRequest' when calling startReferenceImportJob");
      }

      let pathParams = {
        'referenceStoreId': referenceStoreId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartReferenceImportJobResponse;
      return this.apiClient.callApi(
        '/referencestore/{referenceStoreId}/importjob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startRun operation.
     * @callback module:api/DefaultApi~startRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartRunResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a run.
     * @param {module:model/StartRunRequest} startRunRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartRunResponse}
     */
    startRun(startRunRequest, opts, callback) {
      opts = opts || {};
      let postBody = startRunRequest;
      // verify the required parameter 'startRunRequest' is set
      if (startRunRequest === undefined || startRunRequest === null) {
        throw new Error("Missing the required parameter 'startRunRequest' when calling startRun");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartRunResponse;
      return this.apiClient.callApi(
        '/run', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startVariantImportJob operation.
     * @callback module:api/DefaultApi~startVariantImportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartVariantImportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a variant import job.
     * @param {module:model/StartVariantImportJobRequest} startVariantImportJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startVariantImportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartVariantImportResponse}
     */
    startVariantImportJob(startVariantImportJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = startVariantImportJobRequest;
      // verify the required parameter 'startVariantImportJobRequest' is set
      if (startVariantImportJobRequest === undefined || startVariantImportJobRequest === null) {
        throw new Error("Missing the required parameter 'startVariantImportJobRequest' when calling startVariantImportJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartVariantImportResponse;
      return this.apiClient.callApi(
        '/import/variant', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tags a resource.
     * @param {String} resourceArn The resource's ARN.
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes tags from a resource.
     * @param {String} resourceArn The resource's ARN.
     * @param {Array.<String>} tagKeys Keys of tags to remove.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAnnotationStore operation.
     * @callback module:api/DefaultApi~updateAnnotationStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateAnnotationStoreResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an annotation store.
     * @param {String} name A name for the store.
     * @param {module:model/UpdateAnnotationStoreRequest} updateAnnotationStoreRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateAnnotationStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateAnnotationStoreResponse}
     */
    updateAnnotationStore(name, updateAnnotationStoreRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateAnnotationStoreRequest;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling updateAnnotationStore");
      }
      // verify the required parameter 'updateAnnotationStoreRequest' is set
      if (updateAnnotationStoreRequest === undefined || updateAnnotationStoreRequest === null) {
        throw new Error("Missing the required parameter 'updateAnnotationStoreRequest' when calling updateAnnotationStore");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAnnotationStoreResponse;
      return this.apiClient.callApi(
        '/annotationStore/{name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRunGroup operation.
     * @callback module:api/DefaultApi~updateRunGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a run group.
     * @param {String} id The group's ID.
     * @param {module:model/UpdateRunGroupRequest} updateRunGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateRunGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateRunGroup(id, updateRunGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateRunGroupRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateRunGroup");
      }
      // verify the required parameter 'updateRunGroupRequest' is set
      if (updateRunGroupRequest === undefined || updateRunGroupRequest === null) {
        throw new Error("Missing the required parameter 'updateRunGroupRequest' when calling updateRunGroup");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/runGroup/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVariantStore operation.
     * @callback module:api/DefaultApi~updateVariantStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateVariantStoreResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a variant store.
     * @param {String} name A name for the store.
     * @param {module:model/UpdateAnnotationStoreRequest} updateAnnotationStoreRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateVariantStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateVariantStoreResponse}
     */
    updateVariantStore(name, updateAnnotationStoreRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateAnnotationStoreRequest;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling updateVariantStore");
      }
      // verify the required parameter 'updateAnnotationStoreRequest' is set
      if (updateAnnotationStoreRequest === undefined || updateAnnotationStoreRequest === null) {
        throw new Error("Missing the required parameter 'updateAnnotationStoreRequest' when calling updateVariantStore");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateVariantStoreResponse;
      return this.apiClient.callApi(
        '/variantStore/{name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWorkflow operation.
     * @callback module:api/DefaultApi~updateWorkflowCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a workflow.
     * @param {String} id The workflow's ID.
     * @param {module:model/UpdateWorkflowRequest} updateWorkflowRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateWorkflow(id, updateWorkflowRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateWorkflowRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateWorkflow");
      }
      // verify the required parameter 'updateWorkflowRequest' is set
      if (updateWorkflowRequest === undefined || updateWorkflowRequest === null) {
        throw new Error("Missing the required parameter 'updateWorkflowRequest' when calling updateWorkflow");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/workflow/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadReadSetPart operation.
     * @callback module:api/DefaultApi~uploadReadSetPartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UploadReadSetPartResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  This operation uploads a specific part of a read set. If you upload a new part using a previously used part number, the previously uploaded part will be overwritten. 
     * @param {String} sequenceStoreId  The Sequence Store ID used for the multipart upload. 
     * @param {String} uploadId  The ID for the initiated multipart upload. 
     * @param {module:model/String} partSource  The source file for an upload part. 
     * @param {Number} partNumber  The number of the part being uploaded. 
     * @param {module:model/UploadReadSetPartRequest} uploadReadSetPartRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~uploadReadSetPartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UploadReadSetPartResponse}
     */
    uploadReadSetPart(sequenceStoreId, uploadId, partSource, partNumber, uploadReadSetPartRequest, opts, callback) {
      opts = opts || {};
      let postBody = uploadReadSetPartRequest;
      // verify the required parameter 'sequenceStoreId' is set
      if (sequenceStoreId === undefined || sequenceStoreId === null) {
        throw new Error("Missing the required parameter 'sequenceStoreId' when calling uploadReadSetPart");
      }
      // verify the required parameter 'uploadId' is set
      if (uploadId === undefined || uploadId === null) {
        throw new Error("Missing the required parameter 'uploadId' when calling uploadReadSetPart");
      }
      // verify the required parameter 'partSource' is set
      if (partSource === undefined || partSource === null) {
        throw new Error("Missing the required parameter 'partSource' when calling uploadReadSetPart");
      }
      // verify the required parameter 'partNumber' is set
      if (partNumber === undefined || partNumber === null) {
        throw new Error("Missing the required parameter 'partNumber' when calling uploadReadSetPart");
      }
      // verify the required parameter 'uploadReadSetPartRequest' is set
      if (uploadReadSetPartRequest === undefined || uploadReadSetPartRequest === null) {
        throw new Error("Missing the required parameter 'uploadReadSetPartRequest' when calling uploadReadSetPart");
      }

      let pathParams = {
        'sequenceStoreId': sequenceStoreId,
        'uploadId': uploadId
      };
      let queryParams = {
        'partSource': partSource,
        'partNumber': partNumber
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UploadReadSetPartResponse;
      return this.apiClient.callApi(
        '/sequencestore/{sequenceStoreId}/upload/{uploadId}/part#partSource&partNumber', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
