/*
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchDeleteReadSetRequest;
import org.openapitools.client.model.BatchDeleteReadSetResponse;
import org.openapitools.client.model.CompleteMultipartReadSetUploadRequest;
import org.openapitools.client.model.CompleteMultipartReadSetUploadResponse;
import org.openapitools.client.model.CreateAnnotationStoreRequest;
import org.openapitools.client.model.CreateAnnotationStoreResponse;
import org.openapitools.client.model.CreateMultipartReadSetUploadRequest;
import org.openapitools.client.model.CreateMultipartReadSetUploadResponse;
import org.openapitools.client.model.CreateReferenceStoreRequest;
import org.openapitools.client.model.CreateReferenceStoreResponse;
import org.openapitools.client.model.CreateRunGroupRequest;
import org.openapitools.client.model.CreateRunGroupResponse;
import org.openapitools.client.model.CreateSequenceStoreRequest;
import org.openapitools.client.model.CreateSequenceStoreResponse;
import org.openapitools.client.model.CreateVariantStoreRequest;
import org.openapitools.client.model.CreateVariantStoreResponse;
import org.openapitools.client.model.CreateWorkflowRequest;
import org.openapitools.client.model.CreateWorkflowResponse;
import org.openapitools.client.model.DeleteAnnotationStoreResponse;
import org.openapitools.client.model.DeleteVariantStoreResponse;
import org.openapitools.client.model.GetAnnotationImportResponse;
import org.openapitools.client.model.GetAnnotationStoreResponse;
import org.openapitools.client.model.GetReadSetActivationJobResponse;
import org.openapitools.client.model.GetReadSetExportJobResponse;
import org.openapitools.client.model.GetReadSetImportJobResponse;
import org.openapitools.client.model.GetReadSetMetadataResponse;
import org.openapitools.client.model.GetReadSetResponse;
import org.openapitools.client.model.GetReferenceImportJobResponse;
import org.openapitools.client.model.GetReferenceMetadataResponse;
import org.openapitools.client.model.GetReferenceResponse;
import org.openapitools.client.model.GetReferenceStoreResponse;
import org.openapitools.client.model.GetRunGroupResponse;
import org.openapitools.client.model.GetRunResponse;
import org.openapitools.client.model.GetRunTaskResponse;
import org.openapitools.client.model.GetSequenceStoreResponse;
import org.openapitools.client.model.GetVariantImportResponse;
import org.openapitools.client.model.GetVariantStoreResponse;
import org.openapitools.client.model.GetWorkflowResponse;
import org.openapitools.client.model.ListAnnotationImportJobsRequest;
import org.openapitools.client.model.ListAnnotationImportJobsResponse;
import org.openapitools.client.model.ListAnnotationStoresRequest;
import org.openapitools.client.model.ListAnnotationStoresResponse;
import org.openapitools.client.model.ListMultipartReadSetUploadsResponse;
import org.openapitools.client.model.ListReadSetActivationJobsRequest;
import org.openapitools.client.model.ListReadSetActivationJobsResponse;
import org.openapitools.client.model.ListReadSetExportJobsRequest;
import org.openapitools.client.model.ListReadSetExportJobsResponse;
import org.openapitools.client.model.ListReadSetImportJobsRequest;
import org.openapitools.client.model.ListReadSetImportJobsResponse;
import org.openapitools.client.model.ListReadSetUploadPartsRequest;
import org.openapitools.client.model.ListReadSetUploadPartsResponse;
import org.openapitools.client.model.ListReadSetsRequest;
import org.openapitools.client.model.ListReadSetsResponse;
import org.openapitools.client.model.ListReferenceImportJobsRequest;
import org.openapitools.client.model.ListReferenceImportJobsResponse;
import org.openapitools.client.model.ListReferenceStoresRequest;
import org.openapitools.client.model.ListReferenceStoresResponse;
import org.openapitools.client.model.ListReferencesRequest;
import org.openapitools.client.model.ListReferencesResponse;
import org.openapitools.client.model.ListRunGroupsResponse;
import org.openapitools.client.model.ListRunTasksResponse;
import org.openapitools.client.model.ListRunsResponse;
import org.openapitools.client.model.ListSequenceStoresRequest;
import org.openapitools.client.model.ListSequenceStoresResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ListVariantImportJobsRequest;
import org.openapitools.client.model.ListVariantImportJobsResponse;
import org.openapitools.client.model.ListVariantStoresRequest;
import org.openapitools.client.model.ListVariantStoresResponse;
import org.openapitools.client.model.ListWorkflowsResponse;
import org.openapitools.client.model.RunExport;
import org.openapitools.client.model.StartAnnotationImportJobRequest;
import org.openapitools.client.model.StartAnnotationImportResponse;
import org.openapitools.client.model.StartReadSetActivationJobRequest;
import org.openapitools.client.model.StartReadSetActivationJobResponse;
import org.openapitools.client.model.StartReadSetExportJobRequest;
import org.openapitools.client.model.StartReadSetExportJobResponse;
import org.openapitools.client.model.StartReadSetImportJobRequest;
import org.openapitools.client.model.StartReadSetImportJobResponse;
import org.openapitools.client.model.StartReferenceImportJobRequest;
import org.openapitools.client.model.StartReferenceImportJobResponse;
import org.openapitools.client.model.StartRunRequest;
import org.openapitools.client.model.StartRunResponse;
import org.openapitools.client.model.StartVariantImportJobRequest;
import org.openapitools.client.model.StartVariantImportResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UpdateAnnotationStoreRequest;
import org.openapitools.client.model.UpdateAnnotationStoreResponse;
import org.openapitools.client.model.UpdateRunGroupRequest;
import org.openapitools.client.model.UpdateVariantStoreResponse;
import org.openapitools.client.model.UpdateWorkflowRequest;
import org.openapitools.client.model.UploadReadSetPartRequest;
import org.openapitools.client.model.UploadReadSetPartResponse;
import org.openapitools.client.model.WorkflowExport;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     *  Stops a multipart upload. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void abortMultipartReadSetUploadTest() throws ApiException {
        String sequenceStoreId = null;
        String uploadId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.abortMultipartReadSetUpload(sequenceStoreId, uploadId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes one or more read sets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchDeleteReadSetTest() throws ApiException {
        String sequenceStoreId = null;
        BatchDeleteReadSetRequest batchDeleteReadSetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchDeleteReadSetResponse response = api.batchDeleteReadSet(sequenceStoreId, batchDeleteReadSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Cancels an annotation import job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelAnnotationImportJobTest() throws ApiException {
        String jobId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.cancelAnnotationImportJob(jobId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Cancels a run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelRunTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.cancelRun(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Cancels a variant import job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelVariantImportJobTest() throws ApiException {
        String jobId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.cancelVariantImportJob(jobId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Concludes a multipart upload once you have uploaded all the components. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void completeMultipartReadSetUploadTest() throws ApiException {
        String sequenceStoreId = null;
        String uploadId = null;
        CompleteMultipartReadSetUploadRequest completeMultipartReadSetUploadRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CompleteMultipartReadSetUploadResponse response = api.completeMultipartReadSetUpload(sequenceStoreId, uploadId, completeMultipartReadSetUploadRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an annotation store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAnnotationStoreTest() throws ApiException {
        CreateAnnotationStoreRequest createAnnotationStoreRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAnnotationStoreResponse response = api.createAnnotationStore(createAnnotationStoreRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Begins a multipart read set upload. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMultipartReadSetUploadTest() throws ApiException {
        String sequenceStoreId = null;
        CreateMultipartReadSetUploadRequest createMultipartReadSetUploadRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateMultipartReadSetUploadResponse response = api.createMultipartReadSetUpload(sequenceStoreId, createMultipartReadSetUploadRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a reference store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createReferenceStoreTest() throws ApiException {
        CreateReferenceStoreRequest createReferenceStoreRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateReferenceStoreResponse response = api.createReferenceStore(createReferenceStoreRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a run group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRunGroupTest() throws ApiException {
        CreateRunGroupRequest createRunGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateRunGroupResponse response = api.createRunGroup(createRunGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a sequence store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSequenceStoreTest() throws ApiException {
        CreateSequenceStoreRequest createSequenceStoreRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateSequenceStoreResponse response = api.createSequenceStore(createSequenceStoreRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a variant store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createVariantStoreTest() throws ApiException {
        CreateVariantStoreRequest createVariantStoreRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateVariantStoreResponse response = api.createVariantStore(createVariantStoreRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWorkflowTest() throws ApiException {
        CreateWorkflowRequest createWorkflowRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateWorkflowResponse response = api.createWorkflow(createWorkflowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an annotation store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAnnotationStoreTest() throws ApiException {
        String name = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean force = null;
        DeleteAnnotationStoreResponse response = api.deleteAnnotationStore(name, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, force);
        // TODO: test validations
    }

    /**
     * Deletes a genome reference.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteReferenceTest() throws ApiException {
        String id = null;
        String referenceStoreId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteReference(id, referenceStoreId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a genome reference store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteReferenceStoreTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteReferenceStore(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a workflow run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRunTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteRun(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a workflow run group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRunGroupTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteRunGroup(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a sequence store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSequenceStoreTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteSequenceStore(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a variant store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteVariantStoreTest() throws ApiException {
        String name = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean force = null;
        DeleteVariantStoreResponse response = api.deleteVariantStore(name, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, force);
        // TODO: test validations
    }

    /**
     * Deletes a workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWorkflowTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteWorkflow(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about an annotation import job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnnotationImportJobTest() throws ApiException {
        String jobId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAnnotationImportResponse response = api.getAnnotationImportJob(jobId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about an annotation store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnnotationStoreTest() throws ApiException {
        String name = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAnnotationStoreResponse response = api.getAnnotationStore(name, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets a file from a read set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReadSetTest() throws ApiException {
        String id = null;
        String sequenceStoreId = null;
        Integer partNumber = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String _file = null;
        GetReadSetResponse response = api.getReadSet(id, sequenceStoreId, partNumber, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _file);
        // TODO: test validations
    }

    /**
     * Gets information about a read set activation job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReadSetActivationJobTest() throws ApiException {
        String id = null;
        String sequenceStoreId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetReadSetActivationJobResponse response = api.getReadSetActivationJob(id, sequenceStoreId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a read set export job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReadSetExportJobTest() throws ApiException {
        String sequenceStoreId = null;
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetReadSetExportJobResponse response = api.getReadSetExportJob(sequenceStoreId, id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a read set import job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReadSetImportJobTest() throws ApiException {
        String id = null;
        String sequenceStoreId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetReadSetImportJobResponse response = api.getReadSetImportJob(id, sequenceStoreId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets details about a read set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReadSetMetadataTest() throws ApiException {
        String id = null;
        String sequenceStoreId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetReadSetMetadataResponse response = api.getReadSetMetadata(id, sequenceStoreId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets a reference file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReferenceTest() throws ApiException {
        String id = null;
        String referenceStoreId = null;
        Integer partNumber = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String range = null;
        String _file = null;
        GetReferenceResponse response = api.getReference(id, referenceStoreId, partNumber, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, range, _file);
        // TODO: test validations
    }

    /**
     * Gets information about a reference import job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReferenceImportJobTest() throws ApiException {
        String id = null;
        String referenceStoreId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetReferenceImportJobResponse response = api.getReferenceImportJob(id, referenceStoreId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a genome reference&#39;s metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReferenceMetadataTest() throws ApiException {
        String id = null;
        String referenceStoreId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetReferenceMetadataResponse response = api.getReferenceMetadata(id, referenceStoreId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a reference store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReferenceStoreTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetReferenceStoreResponse response = api.getReferenceStore(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a workflow run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRunTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<RunExport> export = null;
        GetRunResponse response = api.getRun(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, export);
        // TODO: test validations
    }

    /**
     * Gets information about a workflow run group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRunGroupTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRunGroupResponse response = api.getRunGroup(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a workflow run task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRunTaskTest() throws ApiException {
        String id = null;
        String taskId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRunTaskResponse response = api.getRunTask(id, taskId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a sequence store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSequenceStoreTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSequenceStoreResponse response = api.getSequenceStore(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a variant import job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVariantImportJobTest() throws ApiException {
        String jobId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetVariantImportResponse response = api.getVariantImportJob(jobId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a variant store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVariantStoreTest() throws ApiException {
        String name = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetVariantStoreResponse response = api.getVariantStore(name, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkflowTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String type = null;
        List<WorkflowExport> export = null;
        GetWorkflowResponse response = api.getWorkflow(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, export);
        // TODO: test validations
    }

    /**
     * Retrieves a list of annotation import jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAnnotationImportJobsTest() throws ApiException {
        ListAnnotationImportJobsRequest listAnnotationImportJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListAnnotationImportJobsResponse response = api.listAnnotationImportJobs(listAnnotationImportJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a list of annotation stores.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAnnotationStoresTest() throws ApiException {
        ListAnnotationStoresRequest listAnnotationStoresRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListAnnotationStoresResponse response = api.listAnnotationStores(listAnnotationStoresRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  Lists all multipart read set uploads and their statuses. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMultipartReadSetUploadsTest() throws ApiException {
        String sequenceStoreId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListMultipartReadSetUploadsResponse response = api.listMultipartReadSetUploads(sequenceStoreId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a list of read set activation jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listReadSetActivationJobsTest() throws ApiException {
        String sequenceStoreId = null;
        ListReadSetActivationJobsRequest listReadSetActivationJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListReadSetActivationJobsResponse response = api.listReadSetActivationJobs(sequenceStoreId, listReadSetActivationJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a list of read set export jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listReadSetExportJobsTest() throws ApiException {
        String sequenceStoreId = null;
        ListReadSetExportJobsRequest listReadSetExportJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListReadSetExportJobsResponse response = api.listReadSetExportJobs(sequenceStoreId, listReadSetExportJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a list of read set import jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listReadSetImportJobsTest() throws ApiException {
        String sequenceStoreId = null;
        ListReadSetImportJobsRequest listReadSetImportJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListReadSetImportJobsResponse response = api.listReadSetImportJobs(sequenceStoreId, listReadSetImportJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  This operation will list all parts in a requested multipart upload for a sequence store. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listReadSetUploadPartsTest() throws ApiException {
        String sequenceStoreId = null;
        String uploadId = null;
        ListReadSetUploadPartsRequest listReadSetUploadPartsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListReadSetUploadPartsResponse response = api.listReadSetUploadParts(sequenceStoreId, uploadId, listReadSetUploadPartsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a list of read sets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listReadSetsTest() throws ApiException {
        String sequenceStoreId = null;
        ListReadSetsRequest listReadSetsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListReadSetsResponse response = api.listReadSets(sequenceStoreId, listReadSetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a list of reference import jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listReferenceImportJobsTest() throws ApiException {
        String referenceStoreId = null;
        ListReferenceImportJobsRequest listReferenceImportJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListReferenceImportJobsResponse response = api.listReferenceImportJobs(referenceStoreId, listReferenceImportJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a list of reference stores.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listReferenceStoresTest() throws ApiException {
        ListReferenceStoresRequest listReferenceStoresRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListReferenceStoresResponse response = api.listReferenceStores(listReferenceStoresRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a list of references.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listReferencesTest() throws ApiException {
        String referenceStoreId = null;
        ListReferencesRequest listReferencesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListReferencesResponse response = api.listReferences(referenceStoreId, listReferencesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a list of run groups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRunGroupsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String name = null;
        String startingToken = null;
        Integer maxResults = null;
        ListRunGroupsResponse response = api.listRunGroups(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, name, startingToken, maxResults);
        // TODO: test validations
    }

    /**
     * Retrieves a list of tasks for a run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRunTasksTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String status = null;
        String startingToken = null;
        Integer maxResults = null;
        ListRunTasksResponse response = api.listRunTasks(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, status, startingToken, maxResults);
        // TODO: test validations
    }

    /**
     * Retrieves a list of runs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRunsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String name = null;
        String runGroupId = null;
        String startingToken = null;
        Integer maxResults = null;
        String status = null;
        ListRunsResponse response = api.listRuns(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, name, runGroupId, startingToken, maxResults, status);
        // TODO: test validations
    }

    /**
     * Retrieves a list of sequence stores.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSequenceStoresTest() throws ApiException {
        ListSequenceStoresRequest listSequenceStoresRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListSequenceStoresResponse response = api.listSequenceStores(listSequenceStoresRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a list of tags for a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a list of variant import jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listVariantImportJobsTest() throws ApiException {
        ListVariantImportJobsRequest listVariantImportJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListVariantImportJobsResponse response = api.listVariantImportJobs(listVariantImportJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a list of variant stores.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listVariantStoresTest() throws ApiException {
        ListVariantStoresRequest listVariantStoresRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListVariantStoresResponse response = api.listVariantStores(listVariantStoresRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a list of workflows.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listWorkflowsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String type = null;
        String name = null;
        String startingToken = null;
        Integer maxResults = null;
        ListWorkflowsResponse response = api.listWorkflows(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, name, startingToken, maxResults);
        // TODO: test validations
    }

    /**
     * Starts an annotation import job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startAnnotationImportJobTest() throws ApiException {
        StartAnnotationImportJobRequest startAnnotationImportJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartAnnotationImportResponse response = api.startAnnotationImportJob(startAnnotationImportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Activates an archived read set. To reduce storage charges, Amazon Omics archives unused read sets after 30 days.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startReadSetActivationJobTest() throws ApiException {
        String sequenceStoreId = null;
        StartReadSetActivationJobRequest startReadSetActivationJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartReadSetActivationJobResponse response = api.startReadSetActivationJob(sequenceStoreId, startReadSetActivationJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Exports a read set to Amazon S3.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startReadSetExportJobTest() throws ApiException {
        String sequenceStoreId = null;
        StartReadSetExportJobRequest startReadSetExportJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartReadSetExportJobResponse response = api.startReadSetExportJob(sequenceStoreId, startReadSetExportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts a read set import job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startReadSetImportJobTest() throws ApiException {
        String sequenceStoreId = null;
        StartReadSetImportJobRequest startReadSetImportJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartReadSetImportJobResponse response = api.startReadSetImportJob(sequenceStoreId, startReadSetImportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts a reference import job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startReferenceImportJobTest() throws ApiException {
        String referenceStoreId = null;
        StartReferenceImportJobRequest startReferenceImportJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartReferenceImportJobResponse response = api.startReferenceImportJob(referenceStoreId, startReferenceImportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts a run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startRunTest() throws ApiException {
        StartRunRequest startRunRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartRunResponse response = api.startRun(startRunRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts a variant import job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startVariantImportJobTest() throws ApiException {
        StartVariantImportJobRequest startVariantImportJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartVariantImportResponse response = api.startVariantImportJob(startVariantImportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Tags a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes tags from a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an annotation store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAnnotationStoreTest() throws ApiException {
        String name = null;
        UpdateAnnotationStoreRequest updateAnnotationStoreRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateAnnotationStoreResponse response = api.updateAnnotationStore(name, updateAnnotationStoreRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a run group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRunGroupTest() throws ApiException {
        String id = null;
        UpdateRunGroupRequest updateRunGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateRunGroup(id, updateRunGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a variant store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateVariantStoreTest() throws ApiException {
        String name = null;
        UpdateAnnotationStoreRequest updateAnnotationStoreRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateVariantStoreResponse response = api.updateVariantStore(name, updateAnnotationStoreRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWorkflowTest() throws ApiException {
        String id = null;
        UpdateWorkflowRequest updateWorkflowRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateWorkflow(id, updateWorkflowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  This operation uploads a specific part of a read set. If you upload a new part using a previously used part number, the previously uploaded part will be overwritten. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadReadSetPartTest() throws ApiException {
        String sequenceStoreId = null;
        String uploadId = null;
        String partSource = null;
        Integer partNumber = null;
        UploadReadSetPartRequest uploadReadSetPartRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UploadReadSetPartResponse response = api.uploadReadSetPart(sequenceStoreId, uploadId, partSource, partNumber, uploadReadSetPartRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
