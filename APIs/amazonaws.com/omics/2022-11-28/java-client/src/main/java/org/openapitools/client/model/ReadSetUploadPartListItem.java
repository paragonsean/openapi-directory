/*
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ReadSetPartSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  The metadata of a single part of a file that was added to a multipart upload. A list of these parts is returned in the response to the ListReadSetUploadParts API. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:59.133938-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReadSetUploadPartListItem {
  public static final String SERIALIZED_NAME_PART_NUMBER = "partNumber";
  @SerializedName(SERIALIZED_NAME_PART_NUMBER)
  private Integer partNumber;

  public static final String SERIALIZED_NAME_PART_SIZE = "partSize";
  @SerializedName(SERIALIZED_NAME_PART_SIZE)
  private Integer partSize;

  public static final String SERIALIZED_NAME_PART_SOURCE = "partSource";
  @SerializedName(SERIALIZED_NAME_PART_SOURCE)
  private ReadSetPartSource partSource;

  public static final String SERIALIZED_NAME_CHECKSUM = "checksum";
  @SerializedName(SERIALIZED_NAME_CHECKSUM)
  private String checksum;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIME = "lastUpdatedTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIME)
  private OffsetDateTime lastUpdatedTime;

  public ReadSetUploadPartListItem() {
  }

  public ReadSetUploadPartListItem partNumber(Integer partNumber) {
    this.partNumber = partNumber;
    return this;
  }

  /**
   * Get partNumber
   * @return partNumber
   */
  @javax.annotation.Nonnull
  public Integer getPartNumber() {
    return partNumber;
  }

  public void setPartNumber(Integer partNumber) {
    this.partNumber = partNumber;
  }


  public ReadSetUploadPartListItem partSize(Integer partSize) {
    this.partSize = partSize;
    return this;
  }

  /**
   * Get partSize
   * @return partSize
   */
  @javax.annotation.Nonnull
  public Integer getPartSize() {
    return partSize;
  }

  public void setPartSize(Integer partSize) {
    this.partSize = partSize;
  }


  public ReadSetUploadPartListItem partSource(ReadSetPartSource partSource) {
    this.partSource = partSource;
    return this;
  }

  /**
   * Get partSource
   * @return partSource
   */
  @javax.annotation.Nonnull
  public ReadSetPartSource getPartSource() {
    return partSource;
  }

  public void setPartSource(ReadSetPartSource partSource) {
    this.partSource = partSource;
  }


  public ReadSetUploadPartListItem checksum(String checksum) {
    this.checksum = checksum;
    return this;
  }

  /**
   * Get checksum
   * @return checksum
   */
  @javax.annotation.Nonnull
  public String getChecksum() {
    return checksum;
  }

  public void setChecksum(String checksum) {
    this.checksum = checksum;
  }


  public ReadSetUploadPartListItem creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public ReadSetUploadPartListItem lastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
    return this;
  }

  /**
   * Get lastUpdatedTime
   * @return lastUpdatedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedTime() {
    return lastUpdatedTime;
  }

  public void setLastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReadSetUploadPartListItem readSetUploadPartListItem = (ReadSetUploadPartListItem) o;
    return Objects.equals(this.partNumber, readSetUploadPartListItem.partNumber) &&
        Objects.equals(this.partSize, readSetUploadPartListItem.partSize) &&
        Objects.equals(this.partSource, readSetUploadPartListItem.partSource) &&
        Objects.equals(this.checksum, readSetUploadPartListItem.checksum) &&
        Objects.equals(this.creationTime, readSetUploadPartListItem.creationTime) &&
        Objects.equals(this.lastUpdatedTime, readSetUploadPartListItem.lastUpdatedTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(partNumber, partSize, partSource, checksum, creationTime, lastUpdatedTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReadSetUploadPartListItem {\n");
    sb.append("    partNumber: ").append(toIndentedString(partNumber)).append("\n");
    sb.append("    partSize: ").append(toIndentedString(partSize)).append("\n");
    sb.append("    partSource: ").append(toIndentedString(partSource)).append("\n");
    sb.append("    checksum: ").append(toIndentedString(checksum)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    lastUpdatedTime: ").append(toIndentedString(lastUpdatedTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("partNumber");
    openapiFields.add("partSize");
    openapiFields.add("partSource");
    openapiFields.add("checksum");
    openapiFields.add("creationTime");
    openapiFields.add("lastUpdatedTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("partNumber");
    openapiRequiredFields.add("partSize");
    openapiRequiredFields.add("partSource");
    openapiRequiredFields.add("checksum");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReadSetUploadPartListItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReadSetUploadPartListItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReadSetUploadPartListItem is not found in the empty JSON string", ReadSetUploadPartListItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReadSetUploadPartListItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReadSetUploadPartListItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReadSetUploadPartListItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `partNumber`
      Integer.validateJsonElement(jsonObj.get("partNumber"));
      // validate the required field `partSize`
      Integer.validateJsonElement(jsonObj.get("partSize"));
      // validate the required field `partSource`
      ReadSetPartSource.validateJsonElement(jsonObj.get("partSource"));
      // validate the required field `checksum`
      String.validateJsonElement(jsonObj.get("checksum"));
      // validate the optional field `creationTime`
      if (jsonObj.get("creationTime") != null && !jsonObj.get("creationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("creationTime"));
      }
      // validate the optional field `lastUpdatedTime`
      if (jsonObj.get("lastUpdatedTime") != null && !jsonObj.get("lastUpdatedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastUpdatedTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReadSetUploadPartListItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReadSetUploadPartListItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReadSetUploadPartListItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReadSetUploadPartListItem.class));

       return (TypeAdapter<T>) new TypeAdapter<ReadSetUploadPartListItem>() {
           @Override
           public void write(JsonWriter out, ReadSetUploadPartListItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReadSetUploadPartListItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReadSetUploadPartListItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReadSetUploadPartListItem
   * @throws IOException if the JSON string is invalid with respect to ReadSetUploadPartListItem
   */
  public static ReadSetUploadPartListItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReadSetUploadPartListItem.class);
  }

  /**
   * Convert an instance of ReadSetUploadPartListItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

