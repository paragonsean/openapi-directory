/*
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.FileType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateMultipartReadSetUploadResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:59.133938-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateMultipartReadSetUploadResponse {
  public static final String SERIALIZED_NAME_SEQUENCE_STORE_ID = "sequenceStoreId";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_STORE_ID)
  private String sequenceStoreId;

  public static final String SERIALIZED_NAME_UPLOAD_ID = "uploadId";
  @SerializedName(SERIALIZED_NAME_UPLOAD_ID)
  private String uploadId;

  public static final String SERIALIZED_NAME_SOURCE_FILE_TYPE = "sourceFileType";
  @SerializedName(SERIALIZED_NAME_SOURCE_FILE_TYPE)
  private FileType sourceFileType;

  public static final String SERIALIZED_NAME_SUBJECT_ID = "subjectId";
  @SerializedName(SERIALIZED_NAME_SUBJECT_ID)
  private String subjectId;

  public static final String SERIALIZED_NAME_SAMPLE_ID = "sampleId";
  @SerializedName(SERIALIZED_NAME_SAMPLE_ID)
  private String sampleId;

  public static final String SERIALIZED_NAME_GENERATED_FROM = "generatedFrom";
  @SerializedName(SERIALIZED_NAME_GENERATED_FROM)
  private String generatedFrom;

  public static final String SERIALIZED_NAME_REFERENCE_ARN = "referenceArn";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ARN)
  private String referenceArn;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public CreateMultipartReadSetUploadResponse() {
  }

  public CreateMultipartReadSetUploadResponse sequenceStoreId(String sequenceStoreId) {
    this.sequenceStoreId = sequenceStoreId;
    return this;
  }

  /**
   * Get sequenceStoreId
   * @return sequenceStoreId
   */
  @javax.annotation.Nonnull
  public String getSequenceStoreId() {
    return sequenceStoreId;
  }

  public void setSequenceStoreId(String sequenceStoreId) {
    this.sequenceStoreId = sequenceStoreId;
  }


  public CreateMultipartReadSetUploadResponse uploadId(String uploadId) {
    this.uploadId = uploadId;
    return this;
  }

  /**
   * Get uploadId
   * @return uploadId
   */
  @javax.annotation.Nonnull
  public String getUploadId() {
    return uploadId;
  }

  public void setUploadId(String uploadId) {
    this.uploadId = uploadId;
  }


  public CreateMultipartReadSetUploadResponse sourceFileType(FileType sourceFileType) {
    this.sourceFileType = sourceFileType;
    return this;
  }

  /**
   * Get sourceFileType
   * @return sourceFileType
   */
  @javax.annotation.Nonnull
  public FileType getSourceFileType() {
    return sourceFileType;
  }

  public void setSourceFileType(FileType sourceFileType) {
    this.sourceFileType = sourceFileType;
  }


  public CreateMultipartReadSetUploadResponse subjectId(String subjectId) {
    this.subjectId = subjectId;
    return this;
  }

  /**
   * Get subjectId
   * @return subjectId
   */
  @javax.annotation.Nonnull
  public String getSubjectId() {
    return subjectId;
  }

  public void setSubjectId(String subjectId) {
    this.subjectId = subjectId;
  }


  public CreateMultipartReadSetUploadResponse sampleId(String sampleId) {
    this.sampleId = sampleId;
    return this;
  }

  /**
   * Get sampleId
   * @return sampleId
   */
  @javax.annotation.Nonnull
  public String getSampleId() {
    return sampleId;
  }

  public void setSampleId(String sampleId) {
    this.sampleId = sampleId;
  }


  public CreateMultipartReadSetUploadResponse generatedFrom(String generatedFrom) {
    this.generatedFrom = generatedFrom;
    return this;
  }

  /**
   * Get generatedFrom
   * @return generatedFrom
   */
  @javax.annotation.Nullable
  public String getGeneratedFrom() {
    return generatedFrom;
  }

  public void setGeneratedFrom(String generatedFrom) {
    this.generatedFrom = generatedFrom;
  }


  public CreateMultipartReadSetUploadResponse referenceArn(String referenceArn) {
    this.referenceArn = referenceArn;
    return this;
  }

  /**
   * Get referenceArn
   * @return referenceArn
   */
  @javax.annotation.Nonnull
  public String getReferenceArn() {
    return referenceArn;
  }

  public void setReferenceArn(String referenceArn) {
    this.referenceArn = referenceArn;
  }


  public CreateMultipartReadSetUploadResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateMultipartReadSetUploadResponse description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateMultipartReadSetUploadResponse tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public CreateMultipartReadSetUploadResponse creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateMultipartReadSetUploadResponse createMultipartReadSetUploadResponse = (CreateMultipartReadSetUploadResponse) o;
    return Objects.equals(this.sequenceStoreId, createMultipartReadSetUploadResponse.sequenceStoreId) &&
        Objects.equals(this.uploadId, createMultipartReadSetUploadResponse.uploadId) &&
        Objects.equals(this.sourceFileType, createMultipartReadSetUploadResponse.sourceFileType) &&
        Objects.equals(this.subjectId, createMultipartReadSetUploadResponse.subjectId) &&
        Objects.equals(this.sampleId, createMultipartReadSetUploadResponse.sampleId) &&
        Objects.equals(this.generatedFrom, createMultipartReadSetUploadResponse.generatedFrom) &&
        Objects.equals(this.referenceArn, createMultipartReadSetUploadResponse.referenceArn) &&
        Objects.equals(this.name, createMultipartReadSetUploadResponse.name) &&
        Objects.equals(this.description, createMultipartReadSetUploadResponse.description) &&
        Objects.equals(this.tags, createMultipartReadSetUploadResponse.tags) &&
        Objects.equals(this.creationTime, createMultipartReadSetUploadResponse.creationTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sequenceStoreId, uploadId, sourceFileType, subjectId, sampleId, generatedFrom, referenceArn, name, description, tags, creationTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateMultipartReadSetUploadResponse {\n");
    sb.append("    sequenceStoreId: ").append(toIndentedString(sequenceStoreId)).append("\n");
    sb.append("    uploadId: ").append(toIndentedString(uploadId)).append("\n");
    sb.append("    sourceFileType: ").append(toIndentedString(sourceFileType)).append("\n");
    sb.append("    subjectId: ").append(toIndentedString(subjectId)).append("\n");
    sb.append("    sampleId: ").append(toIndentedString(sampleId)).append("\n");
    sb.append("    generatedFrom: ").append(toIndentedString(generatedFrom)).append("\n");
    sb.append("    referenceArn: ").append(toIndentedString(referenceArn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sequenceStoreId");
    openapiFields.add("uploadId");
    openapiFields.add("sourceFileType");
    openapiFields.add("subjectId");
    openapiFields.add("sampleId");
    openapiFields.add("generatedFrom");
    openapiFields.add("referenceArn");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("tags");
    openapiFields.add("creationTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sequenceStoreId");
    openapiRequiredFields.add("uploadId");
    openapiRequiredFields.add("sourceFileType");
    openapiRequiredFields.add("subjectId");
    openapiRequiredFields.add("sampleId");
    openapiRequiredFields.add("referenceArn");
    openapiRequiredFields.add("creationTime");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateMultipartReadSetUploadResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateMultipartReadSetUploadResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateMultipartReadSetUploadResponse is not found in the empty JSON string", CreateMultipartReadSetUploadResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateMultipartReadSetUploadResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateMultipartReadSetUploadResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateMultipartReadSetUploadResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `sequenceStoreId`
      String.validateJsonElement(jsonObj.get("sequenceStoreId"));
      // validate the required field `uploadId`
      String.validateJsonElement(jsonObj.get("uploadId"));
      // validate the required field `sourceFileType`
      FileType.validateJsonElement(jsonObj.get("sourceFileType"));
      // validate the required field `subjectId`
      String.validateJsonElement(jsonObj.get("subjectId"));
      // validate the required field `sampleId`
      String.validateJsonElement(jsonObj.get("sampleId"));
      // validate the optional field `generatedFrom`
      if (jsonObj.get("generatedFrom") != null && !jsonObj.get("generatedFrom").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("generatedFrom"));
      }
      // validate the required field `referenceArn`
      String.validateJsonElement(jsonObj.get("referenceArn"));
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the required field `creationTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("creationTime"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateMultipartReadSetUploadResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateMultipartReadSetUploadResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateMultipartReadSetUploadResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateMultipartReadSetUploadResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateMultipartReadSetUploadResponse>() {
           @Override
           public void write(JsonWriter out, CreateMultipartReadSetUploadResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateMultipartReadSetUploadResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateMultipartReadSetUploadResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateMultipartReadSetUploadResponse
   * @throws IOException if the JSON string is invalid with respect to CreateMultipartReadSetUploadResponse
   */
  public static CreateMultipartReadSetUploadResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateMultipartReadSetUploadResponse.class);
  }

  /**
   * Convert an instance of CreateMultipartReadSetUploadResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

