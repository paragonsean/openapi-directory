/*
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CreateVariantStoreResponseReference;
import org.openapitools.client.model.GetAnnotationStoreResponseSseConfig;
import org.openapitools.client.model.StoreStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A variant store.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:59.133938-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VariantStoreItem {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private CreateVariantStoreResponseReference reference;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StoreStatus status;

  public static final String SERIALIZED_NAME_STORE_ARN = "storeArn";
  @SerializedName(SERIALIZED_NAME_STORE_ARN)
  private String storeArn;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SSE_CONFIG = "sseConfig";
  @SerializedName(SERIALIZED_NAME_SSE_CONFIG)
  private GetAnnotationStoreResponseSseConfig sseConfig;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private OffsetDateTime updateTime;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "statusMessage";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private String statusMessage;

  public static final String SERIALIZED_NAME_STORE_SIZE_BYTES = "storeSizeBytes";
  @SerializedName(SERIALIZED_NAME_STORE_SIZE_BYTES)
  private Integer storeSizeBytes;

  public VariantStoreItem() {
  }

  public VariantStoreItem id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public VariantStoreItem reference(CreateVariantStoreResponseReference reference) {
    this.reference = reference;
    return this;
  }

  /**
   * Get reference
   * @return reference
   */
  @javax.annotation.Nonnull
  public CreateVariantStoreResponseReference getReference() {
    return reference;
  }

  public void setReference(CreateVariantStoreResponseReference reference) {
    this.reference = reference;
  }


  public VariantStoreItem status(StoreStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public StoreStatus getStatus() {
    return status;
  }

  public void setStatus(StoreStatus status) {
    this.status = status;
  }


  public VariantStoreItem storeArn(String storeArn) {
    this.storeArn = storeArn;
    return this;
  }

  /**
   * Get storeArn
   * @return storeArn
   */
  @javax.annotation.Nonnull
  public String getStoreArn() {
    return storeArn;
  }

  public void setStoreArn(String storeArn) {
    this.storeArn = storeArn;
  }


  public VariantStoreItem name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public VariantStoreItem description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public VariantStoreItem sseConfig(GetAnnotationStoreResponseSseConfig sseConfig) {
    this.sseConfig = sseConfig;
    return this;
  }

  /**
   * Get sseConfig
   * @return sseConfig
   */
  @javax.annotation.Nonnull
  public GetAnnotationStoreResponseSseConfig getSseConfig() {
    return sseConfig;
  }

  public void setSseConfig(GetAnnotationStoreResponseSseConfig sseConfig) {
    this.sseConfig = sseConfig;
  }


  public VariantStoreItem creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public VariantStoreItem updateTime(OffsetDateTime updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Get updateTime
   * @return updateTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(OffsetDateTime updateTime) {
    this.updateTime = updateTime;
  }


  public VariantStoreItem statusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  /**
   * Get statusMessage
   * @return statusMessage
   */
  @javax.annotation.Nonnull
  public String getStatusMessage() {
    return statusMessage;
  }

  public void setStatusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
  }


  public VariantStoreItem storeSizeBytes(Integer storeSizeBytes) {
    this.storeSizeBytes = storeSizeBytes;
    return this;
  }

  /**
   * Get storeSizeBytes
   * @return storeSizeBytes
   */
  @javax.annotation.Nonnull
  public Integer getStoreSizeBytes() {
    return storeSizeBytes;
  }

  public void setStoreSizeBytes(Integer storeSizeBytes) {
    this.storeSizeBytes = storeSizeBytes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VariantStoreItem variantStoreItem = (VariantStoreItem) o;
    return Objects.equals(this.id, variantStoreItem.id) &&
        Objects.equals(this.reference, variantStoreItem.reference) &&
        Objects.equals(this.status, variantStoreItem.status) &&
        Objects.equals(this.storeArn, variantStoreItem.storeArn) &&
        Objects.equals(this.name, variantStoreItem.name) &&
        Objects.equals(this.description, variantStoreItem.description) &&
        Objects.equals(this.sseConfig, variantStoreItem.sseConfig) &&
        Objects.equals(this.creationTime, variantStoreItem.creationTime) &&
        Objects.equals(this.updateTime, variantStoreItem.updateTime) &&
        Objects.equals(this.statusMessage, variantStoreItem.statusMessage) &&
        Objects.equals(this.storeSizeBytes, variantStoreItem.storeSizeBytes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, reference, status, storeArn, name, description, sseConfig, creationTime, updateTime, statusMessage, storeSizeBytes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VariantStoreItem {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    storeArn: ").append(toIndentedString(storeArn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    sseConfig: ").append(toIndentedString(sseConfig)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    storeSizeBytes: ").append(toIndentedString(storeSizeBytes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("reference");
    openapiFields.add("status");
    openapiFields.add("storeArn");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("sseConfig");
    openapiFields.add("creationTime");
    openapiFields.add("updateTime");
    openapiFields.add("statusMessage");
    openapiFields.add("storeSizeBytes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("reference");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("storeArn");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("sseConfig");
    openapiRequiredFields.add("creationTime");
    openapiRequiredFields.add("updateTime");
    openapiRequiredFields.add("statusMessage");
    openapiRequiredFields.add("storeSizeBytes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VariantStoreItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VariantStoreItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VariantStoreItem is not found in the empty JSON string", VariantStoreItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VariantStoreItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VariantStoreItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VariantStoreItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `id`
      String.validateJsonElement(jsonObj.get("id"));
      // validate the required field `reference`
      CreateVariantStoreResponseReference.validateJsonElement(jsonObj.get("reference"));
      // validate the required field `status`
      StoreStatus.validateJsonElement(jsonObj.get("status"));
      // validate the required field `storeArn`
      String.validateJsonElement(jsonObj.get("storeArn"));
      // validate the required field `name`
      String.validateJsonElement(jsonObj.get("name"));
      // validate the required field `description`
      String.validateJsonElement(jsonObj.get("description"));
      // validate the required field `sseConfig`
      GetAnnotationStoreResponseSseConfig.validateJsonElement(jsonObj.get("sseConfig"));
      // validate the required field `creationTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("creationTime"));
      // validate the required field `updateTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("updateTime"));
      // validate the required field `statusMessage`
      String.validateJsonElement(jsonObj.get("statusMessage"));
      // validate the required field `storeSizeBytes`
      Integer.validateJsonElement(jsonObj.get("storeSizeBytes"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VariantStoreItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VariantStoreItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VariantStoreItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VariantStoreItem.class));

       return (TypeAdapter<T>) new TypeAdapter<VariantStoreItem>() {
           @Override
           public void write(JsonWriter out, VariantStoreItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VariantStoreItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VariantStoreItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VariantStoreItem
   * @throws IOException if the JSON string is invalid with respect to VariantStoreItem
   */
  public static VariantStoreItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VariantStoreItem.class);
  }

  /**
   * Convert an instance of VariantStoreItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

