/*
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TsvOptionsReadOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:59.133938-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TsvOptionsReadOptions {
  public static final String SERIALIZED_NAME_SEP = "sep";
  @SerializedName(SERIALIZED_NAME_SEP)
  private String sep;

  public static final String SERIALIZED_NAME_ENCODING = "encoding";
  @SerializedName(SERIALIZED_NAME_ENCODING)
  private String encoding;

  public static final String SERIALIZED_NAME_QUOTE = "quote";
  @SerializedName(SERIALIZED_NAME_QUOTE)
  private String quote;

  public static final String SERIALIZED_NAME_QUOTE_ALL = "quoteAll";
  @SerializedName(SERIALIZED_NAME_QUOTE_ALL)
  private Boolean quoteAll;

  public static final String SERIALIZED_NAME_ESCAPE = "escape";
  @SerializedName(SERIALIZED_NAME_ESCAPE)
  private String escape;

  public static final String SERIALIZED_NAME_ESCAPE_QUOTES = "escapeQuotes";
  @SerializedName(SERIALIZED_NAME_ESCAPE_QUOTES)
  private Boolean escapeQuotes;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_HEADER = "header";
  @SerializedName(SERIALIZED_NAME_HEADER)
  private Boolean header;

  public static final String SERIALIZED_NAME_LINE_SEP = "lineSep";
  @SerializedName(SERIALIZED_NAME_LINE_SEP)
  private String lineSep;

  public TsvOptionsReadOptions() {
  }

  public TsvOptionsReadOptions sep(String sep) {
    this.sep = sep;
    return this;
  }

  /**
   * Get sep
   * @return sep
   */
  @javax.annotation.Nullable
  public String getSep() {
    return sep;
  }

  public void setSep(String sep) {
    this.sep = sep;
  }


  public TsvOptionsReadOptions encoding(String encoding) {
    this.encoding = encoding;
    return this;
  }

  /**
   * Get encoding
   * @return encoding
   */
  @javax.annotation.Nullable
  public String getEncoding() {
    return encoding;
  }

  public void setEncoding(String encoding) {
    this.encoding = encoding;
  }


  public TsvOptionsReadOptions quote(String quote) {
    this.quote = quote;
    return this;
  }

  /**
   * Get quote
   * @return quote
   */
  @javax.annotation.Nullable
  public String getQuote() {
    return quote;
  }

  public void setQuote(String quote) {
    this.quote = quote;
  }


  public TsvOptionsReadOptions quoteAll(Boolean quoteAll) {
    this.quoteAll = quoteAll;
    return this;
  }

  /**
   * Get quoteAll
   * @return quoteAll
   */
  @javax.annotation.Nullable
  public Boolean getQuoteAll() {
    return quoteAll;
  }

  public void setQuoteAll(Boolean quoteAll) {
    this.quoteAll = quoteAll;
  }


  public TsvOptionsReadOptions escape(String escape) {
    this.escape = escape;
    return this;
  }

  /**
   * Get escape
   * @return escape
   */
  @javax.annotation.Nullable
  public String getEscape() {
    return escape;
  }

  public void setEscape(String escape) {
    this.escape = escape;
  }


  public TsvOptionsReadOptions escapeQuotes(Boolean escapeQuotes) {
    this.escapeQuotes = escapeQuotes;
    return this;
  }

  /**
   * Get escapeQuotes
   * @return escapeQuotes
   */
  @javax.annotation.Nullable
  public Boolean getEscapeQuotes() {
    return escapeQuotes;
  }

  public void setEscapeQuotes(Boolean escapeQuotes) {
    this.escapeQuotes = escapeQuotes;
  }


  public TsvOptionsReadOptions comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public TsvOptionsReadOptions header(Boolean header) {
    this.header = header;
    return this;
  }

  /**
   * Get header
   * @return header
   */
  @javax.annotation.Nullable
  public Boolean getHeader() {
    return header;
  }

  public void setHeader(Boolean header) {
    this.header = header;
  }


  public TsvOptionsReadOptions lineSep(String lineSep) {
    this.lineSep = lineSep;
    return this;
  }

  /**
   * Get lineSep
   * @return lineSep
   */
  @javax.annotation.Nullable
  public String getLineSep() {
    return lineSep;
  }

  public void setLineSep(String lineSep) {
    this.lineSep = lineSep;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TsvOptionsReadOptions tsvOptionsReadOptions = (TsvOptionsReadOptions) o;
    return Objects.equals(this.sep, tsvOptionsReadOptions.sep) &&
        Objects.equals(this.encoding, tsvOptionsReadOptions.encoding) &&
        Objects.equals(this.quote, tsvOptionsReadOptions.quote) &&
        Objects.equals(this.quoteAll, tsvOptionsReadOptions.quoteAll) &&
        Objects.equals(this.escape, tsvOptionsReadOptions.escape) &&
        Objects.equals(this.escapeQuotes, tsvOptionsReadOptions.escapeQuotes) &&
        Objects.equals(this.comment, tsvOptionsReadOptions.comment) &&
        Objects.equals(this.header, tsvOptionsReadOptions.header) &&
        Objects.equals(this.lineSep, tsvOptionsReadOptions.lineSep);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sep, encoding, quote, quoteAll, escape, escapeQuotes, comment, header, lineSep);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TsvOptionsReadOptions {\n");
    sb.append("    sep: ").append(toIndentedString(sep)).append("\n");
    sb.append("    encoding: ").append(toIndentedString(encoding)).append("\n");
    sb.append("    quote: ").append(toIndentedString(quote)).append("\n");
    sb.append("    quoteAll: ").append(toIndentedString(quoteAll)).append("\n");
    sb.append("    escape: ").append(toIndentedString(escape)).append("\n");
    sb.append("    escapeQuotes: ").append(toIndentedString(escapeQuotes)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    lineSep: ").append(toIndentedString(lineSep)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sep");
    openapiFields.add("encoding");
    openapiFields.add("quote");
    openapiFields.add("quoteAll");
    openapiFields.add("escape");
    openapiFields.add("escapeQuotes");
    openapiFields.add("comment");
    openapiFields.add("header");
    openapiFields.add("lineSep");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TsvOptionsReadOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TsvOptionsReadOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TsvOptionsReadOptions is not found in the empty JSON string", TsvOptionsReadOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TsvOptionsReadOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TsvOptionsReadOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `sep`
      if (jsonObj.get("sep") != null && !jsonObj.get("sep").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("sep"));
      }
      // validate the optional field `encoding`
      if (jsonObj.get("encoding") != null && !jsonObj.get("encoding").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("encoding"));
      }
      // validate the optional field `quote`
      if (jsonObj.get("quote") != null && !jsonObj.get("quote").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("quote"));
      }
      // validate the optional field `quoteAll`
      if (jsonObj.get("quoteAll") != null && !jsonObj.get("quoteAll").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("quoteAll"));
      }
      // validate the optional field `escape`
      if (jsonObj.get("escape") != null && !jsonObj.get("escape").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("escape"));
      }
      // validate the optional field `escapeQuotes`
      if (jsonObj.get("escapeQuotes") != null && !jsonObj.get("escapeQuotes").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("escapeQuotes"));
      }
      // validate the optional field `comment`
      if (jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("comment"));
      }
      // validate the optional field `header`
      if (jsonObj.get("header") != null && !jsonObj.get("header").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("header"));
      }
      // validate the optional field `lineSep`
      if (jsonObj.get("lineSep") != null && !jsonObj.get("lineSep").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("lineSep"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TsvOptionsReadOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TsvOptionsReadOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TsvOptionsReadOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TsvOptionsReadOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<TsvOptionsReadOptions>() {
           @Override
           public void write(JsonWriter out, TsvOptionsReadOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TsvOptionsReadOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TsvOptionsReadOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TsvOptionsReadOptions
   * @throws IOException if the JSON string is invalid with respect to TsvOptionsReadOptions
   */
  public static TsvOptionsReadOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TsvOptionsReadOptions.class);
  }

  /**
   * Convert an instance of TsvOptionsReadOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

