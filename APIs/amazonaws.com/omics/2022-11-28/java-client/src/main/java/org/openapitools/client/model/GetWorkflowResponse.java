/*
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.Accelerators;
import org.openapitools.client.model.WorkflowEngine;
import org.openapitools.client.model.WorkflowStatus;
import org.openapitools.client.model.WorkflowType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetWorkflowResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:59.133938-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetWorkflowResponse {
  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private WorkflowStatus status;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private WorkflowType type;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENGINE = "engine";
  @SerializedName(SERIALIZED_NAME_ENGINE)
  private WorkflowEngine engine;

  public static final String SERIALIZED_NAME_DEFINITION = "definition";
  @SerializedName(SERIALIZED_NAME_DEFINITION)
  private String definition;

  public static final String SERIALIZED_NAME_MAIN = "main";
  @SerializedName(SERIALIZED_NAME_MAIN)
  private String main;

  public static final String SERIALIZED_NAME_DIGEST = "digest";
  @SerializedName(SERIALIZED_NAME_DIGEST)
  private String digest;

  public static final String SERIALIZED_NAME_PARAMETER_TEMPLATE = "parameterTemplate";
  @SerializedName(SERIALIZED_NAME_PARAMETER_TEMPLATE)
  private Map parameterTemplate;

  public static final String SERIALIZED_NAME_STORAGE_CAPACITY = "storageCapacity";
  @SerializedName(SERIALIZED_NAME_STORAGE_CAPACITY)
  private Integer storageCapacity;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "statusMessage";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private String statusMessage;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map metadata;

  public static final String SERIALIZED_NAME_ACCELERATORS = "accelerators";
  @SerializedName(SERIALIZED_NAME_ACCELERATORS)
  private Accelerators accelerators;

  public GetWorkflowResponse() {
  }

  public GetWorkflowResponse arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public GetWorkflowResponse id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GetWorkflowResponse status(WorkflowStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public WorkflowStatus getStatus() {
    return status;
  }

  public void setStatus(WorkflowStatus status) {
    this.status = status;
  }


  public GetWorkflowResponse type(WorkflowType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public WorkflowType getType() {
    return type;
  }

  public void setType(WorkflowType type) {
    this.type = type;
  }


  public GetWorkflowResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetWorkflowResponse description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GetWorkflowResponse engine(WorkflowEngine engine) {
    this.engine = engine;
    return this;
  }

  /**
   * Get engine
   * @return engine
   */
  @javax.annotation.Nullable
  public WorkflowEngine getEngine() {
    return engine;
  }

  public void setEngine(WorkflowEngine engine) {
    this.engine = engine;
  }


  public GetWorkflowResponse definition(String definition) {
    this.definition = definition;
    return this;
  }

  /**
   * Get definition
   * @return definition
   */
  @javax.annotation.Nullable
  public String getDefinition() {
    return definition;
  }

  public void setDefinition(String definition) {
    this.definition = definition;
  }


  public GetWorkflowResponse main(String main) {
    this.main = main;
    return this;
  }

  /**
   * Get main
   * @return main
   */
  @javax.annotation.Nullable
  public String getMain() {
    return main;
  }

  public void setMain(String main) {
    this.main = main;
  }


  public GetWorkflowResponse digest(String digest) {
    this.digest = digest;
    return this;
  }

  /**
   * Get digest
   * @return digest
   */
  @javax.annotation.Nullable
  public String getDigest() {
    return digest;
  }

  public void setDigest(String digest) {
    this.digest = digest;
  }


  public GetWorkflowResponse parameterTemplate(Map parameterTemplate) {
    this.parameterTemplate = parameterTemplate;
    return this;
  }

  /**
   * Get parameterTemplate
   * @return parameterTemplate
   */
  @javax.annotation.Nullable
  public Map getParameterTemplate() {
    return parameterTemplate;
  }

  public void setParameterTemplate(Map parameterTemplate) {
    this.parameterTemplate = parameterTemplate;
  }


  public GetWorkflowResponse storageCapacity(Integer storageCapacity) {
    this.storageCapacity = storageCapacity;
    return this;
  }

  /**
   * Get storageCapacity
   * @return storageCapacity
   */
  @javax.annotation.Nullable
  public Integer getStorageCapacity() {
    return storageCapacity;
  }

  public void setStorageCapacity(Integer storageCapacity) {
    this.storageCapacity = storageCapacity;
  }


  public GetWorkflowResponse creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public GetWorkflowResponse statusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  /**
   * Get statusMessage
   * @return statusMessage
   */
  @javax.annotation.Nullable
  public String getStatusMessage() {
    return statusMessage;
  }

  public void setStatusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
  }


  public GetWorkflowResponse tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public GetWorkflowResponse metadata(Map metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map getMetadata() {
    return metadata;
  }

  public void setMetadata(Map metadata) {
    this.metadata = metadata;
  }


  public GetWorkflowResponse accelerators(Accelerators accelerators) {
    this.accelerators = accelerators;
    return this;
  }

  /**
   * Get accelerators
   * @return accelerators
   */
  @javax.annotation.Nullable
  public Accelerators getAccelerators() {
    return accelerators;
  }

  public void setAccelerators(Accelerators accelerators) {
    this.accelerators = accelerators;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetWorkflowResponse getWorkflowResponse = (GetWorkflowResponse) o;
    return Objects.equals(this.arn, getWorkflowResponse.arn) &&
        Objects.equals(this.id, getWorkflowResponse.id) &&
        Objects.equals(this.status, getWorkflowResponse.status) &&
        Objects.equals(this.type, getWorkflowResponse.type) &&
        Objects.equals(this.name, getWorkflowResponse.name) &&
        Objects.equals(this.description, getWorkflowResponse.description) &&
        Objects.equals(this.engine, getWorkflowResponse.engine) &&
        Objects.equals(this.definition, getWorkflowResponse.definition) &&
        Objects.equals(this.main, getWorkflowResponse.main) &&
        Objects.equals(this.digest, getWorkflowResponse.digest) &&
        Objects.equals(this.parameterTemplate, getWorkflowResponse.parameterTemplate) &&
        Objects.equals(this.storageCapacity, getWorkflowResponse.storageCapacity) &&
        Objects.equals(this.creationTime, getWorkflowResponse.creationTime) &&
        Objects.equals(this.statusMessage, getWorkflowResponse.statusMessage) &&
        Objects.equals(this.tags, getWorkflowResponse.tags) &&
        Objects.equals(this.metadata, getWorkflowResponse.metadata) &&
        Objects.equals(this.accelerators, getWorkflowResponse.accelerators);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, id, status, type, name, description, engine, definition, main, digest, parameterTemplate, storageCapacity, creationTime, statusMessage, tags, metadata, accelerators);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetWorkflowResponse {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    definition: ").append(toIndentedString(definition)).append("\n");
    sb.append("    main: ").append(toIndentedString(main)).append("\n");
    sb.append("    digest: ").append(toIndentedString(digest)).append("\n");
    sb.append("    parameterTemplate: ").append(toIndentedString(parameterTemplate)).append("\n");
    sb.append("    storageCapacity: ").append(toIndentedString(storageCapacity)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    accelerators: ").append(toIndentedString(accelerators)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arn");
    openapiFields.add("id");
    openapiFields.add("status");
    openapiFields.add("type");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("engine");
    openapiFields.add("definition");
    openapiFields.add("main");
    openapiFields.add("digest");
    openapiFields.add("parameterTemplate");
    openapiFields.add("storageCapacity");
    openapiFields.add("creationTime");
    openapiFields.add("statusMessage");
    openapiFields.add("tags");
    openapiFields.add("metadata");
    openapiFields.add("accelerators");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetWorkflowResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetWorkflowResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetWorkflowResponse is not found in the empty JSON string", GetWorkflowResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetWorkflowResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetWorkflowResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `id`
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("id"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        WorkflowStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        WorkflowType.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `engine`
      if (jsonObj.get("engine") != null && !jsonObj.get("engine").isJsonNull()) {
        WorkflowEngine.validateJsonElement(jsonObj.get("engine"));
      }
      // validate the optional field `definition`
      if (jsonObj.get("definition") != null && !jsonObj.get("definition").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("definition"));
      }
      // validate the optional field `main`
      if (jsonObj.get("main") != null && !jsonObj.get("main").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("main"));
      }
      // validate the optional field `digest`
      if (jsonObj.get("digest") != null && !jsonObj.get("digest").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("digest"));
      }
      // validate the optional field `parameterTemplate`
      if (jsonObj.get("parameterTemplate") != null && !jsonObj.get("parameterTemplate").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("parameterTemplate"));
      }
      // validate the optional field `storageCapacity`
      if (jsonObj.get("storageCapacity") != null && !jsonObj.get("storageCapacity").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("storageCapacity"));
      }
      // validate the optional field `creationTime`
      if (jsonObj.get("creationTime") != null && !jsonObj.get("creationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("creationTime"));
      }
      // validate the optional field `statusMessage`
      if (jsonObj.get("statusMessage") != null && !jsonObj.get("statusMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("statusMessage"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("metadata"));
      }
      // validate the optional field `accelerators`
      if (jsonObj.get("accelerators") != null && !jsonObj.get("accelerators").isJsonNull()) {
        Accelerators.validateJsonElement(jsonObj.get("accelerators"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetWorkflowResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetWorkflowResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetWorkflowResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetWorkflowResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetWorkflowResponse>() {
           @Override
           public void write(JsonWriter out, GetWorkflowResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetWorkflowResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetWorkflowResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetWorkflowResponse
   * @throws IOException if the JSON string is invalid with respect to GetWorkflowResponse
   */
  public static GetWorkflowResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetWorkflowResponse.class);
  }

  /**
   * Convert an instance of GetWorkflowResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

