/*
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.JobStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A variant import job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:59.133938-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VariantImportJobItem {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DESTINATION_NAME = "destinationName";
  @SerializedName(SERIALIZED_NAME_DESTINATION_NAME)
  private String destinationName;

  public static final String SERIALIZED_NAME_ROLE_ARN = "roleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private JobStatus status;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private OffsetDateTime updateTime;

  public static final String SERIALIZED_NAME_COMPLETION_TIME = "completionTime";
  @SerializedName(SERIALIZED_NAME_COMPLETION_TIME)
  private OffsetDateTime completionTime;

  public static final String SERIALIZED_NAME_RUN_LEFT_NORMALIZATION = "runLeftNormalization";
  @SerializedName(SERIALIZED_NAME_RUN_LEFT_NORMALIZATION)
  private Boolean runLeftNormalization;

  public static final String SERIALIZED_NAME_ANNOTATION_FIELDS = "annotationFields";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_FIELDS)
  private Map annotationFields;

  public VariantImportJobItem() {
  }

  public VariantImportJobItem id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public VariantImportJobItem destinationName(String destinationName) {
    this.destinationName = destinationName;
    return this;
  }

  /**
   * Get destinationName
   * @return destinationName
   */
  @javax.annotation.Nonnull
  public String getDestinationName() {
    return destinationName;
  }

  public void setDestinationName(String destinationName) {
    this.destinationName = destinationName;
  }


  public VariantImportJobItem roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * Get roleArn
   * @return roleArn
   */
  @javax.annotation.Nonnull
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public VariantImportJobItem status(JobStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public JobStatus getStatus() {
    return status;
  }

  public void setStatus(JobStatus status) {
    this.status = status;
  }


  public VariantImportJobItem creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public VariantImportJobItem updateTime(OffsetDateTime updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Get updateTime
   * @return updateTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(OffsetDateTime updateTime) {
    this.updateTime = updateTime;
  }


  public VariantImportJobItem completionTime(OffsetDateTime completionTime) {
    this.completionTime = completionTime;
    return this;
  }

  /**
   * Get completionTime
   * @return completionTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCompletionTime() {
    return completionTime;
  }

  public void setCompletionTime(OffsetDateTime completionTime) {
    this.completionTime = completionTime;
  }


  public VariantImportJobItem runLeftNormalization(Boolean runLeftNormalization) {
    this.runLeftNormalization = runLeftNormalization;
    return this;
  }

  /**
   * Get runLeftNormalization
   * @return runLeftNormalization
   */
  @javax.annotation.Nullable
  public Boolean getRunLeftNormalization() {
    return runLeftNormalization;
  }

  public void setRunLeftNormalization(Boolean runLeftNormalization) {
    this.runLeftNormalization = runLeftNormalization;
  }


  public VariantImportJobItem annotationFields(Map annotationFields) {
    this.annotationFields = annotationFields;
    return this;
  }

  /**
   * Get annotationFields
   * @return annotationFields
   */
  @javax.annotation.Nullable
  public Map getAnnotationFields() {
    return annotationFields;
  }

  public void setAnnotationFields(Map annotationFields) {
    this.annotationFields = annotationFields;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VariantImportJobItem variantImportJobItem = (VariantImportJobItem) o;
    return Objects.equals(this.id, variantImportJobItem.id) &&
        Objects.equals(this.destinationName, variantImportJobItem.destinationName) &&
        Objects.equals(this.roleArn, variantImportJobItem.roleArn) &&
        Objects.equals(this.status, variantImportJobItem.status) &&
        Objects.equals(this.creationTime, variantImportJobItem.creationTime) &&
        Objects.equals(this.updateTime, variantImportJobItem.updateTime) &&
        Objects.equals(this.completionTime, variantImportJobItem.completionTime) &&
        Objects.equals(this.runLeftNormalization, variantImportJobItem.runLeftNormalization) &&
        Objects.equals(this.annotationFields, variantImportJobItem.annotationFields);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, destinationName, roleArn, status, creationTime, updateTime, completionTime, runLeftNormalization, annotationFields);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VariantImportJobItem {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    destinationName: ").append(toIndentedString(destinationName)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    completionTime: ").append(toIndentedString(completionTime)).append("\n");
    sb.append("    runLeftNormalization: ").append(toIndentedString(runLeftNormalization)).append("\n");
    sb.append("    annotationFields: ").append(toIndentedString(annotationFields)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("destinationName");
    openapiFields.add("roleArn");
    openapiFields.add("status");
    openapiFields.add("creationTime");
    openapiFields.add("updateTime");
    openapiFields.add("completionTime");
    openapiFields.add("runLeftNormalization");
    openapiFields.add("annotationFields");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("destinationName");
    openapiRequiredFields.add("roleArn");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("creationTime");
    openapiRequiredFields.add("updateTime");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VariantImportJobItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VariantImportJobItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VariantImportJobItem is not found in the empty JSON string", VariantImportJobItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VariantImportJobItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VariantImportJobItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VariantImportJobItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `id`
      String.validateJsonElement(jsonObj.get("id"));
      // validate the required field `destinationName`
      String.validateJsonElement(jsonObj.get("destinationName"));
      // validate the required field `roleArn`
      String.validateJsonElement(jsonObj.get("roleArn"));
      // validate the required field `status`
      JobStatus.validateJsonElement(jsonObj.get("status"));
      // validate the required field `creationTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("creationTime"));
      // validate the required field `updateTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("updateTime"));
      // validate the optional field `completionTime`
      if (jsonObj.get("completionTime") != null && !jsonObj.get("completionTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("completionTime"));
      }
      // validate the optional field `runLeftNormalization`
      if (jsonObj.get("runLeftNormalization") != null && !jsonObj.get("runLeftNormalization").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("runLeftNormalization"));
      }
      // validate the optional field `annotationFields`
      if (jsonObj.get("annotationFields") != null && !jsonObj.get("annotationFields").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("annotationFields"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VariantImportJobItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VariantImportJobItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VariantImportJobItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VariantImportJobItem.class));

       return (TypeAdapter<T>) new TypeAdapter<VariantImportJobItem>() {
           @Override
           public void write(JsonWriter out, VariantImportJobItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VariantImportJobItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VariantImportJobItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VariantImportJobItem
   * @throws IOException if the JSON string is invalid with respect to VariantImportJobItem
   */
  public static VariantImportJobItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VariantImportJobItem.class);
  }

  /**
   * Convert an instance of VariantImportJobItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

