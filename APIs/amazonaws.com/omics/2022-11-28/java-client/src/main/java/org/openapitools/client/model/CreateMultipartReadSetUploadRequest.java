/*
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateMultipartReadSetUploadRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:59.133938-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateMultipartReadSetUploadRequest {
  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  /**
   *  The type of file being uploaded. 
   */
  @JsonAdapter(SourceFileTypeEnum.Adapter.class)
  public enum SourceFileTypeEnum {
    FASTQ("FASTQ"),
    
    BAM("BAM"),
    
    CRAM("CRAM");

    private String value;

    SourceFileTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceFileTypeEnum fromValue(String value) {
      for (SourceFileTypeEnum b : SourceFileTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceFileTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceFileTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceFileTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceFileTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourceFileTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCE_FILE_TYPE = "sourceFileType";
  @SerializedName(SERIALIZED_NAME_SOURCE_FILE_TYPE)
  private SourceFileTypeEnum sourceFileType;

  public static final String SERIALIZED_NAME_SUBJECT_ID = "subjectId";
  @SerializedName(SERIALIZED_NAME_SUBJECT_ID)
  private String subjectId;

  public static final String SERIALIZED_NAME_SAMPLE_ID = "sampleId";
  @SerializedName(SERIALIZED_NAME_SAMPLE_ID)
  private String sampleId;

  public static final String SERIALIZED_NAME_GENERATED_FROM = "generatedFrom";
  @SerializedName(SERIALIZED_NAME_GENERATED_FROM)
  private String generatedFrom;

  public static final String SERIALIZED_NAME_REFERENCE_ARN = "referenceArn";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ARN)
  private String referenceArn;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateMultipartReadSetUploadRequest() {
  }

  public CreateMultipartReadSetUploadRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   *  An idempotency token that can be used to avoid triggering multiple multipart uploads. 
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public CreateMultipartReadSetUploadRequest sourceFileType(SourceFileTypeEnum sourceFileType) {
    this.sourceFileType = sourceFileType;
    return this;
  }

  /**
   *  The type of file being uploaded. 
   * @return sourceFileType
   */
  @javax.annotation.Nonnull
  public SourceFileTypeEnum getSourceFileType() {
    return sourceFileType;
  }

  public void setSourceFileType(SourceFileTypeEnum sourceFileType) {
    this.sourceFileType = sourceFileType;
  }


  public CreateMultipartReadSetUploadRequest subjectId(String subjectId) {
    this.subjectId = subjectId;
    return this;
  }

  /**
   *  The source&#39;s subject ID. 
   * @return subjectId
   */
  @javax.annotation.Nonnull
  public String getSubjectId() {
    return subjectId;
  }

  public void setSubjectId(String subjectId) {
    this.subjectId = subjectId;
  }


  public CreateMultipartReadSetUploadRequest sampleId(String sampleId) {
    this.sampleId = sampleId;
    return this;
  }

  /**
   *  The source&#39;s sample ID. 
   * @return sampleId
   */
  @javax.annotation.Nonnull
  public String getSampleId() {
    return sampleId;
  }

  public void setSampleId(String sampleId) {
    this.sampleId = sampleId;
  }


  public CreateMultipartReadSetUploadRequest generatedFrom(String generatedFrom) {
    this.generatedFrom = generatedFrom;
    return this;
  }

  /**
   *  Where the source originated. 
   * @return generatedFrom
   */
  @javax.annotation.Nullable
  public String getGeneratedFrom() {
    return generatedFrom;
  }

  public void setGeneratedFrom(String generatedFrom) {
    this.generatedFrom = generatedFrom;
  }


  public CreateMultipartReadSetUploadRequest referenceArn(String referenceArn) {
    this.referenceArn = referenceArn;
    return this;
  }

  /**
   *  The ARN of the reference. 
   * @return referenceArn
   */
  @javax.annotation.Nonnull
  public String getReferenceArn() {
    return referenceArn;
  }

  public void setReferenceArn(String referenceArn) {
    this.referenceArn = referenceArn;
  }


  public CreateMultipartReadSetUploadRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   *  The name of the read set. 
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateMultipartReadSetUploadRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   *  The description of the read set. 
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateMultipartReadSetUploadRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateMultipartReadSetUploadRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   *  Any tags to add to the read set. 
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateMultipartReadSetUploadRequest createMultipartReadSetUploadRequest = (CreateMultipartReadSetUploadRequest) o;
    return Objects.equals(this.clientToken, createMultipartReadSetUploadRequest.clientToken) &&
        Objects.equals(this.sourceFileType, createMultipartReadSetUploadRequest.sourceFileType) &&
        Objects.equals(this.subjectId, createMultipartReadSetUploadRequest.subjectId) &&
        Objects.equals(this.sampleId, createMultipartReadSetUploadRequest.sampleId) &&
        Objects.equals(this.generatedFrom, createMultipartReadSetUploadRequest.generatedFrom) &&
        Objects.equals(this.referenceArn, createMultipartReadSetUploadRequest.referenceArn) &&
        Objects.equals(this.name, createMultipartReadSetUploadRequest.name) &&
        Objects.equals(this.description, createMultipartReadSetUploadRequest.description) &&
        Objects.equals(this.tags, createMultipartReadSetUploadRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientToken, sourceFileType, subjectId, sampleId, generatedFrom, referenceArn, name, description, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateMultipartReadSetUploadRequest {\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    sourceFileType: ").append(toIndentedString(sourceFileType)).append("\n");
    sb.append("    subjectId: ").append(toIndentedString(subjectId)).append("\n");
    sb.append("    sampleId: ").append(toIndentedString(sampleId)).append("\n");
    sb.append("    generatedFrom: ").append(toIndentedString(generatedFrom)).append("\n");
    sb.append("    referenceArn: ").append(toIndentedString(referenceArn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientToken");
    openapiFields.add("sourceFileType");
    openapiFields.add("subjectId");
    openapiFields.add("sampleId");
    openapiFields.add("generatedFrom");
    openapiFields.add("referenceArn");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sourceFileType");
    openapiRequiredFields.add("subjectId");
    openapiRequiredFields.add("sampleId");
    openapiRequiredFields.add("referenceArn");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateMultipartReadSetUploadRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateMultipartReadSetUploadRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateMultipartReadSetUploadRequest is not found in the empty JSON string", CreateMultipartReadSetUploadRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateMultipartReadSetUploadRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateMultipartReadSetUploadRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateMultipartReadSetUploadRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clientToken") != null && !jsonObj.get("clientToken").isJsonNull()) && !jsonObj.get("clientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientToken").toString()));
      }
      if (!jsonObj.get("sourceFileType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceFileType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceFileType").toString()));
      }
      // validate the required field `sourceFileType`
      SourceFileTypeEnum.validateJsonElement(jsonObj.get("sourceFileType"));
      if (!jsonObj.get("subjectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subjectId").toString()));
      }
      if (!jsonObj.get("sampleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sampleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sampleId").toString()));
      }
      if ((jsonObj.get("generatedFrom") != null && !jsonObj.get("generatedFrom").isJsonNull()) && !jsonObj.get("generatedFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `generatedFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("generatedFrom").toString()));
      }
      if (!jsonObj.get("referenceArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceArn").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateMultipartReadSetUploadRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateMultipartReadSetUploadRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateMultipartReadSetUploadRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateMultipartReadSetUploadRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateMultipartReadSetUploadRequest>() {
           @Override
           public void write(JsonWriter out, CreateMultipartReadSetUploadRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateMultipartReadSetUploadRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateMultipartReadSetUploadRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateMultipartReadSetUploadRequest
   * @throws IOException if the JSON string is invalid with respect to CreateMultipartReadSetUploadRequest
   */
  public static CreateMultipartReadSetUploadRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateMultipartReadSetUploadRequest.class);
  }

  /**
   * Convert an instance of CreateMultipartReadSetUploadRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

