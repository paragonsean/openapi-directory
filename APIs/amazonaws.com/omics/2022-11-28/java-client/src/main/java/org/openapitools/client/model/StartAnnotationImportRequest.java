/*
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.StartAnnotationImportRequestFormatOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartAnnotationImportRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:59.133938-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartAnnotationImportRequest {
  public static final String SERIALIZED_NAME_DESTINATION_NAME = "destinationName";
  @SerializedName(SERIALIZED_NAME_DESTINATION_NAME)
  private String destinationName;

  public static final String SERIALIZED_NAME_ROLE_ARN = "roleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List items;

  public static final String SERIALIZED_NAME_FORMAT_OPTIONS = "formatOptions";
  @SerializedName(SERIALIZED_NAME_FORMAT_OPTIONS)
  private StartAnnotationImportRequestFormatOptions formatOptions;

  public static final String SERIALIZED_NAME_RUN_LEFT_NORMALIZATION = "runLeftNormalization";
  @SerializedName(SERIALIZED_NAME_RUN_LEFT_NORMALIZATION)
  private Boolean runLeftNormalization;

  public static final String SERIALIZED_NAME_ANNOTATION_FIELDS = "annotationFields";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_FIELDS)
  private Map annotationFields;

  public StartAnnotationImportRequest() {
  }

  public StartAnnotationImportRequest destinationName(String destinationName) {
    this.destinationName = destinationName;
    return this;
  }

  /**
   * Get destinationName
   * @return destinationName
   */
  @javax.annotation.Nonnull
  public String getDestinationName() {
    return destinationName;
  }

  public void setDestinationName(String destinationName) {
    this.destinationName = destinationName;
  }


  public StartAnnotationImportRequest roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * Get roleArn
   * @return roleArn
   */
  @javax.annotation.Nonnull
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public StartAnnotationImportRequest items(List items) {
    this.items = items;
    return this;
  }

  /**
   * Get items
   * @return items
   */
  @javax.annotation.Nonnull
  public List getItems() {
    return items;
  }

  public void setItems(List items) {
    this.items = items;
  }


  public StartAnnotationImportRequest formatOptions(StartAnnotationImportRequestFormatOptions formatOptions) {
    this.formatOptions = formatOptions;
    return this;
  }

  /**
   * Get formatOptions
   * @return formatOptions
   */
  @javax.annotation.Nullable
  public StartAnnotationImportRequestFormatOptions getFormatOptions() {
    return formatOptions;
  }

  public void setFormatOptions(StartAnnotationImportRequestFormatOptions formatOptions) {
    this.formatOptions = formatOptions;
  }


  public StartAnnotationImportRequest runLeftNormalization(Boolean runLeftNormalization) {
    this.runLeftNormalization = runLeftNormalization;
    return this;
  }

  /**
   * Get runLeftNormalization
   * @return runLeftNormalization
   */
  @javax.annotation.Nullable
  public Boolean getRunLeftNormalization() {
    return runLeftNormalization;
  }

  public void setRunLeftNormalization(Boolean runLeftNormalization) {
    this.runLeftNormalization = runLeftNormalization;
  }


  public StartAnnotationImportRequest annotationFields(Map annotationFields) {
    this.annotationFields = annotationFields;
    return this;
  }

  /**
   * Get annotationFields
   * @return annotationFields
   */
  @javax.annotation.Nullable
  public Map getAnnotationFields() {
    return annotationFields;
  }

  public void setAnnotationFields(Map annotationFields) {
    this.annotationFields = annotationFields;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartAnnotationImportRequest startAnnotationImportRequest = (StartAnnotationImportRequest) o;
    return Objects.equals(this.destinationName, startAnnotationImportRequest.destinationName) &&
        Objects.equals(this.roleArn, startAnnotationImportRequest.roleArn) &&
        Objects.equals(this.items, startAnnotationImportRequest.items) &&
        Objects.equals(this.formatOptions, startAnnotationImportRequest.formatOptions) &&
        Objects.equals(this.runLeftNormalization, startAnnotationImportRequest.runLeftNormalization) &&
        Objects.equals(this.annotationFields, startAnnotationImportRequest.annotationFields);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinationName, roleArn, items, formatOptions, runLeftNormalization, annotationFields);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartAnnotationImportRequest {\n");
    sb.append("    destinationName: ").append(toIndentedString(destinationName)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    formatOptions: ").append(toIndentedString(formatOptions)).append("\n");
    sb.append("    runLeftNormalization: ").append(toIndentedString(runLeftNormalization)).append("\n");
    sb.append("    annotationFields: ").append(toIndentedString(annotationFields)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destinationName");
    openapiFields.add("roleArn");
    openapiFields.add("items");
    openapiFields.add("formatOptions");
    openapiFields.add("runLeftNormalization");
    openapiFields.add("annotationFields");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("destinationName");
    openapiRequiredFields.add("roleArn");
    openapiRequiredFields.add("items");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartAnnotationImportRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartAnnotationImportRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartAnnotationImportRequest is not found in the empty JSON string", StartAnnotationImportRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartAnnotationImportRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartAnnotationImportRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartAnnotationImportRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `destinationName`
      String.validateJsonElement(jsonObj.get("destinationName"));
      // validate the required field `roleArn`
      String.validateJsonElement(jsonObj.get("roleArn"));
      // validate the required field `items`
      List.validateJsonElement(jsonObj.get("items"));
      // validate the optional field `formatOptions`
      if (jsonObj.get("formatOptions") != null && !jsonObj.get("formatOptions").isJsonNull()) {
        StartAnnotationImportRequestFormatOptions.validateJsonElement(jsonObj.get("formatOptions"));
      }
      // validate the optional field `runLeftNormalization`
      if (jsonObj.get("runLeftNormalization") != null && !jsonObj.get("runLeftNormalization").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("runLeftNormalization"));
      }
      // validate the optional field `annotationFields`
      if (jsonObj.get("annotationFields") != null && !jsonObj.get("annotationFields").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("annotationFields"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartAnnotationImportRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartAnnotationImportRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartAnnotationImportRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartAnnotationImportRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartAnnotationImportRequest>() {
           @Override
           public void write(JsonWriter out, StartAnnotationImportRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartAnnotationImportRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartAnnotationImportRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartAnnotationImportRequest
   * @throws IOException if the JSON string is invalid with respect to StartAnnotationImportRequest
   */
  public static StartAnnotationImportRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartAnnotationImportRequest.class);
  }

  /**
   * Convert an instance of StartAnnotationImportRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

