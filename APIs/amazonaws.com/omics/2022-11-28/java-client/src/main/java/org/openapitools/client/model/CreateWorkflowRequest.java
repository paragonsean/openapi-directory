/*
 * Amazon Omics
 * This is the <i>AWS HealthOmics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is AWS HealthOmics?</a> in the <i>AWS HealthOmics User Guide</i>.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.WorkflowParameter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateWorkflowRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:59.133938-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateWorkflowRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * An engine for the workflow.
   */
  @JsonAdapter(EngineEnum.Adapter.class)
  public enum EngineEnum {
    WDL("WDL"),
    
    NEXTFLOW("NEXTFLOW"),
    
    CWL("CWL");

    private String value;

    EngineEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EngineEnum fromValue(String value) {
      for (EngineEnum b : EngineEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EngineEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EngineEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EngineEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EngineEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EngineEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENGINE = "engine";
  @SerializedName(SERIALIZED_NAME_ENGINE)
  private EngineEnum engine;

  public static final String SERIALIZED_NAME_DEFINITION_ZIP = "definitionZip";
  @SerializedName(SERIALIZED_NAME_DEFINITION_ZIP)
  private String definitionZip;

  public static final String SERIALIZED_NAME_DEFINITION_URI = "definitionUri";
  @SerializedName(SERIALIZED_NAME_DEFINITION_URI)
  private String definitionUri;

  public static final String SERIALIZED_NAME_MAIN = "main";
  @SerializedName(SERIALIZED_NAME_MAIN)
  private String main;

  public static final String SERIALIZED_NAME_PARAMETER_TEMPLATE = "parameterTemplate";
  @SerializedName(SERIALIZED_NAME_PARAMETER_TEMPLATE)
  private Map<String, WorkflowParameter> parameterTemplate = new HashMap<>();

  public static final String SERIALIZED_NAME_STORAGE_CAPACITY = "storageCapacity";
  @SerializedName(SERIALIZED_NAME_STORAGE_CAPACITY)
  private Integer storageCapacity;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  /**
   *  The computational accelerator specified to run the workflow. 
   */
  @JsonAdapter(AcceleratorsEnum.Adapter.class)
  public enum AcceleratorsEnum {
    GPU("GPU");

    private String value;

    AcceleratorsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AcceleratorsEnum fromValue(String value) {
      for (AcceleratorsEnum b : AcceleratorsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AcceleratorsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AcceleratorsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AcceleratorsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AcceleratorsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AcceleratorsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCELERATORS = "accelerators";
  @SerializedName(SERIALIZED_NAME_ACCELERATORS)
  private AcceleratorsEnum accelerators;

  public CreateWorkflowRequest() {
  }

  public CreateWorkflowRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A name for the workflow.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateWorkflowRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description for the workflow.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateWorkflowRequest engine(EngineEnum engine) {
    this.engine = engine;
    return this;
  }

  /**
   * An engine for the workflow.
   * @return engine
   */
  @javax.annotation.Nullable
  public EngineEnum getEngine() {
    return engine;
  }

  public void setEngine(EngineEnum engine) {
    this.engine = engine;
  }


  public CreateWorkflowRequest definitionZip(String definitionZip) {
    this.definitionZip = definitionZip;
    return this;
  }

  /**
   * A ZIP archive for the workflow.
   * @return definitionZip
   */
  @javax.annotation.Nullable
  public String getDefinitionZip() {
    return definitionZip;
  }

  public void setDefinitionZip(String definitionZip) {
    this.definitionZip = definitionZip;
  }


  public CreateWorkflowRequest definitionUri(String definitionUri) {
    this.definitionUri = definitionUri;
    return this;
  }

  /**
   * The URI of a definition for the workflow.
   * @return definitionUri
   */
  @javax.annotation.Nullable
  public String getDefinitionUri() {
    return definitionUri;
  }

  public void setDefinitionUri(String definitionUri) {
    this.definitionUri = definitionUri;
  }


  public CreateWorkflowRequest main(String main) {
    this.main = main;
    return this;
  }

  /**
   * The path of the main definition file for the workflow.
   * @return main
   */
  @javax.annotation.Nullable
  public String getMain() {
    return main;
  }

  public void setMain(String main) {
    this.main = main;
  }


  public CreateWorkflowRequest parameterTemplate(Map<String, WorkflowParameter> parameterTemplate) {
    this.parameterTemplate = parameterTemplate;
    return this;
  }

  public CreateWorkflowRequest putParameterTemplateItem(String key, WorkflowParameter parameterTemplateItem) {
    if (this.parameterTemplate == null) {
      this.parameterTemplate = new HashMap<>();
    }
    this.parameterTemplate.put(key, parameterTemplateItem);
    return this;
  }

  /**
   * A parameter template for the workflow.
   * @return parameterTemplate
   */
  @javax.annotation.Nullable
  public Map<String, WorkflowParameter> getParameterTemplate() {
    return parameterTemplate;
  }

  public void setParameterTemplate(Map<String, WorkflowParameter> parameterTemplate) {
    this.parameterTemplate = parameterTemplate;
  }


  public CreateWorkflowRequest storageCapacity(Integer storageCapacity) {
    this.storageCapacity = storageCapacity;
    return this;
  }

  /**
   * A storage capacity for the workflow in gigabytes.
   * minimum: 0
   * maximum: 100000
   * @return storageCapacity
   */
  @javax.annotation.Nullable
  public Integer getStorageCapacity() {
    return storageCapacity;
  }

  public void setStorageCapacity(Integer storageCapacity) {
    this.storageCapacity = storageCapacity;
  }


  public CreateWorkflowRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateWorkflowRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * Tags for the workflow.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public CreateWorkflowRequest requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * To ensure that requests don&#39;t run multiple times, specify a unique ID for each request.
   * @return requestId
   */
  @javax.annotation.Nonnull
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public CreateWorkflowRequest accelerators(AcceleratorsEnum accelerators) {
    this.accelerators = accelerators;
    return this;
  }

  /**
   *  The computational accelerator specified to run the workflow. 
   * @return accelerators
   */
  @javax.annotation.Nullable
  public AcceleratorsEnum getAccelerators() {
    return accelerators;
  }

  public void setAccelerators(AcceleratorsEnum accelerators) {
    this.accelerators = accelerators;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateWorkflowRequest createWorkflowRequest = (CreateWorkflowRequest) o;
    return Objects.equals(this.name, createWorkflowRequest.name) &&
        Objects.equals(this.description, createWorkflowRequest.description) &&
        Objects.equals(this.engine, createWorkflowRequest.engine) &&
        Objects.equals(this.definitionZip, createWorkflowRequest.definitionZip) &&
        Objects.equals(this.definitionUri, createWorkflowRequest.definitionUri) &&
        Objects.equals(this.main, createWorkflowRequest.main) &&
        Objects.equals(this.parameterTemplate, createWorkflowRequest.parameterTemplate) &&
        Objects.equals(this.storageCapacity, createWorkflowRequest.storageCapacity) &&
        Objects.equals(this.tags, createWorkflowRequest.tags) &&
        Objects.equals(this.requestId, createWorkflowRequest.requestId) &&
        Objects.equals(this.accelerators, createWorkflowRequest.accelerators);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, engine, definitionZip, definitionUri, main, parameterTemplate, storageCapacity, tags, requestId, accelerators);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateWorkflowRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    definitionZip: ").append(toIndentedString(definitionZip)).append("\n");
    sb.append("    definitionUri: ").append(toIndentedString(definitionUri)).append("\n");
    sb.append("    main: ").append(toIndentedString(main)).append("\n");
    sb.append("    parameterTemplate: ").append(toIndentedString(parameterTemplate)).append("\n");
    sb.append("    storageCapacity: ").append(toIndentedString(storageCapacity)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    accelerators: ").append(toIndentedString(accelerators)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("engine");
    openapiFields.add("definitionZip");
    openapiFields.add("definitionUri");
    openapiFields.add("main");
    openapiFields.add("parameterTemplate");
    openapiFields.add("storageCapacity");
    openapiFields.add("tags");
    openapiFields.add("requestId");
    openapiFields.add("accelerators");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("requestId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateWorkflowRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateWorkflowRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateWorkflowRequest is not found in the empty JSON string", CreateWorkflowRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateWorkflowRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateWorkflowRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateWorkflowRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("engine") != null && !jsonObj.get("engine").isJsonNull()) && !jsonObj.get("engine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engine").toString()));
      }
      // validate the optional field `engine`
      if (jsonObj.get("engine") != null && !jsonObj.get("engine").isJsonNull()) {
        EngineEnum.validateJsonElement(jsonObj.get("engine"));
      }
      if ((jsonObj.get("definitionZip") != null && !jsonObj.get("definitionZip").isJsonNull()) && !jsonObj.get("definitionZip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `definitionZip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("definitionZip").toString()));
      }
      if ((jsonObj.get("definitionUri") != null && !jsonObj.get("definitionUri").isJsonNull()) && !jsonObj.get("definitionUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `definitionUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("definitionUri").toString()));
      }
      if ((jsonObj.get("main") != null && !jsonObj.get("main").isJsonNull()) && !jsonObj.get("main").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `main` to be a primitive type in the JSON string but got `%s`", jsonObj.get("main").toString()));
      }
      if (!jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
      if ((jsonObj.get("accelerators") != null && !jsonObj.get("accelerators").isJsonNull()) && !jsonObj.get("accelerators").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accelerators` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accelerators").toString()));
      }
      // validate the optional field `accelerators`
      if (jsonObj.get("accelerators") != null && !jsonObj.get("accelerators").isJsonNull()) {
        AcceleratorsEnum.validateJsonElement(jsonObj.get("accelerators"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateWorkflowRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateWorkflowRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateWorkflowRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateWorkflowRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateWorkflowRequest>() {
           @Override
           public void write(JsonWriter out, CreateWorkflowRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateWorkflowRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateWorkflowRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateWorkflowRequest
   * @throws IOException if the JSON string is invalid with respect to CreateWorkflowRequest
   */
  public static CreateWorkflowRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateWorkflowRequest.class);
  }

  /**
   * Convert an instance of CreateWorkflowRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

