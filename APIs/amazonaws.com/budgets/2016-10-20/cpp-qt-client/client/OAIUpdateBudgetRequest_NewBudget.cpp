/**
 * AWS Budgets
 * <p>Use the Amazon Web Services Budgets API to plan your service usage, service costs, and instance reservations. This API reference provides descriptions, syntax, and usage examples for each of the actions and data types for the Amazon Web Services Budgets feature. </p> <p>Budgets provide you with a way to see the following information:</p> <ul> <li> <p>How close your plan is to your budgeted amount or to the free tier limits</p> </li> <li> <p>Your usage-to-date, including how much you've used of your Reserved Instances (RIs)</p> </li> <li> <p>Your current estimated charges from Amazon Web Services, and how much your predicted usage will accrue in charges by the end of the month</p> </li> <li> <p>How much of your budget has been used</p> </li> </ul> <p>Amazon Web Services updates your budget status several times a day. Budgets track your unblended costs, subscriptions, refunds, and RIs. You can create the following types of budgets:</p> <ul> <li> <p> <b>Cost budgets</b> - Plan how much you want to spend on a service.</p> </li> <li> <p> <b>Usage budgets</b> - Plan how much you want to use one or more services.</p> </li> <li> <p> <b>RI utilization budgets</b> - Define a utilization threshold, and receive alerts when your RI usage falls below that threshold. This lets you see if your RIs are unused or under-utilized.</p> </li> <li> <p> <b>RI coverage budgets</b> - Define a coverage threshold, and receive alerts when the number of your instance hours that are covered by RIs fall below that threshold. This lets you see how much of your instance usage is covered by a reservation.</p> </li> </ul> <p>Service Endpoint</p> <p>The Amazon Web Services Budgets API provides the following endpoint:</p> <ul> <li> <p>https://budgets.amazonaws.com</p> </li> </ul> <p>For information about costs that are associated with the Amazon Web Services Budgets API, see <a href=\"https://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2016-10-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateBudgetRequest_NewBudget.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateBudgetRequest_NewBudget::OAIUpdateBudgetRequest_NewBudget(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateBudgetRequest_NewBudget::OAIUpdateBudgetRequest_NewBudget() {
    this->initializeModel();
}

OAIUpdateBudgetRequest_NewBudget::~OAIUpdateBudgetRequest_NewBudget() {}

void OAIUpdateBudgetRequest_NewBudget::initializeModel() {

    m_budget_name_isSet = false;
    m_budget_name_isValid = false;

    m_budget_limit_isSet = false;
    m_budget_limit_isValid = false;

    m_planned_budget_limits_isSet = false;
    m_planned_budget_limits_isValid = false;

    m_cost_filters_isSet = false;
    m_cost_filters_isValid = false;

    m_cost_types_isSet = false;
    m_cost_types_isValid = false;

    m_time_unit_isSet = false;
    m_time_unit_isValid = false;

    m_time_period_isSet = false;
    m_time_period_isValid = false;

    m_calculated_spend_isSet = false;
    m_calculated_spend_isValid = false;

    m_budget_type_isSet = false;
    m_budget_type_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_auto_adjust_data_isSet = false;
    m_auto_adjust_data_isValid = false;
}

void OAIUpdateBudgetRequest_NewBudget::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateBudgetRequest_NewBudget::fromJsonObject(QJsonObject json) {

    m_budget_name_isValid = ::OpenAPI::fromJsonValue(m_budget_name, json[QString("BudgetName")]);
    m_budget_name_isSet = !json[QString("BudgetName")].isNull() && m_budget_name_isValid;

    m_budget_limit_isValid = ::OpenAPI::fromJsonValue(m_budget_limit, json[QString("BudgetLimit")]);
    m_budget_limit_isSet = !json[QString("BudgetLimit")].isNull() && m_budget_limit_isValid;

    m_planned_budget_limits_isValid = ::OpenAPI::fromJsonValue(m_planned_budget_limits, json[QString("PlannedBudgetLimits")]);
    m_planned_budget_limits_isSet = !json[QString("PlannedBudgetLimits")].isNull() && m_planned_budget_limits_isValid;

    m_cost_filters_isValid = ::OpenAPI::fromJsonValue(m_cost_filters, json[QString("CostFilters")]);
    m_cost_filters_isSet = !json[QString("CostFilters")].isNull() && m_cost_filters_isValid;

    m_cost_types_isValid = ::OpenAPI::fromJsonValue(m_cost_types, json[QString("CostTypes")]);
    m_cost_types_isSet = !json[QString("CostTypes")].isNull() && m_cost_types_isValid;

    m_time_unit_isValid = ::OpenAPI::fromJsonValue(m_time_unit, json[QString("TimeUnit")]);
    m_time_unit_isSet = !json[QString("TimeUnit")].isNull() && m_time_unit_isValid;

    m_time_period_isValid = ::OpenAPI::fromJsonValue(m_time_period, json[QString("TimePeriod")]);
    m_time_period_isSet = !json[QString("TimePeriod")].isNull() && m_time_period_isValid;

    m_calculated_spend_isValid = ::OpenAPI::fromJsonValue(m_calculated_spend, json[QString("CalculatedSpend")]);
    m_calculated_spend_isSet = !json[QString("CalculatedSpend")].isNull() && m_calculated_spend_isValid;

    m_budget_type_isValid = ::OpenAPI::fromJsonValue(m_budget_type, json[QString("BudgetType")]);
    m_budget_type_isSet = !json[QString("BudgetType")].isNull() && m_budget_type_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("LastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("LastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_auto_adjust_data_isValid = ::OpenAPI::fromJsonValue(m_auto_adjust_data, json[QString("AutoAdjustData")]);
    m_auto_adjust_data_isSet = !json[QString("AutoAdjustData")].isNull() && m_auto_adjust_data_isValid;
}

QString OAIUpdateBudgetRequest_NewBudget::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateBudgetRequest_NewBudget::asJsonObject() const {
    QJsonObject obj;
    if (m_budget_name_isSet) {
        obj.insert(QString("BudgetName"), ::OpenAPI::toJsonValue(m_budget_name));
    }
    if (m_budget_limit.isSet()) {
        obj.insert(QString("BudgetLimit"), ::OpenAPI::toJsonValue(m_budget_limit));
    }
    if (m_planned_budget_limits.isSet()) {
        obj.insert(QString("PlannedBudgetLimits"), ::OpenAPI::toJsonValue(m_planned_budget_limits));
    }
    if (m_cost_filters.isSet()) {
        obj.insert(QString("CostFilters"), ::OpenAPI::toJsonValue(m_cost_filters));
    }
    if (m_cost_types.isSet()) {
        obj.insert(QString("CostTypes"), ::OpenAPI::toJsonValue(m_cost_types));
    }
    if (m_time_unit.isSet()) {
        obj.insert(QString("TimeUnit"), ::OpenAPI::toJsonValue(m_time_unit));
    }
    if (m_time_period.isSet()) {
        obj.insert(QString("TimePeriod"), ::OpenAPI::toJsonValue(m_time_period));
    }
    if (m_calculated_spend.isSet()) {
        obj.insert(QString("CalculatedSpend"), ::OpenAPI::toJsonValue(m_calculated_spend));
    }
    if (m_budget_type.isSet()) {
        obj.insert(QString("BudgetType"), ::OpenAPI::toJsonValue(m_budget_type));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("LastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_auto_adjust_data.isSet()) {
        obj.insert(QString("AutoAdjustData"), ::OpenAPI::toJsonValue(m_auto_adjust_data));
    }
    return obj;
}

QString OAIUpdateBudgetRequest_NewBudget::getBudgetName() const {
    return m_budget_name;
}
void OAIUpdateBudgetRequest_NewBudget::setBudgetName(const QString &budget_name) {
    m_budget_name = budget_name;
    m_budget_name_isSet = true;
}

bool OAIUpdateBudgetRequest_NewBudget::is_budget_name_Set() const{
    return m_budget_name_isSet;
}

bool OAIUpdateBudgetRequest_NewBudget::is_budget_name_Valid() const{
    return m_budget_name_isValid;
}

OAIBudget_BudgetLimit OAIUpdateBudgetRequest_NewBudget::getBudgetLimit() const {
    return m_budget_limit;
}
void OAIUpdateBudgetRequest_NewBudget::setBudgetLimit(const OAIBudget_BudgetLimit &budget_limit) {
    m_budget_limit = budget_limit;
    m_budget_limit_isSet = true;
}

bool OAIUpdateBudgetRequest_NewBudget::is_budget_limit_Set() const{
    return m_budget_limit_isSet;
}

bool OAIUpdateBudgetRequest_NewBudget::is_budget_limit_Valid() const{
    return m_budget_limit_isValid;
}

QMap OAIUpdateBudgetRequest_NewBudget::getPlannedBudgetLimits() const {
    return m_planned_budget_limits;
}
void OAIUpdateBudgetRequest_NewBudget::setPlannedBudgetLimits(const QMap &planned_budget_limits) {
    m_planned_budget_limits = planned_budget_limits;
    m_planned_budget_limits_isSet = true;
}

bool OAIUpdateBudgetRequest_NewBudget::is_planned_budget_limits_Set() const{
    return m_planned_budget_limits_isSet;
}

bool OAIUpdateBudgetRequest_NewBudget::is_planned_budget_limits_Valid() const{
    return m_planned_budget_limits_isValid;
}

QMap OAIUpdateBudgetRequest_NewBudget::getCostFilters() const {
    return m_cost_filters;
}
void OAIUpdateBudgetRequest_NewBudget::setCostFilters(const QMap &cost_filters) {
    m_cost_filters = cost_filters;
    m_cost_filters_isSet = true;
}

bool OAIUpdateBudgetRequest_NewBudget::is_cost_filters_Set() const{
    return m_cost_filters_isSet;
}

bool OAIUpdateBudgetRequest_NewBudget::is_cost_filters_Valid() const{
    return m_cost_filters_isValid;
}

OAIBudget_CostTypes OAIUpdateBudgetRequest_NewBudget::getCostTypes() const {
    return m_cost_types;
}
void OAIUpdateBudgetRequest_NewBudget::setCostTypes(const OAIBudget_CostTypes &cost_types) {
    m_cost_types = cost_types;
    m_cost_types_isSet = true;
}

bool OAIUpdateBudgetRequest_NewBudget::is_cost_types_Set() const{
    return m_cost_types_isSet;
}

bool OAIUpdateBudgetRequest_NewBudget::is_cost_types_Valid() const{
    return m_cost_types_isValid;
}

OAITimeUnit OAIUpdateBudgetRequest_NewBudget::getTimeUnit() const {
    return m_time_unit;
}
void OAIUpdateBudgetRequest_NewBudget::setTimeUnit(const OAITimeUnit &time_unit) {
    m_time_unit = time_unit;
    m_time_unit_isSet = true;
}

bool OAIUpdateBudgetRequest_NewBudget::is_time_unit_Set() const{
    return m_time_unit_isSet;
}

bool OAIUpdateBudgetRequest_NewBudget::is_time_unit_Valid() const{
    return m_time_unit_isValid;
}

OAIBudget_TimePeriod OAIUpdateBudgetRequest_NewBudget::getTimePeriod() const {
    return m_time_period;
}
void OAIUpdateBudgetRequest_NewBudget::setTimePeriod(const OAIBudget_TimePeriod &time_period) {
    m_time_period = time_period;
    m_time_period_isSet = true;
}

bool OAIUpdateBudgetRequest_NewBudget::is_time_period_Set() const{
    return m_time_period_isSet;
}

bool OAIUpdateBudgetRequest_NewBudget::is_time_period_Valid() const{
    return m_time_period_isValid;
}

OAIBudget_CalculatedSpend OAIUpdateBudgetRequest_NewBudget::getCalculatedSpend() const {
    return m_calculated_spend;
}
void OAIUpdateBudgetRequest_NewBudget::setCalculatedSpend(const OAIBudget_CalculatedSpend &calculated_spend) {
    m_calculated_spend = calculated_spend;
    m_calculated_spend_isSet = true;
}

bool OAIUpdateBudgetRequest_NewBudget::is_calculated_spend_Set() const{
    return m_calculated_spend_isSet;
}

bool OAIUpdateBudgetRequest_NewBudget::is_calculated_spend_Valid() const{
    return m_calculated_spend_isValid;
}

OAIBudgetType OAIUpdateBudgetRequest_NewBudget::getBudgetType() const {
    return m_budget_type;
}
void OAIUpdateBudgetRequest_NewBudget::setBudgetType(const OAIBudgetType &budget_type) {
    m_budget_type = budget_type;
    m_budget_type_isSet = true;
}

bool OAIUpdateBudgetRequest_NewBudget::is_budget_type_Set() const{
    return m_budget_type_isSet;
}

bool OAIUpdateBudgetRequest_NewBudget::is_budget_type_Valid() const{
    return m_budget_type_isValid;
}

QDateTime OAIUpdateBudgetRequest_NewBudget::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIUpdateBudgetRequest_NewBudget::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIUpdateBudgetRequest_NewBudget::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIUpdateBudgetRequest_NewBudget::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

OAIBudget_AutoAdjustData OAIUpdateBudgetRequest_NewBudget::getAutoAdjustData() const {
    return m_auto_adjust_data;
}
void OAIUpdateBudgetRequest_NewBudget::setAutoAdjustData(const OAIBudget_AutoAdjustData &auto_adjust_data) {
    m_auto_adjust_data = auto_adjust_data;
    m_auto_adjust_data_isSet = true;
}

bool OAIUpdateBudgetRequest_NewBudget::is_auto_adjust_data_Set() const{
    return m_auto_adjust_data_isSet;
}

bool OAIUpdateBudgetRequest_NewBudget::is_auto_adjust_data_Valid() const{
    return m_auto_adjust_data_isValid;
}

bool OAIUpdateBudgetRequest_NewBudget::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_budget_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_budget_limit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_planned_budget_limits.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_period.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_calculated_spend.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_budget_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_adjust_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateBudgetRequest_NewBudget::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_budget_name_isValid && m_time_unit_isValid && m_budget_type_isValid && true;
}

} // namespace OpenAPI
