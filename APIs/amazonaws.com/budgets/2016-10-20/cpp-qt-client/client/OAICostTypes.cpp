/**
 * AWS Budgets
 * <p>Use the Amazon Web Services Budgets API to plan your service usage, service costs, and instance reservations. This API reference provides descriptions, syntax, and usage examples for each of the actions and data types for the Amazon Web Services Budgets feature. </p> <p>Budgets provide you with a way to see the following information:</p> <ul> <li> <p>How close your plan is to your budgeted amount or to the free tier limits</p> </li> <li> <p>Your usage-to-date, including how much you've used of your Reserved Instances (RIs)</p> </li> <li> <p>Your current estimated charges from Amazon Web Services, and how much your predicted usage will accrue in charges by the end of the month</p> </li> <li> <p>How much of your budget has been used</p> </li> </ul> <p>Amazon Web Services updates your budget status several times a day. Budgets track your unblended costs, subscriptions, refunds, and RIs. You can create the following types of budgets:</p> <ul> <li> <p> <b>Cost budgets</b> - Plan how much you want to spend on a service.</p> </li> <li> <p> <b>Usage budgets</b> - Plan how much you want to use one or more services.</p> </li> <li> <p> <b>RI utilization budgets</b> - Define a utilization threshold, and receive alerts when your RI usage falls below that threshold. This lets you see if your RIs are unused or under-utilized.</p> </li> <li> <p> <b>RI coverage budgets</b> - Define a coverage threshold, and receive alerts when the number of your instance hours that are covered by RIs fall below that threshold. This lets you see how much of your instance usage is covered by a reservation.</p> </li> </ul> <p>Service Endpoint</p> <p>The Amazon Web Services Budgets API provides the following endpoint:</p> <ul> <li> <p>https://budgets.amazonaws.com</p> </li> </ul> <p>For information about costs that are associated with the Amazon Web Services Budgets API, see <a href=\"https://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2016-10-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICostTypes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICostTypes::OAICostTypes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICostTypes::OAICostTypes() {
    this->initializeModel();
}

OAICostTypes::~OAICostTypes() {}

void OAICostTypes::initializeModel() {

    m_include_tax_isSet = false;
    m_include_tax_isValid = false;

    m_include_subscription_isSet = false;
    m_include_subscription_isValid = false;

    m_use_blended_isSet = false;
    m_use_blended_isValid = false;

    m_include_refund_isSet = false;
    m_include_refund_isValid = false;

    m_include_credit_isSet = false;
    m_include_credit_isValid = false;

    m_include_upfront_isSet = false;
    m_include_upfront_isValid = false;

    m_include_recurring_isSet = false;
    m_include_recurring_isValid = false;

    m_include_other_subscription_isSet = false;
    m_include_other_subscription_isValid = false;

    m_include_support_isSet = false;
    m_include_support_isValid = false;

    m_include_discount_isSet = false;
    m_include_discount_isValid = false;

    m_use_amortized_isSet = false;
    m_use_amortized_isValid = false;
}

void OAICostTypes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICostTypes::fromJsonObject(QJsonObject json) {

    m_include_tax_isValid = ::OpenAPI::fromJsonValue(m_include_tax, json[QString("IncludeTax")]);
    m_include_tax_isSet = !json[QString("IncludeTax")].isNull() && m_include_tax_isValid;

    m_include_subscription_isValid = ::OpenAPI::fromJsonValue(m_include_subscription, json[QString("IncludeSubscription")]);
    m_include_subscription_isSet = !json[QString("IncludeSubscription")].isNull() && m_include_subscription_isValid;

    m_use_blended_isValid = ::OpenAPI::fromJsonValue(m_use_blended, json[QString("UseBlended")]);
    m_use_blended_isSet = !json[QString("UseBlended")].isNull() && m_use_blended_isValid;

    m_include_refund_isValid = ::OpenAPI::fromJsonValue(m_include_refund, json[QString("IncludeRefund")]);
    m_include_refund_isSet = !json[QString("IncludeRefund")].isNull() && m_include_refund_isValid;

    m_include_credit_isValid = ::OpenAPI::fromJsonValue(m_include_credit, json[QString("IncludeCredit")]);
    m_include_credit_isSet = !json[QString("IncludeCredit")].isNull() && m_include_credit_isValid;

    m_include_upfront_isValid = ::OpenAPI::fromJsonValue(m_include_upfront, json[QString("IncludeUpfront")]);
    m_include_upfront_isSet = !json[QString("IncludeUpfront")].isNull() && m_include_upfront_isValid;

    m_include_recurring_isValid = ::OpenAPI::fromJsonValue(m_include_recurring, json[QString("IncludeRecurring")]);
    m_include_recurring_isSet = !json[QString("IncludeRecurring")].isNull() && m_include_recurring_isValid;

    m_include_other_subscription_isValid = ::OpenAPI::fromJsonValue(m_include_other_subscription, json[QString("IncludeOtherSubscription")]);
    m_include_other_subscription_isSet = !json[QString("IncludeOtherSubscription")].isNull() && m_include_other_subscription_isValid;

    m_include_support_isValid = ::OpenAPI::fromJsonValue(m_include_support, json[QString("IncludeSupport")]);
    m_include_support_isSet = !json[QString("IncludeSupport")].isNull() && m_include_support_isValid;

    m_include_discount_isValid = ::OpenAPI::fromJsonValue(m_include_discount, json[QString("IncludeDiscount")]);
    m_include_discount_isSet = !json[QString("IncludeDiscount")].isNull() && m_include_discount_isValid;

    m_use_amortized_isValid = ::OpenAPI::fromJsonValue(m_use_amortized, json[QString("UseAmortized")]);
    m_use_amortized_isSet = !json[QString("UseAmortized")].isNull() && m_use_amortized_isValid;
}

QString OAICostTypes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICostTypes::asJsonObject() const {
    QJsonObject obj;
    if (m_include_tax_isSet) {
        obj.insert(QString("IncludeTax"), ::OpenAPI::toJsonValue(m_include_tax));
    }
    if (m_include_subscription_isSet) {
        obj.insert(QString("IncludeSubscription"), ::OpenAPI::toJsonValue(m_include_subscription));
    }
    if (m_use_blended_isSet) {
        obj.insert(QString("UseBlended"), ::OpenAPI::toJsonValue(m_use_blended));
    }
    if (m_include_refund_isSet) {
        obj.insert(QString("IncludeRefund"), ::OpenAPI::toJsonValue(m_include_refund));
    }
    if (m_include_credit_isSet) {
        obj.insert(QString("IncludeCredit"), ::OpenAPI::toJsonValue(m_include_credit));
    }
    if (m_include_upfront_isSet) {
        obj.insert(QString("IncludeUpfront"), ::OpenAPI::toJsonValue(m_include_upfront));
    }
    if (m_include_recurring_isSet) {
        obj.insert(QString("IncludeRecurring"), ::OpenAPI::toJsonValue(m_include_recurring));
    }
    if (m_include_other_subscription_isSet) {
        obj.insert(QString("IncludeOtherSubscription"), ::OpenAPI::toJsonValue(m_include_other_subscription));
    }
    if (m_include_support_isSet) {
        obj.insert(QString("IncludeSupport"), ::OpenAPI::toJsonValue(m_include_support));
    }
    if (m_include_discount_isSet) {
        obj.insert(QString("IncludeDiscount"), ::OpenAPI::toJsonValue(m_include_discount));
    }
    if (m_use_amortized_isSet) {
        obj.insert(QString("UseAmortized"), ::OpenAPI::toJsonValue(m_use_amortized));
    }
    return obj;
}

bool OAICostTypes::getIncludeTax() const {
    return m_include_tax;
}
void OAICostTypes::setIncludeTax(const bool &include_tax) {
    m_include_tax = include_tax;
    m_include_tax_isSet = true;
}

bool OAICostTypes::is_include_tax_Set() const{
    return m_include_tax_isSet;
}

bool OAICostTypes::is_include_tax_Valid() const{
    return m_include_tax_isValid;
}

bool OAICostTypes::getIncludeSubscription() const {
    return m_include_subscription;
}
void OAICostTypes::setIncludeSubscription(const bool &include_subscription) {
    m_include_subscription = include_subscription;
    m_include_subscription_isSet = true;
}

bool OAICostTypes::is_include_subscription_Set() const{
    return m_include_subscription_isSet;
}

bool OAICostTypes::is_include_subscription_Valid() const{
    return m_include_subscription_isValid;
}

bool OAICostTypes::getUseBlended() const {
    return m_use_blended;
}
void OAICostTypes::setUseBlended(const bool &use_blended) {
    m_use_blended = use_blended;
    m_use_blended_isSet = true;
}

bool OAICostTypes::is_use_blended_Set() const{
    return m_use_blended_isSet;
}

bool OAICostTypes::is_use_blended_Valid() const{
    return m_use_blended_isValid;
}

bool OAICostTypes::getIncludeRefund() const {
    return m_include_refund;
}
void OAICostTypes::setIncludeRefund(const bool &include_refund) {
    m_include_refund = include_refund;
    m_include_refund_isSet = true;
}

bool OAICostTypes::is_include_refund_Set() const{
    return m_include_refund_isSet;
}

bool OAICostTypes::is_include_refund_Valid() const{
    return m_include_refund_isValid;
}

bool OAICostTypes::getIncludeCredit() const {
    return m_include_credit;
}
void OAICostTypes::setIncludeCredit(const bool &include_credit) {
    m_include_credit = include_credit;
    m_include_credit_isSet = true;
}

bool OAICostTypes::is_include_credit_Set() const{
    return m_include_credit_isSet;
}

bool OAICostTypes::is_include_credit_Valid() const{
    return m_include_credit_isValid;
}

bool OAICostTypes::getIncludeUpfront() const {
    return m_include_upfront;
}
void OAICostTypes::setIncludeUpfront(const bool &include_upfront) {
    m_include_upfront = include_upfront;
    m_include_upfront_isSet = true;
}

bool OAICostTypes::is_include_upfront_Set() const{
    return m_include_upfront_isSet;
}

bool OAICostTypes::is_include_upfront_Valid() const{
    return m_include_upfront_isValid;
}

bool OAICostTypes::getIncludeRecurring() const {
    return m_include_recurring;
}
void OAICostTypes::setIncludeRecurring(const bool &include_recurring) {
    m_include_recurring = include_recurring;
    m_include_recurring_isSet = true;
}

bool OAICostTypes::is_include_recurring_Set() const{
    return m_include_recurring_isSet;
}

bool OAICostTypes::is_include_recurring_Valid() const{
    return m_include_recurring_isValid;
}

bool OAICostTypes::getIncludeOtherSubscription() const {
    return m_include_other_subscription;
}
void OAICostTypes::setIncludeOtherSubscription(const bool &include_other_subscription) {
    m_include_other_subscription = include_other_subscription;
    m_include_other_subscription_isSet = true;
}

bool OAICostTypes::is_include_other_subscription_Set() const{
    return m_include_other_subscription_isSet;
}

bool OAICostTypes::is_include_other_subscription_Valid() const{
    return m_include_other_subscription_isValid;
}

bool OAICostTypes::getIncludeSupport() const {
    return m_include_support;
}
void OAICostTypes::setIncludeSupport(const bool &include_support) {
    m_include_support = include_support;
    m_include_support_isSet = true;
}

bool OAICostTypes::is_include_support_Set() const{
    return m_include_support_isSet;
}

bool OAICostTypes::is_include_support_Valid() const{
    return m_include_support_isValid;
}

bool OAICostTypes::getIncludeDiscount() const {
    return m_include_discount;
}
void OAICostTypes::setIncludeDiscount(const bool &include_discount) {
    m_include_discount = include_discount;
    m_include_discount_isSet = true;
}

bool OAICostTypes::is_include_discount_Set() const{
    return m_include_discount_isSet;
}

bool OAICostTypes::is_include_discount_Valid() const{
    return m_include_discount_isValid;
}

bool OAICostTypes::getUseAmortized() const {
    return m_use_amortized;
}
void OAICostTypes::setUseAmortized(const bool &use_amortized) {
    m_use_amortized = use_amortized;
    m_use_amortized_isSet = true;
}

bool OAICostTypes::is_use_amortized_Set() const{
    return m_use_amortized_isSet;
}

bool OAICostTypes::is_use_amortized_Valid() const{
    return m_use_amortized_isValid;
}

bool OAICostTypes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_include_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_subscription_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_blended_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_refund_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_credit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_upfront_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_recurring_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_other_subscription_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_support_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_amortized_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICostTypes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
