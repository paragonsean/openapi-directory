/*
 * AWS Budgets
 * <p>Use the Amazon Web Services Budgets API to plan your service usage, service costs, and instance reservations. This API reference provides descriptions, syntax, and usage examples for each of the actions and data types for the Amazon Web Services Budgets feature. </p> <p>Budgets provide you with a way to see the following information:</p> <ul> <li> <p>How close your plan is to your budgeted amount or to the free tier limits</p> </li> <li> <p>Your usage-to-date, including how much you've used of your Reserved Instances (RIs)</p> </li> <li> <p>Your current estimated charges from Amazon Web Services, and how much your predicted usage will accrue in charges by the end of the month</p> </li> <li> <p>How much of your budget has been used</p> </li> </ul> <p>Amazon Web Services updates your budget status several times a day. Budgets track your unblended costs, subscriptions, refunds, and RIs. You can create the following types of budgets:</p> <ul> <li> <p> <b>Cost budgets</b> - Plan how much you want to spend on a service.</p> </li> <li> <p> <b>Usage budgets</b> - Plan how much you want to use one or more services.</p> </li> <li> <p> <b>RI utilization budgets</b> - Define a utilization threshold, and receive alerts when your RI usage falls below that threshold. This lets you see if your RIs are unused or under-utilized.</p> </li> <li> <p> <b>RI coverage budgets</b> - Define a coverage threshold, and receive alerts when the number of your instance hours that are covered by RIs fall below that threshold. This lets you see how much of your instance usage is covered by a reservation.</p> </li> </ul> <p>Service Endpoint</p> <p>The Amazon Web Services Budgets API provides the following endpoint:</p> <ul> <li> <p>https://budgets.amazonaws.com</p> </li> </ul> <p>For information about costs that are associated with the Amazon Web Services Budgets API, see <a href=\"https://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2016-10-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BudgetPerformanceHistoryCostTypes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:20.507190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BudgetPerformanceHistoryCostTypes {
  public static final String SERIALIZED_NAME_INCLUDE_TAX = "IncludeTax";
  @SerializedName(SERIALIZED_NAME_INCLUDE_TAX)
  private Boolean includeTax;

  public static final String SERIALIZED_NAME_INCLUDE_SUBSCRIPTION = "IncludeSubscription";
  @SerializedName(SERIALIZED_NAME_INCLUDE_SUBSCRIPTION)
  private Boolean includeSubscription;

  public static final String SERIALIZED_NAME_USE_BLENDED = "UseBlended";
  @SerializedName(SERIALIZED_NAME_USE_BLENDED)
  private Boolean useBlended;

  public static final String SERIALIZED_NAME_INCLUDE_REFUND = "IncludeRefund";
  @SerializedName(SERIALIZED_NAME_INCLUDE_REFUND)
  private Boolean includeRefund;

  public static final String SERIALIZED_NAME_INCLUDE_CREDIT = "IncludeCredit";
  @SerializedName(SERIALIZED_NAME_INCLUDE_CREDIT)
  private Boolean includeCredit;

  public static final String SERIALIZED_NAME_INCLUDE_UPFRONT = "IncludeUpfront";
  @SerializedName(SERIALIZED_NAME_INCLUDE_UPFRONT)
  private Boolean includeUpfront;

  public static final String SERIALIZED_NAME_INCLUDE_RECURRING = "IncludeRecurring";
  @SerializedName(SERIALIZED_NAME_INCLUDE_RECURRING)
  private Boolean includeRecurring;

  public static final String SERIALIZED_NAME_INCLUDE_OTHER_SUBSCRIPTION = "IncludeOtherSubscription";
  @SerializedName(SERIALIZED_NAME_INCLUDE_OTHER_SUBSCRIPTION)
  private Boolean includeOtherSubscription;

  public static final String SERIALIZED_NAME_INCLUDE_SUPPORT = "IncludeSupport";
  @SerializedName(SERIALIZED_NAME_INCLUDE_SUPPORT)
  private Boolean includeSupport;

  public static final String SERIALIZED_NAME_INCLUDE_DISCOUNT = "IncludeDiscount";
  @SerializedName(SERIALIZED_NAME_INCLUDE_DISCOUNT)
  private Boolean includeDiscount;

  public static final String SERIALIZED_NAME_USE_AMORTIZED = "UseAmortized";
  @SerializedName(SERIALIZED_NAME_USE_AMORTIZED)
  private Boolean useAmortized;

  public BudgetPerformanceHistoryCostTypes() {
  }

  public BudgetPerformanceHistoryCostTypes includeTax(Boolean includeTax) {
    this.includeTax = includeTax;
    return this;
  }

  /**
   * Get includeTax
   * @return includeTax
   */
  @javax.annotation.Nullable
  public Boolean getIncludeTax() {
    return includeTax;
  }

  public void setIncludeTax(Boolean includeTax) {
    this.includeTax = includeTax;
  }


  public BudgetPerformanceHistoryCostTypes includeSubscription(Boolean includeSubscription) {
    this.includeSubscription = includeSubscription;
    return this;
  }

  /**
   * Get includeSubscription
   * @return includeSubscription
   */
  @javax.annotation.Nullable
  public Boolean getIncludeSubscription() {
    return includeSubscription;
  }

  public void setIncludeSubscription(Boolean includeSubscription) {
    this.includeSubscription = includeSubscription;
  }


  public BudgetPerformanceHistoryCostTypes useBlended(Boolean useBlended) {
    this.useBlended = useBlended;
    return this;
  }

  /**
   * Get useBlended
   * @return useBlended
   */
  @javax.annotation.Nullable
  public Boolean getUseBlended() {
    return useBlended;
  }

  public void setUseBlended(Boolean useBlended) {
    this.useBlended = useBlended;
  }


  public BudgetPerformanceHistoryCostTypes includeRefund(Boolean includeRefund) {
    this.includeRefund = includeRefund;
    return this;
  }

  /**
   * Get includeRefund
   * @return includeRefund
   */
  @javax.annotation.Nullable
  public Boolean getIncludeRefund() {
    return includeRefund;
  }

  public void setIncludeRefund(Boolean includeRefund) {
    this.includeRefund = includeRefund;
  }


  public BudgetPerformanceHistoryCostTypes includeCredit(Boolean includeCredit) {
    this.includeCredit = includeCredit;
    return this;
  }

  /**
   * Get includeCredit
   * @return includeCredit
   */
  @javax.annotation.Nullable
  public Boolean getIncludeCredit() {
    return includeCredit;
  }

  public void setIncludeCredit(Boolean includeCredit) {
    this.includeCredit = includeCredit;
  }


  public BudgetPerformanceHistoryCostTypes includeUpfront(Boolean includeUpfront) {
    this.includeUpfront = includeUpfront;
    return this;
  }

  /**
   * Get includeUpfront
   * @return includeUpfront
   */
  @javax.annotation.Nullable
  public Boolean getIncludeUpfront() {
    return includeUpfront;
  }

  public void setIncludeUpfront(Boolean includeUpfront) {
    this.includeUpfront = includeUpfront;
  }


  public BudgetPerformanceHistoryCostTypes includeRecurring(Boolean includeRecurring) {
    this.includeRecurring = includeRecurring;
    return this;
  }

  /**
   * Get includeRecurring
   * @return includeRecurring
   */
  @javax.annotation.Nullable
  public Boolean getIncludeRecurring() {
    return includeRecurring;
  }

  public void setIncludeRecurring(Boolean includeRecurring) {
    this.includeRecurring = includeRecurring;
  }


  public BudgetPerformanceHistoryCostTypes includeOtherSubscription(Boolean includeOtherSubscription) {
    this.includeOtherSubscription = includeOtherSubscription;
    return this;
  }

  /**
   * Get includeOtherSubscription
   * @return includeOtherSubscription
   */
  @javax.annotation.Nullable
  public Boolean getIncludeOtherSubscription() {
    return includeOtherSubscription;
  }

  public void setIncludeOtherSubscription(Boolean includeOtherSubscription) {
    this.includeOtherSubscription = includeOtherSubscription;
  }


  public BudgetPerformanceHistoryCostTypes includeSupport(Boolean includeSupport) {
    this.includeSupport = includeSupport;
    return this;
  }

  /**
   * Get includeSupport
   * @return includeSupport
   */
  @javax.annotation.Nullable
  public Boolean getIncludeSupport() {
    return includeSupport;
  }

  public void setIncludeSupport(Boolean includeSupport) {
    this.includeSupport = includeSupport;
  }


  public BudgetPerformanceHistoryCostTypes includeDiscount(Boolean includeDiscount) {
    this.includeDiscount = includeDiscount;
    return this;
  }

  /**
   * Get includeDiscount
   * @return includeDiscount
   */
  @javax.annotation.Nullable
  public Boolean getIncludeDiscount() {
    return includeDiscount;
  }

  public void setIncludeDiscount(Boolean includeDiscount) {
    this.includeDiscount = includeDiscount;
  }


  public BudgetPerformanceHistoryCostTypes useAmortized(Boolean useAmortized) {
    this.useAmortized = useAmortized;
    return this;
  }

  /**
   * Get useAmortized
   * @return useAmortized
   */
  @javax.annotation.Nullable
  public Boolean getUseAmortized() {
    return useAmortized;
  }

  public void setUseAmortized(Boolean useAmortized) {
    this.useAmortized = useAmortized;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BudgetPerformanceHistoryCostTypes budgetPerformanceHistoryCostTypes = (BudgetPerformanceHistoryCostTypes) o;
    return Objects.equals(this.includeTax, budgetPerformanceHistoryCostTypes.includeTax) &&
        Objects.equals(this.includeSubscription, budgetPerformanceHistoryCostTypes.includeSubscription) &&
        Objects.equals(this.useBlended, budgetPerformanceHistoryCostTypes.useBlended) &&
        Objects.equals(this.includeRefund, budgetPerformanceHistoryCostTypes.includeRefund) &&
        Objects.equals(this.includeCredit, budgetPerformanceHistoryCostTypes.includeCredit) &&
        Objects.equals(this.includeUpfront, budgetPerformanceHistoryCostTypes.includeUpfront) &&
        Objects.equals(this.includeRecurring, budgetPerformanceHistoryCostTypes.includeRecurring) &&
        Objects.equals(this.includeOtherSubscription, budgetPerformanceHistoryCostTypes.includeOtherSubscription) &&
        Objects.equals(this.includeSupport, budgetPerformanceHistoryCostTypes.includeSupport) &&
        Objects.equals(this.includeDiscount, budgetPerformanceHistoryCostTypes.includeDiscount) &&
        Objects.equals(this.useAmortized, budgetPerformanceHistoryCostTypes.useAmortized);
  }

  @Override
  public int hashCode() {
    return Objects.hash(includeTax, includeSubscription, useBlended, includeRefund, includeCredit, includeUpfront, includeRecurring, includeOtherSubscription, includeSupport, includeDiscount, useAmortized);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BudgetPerformanceHistoryCostTypes {\n");
    sb.append("    includeTax: ").append(toIndentedString(includeTax)).append("\n");
    sb.append("    includeSubscription: ").append(toIndentedString(includeSubscription)).append("\n");
    sb.append("    useBlended: ").append(toIndentedString(useBlended)).append("\n");
    sb.append("    includeRefund: ").append(toIndentedString(includeRefund)).append("\n");
    sb.append("    includeCredit: ").append(toIndentedString(includeCredit)).append("\n");
    sb.append("    includeUpfront: ").append(toIndentedString(includeUpfront)).append("\n");
    sb.append("    includeRecurring: ").append(toIndentedString(includeRecurring)).append("\n");
    sb.append("    includeOtherSubscription: ").append(toIndentedString(includeOtherSubscription)).append("\n");
    sb.append("    includeSupport: ").append(toIndentedString(includeSupport)).append("\n");
    sb.append("    includeDiscount: ").append(toIndentedString(includeDiscount)).append("\n");
    sb.append("    useAmortized: ").append(toIndentedString(useAmortized)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("IncludeTax");
    openapiFields.add("IncludeSubscription");
    openapiFields.add("UseBlended");
    openapiFields.add("IncludeRefund");
    openapiFields.add("IncludeCredit");
    openapiFields.add("IncludeUpfront");
    openapiFields.add("IncludeRecurring");
    openapiFields.add("IncludeOtherSubscription");
    openapiFields.add("IncludeSupport");
    openapiFields.add("IncludeDiscount");
    openapiFields.add("UseAmortized");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BudgetPerformanceHistoryCostTypes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BudgetPerformanceHistoryCostTypes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BudgetPerformanceHistoryCostTypes is not found in the empty JSON string", BudgetPerformanceHistoryCostTypes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BudgetPerformanceHistoryCostTypes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BudgetPerformanceHistoryCostTypes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `IncludeTax`
      if (jsonObj.get("IncludeTax") != null && !jsonObj.get("IncludeTax").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IncludeTax"));
      }
      // validate the optional field `IncludeSubscription`
      if (jsonObj.get("IncludeSubscription") != null && !jsonObj.get("IncludeSubscription").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IncludeSubscription"));
      }
      // validate the optional field `UseBlended`
      if (jsonObj.get("UseBlended") != null && !jsonObj.get("UseBlended").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("UseBlended"));
      }
      // validate the optional field `IncludeRefund`
      if (jsonObj.get("IncludeRefund") != null && !jsonObj.get("IncludeRefund").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IncludeRefund"));
      }
      // validate the optional field `IncludeCredit`
      if (jsonObj.get("IncludeCredit") != null && !jsonObj.get("IncludeCredit").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IncludeCredit"));
      }
      // validate the optional field `IncludeUpfront`
      if (jsonObj.get("IncludeUpfront") != null && !jsonObj.get("IncludeUpfront").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IncludeUpfront"));
      }
      // validate the optional field `IncludeRecurring`
      if (jsonObj.get("IncludeRecurring") != null && !jsonObj.get("IncludeRecurring").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IncludeRecurring"));
      }
      // validate the optional field `IncludeOtherSubscription`
      if (jsonObj.get("IncludeOtherSubscription") != null && !jsonObj.get("IncludeOtherSubscription").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IncludeOtherSubscription"));
      }
      // validate the optional field `IncludeSupport`
      if (jsonObj.get("IncludeSupport") != null && !jsonObj.get("IncludeSupport").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IncludeSupport"));
      }
      // validate the optional field `IncludeDiscount`
      if (jsonObj.get("IncludeDiscount") != null && !jsonObj.get("IncludeDiscount").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IncludeDiscount"));
      }
      // validate the optional field `UseAmortized`
      if (jsonObj.get("UseAmortized") != null && !jsonObj.get("UseAmortized").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("UseAmortized"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BudgetPerformanceHistoryCostTypes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BudgetPerformanceHistoryCostTypes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BudgetPerformanceHistoryCostTypes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BudgetPerformanceHistoryCostTypes.class));

       return (TypeAdapter<T>) new TypeAdapter<BudgetPerformanceHistoryCostTypes>() {
           @Override
           public void write(JsonWriter out, BudgetPerformanceHistoryCostTypes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BudgetPerformanceHistoryCostTypes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BudgetPerformanceHistoryCostTypes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BudgetPerformanceHistoryCostTypes
   * @throws IOException if the JSON string is invalid with respect to BudgetPerformanceHistoryCostTypes
   */
  public static BudgetPerformanceHistoryCostTypes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BudgetPerformanceHistoryCostTypes.class);
  }

  /**
   * Convert an instance of BudgetPerformanceHistoryCostTypes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

