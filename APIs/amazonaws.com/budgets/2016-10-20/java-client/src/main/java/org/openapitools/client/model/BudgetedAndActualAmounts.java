/*
 * AWS Budgets
 * <p>Use the Amazon Web Services Budgets API to plan your service usage, service costs, and instance reservations. This API reference provides descriptions, syntax, and usage examples for each of the actions and data types for the Amazon Web Services Budgets feature. </p> <p>Budgets provide you with a way to see the following information:</p> <ul> <li> <p>How close your plan is to your budgeted amount or to the free tier limits</p> </li> <li> <p>Your usage-to-date, including how much you've used of your Reserved Instances (RIs)</p> </li> <li> <p>Your current estimated charges from Amazon Web Services, and how much your predicted usage will accrue in charges by the end of the month</p> </li> <li> <p>How much of your budget has been used</p> </li> </ul> <p>Amazon Web Services updates your budget status several times a day. Budgets track your unblended costs, subscriptions, refunds, and RIs. You can create the following types of budgets:</p> <ul> <li> <p> <b>Cost budgets</b> - Plan how much you want to spend on a service.</p> </li> <li> <p> <b>Usage budgets</b> - Plan how much you want to use one or more services.</p> </li> <li> <p> <b>RI utilization budgets</b> - Define a utilization threshold, and receive alerts when your RI usage falls below that threshold. This lets you see if your RIs are unused or under-utilized.</p> </li> <li> <p> <b>RI coverage budgets</b> - Define a coverage threshold, and receive alerts when the number of your instance hours that are covered by RIs fall below that threshold. This lets you see how much of your instance usage is covered by a reservation.</p> </li> </ul> <p>Service Endpoint</p> <p>The Amazon Web Services Budgets API provides the following endpoint:</p> <ul> <li> <p>https://budgets.amazonaws.com</p> </li> </ul> <p>For information about costs that are associated with the Amazon Web Services Budgets API, see <a href=\"https://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2016-10-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BudgetedAndActualAmountsActualAmount;
import org.openapitools.client.model.BudgetedAndActualAmountsBudgetedAmount;
import org.openapitools.client.model.BudgetedAndActualAmountsTimePeriod;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The amount of cost or usage that you created the budget for, compared to your actual costs or usage.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:20.507190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BudgetedAndActualAmounts {
  public static final String SERIALIZED_NAME_BUDGETED_AMOUNT = "BudgetedAmount";
  @SerializedName(SERIALIZED_NAME_BUDGETED_AMOUNT)
  private BudgetedAndActualAmountsBudgetedAmount budgetedAmount;

  public static final String SERIALIZED_NAME_ACTUAL_AMOUNT = "ActualAmount";
  @SerializedName(SERIALIZED_NAME_ACTUAL_AMOUNT)
  private BudgetedAndActualAmountsActualAmount actualAmount;

  public static final String SERIALIZED_NAME_TIME_PERIOD = "TimePeriod";
  @SerializedName(SERIALIZED_NAME_TIME_PERIOD)
  private BudgetedAndActualAmountsTimePeriod timePeriod;

  public BudgetedAndActualAmounts() {
  }

  public BudgetedAndActualAmounts budgetedAmount(BudgetedAndActualAmountsBudgetedAmount budgetedAmount) {
    this.budgetedAmount = budgetedAmount;
    return this;
  }

  /**
   * Get budgetedAmount
   * @return budgetedAmount
   */
  @javax.annotation.Nullable
  public BudgetedAndActualAmountsBudgetedAmount getBudgetedAmount() {
    return budgetedAmount;
  }

  public void setBudgetedAmount(BudgetedAndActualAmountsBudgetedAmount budgetedAmount) {
    this.budgetedAmount = budgetedAmount;
  }


  public BudgetedAndActualAmounts actualAmount(BudgetedAndActualAmountsActualAmount actualAmount) {
    this.actualAmount = actualAmount;
    return this;
  }

  /**
   * Get actualAmount
   * @return actualAmount
   */
  @javax.annotation.Nullable
  public BudgetedAndActualAmountsActualAmount getActualAmount() {
    return actualAmount;
  }

  public void setActualAmount(BudgetedAndActualAmountsActualAmount actualAmount) {
    this.actualAmount = actualAmount;
  }


  public BudgetedAndActualAmounts timePeriod(BudgetedAndActualAmountsTimePeriod timePeriod) {
    this.timePeriod = timePeriod;
    return this;
  }

  /**
   * Get timePeriod
   * @return timePeriod
   */
  @javax.annotation.Nullable
  public BudgetedAndActualAmountsTimePeriod getTimePeriod() {
    return timePeriod;
  }

  public void setTimePeriod(BudgetedAndActualAmountsTimePeriod timePeriod) {
    this.timePeriod = timePeriod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BudgetedAndActualAmounts budgetedAndActualAmounts = (BudgetedAndActualAmounts) o;
    return Objects.equals(this.budgetedAmount, budgetedAndActualAmounts.budgetedAmount) &&
        Objects.equals(this.actualAmount, budgetedAndActualAmounts.actualAmount) &&
        Objects.equals(this.timePeriod, budgetedAndActualAmounts.timePeriod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(budgetedAmount, actualAmount, timePeriod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BudgetedAndActualAmounts {\n");
    sb.append("    budgetedAmount: ").append(toIndentedString(budgetedAmount)).append("\n");
    sb.append("    actualAmount: ").append(toIndentedString(actualAmount)).append("\n");
    sb.append("    timePeriod: ").append(toIndentedString(timePeriod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BudgetedAmount");
    openapiFields.add("ActualAmount");
    openapiFields.add("TimePeriod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BudgetedAndActualAmounts
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BudgetedAndActualAmounts.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BudgetedAndActualAmounts is not found in the empty JSON string", BudgetedAndActualAmounts.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BudgetedAndActualAmounts.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BudgetedAndActualAmounts` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `BudgetedAmount`
      if (jsonObj.get("BudgetedAmount") != null && !jsonObj.get("BudgetedAmount").isJsonNull()) {
        BudgetedAndActualAmountsBudgetedAmount.validateJsonElement(jsonObj.get("BudgetedAmount"));
      }
      // validate the optional field `ActualAmount`
      if (jsonObj.get("ActualAmount") != null && !jsonObj.get("ActualAmount").isJsonNull()) {
        BudgetedAndActualAmountsActualAmount.validateJsonElement(jsonObj.get("ActualAmount"));
      }
      // validate the optional field `TimePeriod`
      if (jsonObj.get("TimePeriod") != null && !jsonObj.get("TimePeriod").isJsonNull()) {
        BudgetedAndActualAmountsTimePeriod.validateJsonElement(jsonObj.get("TimePeriod"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BudgetedAndActualAmounts.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BudgetedAndActualAmounts' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BudgetedAndActualAmounts> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BudgetedAndActualAmounts.class));

       return (TypeAdapter<T>) new TypeAdapter<BudgetedAndActualAmounts>() {
           @Override
           public void write(JsonWriter out, BudgetedAndActualAmounts value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BudgetedAndActualAmounts read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BudgetedAndActualAmounts given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BudgetedAndActualAmounts
   * @throws IOException if the JSON string is invalid with respect to BudgetedAndActualAmounts
   */
  public static BudgetedAndActualAmounts fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BudgetedAndActualAmounts.class);
  }

  /**
   * Convert an instance of BudgetedAndActualAmounts to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

