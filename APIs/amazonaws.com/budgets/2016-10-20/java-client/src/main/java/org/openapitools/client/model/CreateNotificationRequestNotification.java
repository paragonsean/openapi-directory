/*
 * AWS Budgets
 * <p>Use the Amazon Web Services Budgets API to plan your service usage, service costs, and instance reservations. This API reference provides descriptions, syntax, and usage examples for each of the actions and data types for the Amazon Web Services Budgets feature. </p> <p>Budgets provide you with a way to see the following information:</p> <ul> <li> <p>How close your plan is to your budgeted amount or to the free tier limits</p> </li> <li> <p>Your usage-to-date, including how much you've used of your Reserved Instances (RIs)</p> </li> <li> <p>Your current estimated charges from Amazon Web Services, and how much your predicted usage will accrue in charges by the end of the month</p> </li> <li> <p>How much of your budget has been used</p> </li> </ul> <p>Amazon Web Services updates your budget status several times a day. Budgets track your unblended costs, subscriptions, refunds, and RIs. You can create the following types of budgets:</p> <ul> <li> <p> <b>Cost budgets</b> - Plan how much you want to spend on a service.</p> </li> <li> <p> <b>Usage budgets</b> - Plan how much you want to use one or more services.</p> </li> <li> <p> <b>RI utilization budgets</b> - Define a utilization threshold, and receive alerts when your RI usage falls below that threshold. This lets you see if your RIs are unused or under-utilized.</p> </li> <li> <p> <b>RI coverage budgets</b> - Define a coverage threshold, and receive alerts when the number of your instance hours that are covered by RIs fall below that threshold. This lets you see how much of your instance usage is covered by a reservation.</p> </li> </ul> <p>Service Endpoint</p> <p>The Amazon Web Services Budgets API provides the following endpoint:</p> <ul> <li> <p>https://budgets.amazonaws.com</p> </li> </ul> <p>For information about costs that are associated with the Amazon Web Services Budgets API, see <a href=\"https://aws.amazon.com/aws-cost-management/pricing/\">Amazon Web Services Cost Management Pricing</a>.</p>
 *
 * The version of the OpenAPI document: 2016-10-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ComparisonOperator;
import org.openapitools.client.model.NotificationState;
import org.openapitools.client.model.NotificationType;
import org.openapitools.client.model.ThresholdType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateNotificationRequestNotification
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:20.507190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateNotificationRequestNotification {
  public static final String SERIALIZED_NAME_NOTIFICATION_TYPE = "NotificationType";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_TYPE)
  private NotificationType notificationType;

  public static final String SERIALIZED_NAME_COMPARISON_OPERATOR = "ComparisonOperator";
  @SerializedName(SERIALIZED_NAME_COMPARISON_OPERATOR)
  private ComparisonOperator comparisonOperator;

  public static final String SERIALIZED_NAME_THRESHOLD = "Threshold";
  @SerializedName(SERIALIZED_NAME_THRESHOLD)
  private Double threshold;

  public static final String SERIALIZED_NAME_THRESHOLD_TYPE = "ThresholdType";
  @SerializedName(SERIALIZED_NAME_THRESHOLD_TYPE)
  private ThresholdType thresholdType;

  public static final String SERIALIZED_NAME_NOTIFICATION_STATE = "NotificationState";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_STATE)
  private NotificationState notificationState;

  public CreateNotificationRequestNotification() {
  }

  public CreateNotificationRequestNotification notificationType(NotificationType notificationType) {
    this.notificationType = notificationType;
    return this;
  }

  /**
   * Get notificationType
   * @return notificationType
   */
  @javax.annotation.Nonnull
  public NotificationType getNotificationType() {
    return notificationType;
  }

  public void setNotificationType(NotificationType notificationType) {
    this.notificationType = notificationType;
  }


  public CreateNotificationRequestNotification comparisonOperator(ComparisonOperator comparisonOperator) {
    this.comparisonOperator = comparisonOperator;
    return this;
  }

  /**
   * Get comparisonOperator
   * @return comparisonOperator
   */
  @javax.annotation.Nonnull
  public ComparisonOperator getComparisonOperator() {
    return comparisonOperator;
  }

  public void setComparisonOperator(ComparisonOperator comparisonOperator) {
    this.comparisonOperator = comparisonOperator;
  }


  public CreateNotificationRequestNotification threshold(Double threshold) {
    this.threshold = threshold;
    return this;
  }

  /**
   * Get threshold
   * @return threshold
   */
  @javax.annotation.Nonnull
  public Double getThreshold() {
    return threshold;
  }

  public void setThreshold(Double threshold) {
    this.threshold = threshold;
  }


  public CreateNotificationRequestNotification thresholdType(ThresholdType thresholdType) {
    this.thresholdType = thresholdType;
    return this;
  }

  /**
   * Get thresholdType
   * @return thresholdType
   */
  @javax.annotation.Nullable
  public ThresholdType getThresholdType() {
    return thresholdType;
  }

  public void setThresholdType(ThresholdType thresholdType) {
    this.thresholdType = thresholdType;
  }


  public CreateNotificationRequestNotification notificationState(NotificationState notificationState) {
    this.notificationState = notificationState;
    return this;
  }

  /**
   * Get notificationState
   * @return notificationState
   */
  @javax.annotation.Nullable
  public NotificationState getNotificationState() {
    return notificationState;
  }

  public void setNotificationState(NotificationState notificationState) {
    this.notificationState = notificationState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateNotificationRequestNotification createNotificationRequestNotification = (CreateNotificationRequestNotification) o;
    return Objects.equals(this.notificationType, createNotificationRequestNotification.notificationType) &&
        Objects.equals(this.comparisonOperator, createNotificationRequestNotification.comparisonOperator) &&
        Objects.equals(this.threshold, createNotificationRequestNotification.threshold) &&
        Objects.equals(this.thresholdType, createNotificationRequestNotification.thresholdType) &&
        Objects.equals(this.notificationState, createNotificationRequestNotification.notificationState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(notificationType, comparisonOperator, threshold, thresholdType, notificationState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateNotificationRequestNotification {\n");
    sb.append("    notificationType: ").append(toIndentedString(notificationType)).append("\n");
    sb.append("    comparisonOperator: ").append(toIndentedString(comparisonOperator)).append("\n");
    sb.append("    threshold: ").append(toIndentedString(threshold)).append("\n");
    sb.append("    thresholdType: ").append(toIndentedString(thresholdType)).append("\n");
    sb.append("    notificationState: ").append(toIndentedString(notificationState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("NotificationType");
    openapiFields.add("ComparisonOperator");
    openapiFields.add("Threshold");
    openapiFields.add("ThresholdType");
    openapiFields.add("NotificationState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("NotificationType");
    openapiRequiredFields.add("ComparisonOperator");
    openapiRequiredFields.add("Threshold");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateNotificationRequestNotification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateNotificationRequestNotification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateNotificationRequestNotification is not found in the empty JSON string", CreateNotificationRequestNotification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateNotificationRequestNotification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateNotificationRequestNotification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateNotificationRequestNotification.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `NotificationType`
      NotificationType.validateJsonElement(jsonObj.get("NotificationType"));
      // validate the required field `ComparisonOperator`
      ComparisonOperator.validateJsonElement(jsonObj.get("ComparisonOperator"));
      // validate the required field `Threshold`
      Double.validateJsonElement(jsonObj.get("Threshold"));
      // validate the optional field `ThresholdType`
      if (jsonObj.get("ThresholdType") != null && !jsonObj.get("ThresholdType").isJsonNull()) {
        ThresholdType.validateJsonElement(jsonObj.get("ThresholdType"));
      }
      // validate the optional field `NotificationState`
      if (jsonObj.get("NotificationState") != null && !jsonObj.get("NotificationState").isJsonNull()) {
        NotificationState.validateJsonElement(jsonObj.get("NotificationState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateNotificationRequestNotification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateNotificationRequestNotification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateNotificationRequestNotification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateNotificationRequestNotification.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateNotificationRequestNotification>() {
           @Override
           public void write(JsonWriter out, CreateNotificationRequestNotification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateNotificationRequestNotification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateNotificationRequestNotification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateNotificationRequestNotification
   * @throws IOException if the JSON string is invalid with respect to CreateNotificationRequestNotification
   */
  public static CreateNotificationRequestNotification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateNotificationRequestNotification.class);
  }

  /**
   * Convert an instance of CreateNotificationRequestNotification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

