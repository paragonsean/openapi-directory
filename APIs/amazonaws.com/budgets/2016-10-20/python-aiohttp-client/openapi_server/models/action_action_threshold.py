# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.threshold_type import ThresholdType
from openapi_server import util


class ActionActionThreshold(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_threshold_value: float=None, action_threshold_type: ThresholdType=None):
        """ActionActionThreshold - a model defined in OpenAPI

        :param action_threshold_value: The action_threshold_value of this ActionActionThreshold.
        :param action_threshold_type: The action_threshold_type of this ActionActionThreshold.
        """
        self.openapi_types = {
            'action_threshold_value': float,
            'action_threshold_type': ThresholdType
        }

        self.attribute_map = {
            'action_threshold_value': 'ActionThresholdValue',
            'action_threshold_type': 'ActionThresholdType'
        }

        self._action_threshold_value = action_threshold_value
        self._action_threshold_type = action_threshold_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionActionThreshold':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Action_ActionThreshold of this ActionActionThreshold.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_threshold_value(self):
        """Gets the action_threshold_value of this ActionActionThreshold.

         The threshold of a notification.

        :return: The action_threshold_value of this ActionActionThreshold.
        :rtype: float
        """
        return self._action_threshold_value

    @action_threshold_value.setter
    def action_threshold_value(self, action_threshold_value):
        """Sets the action_threshold_value of this ActionActionThreshold.

         The threshold of a notification.

        :param action_threshold_value: The action_threshold_value of this ActionActionThreshold.
        :type action_threshold_value: float
        """
        if action_threshold_value is None:
            raise ValueError("Invalid value for `action_threshold_value`, must not be `None`")
        if action_threshold_value is not None and action_threshold_value > 15000000000000:
            raise ValueError("Invalid value for `action_threshold_value`, must be a value less than or equal to `15000000000000`")
        if action_threshold_value is not None and action_threshold_value < 0:
            raise ValueError("Invalid value for `action_threshold_value`, must be a value greater than or equal to `0`")

        self._action_threshold_value = action_threshold_value

    @property
    def action_threshold_type(self):
        """Gets the action_threshold_type of this ActionActionThreshold.


        :return: The action_threshold_type of this ActionActionThreshold.
        :rtype: ThresholdType
        """
        return self._action_threshold_type

    @action_threshold_type.setter
    def action_threshold_type(self, action_threshold_type):
        """Sets the action_threshold_type of this ActionActionThreshold.


        :param action_threshold_type: The action_threshold_type of this ActionActionThreshold.
        :type action_threshold_type: ThresholdType
        """
        if action_threshold_type is None:
            raise ValueError("Invalid value for `action_threshold_type`, must not be `None`")

        self._action_threshold_type = action_threshold_type
