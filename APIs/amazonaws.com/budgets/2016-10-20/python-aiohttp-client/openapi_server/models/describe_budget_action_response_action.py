# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action_action_threshold import ActionActionThreshold
from openapi_server.models.action_definition import ActionDefinition
from openapi_server.models.action_status import ActionStatus
from openapi_server.models.action_type import ActionType
from openapi_server.models.approval_model import ApprovalModel
from openapi_server.models.notification_type import NotificationType
from openapi_server.models.subscriber import Subscriber
import re
from openapi_server import util


class DescribeBudgetActionResponseAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_id: str=None, budget_name: str=None, notification_type: NotificationType=None, action_type: ActionType=None, action_threshold: ActionActionThreshold=None, definition: ActionDefinition=None, execution_role_arn: str=None, approval_model: ApprovalModel=None, status: ActionStatus=None, subscribers: List[Subscriber]=None):
        """DescribeBudgetActionResponseAction - a model defined in OpenAPI

        :param action_id: The action_id of this DescribeBudgetActionResponseAction.
        :param budget_name: The budget_name of this DescribeBudgetActionResponseAction.
        :param notification_type: The notification_type of this DescribeBudgetActionResponseAction.
        :param action_type: The action_type of this DescribeBudgetActionResponseAction.
        :param action_threshold: The action_threshold of this DescribeBudgetActionResponseAction.
        :param definition: The definition of this DescribeBudgetActionResponseAction.
        :param execution_role_arn: The execution_role_arn of this DescribeBudgetActionResponseAction.
        :param approval_model: The approval_model of this DescribeBudgetActionResponseAction.
        :param status: The status of this DescribeBudgetActionResponseAction.
        :param subscribers: The subscribers of this DescribeBudgetActionResponseAction.
        """
        self.openapi_types = {
            'action_id': str,
            'budget_name': str,
            'notification_type': NotificationType,
            'action_type': ActionType,
            'action_threshold': ActionActionThreshold,
            'definition': ActionDefinition,
            'execution_role_arn': str,
            'approval_model': ApprovalModel,
            'status': ActionStatus,
            'subscribers': List[Subscriber]
        }

        self.attribute_map = {
            'action_id': 'ActionId',
            'budget_name': 'BudgetName',
            'notification_type': 'NotificationType',
            'action_type': 'ActionType',
            'action_threshold': 'ActionThreshold',
            'definition': 'Definition',
            'execution_role_arn': 'ExecutionRoleArn',
            'approval_model': 'ApprovalModel',
            'status': 'Status',
            'subscribers': 'Subscribers'
        }

        self._action_id = action_id
        self._budget_name = budget_name
        self._notification_type = notification_type
        self._action_type = action_type
        self._action_threshold = action_threshold
        self._definition = definition
        self._execution_role_arn = execution_role_arn
        self._approval_model = approval_model
        self._status = status
        self._subscribers = subscribers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeBudgetActionResponseAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeBudgetActionResponse_Action of this DescribeBudgetActionResponseAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_id(self):
        """Gets the action_id of this DescribeBudgetActionResponseAction.


        :return: The action_id of this DescribeBudgetActionResponseAction.
        :rtype: str
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id):
        """Sets the action_id of this DescribeBudgetActionResponseAction.


        :param action_id: The action_id of this DescribeBudgetActionResponseAction.
        :type action_id: str
        """
        if action_id is None:
            raise ValueError("Invalid value for `action_id`, must not be `None`")

        self._action_id = action_id

    @property
    def budget_name(self):
        """Gets the budget_name of this DescribeBudgetActionResponseAction.

         A string that represents the budget name. The \":\" and \"\\\" characters, and the \"/action/\" substring, aren't allowed.

        :return: The budget_name of this DescribeBudgetActionResponseAction.
        :rtype: str
        """
        return self._budget_name

    @budget_name.setter
    def budget_name(self, budget_name):
        """Sets the budget_name of this DescribeBudgetActionResponseAction.

         A string that represents the budget name. The \":\" and \"\\\" characters, and the \"/action/\" substring, aren't allowed.

        :param budget_name: The budget_name of this DescribeBudgetActionResponseAction.
        :type budget_name: str
        """
        if budget_name is None:
            raise ValueError("Invalid value for `budget_name`, must not be `None`")
        if budget_name is not None and len(budget_name) > 100:
            raise ValueError("Invalid value for `budget_name`, length must be less than or equal to `100`")
        if budget_name is not None and len(budget_name) < 1:
            raise ValueError("Invalid value for `budget_name`, length must be greater than or equal to `1`")
        if budget_name is not None and not re.search(r'^(?![^:\\]*\/action\/)[^:\\]+$', budget_name):
            raise ValueError("Invalid value for `budget_name`, must be a follow pattern or equal to `/^(?![^:\\]*\/action\/)[^:\\]+$/`")

        self._budget_name = budget_name

    @property
    def notification_type(self):
        """Gets the notification_type of this DescribeBudgetActionResponseAction.


        :return: The notification_type of this DescribeBudgetActionResponseAction.
        :rtype: NotificationType
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type):
        """Sets the notification_type of this DescribeBudgetActionResponseAction.


        :param notification_type: The notification_type of this DescribeBudgetActionResponseAction.
        :type notification_type: NotificationType
        """
        if notification_type is None:
            raise ValueError("Invalid value for `notification_type`, must not be `None`")

        self._notification_type = notification_type

    @property
    def action_type(self):
        """Gets the action_type of this DescribeBudgetActionResponseAction.


        :return: The action_type of this DescribeBudgetActionResponseAction.
        :rtype: ActionType
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this DescribeBudgetActionResponseAction.


        :param action_type: The action_type of this DescribeBudgetActionResponseAction.
        :type action_type: ActionType
        """
        if action_type is None:
            raise ValueError("Invalid value for `action_type`, must not be `None`")

        self._action_type = action_type

    @property
    def action_threshold(self):
        """Gets the action_threshold of this DescribeBudgetActionResponseAction.


        :return: The action_threshold of this DescribeBudgetActionResponseAction.
        :rtype: ActionActionThreshold
        """
        return self._action_threshold

    @action_threshold.setter
    def action_threshold(self, action_threshold):
        """Sets the action_threshold of this DescribeBudgetActionResponseAction.


        :param action_threshold: The action_threshold of this DescribeBudgetActionResponseAction.
        :type action_threshold: ActionActionThreshold
        """
        if action_threshold is None:
            raise ValueError("Invalid value for `action_threshold`, must not be `None`")

        self._action_threshold = action_threshold

    @property
    def definition(self):
        """Gets the definition of this DescribeBudgetActionResponseAction.


        :return: The definition of this DescribeBudgetActionResponseAction.
        :rtype: ActionDefinition
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this DescribeBudgetActionResponseAction.


        :param definition: The definition of this DescribeBudgetActionResponseAction.
        :type definition: ActionDefinition
        """
        if definition is None:
            raise ValueError("Invalid value for `definition`, must not be `None`")

        self._definition = definition

    @property
    def execution_role_arn(self):
        """Gets the execution_role_arn of this DescribeBudgetActionResponseAction.


        :return: The execution_role_arn of this DescribeBudgetActionResponseAction.
        :rtype: str
        """
        return self._execution_role_arn

    @execution_role_arn.setter
    def execution_role_arn(self, execution_role_arn):
        """Sets the execution_role_arn of this DescribeBudgetActionResponseAction.


        :param execution_role_arn: The execution_role_arn of this DescribeBudgetActionResponseAction.
        :type execution_role_arn: str
        """
        if execution_role_arn is None:
            raise ValueError("Invalid value for `execution_role_arn`, must not be `None`")

        self._execution_role_arn = execution_role_arn

    @property
    def approval_model(self):
        """Gets the approval_model of this DescribeBudgetActionResponseAction.


        :return: The approval_model of this DescribeBudgetActionResponseAction.
        :rtype: ApprovalModel
        """
        return self._approval_model

    @approval_model.setter
    def approval_model(self, approval_model):
        """Sets the approval_model of this DescribeBudgetActionResponseAction.


        :param approval_model: The approval_model of this DescribeBudgetActionResponseAction.
        :type approval_model: ApprovalModel
        """
        if approval_model is None:
            raise ValueError("Invalid value for `approval_model`, must not be `None`")

        self._approval_model = approval_model

    @property
    def status(self):
        """Gets the status of this DescribeBudgetActionResponseAction.


        :return: The status of this DescribeBudgetActionResponseAction.
        :rtype: ActionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DescribeBudgetActionResponseAction.


        :param status: The status of this DescribeBudgetActionResponseAction.
        :type status: ActionStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def subscribers(self):
        """Gets the subscribers of this DescribeBudgetActionResponseAction.

         A list of subscribers.

        :return: The subscribers of this DescribeBudgetActionResponseAction.
        :rtype: List[Subscriber]
        """
        return self._subscribers

    @subscribers.setter
    def subscribers(self, subscribers):
        """Sets the subscribers of this DescribeBudgetActionResponseAction.

         A list of subscribers.

        :param subscribers: The subscribers of this DescribeBudgetActionResponseAction.
        :type subscribers: List[Subscriber]
        """
        if subscribers is None:
            raise ValueError("Invalid value for `subscribers`, must not be `None`")
        if subscribers is not None and len(subscribers) > 11:
            raise ValueError("Invalid value for `subscribers`, number of items must be less than or equal to `11`")
        if subscribers is not None and len(subscribers) < 1:
            raise ValueError("Invalid value for `subscribers`, number of items must be greater than or equal to `1`")

        self._subscribers = subscribers
