# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BudgetBudgetLimit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: str=None, unit: str=None):
        """BudgetBudgetLimit - a model defined in OpenAPI

        :param amount: The amount of this BudgetBudgetLimit.
        :param unit: The unit of this BudgetBudgetLimit.
        """
        self.openapi_types = {
            'amount': str,
            'unit': str
        }

        self.attribute_map = {
            'amount': 'Amount',
            'unit': 'Unit'
        }

        self._amount = amount
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BudgetBudgetLimit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Budget_BudgetLimit of this BudgetBudgetLimit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this BudgetBudgetLimit.


        :return: The amount of this BudgetBudgetLimit.
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this BudgetBudgetLimit.


        :param amount: The amount of this BudgetBudgetLimit.
        :type amount: str
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def unit(self):
        """Gets the unit of this BudgetBudgetLimit.


        :return: The unit of this BudgetBudgetLimit.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this BudgetBudgetLimit.


        :param unit: The unit of this BudgetBudgetLimit.
        :type unit: str
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")

        self._unit = unit
