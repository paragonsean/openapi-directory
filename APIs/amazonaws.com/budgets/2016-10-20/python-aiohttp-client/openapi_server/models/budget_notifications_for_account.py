# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.notification import Notification
import re
from openapi_server import util


class BudgetNotificationsForAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, notifications: List[Notification]=None, budget_name: str=None):
        """BudgetNotificationsForAccount - a model defined in OpenAPI

        :param notifications: The notifications of this BudgetNotificationsForAccount.
        :param budget_name: The budget_name of this BudgetNotificationsForAccount.
        """
        self.openapi_types = {
            'notifications': List[Notification],
            'budget_name': str
        }

        self.attribute_map = {
            'notifications': 'Notifications',
            'budget_name': 'BudgetName'
        }

        self._notifications = notifications
        self._budget_name = budget_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BudgetNotificationsForAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BudgetNotificationsForAccount of this BudgetNotificationsForAccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def notifications(self):
        """Gets the notifications of this BudgetNotificationsForAccount.

         A list of notifications.

        :return: The notifications of this BudgetNotificationsForAccount.
        :rtype: List[Notification]
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this BudgetNotificationsForAccount.

         A list of notifications.

        :param notifications: The notifications of this BudgetNotificationsForAccount.
        :type notifications: List[Notification]
        """

        self._notifications = notifications

    @property
    def budget_name(self):
        """Gets the budget_name of this BudgetNotificationsForAccount.

         A string that represents the budget name. The \":\" and \"\\\" characters, and the \"/action/\" substring, aren't allowed.

        :return: The budget_name of this BudgetNotificationsForAccount.
        :rtype: str
        """
        return self._budget_name

    @budget_name.setter
    def budget_name(self, budget_name):
        """Sets the budget_name of this BudgetNotificationsForAccount.

         A string that represents the budget name. The \":\" and \"\\\" characters, and the \"/action/\" substring, aren't allowed.

        :param budget_name: The budget_name of this BudgetNotificationsForAccount.
        :type budget_name: str
        """
        if budget_name is not None and len(budget_name) > 100:
            raise ValueError("Invalid value for `budget_name`, length must be less than or equal to `100`")
        if budget_name is not None and len(budget_name) < 1:
            raise ValueError("Invalid value for `budget_name`, length must be greater than or equal to `1`")
        if budget_name is not None and not re.search(r'^(?![^:\\]*\/action\/)[^:\\]+$', budget_name):
            raise ValueError("Invalid value for `budget_name`, must be a follow pattern or equal to `/^(?![^:\\]*\/action\/)[^:\\]+$/`")

        self._budget_name = budget_name
