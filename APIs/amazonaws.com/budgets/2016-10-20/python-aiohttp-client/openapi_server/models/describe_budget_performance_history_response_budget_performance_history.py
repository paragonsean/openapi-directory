# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.budget_performance_history_cost_types import BudgetPerformanceHistoryCostTypes
from openapi_server.models.budget_type import BudgetType
from openapi_server.models.time_unit import TimeUnit
import re
from openapi_server import util


class DescribeBudgetPerformanceHistoryResponseBudgetPerformanceHistory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, budget_name: str=None, budget_type: BudgetType=None, cost_filters: Dict=None, cost_types: BudgetPerformanceHistoryCostTypes=None, time_unit: TimeUnit=None, budgeted_and_actual_amounts_list: List=None):
        """DescribeBudgetPerformanceHistoryResponseBudgetPerformanceHistory - a model defined in OpenAPI

        :param budget_name: The budget_name of this DescribeBudgetPerformanceHistoryResponseBudgetPerformanceHistory.
        :param budget_type: The budget_type of this DescribeBudgetPerformanceHistoryResponseBudgetPerformanceHistory.
        :param cost_filters: The cost_filters of this DescribeBudgetPerformanceHistoryResponseBudgetPerformanceHistory.
        :param cost_types: The cost_types of this DescribeBudgetPerformanceHistoryResponseBudgetPerformanceHistory.
        :param time_unit: The time_unit of this DescribeBudgetPerformanceHistoryResponseBudgetPerformanceHistory.
        :param budgeted_and_actual_amounts_list: The budgeted_and_actual_amounts_list of this DescribeBudgetPerformanceHistoryResponseBudgetPerformanceHistory.
        """
        self.openapi_types = {
            'budget_name': str,
            'budget_type': BudgetType,
            'cost_filters': Dict,
            'cost_types': BudgetPerformanceHistoryCostTypes,
            'time_unit': TimeUnit,
            'budgeted_and_actual_amounts_list': List
        }

        self.attribute_map = {
            'budget_name': 'BudgetName',
            'budget_type': 'BudgetType',
            'cost_filters': 'CostFilters',
            'cost_types': 'CostTypes',
            'time_unit': 'TimeUnit',
            'budgeted_and_actual_amounts_list': 'BudgetedAndActualAmountsList'
        }

        self._budget_name = budget_name
        self._budget_type = budget_type
        self._cost_filters = cost_filters
        self._cost_types = cost_types
        self._time_unit = time_unit
        self._budgeted_and_actual_amounts_list = budgeted_and_actual_amounts_list

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeBudgetPerformanceHistoryResponseBudgetPerformanceHistory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeBudgetPerformanceHistoryResponse_BudgetPerformanceHistory of this DescribeBudgetPerformanceHistoryResponseBudgetPerformanceHistory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def budget_name(self):
        """Gets the budget_name of this DescribeBudgetPerformanceHistoryResponseBudgetPerformanceHistory.

         A string that represents the budget name. The \":\" and \"\\\" characters, and the \"/action/\" substring, aren't allowed.

        :return: The budget_name of this DescribeBudgetPerformanceHistoryResponseBudgetPerformanceHistory.
        :rtype: str
        """
        return self._budget_name

    @budget_name.setter
    def budget_name(self, budget_name):
        """Sets the budget_name of this DescribeBudgetPerformanceHistoryResponseBudgetPerformanceHistory.

         A string that represents the budget name. The \":\" and \"\\\" characters, and the \"/action/\" substring, aren't allowed.

        :param budget_name: The budget_name of this DescribeBudgetPerformanceHistoryResponseBudgetPerformanceHistory.
        :type budget_name: str
        """
        if budget_name is not None and len(budget_name) > 100:
            raise ValueError("Invalid value for `budget_name`, length must be less than or equal to `100`")
        if budget_name is not None and len(budget_name) < 1:
            raise ValueError("Invalid value for `budget_name`, length must be greater than or equal to `1`")
        if budget_name is not None and not re.search(r'^(?![^:\\]*\/action\/)[^:\\]+$', budget_name):
            raise ValueError("Invalid value for `budget_name`, must be a follow pattern or equal to `/^(?![^:\\]*\/action\/)[^:\\]+$/`")

        self._budget_name = budget_name

    @property
    def budget_type(self):
        """Gets the budget_type of this DescribeBudgetPerformanceHistoryResponseBudgetPerformanceHistory.


        :return: The budget_type of this DescribeBudgetPerformanceHistoryResponseBudgetPerformanceHistory.
        :rtype: BudgetType
        """
        return self._budget_type

    @budget_type.setter
    def budget_type(self, budget_type):
        """Sets the budget_type of this DescribeBudgetPerformanceHistoryResponseBudgetPerformanceHistory.


        :param budget_type: The budget_type of this DescribeBudgetPerformanceHistoryResponseBudgetPerformanceHistory.
        :type budget_type: BudgetType
        """

        self._budget_type = budget_type

    @property
    def cost_filters(self):
        """Gets the cost_filters of this DescribeBudgetPerformanceHistoryResponseBudgetPerformanceHistory.


        :return: The cost_filters of this DescribeBudgetPerformanceHistoryResponseBudgetPerformanceHistory.
        :rtype: Dict
        """
        return self._cost_filters

    @cost_filters.setter
    def cost_filters(self, cost_filters):
        """Sets the cost_filters of this DescribeBudgetPerformanceHistoryResponseBudgetPerformanceHistory.


        :param cost_filters: The cost_filters of this DescribeBudgetPerformanceHistoryResponseBudgetPerformanceHistory.
        :type cost_filters: Dict
        """

        self._cost_filters = cost_filters

    @property
    def cost_types(self):
        """Gets the cost_types of this DescribeBudgetPerformanceHistoryResponseBudgetPerformanceHistory.


        :return: The cost_types of this DescribeBudgetPerformanceHistoryResponseBudgetPerformanceHistory.
        :rtype: BudgetPerformanceHistoryCostTypes
        """
        return self._cost_types

    @cost_types.setter
    def cost_types(self, cost_types):
        """Sets the cost_types of this DescribeBudgetPerformanceHistoryResponseBudgetPerformanceHistory.


        :param cost_types: The cost_types of this DescribeBudgetPerformanceHistoryResponseBudgetPerformanceHistory.
        :type cost_types: BudgetPerformanceHistoryCostTypes
        """

        self._cost_types = cost_types

    @property
    def time_unit(self):
        """Gets the time_unit of this DescribeBudgetPerformanceHistoryResponseBudgetPerformanceHistory.


        :return: The time_unit of this DescribeBudgetPerformanceHistoryResponseBudgetPerformanceHistory.
        :rtype: TimeUnit
        """
        return self._time_unit

    @time_unit.setter
    def time_unit(self, time_unit):
        """Sets the time_unit of this DescribeBudgetPerformanceHistoryResponseBudgetPerformanceHistory.


        :param time_unit: The time_unit of this DescribeBudgetPerformanceHistoryResponseBudgetPerformanceHistory.
        :type time_unit: TimeUnit
        """

        self._time_unit = time_unit

    @property
    def budgeted_and_actual_amounts_list(self):
        """Gets the budgeted_and_actual_amounts_list of this DescribeBudgetPerformanceHistoryResponseBudgetPerformanceHistory.


        :return: The budgeted_and_actual_amounts_list of this DescribeBudgetPerformanceHistoryResponseBudgetPerformanceHistory.
        :rtype: List
        """
        return self._budgeted_and_actual_amounts_list

    @budgeted_and_actual_amounts_list.setter
    def budgeted_and_actual_amounts_list(self, budgeted_and_actual_amounts_list):
        """Sets the budgeted_and_actual_amounts_list of this DescribeBudgetPerformanceHistoryResponseBudgetPerformanceHistory.


        :param budgeted_and_actual_amounts_list: The budgeted_and_actual_amounts_list of this DescribeBudgetPerformanceHistoryResponseBudgetPerformanceHistory.
        :type budgeted_and_actual_amounts_list: List
        """

        self._budgeted_and_actual_amounts_list = budgeted_and_actual_amounts_list
