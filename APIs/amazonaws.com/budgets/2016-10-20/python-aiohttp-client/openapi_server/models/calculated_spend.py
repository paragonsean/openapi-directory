# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.calculated_spend_actual_spend import CalculatedSpendActualSpend
from openapi_server.models.calculated_spend_forecasted_spend import CalculatedSpendForecastedSpend
from openapi_server import util


class CalculatedSpend(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actual_spend: CalculatedSpendActualSpend=None, forecasted_spend: CalculatedSpendForecastedSpend=None):
        """CalculatedSpend - a model defined in OpenAPI

        :param actual_spend: The actual_spend of this CalculatedSpend.
        :param forecasted_spend: The forecasted_spend of this CalculatedSpend.
        """
        self.openapi_types = {
            'actual_spend': CalculatedSpendActualSpend,
            'forecasted_spend': CalculatedSpendForecastedSpend
        }

        self.attribute_map = {
            'actual_spend': 'ActualSpend',
            'forecasted_spend': 'ForecastedSpend'
        }

        self._actual_spend = actual_spend
        self._forecasted_spend = forecasted_spend

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CalculatedSpend':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CalculatedSpend of this CalculatedSpend.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actual_spend(self):
        """Gets the actual_spend of this CalculatedSpend.


        :return: The actual_spend of this CalculatedSpend.
        :rtype: CalculatedSpendActualSpend
        """
        return self._actual_spend

    @actual_spend.setter
    def actual_spend(self, actual_spend):
        """Sets the actual_spend of this CalculatedSpend.


        :param actual_spend: The actual_spend of this CalculatedSpend.
        :type actual_spend: CalculatedSpendActualSpend
        """
        if actual_spend is None:
            raise ValueError("Invalid value for `actual_spend`, must not be `None`")

        self._actual_spend = actual_spend

    @property
    def forecasted_spend(self):
        """Gets the forecasted_spend of this CalculatedSpend.


        :return: The forecasted_spend of this CalculatedSpend.
        :rtype: CalculatedSpendForecastedSpend
        """
        return self._forecasted_spend

    @forecasted_spend.setter
    def forecasted_spend(self, forecasted_spend):
        """Sets the forecasted_spend of this CalculatedSpend.


        :param forecasted_spend: The forecasted_spend of this CalculatedSpend.
        :type forecasted_spend: CalculatedSpendForecastedSpend
        """

        self._forecasted_spend = forecasted_spend
