# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_budget_request_budget import CreateBudgetRequestBudget
from openapi_server import util


class CreateBudgetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, budget: CreateBudgetRequestBudget=None, notifications_with_subscribers: List=None):
        """CreateBudgetRequest - a model defined in OpenAPI

        :param account_id: The account_id of this CreateBudgetRequest.
        :param budget: The budget of this CreateBudgetRequest.
        :param notifications_with_subscribers: The notifications_with_subscribers of this CreateBudgetRequest.
        """
        self.openapi_types = {
            'account_id': str,
            'budget': CreateBudgetRequestBudget,
            'notifications_with_subscribers': List
        }

        self.attribute_map = {
            'account_id': 'AccountId',
            'budget': 'Budget',
            'notifications_with_subscribers': 'NotificationsWithSubscribers'
        }

        self._account_id = account_id
        self._budget = budget
        self._notifications_with_subscribers = notifications_with_subscribers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateBudgetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateBudgetRequest of this CreateBudgetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this CreateBudgetRequest.


        :return: The account_id of this CreateBudgetRequest.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CreateBudgetRequest.


        :param account_id: The account_id of this CreateBudgetRequest.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def budget(self):
        """Gets the budget of this CreateBudgetRequest.


        :return: The budget of this CreateBudgetRequest.
        :rtype: CreateBudgetRequestBudget
        """
        return self._budget

    @budget.setter
    def budget(self, budget):
        """Sets the budget of this CreateBudgetRequest.


        :param budget: The budget of this CreateBudgetRequest.
        :type budget: CreateBudgetRequestBudget
        """
        if budget is None:
            raise ValueError("Invalid value for `budget`, must not be `None`")

        self._budget = budget

    @property
    def notifications_with_subscribers(self):
        """Gets the notifications_with_subscribers of this CreateBudgetRequest.


        :return: The notifications_with_subscribers of this CreateBudgetRequest.
        :rtype: List
        """
        return self._notifications_with_subscribers

    @notifications_with_subscribers.setter
    def notifications_with_subscribers(self, notifications_with_subscribers):
        """Sets the notifications_with_subscribers of this CreateBudgetRequest.


        :param notifications_with_subscribers: The notifications_with_subscribers of this CreateBudgetRequest.
        :type notifications_with_subscribers: List
        """

        self._notifications_with_subscribers = notifications_with_subscribers
