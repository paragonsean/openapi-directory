# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_budget_action_response_new_action import UpdateBudgetActionResponseNewAction
from openapi_server.models.update_budget_action_response_old_action import UpdateBudgetActionResponseOldAction
import re
from openapi_server import util


class UpdateBudgetActionResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, budget_name: str=None, old_action: UpdateBudgetActionResponseOldAction=None, new_action: UpdateBudgetActionResponseNewAction=None):
        """UpdateBudgetActionResponse - a model defined in OpenAPI

        :param account_id: The account_id of this UpdateBudgetActionResponse.
        :param budget_name: The budget_name of this UpdateBudgetActionResponse.
        :param old_action: The old_action of this UpdateBudgetActionResponse.
        :param new_action: The new_action of this UpdateBudgetActionResponse.
        """
        self.openapi_types = {
            'account_id': str,
            'budget_name': str,
            'old_action': UpdateBudgetActionResponseOldAction,
            'new_action': UpdateBudgetActionResponseNewAction
        }

        self.attribute_map = {
            'account_id': 'AccountId',
            'budget_name': 'BudgetName',
            'old_action': 'OldAction',
            'new_action': 'NewAction'
        }

        self._account_id = account_id
        self._budget_name = budget_name
        self._old_action = old_action
        self._new_action = new_action

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateBudgetActionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateBudgetActionResponse of this UpdateBudgetActionResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this UpdateBudgetActionResponse.

        The account ID of the user. It's a 12-digit number.

        :return: The account_id of this UpdateBudgetActionResponse.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this UpdateBudgetActionResponse.

        The account ID of the user. It's a 12-digit number.

        :param account_id: The account_id of this UpdateBudgetActionResponse.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")
        if account_id is not None and len(account_id) > 12:
            raise ValueError("Invalid value for `account_id`, length must be less than or equal to `12`")
        if account_id is not None and len(account_id) < 12:
            raise ValueError("Invalid value for `account_id`, length must be greater than or equal to `12`")
        if account_id is not None and not re.search(r'\d{12}', account_id):
            raise ValueError("Invalid value for `account_id`, must be a follow pattern or equal to `/\d{12}/`")

        self._account_id = account_id

    @property
    def budget_name(self):
        """Gets the budget_name of this UpdateBudgetActionResponse.

         A string that represents the budget name. The \":\" and \"\\\" characters, and the \"/action/\" substring, aren't allowed.

        :return: The budget_name of this UpdateBudgetActionResponse.
        :rtype: str
        """
        return self._budget_name

    @budget_name.setter
    def budget_name(self, budget_name):
        """Sets the budget_name of this UpdateBudgetActionResponse.

         A string that represents the budget name. The \":\" and \"\\\" characters, and the \"/action/\" substring, aren't allowed.

        :param budget_name: The budget_name of this UpdateBudgetActionResponse.
        :type budget_name: str
        """
        if budget_name is None:
            raise ValueError("Invalid value for `budget_name`, must not be `None`")
        if budget_name is not None and len(budget_name) > 100:
            raise ValueError("Invalid value for `budget_name`, length must be less than or equal to `100`")
        if budget_name is not None and len(budget_name) < 1:
            raise ValueError("Invalid value for `budget_name`, length must be greater than or equal to `1`")
        if budget_name is not None and not re.search(r'^(?![^:\\]*\/action\/)[^:\\]+$', budget_name):
            raise ValueError("Invalid value for `budget_name`, must be a follow pattern or equal to `/^(?![^:\\]*\/action\/)[^:\\]+$/`")

        self._budget_name = budget_name

    @property
    def old_action(self):
        """Gets the old_action of this UpdateBudgetActionResponse.


        :return: The old_action of this UpdateBudgetActionResponse.
        :rtype: UpdateBudgetActionResponseOldAction
        """
        return self._old_action

    @old_action.setter
    def old_action(self, old_action):
        """Sets the old_action of this UpdateBudgetActionResponse.


        :param old_action: The old_action of this UpdateBudgetActionResponse.
        :type old_action: UpdateBudgetActionResponseOldAction
        """
        if old_action is None:
            raise ValueError("Invalid value for `old_action`, must not be `None`")

        self._old_action = old_action

    @property
    def new_action(self):
        """Gets the new_action of this UpdateBudgetActionResponse.


        :return: The new_action of this UpdateBudgetActionResponse.
        :rtype: UpdateBudgetActionResponseNewAction
        """
        return self._new_action

    @new_action.setter
    def new_action(self, new_action):
        """Sets the new_action of this UpdateBudgetActionResponse.


        :param new_action: The new_action of this UpdateBudgetActionResponse.
        :type new_action: UpdateBudgetActionResponseNewAction
        """
        if new_action is None:
            raise ValueError("Invalid value for `new_action`, must not be `None`")

        self._new_action = new_action
