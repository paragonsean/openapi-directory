# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_subscriber_request_notification import CreateSubscriberRequestNotification
from openapi_server.models.create_subscriber_request_subscriber import CreateSubscriberRequestSubscriber
from openapi_server import util


class CreateSubscriberRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, budget_name: str=None, notification: CreateSubscriberRequestNotification=None, subscriber: CreateSubscriberRequestSubscriber=None):
        """CreateSubscriberRequest - a model defined in OpenAPI

        :param account_id: The account_id of this CreateSubscriberRequest.
        :param budget_name: The budget_name of this CreateSubscriberRequest.
        :param notification: The notification of this CreateSubscriberRequest.
        :param subscriber: The subscriber of this CreateSubscriberRequest.
        """
        self.openapi_types = {
            'account_id': str,
            'budget_name': str,
            'notification': CreateSubscriberRequestNotification,
            'subscriber': CreateSubscriberRequestSubscriber
        }

        self.attribute_map = {
            'account_id': 'AccountId',
            'budget_name': 'BudgetName',
            'notification': 'Notification',
            'subscriber': 'Subscriber'
        }

        self._account_id = account_id
        self._budget_name = budget_name
        self._notification = notification
        self._subscriber = subscriber

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSubscriberRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSubscriberRequest of this CreateSubscriberRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this CreateSubscriberRequest.


        :return: The account_id of this CreateSubscriberRequest.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CreateSubscriberRequest.


        :param account_id: The account_id of this CreateSubscriberRequest.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def budget_name(self):
        """Gets the budget_name of this CreateSubscriberRequest.


        :return: The budget_name of this CreateSubscriberRequest.
        :rtype: str
        """
        return self._budget_name

    @budget_name.setter
    def budget_name(self, budget_name):
        """Sets the budget_name of this CreateSubscriberRequest.


        :param budget_name: The budget_name of this CreateSubscriberRequest.
        :type budget_name: str
        """
        if budget_name is None:
            raise ValueError("Invalid value for `budget_name`, must not be `None`")

        self._budget_name = budget_name

    @property
    def notification(self):
        """Gets the notification of this CreateSubscriberRequest.


        :return: The notification of this CreateSubscriberRequest.
        :rtype: CreateSubscriberRequestNotification
        """
        return self._notification

    @notification.setter
    def notification(self, notification):
        """Sets the notification of this CreateSubscriberRequest.


        :param notification: The notification of this CreateSubscriberRequest.
        :type notification: CreateSubscriberRequestNotification
        """
        if notification is None:
            raise ValueError("Invalid value for `notification`, must not be `None`")

        self._notification = notification

    @property
    def subscriber(self):
        """Gets the subscriber of this CreateSubscriberRequest.


        :return: The subscriber of this CreateSubscriberRequest.
        :rtype: CreateSubscriberRequestSubscriber
        """
        return self._subscriber

    @subscriber.setter
    def subscriber(self, subscriber):
        """Sets the subscriber of this CreateSubscriberRequest.


        :param subscriber: The subscriber of this CreateSubscriberRequest.
        :type subscriber: CreateSubscriberRequestSubscriber
        """
        if subscriber is None:
            raise ValueError("Invalid value for `subscriber`, must not be `None`")

        self._subscriber = subscriber
