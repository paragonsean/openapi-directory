# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action_history_action_history_details import ActionHistoryActionHistoryDetails
from openapi_server.models.action_status import ActionStatus
from openapi_server.models.event_type import EventType
from openapi_server import util


class ActionHistory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, timestamp: datetime=None, status: ActionStatus=None, event_type: EventType=None, action_history_details: ActionHistoryActionHistoryDetails=None):
        """ActionHistory - a model defined in OpenAPI

        :param timestamp: The timestamp of this ActionHistory.
        :param status: The status of this ActionHistory.
        :param event_type: The event_type of this ActionHistory.
        :param action_history_details: The action_history_details of this ActionHistory.
        """
        self.openapi_types = {
            'timestamp': datetime,
            'status': ActionStatus,
            'event_type': EventType,
            'action_history_details': ActionHistoryActionHistoryDetails
        }

        self.attribute_map = {
            'timestamp': 'Timestamp',
            'status': 'Status',
            'event_type': 'EventType',
            'action_history_details': 'ActionHistoryDetails'
        }

        self._timestamp = timestamp
        self._status = status
        self._event_type = event_type
        self._action_history_details = action_history_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionHistory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActionHistory of this ActionHistory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timestamp(self):
        """Gets the timestamp of this ActionHistory.

         A generic time stamp. In Java, it's transformed to a <code>Date</code> object.

        :return: The timestamp of this ActionHistory.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ActionHistory.

         A generic time stamp. In Java, it's transformed to a <code>Date</code> object.

        :param timestamp: The timestamp of this ActionHistory.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def status(self):
        """Gets the status of this ActionHistory.


        :return: The status of this ActionHistory.
        :rtype: ActionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ActionHistory.


        :param status: The status of this ActionHistory.
        :type status: ActionStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def event_type(self):
        """Gets the event_type of this ActionHistory.


        :return: The event_type of this ActionHistory.
        :rtype: EventType
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this ActionHistory.


        :param event_type: The event_type of this ActionHistory.
        :type event_type: EventType
        """
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")

        self._event_type = event_type

    @property
    def action_history_details(self):
        """Gets the action_history_details of this ActionHistory.


        :return: The action_history_details of this ActionHistory.
        :rtype: ActionHistoryActionHistoryDetails
        """
        return self._action_history_details

    @action_history_details.setter
    def action_history_details(self, action_history_details):
        """Sets the action_history_details of this ActionHistory.


        :param action_history_details: The action_history_details of this ActionHistory.
        :type action_history_details: ActionHistoryActionHistoryDetails
        """
        if action_history_details is None:
            raise ValueError("Invalid value for `action_history_details`, must not be `None`")

        self._action_history_details = action_history_details
