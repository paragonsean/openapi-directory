# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.notification_with_subscribers_notification import NotificationWithSubscribersNotification
from openapi_server import util


class NotificationWithSubscribers(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, notification: NotificationWithSubscribersNotification=None, subscribers: List=None):
        """NotificationWithSubscribers - a model defined in OpenAPI

        :param notification: The notification of this NotificationWithSubscribers.
        :param subscribers: The subscribers of this NotificationWithSubscribers.
        """
        self.openapi_types = {
            'notification': NotificationWithSubscribersNotification,
            'subscribers': List
        }

        self.attribute_map = {
            'notification': 'Notification',
            'subscribers': 'Subscribers'
        }

        self._notification = notification
        self._subscribers = subscribers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationWithSubscribers':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationWithSubscribers of this NotificationWithSubscribers.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def notification(self):
        """Gets the notification of this NotificationWithSubscribers.


        :return: The notification of this NotificationWithSubscribers.
        :rtype: NotificationWithSubscribersNotification
        """
        return self._notification

    @notification.setter
    def notification(self, notification):
        """Sets the notification of this NotificationWithSubscribers.


        :param notification: The notification of this NotificationWithSubscribers.
        :type notification: NotificationWithSubscribersNotification
        """
        if notification is None:
            raise ValueError("Invalid value for `notification`, must not be `None`")

        self._notification = notification

    @property
    def subscribers(self):
        """Gets the subscribers of this NotificationWithSubscribers.


        :return: The subscribers of this NotificationWithSubscribers.
        :rtype: List
        """
        return self._subscribers

    @subscribers.setter
    def subscribers(self, subscribers):
        """Sets the subscribers of this NotificationWithSubscribers.


        :param subscribers: The subscribers of this NotificationWithSubscribers.
        :type subscribers: List
        """
        if subscribers is None:
            raise ValueError("Invalid value for `subscribers`, must not be `None`")

        self._subscribers = subscribers
