# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.subscription_type import SubscriptionType
from openapi_server import util


class Subscriber(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subscription_type: SubscriptionType=None, address: str=None):
        """Subscriber - a model defined in OpenAPI

        :param subscription_type: The subscription_type of this Subscriber.
        :param address: The address of this Subscriber.
        """
        self.openapi_types = {
            'subscription_type': SubscriptionType,
            'address': str
        }

        self.attribute_map = {
            'subscription_type': 'SubscriptionType',
            'address': 'Address'
        }

        self._subscription_type = subscription_type
        self._address = address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subscriber':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subscriber of this Subscriber.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subscription_type(self):
        """Gets the subscription_type of this Subscriber.


        :return: The subscription_type of this Subscriber.
        :rtype: SubscriptionType
        """
        return self._subscription_type

    @subscription_type.setter
    def subscription_type(self, subscription_type):
        """Sets the subscription_type of this Subscriber.


        :param subscription_type: The subscription_type of this Subscriber.
        :type subscription_type: SubscriptionType
        """
        if subscription_type is None:
            raise ValueError("Invalid value for `subscription_type`, must not be `None`")

        self._subscription_type = subscription_type

    @property
    def address(self):
        """Gets the address of this Subscriber.


        :return: The address of this Subscriber.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Subscriber.


        :param address: The address of this Subscriber.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address
