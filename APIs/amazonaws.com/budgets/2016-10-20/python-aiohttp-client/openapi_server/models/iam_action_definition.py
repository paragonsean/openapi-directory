# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IamActionDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, policy_arn: str=None, roles: List=None, groups: List=None, users: List=None):
        """IamActionDefinition - a model defined in OpenAPI

        :param policy_arn: The policy_arn of this IamActionDefinition.
        :param roles: The roles of this IamActionDefinition.
        :param groups: The groups of this IamActionDefinition.
        :param users: The users of this IamActionDefinition.
        """
        self.openapi_types = {
            'policy_arn': str,
            'roles': List,
            'groups': List,
            'users': List
        }

        self.attribute_map = {
            'policy_arn': 'PolicyArn',
            'roles': 'Roles',
            'groups': 'Groups',
            'users': 'Users'
        }

        self._policy_arn = policy_arn
        self._roles = roles
        self._groups = groups
        self._users = users

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IamActionDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IamActionDefinition of this IamActionDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def policy_arn(self):
        """Gets the policy_arn of this IamActionDefinition.


        :return: The policy_arn of this IamActionDefinition.
        :rtype: str
        """
        return self._policy_arn

    @policy_arn.setter
    def policy_arn(self, policy_arn):
        """Sets the policy_arn of this IamActionDefinition.


        :param policy_arn: The policy_arn of this IamActionDefinition.
        :type policy_arn: str
        """
        if policy_arn is None:
            raise ValueError("Invalid value for `policy_arn`, must not be `None`")

        self._policy_arn = policy_arn

    @property
    def roles(self):
        """Gets the roles of this IamActionDefinition.


        :return: The roles of this IamActionDefinition.
        :rtype: List
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this IamActionDefinition.


        :param roles: The roles of this IamActionDefinition.
        :type roles: List
        """

        self._roles = roles

    @property
    def groups(self):
        """Gets the groups of this IamActionDefinition.


        :return: The groups of this IamActionDefinition.
        :rtype: List
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this IamActionDefinition.


        :param groups: The groups of this IamActionDefinition.
        :type groups: List
        """

        self._groups = groups

    @property
    def users(self):
        """Gets the users of this IamActionDefinition.


        :return: The users of this IamActionDefinition.
        :rtype: List
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this IamActionDefinition.


        :param users: The users of this IamActionDefinition.
        :type users: List
        """

        self._users = users
