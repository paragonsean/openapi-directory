# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action_history_details_action import ActionHistoryDetailsAction
import re
from openapi_server import util


class ActionHistoryDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, action: ActionHistoryDetailsAction=None):
        """ActionHistoryDetails - a model defined in OpenAPI

        :param message: The message of this ActionHistoryDetails.
        :param action: The action of this ActionHistoryDetails.
        """
        self.openapi_types = {
            'message': str,
            'action': ActionHistoryDetailsAction
        }

        self.attribute_map = {
            'message': 'Message',
            'action': 'Action'
        }

        self._message = message
        self._action = action

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionHistoryDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActionHistoryDetails of this ActionHistoryDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this ActionHistoryDetails.

         A generic string.

        :return: The message of this ActionHistoryDetails.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ActionHistoryDetails.

         A generic string.

        :param message: The message of this ActionHistoryDetails.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")
        if message is not None and len(message) > 2147483647:
            raise ValueError("Invalid value for `message`, length must be less than or equal to `2147483647`")
        if message is not None and len(message) < 0:
            raise ValueError("Invalid value for `message`, length must be greater than or equal to `0`")
        if message is not None and not re.search(r'.*', message):
            raise ValueError("Invalid value for `message`, must be a follow pattern or equal to `/.*/`")

        self._message = message

    @property
    def action(self):
        """Gets the action of this ActionHistoryDetails.


        :return: The action of this ActionHistoryDetails.
        :rtype: ActionHistoryDetailsAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ActionHistoryDetails.


        :param action: The action of this ActionHistoryDetails.
        :type action: ActionHistoryDetailsAction
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action
