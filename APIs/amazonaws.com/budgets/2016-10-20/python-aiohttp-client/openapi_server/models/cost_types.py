# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CostTypes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, include_tax: bool=None, include_subscription: bool=None, use_blended: bool=None, include_refund: bool=None, include_credit: bool=None, include_upfront: bool=None, include_recurring: bool=None, include_other_subscription: bool=None, include_support: bool=None, include_discount: bool=None, use_amortized: bool=None):
        """CostTypes - a model defined in OpenAPI

        :param include_tax: The include_tax of this CostTypes.
        :param include_subscription: The include_subscription of this CostTypes.
        :param use_blended: The use_blended of this CostTypes.
        :param include_refund: The include_refund of this CostTypes.
        :param include_credit: The include_credit of this CostTypes.
        :param include_upfront: The include_upfront of this CostTypes.
        :param include_recurring: The include_recurring of this CostTypes.
        :param include_other_subscription: The include_other_subscription of this CostTypes.
        :param include_support: The include_support of this CostTypes.
        :param include_discount: The include_discount of this CostTypes.
        :param use_amortized: The use_amortized of this CostTypes.
        """
        self.openapi_types = {
            'include_tax': bool,
            'include_subscription': bool,
            'use_blended': bool,
            'include_refund': bool,
            'include_credit': bool,
            'include_upfront': bool,
            'include_recurring': bool,
            'include_other_subscription': bool,
            'include_support': bool,
            'include_discount': bool,
            'use_amortized': bool
        }

        self.attribute_map = {
            'include_tax': 'IncludeTax',
            'include_subscription': 'IncludeSubscription',
            'use_blended': 'UseBlended',
            'include_refund': 'IncludeRefund',
            'include_credit': 'IncludeCredit',
            'include_upfront': 'IncludeUpfront',
            'include_recurring': 'IncludeRecurring',
            'include_other_subscription': 'IncludeOtherSubscription',
            'include_support': 'IncludeSupport',
            'include_discount': 'IncludeDiscount',
            'use_amortized': 'UseAmortized'
        }

        self._include_tax = include_tax
        self._include_subscription = include_subscription
        self._use_blended = use_blended
        self._include_refund = include_refund
        self._include_credit = include_credit
        self._include_upfront = include_upfront
        self._include_recurring = include_recurring
        self._include_other_subscription = include_other_subscription
        self._include_support = include_support
        self._include_discount = include_discount
        self._use_amortized = use_amortized

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CostTypes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CostTypes of this CostTypes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def include_tax(self):
        """Gets the include_tax of this CostTypes.


        :return: The include_tax of this CostTypes.
        :rtype: bool
        """
        return self._include_tax

    @include_tax.setter
    def include_tax(self, include_tax):
        """Sets the include_tax of this CostTypes.


        :param include_tax: The include_tax of this CostTypes.
        :type include_tax: bool
        """

        self._include_tax = include_tax

    @property
    def include_subscription(self):
        """Gets the include_subscription of this CostTypes.


        :return: The include_subscription of this CostTypes.
        :rtype: bool
        """
        return self._include_subscription

    @include_subscription.setter
    def include_subscription(self, include_subscription):
        """Sets the include_subscription of this CostTypes.


        :param include_subscription: The include_subscription of this CostTypes.
        :type include_subscription: bool
        """

        self._include_subscription = include_subscription

    @property
    def use_blended(self):
        """Gets the use_blended of this CostTypes.


        :return: The use_blended of this CostTypes.
        :rtype: bool
        """
        return self._use_blended

    @use_blended.setter
    def use_blended(self, use_blended):
        """Sets the use_blended of this CostTypes.


        :param use_blended: The use_blended of this CostTypes.
        :type use_blended: bool
        """

        self._use_blended = use_blended

    @property
    def include_refund(self):
        """Gets the include_refund of this CostTypes.


        :return: The include_refund of this CostTypes.
        :rtype: bool
        """
        return self._include_refund

    @include_refund.setter
    def include_refund(self, include_refund):
        """Sets the include_refund of this CostTypes.


        :param include_refund: The include_refund of this CostTypes.
        :type include_refund: bool
        """

        self._include_refund = include_refund

    @property
    def include_credit(self):
        """Gets the include_credit of this CostTypes.


        :return: The include_credit of this CostTypes.
        :rtype: bool
        """
        return self._include_credit

    @include_credit.setter
    def include_credit(self, include_credit):
        """Sets the include_credit of this CostTypes.


        :param include_credit: The include_credit of this CostTypes.
        :type include_credit: bool
        """

        self._include_credit = include_credit

    @property
    def include_upfront(self):
        """Gets the include_upfront of this CostTypes.


        :return: The include_upfront of this CostTypes.
        :rtype: bool
        """
        return self._include_upfront

    @include_upfront.setter
    def include_upfront(self, include_upfront):
        """Sets the include_upfront of this CostTypes.


        :param include_upfront: The include_upfront of this CostTypes.
        :type include_upfront: bool
        """

        self._include_upfront = include_upfront

    @property
    def include_recurring(self):
        """Gets the include_recurring of this CostTypes.


        :return: The include_recurring of this CostTypes.
        :rtype: bool
        """
        return self._include_recurring

    @include_recurring.setter
    def include_recurring(self, include_recurring):
        """Sets the include_recurring of this CostTypes.


        :param include_recurring: The include_recurring of this CostTypes.
        :type include_recurring: bool
        """

        self._include_recurring = include_recurring

    @property
    def include_other_subscription(self):
        """Gets the include_other_subscription of this CostTypes.


        :return: The include_other_subscription of this CostTypes.
        :rtype: bool
        """
        return self._include_other_subscription

    @include_other_subscription.setter
    def include_other_subscription(self, include_other_subscription):
        """Sets the include_other_subscription of this CostTypes.


        :param include_other_subscription: The include_other_subscription of this CostTypes.
        :type include_other_subscription: bool
        """

        self._include_other_subscription = include_other_subscription

    @property
    def include_support(self):
        """Gets the include_support of this CostTypes.


        :return: The include_support of this CostTypes.
        :rtype: bool
        """
        return self._include_support

    @include_support.setter
    def include_support(self, include_support):
        """Sets the include_support of this CostTypes.


        :param include_support: The include_support of this CostTypes.
        :type include_support: bool
        """

        self._include_support = include_support

    @property
    def include_discount(self):
        """Gets the include_discount of this CostTypes.


        :return: The include_discount of this CostTypes.
        :rtype: bool
        """
        return self._include_discount

    @include_discount.setter
    def include_discount(self, include_discount):
        """Sets the include_discount of this CostTypes.


        :param include_discount: The include_discount of this CostTypes.
        :type include_discount: bool
        """

        self._include_discount = include_discount

    @property
    def use_amortized(self):
        """Gets the use_amortized of this CostTypes.


        :return: The use_amortized of this CostTypes.
        :rtype: bool
        """
        return self._use_amortized

    @use_amortized.setter
    def use_amortized(self, use_amortized):
        """Sets the use_amortized of this CostTypes.


        :param use_amortized: The use_amortized of this CostTypes.
        :type use_amortized: bool
        """

        self._use_amortized = use_amortized
