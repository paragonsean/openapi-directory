# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action import Action
import re
from openapi_server import util


class DeleteBudgetActionResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, budget_name: str=None, action: Action=None):
        """DeleteBudgetActionResponse - a model defined in OpenAPI

        :param account_id: The account_id of this DeleteBudgetActionResponse.
        :param budget_name: The budget_name of this DeleteBudgetActionResponse.
        :param action: The action of this DeleteBudgetActionResponse.
        """
        self.openapi_types = {
            'account_id': str,
            'budget_name': str,
            'action': Action
        }

        self.attribute_map = {
            'account_id': 'AccountId',
            'budget_name': 'BudgetName',
            'action': 'Action'
        }

        self._account_id = account_id
        self._budget_name = budget_name
        self._action = action

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteBudgetActionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteBudgetActionResponse of this DeleteBudgetActionResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this DeleteBudgetActionResponse.

        The account ID of the user. It's a 12-digit number.

        :return: The account_id of this DeleteBudgetActionResponse.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this DeleteBudgetActionResponse.

        The account ID of the user. It's a 12-digit number.

        :param account_id: The account_id of this DeleteBudgetActionResponse.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")
        if account_id is not None and len(account_id) > 12:
            raise ValueError("Invalid value for `account_id`, length must be less than or equal to `12`")
        if account_id is not None and len(account_id) < 12:
            raise ValueError("Invalid value for `account_id`, length must be greater than or equal to `12`")
        if account_id is not None and not re.search(r'\d{12}', account_id):
            raise ValueError("Invalid value for `account_id`, must be a follow pattern or equal to `/\d{12}/`")

        self._account_id = account_id

    @property
    def budget_name(self):
        """Gets the budget_name of this DeleteBudgetActionResponse.

         A string that represents the budget name. The \":\" and \"\\\" characters, and the \"/action/\" substring, aren't allowed.

        :return: The budget_name of this DeleteBudgetActionResponse.
        :rtype: str
        """
        return self._budget_name

    @budget_name.setter
    def budget_name(self, budget_name):
        """Sets the budget_name of this DeleteBudgetActionResponse.

         A string that represents the budget name. The \":\" and \"\\\" characters, and the \"/action/\" substring, aren't allowed.

        :param budget_name: The budget_name of this DeleteBudgetActionResponse.
        :type budget_name: str
        """
        if budget_name is None:
            raise ValueError("Invalid value for `budget_name`, must not be `None`")
        if budget_name is not None and len(budget_name) > 100:
            raise ValueError("Invalid value for `budget_name`, length must be less than or equal to `100`")
        if budget_name is not None and len(budget_name) < 1:
            raise ValueError("Invalid value for `budget_name`, length must be greater than or equal to `1`")
        if budget_name is not None and not re.search(r'^(?![^:\\]*\/action\/)[^:\\]+$', budget_name):
            raise ValueError("Invalid value for `budget_name`, must be a follow pattern or equal to `/^(?![^:\\]*\/action\/)[^:\\]+$/`")

        self._budget_name = budget_name

    @property
    def action(self):
        """Gets the action of this DeleteBudgetActionResponse.


        :return: The action of this DeleteBudgetActionResponse.
        :rtype: Action
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this DeleteBudgetActionResponse.


        :param action: The action of this DeleteBudgetActionResponse.
        :type action: Action
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action
