# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class DescribeBudgetActionHistoriesResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_histories: List=None, next_token: str=None):
        """DescribeBudgetActionHistoriesResponse - a model defined in OpenAPI

        :param action_histories: The action_histories of this DescribeBudgetActionHistoriesResponse.
        :param next_token: The next_token of this DescribeBudgetActionHistoriesResponse.
        """
        self.openapi_types = {
            'action_histories': List,
            'next_token': str
        }

        self.attribute_map = {
            'action_histories': 'ActionHistories',
            'next_token': 'NextToken'
        }

        self._action_histories = action_histories
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeBudgetActionHistoriesResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeBudgetActionHistoriesResponse of this DescribeBudgetActionHistoriesResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_histories(self):
        """Gets the action_histories of this DescribeBudgetActionHistoriesResponse.


        :return: The action_histories of this DescribeBudgetActionHistoriesResponse.
        :rtype: List
        """
        return self._action_histories

    @action_histories.setter
    def action_histories(self, action_histories):
        """Sets the action_histories of this DescribeBudgetActionHistoriesResponse.


        :param action_histories: The action_histories of this DescribeBudgetActionHistoriesResponse.
        :type action_histories: List
        """
        if action_histories is None:
            raise ValueError("Invalid value for `action_histories`, must not be `None`")

        self._action_histories = action_histories

    @property
    def next_token(self):
        """Gets the next_token of this DescribeBudgetActionHistoriesResponse.

         A generic string.

        :return: The next_token of this DescribeBudgetActionHistoriesResponse.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this DescribeBudgetActionHistoriesResponse.

         A generic string.

        :param next_token: The next_token of this DescribeBudgetActionHistoriesResponse.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 2147483647:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `2147483647`")
        if next_token is not None and len(next_token) < 0:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `0`")
        if next_token is not None and not re.search(r'.*', next_token):
            raise ValueError("Invalid value for `next_token`, must be a follow pattern or equal to `/.*/`")

        self._next_token = next_token
