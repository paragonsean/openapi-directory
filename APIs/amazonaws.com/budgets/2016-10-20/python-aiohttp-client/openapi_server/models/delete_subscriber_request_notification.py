# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.comparison_operator import ComparisonOperator
from openapi_server.models.notification_state import NotificationState
from openapi_server.models.notification_type import NotificationType
from openapi_server.models.threshold_type import ThresholdType
from openapi_server import util


class DeleteSubscriberRequestNotification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, notification_type: NotificationType=None, comparison_operator: ComparisonOperator=None, threshold: float=None, threshold_type: ThresholdType=None, notification_state: NotificationState=None):
        """DeleteSubscriberRequestNotification - a model defined in OpenAPI

        :param notification_type: The notification_type of this DeleteSubscriberRequestNotification.
        :param comparison_operator: The comparison_operator of this DeleteSubscriberRequestNotification.
        :param threshold: The threshold of this DeleteSubscriberRequestNotification.
        :param threshold_type: The threshold_type of this DeleteSubscriberRequestNotification.
        :param notification_state: The notification_state of this DeleteSubscriberRequestNotification.
        """
        self.openapi_types = {
            'notification_type': NotificationType,
            'comparison_operator': ComparisonOperator,
            'threshold': float,
            'threshold_type': ThresholdType,
            'notification_state': NotificationState
        }

        self.attribute_map = {
            'notification_type': 'NotificationType',
            'comparison_operator': 'ComparisonOperator',
            'threshold': 'Threshold',
            'threshold_type': 'ThresholdType',
            'notification_state': 'NotificationState'
        }

        self._notification_type = notification_type
        self._comparison_operator = comparison_operator
        self._threshold = threshold
        self._threshold_type = threshold_type
        self._notification_state = notification_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteSubscriberRequestNotification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteSubscriberRequest_Notification of this DeleteSubscriberRequestNotification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def notification_type(self):
        """Gets the notification_type of this DeleteSubscriberRequestNotification.


        :return: The notification_type of this DeleteSubscriberRequestNotification.
        :rtype: NotificationType
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type):
        """Sets the notification_type of this DeleteSubscriberRequestNotification.


        :param notification_type: The notification_type of this DeleteSubscriberRequestNotification.
        :type notification_type: NotificationType
        """
        if notification_type is None:
            raise ValueError("Invalid value for `notification_type`, must not be `None`")

        self._notification_type = notification_type

    @property
    def comparison_operator(self):
        """Gets the comparison_operator of this DeleteSubscriberRequestNotification.


        :return: The comparison_operator of this DeleteSubscriberRequestNotification.
        :rtype: ComparisonOperator
        """
        return self._comparison_operator

    @comparison_operator.setter
    def comparison_operator(self, comparison_operator):
        """Sets the comparison_operator of this DeleteSubscriberRequestNotification.


        :param comparison_operator: The comparison_operator of this DeleteSubscriberRequestNotification.
        :type comparison_operator: ComparisonOperator
        """
        if comparison_operator is None:
            raise ValueError("Invalid value for `comparison_operator`, must not be `None`")

        self._comparison_operator = comparison_operator

    @property
    def threshold(self):
        """Gets the threshold of this DeleteSubscriberRequestNotification.


        :return: The threshold of this DeleteSubscriberRequestNotification.
        :rtype: float
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this DeleteSubscriberRequestNotification.


        :param threshold: The threshold of this DeleteSubscriberRequestNotification.
        :type threshold: float
        """
        if threshold is None:
            raise ValueError("Invalid value for `threshold`, must not be `None`")

        self._threshold = threshold

    @property
    def threshold_type(self):
        """Gets the threshold_type of this DeleteSubscriberRequestNotification.


        :return: The threshold_type of this DeleteSubscriberRequestNotification.
        :rtype: ThresholdType
        """
        return self._threshold_type

    @threshold_type.setter
    def threshold_type(self, threshold_type):
        """Sets the threshold_type of this DeleteSubscriberRequestNotification.


        :param threshold_type: The threshold_type of this DeleteSubscriberRequestNotification.
        :type threshold_type: ThresholdType
        """

        self._threshold_type = threshold_type

    @property
    def notification_state(self):
        """Gets the notification_state of this DeleteSubscriberRequestNotification.


        :return: The notification_state of this DeleteSubscriberRequestNotification.
        :rtype: NotificationState
        """
        return self._notification_state

    @notification_state.setter
    def notification_state(self, notification_state):
        """Sets the notification_state of this DeleteSubscriberRequestNotification.


        :param notification_state: The notification_state of this DeleteSubscriberRequestNotification.
        :type notification_state: NotificationState
        """

        self._notification_state = notification_state
