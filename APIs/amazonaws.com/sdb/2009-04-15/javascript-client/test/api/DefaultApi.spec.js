/**
 * Amazon SimpleDB
 * Amazon SimpleDB is a web service providing the core database functions of data indexing and querying in the cloud. By offloading the time and effort associated with building and operating a web-scale database, SimpleDB provides developers the freedom to focus on application development. <p> A traditional, clustered relational database requires a sizable upfront capital outlay, is complex to design, and often requires extensive and repetitive database administration. Amazon SimpleDB is dramatically simpler, requiring no schema, automatically indexing your data and providing a simple API for storage and access. This approach eliminates the administrative burden of data modeling, index maintenance, and performance tuning. Developers gain access to this functionality within Amazon's proven computing environment, are able to scale instantly, and pay only for what they use. </p> <p> Visit <a href=\"http://aws.amazon.com/simpledb/\">http://aws.amazon.com/simpledb/</a> for more information. </p>
 *
 * The version of the OpenAPI document: 2009-04-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonSimpleDb);
  }
}(this, function(expect, AmazonSimpleDb) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonSimpleDb.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('gETBatchDeleteAttributes', function() {
      it('should call gETBatchDeleteAttributes successfully', function(done) {
        //uncomment below and update the code to test gETBatchDeleteAttributes
        //instance.gETBatchDeleteAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETBatchPutAttributes', function() {
      it('should call gETBatchPutAttributes successfully', function(done) {
        //uncomment below and update the code to test gETBatchPutAttributes
        //instance.gETBatchPutAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETCreateDomain', function() {
      it('should call gETCreateDomain successfully', function(done) {
        //uncomment below and update the code to test gETCreateDomain
        //instance.gETCreateDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETDeleteAttributes', function() {
      it('should call gETDeleteAttributes successfully', function(done) {
        //uncomment below and update the code to test gETDeleteAttributes
        //instance.gETDeleteAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETDeleteDomain', function() {
      it('should call gETDeleteDomain successfully', function(done) {
        //uncomment below and update the code to test gETDeleteDomain
        //instance.gETDeleteDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETDomainMetadata', function() {
      it('should call gETDomainMetadata successfully', function(done) {
        //uncomment below and update the code to test gETDomainMetadata
        //instance.gETDomainMetadata(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETGetAttributes', function() {
      it('should call gETGetAttributes successfully', function(done) {
        //uncomment below and update the code to test gETGetAttributes
        //instance.gETGetAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETListDomains', function() {
      it('should call gETListDomains successfully', function(done) {
        //uncomment below and update the code to test gETListDomains
        //instance.gETListDomains(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETPutAttributes', function() {
      it('should call gETPutAttributes successfully', function(done) {
        //uncomment below and update the code to test gETPutAttributes
        //instance.gETPutAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETSelect', function() {
      it('should call gETSelect successfully', function(done) {
        //uncomment below and update the code to test gETSelect
        //instance.gETSelect(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTBatchDeleteAttributes', function() {
      it('should call pOSTBatchDeleteAttributes successfully', function(done) {
        //uncomment below and update the code to test pOSTBatchDeleteAttributes
        //instance.pOSTBatchDeleteAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTBatchPutAttributes', function() {
      it('should call pOSTBatchPutAttributes successfully', function(done) {
        //uncomment below and update the code to test pOSTBatchPutAttributes
        //instance.pOSTBatchPutAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTCreateDomain', function() {
      it('should call pOSTCreateDomain successfully', function(done) {
        //uncomment below and update the code to test pOSTCreateDomain
        //instance.pOSTCreateDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTDeleteAttributes', function() {
      it('should call pOSTDeleteAttributes successfully', function(done) {
        //uncomment below and update the code to test pOSTDeleteAttributes
        //instance.pOSTDeleteAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTDeleteDomain', function() {
      it('should call pOSTDeleteDomain successfully', function(done) {
        //uncomment below and update the code to test pOSTDeleteDomain
        //instance.pOSTDeleteDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTDomainMetadata', function() {
      it('should call pOSTDomainMetadata successfully', function(done) {
        //uncomment below and update the code to test pOSTDomainMetadata
        //instance.pOSTDomainMetadata(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTGetAttributes', function() {
      it('should call pOSTGetAttributes successfully', function(done) {
        //uncomment below and update the code to test pOSTGetAttributes
        //instance.pOSTGetAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTListDomains', function() {
      it('should call pOSTListDomains successfully', function(done) {
        //uncomment below and update the code to test pOSTListDomains
        //instance.pOSTListDomains(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTPutAttributes', function() {
      it('should call pOSTPutAttributes successfully', function(done) {
        //uncomment below and update the code to test pOSTPutAttributes
        //instance.pOSTPutAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTSelect', function() {
      it('should call pOSTSelect successfully', function(done) {
        //uncomment below and update the code to test pOSTSelect
        //instance.pOSTSelect(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
