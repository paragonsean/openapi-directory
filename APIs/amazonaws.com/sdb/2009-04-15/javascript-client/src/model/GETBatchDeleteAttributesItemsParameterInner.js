/**
 * Amazon SimpleDB
 * Amazon SimpleDB is a web service providing the core database functions of data indexing and querying in the cloud. By offloading the time and effort associated with building and operating a web-scale database, SimpleDB provides developers the freedom to focus on application development. <p> A traditional, clustered relational database requires a sizable upfront capital outlay, is complex to design, and often requires extensive and repetitive database administration. Amazon SimpleDB is dramatically simpler, requiring no schema, automatically indexing your data and providing a simple API for storage and access. This approach eliminates the administrative burden of data modeling, index maintenance, and performance tuning. Developers gain access to this functionality within Amazon's proven computing environment, are able to scale instantly, and pay only for what they use. </p> <p> Visit <a href=\"http://aws.amazon.com/simpledb/\">http://aws.amazon.com/simpledb/</a> for more information. </p>
 *
 * The version of the OpenAPI document: 2009-04-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeletableItem from './DeletableItem';
import GETDeleteAttributesAttributesParameterInner from './GETDeleteAttributesAttributesParameterInner';

/**
 * The GETBatchDeleteAttributesItemsParameterInner model module.
 * @module model/GETBatchDeleteAttributesItemsParameterInner
 * @version 2009-04-15
 */
class GETBatchDeleteAttributesItemsParameterInner {
    /**
     * Constructs a new <code>GETBatchDeleteAttributesItemsParameterInner</code>.
     * @alias module:model/GETBatchDeleteAttributesItemsParameterInner
     * @implements module:model/DeletableItem
     * @param name {String} 
     */
    constructor(name) { 
        DeletableItem.initialize(this, name);
        GETBatchDeleteAttributesItemsParameterInner.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['Name'] = name;
    }

    /**
     * Constructs a <code>GETBatchDeleteAttributesItemsParameterInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GETBatchDeleteAttributesItemsParameterInner} obj Optional instance to populate.
     * @return {module:model/GETBatchDeleteAttributesItemsParameterInner} The populated <code>GETBatchDeleteAttributesItemsParameterInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GETBatchDeleteAttributesItemsParameterInner();
            DeletableItem.constructFromObject(data, obj);

            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Attributes')) {
                obj['Attributes'] = ApiClient.convertToType(data['Attributes'], [GETDeleteAttributesAttributesParameterInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GETBatchDeleteAttributesItemsParameterInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GETBatchDeleteAttributesItemsParameterInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GETBatchDeleteAttributesItemsParameterInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Name`
        if (data['Name']) { // data not null
          String.validateJSON(data['Name']);
        }
        if (data['Attributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Attributes'])) {
                throw new Error("Expected the field `Attributes` to be an array in the JSON data but got " + data['Attributes']);
            }
            // validate the optional field `Attributes` (array)
            for (const item of data['Attributes']) {
                GETDeleteAttributesAttributesParameterInner.validateJSON(item);
            };
        }

        return true;
    }


}

GETBatchDeleteAttributesItemsParameterInner.RequiredProperties = ["Name"];

/**
 * @member {String} Name
 */
GETBatchDeleteAttributesItemsParameterInner.prototype['Name'] = undefined;

/**
 * @member {Array.<module:model/GETDeleteAttributesAttributesParameterInner>} Attributes
 */
GETBatchDeleteAttributesItemsParameterInner.prototype['Attributes'] = undefined;


// Implement DeletableItem interface:
/**
 * @member {String} Name
 */
DeletableItem.prototype['Name'] = undefined;
/**
 * @member {Array.<module:model/GETDeleteAttributesAttributesParameterInner>} Attributes
 */
DeletableItem.prototype['Attributes'] = undefined;




export default GETBatchDeleteAttributesItemsParameterInner;

