/**
 * Amazon SimpleDB
 * Amazon SimpleDB is a web service providing the core database functions of data indexing and querying in the cloud. By offloading the time and effort associated with building and operating a web-scale database, SimpleDB provides developers the freedom to focus on application development. <p> A traditional, clustered relational database requires a sizable upfront capital outlay, is complex to design, and often requires extensive and repetitive database administration. Amazon SimpleDB is dramatically simpler, requiring no schema, automatically indexing your data and providing a simple API for storage and access. This approach eliminates the administrative burden of data modeling, index maintenance, and performance tuning. Developers gain access to this functionality within Amazon's proven computing environment, are able to scale instantly, and pay only for what they use. </p> <p> Visit <a href=\"http://aws.amazon.com/simpledb/\">http://aws.amazon.com/simpledb/</a> for more information. </p>
 *
 * The version of the OpenAPI document: 2009-04-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AttributeDoesNotExist from '../model/AttributeDoesNotExist';
import BatchDeleteAttributesRequest from '../model/BatchDeleteAttributesRequest';
import BatchPutAttributesRequest from '../model/BatchPutAttributesRequest';
import CreateDomainRequest from '../model/CreateDomainRequest';
import DeleteAttributesRequest from '../model/DeleteAttributesRequest';
import DeleteDomainRequest from '../model/DeleteDomainRequest';
import DomainMetadataRequest from '../model/DomainMetadataRequest';
import DomainMetadataResult from '../model/DomainMetadataResult';
import GETBatchDeleteAttributesItemsParameterInner from '../model/GETBatchDeleteAttributesItemsParameterInner';
import GETBatchPutAttributesItemsParameterInner from '../model/GETBatchPutAttributesItemsParameterInner';
import GETDeleteAttributesAttributesParameterInner from '../model/GETDeleteAttributesAttributesParameterInner';
import GETDeleteAttributesExpectedParameter from '../model/GETDeleteAttributesExpectedParameter';
import GETPutAttributesAttributesParameterInner from '../model/GETPutAttributesAttributesParameterInner';
import GetAttributesRequest from '../model/GetAttributesRequest';
import GetAttributesResult from '../model/GetAttributesResult';
import InvalidNextToken from '../model/InvalidNextToken';
import ListDomainsRequest from '../model/ListDomainsRequest';
import ListDomainsResult from '../model/ListDomainsResult';
import MissingParameter from '../model/MissingParameter';
import NoSuchDomain from '../model/NoSuchDomain';
import NumberDomainsExceeded from '../model/NumberDomainsExceeded';
import NumberItemAttributesExceeded from '../model/NumberItemAttributesExceeded';
import NumberSubmittedAttributesExceeded from '../model/NumberSubmittedAttributesExceeded';
import PutAttributesRequest from '../model/PutAttributesRequest';
import RequestTimeout from '../model/RequestTimeout';
import SelectRequest from '../model/SelectRequest';
import SelectResult from '../model/SelectResult';
import TooManyRequestedAttributes from '../model/TooManyRequestedAttributes';

/**
* Default service.
* @module api/DefaultApi
* @version 2009-04-15
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the gETBatchDeleteAttributes operation.
     * @callback module:api/DefaultApi~gETBatchDeleteAttributesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> Performs multiple DeleteAttributes operations in a single call, which reduces round trips and latencies. This enables Amazon SimpleDB to optimize requests, which generally yields better throughput. </p> <note> <p> If you specify BatchDeleteAttributes without attributes or values, all the attributes for the item are deleted. </p> <p> BatchDeleteAttributes is an idempotent operation; running it multiple times on the same item or attribute doesn't result in an error. </p> <p> The BatchDeleteAttributes operation succeeds or fails in its entirety. There are no partial deletes. You can execute multiple BatchDeleteAttributes operations and other operations in parallel. However, large numbers of concurrent BatchDeleteAttributes calls can result in Service Unavailable (503) responses. </p> <p> This operation is vulnerable to exceeding the maximum URL size when making a REST request using the HTTP GET method. </p> <p> This operation does not support conditions using Expected.X.Name, Expected.X.Value, or Expected.X.Exists. </p> </note> <p> The following limitations are enforced for this operation: <ul> <li>1 MB request size</li> <li>25 item limit per BatchDeleteAttributes operation</li> </ul> </p>
     * @param {String} aWSAccessKeyId 
     * @param {String} signatureMethod 
     * @param {String} signatureVersion 
     * @param {String} timestamp 
     * @param {String} signature 
     * @param {String} domainName The name of the domain in which the attributes are being deleted.
     * @param {Array.<module:model/GETBatchDeleteAttributesItemsParameterInner>} items A list of items on which to perform the operation.
     * @param {String} action 
     * @param {String} version 
     * @param {module:api/DefaultApi~gETBatchDeleteAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gETBatchDeleteAttributes(aWSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, items, action, version, callback) {
      let postBody = null;
      // verify the required parameter 'aWSAccessKeyId' is set
      if (aWSAccessKeyId === undefined || aWSAccessKeyId === null) {
        throw new Error("Missing the required parameter 'aWSAccessKeyId' when calling gETBatchDeleteAttributes");
      }
      // verify the required parameter 'signatureMethod' is set
      if (signatureMethod === undefined || signatureMethod === null) {
        throw new Error("Missing the required parameter 'signatureMethod' when calling gETBatchDeleteAttributes");
      }
      // verify the required parameter 'signatureVersion' is set
      if (signatureVersion === undefined || signatureVersion === null) {
        throw new Error("Missing the required parameter 'signatureVersion' when calling gETBatchDeleteAttributes");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling gETBatchDeleteAttributes");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling gETBatchDeleteAttributes");
      }
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETBatchDeleteAttributes");
      }
      // verify the required parameter 'items' is set
      if (items === undefined || items === null) {
        throw new Error("Missing the required parameter 'items' when calling gETBatchDeleteAttributes");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETBatchDeleteAttributes");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETBatchDeleteAttributes");
      }

      let pathParams = {
      };
      let queryParams = {
        'AWSAccessKeyId': aWSAccessKeyId,
        'SignatureMethod': signatureMethod,
        'SignatureVersion': signatureVersion,
        'Timestamp': timestamp,
        'Signature': signature,
        'DomainName': domainName,
        'Items': this.apiClient.buildCollectionParam(items, 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=BatchDeleteAttributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETBatchPutAttributes operation.
     * @callback module:api/DefaultApi~gETBatchPutAttributesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> The <code>BatchPutAttributes</code> operation creates or replaces attributes within one or more items. By using this operation, the client can perform multiple <a>PutAttribute</a> operation with a single call. This helps yield savings in round trips and latencies, enabling Amazon SimpleDB to optimize requests and generally produce better throughput. </p> <p> The client may specify the item name with the <code>Item.X.ItemName</code> parameter. The client may specify new attributes using a combination of the <code>Item.X.Attribute.Y.Name</code> and <code>Item.X.Attribute.Y.Value</code> parameters. The client may specify the first attribute for the first item using the parameters <code>Item.0.Attribute.0.Name</code> and <code>Item.0.Attribute.0.Value</code>, and for the second attribute for the first item by the parameters <code>Item.0.Attribute.1.Name</code> and <code>Item.0.Attribute.1.Value</code>, and so on. </p> <p> Attributes are uniquely identified within an item by their name/value combination. For example, a single item can have the attributes <code>{ \"first_name\", \"first_value\" }</code> and <code>{ \"first_name\", \"second_value\" }</code>. However, it cannot have two attribute instances where both the <code>Item.X.Attribute.Y.Name</code> and <code>Item.X.Attribute.Y.Value</code> are the same. </p> <p> Optionally, the requester can supply the <code>Replace</code> parameter for each individual value. Setting this value to <code>true</code> will cause the new attribute values to replace the existing attribute values. For example, if an item <code>I</code> has the attributes <code>{ 'a', '1' }, { 'b', '2'}</code> and <code>{ 'b', '3' }</code> and the requester does a BatchPutAttributes of <code>{'I', 'b', '4' }</code> with the Replace parameter set to true, the final attributes of the item will be <code>{ 'a', '1' }</code> and <code>{ 'b', '4' }</code>, replacing the previous values of the 'b' attribute with the new value. </p> <note> You cannot specify an empty string as an item or as an attribute name. The <code>BatchPutAttributes</code> operation succeeds or fails in its entirety. There are no partial puts. </note> <important> This operation is vulnerable to exceeding the maximum URL size when making a REST request using the HTTP GET method. This operation does not support conditions using <code>Expected.X.Name</code>, <code>Expected.X.Value</code>, or <code>Expected.X.Exists</code>. </important> <p> You can execute multiple <code>BatchPutAttributes</code> operations and other operations in parallel. However, large numbers of concurrent <code>BatchPutAttributes</code> calls can result in Service Unavailable (503) responses. </p> <p> The following limitations are enforced for this operation: <ul> <li>256 attribute name-value pairs per item</li> <li>1 MB request size</li> <li>1 billion attributes per domain</li> <li>10 GB of total user data storage per domain</li> <li>25 item limit per <code>BatchPutAttributes</code> operation</li> </ul> </p>
     * @param {String} aWSAccessKeyId 
     * @param {String} signatureMethod 
     * @param {String} signatureVersion 
     * @param {String} timestamp 
     * @param {String} signature 
     * @param {String} domainName The name of the domain in which the attributes are being stored.
     * @param {Array.<module:model/GETBatchPutAttributesItemsParameterInner>} items A list of items on which to perform the operation.
     * @param {String} action 
     * @param {String} version 
     * @param {module:api/DefaultApi~gETBatchPutAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gETBatchPutAttributes(aWSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, items, action, version, callback) {
      let postBody = null;
      // verify the required parameter 'aWSAccessKeyId' is set
      if (aWSAccessKeyId === undefined || aWSAccessKeyId === null) {
        throw new Error("Missing the required parameter 'aWSAccessKeyId' when calling gETBatchPutAttributes");
      }
      // verify the required parameter 'signatureMethod' is set
      if (signatureMethod === undefined || signatureMethod === null) {
        throw new Error("Missing the required parameter 'signatureMethod' when calling gETBatchPutAttributes");
      }
      // verify the required parameter 'signatureVersion' is set
      if (signatureVersion === undefined || signatureVersion === null) {
        throw new Error("Missing the required parameter 'signatureVersion' when calling gETBatchPutAttributes");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling gETBatchPutAttributes");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling gETBatchPutAttributes");
      }
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETBatchPutAttributes");
      }
      // verify the required parameter 'items' is set
      if (items === undefined || items === null) {
        throw new Error("Missing the required parameter 'items' when calling gETBatchPutAttributes");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETBatchPutAttributes");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETBatchPutAttributes");
      }

      let pathParams = {
      };
      let queryParams = {
        'AWSAccessKeyId': aWSAccessKeyId,
        'SignatureMethod': signatureMethod,
        'SignatureVersion': signatureVersion,
        'Timestamp': timestamp,
        'Signature': signature,
        'DomainName': domainName,
        'Items': this.apiClient.buildCollectionParam(items, 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=BatchPutAttributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCreateDomain operation.
     * @callback module:api/DefaultApi~gETCreateDomainCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> The <code>CreateDomain</code> operation creates a new domain. The domain name should be unique among the domains associated with the Access Key ID provided in the request. The <code>CreateDomain</code> operation may take 10 or more seconds to complete. </p> <note> CreateDomain is an idempotent operation; running it multiple times using the same domain name will not result in an error response. </note> <p> The client can create up to 100 domains per account. </p> <p> If the client requires additional domains, go to <a href=\"http://aws.amazon.com/contact-us/simpledb-limit-request/\"> http://aws.amazon.com/contact-us/simpledb-limit-request/</a>. </p>
     * @param {String} aWSAccessKeyId 
     * @param {String} signatureMethod 
     * @param {String} signatureVersion 
     * @param {String} timestamp 
     * @param {String} signature 
     * @param {String} domainName The name of the domain to create. The name can range between 3 and 255 characters and can contain the following characters: a-z, A-Z, 0-9, '_', '-', and '.'.
     * @param {String} action 
     * @param {String} version 
     * @param {module:api/DefaultApi~gETCreateDomainCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gETCreateDomain(aWSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, action, version, callback) {
      let postBody = null;
      // verify the required parameter 'aWSAccessKeyId' is set
      if (aWSAccessKeyId === undefined || aWSAccessKeyId === null) {
        throw new Error("Missing the required parameter 'aWSAccessKeyId' when calling gETCreateDomain");
      }
      // verify the required parameter 'signatureMethod' is set
      if (signatureMethod === undefined || signatureMethod === null) {
        throw new Error("Missing the required parameter 'signatureMethod' when calling gETCreateDomain");
      }
      // verify the required parameter 'signatureVersion' is set
      if (signatureVersion === undefined || signatureVersion === null) {
        throw new Error("Missing the required parameter 'signatureVersion' when calling gETCreateDomain");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling gETCreateDomain");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling gETCreateDomain");
      }
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETCreateDomain");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCreateDomain");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCreateDomain");
      }

      let pathParams = {
      };
      let queryParams = {
        'AWSAccessKeyId': aWSAccessKeyId,
        'SignatureMethod': signatureMethod,
        'SignatureVersion': signatureVersion,
        'Timestamp': timestamp,
        'Signature': signature,
        'DomainName': domainName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=CreateDomain', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteAttributes operation.
     * @callback module:api/DefaultApi~gETDeleteAttributesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> Deletes one or more attributes associated with an item. If all attributes of the item are deleted, the item is deleted. </p> <note> If <code>DeleteAttributes</code> is called without being passed any attributes or values specified, all the attributes for the item are deleted. </note> <p> <code>DeleteAttributes</code> is an idempotent operation; running it multiple times on the same item or attribute does not result in an error response. </p> <p> Because Amazon SimpleDB makes multiple copies of item data and uses an eventual consistency update model, performing a <a>GetAttributes</a> or <a>Select</a> operation (read) immediately after a <code>DeleteAttributes</code> or <a>PutAttributes</a> operation (write) might not return updated item data. </p>
     * @param {String} aWSAccessKeyId 
     * @param {String} signatureMethod 
     * @param {String} signatureVersion 
     * @param {String} timestamp 
     * @param {String} signature 
     * @param {String} domainName The name of the domain in which to perform the operation.
     * @param {String} itemName The name of the item. Similar to rows on a spreadsheet, items represent individual objects that contain one or more value-attribute pairs.
     * @param {String} action 
     * @param {String} version 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/GETDeleteAttributesAttributesParameterInner>} [attributes] A list of Attributes. Similar to columns on a spreadsheet, attributes represent categories of data that can be assigned to items.
     * @param {module:model/GETDeleteAttributesExpectedParameter} [expected] The update condition which, if specified, determines whether the specified attributes will be deleted or not. The update condition must be satisfied in order for this request to be processed and the attributes to be deleted.
     * @param {module:api/DefaultApi~gETDeleteAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gETDeleteAttributes(aWSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, itemName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'aWSAccessKeyId' is set
      if (aWSAccessKeyId === undefined || aWSAccessKeyId === null) {
        throw new Error("Missing the required parameter 'aWSAccessKeyId' when calling gETDeleteAttributes");
      }
      // verify the required parameter 'signatureMethod' is set
      if (signatureMethod === undefined || signatureMethod === null) {
        throw new Error("Missing the required parameter 'signatureMethod' when calling gETDeleteAttributes");
      }
      // verify the required parameter 'signatureVersion' is set
      if (signatureVersion === undefined || signatureVersion === null) {
        throw new Error("Missing the required parameter 'signatureVersion' when calling gETDeleteAttributes");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling gETDeleteAttributes");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling gETDeleteAttributes");
      }
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETDeleteAttributes");
      }
      // verify the required parameter 'itemName' is set
      if (itemName === undefined || itemName === null) {
        throw new Error("Missing the required parameter 'itemName' when calling gETDeleteAttributes");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteAttributes");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteAttributes");
      }

      let pathParams = {
      };
      let queryParams = {
        'AWSAccessKeyId': aWSAccessKeyId,
        'SignatureMethod': signatureMethod,
        'SignatureVersion': signatureVersion,
        'Timestamp': timestamp,
        'Signature': signature,
        'DomainName': domainName,
        'ItemName': itemName,
        'Attributes': this.apiClient.buildCollectionParam(opts['attributes'], 'multi'),
        'Expected': opts['expected'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=DeleteAttributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteDomain operation.
     * @callback module:api/DefaultApi~gETDeleteDomainCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> The <code>DeleteDomain</code> operation deletes a domain. Any items (and their attributes) in the domain are deleted as well. The <code>DeleteDomain</code> operation might take 10 or more seconds to complete. </p> <note> Running <code>DeleteDomain</code> on a domain that does not exist or running the function multiple times using the same domain name will not result in an error response. </note>
     * @param {String} aWSAccessKeyId 
     * @param {String} signatureMethod 
     * @param {String} signatureVersion 
     * @param {String} timestamp 
     * @param {String} signature 
     * @param {String} domainName The name of the domain to delete.
     * @param {String} action 
     * @param {String} version 
     * @param {module:api/DefaultApi~gETDeleteDomainCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gETDeleteDomain(aWSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, action, version, callback) {
      let postBody = null;
      // verify the required parameter 'aWSAccessKeyId' is set
      if (aWSAccessKeyId === undefined || aWSAccessKeyId === null) {
        throw new Error("Missing the required parameter 'aWSAccessKeyId' when calling gETDeleteDomain");
      }
      // verify the required parameter 'signatureMethod' is set
      if (signatureMethod === undefined || signatureMethod === null) {
        throw new Error("Missing the required parameter 'signatureMethod' when calling gETDeleteDomain");
      }
      // verify the required parameter 'signatureVersion' is set
      if (signatureVersion === undefined || signatureVersion === null) {
        throw new Error("Missing the required parameter 'signatureVersion' when calling gETDeleteDomain");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling gETDeleteDomain");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling gETDeleteDomain");
      }
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETDeleteDomain");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteDomain");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteDomain");
      }

      let pathParams = {
      };
      let queryParams = {
        'AWSAccessKeyId': aWSAccessKeyId,
        'SignatureMethod': signatureMethod,
        'SignatureVersion': signatureVersion,
        'Timestamp': timestamp,
        'Signature': signature,
        'DomainName': domainName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=DeleteDomain', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDomainMetadata operation.
     * @callback module:api/DefaultApi~gETDomainMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DomainMetadataResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns information about the domain, including when the domain was created, the number of items and attributes in the domain, and the size of the attribute names and values. 
     * @param {String} aWSAccessKeyId 
     * @param {String} signatureMethod 
     * @param {String} signatureVersion 
     * @param {String} timestamp 
     * @param {String} signature 
     * @param {String} domainName The name of the domain for which to display the metadata of.
     * @param {String} action 
     * @param {String} version 
     * @param {module:api/DefaultApi~gETDomainMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DomainMetadataResult}
     */
    gETDomainMetadata(aWSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, action, version, callback) {
      let postBody = null;
      // verify the required parameter 'aWSAccessKeyId' is set
      if (aWSAccessKeyId === undefined || aWSAccessKeyId === null) {
        throw new Error("Missing the required parameter 'aWSAccessKeyId' when calling gETDomainMetadata");
      }
      // verify the required parameter 'signatureMethod' is set
      if (signatureMethod === undefined || signatureMethod === null) {
        throw new Error("Missing the required parameter 'signatureMethod' when calling gETDomainMetadata");
      }
      // verify the required parameter 'signatureVersion' is set
      if (signatureVersion === undefined || signatureVersion === null) {
        throw new Error("Missing the required parameter 'signatureVersion' when calling gETDomainMetadata");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling gETDomainMetadata");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling gETDomainMetadata");
      }
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETDomainMetadata");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDomainMetadata");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDomainMetadata");
      }

      let pathParams = {
      };
      let queryParams = {
        'AWSAccessKeyId': aWSAccessKeyId,
        'SignatureMethod': signatureMethod,
        'SignatureVersion': signatureVersion,
        'Timestamp': timestamp,
        'Signature': signature,
        'DomainName': domainName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DomainMetadataResult;
      return this.apiClient.callApi(
        '/#Action=DomainMetadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETGetAttributes operation.
     * @callback module:api/DefaultApi~gETGetAttributesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAttributesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> Returns all of the attributes associated with the specified item. Optionally, the attributes returned can be limited to one or more attributes by specifying an attribute name parameter. </p> <p> If the item does not exist on the replica that was accessed for this operation, an empty set is returned. The system does not return an error as it cannot guarantee the item does not exist on other replicas. </p> <note> If GetAttributes is called without being passed any attribute names, all the attributes for the item are returned. </note>
     * @param {String} aWSAccessKeyId 
     * @param {String} signatureMethod 
     * @param {String} signatureVersion 
     * @param {String} timestamp 
     * @param {String} signature 
     * @param {String} domainName The name of the domain in which to perform the operation.
     * @param {String} itemName The name of the item.
     * @param {String} action 
     * @param {String} version 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [attributeNames] The names of the attributes.
     * @param {Boolean} [consistentRead] Determines whether or not strong consistency should be enforced when data is read from SimpleDB. If <code>true</code>, any data previously written to SimpleDB will be returned. Otherwise, results will be consistent eventually, and the client may not see data that was written immediately before your read.
     * @param {module:api/DefaultApi~gETGetAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAttributesResult}
     */
    gETGetAttributes(aWSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, itemName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'aWSAccessKeyId' is set
      if (aWSAccessKeyId === undefined || aWSAccessKeyId === null) {
        throw new Error("Missing the required parameter 'aWSAccessKeyId' when calling gETGetAttributes");
      }
      // verify the required parameter 'signatureMethod' is set
      if (signatureMethod === undefined || signatureMethod === null) {
        throw new Error("Missing the required parameter 'signatureMethod' when calling gETGetAttributes");
      }
      // verify the required parameter 'signatureVersion' is set
      if (signatureVersion === undefined || signatureVersion === null) {
        throw new Error("Missing the required parameter 'signatureVersion' when calling gETGetAttributes");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling gETGetAttributes");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling gETGetAttributes");
      }
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETGetAttributes");
      }
      // verify the required parameter 'itemName' is set
      if (itemName === undefined || itemName === null) {
        throw new Error("Missing the required parameter 'itemName' when calling gETGetAttributes");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETGetAttributes");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETGetAttributes");
      }

      let pathParams = {
      };
      let queryParams = {
        'AWSAccessKeyId': aWSAccessKeyId,
        'SignatureMethod': signatureMethod,
        'SignatureVersion': signatureVersion,
        'Timestamp': timestamp,
        'Signature': signature,
        'DomainName': domainName,
        'ItemName': itemName,
        'AttributeNames': this.apiClient.buildCollectionParam(opts['attributeNames'], 'multi'),
        'ConsistentRead': opts['consistentRead'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetAttributesResult;
      return this.apiClient.callApi(
        '/#Action=GetAttributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETListDomains operation.
     * @callback module:api/DefaultApi~gETListDomainsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDomainsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  The <code>ListDomains</code> operation lists all domains associated with the Access Key ID. It returns domain names up to the limit set by <a href=\"#MaxNumberOfDomains\">MaxNumberOfDomains</a>. A <a href=\"#NextToken\">NextToken</a> is returned if there are more than <code>MaxNumberOfDomains</code> domains. Calling <code>ListDomains</code> successive times with the <code>NextToken</code> provided by the operation returns up to <code>MaxNumberOfDomains</code> more domain names with each successive operation call. 
     * @param {String} aWSAccessKeyId 
     * @param {String} signatureMethod 
     * @param {String} signatureVersion 
     * @param {String} timestamp 
     * @param {String} signature 
     * @param {String} action 
     * @param {String} version 
     * @param {Object} opts Optional parameters
     * @param {Number} [maxNumberOfDomains] The maximum number of domain names you want returned. The range is 1 to 100. The default setting is 100.
     * @param {String} [nextToken] A string informing Amazon SimpleDB where to start the next list of domain names.
     * @param {module:api/DefaultApi~gETListDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDomainsResult}
     */
    gETListDomains(aWSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'aWSAccessKeyId' is set
      if (aWSAccessKeyId === undefined || aWSAccessKeyId === null) {
        throw new Error("Missing the required parameter 'aWSAccessKeyId' when calling gETListDomains");
      }
      // verify the required parameter 'signatureMethod' is set
      if (signatureMethod === undefined || signatureMethod === null) {
        throw new Error("Missing the required parameter 'signatureMethod' when calling gETListDomains");
      }
      // verify the required parameter 'signatureVersion' is set
      if (signatureVersion === undefined || signatureVersion === null) {
        throw new Error("Missing the required parameter 'signatureVersion' when calling gETListDomains");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling gETListDomains");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling gETListDomains");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETListDomains");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETListDomains");
      }

      let pathParams = {
      };
      let queryParams = {
        'AWSAccessKeyId': aWSAccessKeyId,
        'SignatureMethod': signatureMethod,
        'SignatureVersion': signatureVersion,
        'Timestamp': timestamp,
        'Signature': signature,
        'MaxNumberOfDomains': opts['maxNumberOfDomains'],
        'NextToken': opts['nextToken'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ListDomainsResult;
      return this.apiClient.callApi(
        '/#Action=ListDomains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETPutAttributes operation.
     * @callback module:api/DefaultApi~gETPutAttributesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> The PutAttributes operation creates or replaces attributes in an item. The client may specify new attributes using a combination of the <code>Attribute.X.Name</code> and <code>Attribute.X.Value</code> parameters. The client specifies the first attribute by the parameters <code>Attribute.0.Name</code> and <code>Attribute.0.Value</code>, the second attribute by the parameters <code>Attribute.1.Name</code> and <code>Attribute.1.Value</code>, and so on. </p> <p> Attributes are uniquely identified in an item by their name/value combination. For example, a single item can have the attributes <code>{ \"first_name\", \"first_value\" }</code> and <code>{ \"first_name\", second_value\" }</code>. However, it cannot have two attribute instances where both the <code>Attribute.X.Name</code> and <code>Attribute.X.Value</code> are the same. </p> <p> Optionally, the requestor can supply the <code>Replace</code> parameter for each individual attribute. Setting this value to <code>true</code> causes the new attribute value to replace the existing attribute value(s). For example, if an item has the attributes <code>{ 'a', '1' }</code>, <code>{ 'b', '2'}</code> and <code>{ 'b', '3' }</code> and the requestor calls <code>PutAttributes</code> using the attributes <code>{ 'b', '4' }</code> with the <code>Replace</code> parameter set to true, the final attributes of the item are changed to <code>{ 'a', '1' }</code> and <code>{ 'b', '4' }</code>, which replaces the previous values of the 'b' attribute with the new value. </p> <note> Using <code>PutAttributes</code> to replace attribute values that do not exist will not result in an error response. </note> <p> You cannot specify an empty string as an attribute name. </p> <p> Because Amazon SimpleDB makes multiple copies of client data and uses an eventual consistency update model, an immediate <a>GetAttributes</a> or <a>Select</a> operation (read) immediately after a <a>PutAttributes</a> or <a>DeleteAttributes</a> operation (write) might not return the updated data. </p> <p> The following limitations are enforced for this operation: <ul> <li>256 total attribute name-value pairs per item</li> <li>One billion attributes per domain</li> <li>10 GB of total user data storage per domain</li> </ul> </p>
     * @param {String} aWSAccessKeyId 
     * @param {String} signatureMethod 
     * @param {String} signatureVersion 
     * @param {String} timestamp 
     * @param {String} signature 
     * @param {String} domainName The name of the domain in which to perform the operation.
     * @param {String} itemName The name of the item.
     * @param {Array.<module:model/GETPutAttributesAttributesParameterInner>} attributes The list of attributes.
     * @param {String} action 
     * @param {String} version 
     * @param {Object} opts Optional parameters
     * @param {module:model/GETDeleteAttributesExpectedParameter} [expected] The update condition which, if specified, determines whether the specified attributes will be updated or not. The update condition must be satisfied in order for this request to be processed and the attributes to be updated.
     * @param {module:api/DefaultApi~gETPutAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gETPutAttributes(aWSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, itemName, attributes, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'aWSAccessKeyId' is set
      if (aWSAccessKeyId === undefined || aWSAccessKeyId === null) {
        throw new Error("Missing the required parameter 'aWSAccessKeyId' when calling gETPutAttributes");
      }
      // verify the required parameter 'signatureMethod' is set
      if (signatureMethod === undefined || signatureMethod === null) {
        throw new Error("Missing the required parameter 'signatureMethod' when calling gETPutAttributes");
      }
      // verify the required parameter 'signatureVersion' is set
      if (signatureVersion === undefined || signatureVersion === null) {
        throw new Error("Missing the required parameter 'signatureVersion' when calling gETPutAttributes");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling gETPutAttributes");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling gETPutAttributes");
      }
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling gETPutAttributes");
      }
      // verify the required parameter 'itemName' is set
      if (itemName === undefined || itemName === null) {
        throw new Error("Missing the required parameter 'itemName' when calling gETPutAttributes");
      }
      // verify the required parameter 'attributes' is set
      if (attributes === undefined || attributes === null) {
        throw new Error("Missing the required parameter 'attributes' when calling gETPutAttributes");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETPutAttributes");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETPutAttributes");
      }

      let pathParams = {
      };
      let queryParams = {
        'AWSAccessKeyId': aWSAccessKeyId,
        'SignatureMethod': signatureMethod,
        'SignatureVersion': signatureVersion,
        'Timestamp': timestamp,
        'Signature': signature,
        'DomainName': domainName,
        'ItemName': itemName,
        'Attributes': this.apiClient.buildCollectionParam(attributes, 'multi'),
        'Expected': opts['expected'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=PutAttributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETSelect operation.
     * @callback module:api/DefaultApi~gETSelectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SelectResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> The <code>Select</code> operation returns a set of attributes for <code>ItemNames</code> that match the select expression. <code>Select</code> is similar to the standard SQL SELECT statement. </p> <p> The total size of the response cannot exceed 1 MB in total size. Amazon SimpleDB automatically adjusts the number of items returned per page to enforce this limit. For example, if the client asks to retrieve 2500 items, but each individual item is 10 kB in size, the system returns 100 items and an appropriate <code>NextToken</code> so the client can access the next page of results. </p> <p> For information on how to construct select expressions, see Using Select to Create Amazon SimpleDB Queries in the Developer Guide. </p>
     * @param {String} aWSAccessKeyId 
     * @param {String} signatureMethod 
     * @param {String} signatureVersion 
     * @param {String} timestamp 
     * @param {String} signature 
     * @param {String} selectExpression The expression used to query the domain.
     * @param {String} action 
     * @param {String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [nextToken] A string informing Amazon SimpleDB where to start the next list of <code>ItemNames</code>.
     * @param {Boolean} [consistentRead] Determines whether or not strong consistency should be enforced when data is read from SimpleDB. If <code>true</code>, any data previously written to SimpleDB will be returned. Otherwise, results will be consistent eventually, and the client may not see data that was written immediately before your read.
     * @param {module:api/DefaultApi~gETSelectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SelectResult}
     */
    gETSelect(aWSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, selectExpression, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'aWSAccessKeyId' is set
      if (aWSAccessKeyId === undefined || aWSAccessKeyId === null) {
        throw new Error("Missing the required parameter 'aWSAccessKeyId' when calling gETSelect");
      }
      // verify the required parameter 'signatureMethod' is set
      if (signatureMethod === undefined || signatureMethod === null) {
        throw new Error("Missing the required parameter 'signatureMethod' when calling gETSelect");
      }
      // verify the required parameter 'signatureVersion' is set
      if (signatureVersion === undefined || signatureVersion === null) {
        throw new Error("Missing the required parameter 'signatureVersion' when calling gETSelect");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling gETSelect");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling gETSelect");
      }
      // verify the required parameter 'selectExpression' is set
      if (selectExpression === undefined || selectExpression === null) {
        throw new Error("Missing the required parameter 'selectExpression' when calling gETSelect");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETSelect");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETSelect");
      }

      let pathParams = {
      };
      let queryParams = {
        'AWSAccessKeyId': aWSAccessKeyId,
        'SignatureMethod': signatureMethod,
        'SignatureVersion': signatureVersion,
        'Timestamp': timestamp,
        'Signature': signature,
        'SelectExpression': selectExpression,
        'NextToken': opts['nextToken'],
        'ConsistentRead': opts['consistentRead'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = SelectResult;
      return this.apiClient.callApi(
        '/#Action=Select', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTBatchDeleteAttributes operation.
     * @callback module:api/DefaultApi~pOSTBatchDeleteAttributesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> Performs multiple DeleteAttributes operations in a single call, which reduces round trips and latencies. This enables Amazon SimpleDB to optimize requests, which generally yields better throughput. </p> <note> <p> If you specify BatchDeleteAttributes without attributes or values, all the attributes for the item are deleted. </p> <p> BatchDeleteAttributes is an idempotent operation; running it multiple times on the same item or attribute doesn't result in an error. </p> <p> The BatchDeleteAttributes operation succeeds or fails in its entirety. There are no partial deletes. You can execute multiple BatchDeleteAttributes operations and other operations in parallel. However, large numbers of concurrent BatchDeleteAttributes calls can result in Service Unavailable (503) responses. </p> <p> This operation is vulnerable to exceeding the maximum URL size when making a REST request using the HTTP GET method. </p> <p> This operation does not support conditions using Expected.X.Name, Expected.X.Value, or Expected.X.Exists. </p> </note> <p> The following limitations are enforced for this operation: <ul> <li>1 MB request size</li> <li>25 item limit per BatchDeleteAttributes operation</li> </ul> </p>
     * @param {String} aWSAccessKeyId 
     * @param {String} signatureMethod 
     * @param {String} signatureVersion 
     * @param {String} timestamp 
     * @param {String} signature 
     * @param {String} action 
     * @param {String} version 
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchDeleteAttributesRequest} [batchDeleteAttributesRequest] 
     * @param {module:api/DefaultApi~pOSTBatchDeleteAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pOSTBatchDeleteAttributes(aWSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['batchDeleteAttributesRequest'];
      // verify the required parameter 'aWSAccessKeyId' is set
      if (aWSAccessKeyId === undefined || aWSAccessKeyId === null) {
        throw new Error("Missing the required parameter 'aWSAccessKeyId' when calling pOSTBatchDeleteAttributes");
      }
      // verify the required parameter 'signatureMethod' is set
      if (signatureMethod === undefined || signatureMethod === null) {
        throw new Error("Missing the required parameter 'signatureMethod' when calling pOSTBatchDeleteAttributes");
      }
      // verify the required parameter 'signatureVersion' is set
      if (signatureVersion === undefined || signatureVersion === null) {
        throw new Error("Missing the required parameter 'signatureVersion' when calling pOSTBatchDeleteAttributes");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling pOSTBatchDeleteAttributes");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling pOSTBatchDeleteAttributes");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTBatchDeleteAttributes");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTBatchDeleteAttributes");
      }

      let pathParams = {
      };
      let queryParams = {
        'AWSAccessKeyId': aWSAccessKeyId,
        'SignatureMethod': signatureMethod,
        'SignatureVersion': signatureVersion,
        'Timestamp': timestamp,
        'Signature': signature,
        'Action': action,
        'Version': version
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=BatchDeleteAttributes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTBatchPutAttributes operation.
     * @callback module:api/DefaultApi~pOSTBatchPutAttributesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> The <code>BatchPutAttributes</code> operation creates or replaces attributes within one or more items. By using this operation, the client can perform multiple <a>PutAttribute</a> operation with a single call. This helps yield savings in round trips and latencies, enabling Amazon SimpleDB to optimize requests and generally produce better throughput. </p> <p> The client may specify the item name with the <code>Item.X.ItemName</code> parameter. The client may specify new attributes using a combination of the <code>Item.X.Attribute.Y.Name</code> and <code>Item.X.Attribute.Y.Value</code> parameters. The client may specify the first attribute for the first item using the parameters <code>Item.0.Attribute.0.Name</code> and <code>Item.0.Attribute.0.Value</code>, and for the second attribute for the first item by the parameters <code>Item.0.Attribute.1.Name</code> and <code>Item.0.Attribute.1.Value</code>, and so on. </p> <p> Attributes are uniquely identified within an item by their name/value combination. For example, a single item can have the attributes <code>{ \"first_name\", \"first_value\" }</code> and <code>{ \"first_name\", \"second_value\" }</code>. However, it cannot have two attribute instances where both the <code>Item.X.Attribute.Y.Name</code> and <code>Item.X.Attribute.Y.Value</code> are the same. </p> <p> Optionally, the requester can supply the <code>Replace</code> parameter for each individual value. Setting this value to <code>true</code> will cause the new attribute values to replace the existing attribute values. For example, if an item <code>I</code> has the attributes <code>{ 'a', '1' }, { 'b', '2'}</code> and <code>{ 'b', '3' }</code> and the requester does a BatchPutAttributes of <code>{'I', 'b', '4' }</code> with the Replace parameter set to true, the final attributes of the item will be <code>{ 'a', '1' }</code> and <code>{ 'b', '4' }</code>, replacing the previous values of the 'b' attribute with the new value. </p> <note> You cannot specify an empty string as an item or as an attribute name. The <code>BatchPutAttributes</code> operation succeeds or fails in its entirety. There are no partial puts. </note> <important> This operation is vulnerable to exceeding the maximum URL size when making a REST request using the HTTP GET method. This operation does not support conditions using <code>Expected.X.Name</code>, <code>Expected.X.Value</code>, or <code>Expected.X.Exists</code>. </important> <p> You can execute multiple <code>BatchPutAttributes</code> operations and other operations in parallel. However, large numbers of concurrent <code>BatchPutAttributes</code> calls can result in Service Unavailable (503) responses. </p> <p> The following limitations are enforced for this operation: <ul> <li>256 attribute name-value pairs per item</li> <li>1 MB request size</li> <li>1 billion attributes per domain</li> <li>10 GB of total user data storage per domain</li> <li>25 item limit per <code>BatchPutAttributes</code> operation</li> </ul> </p>
     * @param {String} aWSAccessKeyId 
     * @param {String} signatureMethod 
     * @param {String} signatureVersion 
     * @param {String} timestamp 
     * @param {String} signature 
     * @param {String} action 
     * @param {String} version 
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchPutAttributesRequest} [batchPutAttributesRequest] 
     * @param {module:api/DefaultApi~pOSTBatchPutAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pOSTBatchPutAttributes(aWSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['batchPutAttributesRequest'];
      // verify the required parameter 'aWSAccessKeyId' is set
      if (aWSAccessKeyId === undefined || aWSAccessKeyId === null) {
        throw new Error("Missing the required parameter 'aWSAccessKeyId' when calling pOSTBatchPutAttributes");
      }
      // verify the required parameter 'signatureMethod' is set
      if (signatureMethod === undefined || signatureMethod === null) {
        throw new Error("Missing the required parameter 'signatureMethod' when calling pOSTBatchPutAttributes");
      }
      // verify the required parameter 'signatureVersion' is set
      if (signatureVersion === undefined || signatureVersion === null) {
        throw new Error("Missing the required parameter 'signatureVersion' when calling pOSTBatchPutAttributes");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling pOSTBatchPutAttributes");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling pOSTBatchPutAttributes");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTBatchPutAttributes");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTBatchPutAttributes");
      }

      let pathParams = {
      };
      let queryParams = {
        'AWSAccessKeyId': aWSAccessKeyId,
        'SignatureMethod': signatureMethod,
        'SignatureVersion': signatureVersion,
        'Timestamp': timestamp,
        'Signature': signature,
        'Action': action,
        'Version': version
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=BatchPutAttributes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCreateDomain operation.
     * @callback module:api/DefaultApi~pOSTCreateDomainCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> The <code>CreateDomain</code> operation creates a new domain. The domain name should be unique among the domains associated with the Access Key ID provided in the request. The <code>CreateDomain</code> operation may take 10 or more seconds to complete. </p> <note> CreateDomain is an idempotent operation; running it multiple times using the same domain name will not result in an error response. </note> <p> The client can create up to 100 domains per account. </p> <p> If the client requires additional domains, go to <a href=\"http://aws.amazon.com/contact-us/simpledb-limit-request/\"> http://aws.amazon.com/contact-us/simpledb-limit-request/</a>. </p>
     * @param {String} aWSAccessKeyId 
     * @param {String} signatureMethod 
     * @param {String} signatureVersion 
     * @param {String} timestamp 
     * @param {String} signature 
     * @param {String} action 
     * @param {String} version 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateDomainRequest} [createDomainRequest] 
     * @param {module:api/DefaultApi~pOSTCreateDomainCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pOSTCreateDomain(aWSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['createDomainRequest'];
      // verify the required parameter 'aWSAccessKeyId' is set
      if (aWSAccessKeyId === undefined || aWSAccessKeyId === null) {
        throw new Error("Missing the required parameter 'aWSAccessKeyId' when calling pOSTCreateDomain");
      }
      // verify the required parameter 'signatureMethod' is set
      if (signatureMethod === undefined || signatureMethod === null) {
        throw new Error("Missing the required parameter 'signatureMethod' when calling pOSTCreateDomain");
      }
      // verify the required parameter 'signatureVersion' is set
      if (signatureVersion === undefined || signatureVersion === null) {
        throw new Error("Missing the required parameter 'signatureVersion' when calling pOSTCreateDomain");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling pOSTCreateDomain");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling pOSTCreateDomain");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCreateDomain");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCreateDomain");
      }

      let pathParams = {
      };
      let queryParams = {
        'AWSAccessKeyId': aWSAccessKeyId,
        'SignatureMethod': signatureMethod,
        'SignatureVersion': signatureVersion,
        'Timestamp': timestamp,
        'Signature': signature,
        'Action': action,
        'Version': version
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=CreateDomain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteAttributes operation.
     * @callback module:api/DefaultApi~pOSTDeleteAttributesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> Deletes one or more attributes associated with an item. If all attributes of the item are deleted, the item is deleted. </p> <note> If <code>DeleteAttributes</code> is called without being passed any attributes or values specified, all the attributes for the item are deleted. </note> <p> <code>DeleteAttributes</code> is an idempotent operation; running it multiple times on the same item or attribute does not result in an error response. </p> <p> Because Amazon SimpleDB makes multiple copies of item data and uses an eventual consistency update model, performing a <a>GetAttributes</a> or <a>Select</a> operation (read) immediately after a <code>DeleteAttributes</code> or <a>PutAttributes</a> operation (write) might not return updated item data. </p>
     * @param {String} aWSAccessKeyId 
     * @param {String} signatureMethod 
     * @param {String} signatureVersion 
     * @param {String} timestamp 
     * @param {String} signature 
     * @param {String} action 
     * @param {String} version 
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteAttributesRequest} [deleteAttributesRequest] 
     * @param {module:api/DefaultApi~pOSTDeleteAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pOSTDeleteAttributes(aWSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteAttributesRequest'];
      // verify the required parameter 'aWSAccessKeyId' is set
      if (aWSAccessKeyId === undefined || aWSAccessKeyId === null) {
        throw new Error("Missing the required parameter 'aWSAccessKeyId' when calling pOSTDeleteAttributes");
      }
      // verify the required parameter 'signatureMethod' is set
      if (signatureMethod === undefined || signatureMethod === null) {
        throw new Error("Missing the required parameter 'signatureMethod' when calling pOSTDeleteAttributes");
      }
      // verify the required parameter 'signatureVersion' is set
      if (signatureVersion === undefined || signatureVersion === null) {
        throw new Error("Missing the required parameter 'signatureVersion' when calling pOSTDeleteAttributes");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling pOSTDeleteAttributes");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling pOSTDeleteAttributes");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteAttributes");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteAttributes");
      }

      let pathParams = {
      };
      let queryParams = {
        'AWSAccessKeyId': aWSAccessKeyId,
        'SignatureMethod': signatureMethod,
        'SignatureVersion': signatureVersion,
        'Timestamp': timestamp,
        'Signature': signature,
        'Action': action,
        'Version': version
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=DeleteAttributes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteDomain operation.
     * @callback module:api/DefaultApi~pOSTDeleteDomainCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> The <code>DeleteDomain</code> operation deletes a domain. Any items (and their attributes) in the domain are deleted as well. The <code>DeleteDomain</code> operation might take 10 or more seconds to complete. </p> <note> Running <code>DeleteDomain</code> on a domain that does not exist or running the function multiple times using the same domain name will not result in an error response. </note>
     * @param {String} aWSAccessKeyId 
     * @param {String} signatureMethod 
     * @param {String} signatureVersion 
     * @param {String} timestamp 
     * @param {String} signature 
     * @param {String} action 
     * @param {String} version 
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteDomainRequest} [deleteDomainRequest] 
     * @param {module:api/DefaultApi~pOSTDeleteDomainCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pOSTDeleteDomain(aWSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteDomainRequest'];
      // verify the required parameter 'aWSAccessKeyId' is set
      if (aWSAccessKeyId === undefined || aWSAccessKeyId === null) {
        throw new Error("Missing the required parameter 'aWSAccessKeyId' when calling pOSTDeleteDomain");
      }
      // verify the required parameter 'signatureMethod' is set
      if (signatureMethod === undefined || signatureMethod === null) {
        throw new Error("Missing the required parameter 'signatureMethod' when calling pOSTDeleteDomain");
      }
      // verify the required parameter 'signatureVersion' is set
      if (signatureVersion === undefined || signatureVersion === null) {
        throw new Error("Missing the required parameter 'signatureVersion' when calling pOSTDeleteDomain");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling pOSTDeleteDomain");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling pOSTDeleteDomain");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteDomain");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteDomain");
      }

      let pathParams = {
      };
      let queryParams = {
        'AWSAccessKeyId': aWSAccessKeyId,
        'SignatureMethod': signatureMethod,
        'SignatureVersion': signatureVersion,
        'Timestamp': timestamp,
        'Signature': signature,
        'Action': action,
        'Version': version
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=DeleteDomain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDomainMetadata operation.
     * @callback module:api/DefaultApi~pOSTDomainMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DomainMetadataResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns information about the domain, including when the domain was created, the number of items and attributes in the domain, and the size of the attribute names and values. 
     * @param {String} aWSAccessKeyId 
     * @param {String} signatureMethod 
     * @param {String} signatureVersion 
     * @param {String} timestamp 
     * @param {String} signature 
     * @param {String} action 
     * @param {String} version 
     * @param {Object} opts Optional parameters
     * @param {module:model/DomainMetadataRequest} [domainMetadataRequest] 
     * @param {module:api/DefaultApi~pOSTDomainMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DomainMetadataResult}
     */
    pOSTDomainMetadata(aWSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['domainMetadataRequest'];
      // verify the required parameter 'aWSAccessKeyId' is set
      if (aWSAccessKeyId === undefined || aWSAccessKeyId === null) {
        throw new Error("Missing the required parameter 'aWSAccessKeyId' when calling pOSTDomainMetadata");
      }
      // verify the required parameter 'signatureMethod' is set
      if (signatureMethod === undefined || signatureMethod === null) {
        throw new Error("Missing the required parameter 'signatureMethod' when calling pOSTDomainMetadata");
      }
      // verify the required parameter 'signatureVersion' is set
      if (signatureVersion === undefined || signatureVersion === null) {
        throw new Error("Missing the required parameter 'signatureVersion' when calling pOSTDomainMetadata");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling pOSTDomainMetadata");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling pOSTDomainMetadata");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDomainMetadata");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDomainMetadata");
      }

      let pathParams = {
      };
      let queryParams = {
        'AWSAccessKeyId': aWSAccessKeyId,
        'SignatureMethod': signatureMethod,
        'SignatureVersion': signatureVersion,
        'Timestamp': timestamp,
        'Signature': signature,
        'Action': action,
        'Version': version
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DomainMetadataResult;
      return this.apiClient.callApi(
        '/#Action=DomainMetadata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTGetAttributes operation.
     * @callback module:api/DefaultApi~pOSTGetAttributesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAttributesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> Returns all of the attributes associated with the specified item. Optionally, the attributes returned can be limited to one or more attributes by specifying an attribute name parameter. </p> <p> If the item does not exist on the replica that was accessed for this operation, an empty set is returned. The system does not return an error as it cannot guarantee the item does not exist on other replicas. </p> <note> If GetAttributes is called without being passed any attribute names, all the attributes for the item are returned. </note>
     * @param {String} aWSAccessKeyId 
     * @param {String} signatureMethod 
     * @param {String} signatureVersion 
     * @param {String} timestamp 
     * @param {String} signature 
     * @param {String} action 
     * @param {String} version 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetAttributesRequest} [getAttributesRequest] 
     * @param {module:api/DefaultApi~pOSTGetAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAttributesResult}
     */
    pOSTGetAttributes(aWSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['getAttributesRequest'];
      // verify the required parameter 'aWSAccessKeyId' is set
      if (aWSAccessKeyId === undefined || aWSAccessKeyId === null) {
        throw new Error("Missing the required parameter 'aWSAccessKeyId' when calling pOSTGetAttributes");
      }
      // verify the required parameter 'signatureMethod' is set
      if (signatureMethod === undefined || signatureMethod === null) {
        throw new Error("Missing the required parameter 'signatureMethod' when calling pOSTGetAttributes");
      }
      // verify the required parameter 'signatureVersion' is set
      if (signatureVersion === undefined || signatureVersion === null) {
        throw new Error("Missing the required parameter 'signatureVersion' when calling pOSTGetAttributes");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling pOSTGetAttributes");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling pOSTGetAttributes");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTGetAttributes");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTGetAttributes");
      }

      let pathParams = {
      };
      let queryParams = {
        'AWSAccessKeyId': aWSAccessKeyId,
        'SignatureMethod': signatureMethod,
        'SignatureVersion': signatureVersion,
        'Timestamp': timestamp,
        'Signature': signature,
        'Action': action,
        'Version': version
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = GetAttributesResult;
      return this.apiClient.callApi(
        '/#Action=GetAttributes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTListDomains operation.
     * @callback module:api/DefaultApi~pOSTListDomainsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDomainsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  The <code>ListDomains</code> operation lists all domains associated with the Access Key ID. It returns domain names up to the limit set by <a href=\"#MaxNumberOfDomains\">MaxNumberOfDomains</a>. A <a href=\"#NextToken\">NextToken</a> is returned if there are more than <code>MaxNumberOfDomains</code> domains. Calling <code>ListDomains</code> successive times with the <code>NextToken</code> provided by the operation returns up to <code>MaxNumberOfDomains</code> more domain names with each successive operation call. 
     * @param {String} aWSAccessKeyId 
     * @param {String} signatureMethod 
     * @param {String} signatureVersion 
     * @param {String} timestamp 
     * @param {String} signature 
     * @param {String} action 
     * @param {String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [maxNumberOfDomains] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:model/ListDomainsRequest} [listDomainsRequest] 
     * @param {module:api/DefaultApi~pOSTListDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDomainsResult}
     */
    pOSTListDomains(aWSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['listDomainsRequest'];
      // verify the required parameter 'aWSAccessKeyId' is set
      if (aWSAccessKeyId === undefined || aWSAccessKeyId === null) {
        throw new Error("Missing the required parameter 'aWSAccessKeyId' when calling pOSTListDomains");
      }
      // verify the required parameter 'signatureMethod' is set
      if (signatureMethod === undefined || signatureMethod === null) {
        throw new Error("Missing the required parameter 'signatureMethod' when calling pOSTListDomains");
      }
      // verify the required parameter 'signatureVersion' is set
      if (signatureVersion === undefined || signatureVersion === null) {
        throw new Error("Missing the required parameter 'signatureVersion' when calling pOSTListDomains");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling pOSTListDomains");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling pOSTListDomains");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTListDomains");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTListDomains");
      }

      let pathParams = {
      };
      let queryParams = {
        'AWSAccessKeyId': aWSAccessKeyId,
        'SignatureMethod': signatureMethod,
        'SignatureVersion': signatureVersion,
        'Timestamp': timestamp,
        'Signature': signature,
        'MaxNumberOfDomains': opts['maxNumberOfDomains'],
        'NextToken': opts['nextToken'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ListDomainsResult;
      return this.apiClient.callApi(
        '/#Action=ListDomains', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTPutAttributes operation.
     * @callback module:api/DefaultApi~pOSTPutAttributesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> The PutAttributes operation creates or replaces attributes in an item. The client may specify new attributes using a combination of the <code>Attribute.X.Name</code> and <code>Attribute.X.Value</code> parameters. The client specifies the first attribute by the parameters <code>Attribute.0.Name</code> and <code>Attribute.0.Value</code>, the second attribute by the parameters <code>Attribute.1.Name</code> and <code>Attribute.1.Value</code>, and so on. </p> <p> Attributes are uniquely identified in an item by their name/value combination. For example, a single item can have the attributes <code>{ \"first_name\", \"first_value\" }</code> and <code>{ \"first_name\", second_value\" }</code>. However, it cannot have two attribute instances where both the <code>Attribute.X.Name</code> and <code>Attribute.X.Value</code> are the same. </p> <p> Optionally, the requestor can supply the <code>Replace</code> parameter for each individual attribute. Setting this value to <code>true</code> causes the new attribute value to replace the existing attribute value(s). For example, if an item has the attributes <code>{ 'a', '1' }</code>, <code>{ 'b', '2'}</code> and <code>{ 'b', '3' }</code> and the requestor calls <code>PutAttributes</code> using the attributes <code>{ 'b', '4' }</code> with the <code>Replace</code> parameter set to true, the final attributes of the item are changed to <code>{ 'a', '1' }</code> and <code>{ 'b', '4' }</code>, which replaces the previous values of the 'b' attribute with the new value. </p> <note> Using <code>PutAttributes</code> to replace attribute values that do not exist will not result in an error response. </note> <p> You cannot specify an empty string as an attribute name. </p> <p> Because Amazon SimpleDB makes multiple copies of client data and uses an eventual consistency update model, an immediate <a>GetAttributes</a> or <a>Select</a> operation (read) immediately after a <a>PutAttributes</a> or <a>DeleteAttributes</a> operation (write) might not return the updated data. </p> <p> The following limitations are enforced for this operation: <ul> <li>256 total attribute name-value pairs per item</li> <li>One billion attributes per domain</li> <li>10 GB of total user data storage per domain</li> </ul> </p>
     * @param {String} aWSAccessKeyId 
     * @param {String} signatureMethod 
     * @param {String} signatureVersion 
     * @param {String} timestamp 
     * @param {String} signature 
     * @param {String} action 
     * @param {String} version 
     * @param {Object} opts Optional parameters
     * @param {module:model/PutAttributesRequest} [putAttributesRequest] 
     * @param {module:api/DefaultApi~pOSTPutAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pOSTPutAttributes(aWSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['putAttributesRequest'];
      // verify the required parameter 'aWSAccessKeyId' is set
      if (aWSAccessKeyId === undefined || aWSAccessKeyId === null) {
        throw new Error("Missing the required parameter 'aWSAccessKeyId' when calling pOSTPutAttributes");
      }
      // verify the required parameter 'signatureMethod' is set
      if (signatureMethod === undefined || signatureMethod === null) {
        throw new Error("Missing the required parameter 'signatureMethod' when calling pOSTPutAttributes");
      }
      // verify the required parameter 'signatureVersion' is set
      if (signatureVersion === undefined || signatureVersion === null) {
        throw new Error("Missing the required parameter 'signatureVersion' when calling pOSTPutAttributes");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling pOSTPutAttributes");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling pOSTPutAttributes");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTPutAttributes");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTPutAttributes");
      }

      let pathParams = {
      };
      let queryParams = {
        'AWSAccessKeyId': aWSAccessKeyId,
        'SignatureMethod': signatureMethod,
        'SignatureVersion': signatureVersion,
        'Timestamp': timestamp,
        'Signature': signature,
        'Action': action,
        'Version': version
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=PutAttributes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTSelect operation.
     * @callback module:api/DefaultApi~pOSTSelectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SelectResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> The <code>Select</code> operation returns a set of attributes for <code>ItemNames</code> that match the select expression. <code>Select</code> is similar to the standard SQL SELECT statement. </p> <p> The total size of the response cannot exceed 1 MB in total size. Amazon SimpleDB automatically adjusts the number of items returned per page to enforce this limit. For example, if the client asks to retrieve 2500 items, but each individual item is 10 kB in size, the system returns 100 items and an appropriate <code>NextToken</code> so the client can access the next page of results. </p> <p> For information on how to construct select expressions, see Using Select to Create Amazon SimpleDB Queries in the Developer Guide. </p>
     * @param {String} aWSAccessKeyId 
     * @param {String} signatureMethod 
     * @param {String} signatureVersion 
     * @param {String} timestamp 
     * @param {String} signature 
     * @param {String} action 
     * @param {String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [nextToken] Pagination token
     * @param {module:model/SelectRequest} [selectRequest] 
     * @param {module:api/DefaultApi~pOSTSelectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SelectResult}
     */
    pOSTSelect(aWSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['selectRequest'];
      // verify the required parameter 'aWSAccessKeyId' is set
      if (aWSAccessKeyId === undefined || aWSAccessKeyId === null) {
        throw new Error("Missing the required parameter 'aWSAccessKeyId' when calling pOSTSelect");
      }
      // verify the required parameter 'signatureMethod' is set
      if (signatureMethod === undefined || signatureMethod === null) {
        throw new Error("Missing the required parameter 'signatureMethod' when calling pOSTSelect");
      }
      // verify the required parameter 'signatureVersion' is set
      if (signatureVersion === undefined || signatureVersion === null) {
        throw new Error("Missing the required parameter 'signatureVersion' when calling pOSTSelect");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling pOSTSelect");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling pOSTSelect");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTSelect");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTSelect");
      }

      let pathParams = {
      };
      let queryParams = {
        'AWSAccessKeyId': aWSAccessKeyId,
        'SignatureMethod': signatureMethod,
        'SignatureVersion': signatureVersion,
        'Timestamp': timestamp,
        'Signature': signature,
        'NextToken': opts['nextToken'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = SelectResult;
      return this.apiClient.callApi(
        '/#Action=Select', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
