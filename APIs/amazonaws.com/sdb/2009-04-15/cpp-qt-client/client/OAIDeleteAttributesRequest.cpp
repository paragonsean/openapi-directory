/**
 * Amazon SimpleDB
 * Amazon SimpleDB is a web service providing the core database functions of data indexing and querying in the cloud. By offloading the time and effort associated with building and operating a web-scale database, SimpleDB provides developers the freedom to focus on application development. <p> A traditional, clustered relational database requires a sizable upfront capital outlay, is complex to design, and often requires extensive and repetitive database administration. Amazon SimpleDB is dramatically simpler, requiring no schema, automatically indexing your data and providing a simple API for storage and access. This approach eliminates the administrative burden of data modeling, index maintenance, and performance tuning. Developers gain access to this functionality within Amazon's proven computing environment, are able to scale instantly, and pay only for what they use. </p> <p> Visit <a href=\"http://aws.amazon.com/simpledb/\">http://aws.amazon.com/simpledb/</a> for more information. </p>
 *
 * The version of the OpenAPI document: 2009-04-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteAttributesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteAttributesRequest::OAIDeleteAttributesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteAttributesRequest::OAIDeleteAttributesRequest() {
    this->initializeModel();
}

OAIDeleteAttributesRequest::~OAIDeleteAttributesRequest() {}

void OAIDeleteAttributesRequest::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_item_name_isSet = false;
    m_item_name_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_expected_isSet = false;
    m_expected_isValid = false;
}

void OAIDeleteAttributesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteAttributesRequest::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_item_name_isValid = ::OpenAPI::fromJsonValue(m_item_name, json[QString("ItemName")]);
    m_item_name_isSet = !json[QString("ItemName")].isNull() && m_item_name_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("Attributes")]);
    m_attributes_isSet = !json[QString("Attributes")].isNull() && m_attributes_isValid;

    m_expected_isValid = ::OpenAPI::fromJsonValue(m_expected, json[QString("Expected")]);
    m_expected_isSet = !json[QString("Expected")].isNull() && m_expected_isValid;
}

QString OAIDeleteAttributesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteAttributesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_item_name_isSet) {
        obj.insert(QString("ItemName"), ::OpenAPI::toJsonValue(m_item_name));
    }
    if (m_attributes.isSet()) {
        obj.insert(QString("Attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_expected.isSet()) {
        obj.insert(QString("Expected"), ::OpenAPI::toJsonValue(m_expected));
    }
    return obj;
}

QString OAIDeleteAttributesRequest::getDomainName() const {
    return m_domain_name;
}
void OAIDeleteAttributesRequest::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIDeleteAttributesRequest::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIDeleteAttributesRequest::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QString OAIDeleteAttributesRequest::getItemName() const {
    return m_item_name;
}
void OAIDeleteAttributesRequest::setItemName(const QString &item_name) {
    m_item_name = item_name;
    m_item_name_isSet = true;
}

bool OAIDeleteAttributesRequest::is_item_name_Set() const{
    return m_item_name_isSet;
}

bool OAIDeleteAttributesRequest::is_item_name_Valid() const{
    return m_item_name_isValid;
}

QList OAIDeleteAttributesRequest::getAttributes() const {
    return m_attributes;
}
void OAIDeleteAttributesRequest::setAttributes(const QList &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIDeleteAttributesRequest::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIDeleteAttributesRequest::is_attributes_Valid() const{
    return m_attributes_isValid;
}

OAIDeleteAttributesRequest_Expected OAIDeleteAttributesRequest::getExpected() const {
    return m_expected;
}
void OAIDeleteAttributesRequest::setExpected(const OAIDeleteAttributesRequest_Expected &expected) {
    m_expected = expected;
    m_expected_isSet = true;
}

bool OAIDeleteAttributesRequest::is_expected_Set() const{
    return m_expected_isSet;
}

bool OAIDeleteAttributesRequest::is_expected_Valid() const{
    return m_expected_isValid;
}

bool OAIDeleteAttributesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteAttributesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_name_isValid && m_item_name_isValid && true;
}

} // namespace OpenAPI
