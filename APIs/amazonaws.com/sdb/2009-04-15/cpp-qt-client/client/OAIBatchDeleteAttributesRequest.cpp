/**
 * Amazon SimpleDB
 * Amazon SimpleDB is a web service providing the core database functions of data indexing and querying in the cloud. By offloading the time and effort associated with building and operating a web-scale database, SimpleDB provides developers the freedom to focus on application development. <p> A traditional, clustered relational database requires a sizable upfront capital outlay, is complex to design, and often requires extensive and repetitive database administration. Amazon SimpleDB is dramatically simpler, requiring no schema, automatically indexing your data and providing a simple API for storage and access. This approach eliminates the administrative burden of data modeling, index maintenance, and performance tuning. Developers gain access to this functionality within Amazon's proven computing environment, are able to scale instantly, and pay only for what they use. </p> <p> Visit <a href=\"http://aws.amazon.com/simpledb/\">http://aws.amazon.com/simpledb/</a> for more information. </p>
 *
 * The version of the OpenAPI document: 2009-04-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchDeleteAttributesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchDeleteAttributesRequest::OAIBatchDeleteAttributesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchDeleteAttributesRequest::OAIBatchDeleteAttributesRequest() {
    this->initializeModel();
}

OAIBatchDeleteAttributesRequest::~OAIBatchDeleteAttributesRequest() {}

void OAIBatchDeleteAttributesRequest::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;
}

void OAIBatchDeleteAttributesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchDeleteAttributesRequest::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("Items")]);
    m_items_isSet = !json[QString("Items")].isNull() && m_items_isValid;
}

QString OAIBatchDeleteAttributesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchDeleteAttributesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_items.isSet()) {
        obj.insert(QString("Items"), ::OpenAPI::toJsonValue(m_items));
    }
    return obj;
}

QString OAIBatchDeleteAttributesRequest::getDomainName() const {
    return m_domain_name;
}
void OAIBatchDeleteAttributesRequest::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIBatchDeleteAttributesRequest::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIBatchDeleteAttributesRequest::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QList OAIBatchDeleteAttributesRequest::getItems() const {
    return m_items;
}
void OAIBatchDeleteAttributesRequest::setItems(const QList &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIBatchDeleteAttributesRequest::is_items_Set() const{
    return m_items_isSet;
}

bool OAIBatchDeleteAttributesRequest::is_items_Valid() const{
    return m_items_isValid;
}

bool OAIBatchDeleteAttributesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchDeleteAttributesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_name_isValid && m_items_isValid && true;
}

} // namespace OpenAPI
