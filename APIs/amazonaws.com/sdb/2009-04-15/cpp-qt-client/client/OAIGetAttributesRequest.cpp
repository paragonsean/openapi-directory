/**
 * Amazon SimpleDB
 * Amazon SimpleDB is a web service providing the core database functions of data indexing and querying in the cloud. By offloading the time and effort associated with building and operating a web-scale database, SimpleDB provides developers the freedom to focus on application development. <p> A traditional, clustered relational database requires a sizable upfront capital outlay, is complex to design, and often requires extensive and repetitive database administration. Amazon SimpleDB is dramatically simpler, requiring no schema, automatically indexing your data and providing a simple API for storage and access. This approach eliminates the administrative burden of data modeling, index maintenance, and performance tuning. Developers gain access to this functionality within Amazon's proven computing environment, are able to scale instantly, and pay only for what they use. </p> <p> Visit <a href=\"http://aws.amazon.com/simpledb/\">http://aws.amazon.com/simpledb/</a> for more information. </p>
 *
 * The version of the OpenAPI document: 2009-04-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAttributesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAttributesRequest::OAIGetAttributesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAttributesRequest::OAIGetAttributesRequest() {
    this->initializeModel();
}

OAIGetAttributesRequest::~OAIGetAttributesRequest() {}

void OAIGetAttributesRequest::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_item_name_isSet = false;
    m_item_name_isValid = false;

    m_attribute_names_isSet = false;
    m_attribute_names_isValid = false;

    m_consistent_read_isSet = false;
    m_consistent_read_isValid = false;
}

void OAIGetAttributesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAttributesRequest::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_item_name_isValid = ::OpenAPI::fromJsonValue(m_item_name, json[QString("ItemName")]);
    m_item_name_isSet = !json[QString("ItemName")].isNull() && m_item_name_isValid;

    m_attribute_names_isValid = ::OpenAPI::fromJsonValue(m_attribute_names, json[QString("AttributeNames")]);
    m_attribute_names_isSet = !json[QString("AttributeNames")].isNull() && m_attribute_names_isValid;

    m_consistent_read_isValid = ::OpenAPI::fromJsonValue(m_consistent_read, json[QString("ConsistentRead")]);
    m_consistent_read_isSet = !json[QString("ConsistentRead")].isNull() && m_consistent_read_isValid;
}

QString OAIGetAttributesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAttributesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_item_name_isSet) {
        obj.insert(QString("ItemName"), ::OpenAPI::toJsonValue(m_item_name));
    }
    if (m_attribute_names.isSet()) {
        obj.insert(QString("AttributeNames"), ::OpenAPI::toJsonValue(m_attribute_names));
    }
    if (m_consistent_read_isSet) {
        obj.insert(QString("ConsistentRead"), ::OpenAPI::toJsonValue(m_consistent_read));
    }
    return obj;
}

QString OAIGetAttributesRequest::getDomainName() const {
    return m_domain_name;
}
void OAIGetAttributesRequest::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIGetAttributesRequest::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIGetAttributesRequest::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QString OAIGetAttributesRequest::getItemName() const {
    return m_item_name;
}
void OAIGetAttributesRequest::setItemName(const QString &item_name) {
    m_item_name = item_name;
    m_item_name_isSet = true;
}

bool OAIGetAttributesRequest::is_item_name_Set() const{
    return m_item_name_isSet;
}

bool OAIGetAttributesRequest::is_item_name_Valid() const{
    return m_item_name_isValid;
}

QList OAIGetAttributesRequest::getAttributeNames() const {
    return m_attribute_names;
}
void OAIGetAttributesRequest::setAttributeNames(const QList &attribute_names) {
    m_attribute_names = attribute_names;
    m_attribute_names_isSet = true;
}

bool OAIGetAttributesRequest::is_attribute_names_Set() const{
    return m_attribute_names_isSet;
}

bool OAIGetAttributesRequest::is_attribute_names_Valid() const{
    return m_attribute_names_isValid;
}

bool OAIGetAttributesRequest::getConsistentRead() const {
    return m_consistent_read;
}
void OAIGetAttributesRequest::setConsistentRead(const bool &consistent_read) {
    m_consistent_read = consistent_read;
    m_consistent_read_isSet = true;
}

bool OAIGetAttributesRequest::is_consistent_read_Set() const{
    return m_consistent_read_isSet;
}

bool OAIGetAttributesRequest::is_consistent_read_Valid() const{
    return m_consistent_read_isValid;
}

bool OAIGetAttributesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_consistent_read_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAttributesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_name_isValid && m_item_name_isValid && true;
}

} // namespace OpenAPI
