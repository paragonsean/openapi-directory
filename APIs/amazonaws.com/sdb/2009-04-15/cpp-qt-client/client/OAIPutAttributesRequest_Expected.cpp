/**
 * Amazon SimpleDB
 * Amazon SimpleDB is a web service providing the core database functions of data indexing and querying in the cloud. By offloading the time and effort associated with building and operating a web-scale database, SimpleDB provides developers the freedom to focus on application development. <p> A traditional, clustered relational database requires a sizable upfront capital outlay, is complex to design, and often requires extensive and repetitive database administration. Amazon SimpleDB is dramatically simpler, requiring no schema, automatically indexing your data and providing a simple API for storage and access. This approach eliminates the administrative burden of data modeling, index maintenance, and performance tuning. Developers gain access to this functionality within Amazon's proven computing environment, are able to scale instantly, and pay only for what they use. </p> <p> Visit <a href=\"http://aws.amazon.com/simpledb/\">http://aws.amazon.com/simpledb/</a> for more information. </p>
 *
 * The version of the OpenAPI document: 2009-04-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutAttributesRequest_Expected.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutAttributesRequest_Expected::OAIPutAttributesRequest_Expected(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutAttributesRequest_Expected::OAIPutAttributesRequest_Expected() {
    this->initializeModel();
}

OAIPutAttributesRequest_Expected::~OAIPutAttributesRequest_Expected() {}

void OAIPutAttributesRequest_Expected::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_exists_isSet = false;
    m_exists_isValid = false;
}

void OAIPutAttributesRequest_Expected::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutAttributesRequest_Expected::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_exists_isValid = ::OpenAPI::fromJsonValue(m_exists, json[QString("Exists")]);
    m_exists_isSet = !json[QString("Exists")].isNull() && m_exists_isValid;
}

QString OAIPutAttributesRequest_Expected::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutAttributesRequest_Expected::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_exists_isSet) {
        obj.insert(QString("Exists"), ::OpenAPI::toJsonValue(m_exists));
    }
    return obj;
}

QString OAIPutAttributesRequest_Expected::getName() const {
    return m_name;
}
void OAIPutAttributesRequest_Expected::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPutAttributesRequest_Expected::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPutAttributesRequest_Expected::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPutAttributesRequest_Expected::getValue() const {
    return m_value;
}
void OAIPutAttributesRequest_Expected::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIPutAttributesRequest_Expected::is_value_Set() const{
    return m_value_isSet;
}

bool OAIPutAttributesRequest_Expected::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIPutAttributesRequest_Expected::getExists() const {
    return m_exists;
}
void OAIPutAttributesRequest_Expected::setExists(const bool &exists) {
    m_exists = exists;
    m_exists_isSet = true;
}

bool OAIPutAttributesRequest_Expected::is_exists_Set() const{
    return m_exists_isSet;
}

bool OAIPutAttributesRequest_Expected::is_exists_Valid() const{
    return m_exists_isValid;
}

bool OAIPutAttributesRequest_Expected::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exists_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutAttributesRequest_Expected::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
