/**
 * Amazon SimpleDB
 * Amazon SimpleDB is a web service providing the core database functions of data indexing and querying in the cloud. By offloading the time and effort associated with building and operating a web-scale database, SimpleDB provides developers the freedom to focus on application development. <p> A traditional, clustered relational database requires a sizable upfront capital outlay, is complex to design, and often requires extensive and repetitive database administration. Amazon SimpleDB is dramatically simpler, requiring no schema, automatically indexing your data and providing a simple API for storage and access. This approach eliminates the administrative burden of data modeling, index maintenance, and performance tuning. Developers gain access to this functionality within Amazon's proven computing environment, are able to scale instantly, and pay only for what they use. </p> <p> Visit <a href=\"http://aws.amazon.com/simpledb/\">http://aws.amazon.com/simpledb/</a> for more information. </p>
 *
 * The version of the OpenAPI document: 2009-04-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttribute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttribute::OAIAttribute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttribute::OAIAttribute() {
    this->initializeModel();
}

OAIAttribute::~OAIAttribute() {}

void OAIAttribute::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_alternate_name_encoding_isSet = false;
    m_alternate_name_encoding_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_alternate_value_encoding_isSet = false;
    m_alternate_value_encoding_isValid = false;
}

void OAIAttribute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttribute::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_alternate_name_encoding_isValid = ::OpenAPI::fromJsonValue(m_alternate_name_encoding, json[QString("AlternateNameEncoding")]);
    m_alternate_name_encoding_isSet = !json[QString("AlternateNameEncoding")].isNull() && m_alternate_name_encoding_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_alternate_value_encoding_isValid = ::OpenAPI::fromJsonValue(m_alternate_value_encoding, json[QString("AlternateValueEncoding")]);
    m_alternate_value_encoding_isSet = !json[QString("AlternateValueEncoding")].isNull() && m_alternate_value_encoding_isValid;
}

QString OAIAttribute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttribute::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_alternate_name_encoding_isSet) {
        obj.insert(QString("AlternateNameEncoding"), ::OpenAPI::toJsonValue(m_alternate_name_encoding));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_alternate_value_encoding_isSet) {
        obj.insert(QString("AlternateValueEncoding"), ::OpenAPI::toJsonValue(m_alternate_value_encoding));
    }
    return obj;
}

QString OAIAttribute::getName() const {
    return m_name;
}
void OAIAttribute::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAttribute::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAttribute::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAttribute::getAlternateNameEncoding() const {
    return m_alternate_name_encoding;
}
void OAIAttribute::setAlternateNameEncoding(const QString &alternate_name_encoding) {
    m_alternate_name_encoding = alternate_name_encoding;
    m_alternate_name_encoding_isSet = true;
}

bool OAIAttribute::is_alternate_name_encoding_Set() const{
    return m_alternate_name_encoding_isSet;
}

bool OAIAttribute::is_alternate_name_encoding_Valid() const{
    return m_alternate_name_encoding_isValid;
}

QString OAIAttribute::getValue() const {
    return m_value;
}
void OAIAttribute::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIAttribute::is_value_Set() const{
    return m_value_isSet;
}

bool OAIAttribute::is_value_Valid() const{
    return m_value_isValid;
}

QString OAIAttribute::getAlternateValueEncoding() const {
    return m_alternate_value_encoding;
}
void OAIAttribute::setAlternateValueEncoding(const QString &alternate_value_encoding) {
    m_alternate_value_encoding = alternate_value_encoding;
    m_alternate_value_encoding_isSet = true;
}

bool OAIAttribute::is_alternate_value_encoding_Set() const{
    return m_alternate_value_encoding_isSet;
}

bool OAIAttribute::is_alternate_value_encoding_Valid() const{
    return m_alternate_value_encoding_isValid;
}

bool OAIAttribute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternate_name_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternate_value_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttribute::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
