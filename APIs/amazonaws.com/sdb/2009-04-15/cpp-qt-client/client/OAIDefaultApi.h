/**
 * Amazon SimpleDB
 * Amazon SimpleDB is a web service providing the core database functions of data indexing and querying in the cloud. By offloading the time and effort associated with building and operating a web-scale database, SimpleDB provides developers the freedom to focus on application development. <p> A traditional, clustered relational database requires a sizable upfront capital outlay, is complex to design, and often requires extensive and repetitive database administration. Amazon SimpleDB is dramatically simpler, requiring no schema, automatically indexing your data and providing a simple API for storage and access. This approach eliminates the administrative burden of data modeling, index maintenance, and performance tuning. Developers gain access to this functionality within Amazon's proven computing environment, are able to scale instantly, and pay only for what they use. </p> <p> Visit <a href=\"http://aws.amazon.com/simpledb/\">http://aws.amazon.com/simpledb/</a> for more information. </p>
 *
 * The version of the OpenAPI document: 2009-04-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAttributeDoesNotExist.h"
#include "OAIBatchDeleteAttributesRequest.h"
#include "OAIBatchPutAttributesRequest.h"
#include "OAICreateDomainRequest.h"
#include "OAIDeleteAttributesRequest.h"
#include "OAIDeleteDomainRequest.h"
#include "OAIDomainMetadataRequest.h"
#include "OAIDomainMetadataResult.h"
#include "OAIGET_BatchDeleteAttributes_Items_parameter_inner.h"
#include "OAIGET_BatchPutAttributes_Items_parameter_inner.h"
#include "OAIGET_DeleteAttributes_Attributes_parameter_inner.h"
#include "OAIGET_DeleteAttributes_Expected_parameter.h"
#include "OAIGET_PutAttributes_Attributes_parameter_inner.h"
#include "OAIGetAttributesRequest.h"
#include "OAIGetAttributesResult.h"
#include "OAIInvalidNextToken.h"
#include "OAIListDomainsRequest.h"
#include "OAIListDomainsResult.h"
#include "OAIMissingParameter.h"
#include "OAINoSuchDomain.h"
#include "OAINumberDomainsExceeded.h"
#include "OAINumberItemAttributesExceeded.h"
#include "OAINumberSubmittedAttributesExceeded.h"
#include "OAIPutAttributesRequest.h"
#include "OAIRequestTimeout.h"
#include "OAISelectRequest.h"
#include "OAISelectResult.h"
#include "OAITooManyRequestedAttributes.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  aws_access_key_id QString [required]
    * @param[in]  signature_method QString [required]
    * @param[in]  signature_version QString [required]
    * @param[in]  timestamp QString [required]
    * @param[in]  signature QString [required]
    * @param[in]  domain_name QString [required]
    * @param[in]  items QList<OAIGET_BatchDeleteAttributes_Items_parameter_inner> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    */
    virtual void gETBatchDeleteAttributes(const QString &aws_access_key_id, const QString &signature_method, const QString &signature_version, const QString &timestamp, const QString &signature, const QString &domain_name, const QList<OAIGET_BatchDeleteAttributes_Items_parameter_inner> &items, const QString &action, const QString &version);

    /**
    * @param[in]  aws_access_key_id QString [required]
    * @param[in]  signature_method QString [required]
    * @param[in]  signature_version QString [required]
    * @param[in]  timestamp QString [required]
    * @param[in]  signature QString [required]
    * @param[in]  domain_name QString [required]
    * @param[in]  items QList<OAIGET_BatchPutAttributes_Items_parameter_inner> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    */
    virtual void gETBatchPutAttributes(const QString &aws_access_key_id, const QString &signature_method, const QString &signature_version, const QString &timestamp, const QString &signature, const QString &domain_name, const QList<OAIGET_BatchPutAttributes_Items_parameter_inner> &items, const QString &action, const QString &version);

    /**
    * @param[in]  aws_access_key_id QString [required]
    * @param[in]  signature_method QString [required]
    * @param[in]  signature_version QString [required]
    * @param[in]  timestamp QString [required]
    * @param[in]  signature QString [required]
    * @param[in]  domain_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    */
    virtual void gETCreateDomain(const QString &aws_access_key_id, const QString &signature_method, const QString &signature_version, const QString &timestamp, const QString &signature, const QString &domain_name, const QString &action, const QString &version);

    /**
    * @param[in]  aws_access_key_id QString [required]
    * @param[in]  signature_method QString [required]
    * @param[in]  signature_version QString [required]
    * @param[in]  timestamp QString [required]
    * @param[in]  signature QString [required]
    * @param[in]  domain_name QString [required]
    * @param[in]  item_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  attributes QList<OAIGET_DeleteAttributes_Attributes_parameter_inner> [optional]
    * @param[in]  expected OAIGET_DeleteAttributes_Expected_parameter [optional]
    */
    virtual void gETDeleteAttributes(const QString &aws_access_key_id, const QString &signature_method, const QString &signature_version, const QString &timestamp, const QString &signature, const QString &domain_name, const QString &item_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QList<OAIGET_DeleteAttributes_Attributes_parameter_inner>> &attributes = ::OpenAPI::OptionalParam<QList<OAIGET_DeleteAttributes_Attributes_parameter_inner>>(), const ::OpenAPI::OptionalParam<OAIGET_DeleteAttributes_Expected_parameter> &expected = ::OpenAPI::OptionalParam<OAIGET_DeleteAttributes_Expected_parameter>());

    /**
    * @param[in]  aws_access_key_id QString [required]
    * @param[in]  signature_method QString [required]
    * @param[in]  signature_version QString [required]
    * @param[in]  timestamp QString [required]
    * @param[in]  signature QString [required]
    * @param[in]  domain_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    */
    virtual void gETDeleteDomain(const QString &aws_access_key_id, const QString &signature_method, const QString &signature_version, const QString &timestamp, const QString &signature, const QString &domain_name, const QString &action, const QString &version);

    /**
    * @param[in]  aws_access_key_id QString [required]
    * @param[in]  signature_method QString [required]
    * @param[in]  signature_version QString [required]
    * @param[in]  timestamp QString [required]
    * @param[in]  signature QString [required]
    * @param[in]  domain_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    */
    virtual void gETDomainMetadata(const QString &aws_access_key_id, const QString &signature_method, const QString &signature_version, const QString &timestamp, const QString &signature, const QString &domain_name, const QString &action, const QString &version);

    /**
    * @param[in]  aws_access_key_id QString [required]
    * @param[in]  signature_method QString [required]
    * @param[in]  signature_version QString [required]
    * @param[in]  timestamp QString [required]
    * @param[in]  signature QString [required]
    * @param[in]  domain_name QString [required]
    * @param[in]  item_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  attribute_names QList<QString> [optional]
    * @param[in]  consistent_read bool [optional]
    */
    virtual void gETGetAttributes(const QString &aws_access_key_id, const QString &signature_method, const QString &signature_version, const QString &timestamp, const QString &signature, const QString &domain_name, const QString &item_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QList<QString>> &attribute_names = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &consistent_read = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  aws_access_key_id QString [required]
    * @param[in]  signature_method QString [required]
    * @param[in]  signature_version QString [required]
    * @param[in]  timestamp QString [required]
    * @param[in]  signature QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  max_number_of_domains qint32 [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void gETListDomains(const QString &aws_access_key_id, const QString &signature_method, const QString &signature_version, const QString &timestamp, const QString &signature, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<qint32> &max_number_of_domains = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_access_key_id QString [required]
    * @param[in]  signature_method QString [required]
    * @param[in]  signature_version QString [required]
    * @param[in]  timestamp QString [required]
    * @param[in]  signature QString [required]
    * @param[in]  domain_name QString [required]
    * @param[in]  item_name QString [required]
    * @param[in]  attributes QList<OAIGET_PutAttributes_Attributes_parameter_inner> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  expected OAIGET_DeleteAttributes_Expected_parameter [optional]
    */
    virtual void gETPutAttributes(const QString &aws_access_key_id, const QString &signature_method, const QString &signature_version, const QString &timestamp, const QString &signature, const QString &domain_name, const QString &item_name, const QList<OAIGET_PutAttributes_Attributes_parameter_inner> &attributes, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<OAIGET_DeleteAttributes_Expected_parameter> &expected = ::OpenAPI::OptionalParam<OAIGET_DeleteAttributes_Expected_parameter>());

    /**
    * @param[in]  aws_access_key_id QString [required]
    * @param[in]  signature_method QString [required]
    * @param[in]  signature_version QString [required]
    * @param[in]  timestamp QString [required]
    * @param[in]  signature QString [required]
    * @param[in]  select_expression QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  next_token QString [optional]
    * @param[in]  consistent_read bool [optional]
    */
    virtual void gETSelect(const QString &aws_access_key_id, const QString &signature_method, const QString &signature_version, const QString &timestamp, const QString &signature, const QString &select_expression, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &consistent_read = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  aws_access_key_id QString [required]
    * @param[in]  signature_method QString [required]
    * @param[in]  signature_version QString [required]
    * @param[in]  timestamp QString [required]
    * @param[in]  signature QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  oai_batch_delete_attributes_request OAIBatchDeleteAttributesRequest [optional]
    */
    virtual void pOSTBatchDeleteAttributes(const QString &aws_access_key_id, const QString &signature_method, const QString &signature_version, const QString &timestamp, const QString &signature, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<OAIBatchDeleteAttributesRequest> &oai_batch_delete_attributes_request = ::OpenAPI::OptionalParam<OAIBatchDeleteAttributesRequest>());

    /**
    * @param[in]  aws_access_key_id QString [required]
    * @param[in]  signature_method QString [required]
    * @param[in]  signature_version QString [required]
    * @param[in]  timestamp QString [required]
    * @param[in]  signature QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  oai_batch_put_attributes_request OAIBatchPutAttributesRequest [optional]
    */
    virtual void pOSTBatchPutAttributes(const QString &aws_access_key_id, const QString &signature_method, const QString &signature_version, const QString &timestamp, const QString &signature, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<OAIBatchPutAttributesRequest> &oai_batch_put_attributes_request = ::OpenAPI::OptionalParam<OAIBatchPutAttributesRequest>());

    /**
    * @param[in]  aws_access_key_id QString [required]
    * @param[in]  signature_method QString [required]
    * @param[in]  signature_version QString [required]
    * @param[in]  timestamp QString [required]
    * @param[in]  signature QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  oai_create_domain_request OAICreateDomainRequest [optional]
    */
    virtual void pOSTCreateDomain(const QString &aws_access_key_id, const QString &signature_method, const QString &signature_version, const QString &timestamp, const QString &signature, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<OAICreateDomainRequest> &oai_create_domain_request = ::OpenAPI::OptionalParam<OAICreateDomainRequest>());

    /**
    * @param[in]  aws_access_key_id QString [required]
    * @param[in]  signature_method QString [required]
    * @param[in]  signature_version QString [required]
    * @param[in]  timestamp QString [required]
    * @param[in]  signature QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  oai_delete_attributes_request OAIDeleteAttributesRequest [optional]
    */
    virtual void pOSTDeleteAttributes(const QString &aws_access_key_id, const QString &signature_method, const QString &signature_version, const QString &timestamp, const QString &signature, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<OAIDeleteAttributesRequest> &oai_delete_attributes_request = ::OpenAPI::OptionalParam<OAIDeleteAttributesRequest>());

    /**
    * @param[in]  aws_access_key_id QString [required]
    * @param[in]  signature_method QString [required]
    * @param[in]  signature_version QString [required]
    * @param[in]  timestamp QString [required]
    * @param[in]  signature QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  oai_delete_domain_request OAIDeleteDomainRequest [optional]
    */
    virtual void pOSTDeleteDomain(const QString &aws_access_key_id, const QString &signature_method, const QString &signature_version, const QString &timestamp, const QString &signature, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<OAIDeleteDomainRequest> &oai_delete_domain_request = ::OpenAPI::OptionalParam<OAIDeleteDomainRequest>());

    /**
    * @param[in]  aws_access_key_id QString [required]
    * @param[in]  signature_method QString [required]
    * @param[in]  signature_version QString [required]
    * @param[in]  timestamp QString [required]
    * @param[in]  signature QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  oai_domain_metadata_request OAIDomainMetadataRequest [optional]
    */
    virtual void pOSTDomainMetadata(const QString &aws_access_key_id, const QString &signature_method, const QString &signature_version, const QString &timestamp, const QString &signature, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<OAIDomainMetadataRequest> &oai_domain_metadata_request = ::OpenAPI::OptionalParam<OAIDomainMetadataRequest>());

    /**
    * @param[in]  aws_access_key_id QString [required]
    * @param[in]  signature_method QString [required]
    * @param[in]  signature_version QString [required]
    * @param[in]  timestamp QString [required]
    * @param[in]  signature QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  oai_get_attributes_request OAIGetAttributesRequest [optional]
    */
    virtual void pOSTGetAttributes(const QString &aws_access_key_id, const QString &signature_method, const QString &signature_version, const QString &timestamp, const QString &signature, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<OAIGetAttributesRequest> &oai_get_attributes_request = ::OpenAPI::OptionalParam<OAIGetAttributesRequest>());

    /**
    * @param[in]  aws_access_key_id QString [required]
    * @param[in]  signature_method QString [required]
    * @param[in]  signature_version QString [required]
    * @param[in]  timestamp QString [required]
    * @param[in]  signature QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  max_number_of_domains QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_list_domains_request OAIListDomainsRequest [optional]
    */
    virtual void pOSTListDomains(const QString &aws_access_key_id, const QString &signature_method, const QString &signature_version, const QString &timestamp, const QString &signature, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &max_number_of_domains = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIListDomainsRequest> &oai_list_domains_request = ::OpenAPI::OptionalParam<OAIListDomainsRequest>());

    /**
    * @param[in]  aws_access_key_id QString [required]
    * @param[in]  signature_method QString [required]
    * @param[in]  signature_version QString [required]
    * @param[in]  timestamp QString [required]
    * @param[in]  signature QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  oai_put_attributes_request OAIPutAttributesRequest [optional]
    */
    virtual void pOSTPutAttributes(const QString &aws_access_key_id, const QString &signature_method, const QString &signature_version, const QString &timestamp, const QString &signature, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<OAIPutAttributesRequest> &oai_put_attributes_request = ::OpenAPI::OptionalParam<OAIPutAttributesRequest>());

    /**
    * @param[in]  aws_access_key_id QString [required]
    * @param[in]  signature_method QString [required]
    * @param[in]  signature_version QString [required]
    * @param[in]  timestamp QString [required]
    * @param[in]  signature QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_select_request OAISelectRequest [optional]
    */
    virtual void pOSTSelect(const QString &aws_access_key_id, const QString &signature_method, const QString &signature_version, const QString &timestamp, const QString &signature, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISelectRequest> &oai_select_request = ::OpenAPI::OptionalParam<OAISelectRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void gETBatchDeleteAttributesCallback(OAIHttpRequestWorker *worker);
    void gETBatchPutAttributesCallback(OAIHttpRequestWorker *worker);
    void gETCreateDomainCallback(OAIHttpRequestWorker *worker);
    void gETDeleteAttributesCallback(OAIHttpRequestWorker *worker);
    void gETDeleteDomainCallback(OAIHttpRequestWorker *worker);
    void gETDomainMetadataCallback(OAIHttpRequestWorker *worker);
    void gETGetAttributesCallback(OAIHttpRequestWorker *worker);
    void gETListDomainsCallback(OAIHttpRequestWorker *worker);
    void gETPutAttributesCallback(OAIHttpRequestWorker *worker);
    void gETSelectCallback(OAIHttpRequestWorker *worker);
    void pOSTBatchDeleteAttributesCallback(OAIHttpRequestWorker *worker);
    void pOSTBatchPutAttributesCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateDomainCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteAttributesCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteDomainCallback(OAIHttpRequestWorker *worker);
    void pOSTDomainMetadataCallback(OAIHttpRequestWorker *worker);
    void pOSTGetAttributesCallback(OAIHttpRequestWorker *worker);
    void pOSTListDomainsCallback(OAIHttpRequestWorker *worker);
    void pOSTPutAttributesCallback(OAIHttpRequestWorker *worker);
    void pOSTSelectCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void gETBatchDeleteAttributesSignal();
    void gETBatchPutAttributesSignal();
    void gETCreateDomainSignal();
    void gETDeleteAttributesSignal();
    void gETDeleteDomainSignal();
    void gETDomainMetadataSignal(OAIDomainMetadataResult summary);
    void gETGetAttributesSignal(OAIGetAttributesResult summary);
    void gETListDomainsSignal(OAIListDomainsResult summary);
    void gETPutAttributesSignal();
    void gETSelectSignal(OAISelectResult summary);
    void pOSTBatchDeleteAttributesSignal();
    void pOSTBatchPutAttributesSignal();
    void pOSTCreateDomainSignal();
    void pOSTDeleteAttributesSignal();
    void pOSTDeleteDomainSignal();
    void pOSTDomainMetadataSignal(OAIDomainMetadataResult summary);
    void pOSTGetAttributesSignal(OAIGetAttributesResult summary);
    void pOSTListDomainsSignal(OAIListDomainsResult summary);
    void pOSTPutAttributesSignal();
    void pOSTSelectSignal(OAISelectResult summary);


    void gETBatchDeleteAttributesSignalFull(OAIHttpRequestWorker *worker);
    void gETBatchPutAttributesSignalFull(OAIHttpRequestWorker *worker);
    void gETCreateDomainSignalFull(OAIHttpRequestWorker *worker);
    void gETDeleteAttributesSignalFull(OAIHttpRequestWorker *worker);
    void gETDeleteDomainSignalFull(OAIHttpRequestWorker *worker);
    void gETDomainMetadataSignalFull(OAIHttpRequestWorker *worker, OAIDomainMetadataResult summary);
    void gETGetAttributesSignalFull(OAIHttpRequestWorker *worker, OAIGetAttributesResult summary);
    void gETListDomainsSignalFull(OAIHttpRequestWorker *worker, OAIListDomainsResult summary);
    void gETPutAttributesSignalFull(OAIHttpRequestWorker *worker);
    void gETSelectSignalFull(OAIHttpRequestWorker *worker, OAISelectResult summary);
    void pOSTBatchDeleteAttributesSignalFull(OAIHttpRequestWorker *worker);
    void pOSTBatchPutAttributesSignalFull(OAIHttpRequestWorker *worker);
    void pOSTCreateDomainSignalFull(OAIHttpRequestWorker *worker);
    void pOSTDeleteAttributesSignalFull(OAIHttpRequestWorker *worker);
    void pOSTDeleteDomainSignalFull(OAIHttpRequestWorker *worker);
    void pOSTDomainMetadataSignalFull(OAIHttpRequestWorker *worker, OAIDomainMetadataResult summary);
    void pOSTGetAttributesSignalFull(OAIHttpRequestWorker *worker, OAIGetAttributesResult summary);
    void pOSTListDomainsSignalFull(OAIHttpRequestWorker *worker, OAIListDomainsResult summary);
    void pOSTPutAttributesSignalFull(OAIHttpRequestWorker *worker);
    void pOSTSelectSignalFull(OAIHttpRequestWorker *worker, OAISelectResult summary);

    Q_DECL_DEPRECATED_X("Use gETBatchDeleteAttributesSignalError() instead")
    void gETBatchDeleteAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETBatchDeleteAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETBatchPutAttributesSignalError() instead")
    void gETBatchPutAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETBatchPutAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateDomainSignalError() instead")
    void gETCreateDomainSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateDomainSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteAttributesSignalError() instead")
    void gETDeleteAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteDomainSignalError() instead")
    void gETDeleteDomainSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteDomainSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDomainMetadataSignalError() instead")
    void gETDomainMetadataSignalE(OAIDomainMetadataResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDomainMetadataSignalError(OAIDomainMetadataResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetAttributesSignalError() instead")
    void gETGetAttributesSignalE(OAIGetAttributesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetAttributesSignalError(OAIGetAttributesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListDomainsSignalError() instead")
    void gETListDomainsSignalE(OAIListDomainsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListDomainsSignalError(OAIListDomainsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPutAttributesSignalError() instead")
    void gETPutAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETPutAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSelectSignalError() instead")
    void gETSelectSignalE(OAISelectResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSelectSignalError(OAISelectResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTBatchDeleteAttributesSignalError() instead")
    void pOSTBatchDeleteAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTBatchDeleteAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTBatchPutAttributesSignalError() instead")
    void pOSTBatchPutAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTBatchPutAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateDomainSignalError() instead")
    void pOSTCreateDomainSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateDomainSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteAttributesSignalError() instead")
    void pOSTDeleteAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteDomainSignalError() instead")
    void pOSTDeleteDomainSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteDomainSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDomainMetadataSignalError() instead")
    void pOSTDomainMetadataSignalE(OAIDomainMetadataResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDomainMetadataSignalError(OAIDomainMetadataResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetAttributesSignalError() instead")
    void pOSTGetAttributesSignalE(OAIGetAttributesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetAttributesSignalError(OAIGetAttributesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListDomainsSignalError() instead")
    void pOSTListDomainsSignalE(OAIListDomainsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListDomainsSignalError(OAIListDomainsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPutAttributesSignalError() instead")
    void pOSTPutAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPutAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSelectSignalError() instead")
    void pOSTSelectSignalE(OAISelectResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSelectSignalError(OAISelectResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use gETBatchDeleteAttributesSignalErrorFull() instead")
    void gETBatchDeleteAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETBatchDeleteAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETBatchPutAttributesSignalErrorFull() instead")
    void gETBatchPutAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETBatchPutAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateDomainSignalErrorFull() instead")
    void gETCreateDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteAttributesSignalErrorFull() instead")
    void gETDeleteAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteDomainSignalErrorFull() instead")
    void gETDeleteDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDomainMetadataSignalErrorFull() instead")
    void gETDomainMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDomainMetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetAttributesSignalErrorFull() instead")
    void gETGetAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListDomainsSignalErrorFull() instead")
    void gETListDomainsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListDomainsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPutAttributesSignalErrorFull() instead")
    void gETPutAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETPutAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSelectSignalErrorFull() instead")
    void gETSelectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSelectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTBatchDeleteAttributesSignalErrorFull() instead")
    void pOSTBatchDeleteAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTBatchDeleteAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTBatchPutAttributesSignalErrorFull() instead")
    void pOSTBatchPutAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTBatchPutAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateDomainSignalErrorFull() instead")
    void pOSTCreateDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteAttributesSignalErrorFull() instead")
    void pOSTDeleteAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteDomainSignalErrorFull() instead")
    void pOSTDeleteDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDomainMetadataSignalErrorFull() instead")
    void pOSTDomainMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDomainMetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetAttributesSignalErrorFull() instead")
    void pOSTGetAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListDomainsSignalErrorFull() instead")
    void pOSTListDomainsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListDomainsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPutAttributesSignalErrorFull() instead")
    void pOSTPutAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPutAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSelectSignalErrorFull() instead")
    void pOSTSelectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSelectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
