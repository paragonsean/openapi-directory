/**
 * Amazon SimpleDB
 * Amazon SimpleDB is a web service providing the core database functions of data indexing and querying in the cloud. By offloading the time and effort associated with building and operating a web-scale database, SimpleDB provides developers the freedom to focus on application development. <p> A traditional, clustered relational database requires a sizable upfront capital outlay, is complex to design, and often requires extensive and repetitive database administration. Amazon SimpleDB is dramatically simpler, requiring no schema, automatically indexing your data and providing a simple API for storage and access. This approach eliminates the administrative burden of data modeling, index maintenance, and performance tuning. Developers gain access to this functionality within Amazon's proven computing environment, are able to scale instantly, and pay only for what they use. </p> <p> Visit <a href=\"http://aws.amazon.com/simpledb/\">http://aws.amazon.com/simpledb/</a> for more information. </p>
 *
 * The version of the OpenAPI document: 2009-04-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISelectRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISelectRequest::OAISelectRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISelectRequest::OAISelectRequest() {
    this->initializeModel();
}

OAISelectRequest::~OAISelectRequest() {}

void OAISelectRequest::initializeModel() {

    m_select_expression_isSet = false;
    m_select_expression_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_consistent_read_isSet = false;
    m_consistent_read_isValid = false;
}

void OAISelectRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISelectRequest::fromJsonObject(QJsonObject json) {

    m_select_expression_isValid = ::OpenAPI::fromJsonValue(m_select_expression, json[QString("SelectExpression")]);
    m_select_expression_isSet = !json[QString("SelectExpression")].isNull() && m_select_expression_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_consistent_read_isValid = ::OpenAPI::fromJsonValue(m_consistent_read, json[QString("ConsistentRead")]);
    m_consistent_read_isSet = !json[QString("ConsistentRead")].isNull() && m_consistent_read_isValid;
}

QString OAISelectRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISelectRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_select_expression_isSet) {
        obj.insert(QString("SelectExpression"), ::OpenAPI::toJsonValue(m_select_expression));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_consistent_read_isSet) {
        obj.insert(QString("ConsistentRead"), ::OpenAPI::toJsonValue(m_consistent_read));
    }
    return obj;
}

QString OAISelectRequest::getSelectExpression() const {
    return m_select_expression;
}
void OAISelectRequest::setSelectExpression(const QString &select_expression) {
    m_select_expression = select_expression;
    m_select_expression_isSet = true;
}

bool OAISelectRequest::is_select_expression_Set() const{
    return m_select_expression_isSet;
}

bool OAISelectRequest::is_select_expression_Valid() const{
    return m_select_expression_isValid;
}

QString OAISelectRequest::getNextToken() const {
    return m_next_token;
}
void OAISelectRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAISelectRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAISelectRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAISelectRequest::getConsistentRead() const {
    return m_consistent_read;
}
void OAISelectRequest::setConsistentRead(const bool &consistent_read) {
    m_consistent_read = consistent_read;
    m_consistent_read_isSet = true;
}

bool OAISelectRequest::is_consistent_read_Set() const{
    return m_consistent_read_isSet;
}

bool OAISelectRequest::is_consistent_read_Valid() const{
    return m_consistent_read_isValid;
}

bool OAISelectRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_select_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consistent_read_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISelectRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_select_expression_isValid && true;
}

} // namespace OpenAPI
