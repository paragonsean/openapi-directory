/**
 * Amazon SimpleDB
 * Amazon SimpleDB is a web service providing the core database functions of data indexing and querying in the cloud. By offloading the time and effort associated with building and operating a web-scale database, SimpleDB provides developers the freedom to focus on application development. <p> A traditional, clustered relational database requires a sizable upfront capital outlay, is complex to design, and often requires extensive and repetitive database administration. Amazon SimpleDB is dramatically simpler, requiring no schema, automatically indexing your data and providing a simple API for storage and access. This approach eliminates the administrative burden of data modeling, index maintenance, and performance tuning. Developers gain access to this functionality within Amazon's proven computing environment, are able to scale instantly, and pay only for what they use. </p> <p> Visit <a href=\"http://aws.amazon.com/simpledb/\">http://aws.amazon.com/simpledb/</a> for more information. </p>
 *
 * The version of the OpenAPI document: 2009-04-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomainMetadataResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomainMetadataResult::OAIDomainMetadataResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomainMetadataResult::OAIDomainMetadataResult() {
    this->initializeModel();
}

OAIDomainMetadataResult::~OAIDomainMetadataResult() {}

void OAIDomainMetadataResult::initializeModel() {

    m_item_count_isSet = false;
    m_item_count_isValid = false;

    m_item_names_size_bytes_isSet = false;
    m_item_names_size_bytes_isValid = false;

    m_attribute_name_count_isSet = false;
    m_attribute_name_count_isValid = false;

    m_attribute_names_size_bytes_isSet = false;
    m_attribute_names_size_bytes_isValid = false;

    m_attribute_value_count_isSet = false;
    m_attribute_value_count_isValid = false;

    m_attribute_values_size_bytes_isSet = false;
    m_attribute_values_size_bytes_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIDomainMetadataResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDomainMetadataResult::fromJsonObject(QJsonObject json) {

    m_item_count_isValid = ::OpenAPI::fromJsonValue(m_item_count, json[QString("ItemCount")]);
    m_item_count_isSet = !json[QString("ItemCount")].isNull() && m_item_count_isValid;

    m_item_names_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_item_names_size_bytes, json[QString("ItemNamesSizeBytes")]);
    m_item_names_size_bytes_isSet = !json[QString("ItemNamesSizeBytes")].isNull() && m_item_names_size_bytes_isValid;

    m_attribute_name_count_isValid = ::OpenAPI::fromJsonValue(m_attribute_name_count, json[QString("AttributeNameCount")]);
    m_attribute_name_count_isSet = !json[QString("AttributeNameCount")].isNull() && m_attribute_name_count_isValid;

    m_attribute_names_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_attribute_names_size_bytes, json[QString("AttributeNamesSizeBytes")]);
    m_attribute_names_size_bytes_isSet = !json[QString("AttributeNamesSizeBytes")].isNull() && m_attribute_names_size_bytes_isValid;

    m_attribute_value_count_isValid = ::OpenAPI::fromJsonValue(m_attribute_value_count, json[QString("AttributeValueCount")]);
    m_attribute_value_count_isSet = !json[QString("AttributeValueCount")].isNull() && m_attribute_value_count_isValid;

    m_attribute_values_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_attribute_values_size_bytes, json[QString("AttributeValuesSizeBytes")]);
    m_attribute_values_size_bytes_isSet = !json[QString("AttributeValuesSizeBytes")].isNull() && m_attribute_values_size_bytes_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("Timestamp")]);
    m_timestamp_isSet = !json[QString("Timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIDomainMetadataResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDomainMetadataResult::asJsonObject() const {
    QJsonObject obj;
    if (m_item_count_isSet) {
        obj.insert(QString("ItemCount"), ::OpenAPI::toJsonValue(m_item_count));
    }
    if (m_item_names_size_bytes_isSet) {
        obj.insert(QString("ItemNamesSizeBytes"), ::OpenAPI::toJsonValue(m_item_names_size_bytes));
    }
    if (m_attribute_name_count_isSet) {
        obj.insert(QString("AttributeNameCount"), ::OpenAPI::toJsonValue(m_attribute_name_count));
    }
    if (m_attribute_names_size_bytes_isSet) {
        obj.insert(QString("AttributeNamesSizeBytes"), ::OpenAPI::toJsonValue(m_attribute_names_size_bytes));
    }
    if (m_attribute_value_count_isSet) {
        obj.insert(QString("AttributeValueCount"), ::OpenAPI::toJsonValue(m_attribute_value_count));
    }
    if (m_attribute_values_size_bytes_isSet) {
        obj.insert(QString("AttributeValuesSizeBytes"), ::OpenAPI::toJsonValue(m_attribute_values_size_bytes));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("Timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

qint32 OAIDomainMetadataResult::getItemCount() const {
    return m_item_count;
}
void OAIDomainMetadataResult::setItemCount(const qint32 &item_count) {
    m_item_count = item_count;
    m_item_count_isSet = true;
}

bool OAIDomainMetadataResult::is_item_count_Set() const{
    return m_item_count_isSet;
}

bool OAIDomainMetadataResult::is_item_count_Valid() const{
    return m_item_count_isValid;
}

qint32 OAIDomainMetadataResult::getItemNamesSizeBytes() const {
    return m_item_names_size_bytes;
}
void OAIDomainMetadataResult::setItemNamesSizeBytes(const qint32 &item_names_size_bytes) {
    m_item_names_size_bytes = item_names_size_bytes;
    m_item_names_size_bytes_isSet = true;
}

bool OAIDomainMetadataResult::is_item_names_size_bytes_Set() const{
    return m_item_names_size_bytes_isSet;
}

bool OAIDomainMetadataResult::is_item_names_size_bytes_Valid() const{
    return m_item_names_size_bytes_isValid;
}

qint32 OAIDomainMetadataResult::getAttributeNameCount() const {
    return m_attribute_name_count;
}
void OAIDomainMetadataResult::setAttributeNameCount(const qint32 &attribute_name_count) {
    m_attribute_name_count = attribute_name_count;
    m_attribute_name_count_isSet = true;
}

bool OAIDomainMetadataResult::is_attribute_name_count_Set() const{
    return m_attribute_name_count_isSet;
}

bool OAIDomainMetadataResult::is_attribute_name_count_Valid() const{
    return m_attribute_name_count_isValid;
}

qint32 OAIDomainMetadataResult::getAttributeNamesSizeBytes() const {
    return m_attribute_names_size_bytes;
}
void OAIDomainMetadataResult::setAttributeNamesSizeBytes(const qint32 &attribute_names_size_bytes) {
    m_attribute_names_size_bytes = attribute_names_size_bytes;
    m_attribute_names_size_bytes_isSet = true;
}

bool OAIDomainMetadataResult::is_attribute_names_size_bytes_Set() const{
    return m_attribute_names_size_bytes_isSet;
}

bool OAIDomainMetadataResult::is_attribute_names_size_bytes_Valid() const{
    return m_attribute_names_size_bytes_isValid;
}

qint32 OAIDomainMetadataResult::getAttributeValueCount() const {
    return m_attribute_value_count;
}
void OAIDomainMetadataResult::setAttributeValueCount(const qint32 &attribute_value_count) {
    m_attribute_value_count = attribute_value_count;
    m_attribute_value_count_isSet = true;
}

bool OAIDomainMetadataResult::is_attribute_value_count_Set() const{
    return m_attribute_value_count_isSet;
}

bool OAIDomainMetadataResult::is_attribute_value_count_Valid() const{
    return m_attribute_value_count_isValid;
}

qint32 OAIDomainMetadataResult::getAttributeValuesSizeBytes() const {
    return m_attribute_values_size_bytes;
}
void OAIDomainMetadataResult::setAttributeValuesSizeBytes(const qint32 &attribute_values_size_bytes) {
    m_attribute_values_size_bytes = attribute_values_size_bytes;
    m_attribute_values_size_bytes_isSet = true;
}

bool OAIDomainMetadataResult::is_attribute_values_size_bytes_Set() const{
    return m_attribute_values_size_bytes_isSet;
}

bool OAIDomainMetadataResult::is_attribute_values_size_bytes_Valid() const{
    return m_attribute_values_size_bytes_isValid;
}

qint32 OAIDomainMetadataResult::getTimestamp() const {
    return m_timestamp;
}
void OAIDomainMetadataResult::setTimestamp(const qint32 &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIDomainMetadataResult::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIDomainMetadataResult::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIDomainMetadataResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_item_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_names_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_name_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_names_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_value_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_values_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDomainMetadataResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
