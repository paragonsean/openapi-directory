/**
 * Amazon SimpleDB
 * Amazon SimpleDB is a web service providing the core database functions of data indexing and querying in the cloud. By offloading the time and effort associated with building and operating a web-scale database, SimpleDB provides developers the freedom to focus on application development. <p> A traditional, clustered relational database requires a sizable upfront capital outlay, is complex to design, and often requires extensive and repetitive database administration. Amazon SimpleDB is dramatically simpler, requiring no schema, automatically indexing your data and providing a simple API for storage and access. This approach eliminates the administrative burden of data modeling, index maintenance, and performance tuning. Developers gain access to this functionality within Amazon's proven computing environment, are able to scale instantly, and pay only for what they use. </p> <p> Visit <a href=\"http://aws.amazon.com/simpledb/\">http://aws.amazon.com/simpledb/</a> for more information. </p>
 *
 * The version of the OpenAPI document: 2009-04-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListDomainsResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListDomainsResult::OAIListDomainsResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListDomainsResult::OAIListDomainsResult() {
    this->initializeModel();
}

OAIListDomainsResult::~OAIListDomainsResult() {}

void OAIListDomainsResult::initializeModel() {

    m_domain_names_isSet = false;
    m_domain_names_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListDomainsResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListDomainsResult::fromJsonObject(QJsonObject json) {

    m_domain_names_isValid = ::OpenAPI::fromJsonValue(m_domain_names, json[QString("DomainNames")]);
    m_domain_names_isSet = !json[QString("DomainNames")].isNull() && m_domain_names_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListDomainsResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListDomainsResult::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_names.isSet()) {
        obj.insert(QString("DomainNames"), ::OpenAPI::toJsonValue(m_domain_names));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListDomainsResult::getDomainNames() const {
    return m_domain_names;
}
void OAIListDomainsResult::setDomainNames(const QList &domain_names) {
    m_domain_names = domain_names;
    m_domain_names_isSet = true;
}

bool OAIListDomainsResult::is_domain_names_Set() const{
    return m_domain_names_isSet;
}

bool OAIListDomainsResult::is_domain_names_Valid() const{
    return m_domain_names_isValid;
}

QString OAIListDomainsResult::getNextToken() const {
    return m_next_token;
}
void OAIListDomainsResult::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListDomainsResult::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListDomainsResult::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListDomainsResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListDomainsResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
