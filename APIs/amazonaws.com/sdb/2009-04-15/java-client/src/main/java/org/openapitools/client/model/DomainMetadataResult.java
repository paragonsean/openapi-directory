/*
 * Amazon SimpleDB
 * Amazon SimpleDB is a web service providing the core database functions of data indexing and querying in the cloud. By offloading the time and effort associated with building and operating a web-scale database, SimpleDB provides developers the freedom to focus on application development. <p> A traditional, clustered relational database requires a sizable upfront capital outlay, is complex to design, and often requires extensive and repetitive database administration. Amazon SimpleDB is dramatically simpler, requiring no schema, automatically indexing your data and providing a simple API for storage and access. This approach eliminates the administrative burden of data modeling, index maintenance, and performance tuning. Developers gain access to this functionality within Amazon's proven computing environment, are able to scale instantly, and pay only for what they use. </p> <p> Visit <a href=\"http://aws.amazon.com/simpledb/\">http://aws.amazon.com/simpledb/</a> for more information. </p>
 *
 * The version of the OpenAPI document: 2009-04-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DomainMetadataResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:49.081796-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DomainMetadataResult {
  public static final String SERIALIZED_NAME_ITEM_COUNT = "ItemCount";
  @SerializedName(SERIALIZED_NAME_ITEM_COUNT)
  private Integer itemCount;

  public static final String SERIALIZED_NAME_ITEM_NAMES_SIZE_BYTES = "ItemNamesSizeBytes";
  @SerializedName(SERIALIZED_NAME_ITEM_NAMES_SIZE_BYTES)
  private Integer itemNamesSizeBytes;

  public static final String SERIALIZED_NAME_ATTRIBUTE_NAME_COUNT = "AttributeNameCount";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_NAME_COUNT)
  private Integer attributeNameCount;

  public static final String SERIALIZED_NAME_ATTRIBUTE_NAMES_SIZE_BYTES = "AttributeNamesSizeBytes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_NAMES_SIZE_BYTES)
  private Integer attributeNamesSizeBytes;

  public static final String SERIALIZED_NAME_ATTRIBUTE_VALUE_COUNT = "AttributeValueCount";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_VALUE_COUNT)
  private Integer attributeValueCount;

  public static final String SERIALIZED_NAME_ATTRIBUTE_VALUES_SIZE_BYTES = "AttributeValuesSizeBytes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_VALUES_SIZE_BYTES)
  private Integer attributeValuesSizeBytes;

  public static final String SERIALIZED_NAME_TIMESTAMP = "Timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private Integer timestamp;

  public DomainMetadataResult() {
  }

  public DomainMetadataResult itemCount(Integer itemCount) {
    this.itemCount = itemCount;
    return this;
  }

  /**
   * Get itemCount
   * @return itemCount
   */
  @javax.annotation.Nullable
  public Integer getItemCount() {
    return itemCount;
  }

  public void setItemCount(Integer itemCount) {
    this.itemCount = itemCount;
  }


  public DomainMetadataResult itemNamesSizeBytes(Integer itemNamesSizeBytes) {
    this.itemNamesSizeBytes = itemNamesSizeBytes;
    return this;
  }

  /**
   * Get itemNamesSizeBytes
   * @return itemNamesSizeBytes
   */
  @javax.annotation.Nullable
  public Integer getItemNamesSizeBytes() {
    return itemNamesSizeBytes;
  }

  public void setItemNamesSizeBytes(Integer itemNamesSizeBytes) {
    this.itemNamesSizeBytes = itemNamesSizeBytes;
  }


  public DomainMetadataResult attributeNameCount(Integer attributeNameCount) {
    this.attributeNameCount = attributeNameCount;
    return this;
  }

  /**
   * Get attributeNameCount
   * @return attributeNameCount
   */
  @javax.annotation.Nullable
  public Integer getAttributeNameCount() {
    return attributeNameCount;
  }

  public void setAttributeNameCount(Integer attributeNameCount) {
    this.attributeNameCount = attributeNameCount;
  }


  public DomainMetadataResult attributeNamesSizeBytes(Integer attributeNamesSizeBytes) {
    this.attributeNamesSizeBytes = attributeNamesSizeBytes;
    return this;
  }

  /**
   * Get attributeNamesSizeBytes
   * @return attributeNamesSizeBytes
   */
  @javax.annotation.Nullable
  public Integer getAttributeNamesSizeBytes() {
    return attributeNamesSizeBytes;
  }

  public void setAttributeNamesSizeBytes(Integer attributeNamesSizeBytes) {
    this.attributeNamesSizeBytes = attributeNamesSizeBytes;
  }


  public DomainMetadataResult attributeValueCount(Integer attributeValueCount) {
    this.attributeValueCount = attributeValueCount;
    return this;
  }

  /**
   * Get attributeValueCount
   * @return attributeValueCount
   */
  @javax.annotation.Nullable
  public Integer getAttributeValueCount() {
    return attributeValueCount;
  }

  public void setAttributeValueCount(Integer attributeValueCount) {
    this.attributeValueCount = attributeValueCount;
  }


  public DomainMetadataResult attributeValuesSizeBytes(Integer attributeValuesSizeBytes) {
    this.attributeValuesSizeBytes = attributeValuesSizeBytes;
    return this;
  }

  /**
   * Get attributeValuesSizeBytes
   * @return attributeValuesSizeBytes
   */
  @javax.annotation.Nullable
  public Integer getAttributeValuesSizeBytes() {
    return attributeValuesSizeBytes;
  }

  public void setAttributeValuesSizeBytes(Integer attributeValuesSizeBytes) {
    this.attributeValuesSizeBytes = attributeValuesSizeBytes;
  }


  public DomainMetadataResult timestamp(Integer timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public Integer getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(Integer timestamp) {
    this.timestamp = timestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainMetadataResult domainMetadataResult = (DomainMetadataResult) o;
    return Objects.equals(this.itemCount, domainMetadataResult.itemCount) &&
        Objects.equals(this.itemNamesSizeBytes, domainMetadataResult.itemNamesSizeBytes) &&
        Objects.equals(this.attributeNameCount, domainMetadataResult.attributeNameCount) &&
        Objects.equals(this.attributeNamesSizeBytes, domainMetadataResult.attributeNamesSizeBytes) &&
        Objects.equals(this.attributeValueCount, domainMetadataResult.attributeValueCount) &&
        Objects.equals(this.attributeValuesSizeBytes, domainMetadataResult.attributeValuesSizeBytes) &&
        Objects.equals(this.timestamp, domainMetadataResult.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(itemCount, itemNamesSizeBytes, attributeNameCount, attributeNamesSizeBytes, attributeValueCount, attributeValuesSizeBytes, timestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainMetadataResult {\n");
    sb.append("    itemCount: ").append(toIndentedString(itemCount)).append("\n");
    sb.append("    itemNamesSizeBytes: ").append(toIndentedString(itemNamesSizeBytes)).append("\n");
    sb.append("    attributeNameCount: ").append(toIndentedString(attributeNameCount)).append("\n");
    sb.append("    attributeNamesSizeBytes: ").append(toIndentedString(attributeNamesSizeBytes)).append("\n");
    sb.append("    attributeValueCount: ").append(toIndentedString(attributeValueCount)).append("\n");
    sb.append("    attributeValuesSizeBytes: ").append(toIndentedString(attributeValuesSizeBytes)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ItemCount");
    openapiFields.add("ItemNamesSizeBytes");
    openapiFields.add("AttributeNameCount");
    openapiFields.add("AttributeNamesSizeBytes");
    openapiFields.add("AttributeValueCount");
    openapiFields.add("AttributeValuesSizeBytes");
    openapiFields.add("Timestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DomainMetadataResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DomainMetadataResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DomainMetadataResult is not found in the empty JSON string", DomainMetadataResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DomainMetadataResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DomainMetadataResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ItemCount`
      if (jsonObj.get("ItemCount") != null && !jsonObj.get("ItemCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ItemCount"));
      }
      // validate the optional field `ItemNamesSizeBytes`
      if (jsonObj.get("ItemNamesSizeBytes") != null && !jsonObj.get("ItemNamesSizeBytes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ItemNamesSizeBytes"));
      }
      // validate the optional field `AttributeNameCount`
      if (jsonObj.get("AttributeNameCount") != null && !jsonObj.get("AttributeNameCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("AttributeNameCount"));
      }
      // validate the optional field `AttributeNamesSizeBytes`
      if (jsonObj.get("AttributeNamesSizeBytes") != null && !jsonObj.get("AttributeNamesSizeBytes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("AttributeNamesSizeBytes"));
      }
      // validate the optional field `AttributeValueCount`
      if (jsonObj.get("AttributeValueCount") != null && !jsonObj.get("AttributeValueCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("AttributeValueCount"));
      }
      // validate the optional field `AttributeValuesSizeBytes`
      if (jsonObj.get("AttributeValuesSizeBytes") != null && !jsonObj.get("AttributeValuesSizeBytes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("AttributeValuesSizeBytes"));
      }
      // validate the optional field `Timestamp`
      if (jsonObj.get("Timestamp") != null && !jsonObj.get("Timestamp").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Timestamp"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DomainMetadataResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DomainMetadataResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DomainMetadataResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DomainMetadataResult.class));

       return (TypeAdapter<T>) new TypeAdapter<DomainMetadataResult>() {
           @Override
           public void write(JsonWriter out, DomainMetadataResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DomainMetadataResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DomainMetadataResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DomainMetadataResult
   * @throws IOException if the JSON string is invalid with respect to DomainMetadataResult
   */
  public static DomainMetadataResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DomainMetadataResult.class);
  }

  /**
   * Convert an instance of DomainMetadataResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

