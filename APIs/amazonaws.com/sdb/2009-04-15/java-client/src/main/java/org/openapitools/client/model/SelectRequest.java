/*
 * Amazon SimpleDB
 * Amazon SimpleDB is a web service providing the core database functions of data indexing and querying in the cloud. By offloading the time and effort associated with building and operating a web-scale database, SimpleDB provides developers the freedom to focus on application development. <p> A traditional, clustered relational database requires a sizable upfront capital outlay, is complex to design, and often requires extensive and repetitive database administration. Amazon SimpleDB is dramatically simpler, requiring no schema, automatically indexing your data and providing a simple API for storage and access. This approach eliminates the administrative burden of data modeling, index maintenance, and performance tuning. Developers gain access to this functionality within Amazon's proven computing environment, are able to scale instantly, and pay only for what they use. </p> <p> Visit <a href=\"http://aws.amazon.com/simpledb/\">http://aws.amazon.com/simpledb/</a> for more information. </p>
 *
 * The version of the OpenAPI document: 2009-04-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SelectRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:49.081796-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SelectRequest {
  public static final String SERIALIZED_NAME_SELECT_EXPRESSION = "SelectExpression";
  @SerializedName(SERIALIZED_NAME_SELECT_EXPRESSION)
  private String selectExpression;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public static final String SERIALIZED_NAME_CONSISTENT_READ = "ConsistentRead";
  @SerializedName(SERIALIZED_NAME_CONSISTENT_READ)
  private Boolean consistentRead;

  public SelectRequest() {
  }

  public SelectRequest selectExpression(String selectExpression) {
    this.selectExpression = selectExpression;
    return this;
  }

  /**
   * Get selectExpression
   * @return selectExpression
   */
  @javax.annotation.Nonnull
  public String getSelectExpression() {
    return selectExpression;
  }

  public void setSelectExpression(String selectExpression) {
    this.selectExpression = selectExpression;
  }


  public SelectRequest nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Get nextToken
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public SelectRequest consistentRead(Boolean consistentRead) {
    this.consistentRead = consistentRead;
    return this;
  }

  /**
   * Get consistentRead
   * @return consistentRead
   */
  @javax.annotation.Nullable
  public Boolean getConsistentRead() {
    return consistentRead;
  }

  public void setConsistentRead(Boolean consistentRead) {
    this.consistentRead = consistentRead;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SelectRequest selectRequest = (SelectRequest) o;
    return Objects.equals(this.selectExpression, selectRequest.selectExpression) &&
        Objects.equals(this.nextToken, selectRequest.nextToken) &&
        Objects.equals(this.consistentRead, selectRequest.consistentRead);
  }

  @Override
  public int hashCode() {
    return Objects.hash(selectExpression, nextToken, consistentRead);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SelectRequest {\n");
    sb.append("    selectExpression: ").append(toIndentedString(selectExpression)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    consistentRead: ").append(toIndentedString(consistentRead)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SelectExpression");
    openapiFields.add("NextToken");
    openapiFields.add("ConsistentRead");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SelectExpression");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SelectRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SelectRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SelectRequest is not found in the empty JSON string", SelectRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SelectRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SelectRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SelectRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `SelectExpression`
      String.validateJsonElement(jsonObj.get("SelectExpression"));
      // validate the optional field `NextToken`
      if (jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NextToken"));
      }
      // validate the optional field `ConsistentRead`
      if (jsonObj.get("ConsistentRead") != null && !jsonObj.get("ConsistentRead").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ConsistentRead"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SelectRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SelectRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SelectRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SelectRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SelectRequest>() {
           @Override
           public void write(JsonWriter out, SelectRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SelectRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SelectRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SelectRequest
   * @throws IOException if the JSON string is invalid with respect to SelectRequest
   */
  public static SelectRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SelectRequest.class);
  }

  /**
   * Convert an instance of SelectRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

