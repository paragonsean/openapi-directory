/*
 * Amazon SimpleDB
 * Amazon SimpleDB is a web service providing the core database functions of data indexing and querying in the cloud. By offloading the time and effort associated with building and operating a web-scale database, SimpleDB provides developers the freedom to focus on application development. <p> A traditional, clustered relational database requires a sizable upfront capital outlay, is complex to design, and often requires extensive and repetitive database administration. Amazon SimpleDB is dramatically simpler, requiring no schema, automatically indexing your data and providing a simple API for storage and access. This approach eliminates the administrative burden of data modeling, index maintenance, and performance tuning. Developers gain access to this functionality within Amazon's proven computing environment, are able to scale instantly, and pay only for what they use. </p> <p> Visit <a href=\"http://aws.amazon.com/simpledb/\">http://aws.amazon.com/simpledb/</a> for more information. </p>
 *
 * The version of the OpenAPI document: 2009-04-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AttributeDoesNotExist;
import org.openapitools.client.model.BatchDeleteAttributesRequest;
import org.openapitools.client.model.BatchPutAttributesRequest;
import org.openapitools.client.model.CreateDomainRequest;
import org.openapitools.client.model.DeleteAttributesRequest;
import org.openapitools.client.model.DeleteDomainRequest;
import org.openapitools.client.model.DomainMetadataRequest;
import org.openapitools.client.model.DomainMetadataResult;
import org.openapitools.client.model.GETBatchDeleteAttributesItemsParameterInner;
import org.openapitools.client.model.GETBatchPutAttributesItemsParameterInner;
import org.openapitools.client.model.GETDeleteAttributesAttributesParameterInner;
import org.openapitools.client.model.GETDeleteAttributesExpectedParameter;
import org.openapitools.client.model.GETPutAttributesAttributesParameterInner;
import org.openapitools.client.model.GetAttributesRequest;
import org.openapitools.client.model.GetAttributesResult;
import org.openapitools.client.model.InvalidNextToken;
import org.openapitools.client.model.ListDomainsRequest;
import org.openapitools.client.model.ListDomainsResult;
import org.openapitools.client.model.MissingParameter;
import org.openapitools.client.model.NoSuchDomain;
import org.openapitools.client.model.NumberDomainsExceeded;
import org.openapitools.client.model.NumberItemAttributesExceeded;
import org.openapitools.client.model.NumberSubmittedAttributesExceeded;
import org.openapitools.client.model.PutAttributesRequest;
import org.openapitools.client.model.RequestTimeout;
import org.openapitools.client.model.SelectRequest;
import org.openapitools.client.model.SelectResult;
import org.openapitools.client.model.TooManyRequestedAttributes;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for gETBatchDeleteAttributes
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param domainName The name of the domain in which the attributes are being deleted. (required)
     * @param items A list of items on which to perform the operation. (required)
     * @param action  (required)
     * @param version  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETBatchDeleteAttributesCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, List<GETBatchDeleteAttributesItemsParameterInner> items, String action, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=BatchDeleteAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (awSAccessKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AWSAccessKeyId", awSAccessKeyId));
        }

        if (signatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureMethod", signatureMethod));
        }

        if (signatureVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureVersion", signatureVersion));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Timestamp", timestamp));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Signature", signature));
        }

        if (domainName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DomainName", domainName));
        }

        if (items != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Items", items));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETBatchDeleteAttributesValidateBeforeCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, List<GETBatchDeleteAttributesItemsParameterInner> items, String action, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awSAccessKeyId' is set
        if (awSAccessKeyId == null) {
            throw new ApiException("Missing the required parameter 'awSAccessKeyId' when calling gETBatchDeleteAttributes(Async)");
        }

        // verify the required parameter 'signatureMethod' is set
        if (signatureMethod == null) {
            throw new ApiException("Missing the required parameter 'signatureMethod' when calling gETBatchDeleteAttributes(Async)");
        }

        // verify the required parameter 'signatureVersion' is set
        if (signatureVersion == null) {
            throw new ApiException("Missing the required parameter 'signatureVersion' when calling gETBatchDeleteAttributes(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling gETBatchDeleteAttributes(Async)");
        }

        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling gETBatchDeleteAttributes(Async)");
        }

        // verify the required parameter 'domainName' is set
        if (domainName == null) {
            throw new ApiException("Missing the required parameter 'domainName' when calling gETBatchDeleteAttributes(Async)");
        }

        // verify the required parameter 'items' is set
        if (items == null) {
            throw new ApiException("Missing the required parameter 'items' when calling gETBatchDeleteAttributes(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETBatchDeleteAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETBatchDeleteAttributes(Async)");
        }

        return gETBatchDeleteAttributesCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, items, action, version, _callback);

    }

    /**
     * 
     * &lt;p&gt; Performs multiple DeleteAttributes operations in a single call, which reduces round trips and latencies. This enables Amazon SimpleDB to optimize requests, which generally yields better throughput. &lt;/p&gt; &lt;note&gt; &lt;p&gt; If you specify BatchDeleteAttributes without attributes or values, all the attributes for the item are deleted. &lt;/p&gt; &lt;p&gt; BatchDeleteAttributes is an idempotent operation; running it multiple times on the same item or attribute doesn&#39;t result in an error. &lt;/p&gt; &lt;p&gt; The BatchDeleteAttributes operation succeeds or fails in its entirety. There are no partial deletes. You can execute multiple BatchDeleteAttributes operations and other operations in parallel. However, large numbers of concurrent BatchDeleteAttributes calls can result in Service Unavailable (503) responses. &lt;/p&gt; &lt;p&gt; This operation is vulnerable to exceeding the maximum URL size when making a REST request using the HTTP GET method. &lt;/p&gt; &lt;p&gt; This operation does not support conditions using Expected.X.Name, Expected.X.Value, or Expected.X.Exists. &lt;/p&gt; &lt;/note&gt; &lt;p&gt; The following limitations are enforced for this operation: &lt;ul&gt; &lt;li&gt;1 MB request size&lt;/li&gt; &lt;li&gt;25 item limit per BatchDeleteAttributes operation&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param domainName The name of the domain in which the attributes are being deleted. (required)
     * @param items A list of items on which to perform the operation. (required)
     * @param action  (required)
     * @param version  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void gETBatchDeleteAttributes(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, List<GETBatchDeleteAttributesItemsParameterInner> items, String action, String version) throws ApiException {
        gETBatchDeleteAttributesWithHttpInfo(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, items, action, version);
    }

    /**
     * 
     * &lt;p&gt; Performs multiple DeleteAttributes operations in a single call, which reduces round trips and latencies. This enables Amazon SimpleDB to optimize requests, which generally yields better throughput. &lt;/p&gt; &lt;note&gt; &lt;p&gt; If you specify BatchDeleteAttributes without attributes or values, all the attributes for the item are deleted. &lt;/p&gt; &lt;p&gt; BatchDeleteAttributes is an idempotent operation; running it multiple times on the same item or attribute doesn&#39;t result in an error. &lt;/p&gt; &lt;p&gt; The BatchDeleteAttributes operation succeeds or fails in its entirety. There are no partial deletes. You can execute multiple BatchDeleteAttributes operations and other operations in parallel. However, large numbers of concurrent BatchDeleteAttributes calls can result in Service Unavailable (503) responses. &lt;/p&gt; &lt;p&gt; This operation is vulnerable to exceeding the maximum URL size when making a REST request using the HTTP GET method. &lt;/p&gt; &lt;p&gt; This operation does not support conditions using Expected.X.Name, Expected.X.Value, or Expected.X.Exists. &lt;/p&gt; &lt;/note&gt; &lt;p&gt; The following limitations are enforced for this operation: &lt;ul&gt; &lt;li&gt;1 MB request size&lt;/li&gt; &lt;li&gt;25 item limit per BatchDeleteAttributes operation&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param domainName The name of the domain in which the attributes are being deleted. (required)
     * @param items A list of items on which to perform the operation. (required)
     * @param action  (required)
     * @param version  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETBatchDeleteAttributesWithHttpInfo(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, List<GETBatchDeleteAttributesItemsParameterInner> items, String action, String version) throws ApiException {
        okhttp3.Call localVarCall = gETBatchDeleteAttributesValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, items, action, version, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; Performs multiple DeleteAttributes operations in a single call, which reduces round trips and latencies. This enables Amazon SimpleDB to optimize requests, which generally yields better throughput. &lt;/p&gt; &lt;note&gt; &lt;p&gt; If you specify BatchDeleteAttributes without attributes or values, all the attributes for the item are deleted. &lt;/p&gt; &lt;p&gt; BatchDeleteAttributes is an idempotent operation; running it multiple times on the same item or attribute doesn&#39;t result in an error. &lt;/p&gt; &lt;p&gt; The BatchDeleteAttributes operation succeeds or fails in its entirety. There are no partial deletes. You can execute multiple BatchDeleteAttributes operations and other operations in parallel. However, large numbers of concurrent BatchDeleteAttributes calls can result in Service Unavailable (503) responses. &lt;/p&gt; &lt;p&gt; This operation is vulnerable to exceeding the maximum URL size when making a REST request using the HTTP GET method. &lt;/p&gt; &lt;p&gt; This operation does not support conditions using Expected.X.Name, Expected.X.Value, or Expected.X.Exists. &lt;/p&gt; &lt;/note&gt; &lt;p&gt; The following limitations are enforced for this operation: &lt;ul&gt; &lt;li&gt;1 MB request size&lt;/li&gt; &lt;li&gt;25 item limit per BatchDeleteAttributes operation&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param domainName The name of the domain in which the attributes are being deleted. (required)
     * @param items A list of items on which to perform the operation. (required)
     * @param action  (required)
     * @param version  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETBatchDeleteAttributesAsync(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, List<GETBatchDeleteAttributesItemsParameterInner> items, String action, String version, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETBatchDeleteAttributesValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, items, action, version, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETBatchPutAttributes
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param domainName The name of the domain in which the attributes are being stored. (required)
     * @param items A list of items on which to perform the operation. (required)
     * @param action  (required)
     * @param version  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> NumberSubmittedAttributesExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETBatchPutAttributesCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, List<GETBatchPutAttributesItemsParameterInner> items, String action, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=BatchPutAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (awSAccessKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AWSAccessKeyId", awSAccessKeyId));
        }

        if (signatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureMethod", signatureMethod));
        }

        if (signatureVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureVersion", signatureVersion));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Timestamp", timestamp));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Signature", signature));
        }

        if (domainName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DomainName", domainName));
        }

        if (items != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Items", items));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETBatchPutAttributesValidateBeforeCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, List<GETBatchPutAttributesItemsParameterInner> items, String action, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awSAccessKeyId' is set
        if (awSAccessKeyId == null) {
            throw new ApiException("Missing the required parameter 'awSAccessKeyId' when calling gETBatchPutAttributes(Async)");
        }

        // verify the required parameter 'signatureMethod' is set
        if (signatureMethod == null) {
            throw new ApiException("Missing the required parameter 'signatureMethod' when calling gETBatchPutAttributes(Async)");
        }

        // verify the required parameter 'signatureVersion' is set
        if (signatureVersion == null) {
            throw new ApiException("Missing the required parameter 'signatureVersion' when calling gETBatchPutAttributes(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling gETBatchPutAttributes(Async)");
        }

        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling gETBatchPutAttributes(Async)");
        }

        // verify the required parameter 'domainName' is set
        if (domainName == null) {
            throw new ApiException("Missing the required parameter 'domainName' when calling gETBatchPutAttributes(Async)");
        }

        // verify the required parameter 'items' is set
        if (items == null) {
            throw new ApiException("Missing the required parameter 'items' when calling gETBatchPutAttributes(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETBatchPutAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETBatchPutAttributes(Async)");
        }

        return gETBatchPutAttributesCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, items, action, version, _callback);

    }

    /**
     * 
     * &lt;p&gt; The &lt;code&gt;BatchPutAttributes&lt;/code&gt; operation creates or replaces attributes within one or more items. By using this operation, the client can perform multiple &lt;a&gt;PutAttribute&lt;/a&gt; operation with a single call. This helps yield savings in round trips and latencies, enabling Amazon SimpleDB to optimize requests and generally produce better throughput. &lt;/p&gt; &lt;p&gt; The client may specify the item name with the &lt;code&gt;Item.X.ItemName&lt;/code&gt; parameter. The client may specify new attributes using a combination of the &lt;code&gt;Item.X.Attribute.Y.Name&lt;/code&gt; and &lt;code&gt;Item.X.Attribute.Y.Value&lt;/code&gt; parameters. The client may specify the first attribute for the first item using the parameters &lt;code&gt;Item.0.Attribute.0.Name&lt;/code&gt; and &lt;code&gt;Item.0.Attribute.0.Value&lt;/code&gt;, and for the second attribute for the first item by the parameters &lt;code&gt;Item.0.Attribute.1.Name&lt;/code&gt; and &lt;code&gt;Item.0.Attribute.1.Value&lt;/code&gt;, and so on. &lt;/p&gt; &lt;p&gt; Attributes are uniquely identified within an item by their name/value combination. For example, a single item can have the attributes &lt;code&gt;{ \&quot;first_name\&quot;, \&quot;first_value\&quot; }&lt;/code&gt; and &lt;code&gt;{ \&quot;first_name\&quot;, \&quot;second_value\&quot; }&lt;/code&gt;. However, it cannot have two attribute instances where both the &lt;code&gt;Item.X.Attribute.Y.Name&lt;/code&gt; and &lt;code&gt;Item.X.Attribute.Y.Value&lt;/code&gt; are the same. &lt;/p&gt; &lt;p&gt; Optionally, the requester can supply the &lt;code&gt;Replace&lt;/code&gt; parameter for each individual value. Setting this value to &lt;code&gt;true&lt;/code&gt; will cause the new attribute values to replace the existing attribute values. For example, if an item &lt;code&gt;I&lt;/code&gt; has the attributes &lt;code&gt;{ &#39;a&#39;, &#39;1&#39; }, { &#39;b&#39;, &#39;2&#39;}&lt;/code&gt; and &lt;code&gt;{ &#39;b&#39;, &#39;3&#39; }&lt;/code&gt; and the requester does a BatchPutAttributes of &lt;code&gt;{&#39;I&#39;, &#39;b&#39;, &#39;4&#39; }&lt;/code&gt; with the Replace parameter set to true, the final attributes of the item will be &lt;code&gt;{ &#39;a&#39;, &#39;1&#39; }&lt;/code&gt; and &lt;code&gt;{ &#39;b&#39;, &#39;4&#39; }&lt;/code&gt;, replacing the previous values of the &#39;b&#39; attribute with the new value. &lt;/p&gt; &lt;note&gt; You cannot specify an empty string as an item or as an attribute name. The &lt;code&gt;BatchPutAttributes&lt;/code&gt; operation succeeds or fails in its entirety. There are no partial puts. &lt;/note&gt; &lt;important&gt; This operation is vulnerable to exceeding the maximum URL size when making a REST request using the HTTP GET method. This operation does not support conditions using &lt;code&gt;Expected.X.Name&lt;/code&gt;, &lt;code&gt;Expected.X.Value&lt;/code&gt;, or &lt;code&gt;Expected.X.Exists&lt;/code&gt;. &lt;/important&gt; &lt;p&gt; You can execute multiple &lt;code&gt;BatchPutAttributes&lt;/code&gt; operations and other operations in parallel. However, large numbers of concurrent &lt;code&gt;BatchPutAttributes&lt;/code&gt; calls can result in Service Unavailable (503) responses. &lt;/p&gt; &lt;p&gt; The following limitations are enforced for this operation: &lt;ul&gt; &lt;li&gt;256 attribute name-value pairs per item&lt;/li&gt; &lt;li&gt;1 MB request size&lt;/li&gt; &lt;li&gt;1 billion attributes per domain&lt;/li&gt; &lt;li&gt;10 GB of total user data storage per domain&lt;/li&gt; &lt;li&gt;25 item limit per &lt;code&gt;BatchPutAttributes&lt;/code&gt; operation&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param domainName The name of the domain in which the attributes are being stored. (required)
     * @param items A list of items on which to perform the operation. (required)
     * @param action  (required)
     * @param version  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> NumberSubmittedAttributesExceeded </td><td>  -  </td></tr>
     </table>
     */
    public void gETBatchPutAttributes(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, List<GETBatchPutAttributesItemsParameterInner> items, String action, String version) throws ApiException {
        gETBatchPutAttributesWithHttpInfo(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, items, action, version);
    }

    /**
     * 
     * &lt;p&gt; The &lt;code&gt;BatchPutAttributes&lt;/code&gt; operation creates or replaces attributes within one or more items. By using this operation, the client can perform multiple &lt;a&gt;PutAttribute&lt;/a&gt; operation with a single call. This helps yield savings in round trips and latencies, enabling Amazon SimpleDB to optimize requests and generally produce better throughput. &lt;/p&gt; &lt;p&gt; The client may specify the item name with the &lt;code&gt;Item.X.ItemName&lt;/code&gt; parameter. The client may specify new attributes using a combination of the &lt;code&gt;Item.X.Attribute.Y.Name&lt;/code&gt; and &lt;code&gt;Item.X.Attribute.Y.Value&lt;/code&gt; parameters. The client may specify the first attribute for the first item using the parameters &lt;code&gt;Item.0.Attribute.0.Name&lt;/code&gt; and &lt;code&gt;Item.0.Attribute.0.Value&lt;/code&gt;, and for the second attribute for the first item by the parameters &lt;code&gt;Item.0.Attribute.1.Name&lt;/code&gt; and &lt;code&gt;Item.0.Attribute.1.Value&lt;/code&gt;, and so on. &lt;/p&gt; &lt;p&gt; Attributes are uniquely identified within an item by their name/value combination. For example, a single item can have the attributes &lt;code&gt;{ \&quot;first_name\&quot;, \&quot;first_value\&quot; }&lt;/code&gt; and &lt;code&gt;{ \&quot;first_name\&quot;, \&quot;second_value\&quot; }&lt;/code&gt;. However, it cannot have two attribute instances where both the &lt;code&gt;Item.X.Attribute.Y.Name&lt;/code&gt; and &lt;code&gt;Item.X.Attribute.Y.Value&lt;/code&gt; are the same. &lt;/p&gt; &lt;p&gt; Optionally, the requester can supply the &lt;code&gt;Replace&lt;/code&gt; parameter for each individual value. Setting this value to &lt;code&gt;true&lt;/code&gt; will cause the new attribute values to replace the existing attribute values. For example, if an item &lt;code&gt;I&lt;/code&gt; has the attributes &lt;code&gt;{ &#39;a&#39;, &#39;1&#39; }, { &#39;b&#39;, &#39;2&#39;}&lt;/code&gt; and &lt;code&gt;{ &#39;b&#39;, &#39;3&#39; }&lt;/code&gt; and the requester does a BatchPutAttributes of &lt;code&gt;{&#39;I&#39;, &#39;b&#39;, &#39;4&#39; }&lt;/code&gt; with the Replace parameter set to true, the final attributes of the item will be &lt;code&gt;{ &#39;a&#39;, &#39;1&#39; }&lt;/code&gt; and &lt;code&gt;{ &#39;b&#39;, &#39;4&#39; }&lt;/code&gt;, replacing the previous values of the &#39;b&#39; attribute with the new value. &lt;/p&gt; &lt;note&gt; You cannot specify an empty string as an item or as an attribute name. The &lt;code&gt;BatchPutAttributes&lt;/code&gt; operation succeeds or fails in its entirety. There are no partial puts. &lt;/note&gt; &lt;important&gt; This operation is vulnerable to exceeding the maximum URL size when making a REST request using the HTTP GET method. This operation does not support conditions using &lt;code&gt;Expected.X.Name&lt;/code&gt;, &lt;code&gt;Expected.X.Value&lt;/code&gt;, or &lt;code&gt;Expected.X.Exists&lt;/code&gt;. &lt;/important&gt; &lt;p&gt; You can execute multiple &lt;code&gt;BatchPutAttributes&lt;/code&gt; operations and other operations in parallel. However, large numbers of concurrent &lt;code&gt;BatchPutAttributes&lt;/code&gt; calls can result in Service Unavailable (503) responses. &lt;/p&gt; &lt;p&gt; The following limitations are enforced for this operation: &lt;ul&gt; &lt;li&gt;256 attribute name-value pairs per item&lt;/li&gt; &lt;li&gt;1 MB request size&lt;/li&gt; &lt;li&gt;1 billion attributes per domain&lt;/li&gt; &lt;li&gt;10 GB of total user data storage per domain&lt;/li&gt; &lt;li&gt;25 item limit per &lt;code&gt;BatchPutAttributes&lt;/code&gt; operation&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param domainName The name of the domain in which the attributes are being stored. (required)
     * @param items A list of items on which to perform the operation. (required)
     * @param action  (required)
     * @param version  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> NumberSubmittedAttributesExceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETBatchPutAttributesWithHttpInfo(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, List<GETBatchPutAttributesItemsParameterInner> items, String action, String version) throws ApiException {
        okhttp3.Call localVarCall = gETBatchPutAttributesValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, items, action, version, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; The &lt;code&gt;BatchPutAttributes&lt;/code&gt; operation creates or replaces attributes within one or more items. By using this operation, the client can perform multiple &lt;a&gt;PutAttribute&lt;/a&gt; operation with a single call. This helps yield savings in round trips and latencies, enabling Amazon SimpleDB to optimize requests and generally produce better throughput. &lt;/p&gt; &lt;p&gt; The client may specify the item name with the &lt;code&gt;Item.X.ItemName&lt;/code&gt; parameter. The client may specify new attributes using a combination of the &lt;code&gt;Item.X.Attribute.Y.Name&lt;/code&gt; and &lt;code&gt;Item.X.Attribute.Y.Value&lt;/code&gt; parameters. The client may specify the first attribute for the first item using the parameters &lt;code&gt;Item.0.Attribute.0.Name&lt;/code&gt; and &lt;code&gt;Item.0.Attribute.0.Value&lt;/code&gt;, and for the second attribute for the first item by the parameters &lt;code&gt;Item.0.Attribute.1.Name&lt;/code&gt; and &lt;code&gt;Item.0.Attribute.1.Value&lt;/code&gt;, and so on. &lt;/p&gt; &lt;p&gt; Attributes are uniquely identified within an item by their name/value combination. For example, a single item can have the attributes &lt;code&gt;{ \&quot;first_name\&quot;, \&quot;first_value\&quot; }&lt;/code&gt; and &lt;code&gt;{ \&quot;first_name\&quot;, \&quot;second_value\&quot; }&lt;/code&gt;. However, it cannot have two attribute instances where both the &lt;code&gt;Item.X.Attribute.Y.Name&lt;/code&gt; and &lt;code&gt;Item.X.Attribute.Y.Value&lt;/code&gt; are the same. &lt;/p&gt; &lt;p&gt; Optionally, the requester can supply the &lt;code&gt;Replace&lt;/code&gt; parameter for each individual value. Setting this value to &lt;code&gt;true&lt;/code&gt; will cause the new attribute values to replace the existing attribute values. For example, if an item &lt;code&gt;I&lt;/code&gt; has the attributes &lt;code&gt;{ &#39;a&#39;, &#39;1&#39; }, { &#39;b&#39;, &#39;2&#39;}&lt;/code&gt; and &lt;code&gt;{ &#39;b&#39;, &#39;3&#39; }&lt;/code&gt; and the requester does a BatchPutAttributes of &lt;code&gt;{&#39;I&#39;, &#39;b&#39;, &#39;4&#39; }&lt;/code&gt; with the Replace parameter set to true, the final attributes of the item will be &lt;code&gt;{ &#39;a&#39;, &#39;1&#39; }&lt;/code&gt; and &lt;code&gt;{ &#39;b&#39;, &#39;4&#39; }&lt;/code&gt;, replacing the previous values of the &#39;b&#39; attribute with the new value. &lt;/p&gt; &lt;note&gt; You cannot specify an empty string as an item or as an attribute name. The &lt;code&gt;BatchPutAttributes&lt;/code&gt; operation succeeds or fails in its entirety. There are no partial puts. &lt;/note&gt; &lt;important&gt; This operation is vulnerable to exceeding the maximum URL size when making a REST request using the HTTP GET method. This operation does not support conditions using &lt;code&gt;Expected.X.Name&lt;/code&gt;, &lt;code&gt;Expected.X.Value&lt;/code&gt;, or &lt;code&gt;Expected.X.Exists&lt;/code&gt;. &lt;/important&gt; &lt;p&gt; You can execute multiple &lt;code&gt;BatchPutAttributes&lt;/code&gt; operations and other operations in parallel. However, large numbers of concurrent &lt;code&gt;BatchPutAttributes&lt;/code&gt; calls can result in Service Unavailable (503) responses. &lt;/p&gt; &lt;p&gt; The following limitations are enforced for this operation: &lt;ul&gt; &lt;li&gt;256 attribute name-value pairs per item&lt;/li&gt; &lt;li&gt;1 MB request size&lt;/li&gt; &lt;li&gt;1 billion attributes per domain&lt;/li&gt; &lt;li&gt;10 GB of total user data storage per domain&lt;/li&gt; &lt;li&gt;25 item limit per &lt;code&gt;BatchPutAttributes&lt;/code&gt; operation&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param domainName The name of the domain in which the attributes are being stored. (required)
     * @param items A list of items on which to perform the operation. (required)
     * @param action  (required)
     * @param version  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> NumberSubmittedAttributesExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETBatchPutAttributesAsync(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, List<GETBatchPutAttributesItemsParameterInner> items, String action, String version, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETBatchPutAttributesValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, items, action, version, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateDomain
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param domainName The name of the domain to create. The name can range between 3 and 255 characters and can contain the following characters: a-z, A-Z, 0-9, &#39;_&#39;, &#39;-&#39;, and &#39;.&#39;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> NumberDomainsExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateDomainCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, String action, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateDomain";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (awSAccessKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AWSAccessKeyId", awSAccessKeyId));
        }

        if (signatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureMethod", signatureMethod));
        }

        if (signatureVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureVersion", signatureVersion));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Timestamp", timestamp));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Signature", signature));
        }

        if (domainName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DomainName", domainName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateDomainValidateBeforeCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, String action, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awSAccessKeyId' is set
        if (awSAccessKeyId == null) {
            throw new ApiException("Missing the required parameter 'awSAccessKeyId' when calling gETCreateDomain(Async)");
        }

        // verify the required parameter 'signatureMethod' is set
        if (signatureMethod == null) {
            throw new ApiException("Missing the required parameter 'signatureMethod' when calling gETCreateDomain(Async)");
        }

        // verify the required parameter 'signatureVersion' is set
        if (signatureVersion == null) {
            throw new ApiException("Missing the required parameter 'signatureVersion' when calling gETCreateDomain(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling gETCreateDomain(Async)");
        }

        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling gETCreateDomain(Async)");
        }

        // verify the required parameter 'domainName' is set
        if (domainName == null) {
            throw new ApiException("Missing the required parameter 'domainName' when calling gETCreateDomain(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateDomain(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateDomain(Async)");
        }

        return gETCreateDomainCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, action, version, _callback);

    }

    /**
     * 
     * &lt;p&gt; The &lt;code&gt;CreateDomain&lt;/code&gt; operation creates a new domain. The domain name should be unique among the domains associated with the Access Key ID provided in the request. The &lt;code&gt;CreateDomain&lt;/code&gt; operation may take 10 or more seconds to complete. &lt;/p&gt; &lt;note&gt; CreateDomain is an idempotent operation; running it multiple times using the same domain name will not result in an error response. &lt;/note&gt; &lt;p&gt; The client can create up to 100 domains per account. &lt;/p&gt; &lt;p&gt; If the client requires additional domains, go to &lt;a href&#x3D;\&quot;http://aws.amazon.com/contact-us/simpledb-limit-request/\&quot;&gt; http://aws.amazon.com/contact-us/simpledb-limit-request/&lt;/a&gt;. &lt;/p&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param domainName The name of the domain to create. The name can range between 3 and 255 characters and can contain the following characters: a-z, A-Z, 0-9, &#39;_&#39;, &#39;-&#39;, and &#39;.&#39;. (required)
     * @param action  (required)
     * @param version  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> NumberDomainsExceeded </td><td>  -  </td></tr>
     </table>
     */
    public void gETCreateDomain(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, String action, String version) throws ApiException {
        gETCreateDomainWithHttpInfo(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, action, version);
    }

    /**
     * 
     * &lt;p&gt; The &lt;code&gt;CreateDomain&lt;/code&gt; operation creates a new domain. The domain name should be unique among the domains associated with the Access Key ID provided in the request. The &lt;code&gt;CreateDomain&lt;/code&gt; operation may take 10 or more seconds to complete. &lt;/p&gt; &lt;note&gt; CreateDomain is an idempotent operation; running it multiple times using the same domain name will not result in an error response. &lt;/note&gt; &lt;p&gt; The client can create up to 100 domains per account. &lt;/p&gt; &lt;p&gt; If the client requires additional domains, go to &lt;a href&#x3D;\&quot;http://aws.amazon.com/contact-us/simpledb-limit-request/\&quot;&gt; http://aws.amazon.com/contact-us/simpledb-limit-request/&lt;/a&gt;. &lt;/p&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param domainName The name of the domain to create. The name can range between 3 and 255 characters and can contain the following characters: a-z, A-Z, 0-9, &#39;_&#39;, &#39;-&#39;, and &#39;.&#39;. (required)
     * @param action  (required)
     * @param version  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> NumberDomainsExceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETCreateDomainWithHttpInfo(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, String action, String version) throws ApiException {
        okhttp3.Call localVarCall = gETCreateDomainValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, action, version, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; The &lt;code&gt;CreateDomain&lt;/code&gt; operation creates a new domain. The domain name should be unique among the domains associated with the Access Key ID provided in the request. The &lt;code&gt;CreateDomain&lt;/code&gt; operation may take 10 or more seconds to complete. &lt;/p&gt; &lt;note&gt; CreateDomain is an idempotent operation; running it multiple times using the same domain name will not result in an error response. &lt;/note&gt; &lt;p&gt; The client can create up to 100 domains per account. &lt;/p&gt; &lt;p&gt; If the client requires additional domains, go to &lt;a href&#x3D;\&quot;http://aws.amazon.com/contact-us/simpledb-limit-request/\&quot;&gt; http://aws.amazon.com/contact-us/simpledb-limit-request/&lt;/a&gt;. &lt;/p&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param domainName The name of the domain to create. The name can range between 3 and 255 characters and can contain the following characters: a-z, A-Z, 0-9, &#39;_&#39;, &#39;-&#39;, and &#39;.&#39;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> NumberDomainsExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateDomainAsync(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, String action, String version, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateDomainValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, action, version, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteAttributes
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param domainName The name of the domain in which to perform the operation. (required)
     * @param itemName The name of the item. Similar to rows on a spreadsheet, items represent individual objects that contain one or more value-attribute pairs. (required)
     * @param action  (required)
     * @param version  (required)
     * @param attributes A list of Attributes. Similar to columns on a spreadsheet, attributes represent categories of data that can be assigned to items. (optional)
     * @param expected The update condition which, if specified, determines whether the specified attributes will be deleted or not. The update condition must be satisfied in order for this request to be processed and the attributes to be deleted. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> AttributeDoesNotExist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteAttributesCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, String itemName, String action, String version, List<GETDeleteAttributesAttributesParameterInner> attributes, GETDeleteAttributesExpectedParameter expected, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (awSAccessKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AWSAccessKeyId", awSAccessKeyId));
        }

        if (signatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureMethod", signatureMethod));
        }

        if (signatureVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureVersion", signatureVersion));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Timestamp", timestamp));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Signature", signature));
        }

        if (domainName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DomainName", domainName));
        }

        if (itemName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ItemName", itemName));
        }

        if (attributes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Attributes", attributes));
        }

        if (expected != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Expected", expected));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteAttributesValidateBeforeCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, String itemName, String action, String version, List<GETDeleteAttributesAttributesParameterInner> attributes, GETDeleteAttributesExpectedParameter expected, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awSAccessKeyId' is set
        if (awSAccessKeyId == null) {
            throw new ApiException("Missing the required parameter 'awSAccessKeyId' when calling gETDeleteAttributes(Async)");
        }

        // verify the required parameter 'signatureMethod' is set
        if (signatureMethod == null) {
            throw new ApiException("Missing the required parameter 'signatureMethod' when calling gETDeleteAttributes(Async)");
        }

        // verify the required parameter 'signatureVersion' is set
        if (signatureVersion == null) {
            throw new ApiException("Missing the required parameter 'signatureVersion' when calling gETDeleteAttributes(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling gETDeleteAttributes(Async)");
        }

        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling gETDeleteAttributes(Async)");
        }

        // verify the required parameter 'domainName' is set
        if (domainName == null) {
            throw new ApiException("Missing the required parameter 'domainName' when calling gETDeleteAttributes(Async)");
        }

        // verify the required parameter 'itemName' is set
        if (itemName == null) {
            throw new ApiException("Missing the required parameter 'itemName' when calling gETDeleteAttributes(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteAttributes(Async)");
        }

        return gETDeleteAttributesCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, itemName, action, version, attributes, expected, _callback);

    }

    /**
     * 
     * &lt;p&gt; Deletes one or more attributes associated with an item. If all attributes of the item are deleted, the item is deleted. &lt;/p&gt; &lt;note&gt; If &lt;code&gt;DeleteAttributes&lt;/code&gt; is called without being passed any attributes or values specified, all the attributes for the item are deleted. &lt;/note&gt; &lt;p&gt; &lt;code&gt;DeleteAttributes&lt;/code&gt; is an idempotent operation; running it multiple times on the same item or attribute does not result in an error response. &lt;/p&gt; &lt;p&gt; Because Amazon SimpleDB makes multiple copies of item data and uses an eventual consistency update model, performing a &lt;a&gt;GetAttributes&lt;/a&gt; or &lt;a&gt;Select&lt;/a&gt; operation (read) immediately after a &lt;code&gt;DeleteAttributes&lt;/code&gt; or &lt;a&gt;PutAttributes&lt;/a&gt; operation (write) might not return updated item data. &lt;/p&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param domainName The name of the domain in which to perform the operation. (required)
     * @param itemName The name of the item. Similar to rows on a spreadsheet, items represent individual objects that contain one or more value-attribute pairs. (required)
     * @param action  (required)
     * @param version  (required)
     * @param attributes A list of Attributes. Similar to columns on a spreadsheet, attributes represent categories of data that can be assigned to items. (optional)
     * @param expected The update condition which, if specified, determines whether the specified attributes will be deleted or not. The update condition must be satisfied in order for this request to be processed and the attributes to be deleted. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> AttributeDoesNotExist </td><td>  -  </td></tr>
     </table>
     */
    public void gETDeleteAttributes(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, String itemName, String action, String version, List<GETDeleteAttributesAttributesParameterInner> attributes, GETDeleteAttributesExpectedParameter expected) throws ApiException {
        gETDeleteAttributesWithHttpInfo(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, itemName, action, version, attributes, expected);
    }

    /**
     * 
     * &lt;p&gt; Deletes one or more attributes associated with an item. If all attributes of the item are deleted, the item is deleted. &lt;/p&gt; &lt;note&gt; If &lt;code&gt;DeleteAttributes&lt;/code&gt; is called without being passed any attributes or values specified, all the attributes for the item are deleted. &lt;/note&gt; &lt;p&gt; &lt;code&gt;DeleteAttributes&lt;/code&gt; is an idempotent operation; running it multiple times on the same item or attribute does not result in an error response. &lt;/p&gt; &lt;p&gt; Because Amazon SimpleDB makes multiple copies of item data and uses an eventual consistency update model, performing a &lt;a&gt;GetAttributes&lt;/a&gt; or &lt;a&gt;Select&lt;/a&gt; operation (read) immediately after a &lt;code&gt;DeleteAttributes&lt;/code&gt; or &lt;a&gt;PutAttributes&lt;/a&gt; operation (write) might not return updated item data. &lt;/p&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param domainName The name of the domain in which to perform the operation. (required)
     * @param itemName The name of the item. Similar to rows on a spreadsheet, items represent individual objects that contain one or more value-attribute pairs. (required)
     * @param action  (required)
     * @param version  (required)
     * @param attributes A list of Attributes. Similar to columns on a spreadsheet, attributes represent categories of data that can be assigned to items. (optional)
     * @param expected The update condition which, if specified, determines whether the specified attributes will be deleted or not. The update condition must be satisfied in order for this request to be processed and the attributes to be deleted. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> AttributeDoesNotExist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETDeleteAttributesWithHttpInfo(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, String itemName, String action, String version, List<GETDeleteAttributesAttributesParameterInner> attributes, GETDeleteAttributesExpectedParameter expected) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteAttributesValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, itemName, action, version, attributes, expected, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; Deletes one or more attributes associated with an item. If all attributes of the item are deleted, the item is deleted. &lt;/p&gt; &lt;note&gt; If &lt;code&gt;DeleteAttributes&lt;/code&gt; is called without being passed any attributes or values specified, all the attributes for the item are deleted. &lt;/note&gt; &lt;p&gt; &lt;code&gt;DeleteAttributes&lt;/code&gt; is an idempotent operation; running it multiple times on the same item or attribute does not result in an error response. &lt;/p&gt; &lt;p&gt; Because Amazon SimpleDB makes multiple copies of item data and uses an eventual consistency update model, performing a &lt;a&gt;GetAttributes&lt;/a&gt; or &lt;a&gt;Select&lt;/a&gt; operation (read) immediately after a &lt;code&gt;DeleteAttributes&lt;/code&gt; or &lt;a&gt;PutAttributes&lt;/a&gt; operation (write) might not return updated item data. &lt;/p&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param domainName The name of the domain in which to perform the operation. (required)
     * @param itemName The name of the item. Similar to rows on a spreadsheet, items represent individual objects that contain one or more value-attribute pairs. (required)
     * @param action  (required)
     * @param version  (required)
     * @param attributes A list of Attributes. Similar to columns on a spreadsheet, attributes represent categories of data that can be assigned to items. (optional)
     * @param expected The update condition which, if specified, determines whether the specified attributes will be deleted or not. The update condition must be satisfied in order for this request to be processed and the attributes to be deleted. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> AttributeDoesNotExist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteAttributesAsync(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, String itemName, String action, String version, List<GETDeleteAttributesAttributesParameterInner> attributes, GETDeleteAttributesExpectedParameter expected, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteAttributesValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, itemName, action, version, attributes, expected, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteDomain
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param domainName The name of the domain to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteDomainCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, String action, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteDomain";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (awSAccessKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AWSAccessKeyId", awSAccessKeyId));
        }

        if (signatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureMethod", signatureMethod));
        }

        if (signatureVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureVersion", signatureVersion));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Timestamp", timestamp));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Signature", signature));
        }

        if (domainName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DomainName", domainName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteDomainValidateBeforeCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, String action, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awSAccessKeyId' is set
        if (awSAccessKeyId == null) {
            throw new ApiException("Missing the required parameter 'awSAccessKeyId' when calling gETDeleteDomain(Async)");
        }

        // verify the required parameter 'signatureMethod' is set
        if (signatureMethod == null) {
            throw new ApiException("Missing the required parameter 'signatureMethod' when calling gETDeleteDomain(Async)");
        }

        // verify the required parameter 'signatureVersion' is set
        if (signatureVersion == null) {
            throw new ApiException("Missing the required parameter 'signatureVersion' when calling gETDeleteDomain(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling gETDeleteDomain(Async)");
        }

        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling gETDeleteDomain(Async)");
        }

        // verify the required parameter 'domainName' is set
        if (domainName == null) {
            throw new ApiException("Missing the required parameter 'domainName' when calling gETDeleteDomain(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteDomain(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteDomain(Async)");
        }

        return gETDeleteDomainCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, action, version, _callback);

    }

    /**
     * 
     * &lt;p&gt; The &lt;code&gt;DeleteDomain&lt;/code&gt; operation deletes a domain. Any items (and their attributes) in the domain are deleted as well. The &lt;code&gt;DeleteDomain&lt;/code&gt; operation might take 10 or more seconds to complete. &lt;/p&gt; &lt;note&gt; Running &lt;code&gt;DeleteDomain&lt;/code&gt; on a domain that does not exist or running the function multiple times using the same domain name will not result in an error response. &lt;/note&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param domainName The name of the domain to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
     </table>
     */
    public void gETDeleteDomain(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, String action, String version) throws ApiException {
        gETDeleteDomainWithHttpInfo(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, action, version);
    }

    /**
     * 
     * &lt;p&gt; The &lt;code&gt;DeleteDomain&lt;/code&gt; operation deletes a domain. Any items (and their attributes) in the domain are deleted as well. The &lt;code&gt;DeleteDomain&lt;/code&gt; operation might take 10 or more seconds to complete. &lt;/p&gt; &lt;note&gt; Running &lt;code&gt;DeleteDomain&lt;/code&gt; on a domain that does not exist or running the function multiple times using the same domain name will not result in an error response. &lt;/note&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param domainName The name of the domain to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETDeleteDomainWithHttpInfo(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, String action, String version) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteDomainValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, action, version, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; The &lt;code&gt;DeleteDomain&lt;/code&gt; operation deletes a domain. Any items (and their attributes) in the domain are deleted as well. The &lt;code&gt;DeleteDomain&lt;/code&gt; operation might take 10 or more seconds to complete. &lt;/p&gt; &lt;note&gt; Running &lt;code&gt;DeleteDomain&lt;/code&gt; on a domain that does not exist or running the function multiple times using the same domain name will not result in an error response. &lt;/note&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param domainName The name of the domain to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteDomainAsync(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, String action, String version, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteDomainValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, action, version, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDomainMetadata
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param domainName The name of the domain for which to display the metadata of. (required)
     * @param action  (required)
     * @param version  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDomainMetadataCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, String action, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DomainMetadata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (awSAccessKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AWSAccessKeyId", awSAccessKeyId));
        }

        if (signatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureMethod", signatureMethod));
        }

        if (signatureVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureVersion", signatureVersion));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Timestamp", timestamp));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Signature", signature));
        }

        if (domainName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DomainName", domainName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDomainMetadataValidateBeforeCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, String action, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awSAccessKeyId' is set
        if (awSAccessKeyId == null) {
            throw new ApiException("Missing the required parameter 'awSAccessKeyId' when calling gETDomainMetadata(Async)");
        }

        // verify the required parameter 'signatureMethod' is set
        if (signatureMethod == null) {
            throw new ApiException("Missing the required parameter 'signatureMethod' when calling gETDomainMetadata(Async)");
        }

        // verify the required parameter 'signatureVersion' is set
        if (signatureVersion == null) {
            throw new ApiException("Missing the required parameter 'signatureVersion' when calling gETDomainMetadata(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling gETDomainMetadata(Async)");
        }

        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling gETDomainMetadata(Async)");
        }

        // verify the required parameter 'domainName' is set
        if (domainName == null) {
            throw new ApiException("Missing the required parameter 'domainName' when calling gETDomainMetadata(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDomainMetadata(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDomainMetadata(Async)");
        }

        return gETDomainMetadataCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, action, version, _callback);

    }

    /**
     * 
     *  Returns information about the domain, including when the domain was created, the number of items and attributes in the domain, and the size of the attribute names and values. 
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param domainName The name of the domain for which to display the metadata of. (required)
     * @param action  (required)
     * @param version  (required)
     * @return DomainMetadataResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
     </table>
     */
    public DomainMetadataResult gETDomainMetadata(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, String action, String version) throws ApiException {
        ApiResponse<DomainMetadataResult> localVarResp = gETDomainMetadataWithHttpInfo(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, action, version);
        return localVarResp.getData();
    }

    /**
     * 
     *  Returns information about the domain, including when the domain was created, the number of items and attributes in the domain, and the size of the attribute names and values. 
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param domainName The name of the domain for which to display the metadata of. (required)
     * @param action  (required)
     * @param version  (required)
     * @return ApiResponse&lt;DomainMetadataResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainMetadataResult> gETDomainMetadataWithHttpInfo(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, String action, String version) throws ApiException {
        okhttp3.Call localVarCall = gETDomainMetadataValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, action, version, null);
        Type localVarReturnType = new TypeToken<DomainMetadataResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Returns information about the domain, including when the domain was created, the number of items and attributes in the domain, and the size of the attribute names and values. 
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param domainName The name of the domain for which to display the metadata of. (required)
     * @param action  (required)
     * @param version  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDomainMetadataAsync(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, String action, String version, final ApiCallback<DomainMetadataResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDomainMetadataValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, action, version, _callback);
        Type localVarReturnType = new TypeToken<DomainMetadataResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETGetAttributes
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param domainName The name of the domain in which to perform the operation. (required)
     * @param itemName The name of the item. (required)
     * @param action  (required)
     * @param version  (required)
     * @param attributeNames The names of the attributes. (optional)
     * @param consistentRead Determines whether or not strong consistency should be enforced when data is read from SimpleDB. If &lt;code&gt;true&lt;/code&gt;, any data previously written to SimpleDB will be returned. Otherwise, results will be consistent eventually, and the client may not see data that was written immediately before your read. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetAttributesCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, String itemName, String action, String version, List<String> attributeNames, Boolean consistentRead, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=GetAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (awSAccessKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AWSAccessKeyId", awSAccessKeyId));
        }

        if (signatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureMethod", signatureMethod));
        }

        if (signatureVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureVersion", signatureVersion));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Timestamp", timestamp));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Signature", signature));
        }

        if (domainName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DomainName", domainName));
        }

        if (itemName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ItemName", itemName));
        }

        if (attributeNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "AttributeNames", attributeNames));
        }

        if (consistentRead != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ConsistentRead", consistentRead));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETGetAttributesValidateBeforeCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, String itemName, String action, String version, List<String> attributeNames, Boolean consistentRead, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awSAccessKeyId' is set
        if (awSAccessKeyId == null) {
            throw new ApiException("Missing the required parameter 'awSAccessKeyId' when calling gETGetAttributes(Async)");
        }

        // verify the required parameter 'signatureMethod' is set
        if (signatureMethod == null) {
            throw new ApiException("Missing the required parameter 'signatureMethod' when calling gETGetAttributes(Async)");
        }

        // verify the required parameter 'signatureVersion' is set
        if (signatureVersion == null) {
            throw new ApiException("Missing the required parameter 'signatureVersion' when calling gETGetAttributes(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling gETGetAttributes(Async)");
        }

        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling gETGetAttributes(Async)");
        }

        // verify the required parameter 'domainName' is set
        if (domainName == null) {
            throw new ApiException("Missing the required parameter 'domainName' when calling gETGetAttributes(Async)");
        }

        // verify the required parameter 'itemName' is set
        if (itemName == null) {
            throw new ApiException("Missing the required parameter 'itemName' when calling gETGetAttributes(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETGetAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETGetAttributes(Async)");
        }

        return gETGetAttributesCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, itemName, action, version, attributeNames, consistentRead, _callback);

    }

    /**
     * 
     * &lt;p&gt; Returns all of the attributes associated with the specified item. Optionally, the attributes returned can be limited to one or more attributes by specifying an attribute name parameter. &lt;/p&gt; &lt;p&gt; If the item does not exist on the replica that was accessed for this operation, an empty set is returned. The system does not return an error as it cannot guarantee the item does not exist on other replicas. &lt;/p&gt; &lt;note&gt; If GetAttributes is called without being passed any attribute names, all the attributes for the item are returned. &lt;/note&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param domainName The name of the domain in which to perform the operation. (required)
     * @param itemName The name of the item. (required)
     * @param action  (required)
     * @param version  (required)
     * @param attributeNames The names of the attributes. (optional)
     * @param consistentRead Determines whether or not strong consistency should be enforced when data is read from SimpleDB. If &lt;code&gt;true&lt;/code&gt;, any data previously written to SimpleDB will be returned. Otherwise, results will be consistent eventually, and the client may not see data that was written immediately before your read. (optional)
     * @return GetAttributesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
     </table>
     */
    public GetAttributesResult gETGetAttributes(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, String itemName, String action, String version, List<String> attributeNames, Boolean consistentRead) throws ApiException {
        ApiResponse<GetAttributesResult> localVarResp = gETGetAttributesWithHttpInfo(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, itemName, action, version, attributeNames, consistentRead);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt; Returns all of the attributes associated with the specified item. Optionally, the attributes returned can be limited to one or more attributes by specifying an attribute name parameter. &lt;/p&gt; &lt;p&gt; If the item does not exist on the replica that was accessed for this operation, an empty set is returned. The system does not return an error as it cannot guarantee the item does not exist on other replicas. &lt;/p&gt; &lt;note&gt; If GetAttributes is called without being passed any attribute names, all the attributes for the item are returned. &lt;/note&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param domainName The name of the domain in which to perform the operation. (required)
     * @param itemName The name of the item. (required)
     * @param action  (required)
     * @param version  (required)
     * @param attributeNames The names of the attributes. (optional)
     * @param consistentRead Determines whether or not strong consistency should be enforced when data is read from SimpleDB. If &lt;code&gt;true&lt;/code&gt;, any data previously written to SimpleDB will be returned. Otherwise, results will be consistent eventually, and the client may not see data that was written immediately before your read. (optional)
     * @return ApiResponse&lt;GetAttributesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAttributesResult> gETGetAttributesWithHttpInfo(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, String itemName, String action, String version, List<String> attributeNames, Boolean consistentRead) throws ApiException {
        okhttp3.Call localVarCall = gETGetAttributesValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, itemName, action, version, attributeNames, consistentRead, null);
        Type localVarReturnType = new TypeToken<GetAttributesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; Returns all of the attributes associated with the specified item. Optionally, the attributes returned can be limited to one or more attributes by specifying an attribute name parameter. &lt;/p&gt; &lt;p&gt; If the item does not exist on the replica that was accessed for this operation, an empty set is returned. The system does not return an error as it cannot guarantee the item does not exist on other replicas. &lt;/p&gt; &lt;note&gt; If GetAttributes is called without being passed any attribute names, all the attributes for the item are returned. &lt;/note&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param domainName The name of the domain in which to perform the operation. (required)
     * @param itemName The name of the item. (required)
     * @param action  (required)
     * @param version  (required)
     * @param attributeNames The names of the attributes. (optional)
     * @param consistentRead Determines whether or not strong consistency should be enforced when data is read from SimpleDB. If &lt;code&gt;true&lt;/code&gt;, any data previously written to SimpleDB will be returned. Otherwise, results will be consistent eventually, and the client may not see data that was written immediately before your read. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetAttributesAsync(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, String itemName, String action, String version, List<String> attributeNames, Boolean consistentRead, final ApiCallback<GetAttributesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETGetAttributesValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, itemName, action, version, attributeNames, consistentRead, _callback);
        Type localVarReturnType = new TypeToken<GetAttributesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListDomains
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param maxNumberOfDomains The maximum number of domain names you want returned. The range is 1 to 100. The default setting is 100. (optional)
     * @param nextToken A string informing Amazon SimpleDB where to start the next list of domain names. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListDomainsCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, Integer maxNumberOfDomains, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListDomains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (awSAccessKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AWSAccessKeyId", awSAccessKeyId));
        }

        if (signatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureMethod", signatureMethod));
        }

        if (signatureVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureVersion", signatureVersion));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Timestamp", timestamp));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Signature", signature));
        }

        if (maxNumberOfDomains != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxNumberOfDomains", maxNumberOfDomains));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListDomainsValidateBeforeCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, Integer maxNumberOfDomains, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awSAccessKeyId' is set
        if (awSAccessKeyId == null) {
            throw new ApiException("Missing the required parameter 'awSAccessKeyId' when calling gETListDomains(Async)");
        }

        // verify the required parameter 'signatureMethod' is set
        if (signatureMethod == null) {
            throw new ApiException("Missing the required parameter 'signatureMethod' when calling gETListDomains(Async)");
        }

        // verify the required parameter 'signatureVersion' is set
        if (signatureVersion == null) {
            throw new ApiException("Missing the required parameter 'signatureVersion' when calling gETListDomains(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling gETListDomains(Async)");
        }

        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling gETListDomains(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListDomains(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListDomains(Async)");
        }

        return gETListDomainsCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, maxNumberOfDomains, nextToken, _callback);

    }

    /**
     * 
     *  The &lt;code&gt;ListDomains&lt;/code&gt; operation lists all domains associated with the Access Key ID. It returns domain names up to the limit set by &lt;a href&#x3D;\&quot;#MaxNumberOfDomains\&quot;&gt;MaxNumberOfDomains&lt;/a&gt;. A &lt;a href&#x3D;\&quot;#NextToken\&quot;&gt;NextToken&lt;/a&gt; is returned if there are more than &lt;code&gt;MaxNumberOfDomains&lt;/code&gt; domains. Calling &lt;code&gt;ListDomains&lt;/code&gt; successive times with the &lt;code&gt;NextToken&lt;/code&gt; provided by the operation returns up to &lt;code&gt;MaxNumberOfDomains&lt;/code&gt; more domain names with each successive operation call. 
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param maxNumberOfDomains The maximum number of domain names you want returned. The range is 1 to 100. The default setting is 100. (optional)
     * @param nextToken A string informing Amazon SimpleDB where to start the next list of domain names. (optional)
     * @return ListDomainsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public ListDomainsResult gETListDomains(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, Integer maxNumberOfDomains, String nextToken) throws ApiException {
        ApiResponse<ListDomainsResult> localVarResp = gETListDomainsWithHttpInfo(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, maxNumberOfDomains, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     *  The &lt;code&gt;ListDomains&lt;/code&gt; operation lists all domains associated with the Access Key ID. It returns domain names up to the limit set by &lt;a href&#x3D;\&quot;#MaxNumberOfDomains\&quot;&gt;MaxNumberOfDomains&lt;/a&gt;. A &lt;a href&#x3D;\&quot;#NextToken\&quot;&gt;NextToken&lt;/a&gt; is returned if there are more than &lt;code&gt;MaxNumberOfDomains&lt;/code&gt; domains. Calling &lt;code&gt;ListDomains&lt;/code&gt; successive times with the &lt;code&gt;NextToken&lt;/code&gt; provided by the operation returns up to &lt;code&gt;MaxNumberOfDomains&lt;/code&gt; more domain names with each successive operation call. 
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param maxNumberOfDomains The maximum number of domain names you want returned. The range is 1 to 100. The default setting is 100. (optional)
     * @param nextToken A string informing Amazon SimpleDB where to start the next list of domain names. (optional)
     * @return ApiResponse&lt;ListDomainsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListDomainsResult> gETListDomainsWithHttpInfo(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, Integer maxNumberOfDomains, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = gETListDomainsValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, maxNumberOfDomains, nextToken, null);
        Type localVarReturnType = new TypeToken<ListDomainsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  The &lt;code&gt;ListDomains&lt;/code&gt; operation lists all domains associated with the Access Key ID. It returns domain names up to the limit set by &lt;a href&#x3D;\&quot;#MaxNumberOfDomains\&quot;&gt;MaxNumberOfDomains&lt;/a&gt;. A &lt;a href&#x3D;\&quot;#NextToken\&quot;&gt;NextToken&lt;/a&gt; is returned if there are more than &lt;code&gt;MaxNumberOfDomains&lt;/code&gt; domains. Calling &lt;code&gt;ListDomains&lt;/code&gt; successive times with the &lt;code&gt;NextToken&lt;/code&gt; provided by the operation returns up to &lt;code&gt;MaxNumberOfDomains&lt;/code&gt; more domain names with each successive operation call. 
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param maxNumberOfDomains The maximum number of domain names you want returned. The range is 1 to 100. The default setting is 100. (optional)
     * @param nextToken A string informing Amazon SimpleDB where to start the next list of domain names. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListDomainsAsync(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, Integer maxNumberOfDomains, String nextToken, final ApiCallback<ListDomainsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListDomainsValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, maxNumberOfDomains, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListDomainsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETPutAttributes
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param domainName The name of the domain in which to perform the operation. (required)
     * @param itemName The name of the item. (required)
     * @param attributes The list of attributes. (required)
     * @param action  (required)
     * @param version  (required)
     * @param expected The update condition which, if specified, determines whether the specified attributes will be updated or not. The update condition must be satisfied in order for this request to be processed and the attributes to be updated. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> AttributeDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> NumberItemAttributesExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPutAttributesCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, String itemName, List<GETPutAttributesAttributesParameterInner> attributes, String action, String version, GETDeleteAttributesExpectedParameter expected, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=PutAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (awSAccessKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AWSAccessKeyId", awSAccessKeyId));
        }

        if (signatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureMethod", signatureMethod));
        }

        if (signatureVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureVersion", signatureVersion));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Timestamp", timestamp));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Signature", signature));
        }

        if (domainName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DomainName", domainName));
        }

        if (itemName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ItemName", itemName));
        }

        if (attributes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Attributes", attributes));
        }

        if (expected != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Expected", expected));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETPutAttributesValidateBeforeCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, String itemName, List<GETPutAttributesAttributesParameterInner> attributes, String action, String version, GETDeleteAttributesExpectedParameter expected, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awSAccessKeyId' is set
        if (awSAccessKeyId == null) {
            throw new ApiException("Missing the required parameter 'awSAccessKeyId' when calling gETPutAttributes(Async)");
        }

        // verify the required parameter 'signatureMethod' is set
        if (signatureMethod == null) {
            throw new ApiException("Missing the required parameter 'signatureMethod' when calling gETPutAttributes(Async)");
        }

        // verify the required parameter 'signatureVersion' is set
        if (signatureVersion == null) {
            throw new ApiException("Missing the required parameter 'signatureVersion' when calling gETPutAttributes(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling gETPutAttributes(Async)");
        }

        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling gETPutAttributes(Async)");
        }

        // verify the required parameter 'domainName' is set
        if (domainName == null) {
            throw new ApiException("Missing the required parameter 'domainName' when calling gETPutAttributes(Async)");
        }

        // verify the required parameter 'itemName' is set
        if (itemName == null) {
            throw new ApiException("Missing the required parameter 'itemName' when calling gETPutAttributes(Async)");
        }

        // verify the required parameter 'attributes' is set
        if (attributes == null) {
            throw new ApiException("Missing the required parameter 'attributes' when calling gETPutAttributes(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETPutAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETPutAttributes(Async)");
        }

        return gETPutAttributesCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, itemName, attributes, action, version, expected, _callback);

    }

    /**
     * 
     * &lt;p&gt; The PutAttributes operation creates or replaces attributes in an item. The client may specify new attributes using a combination of the &lt;code&gt;Attribute.X.Name&lt;/code&gt; and &lt;code&gt;Attribute.X.Value&lt;/code&gt; parameters. The client specifies the first attribute by the parameters &lt;code&gt;Attribute.0.Name&lt;/code&gt; and &lt;code&gt;Attribute.0.Value&lt;/code&gt;, the second attribute by the parameters &lt;code&gt;Attribute.1.Name&lt;/code&gt; and &lt;code&gt;Attribute.1.Value&lt;/code&gt;, and so on. &lt;/p&gt; &lt;p&gt; Attributes are uniquely identified in an item by their name/value combination. For example, a single item can have the attributes &lt;code&gt;{ \&quot;first_name\&quot;, \&quot;first_value\&quot; }&lt;/code&gt; and &lt;code&gt;{ \&quot;first_name\&quot;, second_value\&quot; }&lt;/code&gt;. However, it cannot have two attribute instances where both the &lt;code&gt;Attribute.X.Name&lt;/code&gt; and &lt;code&gt;Attribute.X.Value&lt;/code&gt; are the same. &lt;/p&gt; &lt;p&gt; Optionally, the requestor can supply the &lt;code&gt;Replace&lt;/code&gt; parameter for each individual attribute. Setting this value to &lt;code&gt;true&lt;/code&gt; causes the new attribute value to replace the existing attribute value(s). For example, if an item has the attributes &lt;code&gt;{ &#39;a&#39;, &#39;1&#39; }&lt;/code&gt;, &lt;code&gt;{ &#39;b&#39;, &#39;2&#39;}&lt;/code&gt; and &lt;code&gt;{ &#39;b&#39;, &#39;3&#39; }&lt;/code&gt; and the requestor calls &lt;code&gt;PutAttributes&lt;/code&gt; using the attributes &lt;code&gt;{ &#39;b&#39;, &#39;4&#39; }&lt;/code&gt; with the &lt;code&gt;Replace&lt;/code&gt; parameter set to true, the final attributes of the item are changed to &lt;code&gt;{ &#39;a&#39;, &#39;1&#39; }&lt;/code&gt; and &lt;code&gt;{ &#39;b&#39;, &#39;4&#39; }&lt;/code&gt;, which replaces the previous values of the &#39;b&#39; attribute with the new value. &lt;/p&gt; &lt;note&gt; Using &lt;code&gt;PutAttributes&lt;/code&gt; to replace attribute values that do not exist will not result in an error response. &lt;/note&gt; &lt;p&gt; You cannot specify an empty string as an attribute name. &lt;/p&gt; &lt;p&gt; Because Amazon SimpleDB makes multiple copies of client data and uses an eventual consistency update model, an immediate &lt;a&gt;GetAttributes&lt;/a&gt; or &lt;a&gt;Select&lt;/a&gt; operation (read) immediately after a &lt;a&gt;PutAttributes&lt;/a&gt; or &lt;a&gt;DeleteAttributes&lt;/a&gt; operation (write) might not return the updated data. &lt;/p&gt; &lt;p&gt; The following limitations are enforced for this operation: &lt;ul&gt; &lt;li&gt;256 total attribute name-value pairs per item&lt;/li&gt; &lt;li&gt;One billion attributes per domain&lt;/li&gt; &lt;li&gt;10 GB of total user data storage per domain&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param domainName The name of the domain in which to perform the operation. (required)
     * @param itemName The name of the item. (required)
     * @param attributes The list of attributes. (required)
     * @param action  (required)
     * @param version  (required)
     * @param expected The update condition which, if specified, determines whether the specified attributes will be updated or not. The update condition must be satisfied in order for this request to be processed and the attributes to be updated. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> AttributeDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> NumberItemAttributesExceeded </td><td>  -  </td></tr>
     </table>
     */
    public void gETPutAttributes(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, String itemName, List<GETPutAttributesAttributesParameterInner> attributes, String action, String version, GETDeleteAttributesExpectedParameter expected) throws ApiException {
        gETPutAttributesWithHttpInfo(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, itemName, attributes, action, version, expected);
    }

    /**
     * 
     * &lt;p&gt; The PutAttributes operation creates or replaces attributes in an item. The client may specify new attributes using a combination of the &lt;code&gt;Attribute.X.Name&lt;/code&gt; and &lt;code&gt;Attribute.X.Value&lt;/code&gt; parameters. The client specifies the first attribute by the parameters &lt;code&gt;Attribute.0.Name&lt;/code&gt; and &lt;code&gt;Attribute.0.Value&lt;/code&gt;, the second attribute by the parameters &lt;code&gt;Attribute.1.Name&lt;/code&gt; and &lt;code&gt;Attribute.1.Value&lt;/code&gt;, and so on. &lt;/p&gt; &lt;p&gt; Attributes are uniquely identified in an item by their name/value combination. For example, a single item can have the attributes &lt;code&gt;{ \&quot;first_name\&quot;, \&quot;first_value\&quot; }&lt;/code&gt; and &lt;code&gt;{ \&quot;first_name\&quot;, second_value\&quot; }&lt;/code&gt;. However, it cannot have two attribute instances where both the &lt;code&gt;Attribute.X.Name&lt;/code&gt; and &lt;code&gt;Attribute.X.Value&lt;/code&gt; are the same. &lt;/p&gt; &lt;p&gt; Optionally, the requestor can supply the &lt;code&gt;Replace&lt;/code&gt; parameter for each individual attribute. Setting this value to &lt;code&gt;true&lt;/code&gt; causes the new attribute value to replace the existing attribute value(s). For example, if an item has the attributes &lt;code&gt;{ &#39;a&#39;, &#39;1&#39; }&lt;/code&gt;, &lt;code&gt;{ &#39;b&#39;, &#39;2&#39;}&lt;/code&gt; and &lt;code&gt;{ &#39;b&#39;, &#39;3&#39; }&lt;/code&gt; and the requestor calls &lt;code&gt;PutAttributes&lt;/code&gt; using the attributes &lt;code&gt;{ &#39;b&#39;, &#39;4&#39; }&lt;/code&gt; with the &lt;code&gt;Replace&lt;/code&gt; parameter set to true, the final attributes of the item are changed to &lt;code&gt;{ &#39;a&#39;, &#39;1&#39; }&lt;/code&gt; and &lt;code&gt;{ &#39;b&#39;, &#39;4&#39; }&lt;/code&gt;, which replaces the previous values of the &#39;b&#39; attribute with the new value. &lt;/p&gt; &lt;note&gt; Using &lt;code&gt;PutAttributes&lt;/code&gt; to replace attribute values that do not exist will not result in an error response. &lt;/note&gt; &lt;p&gt; You cannot specify an empty string as an attribute name. &lt;/p&gt; &lt;p&gt; Because Amazon SimpleDB makes multiple copies of client data and uses an eventual consistency update model, an immediate &lt;a&gt;GetAttributes&lt;/a&gt; or &lt;a&gt;Select&lt;/a&gt; operation (read) immediately after a &lt;a&gt;PutAttributes&lt;/a&gt; or &lt;a&gt;DeleteAttributes&lt;/a&gt; operation (write) might not return the updated data. &lt;/p&gt; &lt;p&gt; The following limitations are enforced for this operation: &lt;ul&gt; &lt;li&gt;256 total attribute name-value pairs per item&lt;/li&gt; &lt;li&gt;One billion attributes per domain&lt;/li&gt; &lt;li&gt;10 GB of total user data storage per domain&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param domainName The name of the domain in which to perform the operation. (required)
     * @param itemName The name of the item. (required)
     * @param attributes The list of attributes. (required)
     * @param action  (required)
     * @param version  (required)
     * @param expected The update condition which, if specified, determines whether the specified attributes will be updated or not. The update condition must be satisfied in order for this request to be processed and the attributes to be updated. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> AttributeDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> NumberItemAttributesExceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETPutAttributesWithHttpInfo(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, String itemName, List<GETPutAttributesAttributesParameterInner> attributes, String action, String version, GETDeleteAttributesExpectedParameter expected) throws ApiException {
        okhttp3.Call localVarCall = gETPutAttributesValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, itemName, attributes, action, version, expected, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; The PutAttributes operation creates or replaces attributes in an item. The client may specify new attributes using a combination of the &lt;code&gt;Attribute.X.Name&lt;/code&gt; and &lt;code&gt;Attribute.X.Value&lt;/code&gt; parameters. The client specifies the first attribute by the parameters &lt;code&gt;Attribute.0.Name&lt;/code&gt; and &lt;code&gt;Attribute.0.Value&lt;/code&gt;, the second attribute by the parameters &lt;code&gt;Attribute.1.Name&lt;/code&gt; and &lt;code&gt;Attribute.1.Value&lt;/code&gt;, and so on. &lt;/p&gt; &lt;p&gt; Attributes are uniquely identified in an item by their name/value combination. For example, a single item can have the attributes &lt;code&gt;{ \&quot;first_name\&quot;, \&quot;first_value\&quot; }&lt;/code&gt; and &lt;code&gt;{ \&quot;first_name\&quot;, second_value\&quot; }&lt;/code&gt;. However, it cannot have two attribute instances where both the &lt;code&gt;Attribute.X.Name&lt;/code&gt; and &lt;code&gt;Attribute.X.Value&lt;/code&gt; are the same. &lt;/p&gt; &lt;p&gt; Optionally, the requestor can supply the &lt;code&gt;Replace&lt;/code&gt; parameter for each individual attribute. Setting this value to &lt;code&gt;true&lt;/code&gt; causes the new attribute value to replace the existing attribute value(s). For example, if an item has the attributes &lt;code&gt;{ &#39;a&#39;, &#39;1&#39; }&lt;/code&gt;, &lt;code&gt;{ &#39;b&#39;, &#39;2&#39;}&lt;/code&gt; and &lt;code&gt;{ &#39;b&#39;, &#39;3&#39; }&lt;/code&gt; and the requestor calls &lt;code&gt;PutAttributes&lt;/code&gt; using the attributes &lt;code&gt;{ &#39;b&#39;, &#39;4&#39; }&lt;/code&gt; with the &lt;code&gt;Replace&lt;/code&gt; parameter set to true, the final attributes of the item are changed to &lt;code&gt;{ &#39;a&#39;, &#39;1&#39; }&lt;/code&gt; and &lt;code&gt;{ &#39;b&#39;, &#39;4&#39; }&lt;/code&gt;, which replaces the previous values of the &#39;b&#39; attribute with the new value. &lt;/p&gt; &lt;note&gt; Using &lt;code&gt;PutAttributes&lt;/code&gt; to replace attribute values that do not exist will not result in an error response. &lt;/note&gt; &lt;p&gt; You cannot specify an empty string as an attribute name. &lt;/p&gt; &lt;p&gt; Because Amazon SimpleDB makes multiple copies of client data and uses an eventual consistency update model, an immediate &lt;a&gt;GetAttributes&lt;/a&gt; or &lt;a&gt;Select&lt;/a&gt; operation (read) immediately after a &lt;a&gt;PutAttributes&lt;/a&gt; or &lt;a&gt;DeleteAttributes&lt;/a&gt; operation (write) might not return the updated data. &lt;/p&gt; &lt;p&gt; The following limitations are enforced for this operation: &lt;ul&gt; &lt;li&gt;256 total attribute name-value pairs per item&lt;/li&gt; &lt;li&gt;One billion attributes per domain&lt;/li&gt; &lt;li&gt;10 GB of total user data storage per domain&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param domainName The name of the domain in which to perform the operation. (required)
     * @param itemName The name of the item. (required)
     * @param attributes The list of attributes. (required)
     * @param action  (required)
     * @param version  (required)
     * @param expected The update condition which, if specified, determines whether the specified attributes will be updated or not. The update condition must be satisfied in order for this request to be processed and the attributes to be updated. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> AttributeDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> NumberItemAttributesExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPutAttributesAsync(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String domainName, String itemName, List<GETPutAttributesAttributesParameterInner> attributes, String action, String version, GETDeleteAttributesExpectedParameter expected, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETPutAttributesValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, domainName, itemName, attributes, action, version, expected, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETSelect
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param selectExpression The expression used to query the domain. (required)
     * @param action  (required)
     * @param version  (required)
     * @param nextToken A string informing Amazon SimpleDB where to start the next list of &lt;code&gt;ItemNames&lt;/code&gt;. (optional)
     * @param consistentRead Determines whether or not strong consistency should be enforced when data is read from SimpleDB. If &lt;code&gt;true&lt;/code&gt;, any data previously written to SimpleDB will be returned. Otherwise, results will be consistent eventually, and the client may not see data that was written immediately before your read. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> TooManyRequestedAttributes </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> RequestTimeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSelectCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String selectExpression, String action, String version, String nextToken, Boolean consistentRead, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=Select";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (awSAccessKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AWSAccessKeyId", awSAccessKeyId));
        }

        if (signatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureMethod", signatureMethod));
        }

        if (signatureVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureVersion", signatureVersion));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Timestamp", timestamp));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Signature", signature));
        }

        if (selectExpression != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SelectExpression", selectExpression));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (consistentRead != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ConsistentRead", consistentRead));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETSelectValidateBeforeCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String selectExpression, String action, String version, String nextToken, Boolean consistentRead, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awSAccessKeyId' is set
        if (awSAccessKeyId == null) {
            throw new ApiException("Missing the required parameter 'awSAccessKeyId' when calling gETSelect(Async)");
        }

        // verify the required parameter 'signatureMethod' is set
        if (signatureMethod == null) {
            throw new ApiException("Missing the required parameter 'signatureMethod' when calling gETSelect(Async)");
        }

        // verify the required parameter 'signatureVersion' is set
        if (signatureVersion == null) {
            throw new ApiException("Missing the required parameter 'signatureVersion' when calling gETSelect(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling gETSelect(Async)");
        }

        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling gETSelect(Async)");
        }

        // verify the required parameter 'selectExpression' is set
        if (selectExpression == null) {
            throw new ApiException("Missing the required parameter 'selectExpression' when calling gETSelect(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETSelect(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETSelect(Async)");
        }

        return gETSelectCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, selectExpression, action, version, nextToken, consistentRead, _callback);

    }

    /**
     * 
     * &lt;p&gt; The &lt;code&gt;Select&lt;/code&gt; operation returns a set of attributes for &lt;code&gt;ItemNames&lt;/code&gt; that match the select expression. &lt;code&gt;Select&lt;/code&gt; is similar to the standard SQL SELECT statement. &lt;/p&gt; &lt;p&gt; The total size of the response cannot exceed 1 MB in total size. Amazon SimpleDB automatically adjusts the number of items returned per page to enforce this limit. For example, if the client asks to retrieve 2500 items, but each individual item is 10 kB in size, the system returns 100 items and an appropriate &lt;code&gt;NextToken&lt;/code&gt; so the client can access the next page of results. &lt;/p&gt; &lt;p&gt; For information on how to construct select expressions, see Using Select to Create Amazon SimpleDB Queries in the Developer Guide. &lt;/p&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param selectExpression The expression used to query the domain. (required)
     * @param action  (required)
     * @param version  (required)
     * @param nextToken A string informing Amazon SimpleDB where to start the next list of &lt;code&gt;ItemNames&lt;/code&gt;. (optional)
     * @param consistentRead Determines whether or not strong consistency should be enforced when data is read from SimpleDB. If &lt;code&gt;true&lt;/code&gt;, any data previously written to SimpleDB will be returned. Otherwise, results will be consistent eventually, and the client may not see data that was written immediately before your read. (optional)
     * @return SelectResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> TooManyRequestedAttributes </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> RequestTimeout </td><td>  -  </td></tr>
     </table>
     */
    public SelectResult gETSelect(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String selectExpression, String action, String version, String nextToken, Boolean consistentRead) throws ApiException {
        ApiResponse<SelectResult> localVarResp = gETSelectWithHttpInfo(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, selectExpression, action, version, nextToken, consistentRead);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt; The &lt;code&gt;Select&lt;/code&gt; operation returns a set of attributes for &lt;code&gt;ItemNames&lt;/code&gt; that match the select expression. &lt;code&gt;Select&lt;/code&gt; is similar to the standard SQL SELECT statement. &lt;/p&gt; &lt;p&gt; The total size of the response cannot exceed 1 MB in total size. Amazon SimpleDB automatically adjusts the number of items returned per page to enforce this limit. For example, if the client asks to retrieve 2500 items, but each individual item is 10 kB in size, the system returns 100 items and an appropriate &lt;code&gt;NextToken&lt;/code&gt; so the client can access the next page of results. &lt;/p&gt; &lt;p&gt; For information on how to construct select expressions, see Using Select to Create Amazon SimpleDB Queries in the Developer Guide. &lt;/p&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param selectExpression The expression used to query the domain. (required)
     * @param action  (required)
     * @param version  (required)
     * @param nextToken A string informing Amazon SimpleDB where to start the next list of &lt;code&gt;ItemNames&lt;/code&gt;. (optional)
     * @param consistentRead Determines whether or not strong consistency should be enforced when data is read from SimpleDB. If &lt;code&gt;true&lt;/code&gt;, any data previously written to SimpleDB will be returned. Otherwise, results will be consistent eventually, and the client may not see data that was written immediately before your read. (optional)
     * @return ApiResponse&lt;SelectResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> TooManyRequestedAttributes </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> RequestTimeout </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SelectResult> gETSelectWithHttpInfo(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String selectExpression, String action, String version, String nextToken, Boolean consistentRead) throws ApiException {
        okhttp3.Call localVarCall = gETSelectValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, selectExpression, action, version, nextToken, consistentRead, null);
        Type localVarReturnType = new TypeToken<SelectResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; The &lt;code&gt;Select&lt;/code&gt; operation returns a set of attributes for &lt;code&gt;ItemNames&lt;/code&gt; that match the select expression. &lt;code&gt;Select&lt;/code&gt; is similar to the standard SQL SELECT statement. &lt;/p&gt; &lt;p&gt; The total size of the response cannot exceed 1 MB in total size. Amazon SimpleDB automatically adjusts the number of items returned per page to enforce this limit. For example, if the client asks to retrieve 2500 items, but each individual item is 10 kB in size, the system returns 100 items and an appropriate &lt;code&gt;NextToken&lt;/code&gt; so the client can access the next page of results. &lt;/p&gt; &lt;p&gt; For information on how to construct select expressions, see Using Select to Create Amazon SimpleDB Queries in the Developer Guide. &lt;/p&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param selectExpression The expression used to query the domain. (required)
     * @param action  (required)
     * @param version  (required)
     * @param nextToken A string informing Amazon SimpleDB where to start the next list of &lt;code&gt;ItemNames&lt;/code&gt;. (optional)
     * @param consistentRead Determines whether or not strong consistency should be enforced when data is read from SimpleDB. If &lt;code&gt;true&lt;/code&gt;, any data previously written to SimpleDB will be returned. Otherwise, results will be consistent eventually, and the client may not see data that was written immediately before your read. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> TooManyRequestedAttributes </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> RequestTimeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSelectAsync(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String selectExpression, String action, String version, String nextToken, Boolean consistentRead, final ApiCallback<SelectResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETSelectValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, selectExpression, action, version, nextToken, consistentRead, _callback);
        Type localVarReturnType = new TypeToken<SelectResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTBatchDeleteAttributes
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param batchDeleteAttributesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTBatchDeleteAttributesCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, BatchDeleteAttributesRequest batchDeleteAttributesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchDeleteAttributesRequest;

        // create path and map variables
        String localVarPath = "/#Action=BatchDeleteAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (awSAccessKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AWSAccessKeyId", awSAccessKeyId));
        }

        if (signatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureMethod", signatureMethod));
        }

        if (signatureVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureVersion", signatureVersion));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Timestamp", timestamp));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Signature", signature));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTBatchDeleteAttributesValidateBeforeCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, BatchDeleteAttributesRequest batchDeleteAttributesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awSAccessKeyId' is set
        if (awSAccessKeyId == null) {
            throw new ApiException("Missing the required parameter 'awSAccessKeyId' when calling pOSTBatchDeleteAttributes(Async)");
        }

        // verify the required parameter 'signatureMethod' is set
        if (signatureMethod == null) {
            throw new ApiException("Missing the required parameter 'signatureMethod' when calling pOSTBatchDeleteAttributes(Async)");
        }

        // verify the required parameter 'signatureVersion' is set
        if (signatureVersion == null) {
            throw new ApiException("Missing the required parameter 'signatureVersion' when calling pOSTBatchDeleteAttributes(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling pOSTBatchDeleteAttributes(Async)");
        }

        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling pOSTBatchDeleteAttributes(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTBatchDeleteAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTBatchDeleteAttributes(Async)");
        }

        return pOSTBatchDeleteAttributesCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, batchDeleteAttributesRequest, _callback);

    }

    /**
     * 
     * &lt;p&gt; Performs multiple DeleteAttributes operations in a single call, which reduces round trips and latencies. This enables Amazon SimpleDB to optimize requests, which generally yields better throughput. &lt;/p&gt; &lt;note&gt; &lt;p&gt; If you specify BatchDeleteAttributes without attributes or values, all the attributes for the item are deleted. &lt;/p&gt; &lt;p&gt; BatchDeleteAttributes is an idempotent operation; running it multiple times on the same item or attribute doesn&#39;t result in an error. &lt;/p&gt; &lt;p&gt; The BatchDeleteAttributes operation succeeds or fails in its entirety. There are no partial deletes. You can execute multiple BatchDeleteAttributes operations and other operations in parallel. However, large numbers of concurrent BatchDeleteAttributes calls can result in Service Unavailable (503) responses. &lt;/p&gt; &lt;p&gt; This operation is vulnerable to exceeding the maximum URL size when making a REST request using the HTTP GET method. &lt;/p&gt; &lt;p&gt; This operation does not support conditions using Expected.X.Name, Expected.X.Value, or Expected.X.Exists. &lt;/p&gt; &lt;/note&gt; &lt;p&gt; The following limitations are enforced for this operation: &lt;ul&gt; &lt;li&gt;1 MB request size&lt;/li&gt; &lt;li&gt;25 item limit per BatchDeleteAttributes operation&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param batchDeleteAttributesRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTBatchDeleteAttributes(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, BatchDeleteAttributesRequest batchDeleteAttributesRequest) throws ApiException {
        pOSTBatchDeleteAttributesWithHttpInfo(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, batchDeleteAttributesRequest);
    }

    /**
     * 
     * &lt;p&gt; Performs multiple DeleteAttributes operations in a single call, which reduces round trips and latencies. This enables Amazon SimpleDB to optimize requests, which generally yields better throughput. &lt;/p&gt; &lt;note&gt; &lt;p&gt; If you specify BatchDeleteAttributes without attributes or values, all the attributes for the item are deleted. &lt;/p&gt; &lt;p&gt; BatchDeleteAttributes is an idempotent operation; running it multiple times on the same item or attribute doesn&#39;t result in an error. &lt;/p&gt; &lt;p&gt; The BatchDeleteAttributes operation succeeds or fails in its entirety. There are no partial deletes. You can execute multiple BatchDeleteAttributes operations and other operations in parallel. However, large numbers of concurrent BatchDeleteAttributes calls can result in Service Unavailable (503) responses. &lt;/p&gt; &lt;p&gt; This operation is vulnerable to exceeding the maximum URL size when making a REST request using the HTTP GET method. &lt;/p&gt; &lt;p&gt; This operation does not support conditions using Expected.X.Name, Expected.X.Value, or Expected.X.Exists. &lt;/p&gt; &lt;/note&gt; &lt;p&gt; The following limitations are enforced for this operation: &lt;ul&gt; &lt;li&gt;1 MB request size&lt;/li&gt; &lt;li&gt;25 item limit per BatchDeleteAttributes operation&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param batchDeleteAttributesRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTBatchDeleteAttributesWithHttpInfo(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, BatchDeleteAttributesRequest batchDeleteAttributesRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTBatchDeleteAttributesValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, batchDeleteAttributesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; Performs multiple DeleteAttributes operations in a single call, which reduces round trips and latencies. This enables Amazon SimpleDB to optimize requests, which generally yields better throughput. &lt;/p&gt; &lt;note&gt; &lt;p&gt; If you specify BatchDeleteAttributes without attributes or values, all the attributes for the item are deleted. &lt;/p&gt; &lt;p&gt; BatchDeleteAttributes is an idempotent operation; running it multiple times on the same item or attribute doesn&#39;t result in an error. &lt;/p&gt; &lt;p&gt; The BatchDeleteAttributes operation succeeds or fails in its entirety. There are no partial deletes. You can execute multiple BatchDeleteAttributes operations and other operations in parallel. However, large numbers of concurrent BatchDeleteAttributes calls can result in Service Unavailable (503) responses. &lt;/p&gt; &lt;p&gt; This operation is vulnerable to exceeding the maximum URL size when making a REST request using the HTTP GET method. &lt;/p&gt; &lt;p&gt; This operation does not support conditions using Expected.X.Name, Expected.X.Value, or Expected.X.Exists. &lt;/p&gt; &lt;/note&gt; &lt;p&gt; The following limitations are enforced for this operation: &lt;ul&gt; &lt;li&gt;1 MB request size&lt;/li&gt; &lt;li&gt;25 item limit per BatchDeleteAttributes operation&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param batchDeleteAttributesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTBatchDeleteAttributesAsync(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, BatchDeleteAttributesRequest batchDeleteAttributesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTBatchDeleteAttributesValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, batchDeleteAttributesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTBatchPutAttributes
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param batchPutAttributesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> NumberSubmittedAttributesExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTBatchPutAttributesCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, BatchPutAttributesRequest batchPutAttributesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchPutAttributesRequest;

        // create path and map variables
        String localVarPath = "/#Action=BatchPutAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (awSAccessKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AWSAccessKeyId", awSAccessKeyId));
        }

        if (signatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureMethod", signatureMethod));
        }

        if (signatureVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureVersion", signatureVersion));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Timestamp", timestamp));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Signature", signature));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTBatchPutAttributesValidateBeforeCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, BatchPutAttributesRequest batchPutAttributesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awSAccessKeyId' is set
        if (awSAccessKeyId == null) {
            throw new ApiException("Missing the required parameter 'awSAccessKeyId' when calling pOSTBatchPutAttributes(Async)");
        }

        // verify the required parameter 'signatureMethod' is set
        if (signatureMethod == null) {
            throw new ApiException("Missing the required parameter 'signatureMethod' when calling pOSTBatchPutAttributes(Async)");
        }

        // verify the required parameter 'signatureVersion' is set
        if (signatureVersion == null) {
            throw new ApiException("Missing the required parameter 'signatureVersion' when calling pOSTBatchPutAttributes(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling pOSTBatchPutAttributes(Async)");
        }

        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling pOSTBatchPutAttributes(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTBatchPutAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTBatchPutAttributes(Async)");
        }

        return pOSTBatchPutAttributesCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, batchPutAttributesRequest, _callback);

    }

    /**
     * 
     * &lt;p&gt; The &lt;code&gt;BatchPutAttributes&lt;/code&gt; operation creates or replaces attributes within one or more items. By using this operation, the client can perform multiple &lt;a&gt;PutAttribute&lt;/a&gt; operation with a single call. This helps yield savings in round trips and latencies, enabling Amazon SimpleDB to optimize requests and generally produce better throughput. &lt;/p&gt; &lt;p&gt; The client may specify the item name with the &lt;code&gt;Item.X.ItemName&lt;/code&gt; parameter. The client may specify new attributes using a combination of the &lt;code&gt;Item.X.Attribute.Y.Name&lt;/code&gt; and &lt;code&gt;Item.X.Attribute.Y.Value&lt;/code&gt; parameters. The client may specify the first attribute for the first item using the parameters &lt;code&gt;Item.0.Attribute.0.Name&lt;/code&gt; and &lt;code&gt;Item.0.Attribute.0.Value&lt;/code&gt;, and for the second attribute for the first item by the parameters &lt;code&gt;Item.0.Attribute.1.Name&lt;/code&gt; and &lt;code&gt;Item.0.Attribute.1.Value&lt;/code&gt;, and so on. &lt;/p&gt; &lt;p&gt; Attributes are uniquely identified within an item by their name/value combination. For example, a single item can have the attributes &lt;code&gt;{ \&quot;first_name\&quot;, \&quot;first_value\&quot; }&lt;/code&gt; and &lt;code&gt;{ \&quot;first_name\&quot;, \&quot;second_value\&quot; }&lt;/code&gt;. However, it cannot have two attribute instances where both the &lt;code&gt;Item.X.Attribute.Y.Name&lt;/code&gt; and &lt;code&gt;Item.X.Attribute.Y.Value&lt;/code&gt; are the same. &lt;/p&gt; &lt;p&gt; Optionally, the requester can supply the &lt;code&gt;Replace&lt;/code&gt; parameter for each individual value. Setting this value to &lt;code&gt;true&lt;/code&gt; will cause the new attribute values to replace the existing attribute values. For example, if an item &lt;code&gt;I&lt;/code&gt; has the attributes &lt;code&gt;{ &#39;a&#39;, &#39;1&#39; }, { &#39;b&#39;, &#39;2&#39;}&lt;/code&gt; and &lt;code&gt;{ &#39;b&#39;, &#39;3&#39; }&lt;/code&gt; and the requester does a BatchPutAttributes of &lt;code&gt;{&#39;I&#39;, &#39;b&#39;, &#39;4&#39; }&lt;/code&gt; with the Replace parameter set to true, the final attributes of the item will be &lt;code&gt;{ &#39;a&#39;, &#39;1&#39; }&lt;/code&gt; and &lt;code&gt;{ &#39;b&#39;, &#39;4&#39; }&lt;/code&gt;, replacing the previous values of the &#39;b&#39; attribute with the new value. &lt;/p&gt; &lt;note&gt; You cannot specify an empty string as an item or as an attribute name. The &lt;code&gt;BatchPutAttributes&lt;/code&gt; operation succeeds or fails in its entirety. There are no partial puts. &lt;/note&gt; &lt;important&gt; This operation is vulnerable to exceeding the maximum URL size when making a REST request using the HTTP GET method. This operation does not support conditions using &lt;code&gt;Expected.X.Name&lt;/code&gt;, &lt;code&gt;Expected.X.Value&lt;/code&gt;, or &lt;code&gt;Expected.X.Exists&lt;/code&gt;. &lt;/important&gt; &lt;p&gt; You can execute multiple &lt;code&gt;BatchPutAttributes&lt;/code&gt; operations and other operations in parallel. However, large numbers of concurrent &lt;code&gt;BatchPutAttributes&lt;/code&gt; calls can result in Service Unavailable (503) responses. &lt;/p&gt; &lt;p&gt; The following limitations are enforced for this operation: &lt;ul&gt; &lt;li&gt;256 attribute name-value pairs per item&lt;/li&gt; &lt;li&gt;1 MB request size&lt;/li&gt; &lt;li&gt;1 billion attributes per domain&lt;/li&gt; &lt;li&gt;10 GB of total user data storage per domain&lt;/li&gt; &lt;li&gt;25 item limit per &lt;code&gt;BatchPutAttributes&lt;/code&gt; operation&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param batchPutAttributesRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> NumberSubmittedAttributesExceeded </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTBatchPutAttributes(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, BatchPutAttributesRequest batchPutAttributesRequest) throws ApiException {
        pOSTBatchPutAttributesWithHttpInfo(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, batchPutAttributesRequest);
    }

    /**
     * 
     * &lt;p&gt; The &lt;code&gt;BatchPutAttributes&lt;/code&gt; operation creates or replaces attributes within one or more items. By using this operation, the client can perform multiple &lt;a&gt;PutAttribute&lt;/a&gt; operation with a single call. This helps yield savings in round trips and latencies, enabling Amazon SimpleDB to optimize requests and generally produce better throughput. &lt;/p&gt; &lt;p&gt; The client may specify the item name with the &lt;code&gt;Item.X.ItemName&lt;/code&gt; parameter. The client may specify new attributes using a combination of the &lt;code&gt;Item.X.Attribute.Y.Name&lt;/code&gt; and &lt;code&gt;Item.X.Attribute.Y.Value&lt;/code&gt; parameters. The client may specify the first attribute for the first item using the parameters &lt;code&gt;Item.0.Attribute.0.Name&lt;/code&gt; and &lt;code&gt;Item.0.Attribute.0.Value&lt;/code&gt;, and for the second attribute for the first item by the parameters &lt;code&gt;Item.0.Attribute.1.Name&lt;/code&gt; and &lt;code&gt;Item.0.Attribute.1.Value&lt;/code&gt;, and so on. &lt;/p&gt; &lt;p&gt; Attributes are uniquely identified within an item by their name/value combination. For example, a single item can have the attributes &lt;code&gt;{ \&quot;first_name\&quot;, \&quot;first_value\&quot; }&lt;/code&gt; and &lt;code&gt;{ \&quot;first_name\&quot;, \&quot;second_value\&quot; }&lt;/code&gt;. However, it cannot have two attribute instances where both the &lt;code&gt;Item.X.Attribute.Y.Name&lt;/code&gt; and &lt;code&gt;Item.X.Attribute.Y.Value&lt;/code&gt; are the same. &lt;/p&gt; &lt;p&gt; Optionally, the requester can supply the &lt;code&gt;Replace&lt;/code&gt; parameter for each individual value. Setting this value to &lt;code&gt;true&lt;/code&gt; will cause the new attribute values to replace the existing attribute values. For example, if an item &lt;code&gt;I&lt;/code&gt; has the attributes &lt;code&gt;{ &#39;a&#39;, &#39;1&#39; }, { &#39;b&#39;, &#39;2&#39;}&lt;/code&gt; and &lt;code&gt;{ &#39;b&#39;, &#39;3&#39; }&lt;/code&gt; and the requester does a BatchPutAttributes of &lt;code&gt;{&#39;I&#39;, &#39;b&#39;, &#39;4&#39; }&lt;/code&gt; with the Replace parameter set to true, the final attributes of the item will be &lt;code&gt;{ &#39;a&#39;, &#39;1&#39; }&lt;/code&gt; and &lt;code&gt;{ &#39;b&#39;, &#39;4&#39; }&lt;/code&gt;, replacing the previous values of the &#39;b&#39; attribute with the new value. &lt;/p&gt; &lt;note&gt; You cannot specify an empty string as an item or as an attribute name. The &lt;code&gt;BatchPutAttributes&lt;/code&gt; operation succeeds or fails in its entirety. There are no partial puts. &lt;/note&gt; &lt;important&gt; This operation is vulnerable to exceeding the maximum URL size when making a REST request using the HTTP GET method. This operation does not support conditions using &lt;code&gt;Expected.X.Name&lt;/code&gt;, &lt;code&gt;Expected.X.Value&lt;/code&gt;, or &lt;code&gt;Expected.X.Exists&lt;/code&gt;. &lt;/important&gt; &lt;p&gt; You can execute multiple &lt;code&gt;BatchPutAttributes&lt;/code&gt; operations and other operations in parallel. However, large numbers of concurrent &lt;code&gt;BatchPutAttributes&lt;/code&gt; calls can result in Service Unavailable (503) responses. &lt;/p&gt; &lt;p&gt; The following limitations are enforced for this operation: &lt;ul&gt; &lt;li&gt;256 attribute name-value pairs per item&lt;/li&gt; &lt;li&gt;1 MB request size&lt;/li&gt; &lt;li&gt;1 billion attributes per domain&lt;/li&gt; &lt;li&gt;10 GB of total user data storage per domain&lt;/li&gt; &lt;li&gt;25 item limit per &lt;code&gt;BatchPutAttributes&lt;/code&gt; operation&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param batchPutAttributesRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> NumberSubmittedAttributesExceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTBatchPutAttributesWithHttpInfo(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, BatchPutAttributesRequest batchPutAttributesRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTBatchPutAttributesValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, batchPutAttributesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; The &lt;code&gt;BatchPutAttributes&lt;/code&gt; operation creates or replaces attributes within one or more items. By using this operation, the client can perform multiple &lt;a&gt;PutAttribute&lt;/a&gt; operation with a single call. This helps yield savings in round trips and latencies, enabling Amazon SimpleDB to optimize requests and generally produce better throughput. &lt;/p&gt; &lt;p&gt; The client may specify the item name with the &lt;code&gt;Item.X.ItemName&lt;/code&gt; parameter. The client may specify new attributes using a combination of the &lt;code&gt;Item.X.Attribute.Y.Name&lt;/code&gt; and &lt;code&gt;Item.X.Attribute.Y.Value&lt;/code&gt; parameters. The client may specify the first attribute for the first item using the parameters &lt;code&gt;Item.0.Attribute.0.Name&lt;/code&gt; and &lt;code&gt;Item.0.Attribute.0.Value&lt;/code&gt;, and for the second attribute for the first item by the parameters &lt;code&gt;Item.0.Attribute.1.Name&lt;/code&gt; and &lt;code&gt;Item.0.Attribute.1.Value&lt;/code&gt;, and so on. &lt;/p&gt; &lt;p&gt; Attributes are uniquely identified within an item by their name/value combination. For example, a single item can have the attributes &lt;code&gt;{ \&quot;first_name\&quot;, \&quot;first_value\&quot; }&lt;/code&gt; and &lt;code&gt;{ \&quot;first_name\&quot;, \&quot;second_value\&quot; }&lt;/code&gt;. However, it cannot have two attribute instances where both the &lt;code&gt;Item.X.Attribute.Y.Name&lt;/code&gt; and &lt;code&gt;Item.X.Attribute.Y.Value&lt;/code&gt; are the same. &lt;/p&gt; &lt;p&gt; Optionally, the requester can supply the &lt;code&gt;Replace&lt;/code&gt; parameter for each individual value. Setting this value to &lt;code&gt;true&lt;/code&gt; will cause the new attribute values to replace the existing attribute values. For example, if an item &lt;code&gt;I&lt;/code&gt; has the attributes &lt;code&gt;{ &#39;a&#39;, &#39;1&#39; }, { &#39;b&#39;, &#39;2&#39;}&lt;/code&gt; and &lt;code&gt;{ &#39;b&#39;, &#39;3&#39; }&lt;/code&gt; and the requester does a BatchPutAttributes of &lt;code&gt;{&#39;I&#39;, &#39;b&#39;, &#39;4&#39; }&lt;/code&gt; with the Replace parameter set to true, the final attributes of the item will be &lt;code&gt;{ &#39;a&#39;, &#39;1&#39; }&lt;/code&gt; and &lt;code&gt;{ &#39;b&#39;, &#39;4&#39; }&lt;/code&gt;, replacing the previous values of the &#39;b&#39; attribute with the new value. &lt;/p&gt; &lt;note&gt; You cannot specify an empty string as an item or as an attribute name. The &lt;code&gt;BatchPutAttributes&lt;/code&gt; operation succeeds or fails in its entirety. There are no partial puts. &lt;/note&gt; &lt;important&gt; This operation is vulnerable to exceeding the maximum URL size when making a REST request using the HTTP GET method. This operation does not support conditions using &lt;code&gt;Expected.X.Name&lt;/code&gt;, &lt;code&gt;Expected.X.Value&lt;/code&gt;, or &lt;code&gt;Expected.X.Exists&lt;/code&gt;. &lt;/important&gt; &lt;p&gt; You can execute multiple &lt;code&gt;BatchPutAttributes&lt;/code&gt; operations and other operations in parallel. However, large numbers of concurrent &lt;code&gt;BatchPutAttributes&lt;/code&gt; calls can result in Service Unavailable (503) responses. &lt;/p&gt; &lt;p&gt; The following limitations are enforced for this operation: &lt;ul&gt; &lt;li&gt;256 attribute name-value pairs per item&lt;/li&gt; &lt;li&gt;1 MB request size&lt;/li&gt; &lt;li&gt;1 billion attributes per domain&lt;/li&gt; &lt;li&gt;10 GB of total user data storage per domain&lt;/li&gt; &lt;li&gt;25 item limit per &lt;code&gt;BatchPutAttributes&lt;/code&gt; operation&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param batchPutAttributesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> NumberSubmittedAttributesExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTBatchPutAttributesAsync(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, BatchPutAttributesRequest batchPutAttributesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTBatchPutAttributesValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, batchPutAttributesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateDomain
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param createDomainRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> NumberDomainsExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateDomainCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, CreateDomainRequest createDomainRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDomainRequest;

        // create path and map variables
        String localVarPath = "/#Action=CreateDomain";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (awSAccessKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AWSAccessKeyId", awSAccessKeyId));
        }

        if (signatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureMethod", signatureMethod));
        }

        if (signatureVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureVersion", signatureVersion));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Timestamp", timestamp));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Signature", signature));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateDomainValidateBeforeCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, CreateDomainRequest createDomainRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awSAccessKeyId' is set
        if (awSAccessKeyId == null) {
            throw new ApiException("Missing the required parameter 'awSAccessKeyId' when calling pOSTCreateDomain(Async)");
        }

        // verify the required parameter 'signatureMethod' is set
        if (signatureMethod == null) {
            throw new ApiException("Missing the required parameter 'signatureMethod' when calling pOSTCreateDomain(Async)");
        }

        // verify the required parameter 'signatureVersion' is set
        if (signatureVersion == null) {
            throw new ApiException("Missing the required parameter 'signatureVersion' when calling pOSTCreateDomain(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling pOSTCreateDomain(Async)");
        }

        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling pOSTCreateDomain(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateDomain(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateDomain(Async)");
        }

        return pOSTCreateDomainCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, createDomainRequest, _callback);

    }

    /**
     * 
     * &lt;p&gt; The &lt;code&gt;CreateDomain&lt;/code&gt; operation creates a new domain. The domain name should be unique among the domains associated with the Access Key ID provided in the request. The &lt;code&gt;CreateDomain&lt;/code&gt; operation may take 10 or more seconds to complete. &lt;/p&gt; &lt;note&gt; CreateDomain is an idempotent operation; running it multiple times using the same domain name will not result in an error response. &lt;/note&gt; &lt;p&gt; The client can create up to 100 domains per account. &lt;/p&gt; &lt;p&gt; If the client requires additional domains, go to &lt;a href&#x3D;\&quot;http://aws.amazon.com/contact-us/simpledb-limit-request/\&quot;&gt; http://aws.amazon.com/contact-us/simpledb-limit-request/&lt;/a&gt;. &lt;/p&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param createDomainRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> NumberDomainsExceeded </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTCreateDomain(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, CreateDomainRequest createDomainRequest) throws ApiException {
        pOSTCreateDomainWithHttpInfo(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, createDomainRequest);
    }

    /**
     * 
     * &lt;p&gt; The &lt;code&gt;CreateDomain&lt;/code&gt; operation creates a new domain. The domain name should be unique among the domains associated with the Access Key ID provided in the request. The &lt;code&gt;CreateDomain&lt;/code&gt; operation may take 10 or more seconds to complete. &lt;/p&gt; &lt;note&gt; CreateDomain is an idempotent operation; running it multiple times using the same domain name will not result in an error response. &lt;/note&gt; &lt;p&gt; The client can create up to 100 domains per account. &lt;/p&gt; &lt;p&gt; If the client requires additional domains, go to &lt;a href&#x3D;\&quot;http://aws.amazon.com/contact-us/simpledb-limit-request/\&quot;&gt; http://aws.amazon.com/contact-us/simpledb-limit-request/&lt;/a&gt;. &lt;/p&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param createDomainRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> NumberDomainsExceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTCreateDomainWithHttpInfo(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, CreateDomainRequest createDomainRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateDomainValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, createDomainRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; The &lt;code&gt;CreateDomain&lt;/code&gt; operation creates a new domain. The domain name should be unique among the domains associated with the Access Key ID provided in the request. The &lt;code&gt;CreateDomain&lt;/code&gt; operation may take 10 or more seconds to complete. &lt;/p&gt; &lt;note&gt; CreateDomain is an idempotent operation; running it multiple times using the same domain name will not result in an error response. &lt;/note&gt; &lt;p&gt; The client can create up to 100 domains per account. &lt;/p&gt; &lt;p&gt; If the client requires additional domains, go to &lt;a href&#x3D;\&quot;http://aws.amazon.com/contact-us/simpledb-limit-request/\&quot;&gt; http://aws.amazon.com/contact-us/simpledb-limit-request/&lt;/a&gt;. &lt;/p&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param createDomainRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> NumberDomainsExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateDomainAsync(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, CreateDomainRequest createDomainRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateDomainValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, createDomainRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteAttributes
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param deleteAttributesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> AttributeDoesNotExist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteAttributesCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, DeleteAttributesRequest deleteAttributesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteAttributesRequest;

        // create path and map variables
        String localVarPath = "/#Action=DeleteAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (awSAccessKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AWSAccessKeyId", awSAccessKeyId));
        }

        if (signatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureMethod", signatureMethod));
        }

        if (signatureVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureVersion", signatureVersion));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Timestamp", timestamp));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Signature", signature));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteAttributesValidateBeforeCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, DeleteAttributesRequest deleteAttributesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awSAccessKeyId' is set
        if (awSAccessKeyId == null) {
            throw new ApiException("Missing the required parameter 'awSAccessKeyId' when calling pOSTDeleteAttributes(Async)");
        }

        // verify the required parameter 'signatureMethod' is set
        if (signatureMethod == null) {
            throw new ApiException("Missing the required parameter 'signatureMethod' when calling pOSTDeleteAttributes(Async)");
        }

        // verify the required parameter 'signatureVersion' is set
        if (signatureVersion == null) {
            throw new ApiException("Missing the required parameter 'signatureVersion' when calling pOSTDeleteAttributes(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling pOSTDeleteAttributes(Async)");
        }

        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling pOSTDeleteAttributes(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteAttributes(Async)");
        }

        return pOSTDeleteAttributesCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, deleteAttributesRequest, _callback);

    }

    /**
     * 
     * &lt;p&gt; Deletes one or more attributes associated with an item. If all attributes of the item are deleted, the item is deleted. &lt;/p&gt; &lt;note&gt; If &lt;code&gt;DeleteAttributes&lt;/code&gt; is called without being passed any attributes or values specified, all the attributes for the item are deleted. &lt;/note&gt; &lt;p&gt; &lt;code&gt;DeleteAttributes&lt;/code&gt; is an idempotent operation; running it multiple times on the same item or attribute does not result in an error response. &lt;/p&gt; &lt;p&gt; Because Amazon SimpleDB makes multiple copies of item data and uses an eventual consistency update model, performing a &lt;a&gt;GetAttributes&lt;/a&gt; or &lt;a&gt;Select&lt;/a&gt; operation (read) immediately after a &lt;code&gt;DeleteAttributes&lt;/code&gt; or &lt;a&gt;PutAttributes&lt;/a&gt; operation (write) might not return updated item data. &lt;/p&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param deleteAttributesRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> AttributeDoesNotExist </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTDeleteAttributes(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, DeleteAttributesRequest deleteAttributesRequest) throws ApiException {
        pOSTDeleteAttributesWithHttpInfo(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, deleteAttributesRequest);
    }

    /**
     * 
     * &lt;p&gt; Deletes one or more attributes associated with an item. If all attributes of the item are deleted, the item is deleted. &lt;/p&gt; &lt;note&gt; If &lt;code&gt;DeleteAttributes&lt;/code&gt; is called without being passed any attributes or values specified, all the attributes for the item are deleted. &lt;/note&gt; &lt;p&gt; &lt;code&gt;DeleteAttributes&lt;/code&gt; is an idempotent operation; running it multiple times on the same item or attribute does not result in an error response. &lt;/p&gt; &lt;p&gt; Because Amazon SimpleDB makes multiple copies of item data and uses an eventual consistency update model, performing a &lt;a&gt;GetAttributes&lt;/a&gt; or &lt;a&gt;Select&lt;/a&gt; operation (read) immediately after a &lt;code&gt;DeleteAttributes&lt;/code&gt; or &lt;a&gt;PutAttributes&lt;/a&gt; operation (write) might not return updated item data. &lt;/p&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param deleteAttributesRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> AttributeDoesNotExist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTDeleteAttributesWithHttpInfo(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, DeleteAttributesRequest deleteAttributesRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteAttributesValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, deleteAttributesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; Deletes one or more attributes associated with an item. If all attributes of the item are deleted, the item is deleted. &lt;/p&gt; &lt;note&gt; If &lt;code&gt;DeleteAttributes&lt;/code&gt; is called without being passed any attributes or values specified, all the attributes for the item are deleted. &lt;/note&gt; &lt;p&gt; &lt;code&gt;DeleteAttributes&lt;/code&gt; is an idempotent operation; running it multiple times on the same item or attribute does not result in an error response. &lt;/p&gt; &lt;p&gt; Because Amazon SimpleDB makes multiple copies of item data and uses an eventual consistency update model, performing a &lt;a&gt;GetAttributes&lt;/a&gt; or &lt;a&gt;Select&lt;/a&gt; operation (read) immediately after a &lt;code&gt;DeleteAttributes&lt;/code&gt; or &lt;a&gt;PutAttributes&lt;/a&gt; operation (write) might not return updated item data. &lt;/p&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param deleteAttributesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> AttributeDoesNotExist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteAttributesAsync(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, DeleteAttributesRequest deleteAttributesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteAttributesValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, deleteAttributesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteDomain
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param deleteDomainRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteDomainCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, DeleteDomainRequest deleteDomainRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteDomainRequest;

        // create path and map variables
        String localVarPath = "/#Action=DeleteDomain";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (awSAccessKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AWSAccessKeyId", awSAccessKeyId));
        }

        if (signatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureMethod", signatureMethod));
        }

        if (signatureVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureVersion", signatureVersion));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Timestamp", timestamp));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Signature", signature));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteDomainValidateBeforeCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, DeleteDomainRequest deleteDomainRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awSAccessKeyId' is set
        if (awSAccessKeyId == null) {
            throw new ApiException("Missing the required parameter 'awSAccessKeyId' when calling pOSTDeleteDomain(Async)");
        }

        // verify the required parameter 'signatureMethod' is set
        if (signatureMethod == null) {
            throw new ApiException("Missing the required parameter 'signatureMethod' when calling pOSTDeleteDomain(Async)");
        }

        // verify the required parameter 'signatureVersion' is set
        if (signatureVersion == null) {
            throw new ApiException("Missing the required parameter 'signatureVersion' when calling pOSTDeleteDomain(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling pOSTDeleteDomain(Async)");
        }

        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling pOSTDeleteDomain(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteDomain(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteDomain(Async)");
        }

        return pOSTDeleteDomainCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, deleteDomainRequest, _callback);

    }

    /**
     * 
     * &lt;p&gt; The &lt;code&gt;DeleteDomain&lt;/code&gt; operation deletes a domain. Any items (and their attributes) in the domain are deleted as well. The &lt;code&gt;DeleteDomain&lt;/code&gt; operation might take 10 or more seconds to complete. &lt;/p&gt; &lt;note&gt; Running &lt;code&gt;DeleteDomain&lt;/code&gt; on a domain that does not exist or running the function multiple times using the same domain name will not result in an error response. &lt;/note&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param deleteDomainRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTDeleteDomain(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, DeleteDomainRequest deleteDomainRequest) throws ApiException {
        pOSTDeleteDomainWithHttpInfo(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, deleteDomainRequest);
    }

    /**
     * 
     * &lt;p&gt; The &lt;code&gt;DeleteDomain&lt;/code&gt; operation deletes a domain. Any items (and their attributes) in the domain are deleted as well. The &lt;code&gt;DeleteDomain&lt;/code&gt; operation might take 10 or more seconds to complete. &lt;/p&gt; &lt;note&gt; Running &lt;code&gt;DeleteDomain&lt;/code&gt; on a domain that does not exist or running the function multiple times using the same domain name will not result in an error response. &lt;/note&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param deleteDomainRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTDeleteDomainWithHttpInfo(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, DeleteDomainRequest deleteDomainRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteDomainValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, deleteDomainRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; The &lt;code&gt;DeleteDomain&lt;/code&gt; operation deletes a domain. Any items (and their attributes) in the domain are deleted as well. The &lt;code&gt;DeleteDomain&lt;/code&gt; operation might take 10 or more seconds to complete. &lt;/p&gt; &lt;note&gt; Running &lt;code&gt;DeleteDomain&lt;/code&gt; on a domain that does not exist or running the function multiple times using the same domain name will not result in an error response. &lt;/note&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param deleteDomainRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> MissingParameter </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteDomainAsync(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, DeleteDomainRequest deleteDomainRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteDomainValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, deleteDomainRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDomainMetadata
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param domainMetadataRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDomainMetadataCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, DomainMetadataRequest domainMetadataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainMetadataRequest;

        // create path and map variables
        String localVarPath = "/#Action=DomainMetadata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (awSAccessKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AWSAccessKeyId", awSAccessKeyId));
        }

        if (signatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureMethod", signatureMethod));
        }

        if (signatureVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureVersion", signatureVersion));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Timestamp", timestamp));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Signature", signature));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDomainMetadataValidateBeforeCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, DomainMetadataRequest domainMetadataRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awSAccessKeyId' is set
        if (awSAccessKeyId == null) {
            throw new ApiException("Missing the required parameter 'awSAccessKeyId' when calling pOSTDomainMetadata(Async)");
        }

        // verify the required parameter 'signatureMethod' is set
        if (signatureMethod == null) {
            throw new ApiException("Missing the required parameter 'signatureMethod' when calling pOSTDomainMetadata(Async)");
        }

        // verify the required parameter 'signatureVersion' is set
        if (signatureVersion == null) {
            throw new ApiException("Missing the required parameter 'signatureVersion' when calling pOSTDomainMetadata(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling pOSTDomainMetadata(Async)");
        }

        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling pOSTDomainMetadata(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDomainMetadata(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDomainMetadata(Async)");
        }

        return pOSTDomainMetadataCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, domainMetadataRequest, _callback);

    }

    /**
     * 
     *  Returns information about the domain, including when the domain was created, the number of items and attributes in the domain, and the size of the attribute names and values. 
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param domainMetadataRequest  (optional)
     * @return DomainMetadataResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
     </table>
     */
    public DomainMetadataResult pOSTDomainMetadata(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, DomainMetadataRequest domainMetadataRequest) throws ApiException {
        ApiResponse<DomainMetadataResult> localVarResp = pOSTDomainMetadataWithHttpInfo(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, domainMetadataRequest);
        return localVarResp.getData();
    }

    /**
     * 
     *  Returns information about the domain, including when the domain was created, the number of items and attributes in the domain, and the size of the attribute names and values. 
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param domainMetadataRequest  (optional)
     * @return ApiResponse&lt;DomainMetadataResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainMetadataResult> pOSTDomainMetadataWithHttpInfo(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, DomainMetadataRequest domainMetadataRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTDomainMetadataValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, domainMetadataRequest, null);
        Type localVarReturnType = new TypeToken<DomainMetadataResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Returns information about the domain, including when the domain was created, the number of items and attributes in the domain, and the size of the attribute names and values. 
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param domainMetadataRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDomainMetadataAsync(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, DomainMetadataRequest domainMetadataRequest, final ApiCallback<DomainMetadataResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDomainMetadataValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, domainMetadataRequest, _callback);
        Type localVarReturnType = new TypeToken<DomainMetadataResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTGetAttributes
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param getAttributesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetAttributesCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, GetAttributesRequest getAttributesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getAttributesRequest;

        // create path and map variables
        String localVarPath = "/#Action=GetAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (awSAccessKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AWSAccessKeyId", awSAccessKeyId));
        }

        if (signatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureMethod", signatureMethod));
        }

        if (signatureVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureVersion", signatureVersion));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Timestamp", timestamp));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Signature", signature));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTGetAttributesValidateBeforeCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, GetAttributesRequest getAttributesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awSAccessKeyId' is set
        if (awSAccessKeyId == null) {
            throw new ApiException("Missing the required parameter 'awSAccessKeyId' when calling pOSTGetAttributes(Async)");
        }

        // verify the required parameter 'signatureMethod' is set
        if (signatureMethod == null) {
            throw new ApiException("Missing the required parameter 'signatureMethod' when calling pOSTGetAttributes(Async)");
        }

        // verify the required parameter 'signatureVersion' is set
        if (signatureVersion == null) {
            throw new ApiException("Missing the required parameter 'signatureVersion' when calling pOSTGetAttributes(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling pOSTGetAttributes(Async)");
        }

        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling pOSTGetAttributes(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTGetAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTGetAttributes(Async)");
        }

        return pOSTGetAttributesCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, getAttributesRequest, _callback);

    }

    /**
     * 
     * &lt;p&gt; Returns all of the attributes associated with the specified item. Optionally, the attributes returned can be limited to one or more attributes by specifying an attribute name parameter. &lt;/p&gt; &lt;p&gt; If the item does not exist on the replica that was accessed for this operation, an empty set is returned. The system does not return an error as it cannot guarantee the item does not exist on other replicas. &lt;/p&gt; &lt;note&gt; If GetAttributes is called without being passed any attribute names, all the attributes for the item are returned. &lt;/note&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param getAttributesRequest  (optional)
     * @return GetAttributesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
     </table>
     */
    public GetAttributesResult pOSTGetAttributes(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, GetAttributesRequest getAttributesRequest) throws ApiException {
        ApiResponse<GetAttributesResult> localVarResp = pOSTGetAttributesWithHttpInfo(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, getAttributesRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt; Returns all of the attributes associated with the specified item. Optionally, the attributes returned can be limited to one or more attributes by specifying an attribute name parameter. &lt;/p&gt; &lt;p&gt; If the item does not exist on the replica that was accessed for this operation, an empty set is returned. The system does not return an error as it cannot guarantee the item does not exist on other replicas. &lt;/p&gt; &lt;note&gt; If GetAttributes is called without being passed any attribute names, all the attributes for the item are returned. &lt;/note&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param getAttributesRequest  (optional)
     * @return ApiResponse&lt;GetAttributesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAttributesResult> pOSTGetAttributesWithHttpInfo(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, GetAttributesRequest getAttributesRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTGetAttributesValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, getAttributesRequest, null);
        Type localVarReturnType = new TypeToken<GetAttributesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; Returns all of the attributes associated with the specified item. Optionally, the attributes returned can be limited to one or more attributes by specifying an attribute name parameter. &lt;/p&gt; &lt;p&gt; If the item does not exist on the replica that was accessed for this operation, an empty set is returned. The system does not return an error as it cannot guarantee the item does not exist on other replicas. &lt;/p&gt; &lt;note&gt; If GetAttributes is called without being passed any attribute names, all the attributes for the item are returned. &lt;/note&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param getAttributesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetAttributesAsync(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, GetAttributesRequest getAttributesRequest, final ApiCallback<GetAttributesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTGetAttributesValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, getAttributesRequest, _callback);
        Type localVarReturnType = new TypeToken<GetAttributesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListDomains
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param maxNumberOfDomains Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listDomainsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListDomainsCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, String maxNumberOfDomains, String nextToken, ListDomainsRequest listDomainsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listDomainsRequest;

        // create path and map variables
        String localVarPath = "/#Action=ListDomains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (awSAccessKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AWSAccessKeyId", awSAccessKeyId));
        }

        if (signatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureMethod", signatureMethod));
        }

        if (signatureVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureVersion", signatureVersion));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Timestamp", timestamp));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Signature", signature));
        }

        if (maxNumberOfDomains != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxNumberOfDomains", maxNumberOfDomains));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListDomainsValidateBeforeCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, String maxNumberOfDomains, String nextToken, ListDomainsRequest listDomainsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awSAccessKeyId' is set
        if (awSAccessKeyId == null) {
            throw new ApiException("Missing the required parameter 'awSAccessKeyId' when calling pOSTListDomains(Async)");
        }

        // verify the required parameter 'signatureMethod' is set
        if (signatureMethod == null) {
            throw new ApiException("Missing the required parameter 'signatureMethod' when calling pOSTListDomains(Async)");
        }

        // verify the required parameter 'signatureVersion' is set
        if (signatureVersion == null) {
            throw new ApiException("Missing the required parameter 'signatureVersion' when calling pOSTListDomains(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling pOSTListDomains(Async)");
        }

        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling pOSTListDomains(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListDomains(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListDomains(Async)");
        }

        return pOSTListDomainsCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, maxNumberOfDomains, nextToken, listDomainsRequest, _callback);

    }

    /**
     * 
     *  The &lt;code&gt;ListDomains&lt;/code&gt; operation lists all domains associated with the Access Key ID. It returns domain names up to the limit set by &lt;a href&#x3D;\&quot;#MaxNumberOfDomains\&quot;&gt;MaxNumberOfDomains&lt;/a&gt;. A &lt;a href&#x3D;\&quot;#NextToken\&quot;&gt;NextToken&lt;/a&gt; is returned if there are more than &lt;code&gt;MaxNumberOfDomains&lt;/code&gt; domains. Calling &lt;code&gt;ListDomains&lt;/code&gt; successive times with the &lt;code&gt;NextToken&lt;/code&gt; provided by the operation returns up to &lt;code&gt;MaxNumberOfDomains&lt;/code&gt; more domain names with each successive operation call. 
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param maxNumberOfDomains Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listDomainsRequest  (optional)
     * @return ListDomainsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public ListDomainsResult pOSTListDomains(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, String maxNumberOfDomains, String nextToken, ListDomainsRequest listDomainsRequest) throws ApiException {
        ApiResponse<ListDomainsResult> localVarResp = pOSTListDomainsWithHttpInfo(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, maxNumberOfDomains, nextToken, listDomainsRequest);
        return localVarResp.getData();
    }

    /**
     * 
     *  The &lt;code&gt;ListDomains&lt;/code&gt; operation lists all domains associated with the Access Key ID. It returns domain names up to the limit set by &lt;a href&#x3D;\&quot;#MaxNumberOfDomains\&quot;&gt;MaxNumberOfDomains&lt;/a&gt;. A &lt;a href&#x3D;\&quot;#NextToken\&quot;&gt;NextToken&lt;/a&gt; is returned if there are more than &lt;code&gt;MaxNumberOfDomains&lt;/code&gt; domains. Calling &lt;code&gt;ListDomains&lt;/code&gt; successive times with the &lt;code&gt;NextToken&lt;/code&gt; provided by the operation returns up to &lt;code&gt;MaxNumberOfDomains&lt;/code&gt; more domain names with each successive operation call. 
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param maxNumberOfDomains Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listDomainsRequest  (optional)
     * @return ApiResponse&lt;ListDomainsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListDomainsResult> pOSTListDomainsWithHttpInfo(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, String maxNumberOfDomains, String nextToken, ListDomainsRequest listDomainsRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTListDomainsValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, maxNumberOfDomains, nextToken, listDomainsRequest, null);
        Type localVarReturnType = new TypeToken<ListDomainsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  The &lt;code&gt;ListDomains&lt;/code&gt; operation lists all domains associated with the Access Key ID. It returns domain names up to the limit set by &lt;a href&#x3D;\&quot;#MaxNumberOfDomains\&quot;&gt;MaxNumberOfDomains&lt;/a&gt;. A &lt;a href&#x3D;\&quot;#NextToken\&quot;&gt;NextToken&lt;/a&gt; is returned if there are more than &lt;code&gt;MaxNumberOfDomains&lt;/code&gt; domains. Calling &lt;code&gt;ListDomains&lt;/code&gt; successive times with the &lt;code&gt;NextToken&lt;/code&gt; provided by the operation returns up to &lt;code&gt;MaxNumberOfDomains&lt;/code&gt; more domain names with each successive operation call. 
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param maxNumberOfDomains Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listDomainsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListDomainsAsync(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, String maxNumberOfDomains, String nextToken, ListDomainsRequest listDomainsRequest, final ApiCallback<ListDomainsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListDomainsValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, maxNumberOfDomains, nextToken, listDomainsRequest, _callback);
        Type localVarReturnType = new TypeToken<ListDomainsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTPutAttributes
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param putAttributesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> AttributeDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> NumberItemAttributesExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPutAttributesCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, PutAttributesRequest putAttributesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putAttributesRequest;

        // create path and map variables
        String localVarPath = "/#Action=PutAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (awSAccessKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AWSAccessKeyId", awSAccessKeyId));
        }

        if (signatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureMethod", signatureMethod));
        }

        if (signatureVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureVersion", signatureVersion));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Timestamp", timestamp));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Signature", signature));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTPutAttributesValidateBeforeCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, PutAttributesRequest putAttributesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awSAccessKeyId' is set
        if (awSAccessKeyId == null) {
            throw new ApiException("Missing the required parameter 'awSAccessKeyId' when calling pOSTPutAttributes(Async)");
        }

        // verify the required parameter 'signatureMethod' is set
        if (signatureMethod == null) {
            throw new ApiException("Missing the required parameter 'signatureMethod' when calling pOSTPutAttributes(Async)");
        }

        // verify the required parameter 'signatureVersion' is set
        if (signatureVersion == null) {
            throw new ApiException("Missing the required parameter 'signatureVersion' when calling pOSTPutAttributes(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling pOSTPutAttributes(Async)");
        }

        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling pOSTPutAttributes(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTPutAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTPutAttributes(Async)");
        }

        return pOSTPutAttributesCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, putAttributesRequest, _callback);

    }

    /**
     * 
     * &lt;p&gt; The PutAttributes operation creates or replaces attributes in an item. The client may specify new attributes using a combination of the &lt;code&gt;Attribute.X.Name&lt;/code&gt; and &lt;code&gt;Attribute.X.Value&lt;/code&gt; parameters. The client specifies the first attribute by the parameters &lt;code&gt;Attribute.0.Name&lt;/code&gt; and &lt;code&gt;Attribute.0.Value&lt;/code&gt;, the second attribute by the parameters &lt;code&gt;Attribute.1.Name&lt;/code&gt; and &lt;code&gt;Attribute.1.Value&lt;/code&gt;, and so on. &lt;/p&gt; &lt;p&gt; Attributes are uniquely identified in an item by their name/value combination. For example, a single item can have the attributes &lt;code&gt;{ \&quot;first_name\&quot;, \&quot;first_value\&quot; }&lt;/code&gt; and &lt;code&gt;{ \&quot;first_name\&quot;, second_value\&quot; }&lt;/code&gt;. However, it cannot have two attribute instances where both the &lt;code&gt;Attribute.X.Name&lt;/code&gt; and &lt;code&gt;Attribute.X.Value&lt;/code&gt; are the same. &lt;/p&gt; &lt;p&gt; Optionally, the requestor can supply the &lt;code&gt;Replace&lt;/code&gt; parameter for each individual attribute. Setting this value to &lt;code&gt;true&lt;/code&gt; causes the new attribute value to replace the existing attribute value(s). For example, if an item has the attributes &lt;code&gt;{ &#39;a&#39;, &#39;1&#39; }&lt;/code&gt;, &lt;code&gt;{ &#39;b&#39;, &#39;2&#39;}&lt;/code&gt; and &lt;code&gt;{ &#39;b&#39;, &#39;3&#39; }&lt;/code&gt; and the requestor calls &lt;code&gt;PutAttributes&lt;/code&gt; using the attributes &lt;code&gt;{ &#39;b&#39;, &#39;4&#39; }&lt;/code&gt; with the &lt;code&gt;Replace&lt;/code&gt; parameter set to true, the final attributes of the item are changed to &lt;code&gt;{ &#39;a&#39;, &#39;1&#39; }&lt;/code&gt; and &lt;code&gt;{ &#39;b&#39;, &#39;4&#39; }&lt;/code&gt;, which replaces the previous values of the &#39;b&#39; attribute with the new value. &lt;/p&gt; &lt;note&gt; Using &lt;code&gt;PutAttributes&lt;/code&gt; to replace attribute values that do not exist will not result in an error response. &lt;/note&gt; &lt;p&gt; You cannot specify an empty string as an attribute name. &lt;/p&gt; &lt;p&gt; Because Amazon SimpleDB makes multiple copies of client data and uses an eventual consistency update model, an immediate &lt;a&gt;GetAttributes&lt;/a&gt; or &lt;a&gt;Select&lt;/a&gt; operation (read) immediately after a &lt;a&gt;PutAttributes&lt;/a&gt; or &lt;a&gt;DeleteAttributes&lt;/a&gt; operation (write) might not return the updated data. &lt;/p&gt; &lt;p&gt; The following limitations are enforced for this operation: &lt;ul&gt; &lt;li&gt;256 total attribute name-value pairs per item&lt;/li&gt; &lt;li&gt;One billion attributes per domain&lt;/li&gt; &lt;li&gt;10 GB of total user data storage per domain&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param putAttributesRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> AttributeDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> NumberItemAttributesExceeded </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTPutAttributes(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, PutAttributesRequest putAttributesRequest) throws ApiException {
        pOSTPutAttributesWithHttpInfo(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, putAttributesRequest);
    }

    /**
     * 
     * &lt;p&gt; The PutAttributes operation creates or replaces attributes in an item. The client may specify new attributes using a combination of the &lt;code&gt;Attribute.X.Name&lt;/code&gt; and &lt;code&gt;Attribute.X.Value&lt;/code&gt; parameters. The client specifies the first attribute by the parameters &lt;code&gt;Attribute.0.Name&lt;/code&gt; and &lt;code&gt;Attribute.0.Value&lt;/code&gt;, the second attribute by the parameters &lt;code&gt;Attribute.1.Name&lt;/code&gt; and &lt;code&gt;Attribute.1.Value&lt;/code&gt;, and so on. &lt;/p&gt; &lt;p&gt; Attributes are uniquely identified in an item by their name/value combination. For example, a single item can have the attributes &lt;code&gt;{ \&quot;first_name\&quot;, \&quot;first_value\&quot; }&lt;/code&gt; and &lt;code&gt;{ \&quot;first_name\&quot;, second_value\&quot; }&lt;/code&gt;. However, it cannot have two attribute instances where both the &lt;code&gt;Attribute.X.Name&lt;/code&gt; and &lt;code&gt;Attribute.X.Value&lt;/code&gt; are the same. &lt;/p&gt; &lt;p&gt; Optionally, the requestor can supply the &lt;code&gt;Replace&lt;/code&gt; parameter for each individual attribute. Setting this value to &lt;code&gt;true&lt;/code&gt; causes the new attribute value to replace the existing attribute value(s). For example, if an item has the attributes &lt;code&gt;{ &#39;a&#39;, &#39;1&#39; }&lt;/code&gt;, &lt;code&gt;{ &#39;b&#39;, &#39;2&#39;}&lt;/code&gt; and &lt;code&gt;{ &#39;b&#39;, &#39;3&#39; }&lt;/code&gt; and the requestor calls &lt;code&gt;PutAttributes&lt;/code&gt; using the attributes &lt;code&gt;{ &#39;b&#39;, &#39;4&#39; }&lt;/code&gt; with the &lt;code&gt;Replace&lt;/code&gt; parameter set to true, the final attributes of the item are changed to &lt;code&gt;{ &#39;a&#39;, &#39;1&#39; }&lt;/code&gt; and &lt;code&gt;{ &#39;b&#39;, &#39;4&#39; }&lt;/code&gt;, which replaces the previous values of the &#39;b&#39; attribute with the new value. &lt;/p&gt; &lt;note&gt; Using &lt;code&gt;PutAttributes&lt;/code&gt; to replace attribute values that do not exist will not result in an error response. &lt;/note&gt; &lt;p&gt; You cannot specify an empty string as an attribute name. &lt;/p&gt; &lt;p&gt; Because Amazon SimpleDB makes multiple copies of client data and uses an eventual consistency update model, an immediate &lt;a&gt;GetAttributes&lt;/a&gt; or &lt;a&gt;Select&lt;/a&gt; operation (read) immediately after a &lt;a&gt;PutAttributes&lt;/a&gt; or &lt;a&gt;DeleteAttributes&lt;/a&gt; operation (write) might not return the updated data. &lt;/p&gt; &lt;p&gt; The following limitations are enforced for this operation: &lt;ul&gt; &lt;li&gt;256 total attribute name-value pairs per item&lt;/li&gt; &lt;li&gt;One billion attributes per domain&lt;/li&gt; &lt;li&gt;10 GB of total user data storage per domain&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param putAttributesRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> AttributeDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> NumberItemAttributesExceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTPutAttributesWithHttpInfo(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, PutAttributesRequest putAttributesRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTPutAttributesValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, putAttributesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; The PutAttributes operation creates or replaces attributes in an item. The client may specify new attributes using a combination of the &lt;code&gt;Attribute.X.Name&lt;/code&gt; and &lt;code&gt;Attribute.X.Value&lt;/code&gt; parameters. The client specifies the first attribute by the parameters &lt;code&gt;Attribute.0.Name&lt;/code&gt; and &lt;code&gt;Attribute.0.Value&lt;/code&gt;, the second attribute by the parameters &lt;code&gt;Attribute.1.Name&lt;/code&gt; and &lt;code&gt;Attribute.1.Value&lt;/code&gt;, and so on. &lt;/p&gt; &lt;p&gt; Attributes are uniquely identified in an item by their name/value combination. For example, a single item can have the attributes &lt;code&gt;{ \&quot;first_name\&quot;, \&quot;first_value\&quot; }&lt;/code&gt; and &lt;code&gt;{ \&quot;first_name\&quot;, second_value\&quot; }&lt;/code&gt;. However, it cannot have two attribute instances where both the &lt;code&gt;Attribute.X.Name&lt;/code&gt; and &lt;code&gt;Attribute.X.Value&lt;/code&gt; are the same. &lt;/p&gt; &lt;p&gt; Optionally, the requestor can supply the &lt;code&gt;Replace&lt;/code&gt; parameter for each individual attribute. Setting this value to &lt;code&gt;true&lt;/code&gt; causes the new attribute value to replace the existing attribute value(s). For example, if an item has the attributes &lt;code&gt;{ &#39;a&#39;, &#39;1&#39; }&lt;/code&gt;, &lt;code&gt;{ &#39;b&#39;, &#39;2&#39;}&lt;/code&gt; and &lt;code&gt;{ &#39;b&#39;, &#39;3&#39; }&lt;/code&gt; and the requestor calls &lt;code&gt;PutAttributes&lt;/code&gt; using the attributes &lt;code&gt;{ &#39;b&#39;, &#39;4&#39; }&lt;/code&gt; with the &lt;code&gt;Replace&lt;/code&gt; parameter set to true, the final attributes of the item are changed to &lt;code&gt;{ &#39;a&#39;, &#39;1&#39; }&lt;/code&gt; and &lt;code&gt;{ &#39;b&#39;, &#39;4&#39; }&lt;/code&gt;, which replaces the previous values of the &#39;b&#39; attribute with the new value. &lt;/p&gt; &lt;note&gt; Using &lt;code&gt;PutAttributes&lt;/code&gt; to replace attribute values that do not exist will not result in an error response. &lt;/note&gt; &lt;p&gt; You cannot specify an empty string as an attribute name. &lt;/p&gt; &lt;p&gt; Because Amazon SimpleDB makes multiple copies of client data and uses an eventual consistency update model, an immediate &lt;a&gt;GetAttributes&lt;/a&gt; or &lt;a&gt;Select&lt;/a&gt; operation (read) immediately after a &lt;a&gt;PutAttributes&lt;/a&gt; or &lt;a&gt;DeleteAttributes&lt;/a&gt; operation (write) might not return the updated data. &lt;/p&gt; &lt;p&gt; The following limitations are enforced for this operation: &lt;ul&gt; &lt;li&gt;256 total attribute name-value pairs per item&lt;/li&gt; &lt;li&gt;One billion attributes per domain&lt;/li&gt; &lt;li&gt;10 GB of total user data storage per domain&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param putAttributesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> NoSuchDomain </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> AttributeDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> NumberItemAttributesExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPutAttributesAsync(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, PutAttributesRequest putAttributesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTPutAttributesValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, putAttributesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTSelect
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param nextToken Pagination token (optional)
     * @param selectRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> TooManyRequestedAttributes </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> RequestTimeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSelectCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, String nextToken, SelectRequest selectRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = selectRequest;

        // create path and map variables
        String localVarPath = "/#Action=Select";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (awSAccessKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AWSAccessKeyId", awSAccessKeyId));
        }

        if (signatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureMethod", signatureMethod));
        }

        if (signatureVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignatureVersion", signatureVersion));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Timestamp", timestamp));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Signature", signature));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTSelectValidateBeforeCall(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, String nextToken, SelectRequest selectRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'awSAccessKeyId' is set
        if (awSAccessKeyId == null) {
            throw new ApiException("Missing the required parameter 'awSAccessKeyId' when calling pOSTSelect(Async)");
        }

        // verify the required parameter 'signatureMethod' is set
        if (signatureMethod == null) {
            throw new ApiException("Missing the required parameter 'signatureMethod' when calling pOSTSelect(Async)");
        }

        // verify the required parameter 'signatureVersion' is set
        if (signatureVersion == null) {
            throw new ApiException("Missing the required parameter 'signatureVersion' when calling pOSTSelect(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling pOSTSelect(Async)");
        }

        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling pOSTSelect(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTSelect(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTSelect(Async)");
        }

        return pOSTSelectCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, nextToken, selectRequest, _callback);

    }

    /**
     * 
     * &lt;p&gt; The &lt;code&gt;Select&lt;/code&gt; operation returns a set of attributes for &lt;code&gt;ItemNames&lt;/code&gt; that match the select expression. &lt;code&gt;Select&lt;/code&gt; is similar to the standard SQL SELECT statement. &lt;/p&gt; &lt;p&gt; The total size of the response cannot exceed 1 MB in total size. Amazon SimpleDB automatically adjusts the number of items returned per page to enforce this limit. For example, if the client asks to retrieve 2500 items, but each individual item is 10 kB in size, the system returns 100 items and an appropriate &lt;code&gt;NextToken&lt;/code&gt; so the client can access the next page of results. &lt;/p&gt; &lt;p&gt; For information on how to construct select expressions, see Using Select to Create Amazon SimpleDB Queries in the Developer Guide. &lt;/p&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param nextToken Pagination token (optional)
     * @param selectRequest  (optional)
     * @return SelectResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> TooManyRequestedAttributes </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> RequestTimeout </td><td>  -  </td></tr>
     </table>
     */
    public SelectResult pOSTSelect(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, String nextToken, SelectRequest selectRequest) throws ApiException {
        ApiResponse<SelectResult> localVarResp = pOSTSelectWithHttpInfo(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, nextToken, selectRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt; The &lt;code&gt;Select&lt;/code&gt; operation returns a set of attributes for &lt;code&gt;ItemNames&lt;/code&gt; that match the select expression. &lt;code&gt;Select&lt;/code&gt; is similar to the standard SQL SELECT statement. &lt;/p&gt; &lt;p&gt; The total size of the response cannot exceed 1 MB in total size. Amazon SimpleDB automatically adjusts the number of items returned per page to enforce this limit. For example, if the client asks to retrieve 2500 items, but each individual item is 10 kB in size, the system returns 100 items and an appropriate &lt;code&gt;NextToken&lt;/code&gt; so the client can access the next page of results. &lt;/p&gt; &lt;p&gt; For information on how to construct select expressions, see Using Select to Create Amazon SimpleDB Queries in the Developer Guide. &lt;/p&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param nextToken Pagination token (optional)
     * @param selectRequest  (optional)
     * @return ApiResponse&lt;SelectResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> TooManyRequestedAttributes </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> RequestTimeout </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SelectResult> pOSTSelectWithHttpInfo(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, String nextToken, SelectRequest selectRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTSelectValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, nextToken, selectRequest, null);
        Type localVarReturnType = new TypeToken<SelectResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; The &lt;code&gt;Select&lt;/code&gt; operation returns a set of attributes for &lt;code&gt;ItemNames&lt;/code&gt; that match the select expression. &lt;code&gt;Select&lt;/code&gt; is similar to the standard SQL SELECT statement. &lt;/p&gt; &lt;p&gt; The total size of the response cannot exceed 1 MB in total size. Amazon SimpleDB automatically adjusts the number of items returned per page to enforce this limit. For example, if the client asks to retrieve 2500 items, but each individual item is 10 kB in size, the system returns 100 items and an appropriate &lt;code&gt;NextToken&lt;/code&gt; so the client can access the next page of results. &lt;/p&gt; &lt;p&gt; For information on how to construct select expressions, see Using Select to Create Amazon SimpleDB Queries in the Developer Guide. &lt;/p&gt;
     * @param awSAccessKeyId  (required)
     * @param signatureMethod  (required)
     * @param signatureVersion  (required)
     * @param timestamp  (required)
     * @param signature  (required)
     * @param action  (required)
     * @param version  (required)
     * @param nextToken Pagination token (optional)
     * @param selectRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> TooManyRequestedAttributes </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> RequestTimeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSelectAsync(String awSAccessKeyId, String signatureMethod, String signatureVersion, String timestamp, String signature, String action, String version, String nextToken, SelectRequest selectRequest, final ApiCallback<SelectResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTSelectValidateBeforeCall(awSAccessKeyId, signatureMethod, signatureVersion, timestamp, signature, action, version, nextToken, selectRequest, _callback);
        Type localVarReturnType = new TypeToken<SelectResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
