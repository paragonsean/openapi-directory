# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SelectRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, select_expression: str=None, next_token: str=None, consistent_read: bool=None):
        """SelectRequest - a model defined in OpenAPI

        :param select_expression: The select_expression of this SelectRequest.
        :param next_token: The next_token of this SelectRequest.
        :param consistent_read: The consistent_read of this SelectRequest.
        """
        self.openapi_types = {
            'select_expression': str,
            'next_token': str,
            'consistent_read': bool
        }

        self.attribute_map = {
            'select_expression': 'SelectExpression',
            'next_token': 'NextToken',
            'consistent_read': 'ConsistentRead'
        }

        self._select_expression = select_expression
        self._next_token = next_token
        self._consistent_read = consistent_read

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SelectRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SelectRequest of this SelectRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def select_expression(self):
        """Gets the select_expression of this SelectRequest.


        :return: The select_expression of this SelectRequest.
        :rtype: str
        """
        return self._select_expression

    @select_expression.setter
    def select_expression(self, select_expression):
        """Sets the select_expression of this SelectRequest.


        :param select_expression: The select_expression of this SelectRequest.
        :type select_expression: str
        """
        if select_expression is None:
            raise ValueError("Invalid value for `select_expression`, must not be `None`")

        self._select_expression = select_expression

    @property
    def next_token(self):
        """Gets the next_token of this SelectRequest.


        :return: The next_token of this SelectRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this SelectRequest.


        :param next_token: The next_token of this SelectRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def consistent_read(self):
        """Gets the consistent_read of this SelectRequest.


        :return: The consistent_read of this SelectRequest.
        :rtype: bool
        """
        return self._consistent_read

    @consistent_read.setter
    def consistent_read(self, consistent_read):
        """Sets the consistent_read of this SelectRequest.


        :param consistent_read: The consistent_read of this SelectRequest.
        :type consistent_read: bool
        """

        self._consistent_read = consistent_read
