# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.put_attributes_request_expected import PutAttributesRequestExpected
from openapi_server import util


class PutAttributesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_name: str=None, item_name: str=None, attributes: List=None, expected: PutAttributesRequestExpected=None):
        """PutAttributesRequest - a model defined in OpenAPI

        :param domain_name: The domain_name of this PutAttributesRequest.
        :param item_name: The item_name of this PutAttributesRequest.
        :param attributes: The attributes of this PutAttributesRequest.
        :param expected: The expected of this PutAttributesRequest.
        """
        self.openapi_types = {
            'domain_name': str,
            'item_name': str,
            'attributes': List,
            'expected': PutAttributesRequestExpected
        }

        self.attribute_map = {
            'domain_name': 'DomainName',
            'item_name': 'ItemName',
            'attributes': 'Attributes',
            'expected': 'Expected'
        }

        self._domain_name = domain_name
        self._item_name = item_name
        self._attributes = attributes
        self._expected = expected

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutAttributesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutAttributesRequest of this PutAttributesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_name(self):
        """Gets the domain_name of this PutAttributesRequest.


        :return: The domain_name of this PutAttributesRequest.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this PutAttributesRequest.


        :param domain_name: The domain_name of this PutAttributesRequest.
        :type domain_name: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")

        self._domain_name = domain_name

    @property
    def item_name(self):
        """Gets the item_name of this PutAttributesRequest.


        :return: The item_name of this PutAttributesRequest.
        :rtype: str
        """
        return self._item_name

    @item_name.setter
    def item_name(self, item_name):
        """Sets the item_name of this PutAttributesRequest.


        :param item_name: The item_name of this PutAttributesRequest.
        :type item_name: str
        """
        if item_name is None:
            raise ValueError("Invalid value for `item_name`, must not be `None`")

        self._item_name = item_name

    @property
    def attributes(self):
        """Gets the attributes of this PutAttributesRequest.


        :return: The attributes of this PutAttributesRequest.
        :rtype: List
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this PutAttributesRequest.


        :param attributes: The attributes of this PutAttributesRequest.
        :type attributes: List
        """
        if attributes is None:
            raise ValueError("Invalid value for `attributes`, must not be `None`")

        self._attributes = attributes

    @property
    def expected(self):
        """Gets the expected of this PutAttributesRequest.


        :return: The expected of this PutAttributesRequest.
        :rtype: PutAttributesRequestExpected
        """
        return self._expected

    @expected.setter
    def expected(self, expected):
        """Sets the expected of this PutAttributesRequest.


        :param expected: The expected of this PutAttributesRequest.
        :type expected: PutAttributesRequestExpected
        """

        self._expected = expected
