# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.environment_last_update import EnvironmentLastUpdate
from openapi_server.models.environment_logging_configuration import EnvironmentLoggingConfiguration
from openapi_server.models.environment_network_configuration import EnvironmentNetworkConfiguration
from openapi_server.models.environment_status import EnvironmentStatus
from openapi_server.models.webserver_access_mode import WebserverAccessMode
from openapi_server import util


class Environment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, airflow_configuration_options: Dict=None, airflow_version: str=None, arn: str=None, created_at: datetime=None, dag_s3_path: str=None, environment_class: str=None, execution_role_arn: str=None, kms_key: str=None, last_update: EnvironmentLastUpdate=None, logging_configuration: EnvironmentLoggingConfiguration=None, max_workers: int=None, min_workers: int=None, name: str=None, network_configuration: EnvironmentNetworkConfiguration=None, plugins_s3_object_version: str=None, plugins_s3_path: str=None, requirements_s3_object_version: str=None, requirements_s3_path: str=None, schedulers: int=None, service_role_arn: str=None, source_bucket_arn: str=None, startup_script_s3_object_version: str=None, startup_script_s3_path: str=None, status: EnvironmentStatus=None, tags: Dict=None, webserver_access_mode: WebserverAccessMode=None, webserver_url: str=None, weekly_maintenance_window_start: str=None):
        """Environment - a model defined in OpenAPI

        :param airflow_configuration_options: The airflow_configuration_options of this Environment.
        :param airflow_version: The airflow_version of this Environment.
        :param arn: The arn of this Environment.
        :param created_at: The created_at of this Environment.
        :param dag_s3_path: The dag_s3_path of this Environment.
        :param environment_class: The environment_class of this Environment.
        :param execution_role_arn: The execution_role_arn of this Environment.
        :param kms_key: The kms_key of this Environment.
        :param last_update: The last_update of this Environment.
        :param logging_configuration: The logging_configuration of this Environment.
        :param max_workers: The max_workers of this Environment.
        :param min_workers: The min_workers of this Environment.
        :param name: The name of this Environment.
        :param network_configuration: The network_configuration of this Environment.
        :param plugins_s3_object_version: The plugins_s3_object_version of this Environment.
        :param plugins_s3_path: The plugins_s3_path of this Environment.
        :param requirements_s3_object_version: The requirements_s3_object_version of this Environment.
        :param requirements_s3_path: The requirements_s3_path of this Environment.
        :param schedulers: The schedulers of this Environment.
        :param service_role_arn: The service_role_arn of this Environment.
        :param source_bucket_arn: The source_bucket_arn of this Environment.
        :param startup_script_s3_object_version: The startup_script_s3_object_version of this Environment.
        :param startup_script_s3_path: The startup_script_s3_path of this Environment.
        :param status: The status of this Environment.
        :param tags: The tags of this Environment.
        :param webserver_access_mode: The webserver_access_mode of this Environment.
        :param webserver_url: The webserver_url of this Environment.
        :param weekly_maintenance_window_start: The weekly_maintenance_window_start of this Environment.
        """
        self.openapi_types = {
            'airflow_configuration_options': Dict,
            'airflow_version': str,
            'arn': str,
            'created_at': datetime,
            'dag_s3_path': str,
            'environment_class': str,
            'execution_role_arn': str,
            'kms_key': str,
            'last_update': EnvironmentLastUpdate,
            'logging_configuration': EnvironmentLoggingConfiguration,
            'max_workers': int,
            'min_workers': int,
            'name': str,
            'network_configuration': EnvironmentNetworkConfiguration,
            'plugins_s3_object_version': str,
            'plugins_s3_path': str,
            'requirements_s3_object_version': str,
            'requirements_s3_path': str,
            'schedulers': int,
            'service_role_arn': str,
            'source_bucket_arn': str,
            'startup_script_s3_object_version': str,
            'startup_script_s3_path': str,
            'status': EnvironmentStatus,
            'tags': Dict,
            'webserver_access_mode': WebserverAccessMode,
            'webserver_url': str,
            'weekly_maintenance_window_start': str
        }

        self.attribute_map = {
            'airflow_configuration_options': 'AirflowConfigurationOptions',
            'airflow_version': 'AirflowVersion',
            'arn': 'Arn',
            'created_at': 'CreatedAt',
            'dag_s3_path': 'DagS3Path',
            'environment_class': 'EnvironmentClass',
            'execution_role_arn': 'ExecutionRoleArn',
            'kms_key': 'KmsKey',
            'last_update': 'LastUpdate',
            'logging_configuration': 'LoggingConfiguration',
            'max_workers': 'MaxWorkers',
            'min_workers': 'MinWorkers',
            'name': 'Name',
            'network_configuration': 'NetworkConfiguration',
            'plugins_s3_object_version': 'PluginsS3ObjectVersion',
            'plugins_s3_path': 'PluginsS3Path',
            'requirements_s3_object_version': 'RequirementsS3ObjectVersion',
            'requirements_s3_path': 'RequirementsS3Path',
            'schedulers': 'Schedulers',
            'service_role_arn': 'ServiceRoleArn',
            'source_bucket_arn': 'SourceBucketArn',
            'startup_script_s3_object_version': 'StartupScriptS3ObjectVersion',
            'startup_script_s3_path': 'StartupScriptS3Path',
            'status': 'Status',
            'tags': 'Tags',
            'webserver_access_mode': 'WebserverAccessMode',
            'webserver_url': 'WebserverUrl',
            'weekly_maintenance_window_start': 'WeeklyMaintenanceWindowStart'
        }

        self._airflow_configuration_options = airflow_configuration_options
        self._airflow_version = airflow_version
        self._arn = arn
        self._created_at = created_at
        self._dag_s3_path = dag_s3_path
        self._environment_class = environment_class
        self._execution_role_arn = execution_role_arn
        self._kms_key = kms_key
        self._last_update = last_update
        self._logging_configuration = logging_configuration
        self._max_workers = max_workers
        self._min_workers = min_workers
        self._name = name
        self._network_configuration = network_configuration
        self._plugins_s3_object_version = plugins_s3_object_version
        self._plugins_s3_path = plugins_s3_path
        self._requirements_s3_object_version = requirements_s3_object_version
        self._requirements_s3_path = requirements_s3_path
        self._schedulers = schedulers
        self._service_role_arn = service_role_arn
        self._source_bucket_arn = source_bucket_arn
        self._startup_script_s3_object_version = startup_script_s3_object_version
        self._startup_script_s3_path = startup_script_s3_path
        self._status = status
        self._tags = tags
        self._webserver_access_mode = webserver_access_mode
        self._webserver_url = webserver_url
        self._weekly_maintenance_window_start = weekly_maintenance_window_start

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Environment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Environment of this Environment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def airflow_configuration_options(self):
        """Gets the airflow_configuration_options of this Environment.


        :return: The airflow_configuration_options of this Environment.
        :rtype: Dict
        """
        return self._airflow_configuration_options

    @airflow_configuration_options.setter
    def airflow_configuration_options(self, airflow_configuration_options):
        """Sets the airflow_configuration_options of this Environment.


        :param airflow_configuration_options: The airflow_configuration_options of this Environment.
        :type airflow_configuration_options: Dict
        """

        self._airflow_configuration_options = airflow_configuration_options

    @property
    def airflow_version(self):
        """Gets the airflow_version of this Environment.


        :return: The airflow_version of this Environment.
        :rtype: str
        """
        return self._airflow_version

    @airflow_version.setter
    def airflow_version(self, airflow_version):
        """Sets the airflow_version of this Environment.


        :param airflow_version: The airflow_version of this Environment.
        :type airflow_version: str
        """

        self._airflow_version = airflow_version

    @property
    def arn(self):
        """Gets the arn of this Environment.


        :return: The arn of this Environment.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this Environment.


        :param arn: The arn of this Environment.
        :type arn: str
        """

        self._arn = arn

    @property
    def created_at(self):
        """Gets the created_at of this Environment.


        :return: The created_at of this Environment.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Environment.


        :param created_at: The created_at of this Environment.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def dag_s3_path(self):
        """Gets the dag_s3_path of this Environment.


        :return: The dag_s3_path of this Environment.
        :rtype: str
        """
        return self._dag_s3_path

    @dag_s3_path.setter
    def dag_s3_path(self, dag_s3_path):
        """Sets the dag_s3_path of this Environment.


        :param dag_s3_path: The dag_s3_path of this Environment.
        :type dag_s3_path: str
        """

        self._dag_s3_path = dag_s3_path

    @property
    def environment_class(self):
        """Gets the environment_class of this Environment.


        :return: The environment_class of this Environment.
        :rtype: str
        """
        return self._environment_class

    @environment_class.setter
    def environment_class(self, environment_class):
        """Sets the environment_class of this Environment.


        :param environment_class: The environment_class of this Environment.
        :type environment_class: str
        """

        self._environment_class = environment_class

    @property
    def execution_role_arn(self):
        """Gets the execution_role_arn of this Environment.


        :return: The execution_role_arn of this Environment.
        :rtype: str
        """
        return self._execution_role_arn

    @execution_role_arn.setter
    def execution_role_arn(self, execution_role_arn):
        """Sets the execution_role_arn of this Environment.


        :param execution_role_arn: The execution_role_arn of this Environment.
        :type execution_role_arn: str
        """

        self._execution_role_arn = execution_role_arn

    @property
    def kms_key(self):
        """Gets the kms_key of this Environment.


        :return: The kms_key of this Environment.
        :rtype: str
        """
        return self._kms_key

    @kms_key.setter
    def kms_key(self, kms_key):
        """Sets the kms_key of this Environment.


        :param kms_key: The kms_key of this Environment.
        :type kms_key: str
        """

        self._kms_key = kms_key

    @property
    def last_update(self):
        """Gets the last_update of this Environment.


        :return: The last_update of this Environment.
        :rtype: EnvironmentLastUpdate
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this Environment.


        :param last_update: The last_update of this Environment.
        :type last_update: EnvironmentLastUpdate
        """

        self._last_update = last_update

    @property
    def logging_configuration(self):
        """Gets the logging_configuration of this Environment.


        :return: The logging_configuration of this Environment.
        :rtype: EnvironmentLoggingConfiguration
        """
        return self._logging_configuration

    @logging_configuration.setter
    def logging_configuration(self, logging_configuration):
        """Sets the logging_configuration of this Environment.


        :param logging_configuration: The logging_configuration of this Environment.
        :type logging_configuration: EnvironmentLoggingConfiguration
        """

        self._logging_configuration = logging_configuration

    @property
    def max_workers(self):
        """Gets the max_workers of this Environment.


        :return: The max_workers of this Environment.
        :rtype: int
        """
        return self._max_workers

    @max_workers.setter
    def max_workers(self, max_workers):
        """Sets the max_workers of this Environment.


        :param max_workers: The max_workers of this Environment.
        :type max_workers: int
        """

        self._max_workers = max_workers

    @property
    def min_workers(self):
        """Gets the min_workers of this Environment.


        :return: The min_workers of this Environment.
        :rtype: int
        """
        return self._min_workers

    @min_workers.setter
    def min_workers(self, min_workers):
        """Sets the min_workers of this Environment.


        :param min_workers: The min_workers of this Environment.
        :type min_workers: int
        """

        self._min_workers = min_workers

    @property
    def name(self):
        """Gets the name of this Environment.


        :return: The name of this Environment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Environment.


        :param name: The name of this Environment.
        :type name: str
        """

        self._name = name

    @property
    def network_configuration(self):
        """Gets the network_configuration of this Environment.


        :return: The network_configuration of this Environment.
        :rtype: EnvironmentNetworkConfiguration
        """
        return self._network_configuration

    @network_configuration.setter
    def network_configuration(self, network_configuration):
        """Sets the network_configuration of this Environment.


        :param network_configuration: The network_configuration of this Environment.
        :type network_configuration: EnvironmentNetworkConfiguration
        """

        self._network_configuration = network_configuration

    @property
    def plugins_s3_object_version(self):
        """Gets the plugins_s3_object_version of this Environment.


        :return: The plugins_s3_object_version of this Environment.
        :rtype: str
        """
        return self._plugins_s3_object_version

    @plugins_s3_object_version.setter
    def plugins_s3_object_version(self, plugins_s3_object_version):
        """Sets the plugins_s3_object_version of this Environment.


        :param plugins_s3_object_version: The plugins_s3_object_version of this Environment.
        :type plugins_s3_object_version: str
        """

        self._plugins_s3_object_version = plugins_s3_object_version

    @property
    def plugins_s3_path(self):
        """Gets the plugins_s3_path of this Environment.


        :return: The plugins_s3_path of this Environment.
        :rtype: str
        """
        return self._plugins_s3_path

    @plugins_s3_path.setter
    def plugins_s3_path(self, plugins_s3_path):
        """Sets the plugins_s3_path of this Environment.


        :param plugins_s3_path: The plugins_s3_path of this Environment.
        :type plugins_s3_path: str
        """

        self._plugins_s3_path = plugins_s3_path

    @property
    def requirements_s3_object_version(self):
        """Gets the requirements_s3_object_version of this Environment.


        :return: The requirements_s3_object_version of this Environment.
        :rtype: str
        """
        return self._requirements_s3_object_version

    @requirements_s3_object_version.setter
    def requirements_s3_object_version(self, requirements_s3_object_version):
        """Sets the requirements_s3_object_version of this Environment.


        :param requirements_s3_object_version: The requirements_s3_object_version of this Environment.
        :type requirements_s3_object_version: str
        """

        self._requirements_s3_object_version = requirements_s3_object_version

    @property
    def requirements_s3_path(self):
        """Gets the requirements_s3_path of this Environment.


        :return: The requirements_s3_path of this Environment.
        :rtype: str
        """
        return self._requirements_s3_path

    @requirements_s3_path.setter
    def requirements_s3_path(self, requirements_s3_path):
        """Sets the requirements_s3_path of this Environment.


        :param requirements_s3_path: The requirements_s3_path of this Environment.
        :type requirements_s3_path: str
        """

        self._requirements_s3_path = requirements_s3_path

    @property
    def schedulers(self):
        """Gets the schedulers of this Environment.


        :return: The schedulers of this Environment.
        :rtype: int
        """
        return self._schedulers

    @schedulers.setter
    def schedulers(self, schedulers):
        """Sets the schedulers of this Environment.


        :param schedulers: The schedulers of this Environment.
        :type schedulers: int
        """

        self._schedulers = schedulers

    @property
    def service_role_arn(self):
        """Gets the service_role_arn of this Environment.


        :return: The service_role_arn of this Environment.
        :rtype: str
        """
        return self._service_role_arn

    @service_role_arn.setter
    def service_role_arn(self, service_role_arn):
        """Sets the service_role_arn of this Environment.


        :param service_role_arn: The service_role_arn of this Environment.
        :type service_role_arn: str
        """

        self._service_role_arn = service_role_arn

    @property
    def source_bucket_arn(self):
        """Gets the source_bucket_arn of this Environment.


        :return: The source_bucket_arn of this Environment.
        :rtype: str
        """
        return self._source_bucket_arn

    @source_bucket_arn.setter
    def source_bucket_arn(self, source_bucket_arn):
        """Sets the source_bucket_arn of this Environment.


        :param source_bucket_arn: The source_bucket_arn of this Environment.
        :type source_bucket_arn: str
        """

        self._source_bucket_arn = source_bucket_arn

    @property
    def startup_script_s3_object_version(self):
        """Gets the startup_script_s3_object_version of this Environment.


        :return: The startup_script_s3_object_version of this Environment.
        :rtype: str
        """
        return self._startup_script_s3_object_version

    @startup_script_s3_object_version.setter
    def startup_script_s3_object_version(self, startup_script_s3_object_version):
        """Sets the startup_script_s3_object_version of this Environment.


        :param startup_script_s3_object_version: The startup_script_s3_object_version of this Environment.
        :type startup_script_s3_object_version: str
        """

        self._startup_script_s3_object_version = startup_script_s3_object_version

    @property
    def startup_script_s3_path(self):
        """Gets the startup_script_s3_path of this Environment.


        :return: The startup_script_s3_path of this Environment.
        :rtype: str
        """
        return self._startup_script_s3_path

    @startup_script_s3_path.setter
    def startup_script_s3_path(self, startup_script_s3_path):
        """Sets the startup_script_s3_path of this Environment.


        :param startup_script_s3_path: The startup_script_s3_path of this Environment.
        :type startup_script_s3_path: str
        """

        self._startup_script_s3_path = startup_script_s3_path

    @property
    def status(self):
        """Gets the status of this Environment.


        :return: The status of this Environment.
        :rtype: EnvironmentStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Environment.


        :param status: The status of this Environment.
        :type status: EnvironmentStatus
        """

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this Environment.


        :return: The tags of this Environment.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Environment.


        :param tags: The tags of this Environment.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def webserver_access_mode(self):
        """Gets the webserver_access_mode of this Environment.


        :return: The webserver_access_mode of this Environment.
        :rtype: WebserverAccessMode
        """
        return self._webserver_access_mode

    @webserver_access_mode.setter
    def webserver_access_mode(self, webserver_access_mode):
        """Sets the webserver_access_mode of this Environment.


        :param webserver_access_mode: The webserver_access_mode of this Environment.
        :type webserver_access_mode: WebserverAccessMode
        """

        self._webserver_access_mode = webserver_access_mode

    @property
    def webserver_url(self):
        """Gets the webserver_url of this Environment.


        :return: The webserver_url of this Environment.
        :rtype: str
        """
        return self._webserver_url

    @webserver_url.setter
    def webserver_url(self, webserver_url):
        """Sets the webserver_url of this Environment.


        :param webserver_url: The webserver_url of this Environment.
        :type webserver_url: str
        """

        self._webserver_url = webserver_url

    @property
    def weekly_maintenance_window_start(self):
        """Gets the weekly_maintenance_window_start of this Environment.


        :return: The weekly_maintenance_window_start of this Environment.
        :rtype: str
        """
        return self._weekly_maintenance_window_start

    @weekly_maintenance_window_start.setter
    def weekly_maintenance_window_start(self, weekly_maintenance_window_start):
        """Sets the weekly_maintenance_window_start of this Environment.


        :param weekly_maintenance_window_start: The weekly_maintenance_window_start of this Environment.
        :type weekly_maintenance_window_start: str
        """

        self._weekly_maintenance_window_start = weekly_maintenance_window_start
