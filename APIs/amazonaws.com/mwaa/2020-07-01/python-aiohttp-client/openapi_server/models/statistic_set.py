# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StatisticSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, maximum: float=None, minimum: float=None, sample_count: int=None, sum: float=None):
        """StatisticSet - a model defined in OpenAPI

        :param maximum: The maximum of this StatisticSet.
        :param minimum: The minimum of this StatisticSet.
        :param sample_count: The sample_count of this StatisticSet.
        :param sum: The sum of this StatisticSet.
        """
        self.openapi_types = {
            'maximum': float,
            'minimum': float,
            'sample_count': int,
            'sum': float
        }

        self.attribute_map = {
            'maximum': 'Maximum',
            'minimum': 'Minimum',
            'sample_count': 'SampleCount',
            'sum': 'Sum'
        }

        self._maximum = maximum
        self._minimum = minimum
        self._sample_count = sample_count
        self._sum = sum

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StatisticSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StatisticSet of this StatisticSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def maximum(self):
        """Gets the maximum of this StatisticSet.


        :return: The maximum of this StatisticSet.
        :rtype: float
        """
        return self._maximum

    @maximum.setter
    def maximum(self, maximum):
        """Sets the maximum of this StatisticSet.


        :param maximum: The maximum of this StatisticSet.
        :type maximum: float
        """

        self._maximum = maximum

    @property
    def minimum(self):
        """Gets the minimum of this StatisticSet.


        :return: The minimum of this StatisticSet.
        :rtype: float
        """
        return self._minimum

    @minimum.setter
    def minimum(self, minimum):
        """Sets the minimum of this StatisticSet.


        :param minimum: The minimum of this StatisticSet.
        :type minimum: float
        """

        self._minimum = minimum

    @property
    def sample_count(self):
        """Gets the sample_count of this StatisticSet.


        :return: The sample_count of this StatisticSet.
        :rtype: int
        """
        return self._sample_count

    @sample_count.setter
    def sample_count(self, sample_count):
        """Sets the sample_count of this StatisticSet.


        :param sample_count: The sample_count of this StatisticSet.
        :type sample_count: int
        """

        self._sample_count = sample_count

    @property
    def sum(self):
        """Gets the sum of this StatisticSet.


        :return: The sum of this StatisticSet.
        :rtype: float
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """Sets the sum of this StatisticSet.


        :param sum: The sum of this StatisticSet.
        :type sum: float
        """

        self._sum = sum
