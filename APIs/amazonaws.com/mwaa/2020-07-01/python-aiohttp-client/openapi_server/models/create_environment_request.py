# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_environment_request_logging_configuration import CreateEnvironmentRequestLoggingConfiguration
from openapi_server.models.create_environment_request_network_configuration import CreateEnvironmentRequestNetworkConfiguration
import re
from openapi_server import util


class CreateEnvironmentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, airflow_configuration_options: Dict[str, str]=None, airflow_version: str=None, dag_s3_path: str=None, environment_class: str=None, execution_role_arn: str=None, kms_key: str=None, logging_configuration: CreateEnvironmentRequestLoggingConfiguration=None, max_workers: int=None, min_workers: int=None, network_configuration: CreateEnvironmentRequestNetworkConfiguration=None, plugins_s3_object_version: str=None, plugins_s3_path: str=None, requirements_s3_object_version: str=None, requirements_s3_path: str=None, schedulers: int=None, source_bucket_arn: str=None, startup_script_s3_object_version: str=None, startup_script_s3_path: str=None, tags: Dict[str, str]=None, webserver_access_mode: str=None, weekly_maintenance_window_start: str=None):
        """CreateEnvironmentRequest - a model defined in OpenAPI

        :param airflow_configuration_options: The airflow_configuration_options of this CreateEnvironmentRequest.
        :param airflow_version: The airflow_version of this CreateEnvironmentRequest.
        :param dag_s3_path: The dag_s3_path of this CreateEnvironmentRequest.
        :param environment_class: The environment_class of this CreateEnvironmentRequest.
        :param execution_role_arn: The execution_role_arn of this CreateEnvironmentRequest.
        :param kms_key: The kms_key of this CreateEnvironmentRequest.
        :param logging_configuration: The logging_configuration of this CreateEnvironmentRequest.
        :param max_workers: The max_workers of this CreateEnvironmentRequest.
        :param min_workers: The min_workers of this CreateEnvironmentRequest.
        :param network_configuration: The network_configuration of this CreateEnvironmentRequest.
        :param plugins_s3_object_version: The plugins_s3_object_version of this CreateEnvironmentRequest.
        :param plugins_s3_path: The plugins_s3_path of this CreateEnvironmentRequest.
        :param requirements_s3_object_version: The requirements_s3_object_version of this CreateEnvironmentRequest.
        :param requirements_s3_path: The requirements_s3_path of this CreateEnvironmentRequest.
        :param schedulers: The schedulers of this CreateEnvironmentRequest.
        :param source_bucket_arn: The source_bucket_arn of this CreateEnvironmentRequest.
        :param startup_script_s3_object_version: The startup_script_s3_object_version of this CreateEnvironmentRequest.
        :param startup_script_s3_path: The startup_script_s3_path of this CreateEnvironmentRequest.
        :param tags: The tags of this CreateEnvironmentRequest.
        :param webserver_access_mode: The webserver_access_mode of this CreateEnvironmentRequest.
        :param weekly_maintenance_window_start: The weekly_maintenance_window_start of this CreateEnvironmentRequest.
        """
        self.openapi_types = {
            'airflow_configuration_options': Dict[str, str],
            'airflow_version': str,
            'dag_s3_path': str,
            'environment_class': str,
            'execution_role_arn': str,
            'kms_key': str,
            'logging_configuration': CreateEnvironmentRequestLoggingConfiguration,
            'max_workers': int,
            'min_workers': int,
            'network_configuration': CreateEnvironmentRequestNetworkConfiguration,
            'plugins_s3_object_version': str,
            'plugins_s3_path': str,
            'requirements_s3_object_version': str,
            'requirements_s3_path': str,
            'schedulers': int,
            'source_bucket_arn': str,
            'startup_script_s3_object_version': str,
            'startup_script_s3_path': str,
            'tags': Dict[str, str],
            'webserver_access_mode': str,
            'weekly_maintenance_window_start': str
        }

        self.attribute_map = {
            'airflow_configuration_options': 'AirflowConfigurationOptions',
            'airflow_version': 'AirflowVersion',
            'dag_s3_path': 'DagS3Path',
            'environment_class': 'EnvironmentClass',
            'execution_role_arn': 'ExecutionRoleArn',
            'kms_key': 'KmsKey',
            'logging_configuration': 'LoggingConfiguration',
            'max_workers': 'MaxWorkers',
            'min_workers': 'MinWorkers',
            'network_configuration': 'NetworkConfiguration',
            'plugins_s3_object_version': 'PluginsS3ObjectVersion',
            'plugins_s3_path': 'PluginsS3Path',
            'requirements_s3_object_version': 'RequirementsS3ObjectVersion',
            'requirements_s3_path': 'RequirementsS3Path',
            'schedulers': 'Schedulers',
            'source_bucket_arn': 'SourceBucketArn',
            'startup_script_s3_object_version': 'StartupScriptS3ObjectVersion',
            'startup_script_s3_path': 'StartupScriptS3Path',
            'tags': 'Tags',
            'webserver_access_mode': 'WebserverAccessMode',
            'weekly_maintenance_window_start': 'WeeklyMaintenanceWindowStart'
        }

        self._airflow_configuration_options = airflow_configuration_options
        self._airflow_version = airflow_version
        self._dag_s3_path = dag_s3_path
        self._environment_class = environment_class
        self._execution_role_arn = execution_role_arn
        self._kms_key = kms_key
        self._logging_configuration = logging_configuration
        self._max_workers = max_workers
        self._min_workers = min_workers
        self._network_configuration = network_configuration
        self._plugins_s3_object_version = plugins_s3_object_version
        self._plugins_s3_path = plugins_s3_path
        self._requirements_s3_object_version = requirements_s3_object_version
        self._requirements_s3_path = requirements_s3_path
        self._schedulers = schedulers
        self._source_bucket_arn = source_bucket_arn
        self._startup_script_s3_object_version = startup_script_s3_object_version
        self._startup_script_s3_path = startup_script_s3_path
        self._tags = tags
        self._webserver_access_mode = webserver_access_mode
        self._weekly_maintenance_window_start = weekly_maintenance_window_start

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateEnvironmentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateEnvironment_request of this CreateEnvironmentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def airflow_configuration_options(self):
        """Gets the airflow_configuration_options of this CreateEnvironmentRequest.

        A list of key-value pairs containing the Apache Airflow configuration options you want to attach to your environment. For more information, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-env-variables.html\">Apache Airflow configuration options</a>.

        :return: The airflow_configuration_options of this CreateEnvironmentRequest.
        :rtype: Dict[str, str]
        """
        return self._airflow_configuration_options

    @airflow_configuration_options.setter
    def airflow_configuration_options(self, airflow_configuration_options):
        """Sets the airflow_configuration_options of this CreateEnvironmentRequest.

        A list of key-value pairs containing the Apache Airflow configuration options you want to attach to your environment. For more information, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-env-variables.html\">Apache Airflow configuration options</a>.

        :param airflow_configuration_options: The airflow_configuration_options of this CreateEnvironmentRequest.
        :type airflow_configuration_options: Dict[str, str]
        """

        self._airflow_configuration_options = airflow_configuration_options

    @property
    def airflow_version(self):
        """Gets the airflow_version of this CreateEnvironmentRequest.

        The Apache Airflow version for your environment. If no value is specified, it defaults to the latest version. Valid values: <code>1.10.12</code>, <code>2.0.2</code>, <code>2.2.2</code>, <code>2.4.3</code>, and <code>2.5.1</code>. For more information, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/airflow-versions.html\">Apache Airflow versions on Amazon Managed Workflows for Apache Airflow (MWAA)</a>.

        :return: The airflow_version of this CreateEnvironmentRequest.
        :rtype: str
        """
        return self._airflow_version

    @airflow_version.setter
    def airflow_version(self, airflow_version):
        """Sets the airflow_version of this CreateEnvironmentRequest.

        The Apache Airflow version for your environment. If no value is specified, it defaults to the latest version. Valid values: <code>1.10.12</code>, <code>2.0.2</code>, <code>2.2.2</code>, <code>2.4.3</code>, and <code>2.5.1</code>. For more information, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/airflow-versions.html\">Apache Airflow versions on Amazon Managed Workflows for Apache Airflow (MWAA)</a>.

        :param airflow_version: The airflow_version of this CreateEnvironmentRequest.
        :type airflow_version: str
        """
        if airflow_version is not None and len(airflow_version) > 32:
            raise ValueError("Invalid value for `airflow_version`, length must be less than or equal to `32`")
        if airflow_version is not None and len(airflow_version) < 1:
            raise ValueError("Invalid value for `airflow_version`, length must be greater than or equal to `1`")
        if airflow_version is not None and not re.search(r'^[0-9a-z.]+$', airflow_version):
            raise ValueError("Invalid value for `airflow_version`, must be a follow pattern or equal to `/^[0-9a-z.]+$/`")

        self._airflow_version = airflow_version

    @property
    def dag_s3_path(self):
        """Gets the dag_s3_path of this CreateEnvironmentRequest.

        The relative path to the DAGs folder on your Amazon S3 bucket. For example, <code>dags</code>. For more information, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-folder.html\">Adding or updating DAGs</a>.

        :return: The dag_s3_path of this CreateEnvironmentRequest.
        :rtype: str
        """
        return self._dag_s3_path

    @dag_s3_path.setter
    def dag_s3_path(self, dag_s3_path):
        """Sets the dag_s3_path of this CreateEnvironmentRequest.

        The relative path to the DAGs folder on your Amazon S3 bucket. For example, <code>dags</code>. For more information, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-folder.html\">Adding or updating DAGs</a>.

        :param dag_s3_path: The dag_s3_path of this CreateEnvironmentRequest.
        :type dag_s3_path: str
        """
        if dag_s3_path is None:
            raise ValueError("Invalid value for `dag_s3_path`, must not be `None`")
        if dag_s3_path is not None and len(dag_s3_path) > 1024:
            raise ValueError("Invalid value for `dag_s3_path`, length must be less than or equal to `1024`")
        if dag_s3_path is not None and len(dag_s3_path) < 1:
            raise ValueError("Invalid value for `dag_s3_path`, length must be greater than or equal to `1`")
        if dag_s3_path is not None and not re.search(r'.*', dag_s3_path):
            raise ValueError("Invalid value for `dag_s3_path`, must be a follow pattern or equal to `/.*/`")

        self._dag_s3_path = dag_s3_path

    @property
    def environment_class(self):
        """Gets the environment_class of this CreateEnvironmentRequest.

        The environment class type. Valid values: <code>mw1.small</code>, <code>mw1.medium</code>, <code>mw1.large</code>. For more information, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/environment-class.html\">Amazon MWAA environment class</a>.

        :return: The environment_class of this CreateEnvironmentRequest.
        :rtype: str
        """
        return self._environment_class

    @environment_class.setter
    def environment_class(self, environment_class):
        """Sets the environment_class of this CreateEnvironmentRequest.

        The environment class type. Valid values: <code>mw1.small</code>, <code>mw1.medium</code>, <code>mw1.large</code>. For more information, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/environment-class.html\">Amazon MWAA environment class</a>.

        :param environment_class: The environment_class of this CreateEnvironmentRequest.
        :type environment_class: str
        """
        if environment_class is not None and len(environment_class) > 1024:
            raise ValueError("Invalid value for `environment_class`, length must be less than or equal to `1024`")
        if environment_class is not None and len(environment_class) < 1:
            raise ValueError("Invalid value for `environment_class`, length must be greater than or equal to `1`")

        self._environment_class = environment_class

    @property
    def execution_role_arn(self):
        """Gets the execution_role_arn of this CreateEnvironmentRequest.

        The Amazon Resource Name (ARN) of the execution role for your environment. An execution role is an Amazon Web Services Identity and Access Management (IAM) role that grants MWAA permission to access Amazon Web Services services and resources used by your environment. For example, <code>arn:aws:iam::123456789:role/my-execution-role</code>. For more information, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/mwaa-create-role.html\">Amazon MWAA Execution role</a>.

        :return: The execution_role_arn of this CreateEnvironmentRequest.
        :rtype: str
        """
        return self._execution_role_arn

    @execution_role_arn.setter
    def execution_role_arn(self, execution_role_arn):
        """Sets the execution_role_arn of this CreateEnvironmentRequest.

        The Amazon Resource Name (ARN) of the execution role for your environment. An execution role is an Amazon Web Services Identity and Access Management (IAM) role that grants MWAA permission to access Amazon Web Services services and resources used by your environment. For example, <code>arn:aws:iam::123456789:role/my-execution-role</code>. For more information, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/mwaa-create-role.html\">Amazon MWAA Execution role</a>.

        :param execution_role_arn: The execution_role_arn of this CreateEnvironmentRequest.
        :type execution_role_arn: str
        """
        if execution_role_arn is None:
            raise ValueError("Invalid value for `execution_role_arn`, must not be `None`")
        if execution_role_arn is not None and len(execution_role_arn) > 1224:
            raise ValueError("Invalid value for `execution_role_arn`, length must be less than or equal to `1224`")
        if execution_role_arn is not None and len(execution_role_arn) < 1:
            raise ValueError("Invalid value for `execution_role_arn`, length must be greater than or equal to `1`")
        if execution_role_arn is not None and not re.search(r'^arn:aws(-[a-z]+)?:iam::\d{12}:role\/?[a-zA-Z_0-9+=,.@\-_\/]+$', execution_role_arn):
            raise ValueError("Invalid value for `execution_role_arn`, must be a follow pattern or equal to `/^arn:aws(-[a-z]+)?:iam::\d{12}:role\/?[a-zA-Z_0-9+=,.@\-_\/]+$/`")

        self._execution_role_arn = execution_role_arn

    @property
    def kms_key(self):
        """Gets the kms_key of this CreateEnvironmentRequest.

        The Amazon Web Services Key Management Service (KMS) key to encrypt the data in your environment. You can use an Amazon Web Services owned CMK, or a Customer managed CMK (advanced). For more information, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/create-environment.html\">Create an Amazon MWAA environment</a>.

        :return: The kms_key of this CreateEnvironmentRequest.
        :rtype: str
        """
        return self._kms_key

    @kms_key.setter
    def kms_key(self, kms_key):
        """Sets the kms_key of this CreateEnvironmentRequest.

        The Amazon Web Services Key Management Service (KMS) key to encrypt the data in your environment. You can use an Amazon Web Services owned CMK, or a Customer managed CMK (advanced). For more information, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/create-environment.html\">Create an Amazon MWAA environment</a>.

        :param kms_key: The kms_key of this CreateEnvironmentRequest.
        :type kms_key: str
        """
        if kms_key is not None and len(kms_key) > 1224:
            raise ValueError("Invalid value for `kms_key`, length must be less than or equal to `1224`")
        if kms_key is not None and len(kms_key) < 1:
            raise ValueError("Invalid value for `kms_key`, length must be greater than or equal to `1`")
        if kms_key is not None and not re.search(r'^(((arn:aws(-[a-z]+)?:kms:[a-z]{2}-[a-z]+-\d:\d+:)?key\/)?[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}|(arn:aws(-[a-z]+)?:kms:[a-z]{2}-[a-z]+-\d:\d+:)?alias\/.+)$', kms_key):
            raise ValueError("Invalid value for `kms_key`, must be a follow pattern or equal to `/^(((arn:aws(-[a-z]+)?:kms:[a-z]{2}-[a-z]+-\d:\d+:)?key\/)?[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}|(arn:aws(-[a-z]+)?:kms:[a-z]{2}-[a-z]+-\d:\d+:)?alias\/.+)$/`")

        self._kms_key = kms_key

    @property
    def logging_configuration(self):
        """Gets the logging_configuration of this CreateEnvironmentRequest.


        :return: The logging_configuration of this CreateEnvironmentRequest.
        :rtype: CreateEnvironmentRequestLoggingConfiguration
        """
        return self._logging_configuration

    @logging_configuration.setter
    def logging_configuration(self, logging_configuration):
        """Sets the logging_configuration of this CreateEnvironmentRequest.


        :param logging_configuration: The logging_configuration of this CreateEnvironmentRequest.
        :type logging_configuration: CreateEnvironmentRequestLoggingConfiguration
        """

        self._logging_configuration = logging_configuration

    @property
    def max_workers(self):
        """Gets the max_workers of this CreateEnvironmentRequest.

        The maximum number of workers that you want to run in your environment. MWAA scales the number of Apache Airflow workers up to the number you specify in the <code>MaxWorkers</code> field. For example, <code>20</code>. When there are no more tasks running, and no more in the queue, MWAA disposes of the extra workers leaving the one worker that is included with your environment, or the number you specify in <code>MinWorkers</code>.

        :return: The max_workers of this CreateEnvironmentRequest.
        :rtype: int
        """
        return self._max_workers

    @max_workers.setter
    def max_workers(self, max_workers):
        """Sets the max_workers of this CreateEnvironmentRequest.

        The maximum number of workers that you want to run in your environment. MWAA scales the number of Apache Airflow workers up to the number you specify in the <code>MaxWorkers</code> field. For example, <code>20</code>. When there are no more tasks running, and no more in the queue, MWAA disposes of the extra workers leaving the one worker that is included with your environment, or the number you specify in <code>MinWorkers</code>.

        :param max_workers: The max_workers of this CreateEnvironmentRequest.
        :type max_workers: int
        """
        if max_workers is not None and max_workers < 1:
            raise ValueError("Invalid value for `max_workers`, must be a value greater than or equal to `1`")

        self._max_workers = max_workers

    @property
    def min_workers(self):
        """Gets the min_workers of this CreateEnvironmentRequest.

        The minimum number of workers that you want to run in your environment. MWAA scales the number of Apache Airflow workers up to the number you specify in the <code>MaxWorkers</code> field. When there are no more tasks running, and no more in the queue, MWAA disposes of the extra workers leaving the worker count you specify in the <code>MinWorkers</code> field. For example, <code>2</code>.

        :return: The min_workers of this CreateEnvironmentRequest.
        :rtype: int
        """
        return self._min_workers

    @min_workers.setter
    def min_workers(self, min_workers):
        """Sets the min_workers of this CreateEnvironmentRequest.

        The minimum number of workers that you want to run in your environment. MWAA scales the number of Apache Airflow workers up to the number you specify in the <code>MaxWorkers</code> field. When there are no more tasks running, and no more in the queue, MWAA disposes of the extra workers leaving the worker count you specify in the <code>MinWorkers</code> field. For example, <code>2</code>.

        :param min_workers: The min_workers of this CreateEnvironmentRequest.
        :type min_workers: int
        """
        if min_workers is not None and min_workers < 1:
            raise ValueError("Invalid value for `min_workers`, must be a value greater than or equal to `1`")

        self._min_workers = min_workers

    @property
    def network_configuration(self):
        """Gets the network_configuration of this CreateEnvironmentRequest.


        :return: The network_configuration of this CreateEnvironmentRequest.
        :rtype: CreateEnvironmentRequestNetworkConfiguration
        """
        return self._network_configuration

    @network_configuration.setter
    def network_configuration(self, network_configuration):
        """Sets the network_configuration of this CreateEnvironmentRequest.


        :param network_configuration: The network_configuration of this CreateEnvironmentRequest.
        :type network_configuration: CreateEnvironmentRequestNetworkConfiguration
        """
        if network_configuration is None:
            raise ValueError("Invalid value for `network_configuration`, must not be `None`")

        self._network_configuration = network_configuration

    @property
    def plugins_s3_object_version(self):
        """Gets the plugins_s3_object_version of this CreateEnvironmentRequest.

        The version of the plugins.zip file on your Amazon S3 bucket. You must specify a version each time a plugins.zip file is updated. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/versioning-workflows.html\">How S3 Versioning works</a>.

        :return: The plugins_s3_object_version of this CreateEnvironmentRequest.
        :rtype: str
        """
        return self._plugins_s3_object_version

    @plugins_s3_object_version.setter
    def plugins_s3_object_version(self, plugins_s3_object_version):
        """Sets the plugins_s3_object_version of this CreateEnvironmentRequest.

        The version of the plugins.zip file on your Amazon S3 bucket. You must specify a version each time a plugins.zip file is updated. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/versioning-workflows.html\">How S3 Versioning works</a>.

        :param plugins_s3_object_version: The plugins_s3_object_version of this CreateEnvironmentRequest.
        :type plugins_s3_object_version: str
        """
        if plugins_s3_object_version is not None and len(plugins_s3_object_version) > 1024:
            raise ValueError("Invalid value for `plugins_s3_object_version`, length must be less than or equal to `1024`")
        if plugins_s3_object_version is not None and len(plugins_s3_object_version) < 1:
            raise ValueError("Invalid value for `plugins_s3_object_version`, length must be greater than or equal to `1`")

        self._plugins_s3_object_version = plugins_s3_object_version

    @property
    def plugins_s3_path(self):
        """Gets the plugins_s3_path of this CreateEnvironmentRequest.

        The relative path to the <code>plugins.zip</code> file on your Amazon S3 bucket. For example, <code>plugins.zip</code>. If specified, then the <code>plugins.zip</code> version is required. For more information, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import-plugins.html\">Installing custom plugins</a>.

        :return: The plugins_s3_path of this CreateEnvironmentRequest.
        :rtype: str
        """
        return self._plugins_s3_path

    @plugins_s3_path.setter
    def plugins_s3_path(self, plugins_s3_path):
        """Sets the plugins_s3_path of this CreateEnvironmentRequest.

        The relative path to the <code>plugins.zip</code> file on your Amazon S3 bucket. For example, <code>plugins.zip</code>. If specified, then the <code>plugins.zip</code> version is required. For more information, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import-plugins.html\">Installing custom plugins</a>.

        :param plugins_s3_path: The plugins_s3_path of this CreateEnvironmentRequest.
        :type plugins_s3_path: str
        """
        if plugins_s3_path is not None and len(plugins_s3_path) > 1024:
            raise ValueError("Invalid value for `plugins_s3_path`, length must be less than or equal to `1024`")
        if plugins_s3_path is not None and len(plugins_s3_path) < 1:
            raise ValueError("Invalid value for `plugins_s3_path`, length must be greater than or equal to `1`")
        if plugins_s3_path is not None and not re.search(r'.*', plugins_s3_path):
            raise ValueError("Invalid value for `plugins_s3_path`, must be a follow pattern or equal to `/.*/`")

        self._plugins_s3_path = plugins_s3_path

    @property
    def requirements_s3_object_version(self):
        """Gets the requirements_s3_object_version of this CreateEnvironmentRequest.

        The version of the <code>requirements.txt</code> file on your Amazon S3 bucket. You must specify a version each time a requirements.txt file is updated. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/versioning-workflows.html\">How S3 Versioning works</a>.

        :return: The requirements_s3_object_version of this CreateEnvironmentRequest.
        :rtype: str
        """
        return self._requirements_s3_object_version

    @requirements_s3_object_version.setter
    def requirements_s3_object_version(self, requirements_s3_object_version):
        """Sets the requirements_s3_object_version of this CreateEnvironmentRequest.

        The version of the <code>requirements.txt</code> file on your Amazon S3 bucket. You must specify a version each time a requirements.txt file is updated. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/versioning-workflows.html\">How S3 Versioning works</a>.

        :param requirements_s3_object_version: The requirements_s3_object_version of this CreateEnvironmentRequest.
        :type requirements_s3_object_version: str
        """
        if requirements_s3_object_version is not None and len(requirements_s3_object_version) > 1024:
            raise ValueError("Invalid value for `requirements_s3_object_version`, length must be less than or equal to `1024`")
        if requirements_s3_object_version is not None and len(requirements_s3_object_version) < 1:
            raise ValueError("Invalid value for `requirements_s3_object_version`, length must be greater than or equal to `1`")

        self._requirements_s3_object_version = requirements_s3_object_version

    @property
    def requirements_s3_path(self):
        """Gets the requirements_s3_path of this CreateEnvironmentRequest.

        The relative path to the <code>requirements.txt</code> file on your Amazon S3 bucket. For example, <code>requirements.txt</code>. If specified, then a version is required. For more information, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/working-dags-dependencies.html\">Installing Python dependencies</a>.

        :return: The requirements_s3_path of this CreateEnvironmentRequest.
        :rtype: str
        """
        return self._requirements_s3_path

    @requirements_s3_path.setter
    def requirements_s3_path(self, requirements_s3_path):
        """Sets the requirements_s3_path of this CreateEnvironmentRequest.

        The relative path to the <code>requirements.txt</code> file on your Amazon S3 bucket. For example, <code>requirements.txt</code>. If specified, then a version is required. For more information, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/working-dags-dependencies.html\">Installing Python dependencies</a>.

        :param requirements_s3_path: The requirements_s3_path of this CreateEnvironmentRequest.
        :type requirements_s3_path: str
        """
        if requirements_s3_path is not None and len(requirements_s3_path) > 1024:
            raise ValueError("Invalid value for `requirements_s3_path`, length must be less than or equal to `1024`")
        if requirements_s3_path is not None and len(requirements_s3_path) < 1:
            raise ValueError("Invalid value for `requirements_s3_path`, length must be greater than or equal to `1`")
        if requirements_s3_path is not None and not re.search(r'.*', requirements_s3_path):
            raise ValueError("Invalid value for `requirements_s3_path`, must be a follow pattern or equal to `/.*/`")

        self._requirements_s3_path = requirements_s3_path

    @property
    def schedulers(self):
        """Gets the schedulers of this CreateEnvironmentRequest.

        <p>The number of Apache Airflow schedulers to run in your environment. Valid values:</p> <ul> <li> <p>v2 - Accepts between 2 to 5. Defaults to 2.</p> </li> <li> <p>v1 - Accepts 1.</p> </li> </ul>

        :return: The schedulers of this CreateEnvironmentRequest.
        :rtype: int
        """
        return self._schedulers

    @schedulers.setter
    def schedulers(self, schedulers):
        """Sets the schedulers of this CreateEnvironmentRequest.

        <p>The number of Apache Airflow schedulers to run in your environment. Valid values:</p> <ul> <li> <p>v2 - Accepts between 2 to 5. Defaults to 2.</p> </li> <li> <p>v1 - Accepts 1.</p> </li> </ul>

        :param schedulers: The schedulers of this CreateEnvironmentRequest.
        :type schedulers: int
        """
        if schedulers is not None and schedulers > 5:
            raise ValueError("Invalid value for `schedulers`, must be a value less than or equal to `5`")

        self._schedulers = schedulers

    @property
    def source_bucket_arn(self):
        """Gets the source_bucket_arn of this CreateEnvironmentRequest.

        The Amazon Resource Name (ARN) of the Amazon S3 bucket where your DAG code and supporting files are stored. For example, <code>arn:aws:s3:::my-airflow-bucket-unique-name</code>. For more information, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/mwaa-s3-bucket.html\">Create an Amazon S3 bucket for Amazon MWAA</a>.

        :return: The source_bucket_arn of this CreateEnvironmentRequest.
        :rtype: str
        """
        return self._source_bucket_arn

    @source_bucket_arn.setter
    def source_bucket_arn(self, source_bucket_arn):
        """Sets the source_bucket_arn of this CreateEnvironmentRequest.

        The Amazon Resource Name (ARN) of the Amazon S3 bucket where your DAG code and supporting files are stored. For example, <code>arn:aws:s3:::my-airflow-bucket-unique-name</code>. For more information, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/mwaa-s3-bucket.html\">Create an Amazon S3 bucket for Amazon MWAA</a>.

        :param source_bucket_arn: The source_bucket_arn of this CreateEnvironmentRequest.
        :type source_bucket_arn: str
        """
        if source_bucket_arn is None:
            raise ValueError("Invalid value for `source_bucket_arn`, must not be `None`")
        if source_bucket_arn is not None and len(source_bucket_arn) > 1224:
            raise ValueError("Invalid value for `source_bucket_arn`, length must be less than or equal to `1224`")
        if source_bucket_arn is not None and len(source_bucket_arn) < 1:
            raise ValueError("Invalid value for `source_bucket_arn`, length must be greater than or equal to `1`")
        if source_bucket_arn is not None and not re.search(r'^arn:aws(-[a-z]+)?:s3:::[a-z0-9.\-]+$', source_bucket_arn):
            raise ValueError("Invalid value for `source_bucket_arn`, must be a follow pattern or equal to `/^arn:aws(-[a-z]+)?:s3:::[a-z0-9.\-]+$/`")

        self._source_bucket_arn = source_bucket_arn

    @property
    def startup_script_s3_object_version(self):
        """Gets the startup_script_s3_object_version of this CreateEnvironmentRequest.

        <p>The version of the startup shell script in your Amazon S3 bucket. You must specify the <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/versioning-workflows.html\">version ID</a> that Amazon S3 assigns to the file every time you update the script. </p> <p> Version IDs are Unicode, UTF-8 encoded, URL-ready, opaque strings that are no more than 1,024 bytes long. The following is an example: </p> <p> <code>3sL4kqtJlcpXroDTDmJ+rmSpXd3dIbrHY+MTRCxf3vjVBH40Nr8X8gdRQBpUMLUo</code> </p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/using-startup-script.html\">Using a startup script</a>. </p>

        :return: The startup_script_s3_object_version of this CreateEnvironmentRequest.
        :rtype: str
        """
        return self._startup_script_s3_object_version

    @startup_script_s3_object_version.setter
    def startup_script_s3_object_version(self, startup_script_s3_object_version):
        """Sets the startup_script_s3_object_version of this CreateEnvironmentRequest.

        <p>The version of the startup shell script in your Amazon S3 bucket. You must specify the <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/versioning-workflows.html\">version ID</a> that Amazon S3 assigns to the file every time you update the script. </p> <p> Version IDs are Unicode, UTF-8 encoded, URL-ready, opaque strings that are no more than 1,024 bytes long. The following is an example: </p> <p> <code>3sL4kqtJlcpXroDTDmJ+rmSpXd3dIbrHY+MTRCxf3vjVBH40Nr8X8gdRQBpUMLUo</code> </p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/using-startup-script.html\">Using a startup script</a>. </p>

        :param startup_script_s3_object_version: The startup_script_s3_object_version of this CreateEnvironmentRequest.
        :type startup_script_s3_object_version: str
        """
        if startup_script_s3_object_version is not None and len(startup_script_s3_object_version) > 1024:
            raise ValueError("Invalid value for `startup_script_s3_object_version`, length must be less than or equal to `1024`")
        if startup_script_s3_object_version is not None and len(startup_script_s3_object_version) < 1:
            raise ValueError("Invalid value for `startup_script_s3_object_version`, length must be greater than or equal to `1`")

        self._startup_script_s3_object_version = startup_script_s3_object_version

    @property
    def startup_script_s3_path(self):
        """Gets the startup_script_s3_path of this CreateEnvironmentRequest.

        <p>The relative path to the startup shell script in your Amazon S3 bucket. For example, <code>s3://mwaa-environment/startup.sh</code>.</p> <p> Amazon MWAA runs the script as your environment starts, and before running the Apache Airflow process. You can use this script to install dependencies, modify Apache Airflow configuration options, and set environment variables. For more information, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/using-startup-script.html\">Using a startup script</a>. </p>

        :return: The startup_script_s3_path of this CreateEnvironmentRequest.
        :rtype: str
        """
        return self._startup_script_s3_path

    @startup_script_s3_path.setter
    def startup_script_s3_path(self, startup_script_s3_path):
        """Sets the startup_script_s3_path of this CreateEnvironmentRequest.

        <p>The relative path to the startup shell script in your Amazon S3 bucket. For example, <code>s3://mwaa-environment/startup.sh</code>.</p> <p> Amazon MWAA runs the script as your environment starts, and before running the Apache Airflow process. You can use this script to install dependencies, modify Apache Airflow configuration options, and set environment variables. For more information, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/using-startup-script.html\">Using a startup script</a>. </p>

        :param startup_script_s3_path: The startup_script_s3_path of this CreateEnvironmentRequest.
        :type startup_script_s3_path: str
        """
        if startup_script_s3_path is not None and len(startup_script_s3_path) > 1024:
            raise ValueError("Invalid value for `startup_script_s3_path`, length must be less than or equal to `1024`")
        if startup_script_s3_path is not None and len(startup_script_s3_path) < 1:
            raise ValueError("Invalid value for `startup_script_s3_path`, length must be greater than or equal to `1`")
        if startup_script_s3_path is not None and not re.search(r'.*', startup_script_s3_path):
            raise ValueError("Invalid value for `startup_script_s3_path`, must be a follow pattern or equal to `/.*/`")

        self._startup_script_s3_path = startup_script_s3_path

    @property
    def tags(self):
        """Gets the tags of this CreateEnvironmentRequest.

        The key-value tag pairs you want to associate to your environment. For example, <code>\"Environment\": \"Staging\"</code>. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services resources</a>.

        :return: The tags of this CreateEnvironmentRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateEnvironmentRequest.

        The key-value tag pairs you want to associate to your environment. For example, <code>\"Environment\": \"Staging\"</code>. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services resources</a>.

        :param tags: The tags of this CreateEnvironmentRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags

    @property
    def webserver_access_mode(self):
        """Gets the webserver_access_mode of this CreateEnvironmentRequest.

        The Apache Airflow <i>Web server</i> access mode. For more information, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-networking.html\">Apache Airflow access modes</a>.

        :return: The webserver_access_mode of this CreateEnvironmentRequest.
        :rtype: str
        """
        return self._webserver_access_mode

    @webserver_access_mode.setter
    def webserver_access_mode(self, webserver_access_mode):
        """Sets the webserver_access_mode of this CreateEnvironmentRequest.

        The Apache Airflow <i>Web server</i> access mode. For more information, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-networking.html\">Apache Airflow access modes</a>.

        :param webserver_access_mode: The webserver_access_mode of this CreateEnvironmentRequest.
        :type webserver_access_mode: str
        """
        allowed_values = ["PRIVATE_ONLY", "PUBLIC_ONLY"]  # noqa: E501
        if webserver_access_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `webserver_access_mode` ({0}), must be one of {1}"
                .format(webserver_access_mode, allowed_values)
            )

        self._webserver_access_mode = webserver_access_mode

    @property
    def weekly_maintenance_window_start(self):
        """Gets the weekly_maintenance_window_start of this CreateEnvironmentRequest.

        The day and time of the week in Coordinated Universal Time (UTC) 24-hour standard time to start weekly maintenance updates of your environment in the following format: <code>DAY:HH:MM</code>. For example: <code>TUE:03:30</code>. You can specify a start time in 30 minute increments only.

        :return: The weekly_maintenance_window_start of this CreateEnvironmentRequest.
        :rtype: str
        """
        return self._weekly_maintenance_window_start

    @weekly_maintenance_window_start.setter
    def weekly_maintenance_window_start(self, weekly_maintenance_window_start):
        """Sets the weekly_maintenance_window_start of this CreateEnvironmentRequest.

        The day and time of the week in Coordinated Universal Time (UTC) 24-hour standard time to start weekly maintenance updates of your environment in the following format: <code>DAY:HH:MM</code>. For example: <code>TUE:03:30</code>. You can specify a start time in 30 minute increments only.

        :param weekly_maintenance_window_start: The weekly_maintenance_window_start of this CreateEnvironmentRequest.
        :type weekly_maintenance_window_start: str
        """
        if weekly_maintenance_window_start is not None and len(weekly_maintenance_window_start) > 9:
            raise ValueError("Invalid value for `weekly_maintenance_window_start`, length must be less than or equal to `9`")
        if weekly_maintenance_window_start is not None and len(weekly_maintenance_window_start) < 1:
            raise ValueError("Invalid value for `weekly_maintenance_window_start`, length must be greater than or equal to `1`")
        if weekly_maintenance_window_start is not None and not re.search(r'(MON|TUE|WED|THU|FRI|SAT|SUN):([01]\d|2[0-3]):(00|30)', weekly_maintenance_window_start):
            raise ValueError("Invalid value for `weekly_maintenance_window_start`, must be a follow pattern or equal to `/(MON|TUE|WED|THU|FRI|SAT|SUN):([01]\d|2[0-3]):(00|30)/`")

        self._weekly_maintenance_window_start = weekly_maintenance_window_start
