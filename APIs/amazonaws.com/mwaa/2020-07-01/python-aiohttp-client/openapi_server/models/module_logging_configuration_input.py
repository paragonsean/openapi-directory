# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.logging_level import LoggingLevel
from openapi_server import util


class ModuleLoggingConfigurationInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, log_level: LoggingLevel=None):
        """ModuleLoggingConfigurationInput - a model defined in OpenAPI

        :param enabled: The enabled of this ModuleLoggingConfigurationInput.
        :param log_level: The log_level of this ModuleLoggingConfigurationInput.
        """
        self.openapi_types = {
            'enabled': bool,
            'log_level': LoggingLevel
        }

        self.attribute_map = {
            'enabled': 'Enabled',
            'log_level': 'LogLevel'
        }

        self._enabled = enabled
        self._log_level = log_level

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModuleLoggingConfigurationInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModuleLoggingConfigurationInput of this ModuleLoggingConfigurationInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this ModuleLoggingConfigurationInput.


        :return: The enabled of this ModuleLoggingConfigurationInput.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ModuleLoggingConfigurationInput.


        :param enabled: The enabled of this ModuleLoggingConfigurationInput.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def log_level(self):
        """Gets the log_level of this ModuleLoggingConfigurationInput.


        :return: The log_level of this ModuleLoggingConfigurationInput.
        :rtype: LoggingLevel
        """
        return self._log_level

    @log_level.setter
    def log_level(self, log_level):
        """Sets the log_level of this ModuleLoggingConfigurationInput.


        :param log_level: The log_level of this ModuleLoggingConfigurationInput.
        :type log_level: LoggingLevel
        """
        if log_level is None:
            raise ValueError("Invalid value for `log_level`, must not be `None`")

        self._log_level = log_level
