/**
 * AmazonMWAA
 * <p><fullname>Amazon Managed Workflows for Apache Airflow</fullname> <p>This section contains the Amazon Managed Workflows for Apache Airflow (MWAA) API reference documentation. For more information, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/what-is-mwaa.html\">What is Amazon MWAA?</a>.</p> <p> <b>Endpoints</b> </p> <ul> <li> <p> <code>api.airflow.{region}.amazonaws.com</code> - This endpoint is used for environment management.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_CreateEnvironment.html\">CreateEnvironment</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_DeleteEnvironment.html\">DeleteEnvironment</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_GetEnvironment.html\">GetEnvironment</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_ListEnvironments.html\">ListEnvironments</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_ListTagsForResource.html\">ListTagsForResource</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_TagResource.html\">TagResource</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_UntagResource.html\">UntagResource</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_UpdateEnvironment.html\">UpdateEnvironment</a> </p> </li> </ul> </li> <li> <p> <code>env.airflow.{region}.amazonaws.com</code> - This endpoint is used to operate the Airflow environment.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_CreateCliToken.html \">CreateCliToken</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_CreateWebLoginToken.html\">CreateWebLoginToken</a> </p> </li> </ul> </li> <li> <p> <code>ops.airflow.{region}.amazonaws.com</code> - This endpoint is used to push environment metrics that track environment health.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_PublishMetrics.html \">PublishMetrics</a> </p> </li> </ul> </li> </ul> <p> <b>Regions</b> </p> <p>For a list of regions that Amazon MWAA supports, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/what-is-mwaa.html#regions-mwaa\">Region availability</a> in the <i>Amazon MWAA User Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2020-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateEnvironmentInput.h
 *
 * 
 */

#ifndef OAIUpdateEnvironmentInput_H
#define OAIUpdateEnvironmentInput_H

#include <QJsonObject>

#include "OAIUpdateEnvironmentInput_LoggingConfiguration.h"
#include "OAIUpdateEnvironmentInput_NetworkConfiguration.h"
#include "OAIWebserverAccessMode.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUpdateEnvironmentInput_LoggingConfiguration;
class OAIUpdateEnvironmentInput_NetworkConfiguration;

class OAIUpdateEnvironmentInput : public OAIObject {
public:
    OAIUpdateEnvironmentInput();
    OAIUpdateEnvironmentInput(QString json);
    ~OAIUpdateEnvironmentInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap getAirflowConfigurationOptions() const;
    void setAirflowConfigurationOptions(const QMap &airflow_configuration_options);
    bool is_airflow_configuration_options_Set() const;
    bool is_airflow_configuration_options_Valid() const;

    QString getAirflowVersion() const;
    void setAirflowVersion(const QString &airflow_version);
    bool is_airflow_version_Set() const;
    bool is_airflow_version_Valid() const;

    QString getDagS3Path() const;
    void setDagS3Path(const QString &dag_s3_path);
    bool is_dag_s3_path_Set() const;
    bool is_dag_s3_path_Valid() const;

    QString getEnvironmentClass() const;
    void setEnvironmentClass(const QString &environment_class);
    bool is_environment_class_Set() const;
    bool is_environment_class_Valid() const;

    QString getExecutionRoleArn() const;
    void setExecutionRoleArn(const QString &execution_role_arn);
    bool is_execution_role_arn_Set() const;
    bool is_execution_role_arn_Valid() const;

    OAIUpdateEnvironmentInput_LoggingConfiguration getLoggingConfiguration() const;
    void setLoggingConfiguration(const OAIUpdateEnvironmentInput_LoggingConfiguration &logging_configuration);
    bool is_logging_configuration_Set() const;
    bool is_logging_configuration_Valid() const;

    qint32 getMaxWorkers() const;
    void setMaxWorkers(const qint32 &max_workers);
    bool is_max_workers_Set() const;
    bool is_max_workers_Valid() const;

    qint32 getMinWorkers() const;
    void setMinWorkers(const qint32 &min_workers);
    bool is_min_workers_Set() const;
    bool is_min_workers_Valid() const;

    OAIUpdateEnvironmentInput_NetworkConfiguration getNetworkConfiguration() const;
    void setNetworkConfiguration(const OAIUpdateEnvironmentInput_NetworkConfiguration &network_configuration);
    bool is_network_configuration_Set() const;
    bool is_network_configuration_Valid() const;

    QString getPluginsS3ObjectVersion() const;
    void setPluginsS3ObjectVersion(const QString &plugins_s3_object_version);
    bool is_plugins_s3_object_version_Set() const;
    bool is_plugins_s3_object_version_Valid() const;

    QString getPluginsS3Path() const;
    void setPluginsS3Path(const QString &plugins_s3_path);
    bool is_plugins_s3_path_Set() const;
    bool is_plugins_s3_path_Valid() const;

    QString getRequirementsS3ObjectVersion() const;
    void setRequirementsS3ObjectVersion(const QString &requirements_s3_object_version);
    bool is_requirements_s3_object_version_Set() const;
    bool is_requirements_s3_object_version_Valid() const;

    QString getRequirementsS3Path() const;
    void setRequirementsS3Path(const QString &requirements_s3_path);
    bool is_requirements_s3_path_Set() const;
    bool is_requirements_s3_path_Valid() const;

    qint32 getSchedulers() const;
    void setSchedulers(const qint32 &schedulers);
    bool is_schedulers_Set() const;
    bool is_schedulers_Valid() const;

    QString getSourceBucketArn() const;
    void setSourceBucketArn(const QString &source_bucket_arn);
    bool is_source_bucket_arn_Set() const;
    bool is_source_bucket_arn_Valid() const;

    QString getStartupScriptS3ObjectVersion() const;
    void setStartupScriptS3ObjectVersion(const QString &startup_script_s3_object_version);
    bool is_startup_script_s3_object_version_Set() const;
    bool is_startup_script_s3_object_version_Valid() const;

    QString getStartupScriptS3Path() const;
    void setStartupScriptS3Path(const QString &startup_script_s3_path);
    bool is_startup_script_s3_path_Set() const;
    bool is_startup_script_s3_path_Valid() const;

    OAIWebserverAccessMode getWebserverAccessMode() const;
    void setWebserverAccessMode(const OAIWebserverAccessMode &webserver_access_mode);
    bool is_webserver_access_mode_Set() const;
    bool is_webserver_access_mode_Valid() const;

    QString getWeeklyMaintenanceWindowStart() const;
    void setWeeklyMaintenanceWindowStart(const QString &weekly_maintenance_window_start);
    bool is_weekly_maintenance_window_start_Set() const;
    bool is_weekly_maintenance_window_start_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap m_airflow_configuration_options;
    bool m_airflow_configuration_options_isSet;
    bool m_airflow_configuration_options_isValid;

    QString m_airflow_version;
    bool m_airflow_version_isSet;
    bool m_airflow_version_isValid;

    QString m_dag_s3_path;
    bool m_dag_s3_path_isSet;
    bool m_dag_s3_path_isValid;

    QString m_environment_class;
    bool m_environment_class_isSet;
    bool m_environment_class_isValid;

    QString m_execution_role_arn;
    bool m_execution_role_arn_isSet;
    bool m_execution_role_arn_isValid;

    OAIUpdateEnvironmentInput_LoggingConfiguration m_logging_configuration;
    bool m_logging_configuration_isSet;
    bool m_logging_configuration_isValid;

    qint32 m_max_workers;
    bool m_max_workers_isSet;
    bool m_max_workers_isValid;

    qint32 m_min_workers;
    bool m_min_workers_isSet;
    bool m_min_workers_isValid;

    OAIUpdateEnvironmentInput_NetworkConfiguration m_network_configuration;
    bool m_network_configuration_isSet;
    bool m_network_configuration_isValid;

    QString m_plugins_s3_object_version;
    bool m_plugins_s3_object_version_isSet;
    bool m_plugins_s3_object_version_isValid;

    QString m_plugins_s3_path;
    bool m_plugins_s3_path_isSet;
    bool m_plugins_s3_path_isValid;

    QString m_requirements_s3_object_version;
    bool m_requirements_s3_object_version_isSet;
    bool m_requirements_s3_object_version_isValid;

    QString m_requirements_s3_path;
    bool m_requirements_s3_path_isSet;
    bool m_requirements_s3_path_isValid;

    qint32 m_schedulers;
    bool m_schedulers_isSet;
    bool m_schedulers_isValid;

    QString m_source_bucket_arn;
    bool m_source_bucket_arn_isSet;
    bool m_source_bucket_arn_isValid;

    QString m_startup_script_s3_object_version;
    bool m_startup_script_s3_object_version_isSet;
    bool m_startup_script_s3_object_version_isValid;

    QString m_startup_script_s3_path;
    bool m_startup_script_s3_path_isSet;
    bool m_startup_script_s3_path_isValid;

    OAIWebserverAccessMode m_webserver_access_mode;
    bool m_webserver_access_mode_isSet;
    bool m_webserver_access_mode_isValid;

    QString m_weekly_maintenance_window_start;
    bool m_weekly_maintenance_window_start_isSet;
    bool m_weekly_maintenance_window_start_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateEnvironmentInput)

#endif // OAIUpdateEnvironmentInput_H
