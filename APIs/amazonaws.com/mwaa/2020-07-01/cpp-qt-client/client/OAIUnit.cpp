/**
 * AmazonMWAA
 * <p><fullname>Amazon Managed Workflows for Apache Airflow</fullname> <p>This section contains the Amazon Managed Workflows for Apache Airflow (MWAA) API reference documentation. For more information, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/what-is-mwaa.html\">What is Amazon MWAA?</a>.</p> <p> <b>Endpoints</b> </p> <ul> <li> <p> <code>api.airflow.{region}.amazonaws.com</code> - This endpoint is used for environment management.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_CreateEnvironment.html\">CreateEnvironment</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_DeleteEnvironment.html\">DeleteEnvironment</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_GetEnvironment.html\">GetEnvironment</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_ListEnvironments.html\">ListEnvironments</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_ListTagsForResource.html\">ListTagsForResource</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_TagResource.html\">TagResource</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_UntagResource.html\">UntagResource</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_UpdateEnvironment.html\">UpdateEnvironment</a> </p> </li> </ul> </li> <li> <p> <code>env.airflow.{region}.amazonaws.com</code> - This endpoint is used to operate the Airflow environment.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_CreateCliToken.html \">CreateCliToken</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_CreateWebLoginToken.html\">CreateWebLoginToken</a> </p> </li> </ul> </li> <li> <p> <code>ops.airflow.{region}.amazonaws.com</code> - This endpoint is used to push environment metrics that track environment health.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_PublishMetrics.html \">PublishMetrics</a> </p> </li> </ul> </li> </ul> <p> <b>Regions</b> </p> <p>For a list of regions that Amazon MWAA supports, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/what-is-mwaa.html#regions-mwaa\">Region availability</a> in the <i>Amazon MWAA User Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2020-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUnit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUnit::OAIUnit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUnit::OAIUnit() {
    this->initializeModel();
}

OAIUnit::~OAIUnit() {}

void OAIUnit::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIUnit::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIUnit::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Seconds", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnit::SECONDS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Microseconds", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnit::MICROSECONDS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Milliseconds", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnit::MILLISECONDS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Bytes", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnit::BYTES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Kilobytes", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnit::KILOBYTES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Megabytes", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnit::MEGABYTES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Gigabytes", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnit::GIGABYTES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Terabytes", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnit::TERABYTES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Bits", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnit::BITS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Kilobits", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnit::KILOBITS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Megabits", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnit::MEGABITS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Gigabits", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnit::GIGABITS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Terabits", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnit::TERABITS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Percent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnit::PERCENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Count", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnit::COUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Bytes/Second", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnit::BYTES_SECOND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Kilobytes/Second", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnit::KILOBYTES_SECOND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Megabytes/Second", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnit::MEGABYTES_SECOND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Gigabytes/Second", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnit::GIGABYTES_SECOND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Terabytes/Second", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnit::TERABYTES_SECOND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Bits/Second", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnit::BITS_SECOND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Kilobits/Second", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnit::KILOBITS_SECOND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Megabits/Second", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnit::MEGABITS_SECOND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Gigabits/Second", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnit::GIGABITS_SECOND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Terabits/Second", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnit::TERABITS_SECOND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Count/Second", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnit::COUNT_SECOND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("None", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnit::NONE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIUnit::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIUnit::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIUnit::SECONDS:
            val = "Seconds";
            break;
        case eOAIUnit::MICROSECONDS:
            val = "Microseconds";
            break;
        case eOAIUnit::MILLISECONDS:
            val = "Milliseconds";
            break;
        case eOAIUnit::BYTES:
            val = "Bytes";
            break;
        case eOAIUnit::KILOBYTES:
            val = "Kilobytes";
            break;
        case eOAIUnit::MEGABYTES:
            val = "Megabytes";
            break;
        case eOAIUnit::GIGABYTES:
            val = "Gigabytes";
            break;
        case eOAIUnit::TERABYTES:
            val = "Terabytes";
            break;
        case eOAIUnit::BITS:
            val = "Bits";
            break;
        case eOAIUnit::KILOBITS:
            val = "Kilobits";
            break;
        case eOAIUnit::MEGABITS:
            val = "Megabits";
            break;
        case eOAIUnit::GIGABITS:
            val = "Gigabits";
            break;
        case eOAIUnit::TERABITS:
            val = "Terabits";
            break;
        case eOAIUnit::PERCENT:
            val = "Percent";
            break;
        case eOAIUnit::COUNT:
            val = "Count";
            break;
        case eOAIUnit::BYTES_SECOND:
            val = "Bytes/Second";
            break;
        case eOAIUnit::KILOBYTES_SECOND:
            val = "Kilobytes/Second";
            break;
        case eOAIUnit::MEGABYTES_SECOND:
            val = "Megabytes/Second";
            break;
        case eOAIUnit::GIGABYTES_SECOND:
            val = "Gigabytes/Second";
            break;
        case eOAIUnit::TERABYTES_SECOND:
            val = "Terabytes/Second";
            break;
        case eOAIUnit::BITS_SECOND:
            val = "Bits/Second";
            break;
        case eOAIUnit::KILOBITS_SECOND:
            val = "Kilobits/Second";
            break;
        case eOAIUnit::MEGABITS_SECOND:
            val = "Megabits/Second";
            break;
        case eOAIUnit::GIGABITS_SECOND:
            val = "Gigabits/Second";
            break;
        case eOAIUnit::TERABITS_SECOND:
            val = "Terabits/Second";
            break;
        case eOAIUnit::COUNT_SECOND:
            val = "Count/Second";
            break;
        case eOAIUnit::NONE:
            val = "None";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIUnit::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIUnit::eOAIUnit OAIUnit::getValue() const {
    return m_value;
}

void OAIUnit::setValue(const OAIUnit::eOAIUnit& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIUnit::isSet() const {
    
    return m_value_isSet;
}

bool OAIUnit::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
