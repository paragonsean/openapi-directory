/**
 * AmazonMWAA
 * <p><fullname>Amazon Managed Workflows for Apache Airflow</fullname> <p>This section contains the Amazon Managed Workflows for Apache Airflow (MWAA) API reference documentation. For more information, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/what-is-mwaa.html\">What is Amazon MWAA?</a>.</p> <p> <b>Endpoints</b> </p> <ul> <li> <p> <code>api.airflow.{region}.amazonaws.com</code> - This endpoint is used for environment management.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_CreateEnvironment.html\">CreateEnvironment</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_DeleteEnvironment.html\">DeleteEnvironment</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_GetEnvironment.html\">GetEnvironment</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_ListEnvironments.html\">ListEnvironments</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_ListTagsForResource.html\">ListTagsForResource</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_TagResource.html\">TagResource</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_UntagResource.html\">UntagResource</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_UpdateEnvironment.html\">UpdateEnvironment</a> </p> </li> </ul> </li> <li> <p> <code>env.airflow.{region}.amazonaws.com</code> - This endpoint is used to operate the Airflow environment.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_CreateCliToken.html \">CreateCliToken</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_CreateWebLoginToken.html\">CreateWebLoginToken</a> </p> </li> </ul> </li> <li> <p> <code>ops.airflow.{region}.amazonaws.com</code> - This endpoint is used to push environment metrics that track environment health.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_PublishMetrics.html \">PublishMetrics</a> </p> </li> </ul> </li> </ul> <p> <b>Regions</b> </p> <p>For a list of regions that Amazon MWAA supports, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/what-is-mwaa.html#regions-mwaa\">Region availability</a> in the <i>Amazon MWAA User Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2020-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateEnvironmentInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateEnvironmentInput::OAIUpdateEnvironmentInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateEnvironmentInput::OAIUpdateEnvironmentInput() {
    this->initializeModel();
}

OAIUpdateEnvironmentInput::~OAIUpdateEnvironmentInput() {}

void OAIUpdateEnvironmentInput::initializeModel() {

    m_airflow_configuration_options_isSet = false;
    m_airflow_configuration_options_isValid = false;

    m_airflow_version_isSet = false;
    m_airflow_version_isValid = false;

    m_dag_s3_path_isSet = false;
    m_dag_s3_path_isValid = false;

    m_environment_class_isSet = false;
    m_environment_class_isValid = false;

    m_execution_role_arn_isSet = false;
    m_execution_role_arn_isValid = false;

    m_logging_configuration_isSet = false;
    m_logging_configuration_isValid = false;

    m_max_workers_isSet = false;
    m_max_workers_isValid = false;

    m_min_workers_isSet = false;
    m_min_workers_isValid = false;

    m_network_configuration_isSet = false;
    m_network_configuration_isValid = false;

    m_plugins_s3_object_version_isSet = false;
    m_plugins_s3_object_version_isValid = false;

    m_plugins_s3_path_isSet = false;
    m_plugins_s3_path_isValid = false;

    m_requirements_s3_object_version_isSet = false;
    m_requirements_s3_object_version_isValid = false;

    m_requirements_s3_path_isSet = false;
    m_requirements_s3_path_isValid = false;

    m_schedulers_isSet = false;
    m_schedulers_isValid = false;

    m_source_bucket_arn_isSet = false;
    m_source_bucket_arn_isValid = false;

    m_startup_script_s3_object_version_isSet = false;
    m_startup_script_s3_object_version_isValid = false;

    m_startup_script_s3_path_isSet = false;
    m_startup_script_s3_path_isValid = false;

    m_webserver_access_mode_isSet = false;
    m_webserver_access_mode_isValid = false;

    m_weekly_maintenance_window_start_isSet = false;
    m_weekly_maintenance_window_start_isValid = false;
}

void OAIUpdateEnvironmentInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateEnvironmentInput::fromJsonObject(QJsonObject json) {

    m_airflow_configuration_options_isValid = ::OpenAPI::fromJsonValue(m_airflow_configuration_options, json[QString("AirflowConfigurationOptions")]);
    m_airflow_configuration_options_isSet = !json[QString("AirflowConfigurationOptions")].isNull() && m_airflow_configuration_options_isValid;

    m_airflow_version_isValid = ::OpenAPI::fromJsonValue(m_airflow_version, json[QString("AirflowVersion")]);
    m_airflow_version_isSet = !json[QString("AirflowVersion")].isNull() && m_airflow_version_isValid;

    m_dag_s3_path_isValid = ::OpenAPI::fromJsonValue(m_dag_s3_path, json[QString("DagS3Path")]);
    m_dag_s3_path_isSet = !json[QString("DagS3Path")].isNull() && m_dag_s3_path_isValid;

    m_environment_class_isValid = ::OpenAPI::fromJsonValue(m_environment_class, json[QString("EnvironmentClass")]);
    m_environment_class_isSet = !json[QString("EnvironmentClass")].isNull() && m_environment_class_isValid;

    m_execution_role_arn_isValid = ::OpenAPI::fromJsonValue(m_execution_role_arn, json[QString("ExecutionRoleArn")]);
    m_execution_role_arn_isSet = !json[QString("ExecutionRoleArn")].isNull() && m_execution_role_arn_isValid;

    m_logging_configuration_isValid = ::OpenAPI::fromJsonValue(m_logging_configuration, json[QString("LoggingConfiguration")]);
    m_logging_configuration_isSet = !json[QString("LoggingConfiguration")].isNull() && m_logging_configuration_isValid;

    m_max_workers_isValid = ::OpenAPI::fromJsonValue(m_max_workers, json[QString("MaxWorkers")]);
    m_max_workers_isSet = !json[QString("MaxWorkers")].isNull() && m_max_workers_isValid;

    m_min_workers_isValid = ::OpenAPI::fromJsonValue(m_min_workers, json[QString("MinWorkers")]);
    m_min_workers_isSet = !json[QString("MinWorkers")].isNull() && m_min_workers_isValid;

    m_network_configuration_isValid = ::OpenAPI::fromJsonValue(m_network_configuration, json[QString("NetworkConfiguration")]);
    m_network_configuration_isSet = !json[QString("NetworkConfiguration")].isNull() && m_network_configuration_isValid;

    m_plugins_s3_object_version_isValid = ::OpenAPI::fromJsonValue(m_plugins_s3_object_version, json[QString("PluginsS3ObjectVersion")]);
    m_plugins_s3_object_version_isSet = !json[QString("PluginsS3ObjectVersion")].isNull() && m_plugins_s3_object_version_isValid;

    m_plugins_s3_path_isValid = ::OpenAPI::fromJsonValue(m_plugins_s3_path, json[QString("PluginsS3Path")]);
    m_plugins_s3_path_isSet = !json[QString("PluginsS3Path")].isNull() && m_plugins_s3_path_isValid;

    m_requirements_s3_object_version_isValid = ::OpenAPI::fromJsonValue(m_requirements_s3_object_version, json[QString("RequirementsS3ObjectVersion")]);
    m_requirements_s3_object_version_isSet = !json[QString("RequirementsS3ObjectVersion")].isNull() && m_requirements_s3_object_version_isValid;

    m_requirements_s3_path_isValid = ::OpenAPI::fromJsonValue(m_requirements_s3_path, json[QString("RequirementsS3Path")]);
    m_requirements_s3_path_isSet = !json[QString("RequirementsS3Path")].isNull() && m_requirements_s3_path_isValid;

    m_schedulers_isValid = ::OpenAPI::fromJsonValue(m_schedulers, json[QString("Schedulers")]);
    m_schedulers_isSet = !json[QString("Schedulers")].isNull() && m_schedulers_isValid;

    m_source_bucket_arn_isValid = ::OpenAPI::fromJsonValue(m_source_bucket_arn, json[QString("SourceBucketArn")]);
    m_source_bucket_arn_isSet = !json[QString("SourceBucketArn")].isNull() && m_source_bucket_arn_isValid;

    m_startup_script_s3_object_version_isValid = ::OpenAPI::fromJsonValue(m_startup_script_s3_object_version, json[QString("StartupScriptS3ObjectVersion")]);
    m_startup_script_s3_object_version_isSet = !json[QString("StartupScriptS3ObjectVersion")].isNull() && m_startup_script_s3_object_version_isValid;

    m_startup_script_s3_path_isValid = ::OpenAPI::fromJsonValue(m_startup_script_s3_path, json[QString("StartupScriptS3Path")]);
    m_startup_script_s3_path_isSet = !json[QString("StartupScriptS3Path")].isNull() && m_startup_script_s3_path_isValid;

    m_webserver_access_mode_isValid = ::OpenAPI::fromJsonValue(m_webserver_access_mode, json[QString("WebserverAccessMode")]);
    m_webserver_access_mode_isSet = !json[QString("WebserverAccessMode")].isNull() && m_webserver_access_mode_isValid;

    m_weekly_maintenance_window_start_isValid = ::OpenAPI::fromJsonValue(m_weekly_maintenance_window_start, json[QString("WeeklyMaintenanceWindowStart")]);
    m_weekly_maintenance_window_start_isSet = !json[QString("WeeklyMaintenanceWindowStart")].isNull() && m_weekly_maintenance_window_start_isValid;
}

QString OAIUpdateEnvironmentInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateEnvironmentInput::asJsonObject() const {
    QJsonObject obj;
    if (m_airflow_configuration_options.isSet()) {
        obj.insert(QString("AirflowConfigurationOptions"), ::OpenAPI::toJsonValue(m_airflow_configuration_options));
    }
    if (m_airflow_version_isSet) {
        obj.insert(QString("AirflowVersion"), ::OpenAPI::toJsonValue(m_airflow_version));
    }
    if (m_dag_s3_path_isSet) {
        obj.insert(QString("DagS3Path"), ::OpenAPI::toJsonValue(m_dag_s3_path));
    }
    if (m_environment_class_isSet) {
        obj.insert(QString("EnvironmentClass"), ::OpenAPI::toJsonValue(m_environment_class));
    }
    if (m_execution_role_arn_isSet) {
        obj.insert(QString("ExecutionRoleArn"), ::OpenAPI::toJsonValue(m_execution_role_arn));
    }
    if (m_logging_configuration.isSet()) {
        obj.insert(QString("LoggingConfiguration"), ::OpenAPI::toJsonValue(m_logging_configuration));
    }
    if (m_max_workers_isSet) {
        obj.insert(QString("MaxWorkers"), ::OpenAPI::toJsonValue(m_max_workers));
    }
    if (m_min_workers_isSet) {
        obj.insert(QString("MinWorkers"), ::OpenAPI::toJsonValue(m_min_workers));
    }
    if (m_network_configuration.isSet()) {
        obj.insert(QString("NetworkConfiguration"), ::OpenAPI::toJsonValue(m_network_configuration));
    }
    if (m_plugins_s3_object_version_isSet) {
        obj.insert(QString("PluginsS3ObjectVersion"), ::OpenAPI::toJsonValue(m_plugins_s3_object_version));
    }
    if (m_plugins_s3_path_isSet) {
        obj.insert(QString("PluginsS3Path"), ::OpenAPI::toJsonValue(m_plugins_s3_path));
    }
    if (m_requirements_s3_object_version_isSet) {
        obj.insert(QString("RequirementsS3ObjectVersion"), ::OpenAPI::toJsonValue(m_requirements_s3_object_version));
    }
    if (m_requirements_s3_path_isSet) {
        obj.insert(QString("RequirementsS3Path"), ::OpenAPI::toJsonValue(m_requirements_s3_path));
    }
    if (m_schedulers_isSet) {
        obj.insert(QString("Schedulers"), ::OpenAPI::toJsonValue(m_schedulers));
    }
    if (m_source_bucket_arn_isSet) {
        obj.insert(QString("SourceBucketArn"), ::OpenAPI::toJsonValue(m_source_bucket_arn));
    }
    if (m_startup_script_s3_object_version_isSet) {
        obj.insert(QString("StartupScriptS3ObjectVersion"), ::OpenAPI::toJsonValue(m_startup_script_s3_object_version));
    }
    if (m_startup_script_s3_path_isSet) {
        obj.insert(QString("StartupScriptS3Path"), ::OpenAPI::toJsonValue(m_startup_script_s3_path));
    }
    if (m_webserver_access_mode.isSet()) {
        obj.insert(QString("WebserverAccessMode"), ::OpenAPI::toJsonValue(m_webserver_access_mode));
    }
    if (m_weekly_maintenance_window_start_isSet) {
        obj.insert(QString("WeeklyMaintenanceWindowStart"), ::OpenAPI::toJsonValue(m_weekly_maintenance_window_start));
    }
    return obj;
}

QMap OAIUpdateEnvironmentInput::getAirflowConfigurationOptions() const {
    return m_airflow_configuration_options;
}
void OAIUpdateEnvironmentInput::setAirflowConfigurationOptions(const QMap &airflow_configuration_options) {
    m_airflow_configuration_options = airflow_configuration_options;
    m_airflow_configuration_options_isSet = true;
}

bool OAIUpdateEnvironmentInput::is_airflow_configuration_options_Set() const{
    return m_airflow_configuration_options_isSet;
}

bool OAIUpdateEnvironmentInput::is_airflow_configuration_options_Valid() const{
    return m_airflow_configuration_options_isValid;
}

QString OAIUpdateEnvironmentInput::getAirflowVersion() const {
    return m_airflow_version;
}
void OAIUpdateEnvironmentInput::setAirflowVersion(const QString &airflow_version) {
    m_airflow_version = airflow_version;
    m_airflow_version_isSet = true;
}

bool OAIUpdateEnvironmentInput::is_airflow_version_Set() const{
    return m_airflow_version_isSet;
}

bool OAIUpdateEnvironmentInput::is_airflow_version_Valid() const{
    return m_airflow_version_isValid;
}

QString OAIUpdateEnvironmentInput::getDagS3Path() const {
    return m_dag_s3_path;
}
void OAIUpdateEnvironmentInput::setDagS3Path(const QString &dag_s3_path) {
    m_dag_s3_path = dag_s3_path;
    m_dag_s3_path_isSet = true;
}

bool OAIUpdateEnvironmentInput::is_dag_s3_path_Set() const{
    return m_dag_s3_path_isSet;
}

bool OAIUpdateEnvironmentInput::is_dag_s3_path_Valid() const{
    return m_dag_s3_path_isValid;
}

QString OAIUpdateEnvironmentInput::getEnvironmentClass() const {
    return m_environment_class;
}
void OAIUpdateEnvironmentInput::setEnvironmentClass(const QString &environment_class) {
    m_environment_class = environment_class;
    m_environment_class_isSet = true;
}

bool OAIUpdateEnvironmentInput::is_environment_class_Set() const{
    return m_environment_class_isSet;
}

bool OAIUpdateEnvironmentInput::is_environment_class_Valid() const{
    return m_environment_class_isValid;
}

QString OAIUpdateEnvironmentInput::getExecutionRoleArn() const {
    return m_execution_role_arn;
}
void OAIUpdateEnvironmentInput::setExecutionRoleArn(const QString &execution_role_arn) {
    m_execution_role_arn = execution_role_arn;
    m_execution_role_arn_isSet = true;
}

bool OAIUpdateEnvironmentInput::is_execution_role_arn_Set() const{
    return m_execution_role_arn_isSet;
}

bool OAIUpdateEnvironmentInput::is_execution_role_arn_Valid() const{
    return m_execution_role_arn_isValid;
}

OAIUpdateEnvironmentInput_LoggingConfiguration OAIUpdateEnvironmentInput::getLoggingConfiguration() const {
    return m_logging_configuration;
}
void OAIUpdateEnvironmentInput::setLoggingConfiguration(const OAIUpdateEnvironmentInput_LoggingConfiguration &logging_configuration) {
    m_logging_configuration = logging_configuration;
    m_logging_configuration_isSet = true;
}

bool OAIUpdateEnvironmentInput::is_logging_configuration_Set() const{
    return m_logging_configuration_isSet;
}

bool OAIUpdateEnvironmentInput::is_logging_configuration_Valid() const{
    return m_logging_configuration_isValid;
}

qint32 OAIUpdateEnvironmentInput::getMaxWorkers() const {
    return m_max_workers;
}
void OAIUpdateEnvironmentInput::setMaxWorkers(const qint32 &max_workers) {
    m_max_workers = max_workers;
    m_max_workers_isSet = true;
}

bool OAIUpdateEnvironmentInput::is_max_workers_Set() const{
    return m_max_workers_isSet;
}

bool OAIUpdateEnvironmentInput::is_max_workers_Valid() const{
    return m_max_workers_isValid;
}

qint32 OAIUpdateEnvironmentInput::getMinWorkers() const {
    return m_min_workers;
}
void OAIUpdateEnvironmentInput::setMinWorkers(const qint32 &min_workers) {
    m_min_workers = min_workers;
    m_min_workers_isSet = true;
}

bool OAIUpdateEnvironmentInput::is_min_workers_Set() const{
    return m_min_workers_isSet;
}

bool OAIUpdateEnvironmentInput::is_min_workers_Valid() const{
    return m_min_workers_isValid;
}

OAIUpdateEnvironmentInput_NetworkConfiguration OAIUpdateEnvironmentInput::getNetworkConfiguration() const {
    return m_network_configuration;
}
void OAIUpdateEnvironmentInput::setNetworkConfiguration(const OAIUpdateEnvironmentInput_NetworkConfiguration &network_configuration) {
    m_network_configuration = network_configuration;
    m_network_configuration_isSet = true;
}

bool OAIUpdateEnvironmentInput::is_network_configuration_Set() const{
    return m_network_configuration_isSet;
}

bool OAIUpdateEnvironmentInput::is_network_configuration_Valid() const{
    return m_network_configuration_isValid;
}

QString OAIUpdateEnvironmentInput::getPluginsS3ObjectVersion() const {
    return m_plugins_s3_object_version;
}
void OAIUpdateEnvironmentInput::setPluginsS3ObjectVersion(const QString &plugins_s3_object_version) {
    m_plugins_s3_object_version = plugins_s3_object_version;
    m_plugins_s3_object_version_isSet = true;
}

bool OAIUpdateEnvironmentInput::is_plugins_s3_object_version_Set() const{
    return m_plugins_s3_object_version_isSet;
}

bool OAIUpdateEnvironmentInput::is_plugins_s3_object_version_Valid() const{
    return m_plugins_s3_object_version_isValid;
}

QString OAIUpdateEnvironmentInput::getPluginsS3Path() const {
    return m_plugins_s3_path;
}
void OAIUpdateEnvironmentInput::setPluginsS3Path(const QString &plugins_s3_path) {
    m_plugins_s3_path = plugins_s3_path;
    m_plugins_s3_path_isSet = true;
}

bool OAIUpdateEnvironmentInput::is_plugins_s3_path_Set() const{
    return m_plugins_s3_path_isSet;
}

bool OAIUpdateEnvironmentInput::is_plugins_s3_path_Valid() const{
    return m_plugins_s3_path_isValid;
}

QString OAIUpdateEnvironmentInput::getRequirementsS3ObjectVersion() const {
    return m_requirements_s3_object_version;
}
void OAIUpdateEnvironmentInput::setRequirementsS3ObjectVersion(const QString &requirements_s3_object_version) {
    m_requirements_s3_object_version = requirements_s3_object_version;
    m_requirements_s3_object_version_isSet = true;
}

bool OAIUpdateEnvironmentInput::is_requirements_s3_object_version_Set() const{
    return m_requirements_s3_object_version_isSet;
}

bool OAIUpdateEnvironmentInput::is_requirements_s3_object_version_Valid() const{
    return m_requirements_s3_object_version_isValid;
}

QString OAIUpdateEnvironmentInput::getRequirementsS3Path() const {
    return m_requirements_s3_path;
}
void OAIUpdateEnvironmentInput::setRequirementsS3Path(const QString &requirements_s3_path) {
    m_requirements_s3_path = requirements_s3_path;
    m_requirements_s3_path_isSet = true;
}

bool OAIUpdateEnvironmentInput::is_requirements_s3_path_Set() const{
    return m_requirements_s3_path_isSet;
}

bool OAIUpdateEnvironmentInput::is_requirements_s3_path_Valid() const{
    return m_requirements_s3_path_isValid;
}

qint32 OAIUpdateEnvironmentInput::getSchedulers() const {
    return m_schedulers;
}
void OAIUpdateEnvironmentInput::setSchedulers(const qint32 &schedulers) {
    m_schedulers = schedulers;
    m_schedulers_isSet = true;
}

bool OAIUpdateEnvironmentInput::is_schedulers_Set() const{
    return m_schedulers_isSet;
}

bool OAIUpdateEnvironmentInput::is_schedulers_Valid() const{
    return m_schedulers_isValid;
}

QString OAIUpdateEnvironmentInput::getSourceBucketArn() const {
    return m_source_bucket_arn;
}
void OAIUpdateEnvironmentInput::setSourceBucketArn(const QString &source_bucket_arn) {
    m_source_bucket_arn = source_bucket_arn;
    m_source_bucket_arn_isSet = true;
}

bool OAIUpdateEnvironmentInput::is_source_bucket_arn_Set() const{
    return m_source_bucket_arn_isSet;
}

bool OAIUpdateEnvironmentInput::is_source_bucket_arn_Valid() const{
    return m_source_bucket_arn_isValid;
}

QString OAIUpdateEnvironmentInput::getStartupScriptS3ObjectVersion() const {
    return m_startup_script_s3_object_version;
}
void OAIUpdateEnvironmentInput::setStartupScriptS3ObjectVersion(const QString &startup_script_s3_object_version) {
    m_startup_script_s3_object_version = startup_script_s3_object_version;
    m_startup_script_s3_object_version_isSet = true;
}

bool OAIUpdateEnvironmentInput::is_startup_script_s3_object_version_Set() const{
    return m_startup_script_s3_object_version_isSet;
}

bool OAIUpdateEnvironmentInput::is_startup_script_s3_object_version_Valid() const{
    return m_startup_script_s3_object_version_isValid;
}

QString OAIUpdateEnvironmentInput::getStartupScriptS3Path() const {
    return m_startup_script_s3_path;
}
void OAIUpdateEnvironmentInput::setStartupScriptS3Path(const QString &startup_script_s3_path) {
    m_startup_script_s3_path = startup_script_s3_path;
    m_startup_script_s3_path_isSet = true;
}

bool OAIUpdateEnvironmentInput::is_startup_script_s3_path_Set() const{
    return m_startup_script_s3_path_isSet;
}

bool OAIUpdateEnvironmentInput::is_startup_script_s3_path_Valid() const{
    return m_startup_script_s3_path_isValid;
}

OAIWebserverAccessMode OAIUpdateEnvironmentInput::getWebserverAccessMode() const {
    return m_webserver_access_mode;
}
void OAIUpdateEnvironmentInput::setWebserverAccessMode(const OAIWebserverAccessMode &webserver_access_mode) {
    m_webserver_access_mode = webserver_access_mode;
    m_webserver_access_mode_isSet = true;
}

bool OAIUpdateEnvironmentInput::is_webserver_access_mode_Set() const{
    return m_webserver_access_mode_isSet;
}

bool OAIUpdateEnvironmentInput::is_webserver_access_mode_Valid() const{
    return m_webserver_access_mode_isValid;
}

QString OAIUpdateEnvironmentInput::getWeeklyMaintenanceWindowStart() const {
    return m_weekly_maintenance_window_start;
}
void OAIUpdateEnvironmentInput::setWeeklyMaintenanceWindowStart(const QString &weekly_maintenance_window_start) {
    m_weekly_maintenance_window_start = weekly_maintenance_window_start;
    m_weekly_maintenance_window_start_isSet = true;
}

bool OAIUpdateEnvironmentInput::is_weekly_maintenance_window_start_Set() const{
    return m_weekly_maintenance_window_start_isSet;
}

bool OAIUpdateEnvironmentInput::is_weekly_maintenance_window_start_Valid() const{
    return m_weekly_maintenance_window_start_isValid;
}

bool OAIUpdateEnvironmentInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_airflow_configuration_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_airflow_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dag_s3_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_workers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_workers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_plugins_s3_object_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plugins_s3_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requirements_s3_object_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requirements_s3_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedulers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_bucket_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_startup_script_s3_object_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_startup_script_s3_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webserver_access_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_weekly_maintenance_window_start_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateEnvironmentInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
