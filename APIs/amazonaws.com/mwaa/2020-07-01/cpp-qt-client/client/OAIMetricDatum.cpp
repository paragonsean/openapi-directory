/**
 * AmazonMWAA
 * <p><fullname>Amazon Managed Workflows for Apache Airflow</fullname> <p>This section contains the Amazon Managed Workflows for Apache Airflow (MWAA) API reference documentation. For more information, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/what-is-mwaa.html\">What is Amazon MWAA?</a>.</p> <p> <b>Endpoints</b> </p> <ul> <li> <p> <code>api.airflow.{region}.amazonaws.com</code> - This endpoint is used for environment management.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_CreateEnvironment.html\">CreateEnvironment</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_DeleteEnvironment.html\">DeleteEnvironment</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_GetEnvironment.html\">GetEnvironment</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_ListEnvironments.html\">ListEnvironments</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_ListTagsForResource.html\">ListTagsForResource</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_TagResource.html\">TagResource</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_UntagResource.html\">UntagResource</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_UpdateEnvironment.html\">UpdateEnvironment</a> </p> </li> </ul> </li> <li> <p> <code>env.airflow.{region}.amazonaws.com</code> - This endpoint is used to operate the Airflow environment.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_CreateCliToken.html \">CreateCliToken</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_CreateWebLoginToken.html\">CreateWebLoginToken</a> </p> </li> </ul> </li> <li> <p> <code>ops.airflow.{region}.amazonaws.com</code> - This endpoint is used to push environment metrics that track environment health.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_PublishMetrics.html \">PublishMetrics</a> </p> </li> </ul> </li> </ul> <p> <b>Regions</b> </p> <p>For a list of regions that Amazon MWAA supports, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/what-is-mwaa.html#regions-mwaa\">Region availability</a> in the <i>Amazon MWAA User Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2020-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricDatum.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricDatum::OAIMetricDatum(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricDatum::OAIMetricDatum() {
    this->initializeModel();
}

OAIMetricDatum::~OAIMetricDatum() {}

void OAIMetricDatum::initializeModel() {

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_metric_name_isSet = false;
    m_metric_name_isValid = false;

    m_statistic_values_isSet = false;
    m_statistic_values_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIMetricDatum::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricDatum::fromJsonObject(QJsonObject json) {

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("Dimensions")]);
    m_dimensions_isSet = !json[QString("Dimensions")].isNull() && m_dimensions_isValid;

    m_metric_name_isValid = ::OpenAPI::fromJsonValue(m_metric_name, json[QString("MetricName")]);
    m_metric_name_isSet = !json[QString("MetricName")].isNull() && m_metric_name_isValid;

    m_statistic_values_isValid = ::OpenAPI::fromJsonValue(m_statistic_values, json[QString("StatisticValues")]);
    m_statistic_values_isSet = !json[QString("StatisticValues")].isNull() && m_statistic_values_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("Timestamp")]);
    m_timestamp_isSet = !json[QString("Timestamp")].isNull() && m_timestamp_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("Unit")]);
    m_unit_isSet = !json[QString("Unit")].isNull() && m_unit_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;
}

QString OAIMetricDatum::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricDatum::asJsonObject() const {
    QJsonObject obj;
    if (m_dimensions.isSet()) {
        obj.insert(QString("Dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_metric_name_isSet) {
        obj.insert(QString("MetricName"), ::OpenAPI::toJsonValue(m_metric_name));
    }
    if (m_statistic_values.isSet()) {
        obj.insert(QString("StatisticValues"), ::OpenAPI::toJsonValue(m_statistic_values));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("Timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_unit.isSet()) {
        obj.insert(QString("Unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QList OAIMetricDatum::getDimensions() const {
    return m_dimensions;
}
void OAIMetricDatum::setDimensions(const QList &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIMetricDatum::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIMetricDatum::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QString OAIMetricDatum::getMetricName() const {
    return m_metric_name;
}
void OAIMetricDatum::setMetricName(const QString &metric_name) {
    m_metric_name = metric_name;
    m_metric_name_isSet = true;
}

bool OAIMetricDatum::is_metric_name_Set() const{
    return m_metric_name_isSet;
}

bool OAIMetricDatum::is_metric_name_Valid() const{
    return m_metric_name_isValid;
}

OAIMetricDatum_StatisticValues OAIMetricDatum::getStatisticValues() const {
    return m_statistic_values;
}
void OAIMetricDatum::setStatisticValues(const OAIMetricDatum_StatisticValues &statistic_values) {
    m_statistic_values = statistic_values;
    m_statistic_values_isSet = true;
}

bool OAIMetricDatum::is_statistic_values_Set() const{
    return m_statistic_values_isSet;
}

bool OAIMetricDatum::is_statistic_values_Valid() const{
    return m_statistic_values_isValid;
}

QDateTime OAIMetricDatum::getTimestamp() const {
    return m_timestamp;
}
void OAIMetricDatum::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIMetricDatum::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIMetricDatum::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

OAIUnit OAIMetricDatum::getUnit() const {
    return m_unit;
}
void OAIMetricDatum::setUnit(const OAIUnit &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIMetricDatum::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIMetricDatum::is_unit_Valid() const{
    return m_unit_isValid;
}

double OAIMetricDatum::getValue() const {
    return m_value;
}
void OAIMetricDatum::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIMetricDatum::is_value_Set() const{
    return m_value_isSet;
}

bool OAIMetricDatum::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIMetricDatum::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistic_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricDatum::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_metric_name_isValid && m_timestamp_isValid && true;
}

} // namespace OpenAPI
