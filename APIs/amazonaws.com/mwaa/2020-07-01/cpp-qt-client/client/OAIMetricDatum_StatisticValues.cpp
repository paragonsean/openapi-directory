/**
 * AmazonMWAA
 * <p><fullname>Amazon Managed Workflows for Apache Airflow</fullname> <p>This section contains the Amazon Managed Workflows for Apache Airflow (MWAA) API reference documentation. For more information, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/what-is-mwaa.html\">What is Amazon MWAA?</a>.</p> <p> <b>Endpoints</b> </p> <ul> <li> <p> <code>api.airflow.{region}.amazonaws.com</code> - This endpoint is used for environment management.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_CreateEnvironment.html\">CreateEnvironment</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_DeleteEnvironment.html\">DeleteEnvironment</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_GetEnvironment.html\">GetEnvironment</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_ListEnvironments.html\">ListEnvironments</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_ListTagsForResource.html\">ListTagsForResource</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_TagResource.html\">TagResource</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_UntagResource.html\">UntagResource</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_UpdateEnvironment.html\">UpdateEnvironment</a> </p> </li> </ul> </li> <li> <p> <code>env.airflow.{region}.amazonaws.com</code> - This endpoint is used to operate the Airflow environment.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_CreateCliToken.html \">CreateCliToken</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_CreateWebLoginToken.html\">CreateWebLoginToken</a> </p> </li> </ul> </li> <li> <p> <code>ops.airflow.{region}.amazonaws.com</code> - This endpoint is used to push environment metrics that track environment health.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_PublishMetrics.html \">PublishMetrics</a> </p> </li> </ul> </li> </ul> <p> <b>Regions</b> </p> <p>For a list of regions that Amazon MWAA supports, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/what-is-mwaa.html#regions-mwaa\">Region availability</a> in the <i>Amazon MWAA User Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2020-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricDatum_StatisticValues.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricDatum_StatisticValues::OAIMetricDatum_StatisticValues(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricDatum_StatisticValues::OAIMetricDatum_StatisticValues() {
    this->initializeModel();
}

OAIMetricDatum_StatisticValues::~OAIMetricDatum_StatisticValues() {}

void OAIMetricDatum_StatisticValues::initializeModel() {

    m_maximum_isSet = false;
    m_maximum_isValid = false;

    m_minimum_isSet = false;
    m_minimum_isValid = false;

    m_sample_count_isSet = false;
    m_sample_count_isValid = false;

    m_sum_isSet = false;
    m_sum_isValid = false;
}

void OAIMetricDatum_StatisticValues::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricDatum_StatisticValues::fromJsonObject(QJsonObject json) {

    m_maximum_isValid = ::OpenAPI::fromJsonValue(m_maximum, json[QString("Maximum")]);
    m_maximum_isSet = !json[QString("Maximum")].isNull() && m_maximum_isValid;

    m_minimum_isValid = ::OpenAPI::fromJsonValue(m_minimum, json[QString("Minimum")]);
    m_minimum_isSet = !json[QString("Minimum")].isNull() && m_minimum_isValid;

    m_sample_count_isValid = ::OpenAPI::fromJsonValue(m_sample_count, json[QString("SampleCount")]);
    m_sample_count_isSet = !json[QString("SampleCount")].isNull() && m_sample_count_isValid;

    m_sum_isValid = ::OpenAPI::fromJsonValue(m_sum, json[QString("Sum")]);
    m_sum_isSet = !json[QString("Sum")].isNull() && m_sum_isValid;
}

QString OAIMetricDatum_StatisticValues::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricDatum_StatisticValues::asJsonObject() const {
    QJsonObject obj;
    if (m_maximum_isSet) {
        obj.insert(QString("Maximum"), ::OpenAPI::toJsonValue(m_maximum));
    }
    if (m_minimum_isSet) {
        obj.insert(QString("Minimum"), ::OpenAPI::toJsonValue(m_minimum));
    }
    if (m_sample_count_isSet) {
        obj.insert(QString("SampleCount"), ::OpenAPI::toJsonValue(m_sample_count));
    }
    if (m_sum_isSet) {
        obj.insert(QString("Sum"), ::OpenAPI::toJsonValue(m_sum));
    }
    return obj;
}

double OAIMetricDatum_StatisticValues::getMaximum() const {
    return m_maximum;
}
void OAIMetricDatum_StatisticValues::setMaximum(const double &maximum) {
    m_maximum = maximum;
    m_maximum_isSet = true;
}

bool OAIMetricDatum_StatisticValues::is_maximum_Set() const{
    return m_maximum_isSet;
}

bool OAIMetricDatum_StatisticValues::is_maximum_Valid() const{
    return m_maximum_isValid;
}

double OAIMetricDatum_StatisticValues::getMinimum() const {
    return m_minimum;
}
void OAIMetricDatum_StatisticValues::setMinimum(const double &minimum) {
    m_minimum = minimum;
    m_minimum_isSet = true;
}

bool OAIMetricDatum_StatisticValues::is_minimum_Set() const{
    return m_minimum_isSet;
}

bool OAIMetricDatum_StatisticValues::is_minimum_Valid() const{
    return m_minimum_isValid;
}

qint32 OAIMetricDatum_StatisticValues::getSampleCount() const {
    return m_sample_count;
}
void OAIMetricDatum_StatisticValues::setSampleCount(const qint32 &sample_count) {
    m_sample_count = sample_count;
    m_sample_count_isSet = true;
}

bool OAIMetricDatum_StatisticValues::is_sample_count_Set() const{
    return m_sample_count_isSet;
}

bool OAIMetricDatum_StatisticValues::is_sample_count_Valid() const{
    return m_sample_count_isValid;
}

double OAIMetricDatum_StatisticValues::getSum() const {
    return m_sum;
}
void OAIMetricDatum_StatisticValues::setSum(const double &sum) {
    m_sum = sum;
    m_sum_isSet = true;
}

bool OAIMetricDatum_StatisticValues::is_sum_Set() const{
    return m_sum_isSet;
}

bool OAIMetricDatum_StatisticValues::is_sum_Valid() const{
    return m_sum_isValid;
}

bool OAIMetricDatum_StatisticValues::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_maximum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sum_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricDatum_StatisticValues::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
