/**
 * AmazonMWAA
 * <p><fullname>Amazon Managed Workflows for Apache Airflow</fullname> <p>This section contains the Amazon Managed Workflows for Apache Airflow (MWAA) API reference documentation. For more information, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/what-is-mwaa.html\">What is Amazon MWAA?</a>.</p> <p> <b>Endpoints</b> </p> <ul> <li> <p> <code>api.airflow.{region}.amazonaws.com</code> - This endpoint is used for environment management.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_CreateEnvironment.html\">CreateEnvironment</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_DeleteEnvironment.html\">DeleteEnvironment</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_GetEnvironment.html\">GetEnvironment</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_ListEnvironments.html\">ListEnvironments</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_ListTagsForResource.html\">ListTagsForResource</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_TagResource.html\">TagResource</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_UntagResource.html\">UntagResource</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_UpdateEnvironment.html\">UpdateEnvironment</a> </p> </li> </ul> </li> <li> <p> <code>env.airflow.{region}.amazonaws.com</code> - This endpoint is used to operate the Airflow environment.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_CreateCliToken.html \">CreateCliToken</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_CreateWebLoginToken.html\">CreateWebLoginToken</a> </p> </li> </ul> </li> <li> <p> <code>ops.airflow.{region}.amazonaws.com</code> - This endpoint is used to push environment metrics that track environment health.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_PublishMetrics.html \">PublishMetrics</a> </p> </li> </ul> </li> </ul> <p> <b>Regions</b> </p> <p>For a list of regions that Amazon MWAA supports, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/what-is-mwaa.html#regions-mwaa\">Region availability</a> in the <i>Amazon MWAA User Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2020-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoggingConfiguration_WebserverLogs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoggingConfiguration_WebserverLogs::OAILoggingConfiguration_WebserverLogs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoggingConfiguration_WebserverLogs::OAILoggingConfiguration_WebserverLogs() {
    this->initializeModel();
}

OAILoggingConfiguration_WebserverLogs::~OAILoggingConfiguration_WebserverLogs() {}

void OAILoggingConfiguration_WebserverLogs::initializeModel() {

    m_cloud_watch_log_group_arn_isSet = false;
    m_cloud_watch_log_group_arn_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_log_level_isSet = false;
    m_log_level_isValid = false;
}

void OAILoggingConfiguration_WebserverLogs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoggingConfiguration_WebserverLogs::fromJsonObject(QJsonObject json) {

    m_cloud_watch_log_group_arn_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_log_group_arn, json[QString("CloudWatchLogGroupArn")]);
    m_cloud_watch_log_group_arn_isSet = !json[QString("CloudWatchLogGroupArn")].isNull() && m_cloud_watch_log_group_arn_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("Enabled")]);
    m_enabled_isSet = !json[QString("Enabled")].isNull() && m_enabled_isValid;

    m_log_level_isValid = ::OpenAPI::fromJsonValue(m_log_level, json[QString("LogLevel")]);
    m_log_level_isSet = !json[QString("LogLevel")].isNull() && m_log_level_isValid;
}

QString OAILoggingConfiguration_WebserverLogs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoggingConfiguration_WebserverLogs::asJsonObject() const {
    QJsonObject obj;
    if (m_cloud_watch_log_group_arn_isSet) {
        obj.insert(QString("CloudWatchLogGroupArn"), ::OpenAPI::toJsonValue(m_cloud_watch_log_group_arn));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("Enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_log_level.isSet()) {
        obj.insert(QString("LogLevel"), ::OpenAPI::toJsonValue(m_log_level));
    }
    return obj;
}

QString OAILoggingConfiguration_WebserverLogs::getCloudWatchLogGroupArn() const {
    return m_cloud_watch_log_group_arn;
}
void OAILoggingConfiguration_WebserverLogs::setCloudWatchLogGroupArn(const QString &cloud_watch_log_group_arn) {
    m_cloud_watch_log_group_arn = cloud_watch_log_group_arn;
    m_cloud_watch_log_group_arn_isSet = true;
}

bool OAILoggingConfiguration_WebserverLogs::is_cloud_watch_log_group_arn_Set() const{
    return m_cloud_watch_log_group_arn_isSet;
}

bool OAILoggingConfiguration_WebserverLogs::is_cloud_watch_log_group_arn_Valid() const{
    return m_cloud_watch_log_group_arn_isValid;
}

bool OAILoggingConfiguration_WebserverLogs::getEnabled() const {
    return m_enabled;
}
void OAILoggingConfiguration_WebserverLogs::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAILoggingConfiguration_WebserverLogs::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAILoggingConfiguration_WebserverLogs::is_enabled_Valid() const{
    return m_enabled_isValid;
}

OAILoggingLevel OAILoggingConfiguration_WebserverLogs::getLogLevel() const {
    return m_log_level;
}
void OAILoggingConfiguration_WebserverLogs::setLogLevel(const OAILoggingLevel &log_level) {
    m_log_level = log_level;
    m_log_level_isSet = true;
}

bool OAILoggingConfiguration_WebserverLogs::is_log_level_Set() const{
    return m_log_level_isSet;
}

bool OAILoggingConfiguration_WebserverLogs::is_log_level_Valid() const{
    return m_log_level_isValid;
}

bool OAILoggingConfiguration_WebserverLogs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cloud_watch_log_group_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_level.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoggingConfiguration_WebserverLogs::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
