/*
 * AmazonMWAA
 * <p><fullname>Amazon Managed Workflows for Apache Airflow</fullname> <p>This section contains the Amazon Managed Workflows for Apache Airflow (MWAA) API reference documentation. For more information, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/what-is-mwaa.html\">What is Amazon MWAA?</a>.</p> <p> <b>Endpoints</b> </p> <ul> <li> <p> <code>api.airflow.{region}.amazonaws.com</code> - This endpoint is used for environment management.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_CreateEnvironment.html\">CreateEnvironment</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_DeleteEnvironment.html\">DeleteEnvironment</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_GetEnvironment.html\">GetEnvironment</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_ListEnvironments.html\">ListEnvironments</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_ListTagsForResource.html\">ListTagsForResource</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_TagResource.html\">TagResource</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_UntagResource.html\">UntagResource</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_UpdateEnvironment.html\">UpdateEnvironment</a> </p> </li> </ul> </li> <li> <p> <code>env.airflow.{region}.amazonaws.com</code> - This endpoint is used to operate the Airflow environment.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_CreateCliToken.html \">CreateCliToken</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_CreateWebLoginToken.html\">CreateWebLoginToken</a> </p> </li> </ul> </li> <li> <p> <code>ops.airflow.{region}.amazonaws.com</code> - This endpoint is used to push environment metrics that track environment health.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_PublishMetrics.html \">PublishMetrics</a> </p> </li> </ul> </li> </ul> <p> <b>Regions</b> </p> <p>For a list of regions that Amazon MWAA supports, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/what-is-mwaa.html#regions-mwaa\">Region availability</a> in the <i>Amazon MWAA User Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2020-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.UpdateEnvironmentInputLoggingConfiguration;
import org.openapitools.client.model.UpdateEnvironmentInputNetworkConfiguration;
import org.openapitools.client.model.WebserverAccessMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateEnvironmentInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:05.881352-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateEnvironmentInput {
  public static final String SERIALIZED_NAME_AIRFLOW_CONFIGURATION_OPTIONS = "AirflowConfigurationOptions";
  @SerializedName(SERIALIZED_NAME_AIRFLOW_CONFIGURATION_OPTIONS)
  private Map airflowConfigurationOptions;

  public static final String SERIALIZED_NAME_AIRFLOW_VERSION = "AirflowVersion";
  @SerializedName(SERIALIZED_NAME_AIRFLOW_VERSION)
  private String airflowVersion;

  public static final String SERIALIZED_NAME_DAG_S3_PATH = "DagS3Path";
  @SerializedName(SERIALIZED_NAME_DAG_S3_PATH)
  private String dagS3Path;

  public static final String SERIALIZED_NAME_ENVIRONMENT_CLASS = "EnvironmentClass";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_CLASS)
  private String environmentClass;

  public static final String SERIALIZED_NAME_EXECUTION_ROLE_ARN = "ExecutionRoleArn";
  @SerializedName(SERIALIZED_NAME_EXECUTION_ROLE_ARN)
  private String executionRoleArn;

  public static final String SERIALIZED_NAME_LOGGING_CONFIGURATION = "LoggingConfiguration";
  @SerializedName(SERIALIZED_NAME_LOGGING_CONFIGURATION)
  private UpdateEnvironmentInputLoggingConfiguration loggingConfiguration;

  public static final String SERIALIZED_NAME_MAX_WORKERS = "MaxWorkers";
  @SerializedName(SERIALIZED_NAME_MAX_WORKERS)
  private Integer maxWorkers;

  public static final String SERIALIZED_NAME_MIN_WORKERS = "MinWorkers";
  @SerializedName(SERIALIZED_NAME_MIN_WORKERS)
  private Integer minWorkers;

  public static final String SERIALIZED_NAME_NETWORK_CONFIGURATION = "NetworkConfiguration";
  @SerializedName(SERIALIZED_NAME_NETWORK_CONFIGURATION)
  private UpdateEnvironmentInputNetworkConfiguration networkConfiguration;

  public static final String SERIALIZED_NAME_PLUGINS_S3_OBJECT_VERSION = "PluginsS3ObjectVersion";
  @SerializedName(SERIALIZED_NAME_PLUGINS_S3_OBJECT_VERSION)
  private String pluginsS3ObjectVersion;

  public static final String SERIALIZED_NAME_PLUGINS_S3_PATH = "PluginsS3Path";
  @SerializedName(SERIALIZED_NAME_PLUGINS_S3_PATH)
  private String pluginsS3Path;

  public static final String SERIALIZED_NAME_REQUIREMENTS_S3_OBJECT_VERSION = "RequirementsS3ObjectVersion";
  @SerializedName(SERIALIZED_NAME_REQUIREMENTS_S3_OBJECT_VERSION)
  private String requirementsS3ObjectVersion;

  public static final String SERIALIZED_NAME_REQUIREMENTS_S3_PATH = "RequirementsS3Path";
  @SerializedName(SERIALIZED_NAME_REQUIREMENTS_S3_PATH)
  private String requirementsS3Path;

  public static final String SERIALIZED_NAME_SCHEDULERS = "Schedulers";
  @SerializedName(SERIALIZED_NAME_SCHEDULERS)
  private Integer schedulers;

  public static final String SERIALIZED_NAME_SOURCE_BUCKET_ARN = "SourceBucketArn";
  @SerializedName(SERIALIZED_NAME_SOURCE_BUCKET_ARN)
  private String sourceBucketArn;

  public static final String SERIALIZED_NAME_STARTUP_SCRIPT_S3_OBJECT_VERSION = "StartupScriptS3ObjectVersion";
  @SerializedName(SERIALIZED_NAME_STARTUP_SCRIPT_S3_OBJECT_VERSION)
  private String startupScriptS3ObjectVersion;

  public static final String SERIALIZED_NAME_STARTUP_SCRIPT_S3_PATH = "StartupScriptS3Path";
  @SerializedName(SERIALIZED_NAME_STARTUP_SCRIPT_S3_PATH)
  private String startupScriptS3Path;

  public static final String SERIALIZED_NAME_WEBSERVER_ACCESS_MODE = "WebserverAccessMode";
  @SerializedName(SERIALIZED_NAME_WEBSERVER_ACCESS_MODE)
  private WebserverAccessMode webserverAccessMode;

  public static final String SERIALIZED_NAME_WEEKLY_MAINTENANCE_WINDOW_START = "WeeklyMaintenanceWindowStart";
  @SerializedName(SERIALIZED_NAME_WEEKLY_MAINTENANCE_WINDOW_START)
  private String weeklyMaintenanceWindowStart;

  public UpdateEnvironmentInput() {
  }

  public UpdateEnvironmentInput airflowConfigurationOptions(Map airflowConfigurationOptions) {
    this.airflowConfigurationOptions = airflowConfigurationOptions;
    return this;
  }

  /**
   * Get airflowConfigurationOptions
   * @return airflowConfigurationOptions
   */
  @javax.annotation.Nullable
  public Map getAirflowConfigurationOptions() {
    return airflowConfigurationOptions;
  }

  public void setAirflowConfigurationOptions(Map airflowConfigurationOptions) {
    this.airflowConfigurationOptions = airflowConfigurationOptions;
  }


  public UpdateEnvironmentInput airflowVersion(String airflowVersion) {
    this.airflowVersion = airflowVersion;
    return this;
  }

  /**
   * Get airflowVersion
   * @return airflowVersion
   */
  @javax.annotation.Nullable
  public String getAirflowVersion() {
    return airflowVersion;
  }

  public void setAirflowVersion(String airflowVersion) {
    this.airflowVersion = airflowVersion;
  }


  public UpdateEnvironmentInput dagS3Path(String dagS3Path) {
    this.dagS3Path = dagS3Path;
    return this;
  }

  /**
   * Get dagS3Path
   * @return dagS3Path
   */
  @javax.annotation.Nullable
  public String getDagS3Path() {
    return dagS3Path;
  }

  public void setDagS3Path(String dagS3Path) {
    this.dagS3Path = dagS3Path;
  }


  public UpdateEnvironmentInput environmentClass(String environmentClass) {
    this.environmentClass = environmentClass;
    return this;
  }

  /**
   * Get environmentClass
   * @return environmentClass
   */
  @javax.annotation.Nullable
  public String getEnvironmentClass() {
    return environmentClass;
  }

  public void setEnvironmentClass(String environmentClass) {
    this.environmentClass = environmentClass;
  }


  public UpdateEnvironmentInput executionRoleArn(String executionRoleArn) {
    this.executionRoleArn = executionRoleArn;
    return this;
  }

  /**
   * Get executionRoleArn
   * @return executionRoleArn
   */
  @javax.annotation.Nullable
  public String getExecutionRoleArn() {
    return executionRoleArn;
  }

  public void setExecutionRoleArn(String executionRoleArn) {
    this.executionRoleArn = executionRoleArn;
  }


  public UpdateEnvironmentInput loggingConfiguration(UpdateEnvironmentInputLoggingConfiguration loggingConfiguration) {
    this.loggingConfiguration = loggingConfiguration;
    return this;
  }

  /**
   * Get loggingConfiguration
   * @return loggingConfiguration
   */
  @javax.annotation.Nullable
  public UpdateEnvironmentInputLoggingConfiguration getLoggingConfiguration() {
    return loggingConfiguration;
  }

  public void setLoggingConfiguration(UpdateEnvironmentInputLoggingConfiguration loggingConfiguration) {
    this.loggingConfiguration = loggingConfiguration;
  }


  public UpdateEnvironmentInput maxWorkers(Integer maxWorkers) {
    this.maxWorkers = maxWorkers;
    return this;
  }

  /**
   * Get maxWorkers
   * @return maxWorkers
   */
  @javax.annotation.Nullable
  public Integer getMaxWorkers() {
    return maxWorkers;
  }

  public void setMaxWorkers(Integer maxWorkers) {
    this.maxWorkers = maxWorkers;
  }


  public UpdateEnvironmentInput minWorkers(Integer minWorkers) {
    this.minWorkers = minWorkers;
    return this;
  }

  /**
   * Get minWorkers
   * @return minWorkers
   */
  @javax.annotation.Nullable
  public Integer getMinWorkers() {
    return minWorkers;
  }

  public void setMinWorkers(Integer minWorkers) {
    this.minWorkers = minWorkers;
  }


  public UpdateEnvironmentInput networkConfiguration(UpdateEnvironmentInputNetworkConfiguration networkConfiguration) {
    this.networkConfiguration = networkConfiguration;
    return this;
  }

  /**
   * Get networkConfiguration
   * @return networkConfiguration
   */
  @javax.annotation.Nullable
  public UpdateEnvironmentInputNetworkConfiguration getNetworkConfiguration() {
    return networkConfiguration;
  }

  public void setNetworkConfiguration(UpdateEnvironmentInputNetworkConfiguration networkConfiguration) {
    this.networkConfiguration = networkConfiguration;
  }


  public UpdateEnvironmentInput pluginsS3ObjectVersion(String pluginsS3ObjectVersion) {
    this.pluginsS3ObjectVersion = pluginsS3ObjectVersion;
    return this;
  }

  /**
   * Get pluginsS3ObjectVersion
   * @return pluginsS3ObjectVersion
   */
  @javax.annotation.Nullable
  public String getPluginsS3ObjectVersion() {
    return pluginsS3ObjectVersion;
  }

  public void setPluginsS3ObjectVersion(String pluginsS3ObjectVersion) {
    this.pluginsS3ObjectVersion = pluginsS3ObjectVersion;
  }


  public UpdateEnvironmentInput pluginsS3Path(String pluginsS3Path) {
    this.pluginsS3Path = pluginsS3Path;
    return this;
  }

  /**
   * Get pluginsS3Path
   * @return pluginsS3Path
   */
  @javax.annotation.Nullable
  public String getPluginsS3Path() {
    return pluginsS3Path;
  }

  public void setPluginsS3Path(String pluginsS3Path) {
    this.pluginsS3Path = pluginsS3Path;
  }


  public UpdateEnvironmentInput requirementsS3ObjectVersion(String requirementsS3ObjectVersion) {
    this.requirementsS3ObjectVersion = requirementsS3ObjectVersion;
    return this;
  }

  /**
   * Get requirementsS3ObjectVersion
   * @return requirementsS3ObjectVersion
   */
  @javax.annotation.Nullable
  public String getRequirementsS3ObjectVersion() {
    return requirementsS3ObjectVersion;
  }

  public void setRequirementsS3ObjectVersion(String requirementsS3ObjectVersion) {
    this.requirementsS3ObjectVersion = requirementsS3ObjectVersion;
  }


  public UpdateEnvironmentInput requirementsS3Path(String requirementsS3Path) {
    this.requirementsS3Path = requirementsS3Path;
    return this;
  }

  /**
   * Get requirementsS3Path
   * @return requirementsS3Path
   */
  @javax.annotation.Nullable
  public String getRequirementsS3Path() {
    return requirementsS3Path;
  }

  public void setRequirementsS3Path(String requirementsS3Path) {
    this.requirementsS3Path = requirementsS3Path;
  }


  public UpdateEnvironmentInput schedulers(Integer schedulers) {
    this.schedulers = schedulers;
    return this;
  }

  /**
   * Get schedulers
   * @return schedulers
   */
  @javax.annotation.Nullable
  public Integer getSchedulers() {
    return schedulers;
  }

  public void setSchedulers(Integer schedulers) {
    this.schedulers = schedulers;
  }


  public UpdateEnvironmentInput sourceBucketArn(String sourceBucketArn) {
    this.sourceBucketArn = sourceBucketArn;
    return this;
  }

  /**
   * Get sourceBucketArn
   * @return sourceBucketArn
   */
  @javax.annotation.Nullable
  public String getSourceBucketArn() {
    return sourceBucketArn;
  }

  public void setSourceBucketArn(String sourceBucketArn) {
    this.sourceBucketArn = sourceBucketArn;
  }


  public UpdateEnvironmentInput startupScriptS3ObjectVersion(String startupScriptS3ObjectVersion) {
    this.startupScriptS3ObjectVersion = startupScriptS3ObjectVersion;
    return this;
  }

  /**
   * Get startupScriptS3ObjectVersion
   * @return startupScriptS3ObjectVersion
   */
  @javax.annotation.Nullable
  public String getStartupScriptS3ObjectVersion() {
    return startupScriptS3ObjectVersion;
  }

  public void setStartupScriptS3ObjectVersion(String startupScriptS3ObjectVersion) {
    this.startupScriptS3ObjectVersion = startupScriptS3ObjectVersion;
  }


  public UpdateEnvironmentInput startupScriptS3Path(String startupScriptS3Path) {
    this.startupScriptS3Path = startupScriptS3Path;
    return this;
  }

  /**
   * Get startupScriptS3Path
   * @return startupScriptS3Path
   */
  @javax.annotation.Nullable
  public String getStartupScriptS3Path() {
    return startupScriptS3Path;
  }

  public void setStartupScriptS3Path(String startupScriptS3Path) {
    this.startupScriptS3Path = startupScriptS3Path;
  }


  public UpdateEnvironmentInput webserverAccessMode(WebserverAccessMode webserverAccessMode) {
    this.webserverAccessMode = webserverAccessMode;
    return this;
  }

  /**
   * Get webserverAccessMode
   * @return webserverAccessMode
   */
  @javax.annotation.Nullable
  public WebserverAccessMode getWebserverAccessMode() {
    return webserverAccessMode;
  }

  public void setWebserverAccessMode(WebserverAccessMode webserverAccessMode) {
    this.webserverAccessMode = webserverAccessMode;
  }


  public UpdateEnvironmentInput weeklyMaintenanceWindowStart(String weeklyMaintenanceWindowStart) {
    this.weeklyMaintenanceWindowStart = weeklyMaintenanceWindowStart;
    return this;
  }

  /**
   * Get weeklyMaintenanceWindowStart
   * @return weeklyMaintenanceWindowStart
   */
  @javax.annotation.Nullable
  public String getWeeklyMaintenanceWindowStart() {
    return weeklyMaintenanceWindowStart;
  }

  public void setWeeklyMaintenanceWindowStart(String weeklyMaintenanceWindowStart) {
    this.weeklyMaintenanceWindowStart = weeklyMaintenanceWindowStart;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateEnvironmentInput updateEnvironmentInput = (UpdateEnvironmentInput) o;
    return Objects.equals(this.airflowConfigurationOptions, updateEnvironmentInput.airflowConfigurationOptions) &&
        Objects.equals(this.airflowVersion, updateEnvironmentInput.airflowVersion) &&
        Objects.equals(this.dagS3Path, updateEnvironmentInput.dagS3Path) &&
        Objects.equals(this.environmentClass, updateEnvironmentInput.environmentClass) &&
        Objects.equals(this.executionRoleArn, updateEnvironmentInput.executionRoleArn) &&
        Objects.equals(this.loggingConfiguration, updateEnvironmentInput.loggingConfiguration) &&
        Objects.equals(this.maxWorkers, updateEnvironmentInput.maxWorkers) &&
        Objects.equals(this.minWorkers, updateEnvironmentInput.minWorkers) &&
        Objects.equals(this.networkConfiguration, updateEnvironmentInput.networkConfiguration) &&
        Objects.equals(this.pluginsS3ObjectVersion, updateEnvironmentInput.pluginsS3ObjectVersion) &&
        Objects.equals(this.pluginsS3Path, updateEnvironmentInput.pluginsS3Path) &&
        Objects.equals(this.requirementsS3ObjectVersion, updateEnvironmentInput.requirementsS3ObjectVersion) &&
        Objects.equals(this.requirementsS3Path, updateEnvironmentInput.requirementsS3Path) &&
        Objects.equals(this.schedulers, updateEnvironmentInput.schedulers) &&
        Objects.equals(this.sourceBucketArn, updateEnvironmentInput.sourceBucketArn) &&
        Objects.equals(this.startupScriptS3ObjectVersion, updateEnvironmentInput.startupScriptS3ObjectVersion) &&
        Objects.equals(this.startupScriptS3Path, updateEnvironmentInput.startupScriptS3Path) &&
        Objects.equals(this.webserverAccessMode, updateEnvironmentInput.webserverAccessMode) &&
        Objects.equals(this.weeklyMaintenanceWindowStart, updateEnvironmentInput.weeklyMaintenanceWindowStart);
  }

  @Override
  public int hashCode() {
    return Objects.hash(airflowConfigurationOptions, airflowVersion, dagS3Path, environmentClass, executionRoleArn, loggingConfiguration, maxWorkers, minWorkers, networkConfiguration, pluginsS3ObjectVersion, pluginsS3Path, requirementsS3ObjectVersion, requirementsS3Path, schedulers, sourceBucketArn, startupScriptS3ObjectVersion, startupScriptS3Path, webserverAccessMode, weeklyMaintenanceWindowStart);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateEnvironmentInput {\n");
    sb.append("    airflowConfigurationOptions: ").append(toIndentedString(airflowConfigurationOptions)).append("\n");
    sb.append("    airflowVersion: ").append(toIndentedString(airflowVersion)).append("\n");
    sb.append("    dagS3Path: ").append(toIndentedString(dagS3Path)).append("\n");
    sb.append("    environmentClass: ").append(toIndentedString(environmentClass)).append("\n");
    sb.append("    executionRoleArn: ").append(toIndentedString(executionRoleArn)).append("\n");
    sb.append("    loggingConfiguration: ").append(toIndentedString(loggingConfiguration)).append("\n");
    sb.append("    maxWorkers: ").append(toIndentedString(maxWorkers)).append("\n");
    sb.append("    minWorkers: ").append(toIndentedString(minWorkers)).append("\n");
    sb.append("    networkConfiguration: ").append(toIndentedString(networkConfiguration)).append("\n");
    sb.append("    pluginsS3ObjectVersion: ").append(toIndentedString(pluginsS3ObjectVersion)).append("\n");
    sb.append("    pluginsS3Path: ").append(toIndentedString(pluginsS3Path)).append("\n");
    sb.append("    requirementsS3ObjectVersion: ").append(toIndentedString(requirementsS3ObjectVersion)).append("\n");
    sb.append("    requirementsS3Path: ").append(toIndentedString(requirementsS3Path)).append("\n");
    sb.append("    schedulers: ").append(toIndentedString(schedulers)).append("\n");
    sb.append("    sourceBucketArn: ").append(toIndentedString(sourceBucketArn)).append("\n");
    sb.append("    startupScriptS3ObjectVersion: ").append(toIndentedString(startupScriptS3ObjectVersion)).append("\n");
    sb.append("    startupScriptS3Path: ").append(toIndentedString(startupScriptS3Path)).append("\n");
    sb.append("    webserverAccessMode: ").append(toIndentedString(webserverAccessMode)).append("\n");
    sb.append("    weeklyMaintenanceWindowStart: ").append(toIndentedString(weeklyMaintenanceWindowStart)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AirflowConfigurationOptions");
    openapiFields.add("AirflowVersion");
    openapiFields.add("DagS3Path");
    openapiFields.add("EnvironmentClass");
    openapiFields.add("ExecutionRoleArn");
    openapiFields.add("LoggingConfiguration");
    openapiFields.add("MaxWorkers");
    openapiFields.add("MinWorkers");
    openapiFields.add("NetworkConfiguration");
    openapiFields.add("PluginsS3ObjectVersion");
    openapiFields.add("PluginsS3Path");
    openapiFields.add("RequirementsS3ObjectVersion");
    openapiFields.add("RequirementsS3Path");
    openapiFields.add("Schedulers");
    openapiFields.add("SourceBucketArn");
    openapiFields.add("StartupScriptS3ObjectVersion");
    openapiFields.add("StartupScriptS3Path");
    openapiFields.add("WebserverAccessMode");
    openapiFields.add("WeeklyMaintenanceWindowStart");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateEnvironmentInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateEnvironmentInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateEnvironmentInput is not found in the empty JSON string", UpdateEnvironmentInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateEnvironmentInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateEnvironmentInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AirflowConfigurationOptions`
      if (jsonObj.get("AirflowConfigurationOptions") != null && !jsonObj.get("AirflowConfigurationOptions").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("AirflowConfigurationOptions"));
      }
      // validate the optional field `AirflowVersion`
      if (jsonObj.get("AirflowVersion") != null && !jsonObj.get("AirflowVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AirflowVersion"));
      }
      // validate the optional field `DagS3Path`
      if (jsonObj.get("DagS3Path") != null && !jsonObj.get("DagS3Path").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DagS3Path"));
      }
      // validate the optional field `EnvironmentClass`
      if (jsonObj.get("EnvironmentClass") != null && !jsonObj.get("EnvironmentClass").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EnvironmentClass"));
      }
      // validate the optional field `ExecutionRoleArn`
      if (jsonObj.get("ExecutionRoleArn") != null && !jsonObj.get("ExecutionRoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ExecutionRoleArn"));
      }
      // validate the optional field `LoggingConfiguration`
      if (jsonObj.get("LoggingConfiguration") != null && !jsonObj.get("LoggingConfiguration").isJsonNull()) {
        UpdateEnvironmentInputLoggingConfiguration.validateJsonElement(jsonObj.get("LoggingConfiguration"));
      }
      // validate the optional field `MaxWorkers`
      if (jsonObj.get("MaxWorkers") != null && !jsonObj.get("MaxWorkers").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxWorkers"));
      }
      // validate the optional field `MinWorkers`
      if (jsonObj.get("MinWorkers") != null && !jsonObj.get("MinWorkers").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MinWorkers"));
      }
      // validate the optional field `NetworkConfiguration`
      if (jsonObj.get("NetworkConfiguration") != null && !jsonObj.get("NetworkConfiguration").isJsonNull()) {
        UpdateEnvironmentInputNetworkConfiguration.validateJsonElement(jsonObj.get("NetworkConfiguration"));
      }
      // validate the optional field `PluginsS3ObjectVersion`
      if (jsonObj.get("PluginsS3ObjectVersion") != null && !jsonObj.get("PluginsS3ObjectVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PluginsS3ObjectVersion"));
      }
      // validate the optional field `PluginsS3Path`
      if (jsonObj.get("PluginsS3Path") != null && !jsonObj.get("PluginsS3Path").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PluginsS3Path"));
      }
      // validate the optional field `RequirementsS3ObjectVersion`
      if (jsonObj.get("RequirementsS3ObjectVersion") != null && !jsonObj.get("RequirementsS3ObjectVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RequirementsS3ObjectVersion"));
      }
      // validate the optional field `RequirementsS3Path`
      if (jsonObj.get("RequirementsS3Path") != null && !jsonObj.get("RequirementsS3Path").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RequirementsS3Path"));
      }
      // validate the optional field `Schedulers`
      if (jsonObj.get("Schedulers") != null && !jsonObj.get("Schedulers").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Schedulers"));
      }
      // validate the optional field `SourceBucketArn`
      if (jsonObj.get("SourceBucketArn") != null && !jsonObj.get("SourceBucketArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SourceBucketArn"));
      }
      // validate the optional field `StartupScriptS3ObjectVersion`
      if (jsonObj.get("StartupScriptS3ObjectVersion") != null && !jsonObj.get("StartupScriptS3ObjectVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StartupScriptS3ObjectVersion"));
      }
      // validate the optional field `StartupScriptS3Path`
      if (jsonObj.get("StartupScriptS3Path") != null && !jsonObj.get("StartupScriptS3Path").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StartupScriptS3Path"));
      }
      // validate the optional field `WebserverAccessMode`
      if (jsonObj.get("WebserverAccessMode") != null && !jsonObj.get("WebserverAccessMode").isJsonNull()) {
        WebserverAccessMode.validateJsonElement(jsonObj.get("WebserverAccessMode"));
      }
      // validate the optional field `WeeklyMaintenanceWindowStart`
      if (jsonObj.get("WeeklyMaintenanceWindowStart") != null && !jsonObj.get("WeeklyMaintenanceWindowStart").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("WeeklyMaintenanceWindowStart"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateEnvironmentInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateEnvironmentInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateEnvironmentInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateEnvironmentInput.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateEnvironmentInput>() {
           @Override
           public void write(JsonWriter out, UpdateEnvironmentInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateEnvironmentInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateEnvironmentInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateEnvironmentInput
   * @throws IOException if the JSON string is invalid with respect to UpdateEnvironmentInput
   */
  public static UpdateEnvironmentInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateEnvironmentInput.class);
  }

  /**
   * Convert an instance of UpdateEnvironmentInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

