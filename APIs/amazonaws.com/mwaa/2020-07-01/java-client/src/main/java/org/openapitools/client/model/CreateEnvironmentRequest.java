/*
 * AmazonMWAA
 * <p><fullname>Amazon Managed Workflows for Apache Airflow</fullname> <p>This section contains the Amazon Managed Workflows for Apache Airflow (MWAA) API reference documentation. For more information, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/what-is-mwaa.html\">What is Amazon MWAA?</a>.</p> <p> <b>Endpoints</b> </p> <ul> <li> <p> <code>api.airflow.{region}.amazonaws.com</code> - This endpoint is used for environment management.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_CreateEnvironment.html\">CreateEnvironment</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_DeleteEnvironment.html\">DeleteEnvironment</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_GetEnvironment.html\">GetEnvironment</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_ListEnvironments.html\">ListEnvironments</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_ListTagsForResource.html\">ListTagsForResource</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_TagResource.html\">TagResource</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_UntagResource.html\">UntagResource</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_UpdateEnvironment.html\">UpdateEnvironment</a> </p> </li> </ul> </li> <li> <p> <code>env.airflow.{region}.amazonaws.com</code> - This endpoint is used to operate the Airflow environment.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_CreateCliToken.html \">CreateCliToken</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_CreateWebLoginToken.html\">CreateWebLoginToken</a> </p> </li> </ul> </li> <li> <p> <code>ops.airflow.{region}.amazonaws.com</code> - This endpoint is used to push environment metrics that track environment health.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/mwaa/latest/API/API_PublishMetrics.html \">PublishMetrics</a> </p> </li> </ul> </li> </ul> <p> <b>Regions</b> </p> <p>For a list of regions that Amazon MWAA supports, see <a href=\"https://docs.aws.amazon.com/mwaa/latest/userguide/what-is-mwaa.html#regions-mwaa\">Region availability</a> in the <i>Amazon MWAA User Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2020-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CreateEnvironmentRequestLoggingConfiguration;
import org.openapitools.client.model.CreateEnvironmentRequestNetworkConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateEnvironmentRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:05.881352-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateEnvironmentRequest {
  public static final String SERIALIZED_NAME_AIRFLOW_CONFIGURATION_OPTIONS = "AirflowConfigurationOptions";
  @SerializedName(SERIALIZED_NAME_AIRFLOW_CONFIGURATION_OPTIONS)
  private Map<String, String> airflowConfigurationOptions = new HashMap<>();

  public static final String SERIALIZED_NAME_AIRFLOW_VERSION = "AirflowVersion";
  @SerializedName(SERIALIZED_NAME_AIRFLOW_VERSION)
  private String airflowVersion;

  public static final String SERIALIZED_NAME_DAG_S3_PATH = "DagS3Path";
  @SerializedName(SERIALIZED_NAME_DAG_S3_PATH)
  private String dagS3Path;

  public static final String SERIALIZED_NAME_ENVIRONMENT_CLASS = "EnvironmentClass";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_CLASS)
  private String environmentClass;

  public static final String SERIALIZED_NAME_EXECUTION_ROLE_ARN = "ExecutionRoleArn";
  @SerializedName(SERIALIZED_NAME_EXECUTION_ROLE_ARN)
  private String executionRoleArn;

  public static final String SERIALIZED_NAME_KMS_KEY = "KmsKey";
  @SerializedName(SERIALIZED_NAME_KMS_KEY)
  private String kmsKey;

  public static final String SERIALIZED_NAME_LOGGING_CONFIGURATION = "LoggingConfiguration";
  @SerializedName(SERIALIZED_NAME_LOGGING_CONFIGURATION)
  private CreateEnvironmentRequestLoggingConfiguration loggingConfiguration;

  public static final String SERIALIZED_NAME_MAX_WORKERS = "MaxWorkers";
  @SerializedName(SERIALIZED_NAME_MAX_WORKERS)
  private Integer maxWorkers;

  public static final String SERIALIZED_NAME_MIN_WORKERS = "MinWorkers";
  @SerializedName(SERIALIZED_NAME_MIN_WORKERS)
  private Integer minWorkers;

  public static final String SERIALIZED_NAME_NETWORK_CONFIGURATION = "NetworkConfiguration";
  @SerializedName(SERIALIZED_NAME_NETWORK_CONFIGURATION)
  private CreateEnvironmentRequestNetworkConfiguration networkConfiguration;

  public static final String SERIALIZED_NAME_PLUGINS_S3_OBJECT_VERSION = "PluginsS3ObjectVersion";
  @SerializedName(SERIALIZED_NAME_PLUGINS_S3_OBJECT_VERSION)
  private String pluginsS3ObjectVersion;

  public static final String SERIALIZED_NAME_PLUGINS_S3_PATH = "PluginsS3Path";
  @SerializedName(SERIALIZED_NAME_PLUGINS_S3_PATH)
  private String pluginsS3Path;

  public static final String SERIALIZED_NAME_REQUIREMENTS_S3_OBJECT_VERSION = "RequirementsS3ObjectVersion";
  @SerializedName(SERIALIZED_NAME_REQUIREMENTS_S3_OBJECT_VERSION)
  private String requirementsS3ObjectVersion;

  public static final String SERIALIZED_NAME_REQUIREMENTS_S3_PATH = "RequirementsS3Path";
  @SerializedName(SERIALIZED_NAME_REQUIREMENTS_S3_PATH)
  private String requirementsS3Path;

  public static final String SERIALIZED_NAME_SCHEDULERS = "Schedulers";
  @SerializedName(SERIALIZED_NAME_SCHEDULERS)
  private Integer schedulers;

  public static final String SERIALIZED_NAME_SOURCE_BUCKET_ARN = "SourceBucketArn";
  @SerializedName(SERIALIZED_NAME_SOURCE_BUCKET_ARN)
  private String sourceBucketArn;

  public static final String SERIALIZED_NAME_STARTUP_SCRIPT_S3_OBJECT_VERSION = "StartupScriptS3ObjectVersion";
  @SerializedName(SERIALIZED_NAME_STARTUP_SCRIPT_S3_OBJECT_VERSION)
  private String startupScriptS3ObjectVersion;

  public static final String SERIALIZED_NAME_STARTUP_SCRIPT_S3_PATH = "StartupScriptS3Path";
  @SerializedName(SERIALIZED_NAME_STARTUP_SCRIPT_S3_PATH)
  private String startupScriptS3Path;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  /**
   * The Apache Airflow &lt;i&gt;Web server&lt;/i&gt; access mode. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-networking.html\&quot;&gt;Apache Airflow access modes&lt;/a&gt;.
   */
  @JsonAdapter(WebserverAccessModeEnum.Adapter.class)
  public enum WebserverAccessModeEnum {
    PRIVATE_ONLY("PRIVATE_ONLY"),
    
    PUBLIC_ONLY("PUBLIC_ONLY");

    private String value;

    WebserverAccessModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WebserverAccessModeEnum fromValue(String value) {
      for (WebserverAccessModeEnum b : WebserverAccessModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WebserverAccessModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WebserverAccessModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WebserverAccessModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WebserverAccessModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WebserverAccessModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WEBSERVER_ACCESS_MODE = "WebserverAccessMode";
  @SerializedName(SERIALIZED_NAME_WEBSERVER_ACCESS_MODE)
  private WebserverAccessModeEnum webserverAccessMode;

  public static final String SERIALIZED_NAME_WEEKLY_MAINTENANCE_WINDOW_START = "WeeklyMaintenanceWindowStart";
  @SerializedName(SERIALIZED_NAME_WEEKLY_MAINTENANCE_WINDOW_START)
  private String weeklyMaintenanceWindowStart;

  public CreateEnvironmentRequest() {
  }

  public CreateEnvironmentRequest airflowConfigurationOptions(Map<String, String> airflowConfigurationOptions) {
    this.airflowConfigurationOptions = airflowConfigurationOptions;
    return this;
  }

  public CreateEnvironmentRequest putAirflowConfigurationOptionsItem(String key, String airflowConfigurationOptionsItem) {
    if (this.airflowConfigurationOptions == null) {
      this.airflowConfigurationOptions = new HashMap<>();
    }
    this.airflowConfigurationOptions.put(key, airflowConfigurationOptionsItem);
    return this;
  }

  /**
   * A list of key-value pairs containing the Apache Airflow configuration options you want to attach to your environment. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-env-variables.html\&quot;&gt;Apache Airflow configuration options&lt;/a&gt;.
   * @return airflowConfigurationOptions
   */
  @javax.annotation.Nullable
  public Map<String, String> getAirflowConfigurationOptions() {
    return airflowConfigurationOptions;
  }

  public void setAirflowConfigurationOptions(Map<String, String> airflowConfigurationOptions) {
    this.airflowConfigurationOptions = airflowConfigurationOptions;
  }


  public CreateEnvironmentRequest airflowVersion(String airflowVersion) {
    this.airflowVersion = airflowVersion;
    return this;
  }

  /**
   * The Apache Airflow version for your environment. If no value is specified, it defaults to the latest version. Valid values: &lt;code&gt;1.10.12&lt;/code&gt;, &lt;code&gt;2.0.2&lt;/code&gt;, &lt;code&gt;2.2.2&lt;/code&gt;, &lt;code&gt;2.4.3&lt;/code&gt;, and &lt;code&gt;2.5.1&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mwaa/latest/userguide/airflow-versions.html\&quot;&gt;Apache Airflow versions on Amazon Managed Workflows for Apache Airflow (MWAA)&lt;/a&gt;.
   * @return airflowVersion
   */
  @javax.annotation.Nullable
  public String getAirflowVersion() {
    return airflowVersion;
  }

  public void setAirflowVersion(String airflowVersion) {
    this.airflowVersion = airflowVersion;
  }


  public CreateEnvironmentRequest dagS3Path(String dagS3Path) {
    this.dagS3Path = dagS3Path;
    return this;
  }

  /**
   * The relative path to the DAGs folder on your Amazon S3 bucket. For example, &lt;code&gt;dags&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-folder.html\&quot;&gt;Adding or updating DAGs&lt;/a&gt;.
   * @return dagS3Path
   */
  @javax.annotation.Nonnull
  public String getDagS3Path() {
    return dagS3Path;
  }

  public void setDagS3Path(String dagS3Path) {
    this.dagS3Path = dagS3Path;
  }


  public CreateEnvironmentRequest environmentClass(String environmentClass) {
    this.environmentClass = environmentClass;
    return this;
  }

  /**
   * The environment class type. Valid values: &lt;code&gt;mw1.small&lt;/code&gt;, &lt;code&gt;mw1.medium&lt;/code&gt;, &lt;code&gt;mw1.large&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mwaa/latest/userguide/environment-class.html\&quot;&gt;Amazon MWAA environment class&lt;/a&gt;.
   * @return environmentClass
   */
  @javax.annotation.Nullable
  public String getEnvironmentClass() {
    return environmentClass;
  }

  public void setEnvironmentClass(String environmentClass) {
    this.environmentClass = environmentClass;
  }


  public CreateEnvironmentRequest executionRoleArn(String executionRoleArn) {
    this.executionRoleArn = executionRoleArn;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) of the execution role for your environment. An execution role is an Amazon Web Services Identity and Access Management (IAM) role that grants MWAA permission to access Amazon Web Services services and resources used by your environment. For example, &lt;code&gt;arn:aws:iam::123456789:role/my-execution-role&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mwaa/latest/userguide/mwaa-create-role.html\&quot;&gt;Amazon MWAA Execution role&lt;/a&gt;.
   * @return executionRoleArn
   */
  @javax.annotation.Nonnull
  public String getExecutionRoleArn() {
    return executionRoleArn;
  }

  public void setExecutionRoleArn(String executionRoleArn) {
    this.executionRoleArn = executionRoleArn;
  }


  public CreateEnvironmentRequest kmsKey(String kmsKey) {
    this.kmsKey = kmsKey;
    return this;
  }

  /**
   * The Amazon Web Services Key Management Service (KMS) key to encrypt the data in your environment. You can use an Amazon Web Services owned CMK, or a Customer managed CMK (advanced). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mwaa/latest/userguide/create-environment.html\&quot;&gt;Create an Amazon MWAA environment&lt;/a&gt;.
   * @return kmsKey
   */
  @javax.annotation.Nullable
  public String getKmsKey() {
    return kmsKey;
  }

  public void setKmsKey(String kmsKey) {
    this.kmsKey = kmsKey;
  }


  public CreateEnvironmentRequest loggingConfiguration(CreateEnvironmentRequestLoggingConfiguration loggingConfiguration) {
    this.loggingConfiguration = loggingConfiguration;
    return this;
  }

  /**
   * Get loggingConfiguration
   * @return loggingConfiguration
   */
  @javax.annotation.Nullable
  public CreateEnvironmentRequestLoggingConfiguration getLoggingConfiguration() {
    return loggingConfiguration;
  }

  public void setLoggingConfiguration(CreateEnvironmentRequestLoggingConfiguration loggingConfiguration) {
    this.loggingConfiguration = loggingConfiguration;
  }


  public CreateEnvironmentRequest maxWorkers(Integer maxWorkers) {
    this.maxWorkers = maxWorkers;
    return this;
  }

  /**
   * The maximum number of workers that you want to run in your environment. MWAA scales the number of Apache Airflow workers up to the number you specify in the &lt;code&gt;MaxWorkers&lt;/code&gt; field. For example, &lt;code&gt;20&lt;/code&gt;. When there are no more tasks running, and no more in the queue, MWAA disposes of the extra workers leaving the one worker that is included with your environment, or the number you specify in &lt;code&gt;MinWorkers&lt;/code&gt;.
   * minimum: 1
   * @return maxWorkers
   */
  @javax.annotation.Nullable
  public Integer getMaxWorkers() {
    return maxWorkers;
  }

  public void setMaxWorkers(Integer maxWorkers) {
    this.maxWorkers = maxWorkers;
  }


  public CreateEnvironmentRequest minWorkers(Integer minWorkers) {
    this.minWorkers = minWorkers;
    return this;
  }

  /**
   * The minimum number of workers that you want to run in your environment. MWAA scales the number of Apache Airflow workers up to the number you specify in the &lt;code&gt;MaxWorkers&lt;/code&gt; field. When there are no more tasks running, and no more in the queue, MWAA disposes of the extra workers leaving the worker count you specify in the &lt;code&gt;MinWorkers&lt;/code&gt; field. For example, &lt;code&gt;2&lt;/code&gt;.
   * minimum: 1
   * @return minWorkers
   */
  @javax.annotation.Nullable
  public Integer getMinWorkers() {
    return minWorkers;
  }

  public void setMinWorkers(Integer minWorkers) {
    this.minWorkers = minWorkers;
  }


  public CreateEnvironmentRequest networkConfiguration(CreateEnvironmentRequestNetworkConfiguration networkConfiguration) {
    this.networkConfiguration = networkConfiguration;
    return this;
  }

  /**
   * Get networkConfiguration
   * @return networkConfiguration
   */
  @javax.annotation.Nonnull
  public CreateEnvironmentRequestNetworkConfiguration getNetworkConfiguration() {
    return networkConfiguration;
  }

  public void setNetworkConfiguration(CreateEnvironmentRequestNetworkConfiguration networkConfiguration) {
    this.networkConfiguration = networkConfiguration;
  }


  public CreateEnvironmentRequest pluginsS3ObjectVersion(String pluginsS3ObjectVersion) {
    this.pluginsS3ObjectVersion = pluginsS3ObjectVersion;
    return this;
  }

  /**
   * The version of the plugins.zip file on your Amazon S3 bucket. You must specify a version each time a plugins.zip file is updated. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonS3/latest/userguide/versioning-workflows.html\&quot;&gt;How S3 Versioning works&lt;/a&gt;.
   * @return pluginsS3ObjectVersion
   */
  @javax.annotation.Nullable
  public String getPluginsS3ObjectVersion() {
    return pluginsS3ObjectVersion;
  }

  public void setPluginsS3ObjectVersion(String pluginsS3ObjectVersion) {
    this.pluginsS3ObjectVersion = pluginsS3ObjectVersion;
  }


  public CreateEnvironmentRequest pluginsS3Path(String pluginsS3Path) {
    this.pluginsS3Path = pluginsS3Path;
    return this;
  }

  /**
   * The relative path to the &lt;code&gt;plugins.zip&lt;/code&gt; file on your Amazon S3 bucket. For example, &lt;code&gt;plugins.zip&lt;/code&gt;. If specified, then the &lt;code&gt;plugins.zip&lt;/code&gt; version is required. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import-plugins.html\&quot;&gt;Installing custom plugins&lt;/a&gt;.
   * @return pluginsS3Path
   */
  @javax.annotation.Nullable
  public String getPluginsS3Path() {
    return pluginsS3Path;
  }

  public void setPluginsS3Path(String pluginsS3Path) {
    this.pluginsS3Path = pluginsS3Path;
  }


  public CreateEnvironmentRequest requirementsS3ObjectVersion(String requirementsS3ObjectVersion) {
    this.requirementsS3ObjectVersion = requirementsS3ObjectVersion;
    return this;
  }

  /**
   * The version of the &lt;code&gt;requirements.txt&lt;/code&gt; file on your Amazon S3 bucket. You must specify a version each time a requirements.txt file is updated. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonS3/latest/userguide/versioning-workflows.html\&quot;&gt;How S3 Versioning works&lt;/a&gt;.
   * @return requirementsS3ObjectVersion
   */
  @javax.annotation.Nullable
  public String getRequirementsS3ObjectVersion() {
    return requirementsS3ObjectVersion;
  }

  public void setRequirementsS3ObjectVersion(String requirementsS3ObjectVersion) {
    this.requirementsS3ObjectVersion = requirementsS3ObjectVersion;
  }


  public CreateEnvironmentRequest requirementsS3Path(String requirementsS3Path) {
    this.requirementsS3Path = requirementsS3Path;
    return this;
  }

  /**
   * The relative path to the &lt;code&gt;requirements.txt&lt;/code&gt; file on your Amazon S3 bucket. For example, &lt;code&gt;requirements.txt&lt;/code&gt;. If specified, then a version is required. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mwaa/latest/userguide/working-dags-dependencies.html\&quot;&gt;Installing Python dependencies&lt;/a&gt;.
   * @return requirementsS3Path
   */
  @javax.annotation.Nullable
  public String getRequirementsS3Path() {
    return requirementsS3Path;
  }

  public void setRequirementsS3Path(String requirementsS3Path) {
    this.requirementsS3Path = requirementsS3Path;
  }


  public CreateEnvironmentRequest schedulers(Integer schedulers) {
    this.schedulers = schedulers;
    return this;
  }

  /**
   * &lt;p&gt;The number of Apache Airflow schedulers to run in your environment. Valid values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;v2 - Accepts between 2 to 5. Defaults to 2.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;v1 - Accepts 1.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * maximum: 5
   * @return schedulers
   */
  @javax.annotation.Nullable
  public Integer getSchedulers() {
    return schedulers;
  }

  public void setSchedulers(Integer schedulers) {
    this.schedulers = schedulers;
  }


  public CreateEnvironmentRequest sourceBucketArn(String sourceBucketArn) {
    this.sourceBucketArn = sourceBucketArn;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) of the Amazon S3 bucket where your DAG code and supporting files are stored. For example, &lt;code&gt;arn:aws:s3:::my-airflow-bucket-unique-name&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mwaa/latest/userguide/mwaa-s3-bucket.html\&quot;&gt;Create an Amazon S3 bucket for Amazon MWAA&lt;/a&gt;.
   * @return sourceBucketArn
   */
  @javax.annotation.Nonnull
  public String getSourceBucketArn() {
    return sourceBucketArn;
  }

  public void setSourceBucketArn(String sourceBucketArn) {
    this.sourceBucketArn = sourceBucketArn;
  }


  public CreateEnvironmentRequest startupScriptS3ObjectVersion(String startupScriptS3ObjectVersion) {
    this.startupScriptS3ObjectVersion = startupScriptS3ObjectVersion;
    return this;
  }

  /**
   * &lt;p&gt;The version of the startup shell script in your Amazon S3 bucket. You must specify the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonS3/latest/userguide/versioning-workflows.html\&quot;&gt;version ID&lt;/a&gt; that Amazon S3 assigns to the file every time you update the script. &lt;/p&gt; &lt;p&gt; Version IDs are Unicode, UTF-8 encoded, URL-ready, opaque strings that are no more than 1,024 bytes long. The following is an example: &lt;/p&gt; &lt;p&gt; &lt;code&gt;3sL4kqtJlcpXroDTDmJ+rmSpXd3dIbrHY+MTRCxf3vjVBH40Nr8X8gdRQBpUMLUo&lt;/code&gt; &lt;/p&gt; &lt;p&gt; For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mwaa/latest/userguide/using-startup-script.html\&quot;&gt;Using a startup script&lt;/a&gt;. &lt;/p&gt;
   * @return startupScriptS3ObjectVersion
   */
  @javax.annotation.Nullable
  public String getStartupScriptS3ObjectVersion() {
    return startupScriptS3ObjectVersion;
  }

  public void setStartupScriptS3ObjectVersion(String startupScriptS3ObjectVersion) {
    this.startupScriptS3ObjectVersion = startupScriptS3ObjectVersion;
  }


  public CreateEnvironmentRequest startupScriptS3Path(String startupScriptS3Path) {
    this.startupScriptS3Path = startupScriptS3Path;
    return this;
  }

  /**
   * &lt;p&gt;The relative path to the startup shell script in your Amazon S3 bucket. For example, &lt;code&gt;s3://mwaa-environment/startup.sh&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; Amazon MWAA runs the script as your environment starts, and before running the Apache Airflow process. You can use this script to install dependencies, modify Apache Airflow configuration options, and set environment variables. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mwaa/latest/userguide/using-startup-script.html\&quot;&gt;Using a startup script&lt;/a&gt;. &lt;/p&gt;
   * @return startupScriptS3Path
   */
  @javax.annotation.Nullable
  public String getStartupScriptS3Path() {
    return startupScriptS3Path;
  }

  public void setStartupScriptS3Path(String startupScriptS3Path) {
    this.startupScriptS3Path = startupScriptS3Path;
  }


  public CreateEnvironmentRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateEnvironmentRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * The key-value tag pairs you want to associate to your environment. For example, &lt;code&gt;\&quot;Environment\&quot;: \&quot;Staging\&quot;&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\&quot;&gt;Tagging Amazon Web Services resources&lt;/a&gt;.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public CreateEnvironmentRequest webserverAccessMode(WebserverAccessModeEnum webserverAccessMode) {
    this.webserverAccessMode = webserverAccessMode;
    return this;
  }

  /**
   * The Apache Airflow &lt;i&gt;Web server&lt;/i&gt; access mode. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-networking.html\&quot;&gt;Apache Airflow access modes&lt;/a&gt;.
   * @return webserverAccessMode
   */
  @javax.annotation.Nullable
  public WebserverAccessModeEnum getWebserverAccessMode() {
    return webserverAccessMode;
  }

  public void setWebserverAccessMode(WebserverAccessModeEnum webserverAccessMode) {
    this.webserverAccessMode = webserverAccessMode;
  }


  public CreateEnvironmentRequest weeklyMaintenanceWindowStart(String weeklyMaintenanceWindowStart) {
    this.weeklyMaintenanceWindowStart = weeklyMaintenanceWindowStart;
    return this;
  }

  /**
   * The day and time of the week in Coordinated Universal Time (UTC) 24-hour standard time to start weekly maintenance updates of your environment in the following format: &lt;code&gt;DAY:HH:MM&lt;/code&gt;. For example: &lt;code&gt;TUE:03:30&lt;/code&gt;. You can specify a start time in 30 minute increments only.
   * @return weeklyMaintenanceWindowStart
   */
  @javax.annotation.Nullable
  public String getWeeklyMaintenanceWindowStart() {
    return weeklyMaintenanceWindowStart;
  }

  public void setWeeklyMaintenanceWindowStart(String weeklyMaintenanceWindowStart) {
    this.weeklyMaintenanceWindowStart = weeklyMaintenanceWindowStart;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateEnvironmentRequest createEnvironmentRequest = (CreateEnvironmentRequest) o;
    return Objects.equals(this.airflowConfigurationOptions, createEnvironmentRequest.airflowConfigurationOptions) &&
        Objects.equals(this.airflowVersion, createEnvironmentRequest.airflowVersion) &&
        Objects.equals(this.dagS3Path, createEnvironmentRequest.dagS3Path) &&
        Objects.equals(this.environmentClass, createEnvironmentRequest.environmentClass) &&
        Objects.equals(this.executionRoleArn, createEnvironmentRequest.executionRoleArn) &&
        Objects.equals(this.kmsKey, createEnvironmentRequest.kmsKey) &&
        Objects.equals(this.loggingConfiguration, createEnvironmentRequest.loggingConfiguration) &&
        Objects.equals(this.maxWorkers, createEnvironmentRequest.maxWorkers) &&
        Objects.equals(this.minWorkers, createEnvironmentRequest.minWorkers) &&
        Objects.equals(this.networkConfiguration, createEnvironmentRequest.networkConfiguration) &&
        Objects.equals(this.pluginsS3ObjectVersion, createEnvironmentRequest.pluginsS3ObjectVersion) &&
        Objects.equals(this.pluginsS3Path, createEnvironmentRequest.pluginsS3Path) &&
        Objects.equals(this.requirementsS3ObjectVersion, createEnvironmentRequest.requirementsS3ObjectVersion) &&
        Objects.equals(this.requirementsS3Path, createEnvironmentRequest.requirementsS3Path) &&
        Objects.equals(this.schedulers, createEnvironmentRequest.schedulers) &&
        Objects.equals(this.sourceBucketArn, createEnvironmentRequest.sourceBucketArn) &&
        Objects.equals(this.startupScriptS3ObjectVersion, createEnvironmentRequest.startupScriptS3ObjectVersion) &&
        Objects.equals(this.startupScriptS3Path, createEnvironmentRequest.startupScriptS3Path) &&
        Objects.equals(this.tags, createEnvironmentRequest.tags) &&
        Objects.equals(this.webserverAccessMode, createEnvironmentRequest.webserverAccessMode) &&
        Objects.equals(this.weeklyMaintenanceWindowStart, createEnvironmentRequest.weeklyMaintenanceWindowStart);
  }

  @Override
  public int hashCode() {
    return Objects.hash(airflowConfigurationOptions, airflowVersion, dagS3Path, environmentClass, executionRoleArn, kmsKey, loggingConfiguration, maxWorkers, minWorkers, networkConfiguration, pluginsS3ObjectVersion, pluginsS3Path, requirementsS3ObjectVersion, requirementsS3Path, schedulers, sourceBucketArn, startupScriptS3ObjectVersion, startupScriptS3Path, tags, webserverAccessMode, weeklyMaintenanceWindowStart);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateEnvironmentRequest {\n");
    sb.append("    airflowConfigurationOptions: ").append(toIndentedString(airflowConfigurationOptions)).append("\n");
    sb.append("    airflowVersion: ").append(toIndentedString(airflowVersion)).append("\n");
    sb.append("    dagS3Path: ").append(toIndentedString(dagS3Path)).append("\n");
    sb.append("    environmentClass: ").append(toIndentedString(environmentClass)).append("\n");
    sb.append("    executionRoleArn: ").append(toIndentedString(executionRoleArn)).append("\n");
    sb.append("    kmsKey: ").append(toIndentedString(kmsKey)).append("\n");
    sb.append("    loggingConfiguration: ").append(toIndentedString(loggingConfiguration)).append("\n");
    sb.append("    maxWorkers: ").append(toIndentedString(maxWorkers)).append("\n");
    sb.append("    minWorkers: ").append(toIndentedString(minWorkers)).append("\n");
    sb.append("    networkConfiguration: ").append(toIndentedString(networkConfiguration)).append("\n");
    sb.append("    pluginsS3ObjectVersion: ").append(toIndentedString(pluginsS3ObjectVersion)).append("\n");
    sb.append("    pluginsS3Path: ").append(toIndentedString(pluginsS3Path)).append("\n");
    sb.append("    requirementsS3ObjectVersion: ").append(toIndentedString(requirementsS3ObjectVersion)).append("\n");
    sb.append("    requirementsS3Path: ").append(toIndentedString(requirementsS3Path)).append("\n");
    sb.append("    schedulers: ").append(toIndentedString(schedulers)).append("\n");
    sb.append("    sourceBucketArn: ").append(toIndentedString(sourceBucketArn)).append("\n");
    sb.append("    startupScriptS3ObjectVersion: ").append(toIndentedString(startupScriptS3ObjectVersion)).append("\n");
    sb.append("    startupScriptS3Path: ").append(toIndentedString(startupScriptS3Path)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    webserverAccessMode: ").append(toIndentedString(webserverAccessMode)).append("\n");
    sb.append("    weeklyMaintenanceWindowStart: ").append(toIndentedString(weeklyMaintenanceWindowStart)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AirflowConfigurationOptions");
    openapiFields.add("AirflowVersion");
    openapiFields.add("DagS3Path");
    openapiFields.add("EnvironmentClass");
    openapiFields.add("ExecutionRoleArn");
    openapiFields.add("KmsKey");
    openapiFields.add("LoggingConfiguration");
    openapiFields.add("MaxWorkers");
    openapiFields.add("MinWorkers");
    openapiFields.add("NetworkConfiguration");
    openapiFields.add("PluginsS3ObjectVersion");
    openapiFields.add("PluginsS3Path");
    openapiFields.add("RequirementsS3ObjectVersion");
    openapiFields.add("RequirementsS3Path");
    openapiFields.add("Schedulers");
    openapiFields.add("SourceBucketArn");
    openapiFields.add("StartupScriptS3ObjectVersion");
    openapiFields.add("StartupScriptS3Path");
    openapiFields.add("Tags");
    openapiFields.add("WebserverAccessMode");
    openapiFields.add("WeeklyMaintenanceWindowStart");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DagS3Path");
    openapiRequiredFields.add("ExecutionRoleArn");
    openapiRequiredFields.add("NetworkConfiguration");
    openapiRequiredFields.add("SourceBucketArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateEnvironmentRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateEnvironmentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateEnvironmentRequest is not found in the empty JSON string", CreateEnvironmentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateEnvironmentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateEnvironmentRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateEnvironmentRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AirflowVersion") != null && !jsonObj.get("AirflowVersion").isJsonNull()) && !jsonObj.get("AirflowVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AirflowVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AirflowVersion").toString()));
      }
      if (!jsonObj.get("DagS3Path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DagS3Path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DagS3Path").toString()));
      }
      if ((jsonObj.get("EnvironmentClass") != null && !jsonObj.get("EnvironmentClass").isJsonNull()) && !jsonObj.get("EnvironmentClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EnvironmentClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EnvironmentClass").toString()));
      }
      if (!jsonObj.get("ExecutionRoleArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExecutionRoleArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExecutionRoleArn").toString()));
      }
      if ((jsonObj.get("KmsKey") != null && !jsonObj.get("KmsKey").isJsonNull()) && !jsonObj.get("KmsKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `KmsKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("KmsKey").toString()));
      }
      // validate the optional field `LoggingConfiguration`
      if (jsonObj.get("LoggingConfiguration") != null && !jsonObj.get("LoggingConfiguration").isJsonNull()) {
        CreateEnvironmentRequestLoggingConfiguration.validateJsonElement(jsonObj.get("LoggingConfiguration"));
      }
      // validate the required field `NetworkConfiguration`
      CreateEnvironmentRequestNetworkConfiguration.validateJsonElement(jsonObj.get("NetworkConfiguration"));
      if ((jsonObj.get("PluginsS3ObjectVersion") != null && !jsonObj.get("PluginsS3ObjectVersion").isJsonNull()) && !jsonObj.get("PluginsS3ObjectVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PluginsS3ObjectVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PluginsS3ObjectVersion").toString()));
      }
      if ((jsonObj.get("PluginsS3Path") != null && !jsonObj.get("PluginsS3Path").isJsonNull()) && !jsonObj.get("PluginsS3Path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PluginsS3Path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PluginsS3Path").toString()));
      }
      if ((jsonObj.get("RequirementsS3ObjectVersion") != null && !jsonObj.get("RequirementsS3ObjectVersion").isJsonNull()) && !jsonObj.get("RequirementsS3ObjectVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RequirementsS3ObjectVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RequirementsS3ObjectVersion").toString()));
      }
      if ((jsonObj.get("RequirementsS3Path") != null && !jsonObj.get("RequirementsS3Path").isJsonNull()) && !jsonObj.get("RequirementsS3Path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RequirementsS3Path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RequirementsS3Path").toString()));
      }
      if (!jsonObj.get("SourceBucketArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceBucketArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceBucketArn").toString()));
      }
      if ((jsonObj.get("StartupScriptS3ObjectVersion") != null && !jsonObj.get("StartupScriptS3ObjectVersion").isJsonNull()) && !jsonObj.get("StartupScriptS3ObjectVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StartupScriptS3ObjectVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StartupScriptS3ObjectVersion").toString()));
      }
      if ((jsonObj.get("StartupScriptS3Path") != null && !jsonObj.get("StartupScriptS3Path").isJsonNull()) && !jsonObj.get("StartupScriptS3Path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StartupScriptS3Path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StartupScriptS3Path").toString()));
      }
      if ((jsonObj.get("WebserverAccessMode") != null && !jsonObj.get("WebserverAccessMode").isJsonNull()) && !jsonObj.get("WebserverAccessMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WebserverAccessMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WebserverAccessMode").toString()));
      }
      // validate the optional field `WebserverAccessMode`
      if (jsonObj.get("WebserverAccessMode") != null && !jsonObj.get("WebserverAccessMode").isJsonNull()) {
        WebserverAccessModeEnum.validateJsonElement(jsonObj.get("WebserverAccessMode"));
      }
      if ((jsonObj.get("WeeklyMaintenanceWindowStart") != null && !jsonObj.get("WeeklyMaintenanceWindowStart").isJsonNull()) && !jsonObj.get("WeeklyMaintenanceWindowStart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WeeklyMaintenanceWindowStart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WeeklyMaintenanceWindowStart").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateEnvironmentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateEnvironmentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateEnvironmentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateEnvironmentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateEnvironmentRequest>() {
           @Override
           public void write(JsonWriter out, CreateEnvironmentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateEnvironmentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateEnvironmentRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateEnvironmentRequest
   * @throws IOException if the JSON string is invalid with respect to CreateEnvironmentRequest
   */
  public static CreateEnvironmentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateEnvironmentRequest.class);
  }

  /**
   * Convert an instance of CreateEnvironmentRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

