/*
 * AWS License Manager User Subscriptions
 * With License Manager, you can create user-based subscriptions to utilize licensed software with a per user subscription fee on Amazon EC2 instances.
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.InstanceUserSummaryIdentityProvider;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AssociateUserResponseInstanceUserSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:07.658813-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssociateUserResponseInstanceUserSummary {
  public static final String SERIALIZED_NAME_ASSOCIATION_DATE = "AssociationDate";
  @SerializedName(SERIALIZED_NAME_ASSOCIATION_DATE)
  private String associationDate;

  public static final String SERIALIZED_NAME_DISASSOCIATION_DATE = "DisassociationDate";
  @SerializedName(SERIALIZED_NAME_DISASSOCIATION_DATE)
  private String disassociationDate;

  public static final String SERIALIZED_NAME_DOMAIN = "Domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_IDENTITY_PROVIDER = "IdentityProvider";
  @SerializedName(SERIALIZED_NAME_IDENTITY_PROVIDER)
  private InstanceUserSummaryIdentityProvider identityProvider;

  public static final String SERIALIZED_NAME_INSTANCE_ID = "InstanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "StatusMessage";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private String statusMessage;

  public static final String SERIALIZED_NAME_USERNAME = "Username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public AssociateUserResponseInstanceUserSummary() {
  }

  public AssociateUserResponseInstanceUserSummary associationDate(String associationDate) {
    this.associationDate = associationDate;
    return this;
  }

  /**
   * Get associationDate
   * @return associationDate
   */
  @javax.annotation.Nullable
  public String getAssociationDate() {
    return associationDate;
  }

  public void setAssociationDate(String associationDate) {
    this.associationDate = associationDate;
  }


  public AssociateUserResponseInstanceUserSummary disassociationDate(String disassociationDate) {
    this.disassociationDate = disassociationDate;
    return this;
  }

  /**
   * Get disassociationDate
   * @return disassociationDate
   */
  @javax.annotation.Nullable
  public String getDisassociationDate() {
    return disassociationDate;
  }

  public void setDisassociationDate(String disassociationDate) {
    this.disassociationDate = disassociationDate;
  }


  public AssociateUserResponseInstanceUserSummary domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Get domain
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public AssociateUserResponseInstanceUserSummary identityProvider(InstanceUserSummaryIdentityProvider identityProvider) {
    this.identityProvider = identityProvider;
    return this;
  }

  /**
   * Get identityProvider
   * @return identityProvider
   */
  @javax.annotation.Nonnull
  public InstanceUserSummaryIdentityProvider getIdentityProvider() {
    return identityProvider;
  }

  public void setIdentityProvider(InstanceUserSummaryIdentityProvider identityProvider) {
    this.identityProvider = identityProvider;
  }


  public AssociateUserResponseInstanceUserSummary instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  /**
   * Get instanceId
   * @return instanceId
   */
  @javax.annotation.Nonnull
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }


  public AssociateUserResponseInstanceUserSummary status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public AssociateUserResponseInstanceUserSummary statusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  /**
   * Get statusMessage
   * @return statusMessage
   */
  @javax.annotation.Nullable
  public String getStatusMessage() {
    return statusMessage;
  }

  public void setStatusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
  }


  public AssociateUserResponseInstanceUserSummary username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nonnull
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssociateUserResponseInstanceUserSummary associateUserResponseInstanceUserSummary = (AssociateUserResponseInstanceUserSummary) o;
    return Objects.equals(this.associationDate, associateUserResponseInstanceUserSummary.associationDate) &&
        Objects.equals(this.disassociationDate, associateUserResponseInstanceUserSummary.disassociationDate) &&
        Objects.equals(this.domain, associateUserResponseInstanceUserSummary.domain) &&
        Objects.equals(this.identityProvider, associateUserResponseInstanceUserSummary.identityProvider) &&
        Objects.equals(this.instanceId, associateUserResponseInstanceUserSummary.instanceId) &&
        Objects.equals(this.status, associateUserResponseInstanceUserSummary.status) &&
        Objects.equals(this.statusMessage, associateUserResponseInstanceUserSummary.statusMessage) &&
        Objects.equals(this.username, associateUserResponseInstanceUserSummary.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(associationDate, disassociationDate, domain, identityProvider, instanceId, status, statusMessage, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssociateUserResponseInstanceUserSummary {\n");
    sb.append("    associationDate: ").append(toIndentedString(associationDate)).append("\n");
    sb.append("    disassociationDate: ").append(toIndentedString(disassociationDate)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    identityProvider: ").append(toIndentedString(identityProvider)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AssociationDate");
    openapiFields.add("DisassociationDate");
    openapiFields.add("Domain");
    openapiFields.add("IdentityProvider");
    openapiFields.add("InstanceId");
    openapiFields.add("Status");
    openapiFields.add("StatusMessage");
    openapiFields.add("Username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("IdentityProvider");
    openapiRequiredFields.add("InstanceId");
    openapiRequiredFields.add("Status");
    openapiRequiredFields.add("Username");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssociateUserResponseInstanceUserSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssociateUserResponseInstanceUserSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssociateUserResponseInstanceUserSummary is not found in the empty JSON string", AssociateUserResponseInstanceUserSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssociateUserResponseInstanceUserSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssociateUserResponseInstanceUserSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AssociateUserResponseInstanceUserSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AssociationDate`
      if (jsonObj.get("AssociationDate") != null && !jsonObj.get("AssociationDate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AssociationDate"));
      }
      // validate the optional field `DisassociationDate`
      if (jsonObj.get("DisassociationDate") != null && !jsonObj.get("DisassociationDate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DisassociationDate"));
      }
      // validate the optional field `Domain`
      if (jsonObj.get("Domain") != null && !jsonObj.get("Domain").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Domain"));
      }
      // validate the required field `IdentityProvider`
      InstanceUserSummaryIdentityProvider.validateJsonElement(jsonObj.get("IdentityProvider"));
      // validate the required field `InstanceId`
      String.validateJsonElement(jsonObj.get("InstanceId"));
      // validate the required field `Status`
      String.validateJsonElement(jsonObj.get("Status"));
      // validate the optional field `StatusMessage`
      if (jsonObj.get("StatusMessage") != null && !jsonObj.get("StatusMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StatusMessage"));
      }
      // validate the required field `Username`
      String.validateJsonElement(jsonObj.get("Username"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssociateUserResponseInstanceUserSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssociateUserResponseInstanceUserSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssociateUserResponseInstanceUserSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssociateUserResponseInstanceUserSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<AssociateUserResponseInstanceUserSummary>() {
           @Override
           public void write(JsonWriter out, AssociateUserResponseInstanceUserSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssociateUserResponseInstanceUserSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssociateUserResponseInstanceUserSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssociateUserResponseInstanceUserSummary
   * @throws IOException if the JSON string is invalid with respect to AssociateUserResponseInstanceUserSummary
   */
  public static AssociateUserResponseInstanceUserSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssociateUserResponseInstanceUserSummary.class);
  }

  /**
   * Convert an instance of AssociateUserResponseInstanceUserSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

