/*
 * AWS License Manager User Subscriptions
 * With License Manager, you can create user-based subscriptions to utilize licensed software with a per user subscription fee on Amazon EC2 instances.
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AssociateUserRequestIdentityProvider;
import org.openapitools.client.model.UpdateIdentityProviderSettingsRequestUpdateSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateIdentityProviderSettingsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:07.658813-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateIdentityProviderSettingsRequest {
  public static final String SERIALIZED_NAME_IDENTITY_PROVIDER = "IdentityProvider";
  @SerializedName(SERIALIZED_NAME_IDENTITY_PROVIDER)
  private AssociateUserRequestIdentityProvider identityProvider;

  public static final String SERIALIZED_NAME_PRODUCT = "Product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  private String product;

  public static final String SERIALIZED_NAME_UPDATE_SETTINGS = "UpdateSettings";
  @SerializedName(SERIALIZED_NAME_UPDATE_SETTINGS)
  private UpdateIdentityProviderSettingsRequestUpdateSettings updateSettings;

  public UpdateIdentityProviderSettingsRequest() {
  }

  public UpdateIdentityProviderSettingsRequest identityProvider(AssociateUserRequestIdentityProvider identityProvider) {
    this.identityProvider = identityProvider;
    return this;
  }

  /**
   * Get identityProvider
   * @return identityProvider
   */
  @javax.annotation.Nonnull
  public AssociateUserRequestIdentityProvider getIdentityProvider() {
    return identityProvider;
  }

  public void setIdentityProvider(AssociateUserRequestIdentityProvider identityProvider) {
    this.identityProvider = identityProvider;
  }


  public UpdateIdentityProviderSettingsRequest product(String product) {
    this.product = product;
    return this;
  }

  /**
   * The name of the user-based subscription product.
   * @return product
   */
  @javax.annotation.Nonnull
  public String getProduct() {
    return product;
  }

  public void setProduct(String product) {
    this.product = product;
  }


  public UpdateIdentityProviderSettingsRequest updateSettings(UpdateIdentityProviderSettingsRequestUpdateSettings updateSettings) {
    this.updateSettings = updateSettings;
    return this;
  }

  /**
   * Get updateSettings
   * @return updateSettings
   */
  @javax.annotation.Nonnull
  public UpdateIdentityProviderSettingsRequestUpdateSettings getUpdateSettings() {
    return updateSettings;
  }

  public void setUpdateSettings(UpdateIdentityProviderSettingsRequestUpdateSettings updateSettings) {
    this.updateSettings = updateSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateIdentityProviderSettingsRequest updateIdentityProviderSettingsRequest = (UpdateIdentityProviderSettingsRequest) o;
    return Objects.equals(this.identityProvider, updateIdentityProviderSettingsRequest.identityProvider) &&
        Objects.equals(this.product, updateIdentityProviderSettingsRequest.product) &&
        Objects.equals(this.updateSettings, updateIdentityProviderSettingsRequest.updateSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(identityProvider, product, updateSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateIdentityProviderSettingsRequest {\n");
    sb.append("    identityProvider: ").append(toIndentedString(identityProvider)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    updateSettings: ").append(toIndentedString(updateSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("IdentityProvider");
    openapiFields.add("Product");
    openapiFields.add("UpdateSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("IdentityProvider");
    openapiRequiredFields.add("Product");
    openapiRequiredFields.add("UpdateSettings");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateIdentityProviderSettingsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateIdentityProviderSettingsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateIdentityProviderSettingsRequest is not found in the empty JSON string", UpdateIdentityProviderSettingsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateIdentityProviderSettingsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateIdentityProviderSettingsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateIdentityProviderSettingsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `IdentityProvider`
      AssociateUserRequestIdentityProvider.validateJsonElement(jsonObj.get("IdentityProvider"));
      if (!jsonObj.get("Product").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Product` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Product").toString()));
      }
      // validate the required field `UpdateSettings`
      UpdateIdentityProviderSettingsRequestUpdateSettings.validateJsonElement(jsonObj.get("UpdateSettings"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateIdentityProviderSettingsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateIdentityProviderSettingsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateIdentityProviderSettingsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateIdentityProviderSettingsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateIdentityProviderSettingsRequest>() {
           @Override
           public void write(JsonWriter out, UpdateIdentityProviderSettingsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateIdentityProviderSettingsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateIdentityProviderSettingsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateIdentityProviderSettingsRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateIdentityProviderSettingsRequest
   */
  public static UpdateIdentityProviderSettingsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateIdentityProviderSettingsRequest.class);
  }

  /**
   * Convert an instance of UpdateIdentityProviderSettingsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

