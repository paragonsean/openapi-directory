/*
 * AWS License Manager User Subscriptions
 * With License Manager, you can create user-based subscriptions to utilize licensed software with a per user subscription fee on Amazon EC2 instances.
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AssociateUserRequest;
import org.openapitools.client.model.AssociateUserResponse;
import org.openapitools.client.model.DeregisterIdentityProviderRequest;
import org.openapitools.client.model.DeregisterIdentityProviderResponse;
import org.openapitools.client.model.DisassociateUserResponse;
import org.openapitools.client.model.ListIdentityProvidersRequest;
import org.openapitools.client.model.ListIdentityProvidersResponse;
import org.openapitools.client.model.ListInstancesRequest;
import org.openapitools.client.model.ListInstancesResponse;
import org.openapitools.client.model.ListProductSubscriptionsRequest;
import org.openapitools.client.model.ListProductSubscriptionsResponse;
import org.openapitools.client.model.ListUserAssociationsRequest;
import org.openapitools.client.model.ListUserAssociationsResponse;
import org.openapitools.client.model.RegisterIdentityProviderRequest;
import org.openapitools.client.model.RegisterIdentityProviderResponse;
import org.openapitools.client.model.StartProductSubscriptionRequest;
import org.openapitools.client.model.StartProductSubscriptionResponse;
import org.openapitools.client.model.StopProductSubscriptionRequest;
import org.openapitools.client.model.StopProductSubscriptionResponse;
import org.openapitools.client.model.UpdateIdentityProviderSettingsRequest;
import org.openapitools.client.model.UpdateIdentityProviderSettingsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt;Associates the user to an EC2 instance to utilize user-based subscriptions.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Your estimated bill for charges on the number of users and related costs will take 48 hours to appear for billing periods that haven&#39;t closed (marked as &lt;b&gt;Pending&lt;/b&gt; billing status) in Amazon Web Services Billing. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/invoice.html\&quot;&gt;Viewing your monthly charges&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Billing User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateUserTest() throws ApiException {
        AssociateUserRequest associateUserRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AssociateUserResponse response = api.associateUser(associateUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deregisters the identity provider from providing user-based subscriptions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deregisterIdentityProviderTest() throws ApiException {
        DeregisterIdentityProviderRequest deregisterIdentityProviderRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeregisterIdentityProviderResponse response = api.deregisterIdentityProvider(deregisterIdentityProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disassociates the user from an EC2 instance providing user-based subscriptions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateUserTest() throws ApiException {
        AssociateUserRequest associateUserRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DisassociateUserResponse response = api.disassociateUser(associateUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists the identity providers for user-based subscriptions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listIdentityProvidersTest() throws ApiException {
        ListIdentityProvidersRequest listIdentityProvidersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListIdentityProvidersResponse response = api.listIdentityProviders(listIdentityProvidersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the EC2 instances providing user-based subscriptions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInstancesTest() throws ApiException {
        ListInstancesRequest listInstancesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListInstancesResponse response = api.listInstances(listInstancesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the user-based subscription products available from an identity provider.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProductSubscriptionsTest() throws ApiException {
        ListProductSubscriptionsRequest listProductSubscriptionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListProductSubscriptionsResponse response = api.listProductSubscriptions(listProductSubscriptionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists user associations for an identity provider.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUserAssociationsTest() throws ApiException {
        ListUserAssociationsRequest listUserAssociationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListUserAssociationsResponse response = api.listUserAssociations(listUserAssociationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Registers an identity provider for user-based subscriptions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerIdentityProviderTest() throws ApiException {
        RegisterIdentityProviderRequest registerIdentityProviderRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RegisterIdentityProviderResponse response = api.registerIdentityProvider(registerIdentityProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Starts a product subscription for a user with the specified identity provider.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Your estimated bill for charges on the number of users and related costs will take 48 hours to appear for billing periods that haven&#39;t closed (marked as &lt;b&gt;Pending&lt;/b&gt; billing status) in Amazon Web Services Billing. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/invoice.html\&quot;&gt;Viewing your monthly charges&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Billing User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startProductSubscriptionTest() throws ApiException {
        StartProductSubscriptionRequest startProductSubscriptionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartProductSubscriptionResponse response = api.startProductSubscription(startProductSubscriptionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops a product subscription for a user with the specified identity provider.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopProductSubscriptionTest() throws ApiException {
        StopProductSubscriptionRequest stopProductSubscriptionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopProductSubscriptionResponse response = api.stopProductSubscription(stopProductSubscriptionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates additional product configuration settings for the registered identity provider.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateIdentityProviderSettingsTest() throws ApiException {
        UpdateIdentityProviderSettingsRequest updateIdentityProviderSettingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateIdentityProviderSettingsResponse response = api.updateIdentityProviderSettings(updateIdentityProviderSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
