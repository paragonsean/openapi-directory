/**
 * AWS License Manager User Subscriptions
 * With License Manager, you can create user-based subscriptions to utilize licensed software with a per user subscription fee on Amazon EC2 instances.
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssociateUserRequest from '../model/AssociateUserRequest';
import AssociateUserResponse from '../model/AssociateUserResponse';
import DeregisterIdentityProviderRequest from '../model/DeregisterIdentityProviderRequest';
import DeregisterIdentityProviderResponse from '../model/DeregisterIdentityProviderResponse';
import DisassociateUserResponse from '../model/DisassociateUserResponse';
import ListIdentityProvidersRequest from '../model/ListIdentityProvidersRequest';
import ListIdentityProvidersResponse from '../model/ListIdentityProvidersResponse';
import ListInstancesRequest from '../model/ListInstancesRequest';
import ListInstancesResponse from '../model/ListInstancesResponse';
import ListProductSubscriptionsRequest from '../model/ListProductSubscriptionsRequest';
import ListProductSubscriptionsResponse from '../model/ListProductSubscriptionsResponse';
import ListUserAssociationsRequest from '../model/ListUserAssociationsRequest';
import ListUserAssociationsResponse from '../model/ListUserAssociationsResponse';
import RegisterIdentityProviderRequest from '../model/RegisterIdentityProviderRequest';
import RegisterIdentityProviderResponse from '../model/RegisterIdentityProviderResponse';
import StartProductSubscriptionRequest from '../model/StartProductSubscriptionRequest';
import StartProductSubscriptionResponse from '../model/StartProductSubscriptionResponse';
import StopProductSubscriptionRequest from '../model/StopProductSubscriptionRequest';
import StopProductSubscriptionResponse from '../model/StopProductSubscriptionResponse';
import UpdateIdentityProviderSettingsRequest from '../model/UpdateIdentityProviderSettingsRequest';
import UpdateIdentityProviderSettingsResponse from '../model/UpdateIdentityProviderSettingsResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2018-05-10
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the associateUser operation.
     * @callback module:api/DefaultApi~associateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociateUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Associates the user to an EC2 instance to utilize user-based subscriptions.</p> <note> <p>Your estimated bill for charges on the number of users and related costs will take 48 hours to appear for billing periods that haven't closed (marked as <b>Pending</b> billing status) in Amazon Web Services Billing. For more information, see <a href=\"https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/invoice.html\">Viewing your monthly charges</a> in the <i>Amazon Web Services Billing User Guide</i>.</p> </note>
     * @param {module:model/AssociateUserRequest} associateUserRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociateUserResponse}
     */
    associateUser(associateUserRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateUserRequest;
      // verify the required parameter 'associateUserRequest' is set
      if (associateUserRequest === undefined || associateUserRequest === null) {
        throw new Error("Missing the required parameter 'associateUserRequest' when calling associateUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssociateUserResponse;
      return this.apiClient.callApi(
        '/user/AssociateUser', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deregisterIdentityProvider operation.
     * @callback module:api/DefaultApi~deregisterIdentityProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeregisterIdentityProviderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deregisters the identity provider from providing user-based subscriptions.
     * @param {module:model/DeregisterIdentityProviderRequest} deregisterIdentityProviderRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deregisterIdentityProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeregisterIdentityProviderResponse}
     */
    deregisterIdentityProvider(deregisterIdentityProviderRequest, opts, callback) {
      opts = opts || {};
      let postBody = deregisterIdentityProviderRequest;
      // verify the required parameter 'deregisterIdentityProviderRequest' is set
      if (deregisterIdentityProviderRequest === undefined || deregisterIdentityProviderRequest === null) {
        throw new Error("Missing the required parameter 'deregisterIdentityProviderRequest' when calling deregisterIdentityProvider");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeregisterIdentityProviderResponse;
      return this.apiClient.callApi(
        '/identity-provider/DeregisterIdentityProvider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateUser operation.
     * @callback module:api/DefaultApi~disassociateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisassociateUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disassociates the user from an EC2 instance providing user-based subscriptions.
     * @param {module:model/AssociateUserRequest} associateUserRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisassociateUserResponse}
     */
    disassociateUser(associateUserRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateUserRequest;
      // verify the required parameter 'associateUserRequest' is set
      if (associateUserRequest === undefined || associateUserRequest === null) {
        throw new Error("Missing the required parameter 'associateUserRequest' when calling disassociateUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DisassociateUserResponse;
      return this.apiClient.callApi(
        '/user/DisassociateUser', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listIdentityProviders operation.
     * @callback module:api/DefaultApi~listIdentityProvidersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListIdentityProvidersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the identity providers for user-based subscriptions.
     * @param {module:model/ListIdentityProvidersRequest} listIdentityProvidersRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listIdentityProvidersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListIdentityProvidersResponse}
     */
    listIdentityProviders(listIdentityProvidersRequest, opts, callback) {
      opts = opts || {};
      let postBody = listIdentityProvidersRequest;
      // verify the required parameter 'listIdentityProvidersRequest' is set
      if (listIdentityProvidersRequest === undefined || listIdentityProvidersRequest === null) {
        throw new Error("Missing the required parameter 'listIdentityProvidersRequest' when calling listIdentityProviders");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListIdentityProvidersResponse;
      return this.apiClient.callApi(
        '/identity-provider/ListIdentityProviders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInstances operation.
     * @callback module:api/DefaultApi~listInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the EC2 instances providing user-based subscriptions.
     * @param {module:model/ListInstancesRequest} listInstancesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListInstancesResponse}
     */
    listInstances(listInstancesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listInstancesRequest;
      // verify the required parameter 'listInstancesRequest' is set
      if (listInstancesRequest === undefined || listInstancesRequest === null) {
        throw new Error("Missing the required parameter 'listInstancesRequest' when calling listInstances");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListInstancesResponse;
      return this.apiClient.callApi(
        '/instance/ListInstances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProductSubscriptions operation.
     * @callback module:api/DefaultApi~listProductSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListProductSubscriptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the user-based subscription products available from an identity provider.
     * @param {module:model/ListProductSubscriptionsRequest} listProductSubscriptionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listProductSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListProductSubscriptionsResponse}
     */
    listProductSubscriptions(listProductSubscriptionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listProductSubscriptionsRequest;
      // verify the required parameter 'listProductSubscriptionsRequest' is set
      if (listProductSubscriptionsRequest === undefined || listProductSubscriptionsRequest === null) {
        throw new Error("Missing the required parameter 'listProductSubscriptionsRequest' when calling listProductSubscriptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListProductSubscriptionsResponse;
      return this.apiClient.callApi(
        '/user/ListProductSubscriptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUserAssociations operation.
     * @callback module:api/DefaultApi~listUserAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListUserAssociationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists user associations for an identity provider.
     * @param {module:model/ListUserAssociationsRequest} listUserAssociationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listUserAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListUserAssociationsResponse}
     */
    listUserAssociations(listUserAssociationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listUserAssociationsRequest;
      // verify the required parameter 'listUserAssociationsRequest' is set
      if (listUserAssociationsRequest === undefined || listUserAssociationsRequest === null) {
        throw new Error("Missing the required parameter 'listUserAssociationsRequest' when calling listUserAssociations");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListUserAssociationsResponse;
      return this.apiClient.callApi(
        '/user/ListUserAssociations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerIdentityProvider operation.
     * @callback module:api/DefaultApi~registerIdentityProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisterIdentityProviderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registers an identity provider for user-based subscriptions.
     * @param {module:model/RegisterIdentityProviderRequest} registerIdentityProviderRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~registerIdentityProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisterIdentityProviderResponse}
     */
    registerIdentityProvider(registerIdentityProviderRequest, opts, callback) {
      opts = opts || {};
      let postBody = registerIdentityProviderRequest;
      // verify the required parameter 'registerIdentityProviderRequest' is set
      if (registerIdentityProviderRequest === undefined || registerIdentityProviderRequest === null) {
        throw new Error("Missing the required parameter 'registerIdentityProviderRequest' when calling registerIdentityProvider");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RegisterIdentityProviderResponse;
      return this.apiClient.callApi(
        '/identity-provider/RegisterIdentityProvider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startProductSubscription operation.
     * @callback module:api/DefaultApi~startProductSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartProductSubscriptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Starts a product subscription for a user with the specified identity provider.</p> <note> <p>Your estimated bill for charges on the number of users and related costs will take 48 hours to appear for billing periods that haven't closed (marked as <b>Pending</b> billing status) in Amazon Web Services Billing. For more information, see <a href=\"https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/invoice.html\">Viewing your monthly charges</a> in the <i>Amazon Web Services Billing User Guide</i>.</p> </note>
     * @param {module:model/StartProductSubscriptionRequest} startProductSubscriptionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startProductSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartProductSubscriptionResponse}
     */
    startProductSubscription(startProductSubscriptionRequest, opts, callback) {
      opts = opts || {};
      let postBody = startProductSubscriptionRequest;
      // verify the required parameter 'startProductSubscriptionRequest' is set
      if (startProductSubscriptionRequest === undefined || startProductSubscriptionRequest === null) {
        throw new Error("Missing the required parameter 'startProductSubscriptionRequest' when calling startProductSubscription");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartProductSubscriptionResponse;
      return this.apiClient.callApi(
        '/user/StartProductSubscription', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopProductSubscription operation.
     * @callback module:api/DefaultApi~stopProductSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopProductSubscriptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops a product subscription for a user with the specified identity provider.
     * @param {module:model/StopProductSubscriptionRequest} stopProductSubscriptionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopProductSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopProductSubscriptionResponse}
     */
    stopProductSubscription(stopProductSubscriptionRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopProductSubscriptionRequest;
      // verify the required parameter 'stopProductSubscriptionRequest' is set
      if (stopProductSubscriptionRequest === undefined || stopProductSubscriptionRequest === null) {
        throw new Error("Missing the required parameter 'stopProductSubscriptionRequest' when calling stopProductSubscription");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StopProductSubscriptionResponse;
      return this.apiClient.callApi(
        '/user/StopProductSubscription', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIdentityProviderSettings operation.
     * @callback module:api/DefaultApi~updateIdentityProviderSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateIdentityProviderSettingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates additional product configuration settings for the registered identity provider.
     * @param {module:model/UpdateIdentityProviderSettingsRequest} updateIdentityProviderSettingsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateIdentityProviderSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateIdentityProviderSettingsResponse}
     */
    updateIdentityProviderSettings(updateIdentityProviderSettingsRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateIdentityProviderSettingsRequest;
      // verify the required parameter 'updateIdentityProviderSettingsRequest' is set
      if (updateIdentityProviderSettingsRequest === undefined || updateIdentityProviderSettingsRequest === null) {
        throw new Error("Missing the required parameter 'updateIdentityProviderSettingsRequest' when calling updateIdentityProviderSettings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateIdentityProviderSettingsResponse;
      return this.apiClient.callApi(
        '/identity-provider/UpdateIdentityProviderSettings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
