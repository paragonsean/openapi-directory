/**
 * AWS License Manager User Subscriptions
 * With License Manager, you can create user-based subscriptions to utilize licensed software with a per user subscription fee on Amazon EC2 instances.
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Settings from './Settings';

/**
 * The IdentityProviderSummarySettings model module.
 * @module model/IdentityProviderSummarySettings
 * @version 2018-05-10
 */
class IdentityProviderSummarySettings {
    /**
     * Constructs a new <code>IdentityProviderSummarySettings</code>.
     * @alias module:model/IdentityProviderSummarySettings
     * @implements module:model/Settings
     * @param securityGroupId {String} 
     * @param subnets {Array} 
     */
    constructor(securityGroupId, subnets) { 
        Settings.initialize(this, securityGroupId, subnets);
        IdentityProviderSummarySettings.initialize(this, securityGroupId, subnets);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, securityGroupId, subnets) { 
        obj['SecurityGroupId'] = securityGroupId;
        obj['Subnets'] = subnets;
    }

    /**
     * Constructs a <code>IdentityProviderSummarySettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IdentityProviderSummarySettings} obj Optional instance to populate.
     * @return {module:model/IdentityProviderSummarySettings} The populated <code>IdentityProviderSummarySettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IdentityProviderSummarySettings();
            Settings.constructFromObject(data, obj);

            if (data.hasOwnProperty('SecurityGroupId')) {
                obj['SecurityGroupId'] = ApiClient.convertToType(data['SecurityGroupId'], 'String');
            }
            if (data.hasOwnProperty('Subnets')) {
                obj['Subnets'] = ApiClient.convertToType(data['Subnets'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IdentityProviderSummarySettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IdentityProviderSummarySettings</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IdentityProviderSummarySettings.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `SecurityGroupId`
        if (data['SecurityGroupId']) { // data not null
          String.validateJSON(data['SecurityGroupId']);
        }
        // validate the optional field `Subnets`
        if (data['Subnets']) { // data not null
          Array.validateJSON(data['Subnets']);
        }

        return true;
    }


}

IdentityProviderSummarySettings.RequiredProperties = ["SecurityGroupId", "Subnets"];

/**
 * @member {String} SecurityGroupId
 */
IdentityProviderSummarySettings.prototype['SecurityGroupId'] = undefined;

/**
 * @member {Array} Subnets
 */
IdentityProviderSummarySettings.prototype['Subnets'] = undefined;


// Implement Settings interface:
/**
 * @member {String} SecurityGroupId
 */
Settings.prototype['SecurityGroupId'] = undefined;
/**
 * @member {Array} Subnets
 */
Settings.prototype['Subnets'] = undefined;




export default IdentityProviderSummarySettings;

