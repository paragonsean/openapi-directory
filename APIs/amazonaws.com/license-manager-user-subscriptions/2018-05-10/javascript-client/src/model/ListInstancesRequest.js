/**
 * AWS License Manager User Subscriptions
 * With License Manager, you can create user-based subscriptions to utilize licensed software with a per user subscription fee on Amazon EC2 instances.
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Filter from './Filter';

/**
 * The ListInstancesRequest model module.
 * @module model/ListInstancesRequest
 * @version 2018-05-10
 */
class ListInstancesRequest {
    /**
     * Constructs a new <code>ListInstancesRequest</code>.
     * @alias module:model/ListInstancesRequest
     */
    constructor() { 
        
        ListInstancesRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ListInstancesRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListInstancesRequest} obj Optional instance to populate.
     * @return {module:model/ListInstancesRequest} The populated <code>ListInstancesRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListInstancesRequest();

            if (data.hasOwnProperty('Filters')) {
                obj['Filters'] = ApiClient.convertToType(data['Filters'], [Filter]);
            }
            if (data.hasOwnProperty('MaxResults')) {
                obj['MaxResults'] = ApiClient.convertToType(data['MaxResults'], 'Number');
            }
            if (data.hasOwnProperty('NextToken')) {
                obj['NextToken'] = ApiClient.convertToType(data['NextToken'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListInstancesRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListInstancesRequest</code>.
     */
    static validateJSON(data) {
        if (data['Filters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Filters'])) {
                throw new Error("Expected the field `Filters` to be an array in the JSON data but got " + data['Filters']);
            }
            // validate the optional field `Filters` (array)
            for (const item of data['Filters']) {
                Filter.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['NextToken'] && !(typeof data['NextToken'] === 'string' || data['NextToken'] instanceof String)) {
            throw new Error("Expected the field `NextToken` to be a primitive type in the JSON string but got " + data['NextToken']);
        }

        return true;
    }


}



/**
 * An array of structures that you can use to filter the results to those that match one or more sets of key-value pairs that you specify.
 * @member {Array.<module:model/Filter>} Filters
 */
ListInstancesRequest.prototype['Filters'] = undefined;

/**
 * Maximum number of results to return in a single call.
 * @member {Number} MaxResults
 */
ListInstancesRequest.prototype['MaxResults'] = undefined;

/**
 * Token for the next set of results.
 * @member {String} NextToken
 */
ListInstancesRequest.prototype['NextToken'] = undefined;






export default ListInstancesRequest;

