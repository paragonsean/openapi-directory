/**
 * AWS License Manager User Subscriptions
 * With License Manager, you can create user-based subscriptions to utilize licensed software with a per user subscription fee on Amazon EC2 instances.
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IdentityProviderSummary from './IdentityProviderSummary';
import IdentityProviderSummarySettings from './IdentityProviderSummarySettings';
import InstanceUserSummaryIdentityProvider from './InstanceUserSummaryIdentityProvider';

/**
 * The DeregisterIdentityProviderResponseIdentityProviderSummary model module.
 * @module model/DeregisterIdentityProviderResponseIdentityProviderSummary
 * @version 2018-05-10
 */
class DeregisterIdentityProviderResponseIdentityProviderSummary {
    /**
     * Constructs a new <code>DeregisterIdentityProviderResponseIdentityProviderSummary</code>.
     * @alias module:model/DeregisterIdentityProviderResponseIdentityProviderSummary
     * @implements module:model/IdentityProviderSummary
     * @param identityProvider {module:model/InstanceUserSummaryIdentityProvider} 
     * @param product {String} 
     * @param settings {module:model/IdentityProviderSummarySettings} 
     * @param status {String} 
     */
    constructor(identityProvider, product, settings, status) { 
        IdentityProviderSummary.initialize(this, identityProvider, product, settings, status);
        DeregisterIdentityProviderResponseIdentityProviderSummary.initialize(this, identityProvider, product, settings, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, identityProvider, product, settings, status) { 
        obj['IdentityProvider'] = identityProvider;
        obj['Product'] = product;
        obj['Settings'] = settings;
        obj['Status'] = status;
    }

    /**
     * Constructs a <code>DeregisterIdentityProviderResponseIdentityProviderSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeregisterIdentityProviderResponseIdentityProviderSummary} obj Optional instance to populate.
     * @return {module:model/DeregisterIdentityProviderResponseIdentityProviderSummary} The populated <code>DeregisterIdentityProviderResponseIdentityProviderSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeregisterIdentityProviderResponseIdentityProviderSummary();
            IdentityProviderSummary.constructFromObject(data, obj);

            if (data.hasOwnProperty('FailureMessage')) {
                obj['FailureMessage'] = ApiClient.convertToType(data['FailureMessage'], 'String');
            }
            if (data.hasOwnProperty('IdentityProvider')) {
                obj['IdentityProvider'] = InstanceUserSummaryIdentityProvider.constructFromObject(data['IdentityProvider']);
            }
            if (data.hasOwnProperty('Product')) {
                obj['Product'] = ApiClient.convertToType(data['Product'], 'String');
            }
            if (data.hasOwnProperty('Settings')) {
                obj['Settings'] = IdentityProviderSummarySettings.constructFromObject(data['Settings']);
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeregisterIdentityProviderResponseIdentityProviderSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeregisterIdentityProviderResponseIdentityProviderSummary</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeregisterIdentityProviderResponseIdentityProviderSummary.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `FailureMessage`
        if (data['FailureMessage']) { // data not null
          String.validateJSON(data['FailureMessage']);
        }
        // validate the optional field `IdentityProvider`
        if (data['IdentityProvider']) { // data not null
          InstanceUserSummaryIdentityProvider.validateJSON(data['IdentityProvider']);
        }
        // validate the optional field `Product`
        if (data['Product']) { // data not null
          String.validateJSON(data['Product']);
        }
        // validate the optional field `Settings`
        if (data['Settings']) { // data not null
          IdentityProviderSummarySettings.validateJSON(data['Settings']);
        }
        // validate the optional field `Status`
        if (data['Status']) { // data not null
          String.validateJSON(data['Status']);
        }

        return true;
    }


}

DeregisterIdentityProviderResponseIdentityProviderSummary.RequiredProperties = ["IdentityProvider", "Product", "Settings", "Status"];

/**
 * @member {String} FailureMessage
 */
DeregisterIdentityProviderResponseIdentityProviderSummary.prototype['FailureMessage'] = undefined;

/**
 * @member {module:model/InstanceUserSummaryIdentityProvider} IdentityProvider
 */
DeregisterIdentityProviderResponseIdentityProviderSummary.prototype['IdentityProvider'] = undefined;

/**
 * @member {String} Product
 */
DeregisterIdentityProviderResponseIdentityProviderSummary.prototype['Product'] = undefined;

/**
 * @member {module:model/IdentityProviderSummarySettings} Settings
 */
DeregisterIdentityProviderResponseIdentityProviderSummary.prototype['Settings'] = undefined;

/**
 * @member {String} Status
 */
DeregisterIdentityProviderResponseIdentityProviderSummary.prototype['Status'] = undefined;


// Implement IdentityProviderSummary interface:
/**
 * @member {String} FailureMessage
 */
IdentityProviderSummary.prototype['FailureMessage'] = undefined;
/**
 * @member {module:model/InstanceUserSummaryIdentityProvider} IdentityProvider
 */
IdentityProviderSummary.prototype['IdentityProvider'] = undefined;
/**
 * @member {String} Product
 */
IdentityProviderSummary.prototype['Product'] = undefined;
/**
 * @member {module:model/IdentityProviderSummarySettings} Settings
 */
IdentityProviderSummary.prototype['Settings'] = undefined;
/**
 * @member {String} Status
 */
IdentityProviderSummary.prototype['Status'] = undefined;




export default DeregisterIdentityProviderResponseIdentityProviderSummary;

