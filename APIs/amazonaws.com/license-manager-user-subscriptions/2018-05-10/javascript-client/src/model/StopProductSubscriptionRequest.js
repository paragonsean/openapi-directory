/**
 * AWS License Manager User Subscriptions
 * With License Manager, you can create user-based subscriptions to utilize licensed software with a per user subscription fee on Amazon EC2 instances.
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AssociateUserRequestIdentityProvider from './AssociateUserRequestIdentityProvider';

/**
 * The StopProductSubscriptionRequest model module.
 * @module model/StopProductSubscriptionRequest
 * @version 2018-05-10
 */
class StopProductSubscriptionRequest {
    /**
     * Constructs a new <code>StopProductSubscriptionRequest</code>.
     * @alias module:model/StopProductSubscriptionRequest
     * @param identityProvider {module:model/AssociateUserRequestIdentityProvider} 
     * @param product {String} The name of the user-based subscription product.
     * @param username {String} The user name from the identity provider for the user.
     */
    constructor(identityProvider, product, username) { 
        
        StopProductSubscriptionRequest.initialize(this, identityProvider, product, username);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, identityProvider, product, username) { 
        obj['IdentityProvider'] = identityProvider;
        obj['Product'] = product;
        obj['Username'] = username;
    }

    /**
     * Constructs a <code>StopProductSubscriptionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StopProductSubscriptionRequest} obj Optional instance to populate.
     * @return {module:model/StopProductSubscriptionRequest} The populated <code>StopProductSubscriptionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StopProductSubscriptionRequest();

            if (data.hasOwnProperty('Domain')) {
                obj['Domain'] = ApiClient.convertToType(data['Domain'], 'String');
            }
            if (data.hasOwnProperty('IdentityProvider')) {
                obj['IdentityProvider'] = AssociateUserRequestIdentityProvider.constructFromObject(data['IdentityProvider']);
            }
            if (data.hasOwnProperty('Product')) {
                obj['Product'] = ApiClient.convertToType(data['Product'], 'String');
            }
            if (data.hasOwnProperty('Username')) {
                obj['Username'] = ApiClient.convertToType(data['Username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StopProductSubscriptionRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StopProductSubscriptionRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StopProductSubscriptionRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Domain'] && !(typeof data['Domain'] === 'string' || data['Domain'] instanceof String)) {
            throw new Error("Expected the field `Domain` to be a primitive type in the JSON string but got " + data['Domain']);
        }
        // validate the optional field `IdentityProvider`
        if (data['IdentityProvider']) { // data not null
          AssociateUserRequestIdentityProvider.validateJSON(data['IdentityProvider']);
        }
        // ensure the json data is a string
        if (data['Product'] && !(typeof data['Product'] === 'string' || data['Product'] instanceof String)) {
            throw new Error("Expected the field `Product` to be a primitive type in the JSON string but got " + data['Product']);
        }
        // ensure the json data is a string
        if (data['Username'] && !(typeof data['Username'] === 'string' || data['Username'] instanceof String)) {
            throw new Error("Expected the field `Username` to be a primitive type in the JSON string but got " + data['Username']);
        }

        return true;
    }


}

StopProductSubscriptionRequest.RequiredProperties = ["IdentityProvider", "Product", "Username"];

/**
 * The domain name of the user.
 * @member {String} Domain
 */
StopProductSubscriptionRequest.prototype['Domain'] = undefined;

/**
 * @member {module:model/AssociateUserRequestIdentityProvider} IdentityProvider
 */
StopProductSubscriptionRequest.prototype['IdentityProvider'] = undefined;

/**
 * The name of the user-based subscription product.
 * @member {String} Product
 */
StopProductSubscriptionRequest.prototype['Product'] = undefined;

/**
 * The user name from the identity provider for the user.
 * @member {String} Username
 */
StopProductSubscriptionRequest.prototype['Username'] = undefined;






export default StopProductSubscriptionRequest;

