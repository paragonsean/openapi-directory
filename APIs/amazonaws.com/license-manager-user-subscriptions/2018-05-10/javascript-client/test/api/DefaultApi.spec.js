/**
 * AWS License Manager User Subscriptions
 * With License Manager, you can create user-based subscriptions to utilize licensed software with a per user subscription fee on Amazon EC2 instances.
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsLicenseManagerUserSubscriptions);
  }
}(this, function(expect, AwsLicenseManagerUserSubscriptions) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsLicenseManagerUserSubscriptions.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('associateUser', function() {
      it('should call associateUser successfully', function(done) {
        //uncomment below and update the code to test associateUser
        //instance.associateUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deregisterIdentityProvider', function() {
      it('should call deregisterIdentityProvider successfully', function(done) {
        //uncomment below and update the code to test deregisterIdentityProvider
        //instance.deregisterIdentityProvider(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociateUser', function() {
      it('should call disassociateUser successfully', function(done) {
        //uncomment below and update the code to test disassociateUser
        //instance.disassociateUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listIdentityProviders', function() {
      it('should call listIdentityProviders successfully', function(done) {
        //uncomment below and update the code to test listIdentityProviders
        //instance.listIdentityProviders(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listInstances', function() {
      it('should call listInstances successfully', function(done) {
        //uncomment below and update the code to test listInstances
        //instance.listInstances(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listProductSubscriptions', function() {
      it('should call listProductSubscriptions successfully', function(done) {
        //uncomment below and update the code to test listProductSubscriptions
        //instance.listProductSubscriptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listUserAssociations', function() {
      it('should call listUserAssociations successfully', function(done) {
        //uncomment below and update the code to test listUserAssociations
        //instance.listUserAssociations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('registerIdentityProvider', function() {
      it('should call registerIdentityProvider successfully', function(done) {
        //uncomment below and update the code to test registerIdentityProvider
        //instance.registerIdentityProvider(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startProductSubscription', function() {
      it('should call startProductSubscription successfully', function(done) {
        //uncomment below and update the code to test startProductSubscription
        //instance.startProductSubscription(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopProductSubscription', function() {
      it('should call stopProductSubscription successfully', function(done) {
        //uncomment below and update the code to test stopProductSubscription
        //instance.stopProductSubscription(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateIdentityProviderSettings', function() {
      it('should call updateIdentityProviderSettings successfully', function(done) {
        //uncomment below and update the code to test updateIdentityProviderSettings
        //instance.updateIdentityProviderSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
