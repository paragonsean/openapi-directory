# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.instance_user_summary_identity_provider import InstanceUserSummaryIdentityProvider
from openapi_server import util


class StartProductSubscriptionResponseProductUserSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain: str=None, identity_provider: InstanceUserSummaryIdentityProvider=None, product: str=None, status: str=None, status_message: str=None, subscription_end_date: str=None, subscription_start_date: str=None, username: str=None):
        """StartProductSubscriptionResponseProductUserSummary - a model defined in OpenAPI

        :param domain: The domain of this StartProductSubscriptionResponseProductUserSummary.
        :param identity_provider: The identity_provider of this StartProductSubscriptionResponseProductUserSummary.
        :param product: The product of this StartProductSubscriptionResponseProductUserSummary.
        :param status: The status of this StartProductSubscriptionResponseProductUserSummary.
        :param status_message: The status_message of this StartProductSubscriptionResponseProductUserSummary.
        :param subscription_end_date: The subscription_end_date of this StartProductSubscriptionResponseProductUserSummary.
        :param subscription_start_date: The subscription_start_date of this StartProductSubscriptionResponseProductUserSummary.
        :param username: The username of this StartProductSubscriptionResponseProductUserSummary.
        """
        self.openapi_types = {
            'domain': str,
            'identity_provider': InstanceUserSummaryIdentityProvider,
            'product': str,
            'status': str,
            'status_message': str,
            'subscription_end_date': str,
            'subscription_start_date': str,
            'username': str
        }

        self.attribute_map = {
            'domain': 'Domain',
            'identity_provider': 'IdentityProvider',
            'product': 'Product',
            'status': 'Status',
            'status_message': 'StatusMessage',
            'subscription_end_date': 'SubscriptionEndDate',
            'subscription_start_date': 'SubscriptionStartDate',
            'username': 'Username'
        }

        self._domain = domain
        self._identity_provider = identity_provider
        self._product = product
        self._status = status
        self._status_message = status_message
        self._subscription_end_date = subscription_end_date
        self._subscription_start_date = subscription_start_date
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartProductSubscriptionResponseProductUserSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartProductSubscriptionResponse_ProductUserSummary of this StartProductSubscriptionResponseProductUserSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain(self):
        """Gets the domain of this StartProductSubscriptionResponseProductUserSummary.


        :return: The domain of this StartProductSubscriptionResponseProductUserSummary.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this StartProductSubscriptionResponseProductUserSummary.


        :param domain: The domain of this StartProductSubscriptionResponseProductUserSummary.
        :type domain: str
        """

        self._domain = domain

    @property
    def identity_provider(self):
        """Gets the identity_provider of this StartProductSubscriptionResponseProductUserSummary.


        :return: The identity_provider of this StartProductSubscriptionResponseProductUserSummary.
        :rtype: InstanceUserSummaryIdentityProvider
        """
        return self._identity_provider

    @identity_provider.setter
    def identity_provider(self, identity_provider):
        """Sets the identity_provider of this StartProductSubscriptionResponseProductUserSummary.


        :param identity_provider: The identity_provider of this StartProductSubscriptionResponseProductUserSummary.
        :type identity_provider: InstanceUserSummaryIdentityProvider
        """
        if identity_provider is None:
            raise ValueError("Invalid value for `identity_provider`, must not be `None`")

        self._identity_provider = identity_provider

    @property
    def product(self):
        """Gets the product of this StartProductSubscriptionResponseProductUserSummary.


        :return: The product of this StartProductSubscriptionResponseProductUserSummary.
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this StartProductSubscriptionResponseProductUserSummary.


        :param product: The product of this StartProductSubscriptionResponseProductUserSummary.
        :type product: str
        """
        if product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")

        self._product = product

    @property
    def status(self):
        """Gets the status of this StartProductSubscriptionResponseProductUserSummary.


        :return: The status of this StartProductSubscriptionResponseProductUserSummary.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StartProductSubscriptionResponseProductUserSummary.


        :param status: The status of this StartProductSubscriptionResponseProductUserSummary.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this StartProductSubscriptionResponseProductUserSummary.


        :return: The status_message of this StartProductSubscriptionResponseProductUserSummary.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this StartProductSubscriptionResponseProductUserSummary.


        :param status_message: The status_message of this StartProductSubscriptionResponseProductUserSummary.
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def subscription_end_date(self):
        """Gets the subscription_end_date of this StartProductSubscriptionResponseProductUserSummary.


        :return: The subscription_end_date of this StartProductSubscriptionResponseProductUserSummary.
        :rtype: str
        """
        return self._subscription_end_date

    @subscription_end_date.setter
    def subscription_end_date(self, subscription_end_date):
        """Sets the subscription_end_date of this StartProductSubscriptionResponseProductUserSummary.


        :param subscription_end_date: The subscription_end_date of this StartProductSubscriptionResponseProductUserSummary.
        :type subscription_end_date: str
        """

        self._subscription_end_date = subscription_end_date

    @property
    def subscription_start_date(self):
        """Gets the subscription_start_date of this StartProductSubscriptionResponseProductUserSummary.


        :return: The subscription_start_date of this StartProductSubscriptionResponseProductUserSummary.
        :rtype: str
        """
        return self._subscription_start_date

    @subscription_start_date.setter
    def subscription_start_date(self, subscription_start_date):
        """Sets the subscription_start_date of this StartProductSubscriptionResponseProductUserSummary.


        :param subscription_start_date: The subscription_start_date of this StartProductSubscriptionResponseProductUserSummary.
        :type subscription_start_date: str
        """

        self._subscription_start_date = subscription_start_date

    @property
    def username(self):
        """Gets the username of this StartProductSubscriptionResponseProductUserSummary.


        :return: The username of this StartProductSubscriptionResponseProductUserSummary.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this StartProductSubscriptionResponseProductUserSummary.


        :param username: The username of this StartProductSubscriptionResponseProductUserSummary.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username
