# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, add_subnets: List=None, remove_subnets: List=None, security_group_id: str=None):
        """UpdateSettings - a model defined in OpenAPI

        :param add_subnets: The add_subnets of this UpdateSettings.
        :param remove_subnets: The remove_subnets of this UpdateSettings.
        :param security_group_id: The security_group_id of this UpdateSettings.
        """
        self.openapi_types = {
            'add_subnets': List,
            'remove_subnets': List,
            'security_group_id': str
        }

        self.attribute_map = {
            'add_subnets': 'AddSubnets',
            'remove_subnets': 'RemoveSubnets',
            'security_group_id': 'SecurityGroupId'
        }

        self._add_subnets = add_subnets
        self._remove_subnets = remove_subnets
        self._security_group_id = security_group_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateSettings of this UpdateSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def add_subnets(self):
        """Gets the add_subnets of this UpdateSettings.


        :return: The add_subnets of this UpdateSettings.
        :rtype: List
        """
        return self._add_subnets

    @add_subnets.setter
    def add_subnets(self, add_subnets):
        """Sets the add_subnets of this UpdateSettings.


        :param add_subnets: The add_subnets of this UpdateSettings.
        :type add_subnets: List
        """
        if add_subnets is None:
            raise ValueError("Invalid value for `add_subnets`, must not be `None`")

        self._add_subnets = add_subnets

    @property
    def remove_subnets(self):
        """Gets the remove_subnets of this UpdateSettings.


        :return: The remove_subnets of this UpdateSettings.
        :rtype: List
        """
        return self._remove_subnets

    @remove_subnets.setter
    def remove_subnets(self, remove_subnets):
        """Sets the remove_subnets of this UpdateSettings.


        :param remove_subnets: The remove_subnets of this UpdateSettings.
        :type remove_subnets: List
        """
        if remove_subnets is None:
            raise ValueError("Invalid value for `remove_subnets`, must not be `None`")

        self._remove_subnets = remove_subnets

    @property
    def security_group_id(self):
        """Gets the security_group_id of this UpdateSettings.


        :return: The security_group_id of this UpdateSettings.
        :rtype: str
        """
        return self._security_group_id

    @security_group_id.setter
    def security_group_id(self, security_group_id):
        """Sets the security_group_id of this UpdateSettings.


        :param security_group_id: The security_group_id of this UpdateSettings.
        :type security_group_id: str
        """

        self._security_group_id = security_group_id
