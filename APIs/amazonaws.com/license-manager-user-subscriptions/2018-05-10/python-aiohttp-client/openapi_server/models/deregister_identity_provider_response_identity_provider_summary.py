# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.identity_provider_summary_settings import IdentityProviderSummarySettings
from openapi_server.models.instance_user_summary_identity_provider import InstanceUserSummaryIdentityProvider
from openapi_server import util


class DeregisterIdentityProviderResponseIdentityProviderSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, failure_message: str=None, identity_provider: InstanceUserSummaryIdentityProvider=None, product: str=None, settings: IdentityProviderSummarySettings=None, status: str=None):
        """DeregisterIdentityProviderResponseIdentityProviderSummary - a model defined in OpenAPI

        :param failure_message: The failure_message of this DeregisterIdentityProviderResponseIdentityProviderSummary.
        :param identity_provider: The identity_provider of this DeregisterIdentityProviderResponseIdentityProviderSummary.
        :param product: The product of this DeregisterIdentityProviderResponseIdentityProviderSummary.
        :param settings: The settings of this DeregisterIdentityProviderResponseIdentityProviderSummary.
        :param status: The status of this DeregisterIdentityProviderResponseIdentityProviderSummary.
        """
        self.openapi_types = {
            'failure_message': str,
            'identity_provider': InstanceUserSummaryIdentityProvider,
            'product': str,
            'settings': IdentityProviderSummarySettings,
            'status': str
        }

        self.attribute_map = {
            'failure_message': 'FailureMessage',
            'identity_provider': 'IdentityProvider',
            'product': 'Product',
            'settings': 'Settings',
            'status': 'Status'
        }

        self._failure_message = failure_message
        self._identity_provider = identity_provider
        self._product = product
        self._settings = settings
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeregisterIdentityProviderResponseIdentityProviderSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeregisterIdentityProviderResponse_IdentityProviderSummary of this DeregisterIdentityProviderResponseIdentityProviderSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def failure_message(self):
        """Gets the failure_message of this DeregisterIdentityProviderResponseIdentityProviderSummary.


        :return: The failure_message of this DeregisterIdentityProviderResponseIdentityProviderSummary.
        :rtype: str
        """
        return self._failure_message

    @failure_message.setter
    def failure_message(self, failure_message):
        """Sets the failure_message of this DeregisterIdentityProviderResponseIdentityProviderSummary.


        :param failure_message: The failure_message of this DeregisterIdentityProviderResponseIdentityProviderSummary.
        :type failure_message: str
        """

        self._failure_message = failure_message

    @property
    def identity_provider(self):
        """Gets the identity_provider of this DeregisterIdentityProviderResponseIdentityProviderSummary.


        :return: The identity_provider of this DeregisterIdentityProviderResponseIdentityProviderSummary.
        :rtype: InstanceUserSummaryIdentityProvider
        """
        return self._identity_provider

    @identity_provider.setter
    def identity_provider(self, identity_provider):
        """Sets the identity_provider of this DeregisterIdentityProviderResponseIdentityProviderSummary.


        :param identity_provider: The identity_provider of this DeregisterIdentityProviderResponseIdentityProviderSummary.
        :type identity_provider: InstanceUserSummaryIdentityProvider
        """
        if identity_provider is None:
            raise ValueError("Invalid value for `identity_provider`, must not be `None`")

        self._identity_provider = identity_provider

    @property
    def product(self):
        """Gets the product of this DeregisterIdentityProviderResponseIdentityProviderSummary.


        :return: The product of this DeregisterIdentityProviderResponseIdentityProviderSummary.
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this DeregisterIdentityProviderResponseIdentityProviderSummary.


        :param product: The product of this DeregisterIdentityProviderResponseIdentityProviderSummary.
        :type product: str
        """
        if product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")

        self._product = product

    @property
    def settings(self):
        """Gets the settings of this DeregisterIdentityProviderResponseIdentityProviderSummary.


        :return: The settings of this DeregisterIdentityProviderResponseIdentityProviderSummary.
        :rtype: IdentityProviderSummarySettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this DeregisterIdentityProviderResponseIdentityProviderSummary.


        :param settings: The settings of this DeregisterIdentityProviderResponseIdentityProviderSummary.
        :type settings: IdentityProviderSummarySettings
        """
        if settings is None:
            raise ValueError("Invalid value for `settings`, must not be `None`")

        self._settings = settings

    @property
    def status(self):
        """Gets the status of this DeregisterIdentityProviderResponseIdentityProviderSummary.


        :return: The status of this DeregisterIdentityProviderResponseIdentityProviderSummary.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DeregisterIdentityProviderResponseIdentityProviderSummary.


        :param status: The status of this DeregisterIdentityProviderResponseIdentityProviderSummary.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
