# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InstanceSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, instance_id: str=None, last_status_check_date: str=None, products: List=None, status: str=None, status_message: str=None):
        """InstanceSummary - a model defined in OpenAPI

        :param instance_id: The instance_id of this InstanceSummary.
        :param last_status_check_date: The last_status_check_date of this InstanceSummary.
        :param products: The products of this InstanceSummary.
        :param status: The status of this InstanceSummary.
        :param status_message: The status_message of this InstanceSummary.
        """
        self.openapi_types = {
            'instance_id': str,
            'last_status_check_date': str,
            'products': List,
            'status': str,
            'status_message': str
        }

        self.attribute_map = {
            'instance_id': 'InstanceId',
            'last_status_check_date': 'LastStatusCheckDate',
            'products': 'Products',
            'status': 'Status',
            'status_message': 'StatusMessage'
        }

        self._instance_id = instance_id
        self._last_status_check_date = last_status_check_date
        self._products = products
        self._status = status
        self._status_message = status_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstanceSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstanceSummary of this InstanceSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def instance_id(self):
        """Gets the instance_id of this InstanceSummary.


        :return: The instance_id of this InstanceSummary.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this InstanceSummary.


        :param instance_id: The instance_id of this InstanceSummary.
        :type instance_id: str
        """
        if instance_id is None:
            raise ValueError("Invalid value for `instance_id`, must not be `None`")

        self._instance_id = instance_id

    @property
    def last_status_check_date(self):
        """Gets the last_status_check_date of this InstanceSummary.


        :return: The last_status_check_date of this InstanceSummary.
        :rtype: str
        """
        return self._last_status_check_date

    @last_status_check_date.setter
    def last_status_check_date(self, last_status_check_date):
        """Sets the last_status_check_date of this InstanceSummary.


        :param last_status_check_date: The last_status_check_date of this InstanceSummary.
        :type last_status_check_date: str
        """

        self._last_status_check_date = last_status_check_date

    @property
    def products(self):
        """Gets the products of this InstanceSummary.


        :return: The products of this InstanceSummary.
        :rtype: List
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this InstanceSummary.


        :param products: The products of this InstanceSummary.
        :type products: List
        """
        if products is None:
            raise ValueError("Invalid value for `products`, must not be `None`")

        self._products = products

    @property
    def status(self):
        """Gets the status of this InstanceSummary.


        :return: The status of this InstanceSummary.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InstanceSummary.


        :param status: The status of this InstanceSummary.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this InstanceSummary.


        :return: The status_message of this InstanceSummary.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this InstanceSummary.


        :param status_message: The status_message of this InstanceSummary.
        :type status_message: str
        """

        self._status_message = status_message
