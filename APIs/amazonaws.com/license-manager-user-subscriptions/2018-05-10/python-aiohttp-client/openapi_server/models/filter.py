# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Filter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute: str=None, operation: str=None, value: str=None):
        """Filter - a model defined in OpenAPI

        :param attribute: The attribute of this Filter.
        :param operation: The operation of this Filter.
        :param value: The value of this Filter.
        """
        self.openapi_types = {
            'attribute': str,
            'operation': str,
            'value': str
        }

        self.attribute_map = {
            'attribute': 'Attribute',
            'operation': 'Operation',
            'value': 'Value'
        }

        self._attribute = attribute
        self._operation = operation
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Filter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Filter of this Filter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute(self):
        """Gets the attribute of this Filter.


        :return: The attribute of this Filter.
        :rtype: str
        """
        return self._attribute

    @attribute.setter
    def attribute(self, attribute):
        """Sets the attribute of this Filter.


        :param attribute: The attribute of this Filter.
        :type attribute: str
        """

        self._attribute = attribute

    @property
    def operation(self):
        """Gets the operation of this Filter.


        :return: The operation of this Filter.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this Filter.


        :param operation: The operation of this Filter.
        :type operation: str
        """

        self._operation = operation

    @property
    def value(self):
        """Gets the value of this Filter.


        :return: The value of this Filter.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Filter.


        :param value: The value of this Filter.
        :type value: str
        """

        self._value = value
