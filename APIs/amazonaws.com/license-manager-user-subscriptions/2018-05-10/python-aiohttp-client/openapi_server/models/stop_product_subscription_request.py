# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.associate_user_request_identity_provider import AssociateUserRequestIdentityProvider
from openapi_server import util


class StopProductSubscriptionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain: str=None, identity_provider: AssociateUserRequestIdentityProvider=None, product: str=None, username: str=None):
        """StopProductSubscriptionRequest - a model defined in OpenAPI

        :param domain: The domain of this StopProductSubscriptionRequest.
        :param identity_provider: The identity_provider of this StopProductSubscriptionRequest.
        :param product: The product of this StopProductSubscriptionRequest.
        :param username: The username of this StopProductSubscriptionRequest.
        """
        self.openapi_types = {
            'domain': str,
            'identity_provider': AssociateUserRequestIdentityProvider,
            'product': str,
            'username': str
        }

        self.attribute_map = {
            'domain': 'Domain',
            'identity_provider': 'IdentityProvider',
            'product': 'Product',
            'username': 'Username'
        }

        self._domain = domain
        self._identity_provider = identity_provider
        self._product = product
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StopProductSubscriptionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StopProductSubscription_request of this StopProductSubscriptionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain(self):
        """Gets the domain of this StopProductSubscriptionRequest.

        The domain name of the user.

        :return: The domain of this StopProductSubscriptionRequest.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this StopProductSubscriptionRequest.

        The domain name of the user.

        :param domain: The domain of this StopProductSubscriptionRequest.
        :type domain: str
        """

        self._domain = domain

    @property
    def identity_provider(self):
        """Gets the identity_provider of this StopProductSubscriptionRequest.


        :return: The identity_provider of this StopProductSubscriptionRequest.
        :rtype: AssociateUserRequestIdentityProvider
        """
        return self._identity_provider

    @identity_provider.setter
    def identity_provider(self, identity_provider):
        """Sets the identity_provider of this StopProductSubscriptionRequest.


        :param identity_provider: The identity_provider of this StopProductSubscriptionRequest.
        :type identity_provider: AssociateUserRequestIdentityProvider
        """
        if identity_provider is None:
            raise ValueError("Invalid value for `identity_provider`, must not be `None`")

        self._identity_provider = identity_provider

    @property
    def product(self):
        """Gets the product of this StopProductSubscriptionRequest.

        The name of the user-based subscription product.

        :return: The product of this StopProductSubscriptionRequest.
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this StopProductSubscriptionRequest.

        The name of the user-based subscription product.

        :param product: The product of this StopProductSubscriptionRequest.
        :type product: str
        """
        if product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")

        self._product = product

    @property
    def username(self):
        """Gets the username of this StopProductSubscriptionRequest.

        The user name from the identity provider for the user.

        :return: The username of this StopProductSubscriptionRequest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this StopProductSubscriptionRequest.

        The user name from the identity provider for the user.

        :param username: The username of this StopProductSubscriptionRequest.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username
