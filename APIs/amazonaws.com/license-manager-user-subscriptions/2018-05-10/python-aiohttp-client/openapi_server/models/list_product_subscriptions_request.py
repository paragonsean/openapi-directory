# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.associate_user_request_identity_provider import AssociateUserRequestIdentityProvider
from openapi_server.models.filter import Filter
from openapi_server import util


class ListProductSubscriptionsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filters: List[Filter]=None, identity_provider: AssociateUserRequestIdentityProvider=None, max_results: int=None, next_token: str=None, product: str=None):
        """ListProductSubscriptionsRequest - a model defined in OpenAPI

        :param filters: The filters of this ListProductSubscriptionsRequest.
        :param identity_provider: The identity_provider of this ListProductSubscriptionsRequest.
        :param max_results: The max_results of this ListProductSubscriptionsRequest.
        :param next_token: The next_token of this ListProductSubscriptionsRequest.
        :param product: The product of this ListProductSubscriptionsRequest.
        """
        self.openapi_types = {
            'filters': List[Filter],
            'identity_provider': AssociateUserRequestIdentityProvider,
            'max_results': int,
            'next_token': str,
            'product': str
        }

        self.attribute_map = {
            'filters': 'Filters',
            'identity_provider': 'IdentityProvider',
            'max_results': 'MaxResults',
            'next_token': 'NextToken',
            'product': 'Product'
        }

        self._filters = filters
        self._identity_provider = identity_provider
        self._max_results = max_results
        self._next_token = next_token
        self._product = product

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListProductSubscriptionsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListProductSubscriptions_request of this ListProductSubscriptionsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filters(self):
        """Gets the filters of this ListProductSubscriptionsRequest.

        An array of structures that you can use to filter the results to those that match one or more sets of key-value pairs that you specify.

        :return: The filters of this ListProductSubscriptionsRequest.
        :rtype: List[Filter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ListProductSubscriptionsRequest.

        An array of structures that you can use to filter the results to those that match one or more sets of key-value pairs that you specify.

        :param filters: The filters of this ListProductSubscriptionsRequest.
        :type filters: List[Filter]
        """

        self._filters = filters

    @property
    def identity_provider(self):
        """Gets the identity_provider of this ListProductSubscriptionsRequest.


        :return: The identity_provider of this ListProductSubscriptionsRequest.
        :rtype: AssociateUserRequestIdentityProvider
        """
        return self._identity_provider

    @identity_provider.setter
    def identity_provider(self, identity_provider):
        """Sets the identity_provider of this ListProductSubscriptionsRequest.


        :param identity_provider: The identity_provider of this ListProductSubscriptionsRequest.
        :type identity_provider: AssociateUserRequestIdentityProvider
        """
        if identity_provider is None:
            raise ValueError("Invalid value for `identity_provider`, must not be `None`")

        self._identity_provider = identity_provider

    @property
    def max_results(self):
        """Gets the max_results of this ListProductSubscriptionsRequest.

        Maximum number of results to return in a single call.

        :return: The max_results of this ListProductSubscriptionsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListProductSubscriptionsRequest.

        Maximum number of results to return in a single call.

        :param max_results: The max_results of this ListProductSubscriptionsRequest.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListProductSubscriptionsRequest.

        Token for the next set of results.

        :return: The next_token of this ListProductSubscriptionsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListProductSubscriptionsRequest.

        Token for the next set of results.

        :param next_token: The next_token of this ListProductSubscriptionsRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def product(self):
        """Gets the product of this ListProductSubscriptionsRequest.

        The name of the user-based subscription product.

        :return: The product of this ListProductSubscriptionsRequest.
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this ListProductSubscriptionsRequest.

        The name of the user-based subscription product.

        :param product: The product of this ListProductSubscriptionsRequest.
        :type product: str
        """
        if product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")

        self._product = product
