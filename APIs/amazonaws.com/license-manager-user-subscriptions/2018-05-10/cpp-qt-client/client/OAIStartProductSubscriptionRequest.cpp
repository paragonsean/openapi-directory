/**
 * AWS License Manager User Subscriptions
 * With License Manager, you can create user-based subscriptions to utilize licensed software with a per user subscription fee on Amazon EC2 instances.
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartProductSubscriptionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartProductSubscriptionRequest::OAIStartProductSubscriptionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartProductSubscriptionRequest::OAIStartProductSubscriptionRequest() {
    this->initializeModel();
}

OAIStartProductSubscriptionRequest::~OAIStartProductSubscriptionRequest() {}

void OAIStartProductSubscriptionRequest::initializeModel() {

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_identity_provider_isSet = false;
    m_identity_provider_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIStartProductSubscriptionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartProductSubscriptionRequest::fromJsonObject(QJsonObject json) {

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("Domain")]);
    m_domain_isSet = !json[QString("Domain")].isNull() && m_domain_isValid;

    m_identity_provider_isValid = ::OpenAPI::fromJsonValue(m_identity_provider, json[QString("IdentityProvider")]);
    m_identity_provider_isSet = !json[QString("IdentityProvider")].isNull() && m_identity_provider_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("Product")]);
    m_product_isSet = !json[QString("Product")].isNull() && m_product_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("Username")]);
    m_username_isSet = !json[QString("Username")].isNull() && m_username_isValid;
}

QString OAIStartProductSubscriptionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartProductSubscriptionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_isSet) {
        obj.insert(QString("Domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_identity_provider.isSet()) {
        obj.insert(QString("IdentityProvider"), ::OpenAPI::toJsonValue(m_identity_provider));
    }
    if (m_product_isSet) {
        obj.insert(QString("Product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_username_isSet) {
        obj.insert(QString("Username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIStartProductSubscriptionRequest::getDomain() const {
    return m_domain;
}
void OAIStartProductSubscriptionRequest::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIStartProductSubscriptionRequest::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIStartProductSubscriptionRequest::is_domain_Valid() const{
    return m_domain_isValid;
}

OAIInstanceUserSummary_IdentityProvider OAIStartProductSubscriptionRequest::getIdentityProvider() const {
    return m_identity_provider;
}
void OAIStartProductSubscriptionRequest::setIdentityProvider(const OAIInstanceUserSummary_IdentityProvider &identity_provider) {
    m_identity_provider = identity_provider;
    m_identity_provider_isSet = true;
}

bool OAIStartProductSubscriptionRequest::is_identity_provider_Set() const{
    return m_identity_provider_isSet;
}

bool OAIStartProductSubscriptionRequest::is_identity_provider_Valid() const{
    return m_identity_provider_isValid;
}

QString OAIStartProductSubscriptionRequest::getProduct() const {
    return m_product;
}
void OAIStartProductSubscriptionRequest::setProduct(const QString &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAIStartProductSubscriptionRequest::is_product_Set() const{
    return m_product_isSet;
}

bool OAIStartProductSubscriptionRequest::is_product_Valid() const{
    return m_product_isValid;
}

QString OAIStartProductSubscriptionRequest::getUsername() const {
    return m_username;
}
void OAIStartProductSubscriptionRequest::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIStartProductSubscriptionRequest::is_username_Set() const{
    return m_username_isSet;
}

bool OAIStartProductSubscriptionRequest::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIStartProductSubscriptionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_provider.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartProductSubscriptionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_identity_provider_isValid && m_product_isValid && m_username_isValid && true;
}

} // namespace OpenAPI
