/**
 * AWS License Manager User Subscriptions
 * With License Manager, you can create user-based subscriptions to utilize licensed software with a per user subscription fee on Amazon EC2 instances.
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstanceSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstanceSummary::OAIInstanceSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstanceSummary::OAIInstanceSummary() {
    this->initializeModel();
}

OAIInstanceSummary::~OAIInstanceSummary() {}

void OAIInstanceSummary::initializeModel() {

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_last_status_check_date_isSet = false;
    m_last_status_check_date_isValid = false;

    m_products_isSet = false;
    m_products_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;
}

void OAIInstanceSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstanceSummary::fromJsonObject(QJsonObject json) {

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("InstanceId")]);
    m_instance_id_isSet = !json[QString("InstanceId")].isNull() && m_instance_id_isValid;

    m_last_status_check_date_isValid = ::OpenAPI::fromJsonValue(m_last_status_check_date, json[QString("LastStatusCheckDate")]);
    m_last_status_check_date_isSet = !json[QString("LastStatusCheckDate")].isNull() && m_last_status_check_date_isValid;

    m_products_isValid = ::OpenAPI::fromJsonValue(m_products, json[QString("Products")]);
    m_products_isSet = !json[QString("Products")].isNull() && m_products_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("StatusMessage")]);
    m_status_message_isSet = !json[QString("StatusMessage")].isNull() && m_status_message_isValid;
}

QString OAIInstanceSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstanceSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_id_isSet) {
        obj.insert(QString("InstanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_last_status_check_date_isSet) {
        obj.insert(QString("LastStatusCheckDate"), ::OpenAPI::toJsonValue(m_last_status_check_date));
    }
    if (m_products.isSet()) {
        obj.insert(QString("Products"), ::OpenAPI::toJsonValue(m_products));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("StatusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    return obj;
}

QString OAIInstanceSummary::getInstanceId() const {
    return m_instance_id;
}
void OAIInstanceSummary::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIInstanceSummary::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIInstanceSummary::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QString OAIInstanceSummary::getLastStatusCheckDate() const {
    return m_last_status_check_date;
}
void OAIInstanceSummary::setLastStatusCheckDate(const QString &last_status_check_date) {
    m_last_status_check_date = last_status_check_date;
    m_last_status_check_date_isSet = true;
}

bool OAIInstanceSummary::is_last_status_check_date_Set() const{
    return m_last_status_check_date_isSet;
}

bool OAIInstanceSummary::is_last_status_check_date_Valid() const{
    return m_last_status_check_date_isValid;
}

QList OAIInstanceSummary::getProducts() const {
    return m_products;
}
void OAIInstanceSummary::setProducts(const QList &products) {
    m_products = products;
    m_products_isSet = true;
}

bool OAIInstanceSummary::is_products_Set() const{
    return m_products_isSet;
}

bool OAIInstanceSummary::is_products_Valid() const{
    return m_products_isValid;
}

QString OAIInstanceSummary::getStatus() const {
    return m_status;
}
void OAIInstanceSummary::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIInstanceSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIInstanceSummary::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIInstanceSummary::getStatusMessage() const {
    return m_status_message;
}
void OAIInstanceSummary::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIInstanceSummary::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIInstanceSummary::is_status_message_Valid() const{
    return m_status_message_isValid;
}

bool OAIInstanceSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_status_check_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_products.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstanceSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_instance_id_isValid && m_products_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
