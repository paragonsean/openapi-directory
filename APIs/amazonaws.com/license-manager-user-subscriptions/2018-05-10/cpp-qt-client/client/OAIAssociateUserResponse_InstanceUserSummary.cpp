/**
 * AWS License Manager User Subscriptions
 * With License Manager, you can create user-based subscriptions to utilize licensed software with a per user subscription fee on Amazon EC2 instances.
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssociateUserResponse_InstanceUserSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssociateUserResponse_InstanceUserSummary::OAIAssociateUserResponse_InstanceUserSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssociateUserResponse_InstanceUserSummary::OAIAssociateUserResponse_InstanceUserSummary() {
    this->initializeModel();
}

OAIAssociateUserResponse_InstanceUserSummary::~OAIAssociateUserResponse_InstanceUserSummary() {}

void OAIAssociateUserResponse_InstanceUserSummary::initializeModel() {

    m_association_date_isSet = false;
    m_association_date_isValid = false;

    m_disassociation_date_isSet = false;
    m_disassociation_date_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_identity_provider_isSet = false;
    m_identity_provider_isValid = false;

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIAssociateUserResponse_InstanceUserSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssociateUserResponse_InstanceUserSummary::fromJsonObject(QJsonObject json) {

    m_association_date_isValid = ::OpenAPI::fromJsonValue(m_association_date, json[QString("AssociationDate")]);
    m_association_date_isSet = !json[QString("AssociationDate")].isNull() && m_association_date_isValid;

    m_disassociation_date_isValid = ::OpenAPI::fromJsonValue(m_disassociation_date, json[QString("DisassociationDate")]);
    m_disassociation_date_isSet = !json[QString("DisassociationDate")].isNull() && m_disassociation_date_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("Domain")]);
    m_domain_isSet = !json[QString("Domain")].isNull() && m_domain_isValid;

    m_identity_provider_isValid = ::OpenAPI::fromJsonValue(m_identity_provider, json[QString("IdentityProvider")]);
    m_identity_provider_isSet = !json[QString("IdentityProvider")].isNull() && m_identity_provider_isValid;

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("InstanceId")]);
    m_instance_id_isSet = !json[QString("InstanceId")].isNull() && m_instance_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("StatusMessage")]);
    m_status_message_isSet = !json[QString("StatusMessage")].isNull() && m_status_message_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("Username")]);
    m_username_isSet = !json[QString("Username")].isNull() && m_username_isValid;
}

QString OAIAssociateUserResponse_InstanceUserSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssociateUserResponse_InstanceUserSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_association_date_isSet) {
        obj.insert(QString("AssociationDate"), ::OpenAPI::toJsonValue(m_association_date));
    }
    if (m_disassociation_date_isSet) {
        obj.insert(QString("DisassociationDate"), ::OpenAPI::toJsonValue(m_disassociation_date));
    }
    if (m_domain_isSet) {
        obj.insert(QString("Domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_identity_provider.isSet()) {
        obj.insert(QString("IdentityProvider"), ::OpenAPI::toJsonValue(m_identity_provider));
    }
    if (m_instance_id_isSet) {
        obj.insert(QString("InstanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("StatusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_username_isSet) {
        obj.insert(QString("Username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIAssociateUserResponse_InstanceUserSummary::getAssociationDate() const {
    return m_association_date;
}
void OAIAssociateUserResponse_InstanceUserSummary::setAssociationDate(const QString &association_date) {
    m_association_date = association_date;
    m_association_date_isSet = true;
}

bool OAIAssociateUserResponse_InstanceUserSummary::is_association_date_Set() const{
    return m_association_date_isSet;
}

bool OAIAssociateUserResponse_InstanceUserSummary::is_association_date_Valid() const{
    return m_association_date_isValid;
}

QString OAIAssociateUserResponse_InstanceUserSummary::getDisassociationDate() const {
    return m_disassociation_date;
}
void OAIAssociateUserResponse_InstanceUserSummary::setDisassociationDate(const QString &disassociation_date) {
    m_disassociation_date = disassociation_date;
    m_disassociation_date_isSet = true;
}

bool OAIAssociateUserResponse_InstanceUserSummary::is_disassociation_date_Set() const{
    return m_disassociation_date_isSet;
}

bool OAIAssociateUserResponse_InstanceUserSummary::is_disassociation_date_Valid() const{
    return m_disassociation_date_isValid;
}

QString OAIAssociateUserResponse_InstanceUserSummary::getDomain() const {
    return m_domain;
}
void OAIAssociateUserResponse_InstanceUserSummary::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIAssociateUserResponse_InstanceUserSummary::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIAssociateUserResponse_InstanceUserSummary::is_domain_Valid() const{
    return m_domain_isValid;
}

OAIInstanceUserSummary_IdentityProvider OAIAssociateUserResponse_InstanceUserSummary::getIdentityProvider() const {
    return m_identity_provider;
}
void OAIAssociateUserResponse_InstanceUserSummary::setIdentityProvider(const OAIInstanceUserSummary_IdentityProvider &identity_provider) {
    m_identity_provider = identity_provider;
    m_identity_provider_isSet = true;
}

bool OAIAssociateUserResponse_InstanceUserSummary::is_identity_provider_Set() const{
    return m_identity_provider_isSet;
}

bool OAIAssociateUserResponse_InstanceUserSummary::is_identity_provider_Valid() const{
    return m_identity_provider_isValid;
}

QString OAIAssociateUserResponse_InstanceUserSummary::getInstanceId() const {
    return m_instance_id;
}
void OAIAssociateUserResponse_InstanceUserSummary::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIAssociateUserResponse_InstanceUserSummary::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIAssociateUserResponse_InstanceUserSummary::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QString OAIAssociateUserResponse_InstanceUserSummary::getStatus() const {
    return m_status;
}
void OAIAssociateUserResponse_InstanceUserSummary::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAssociateUserResponse_InstanceUserSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAssociateUserResponse_InstanceUserSummary::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIAssociateUserResponse_InstanceUserSummary::getStatusMessage() const {
    return m_status_message;
}
void OAIAssociateUserResponse_InstanceUserSummary::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIAssociateUserResponse_InstanceUserSummary::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIAssociateUserResponse_InstanceUserSummary::is_status_message_Valid() const{
    return m_status_message_isValid;
}

QString OAIAssociateUserResponse_InstanceUserSummary::getUsername() const {
    return m_username;
}
void OAIAssociateUserResponse_InstanceUserSummary::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIAssociateUserResponse_InstanceUserSummary::is_username_Set() const{
    return m_username_isSet;
}

bool OAIAssociateUserResponse_InstanceUserSummary::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIAssociateUserResponse_InstanceUserSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_association_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disassociation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_provider.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssociateUserResponse_InstanceUserSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_identity_provider_isValid && m_instance_id_isValid && m_status_isValid && m_username_isValid && true;
}

} // namespace OpenAPI
