/**
 * AWS License Manager User Subscriptions
 * With License Manager, you can create user-based subscriptions to utilize licensed software with a per user subscription fee on Amazon EC2 instances.
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegisterIdentityProviderResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegisterIdentityProviderResponse::OAIRegisterIdentityProviderResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegisterIdentityProviderResponse::OAIRegisterIdentityProviderResponse() {
    this->initializeModel();
}

OAIRegisterIdentityProviderResponse::~OAIRegisterIdentityProviderResponse() {}

void OAIRegisterIdentityProviderResponse::initializeModel() {

    m_identity_provider_summary_isSet = false;
    m_identity_provider_summary_isValid = false;
}

void OAIRegisterIdentityProviderResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegisterIdentityProviderResponse::fromJsonObject(QJsonObject json) {

    m_identity_provider_summary_isValid = ::OpenAPI::fromJsonValue(m_identity_provider_summary, json[QString("IdentityProviderSummary")]);
    m_identity_provider_summary_isSet = !json[QString("IdentityProviderSummary")].isNull() && m_identity_provider_summary_isValid;
}

QString OAIRegisterIdentityProviderResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegisterIdentityProviderResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_identity_provider_summary.isSet()) {
        obj.insert(QString("IdentityProviderSummary"), ::OpenAPI::toJsonValue(m_identity_provider_summary));
    }
    return obj;
}

OAIDeregisterIdentityProviderResponse_IdentityProviderSummary OAIRegisterIdentityProviderResponse::getIdentityProviderSummary() const {
    return m_identity_provider_summary;
}
void OAIRegisterIdentityProviderResponse::setIdentityProviderSummary(const OAIDeregisterIdentityProviderResponse_IdentityProviderSummary &identity_provider_summary) {
    m_identity_provider_summary = identity_provider_summary;
    m_identity_provider_summary_isSet = true;
}

bool OAIRegisterIdentityProviderResponse::is_identity_provider_summary_Set() const{
    return m_identity_provider_summary_isSet;
}

bool OAIRegisterIdentityProviderResponse::is_identity_provider_summary_Valid() const{
    return m_identity_provider_summary_isValid;
}

bool OAIRegisterIdentityProviderResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identity_provider_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegisterIdentityProviderResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_identity_provider_summary_isValid && true;
}

} // namespace OpenAPI
