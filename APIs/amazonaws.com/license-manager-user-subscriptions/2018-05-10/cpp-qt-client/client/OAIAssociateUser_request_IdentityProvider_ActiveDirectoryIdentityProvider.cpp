/**
 * AWS License Manager User Subscriptions
 * With License Manager, you can create user-based subscriptions to utilize licensed software with a per user subscription fee on Amazon EC2 instances.
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssociateUser_request_IdentityProvider_ActiveDirectoryIdentityProvider.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssociateUser_request_IdentityProvider_ActiveDirectoryIdentityProvider::OAIAssociateUser_request_IdentityProvider_ActiveDirectoryIdentityProvider(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssociateUser_request_IdentityProvider_ActiveDirectoryIdentityProvider::OAIAssociateUser_request_IdentityProvider_ActiveDirectoryIdentityProvider() {
    this->initializeModel();
}

OAIAssociateUser_request_IdentityProvider_ActiveDirectoryIdentityProvider::~OAIAssociateUser_request_IdentityProvider_ActiveDirectoryIdentityProvider() {}

void OAIAssociateUser_request_IdentityProvider_ActiveDirectoryIdentityProvider::initializeModel() {

    m_directory_id_isSet = false;
    m_directory_id_isValid = false;
}

void OAIAssociateUser_request_IdentityProvider_ActiveDirectoryIdentityProvider::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssociateUser_request_IdentityProvider_ActiveDirectoryIdentityProvider::fromJsonObject(QJsonObject json) {

    m_directory_id_isValid = ::OpenAPI::fromJsonValue(m_directory_id, json[QString("DirectoryId")]);
    m_directory_id_isSet = !json[QString("DirectoryId")].isNull() && m_directory_id_isValid;
}

QString OAIAssociateUser_request_IdentityProvider_ActiveDirectoryIdentityProvider::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssociateUser_request_IdentityProvider_ActiveDirectoryIdentityProvider::asJsonObject() const {
    QJsonObject obj;
    if (m_directory_id_isSet) {
        obj.insert(QString("DirectoryId"), ::OpenAPI::toJsonValue(m_directory_id));
    }
    return obj;
}

QString OAIAssociateUser_request_IdentityProvider_ActiveDirectoryIdentityProvider::getDirectoryId() const {
    return m_directory_id;
}
void OAIAssociateUser_request_IdentityProvider_ActiveDirectoryIdentityProvider::setDirectoryId(const QString &directory_id) {
    m_directory_id = directory_id;
    m_directory_id_isSet = true;
}

bool OAIAssociateUser_request_IdentityProvider_ActiveDirectoryIdentityProvider::is_directory_id_Set() const{
    return m_directory_id_isSet;
}

bool OAIAssociateUser_request_IdentityProvider_ActiveDirectoryIdentityProvider::is_directory_id_Valid() const{
    return m_directory_id_isValid;
}

bool OAIAssociateUser_request_IdentityProvider_ActiveDirectoryIdentityProvider::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_directory_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssociateUser_request_IdentityProvider_ActiveDirectoryIdentityProvider::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
