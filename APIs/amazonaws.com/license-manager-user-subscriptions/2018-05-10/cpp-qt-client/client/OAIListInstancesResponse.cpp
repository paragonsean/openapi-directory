/**
 * AWS License Manager User Subscriptions
 * With License Manager, you can create user-based subscriptions to utilize licensed software with a per user subscription fee on Amazon EC2 instances.
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListInstancesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListInstancesResponse::OAIListInstancesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListInstancesResponse::OAIListInstancesResponse() {
    this->initializeModel();
}

OAIListInstancesResponse::~OAIListInstancesResponse() {}

void OAIListInstancesResponse::initializeModel() {

    m_instance_summaries_isSet = false;
    m_instance_summaries_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListInstancesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListInstancesResponse::fromJsonObject(QJsonObject json) {

    m_instance_summaries_isValid = ::OpenAPI::fromJsonValue(m_instance_summaries, json[QString("InstanceSummaries")]);
    m_instance_summaries_isSet = !json[QString("InstanceSummaries")].isNull() && m_instance_summaries_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListInstancesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListInstancesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_summaries.isSet()) {
        obj.insert(QString("InstanceSummaries"), ::OpenAPI::toJsonValue(m_instance_summaries));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListInstancesResponse::getInstanceSummaries() const {
    return m_instance_summaries;
}
void OAIListInstancesResponse::setInstanceSummaries(const QList &instance_summaries) {
    m_instance_summaries = instance_summaries;
    m_instance_summaries_isSet = true;
}

bool OAIListInstancesResponse::is_instance_summaries_Set() const{
    return m_instance_summaries_isSet;
}

bool OAIListInstancesResponse::is_instance_summaries_Valid() const{
    return m_instance_summaries_isValid;
}

QString OAIListInstancesResponse::getNextToken() const {
    return m_next_token;
}
void OAIListInstancesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListInstancesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListInstancesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListInstancesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_summaries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListInstancesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
