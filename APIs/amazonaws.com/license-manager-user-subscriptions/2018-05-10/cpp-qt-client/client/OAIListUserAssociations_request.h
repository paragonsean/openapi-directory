/**
 * AWS License Manager User Subscriptions
 * With License Manager, you can create user-based subscriptions to utilize licensed software with a per user subscription fee on Amazon EC2 instances.
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIListUserAssociations_request.h
 *
 * 
 */

#ifndef OAIListUserAssociations_request_H
#define OAIListUserAssociations_request_H

#include <QJsonObject>

#include "OAIAssociateUser_request_IdentityProvider.h"
#include "OAIFilter.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIFilter;
class OAIAssociateUser_request_IdentityProvider;

class OAIListUserAssociations_request : public OAIObject {
public:
    OAIListUserAssociations_request();
    OAIListUserAssociations_request(QString json);
    ~OAIListUserAssociations_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIFilter> getFilters() const;
    void setFilters(const QList<OAIFilter> &filters);
    bool is_filters_Set() const;
    bool is_filters_Valid() const;

    OAIAssociateUser_request_IdentityProvider getIdentityProvider() const;
    void setIdentityProvider(const OAIAssociateUser_request_IdentityProvider &identity_provider);
    bool is_identity_provider_Set() const;
    bool is_identity_provider_Valid() const;

    QString getInstanceId() const;
    void setInstanceId(const QString &instance_id);
    bool is_instance_id_Set() const;
    bool is_instance_id_Valid() const;

    qint32 getMaxResults() const;
    void setMaxResults(const qint32 &max_results);
    bool is_max_results_Set() const;
    bool is_max_results_Valid() const;

    QString getNextToken() const;
    void setNextToken(const QString &next_token);
    bool is_next_token_Set() const;
    bool is_next_token_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIFilter> m_filters;
    bool m_filters_isSet;
    bool m_filters_isValid;

    OAIAssociateUser_request_IdentityProvider m_identity_provider;
    bool m_identity_provider_isSet;
    bool m_identity_provider_isValid;

    QString m_instance_id;
    bool m_instance_id_isSet;
    bool m_instance_id_isValid;

    qint32 m_max_results;
    bool m_max_results_isSet;
    bool m_max_results_isValid;

    QString m_next_token;
    bool m_next_token_isSet;
    bool m_next_token_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIListUserAssociations_request)

#endif // OAIListUserAssociations_request_H
