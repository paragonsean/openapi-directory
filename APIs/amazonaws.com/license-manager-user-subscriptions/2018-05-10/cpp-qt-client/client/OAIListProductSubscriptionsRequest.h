/**
 * AWS License Manager User Subscriptions
 * With License Manager, you can create user-based subscriptions to utilize licensed software with a per user subscription fee on Amazon EC2 instances.
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIListProductSubscriptionsRequest.h
 *
 * 
 */

#ifndef OAIListProductSubscriptionsRequest_H
#define OAIListProductSubscriptionsRequest_H

#include <QJsonObject>

#include "OAIInstanceUserSummary_IdentityProvider.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIInstanceUserSummary_IdentityProvider;

class OAIListProductSubscriptionsRequest : public OAIObject {
public:
    OAIListProductSubscriptionsRequest();
    OAIListProductSubscriptionsRequest(QString json);
    ~OAIListProductSubscriptionsRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getFilters() const;
    void setFilters(const QList &filters);
    bool is_filters_Set() const;
    bool is_filters_Valid() const;

    OAIInstanceUserSummary_IdentityProvider getIdentityProvider() const;
    void setIdentityProvider(const OAIInstanceUserSummary_IdentityProvider &identity_provider);
    bool is_identity_provider_Set() const;
    bool is_identity_provider_Valid() const;

    qint32 getMaxResults() const;
    void setMaxResults(const qint32 &max_results);
    bool is_max_results_Set() const;
    bool is_max_results_Valid() const;

    QString getNextToken() const;
    void setNextToken(const QString &next_token);
    bool is_next_token_Set() const;
    bool is_next_token_Valid() const;

    QString getProduct() const;
    void setProduct(const QString &product);
    bool is_product_Set() const;
    bool is_product_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_filters;
    bool m_filters_isSet;
    bool m_filters_isValid;

    OAIInstanceUserSummary_IdentityProvider m_identity_provider;
    bool m_identity_provider_isSet;
    bool m_identity_provider_isValid;

    qint32 m_max_results;
    bool m_max_results_isSet;
    bool m_max_results_isValid;

    QString m_next_token;
    bool m_next_token_isSet;
    bool m_next_token_isValid;

    QString m_product;
    bool m_product_isSet;
    bool m_product_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIListProductSubscriptionsRequest)

#endif // OAIListProductSubscriptionsRequest_H
