/**
 * AWS License Manager User Subscriptions
 * With License Manager, you can create user-based subscriptions to utilize licensed software with a per user subscription fee on Amazon EC2 instances.
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegisterIdentityProvider_request_Settings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegisterIdentityProvider_request_Settings::OAIRegisterIdentityProvider_request_Settings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegisterIdentityProvider_request_Settings::OAIRegisterIdentityProvider_request_Settings() {
    this->initializeModel();
}

OAIRegisterIdentityProvider_request_Settings::~OAIRegisterIdentityProvider_request_Settings() {}

void OAIRegisterIdentityProvider_request_Settings::initializeModel() {

    m_security_group_id_isSet = false;
    m_security_group_id_isValid = false;

    m_subnets_isSet = false;
    m_subnets_isValid = false;
}

void OAIRegisterIdentityProvider_request_Settings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegisterIdentityProvider_request_Settings::fromJsonObject(QJsonObject json) {

    m_security_group_id_isValid = ::OpenAPI::fromJsonValue(m_security_group_id, json[QString("SecurityGroupId")]);
    m_security_group_id_isSet = !json[QString("SecurityGroupId")].isNull() && m_security_group_id_isValid;

    m_subnets_isValid = ::OpenAPI::fromJsonValue(m_subnets, json[QString("Subnets")]);
    m_subnets_isSet = !json[QString("Subnets")].isNull() && m_subnets_isValid;
}

QString OAIRegisterIdentityProvider_request_Settings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegisterIdentityProvider_request_Settings::asJsonObject() const {
    QJsonObject obj;
    if (m_security_group_id_isSet) {
        obj.insert(QString("SecurityGroupId"), ::OpenAPI::toJsonValue(m_security_group_id));
    }
    if (m_subnets.isSet()) {
        obj.insert(QString("Subnets"), ::OpenAPI::toJsonValue(m_subnets));
    }
    return obj;
}

QString OAIRegisterIdentityProvider_request_Settings::getSecurityGroupId() const {
    return m_security_group_id;
}
void OAIRegisterIdentityProvider_request_Settings::setSecurityGroupId(const QString &security_group_id) {
    m_security_group_id = security_group_id;
    m_security_group_id_isSet = true;
}

bool OAIRegisterIdentityProvider_request_Settings::is_security_group_id_Set() const{
    return m_security_group_id_isSet;
}

bool OAIRegisterIdentityProvider_request_Settings::is_security_group_id_Valid() const{
    return m_security_group_id_isValid;
}

QList OAIRegisterIdentityProvider_request_Settings::getSubnets() const {
    return m_subnets;
}
void OAIRegisterIdentityProvider_request_Settings::setSubnets(const QList &subnets) {
    m_subnets = subnets;
    m_subnets_isSet = true;
}

bool OAIRegisterIdentityProvider_request_Settings::is_subnets_Set() const{
    return m_subnets_isSet;
}

bool OAIRegisterIdentityProvider_request_Settings::is_subnets_Valid() const{
    return m_subnets_isValid;
}

bool OAIRegisterIdentityProvider_request_Settings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_security_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnets.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegisterIdentityProvider_request_Settings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
