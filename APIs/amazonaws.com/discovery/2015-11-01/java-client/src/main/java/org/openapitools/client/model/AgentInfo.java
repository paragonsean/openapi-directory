/*
 * AWS Application Discovery Service
 * <fullname>Amazon Web Services Application Discovery Service</fullname> <p>Amazon Web Services Application Discovery Service (Application Discovery Service) helps you plan application migration projects. It automatically identifies servers, virtual machines (VMs), and network dependencies in your on-premises data centers. For more information, see the <a href=\"http://aws.amazon.com/application-discovery/faqs/\">Amazon Web Services Application Discovery Service FAQ</a>. </p> <p>Application Discovery Service offers three ways of performing discovery and collecting data about your on-premises servers:</p> <ul> <li> <p> <b>Agentless discovery</b> using Amazon Web Services Application Discovery Service Agentless Collector (Agentless Collector), which doesn't require you to install an agent on each host.</p> <ul> <li> <p>Agentless Collector gathers server information regardless of the operating systems, which minimizes the time required for initial on-premises infrastructure assessment.</p> </li> <li> <p>Agentless Collector doesn't collect information about network dependencies, only agent-based discovery collects that information. </p> </li> </ul> </li> </ul> <ul> <li> <p> <b>Agent-based discovery</b> using the Amazon Web Services Application Discovery Agent (Application Discovery Agent) collects a richer set of data than agentless discovery, which you install on one or more hosts in your data center.</p> <ul> <li> <p> The agent captures infrastructure and application information, including an inventory of running processes, system performance information, resource utilization, and network dependencies.</p> </li> <li> <p>The information collected by agents is secured at rest and in transit to the Application Discovery Service database in the Amazon Web Services cloud. For more information, see <a href=\"https://docs.aws.amazon.com/application-discovery/latest/userguide/discovery-agent.html\">Amazon Web Services Application Discovery Agent</a>.</p> </li> </ul> </li> </ul> <ul> <li> <p> <b>Amazon Web Services Partner Network (APN) solutions</b> integrate with Application Discovery Service, enabling you to import details of your on-premises environment directly into Amazon Web Services Migration Hub (Migration Hub) without using Agentless Collector or Application Discovery Agent.</p> <ul> <li> <p>Third-party application discovery tools can query Amazon Web Services Application Discovery Service, and they can write to the Application Discovery Service database using the public API.</p> </li> <li> <p>In this way, you can import data into Migration Hub and view it, so that you can associate applications with servers and track migrations.</p> </li> </ul> </li> </ul> <p> <b>Working With This Guide</b> </p> <p>This API reference provides descriptions, syntax, and usage examples for each of the actions and data types for Application Discovery Service. The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <note> <ul> <li> <p>Remember that you must set your Migration Hub home Region before you call any of these APIs.</p> </li> <li> <p>You must make API calls for write actions (create, notify, associate, disassociate, import, or put) while in your home Region, or a <code>HomeRegionNotSetException</code> error is returned.</p> </li> <li> <p>API calls for read actions (list, describe, stop, and delete) are permitted outside of your home Region.</p> </li> <li> <p>Although it is unlikely, the Migration Hub home Region could change. If you call APIs outside the home Region, an <code>InvalidInputException</code> is returned.</p> </li> <li> <p>You must call <code>GetHomeRegion</code> to obtain the latest Migration Hub home Region.</p> </li> </ul> </note> <p>This guide is intended for use with the <a href=\"https://docs.aws.amazon.com/application-discovery/latest/userguide/\">Amazon Web Services Application Discovery Service User Guide</a>.</p> <important> <p>All data is handled according to the <a href=\"https://aws.amazon.com/privacy/\">Amazon Web Services Privacy Policy</a>. You can operate Application Discovery Service offline to inspect collected data before it is shared with the service.</p> </important>
 *
 * The version of the OpenAPI document: 2015-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AgentStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about agents associated with the userâ€™s Amazon Web Services account. Information includes agent IDs, IP addresses, media access control (MAC) addresses, agent or collector status, hostname where the agent resides, and agent version for each agent.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:27.087008-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AgentInfo {
  public static final String SERIALIZED_NAME_AGENT_ID = "agentId";
  @SerializedName(SERIALIZED_NAME_AGENT_ID)
  private String agentId;

  public static final String SERIALIZED_NAME_HOST_NAME = "hostName";
  @SerializedName(SERIALIZED_NAME_HOST_NAME)
  private String hostName;

  public static final String SERIALIZED_NAME_AGENT_NETWORK_INFO_LIST = "agentNetworkInfoList";
  @SerializedName(SERIALIZED_NAME_AGENT_NETWORK_INFO_LIST)
  private List agentNetworkInfoList;

  public static final String SERIALIZED_NAME_CONNECTOR_ID = "connectorId";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_ID)
  private String connectorId;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_HEALTH = "health";
  @SerializedName(SERIALIZED_NAME_HEALTH)
  private AgentStatus health;

  public static final String SERIALIZED_NAME_LAST_HEALTH_PING_TIME = "lastHealthPingTime";
  @SerializedName(SERIALIZED_NAME_LAST_HEALTH_PING_TIME)
  private String lastHealthPingTime;

  public static final String SERIALIZED_NAME_COLLECTION_STATUS = "collectionStatus";
  @SerializedName(SERIALIZED_NAME_COLLECTION_STATUS)
  private String collectionStatus;

  public static final String SERIALIZED_NAME_AGENT_TYPE = "agentType";
  @SerializedName(SERIALIZED_NAME_AGENT_TYPE)
  private String agentType;

  public static final String SERIALIZED_NAME_REGISTERED_TIME = "registeredTime";
  @SerializedName(SERIALIZED_NAME_REGISTERED_TIME)
  private String registeredTime;

  public AgentInfo() {
  }

  public AgentInfo agentId(String agentId) {
    this.agentId = agentId;
    return this;
  }

  /**
   * Get agentId
   * @return agentId
   */
  @javax.annotation.Nullable
  public String getAgentId() {
    return agentId;
  }

  public void setAgentId(String agentId) {
    this.agentId = agentId;
  }


  public AgentInfo hostName(String hostName) {
    this.hostName = hostName;
    return this;
  }

  /**
   * Get hostName
   * @return hostName
   */
  @javax.annotation.Nullable
  public String getHostName() {
    return hostName;
  }

  public void setHostName(String hostName) {
    this.hostName = hostName;
  }


  public AgentInfo agentNetworkInfoList(List agentNetworkInfoList) {
    this.agentNetworkInfoList = agentNetworkInfoList;
    return this;
  }

  /**
   * Get agentNetworkInfoList
   * @return agentNetworkInfoList
   */
  @javax.annotation.Nullable
  public List getAgentNetworkInfoList() {
    return agentNetworkInfoList;
  }

  public void setAgentNetworkInfoList(List agentNetworkInfoList) {
    this.agentNetworkInfoList = agentNetworkInfoList;
  }


  public AgentInfo connectorId(String connectorId) {
    this.connectorId = connectorId;
    return this;
  }

  /**
   * Get connectorId
   * @return connectorId
   */
  @javax.annotation.Nullable
  public String getConnectorId() {
    return connectorId;
  }

  public void setConnectorId(String connectorId) {
    this.connectorId = connectorId;
  }


  public AgentInfo version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public AgentInfo health(AgentStatus health) {
    this.health = health;
    return this;
  }

  /**
   * Get health
   * @return health
   */
  @javax.annotation.Nullable
  public AgentStatus getHealth() {
    return health;
  }

  public void setHealth(AgentStatus health) {
    this.health = health;
  }


  public AgentInfo lastHealthPingTime(String lastHealthPingTime) {
    this.lastHealthPingTime = lastHealthPingTime;
    return this;
  }

  /**
   * Get lastHealthPingTime
   * @return lastHealthPingTime
   */
  @javax.annotation.Nullable
  public String getLastHealthPingTime() {
    return lastHealthPingTime;
  }

  public void setLastHealthPingTime(String lastHealthPingTime) {
    this.lastHealthPingTime = lastHealthPingTime;
  }


  public AgentInfo collectionStatus(String collectionStatus) {
    this.collectionStatus = collectionStatus;
    return this;
  }

  /**
   * Get collectionStatus
   * @return collectionStatus
   */
  @javax.annotation.Nullable
  public String getCollectionStatus() {
    return collectionStatus;
  }

  public void setCollectionStatus(String collectionStatus) {
    this.collectionStatus = collectionStatus;
  }


  public AgentInfo agentType(String agentType) {
    this.agentType = agentType;
    return this;
  }

  /**
   * Get agentType
   * @return agentType
   */
  @javax.annotation.Nullable
  public String getAgentType() {
    return agentType;
  }

  public void setAgentType(String agentType) {
    this.agentType = agentType;
  }


  public AgentInfo registeredTime(String registeredTime) {
    this.registeredTime = registeredTime;
    return this;
  }

  /**
   * Get registeredTime
   * @return registeredTime
   */
  @javax.annotation.Nullable
  public String getRegisteredTime() {
    return registeredTime;
  }

  public void setRegisteredTime(String registeredTime) {
    this.registeredTime = registeredTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AgentInfo agentInfo = (AgentInfo) o;
    return Objects.equals(this.agentId, agentInfo.agentId) &&
        Objects.equals(this.hostName, agentInfo.hostName) &&
        Objects.equals(this.agentNetworkInfoList, agentInfo.agentNetworkInfoList) &&
        Objects.equals(this.connectorId, agentInfo.connectorId) &&
        Objects.equals(this.version, agentInfo.version) &&
        Objects.equals(this.health, agentInfo.health) &&
        Objects.equals(this.lastHealthPingTime, agentInfo.lastHealthPingTime) &&
        Objects.equals(this.collectionStatus, agentInfo.collectionStatus) &&
        Objects.equals(this.agentType, agentInfo.agentType) &&
        Objects.equals(this.registeredTime, agentInfo.registeredTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agentId, hostName, agentNetworkInfoList, connectorId, version, health, lastHealthPingTime, collectionStatus, agentType, registeredTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AgentInfo {\n");
    sb.append("    agentId: ").append(toIndentedString(agentId)).append("\n");
    sb.append("    hostName: ").append(toIndentedString(hostName)).append("\n");
    sb.append("    agentNetworkInfoList: ").append(toIndentedString(agentNetworkInfoList)).append("\n");
    sb.append("    connectorId: ").append(toIndentedString(connectorId)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    health: ").append(toIndentedString(health)).append("\n");
    sb.append("    lastHealthPingTime: ").append(toIndentedString(lastHealthPingTime)).append("\n");
    sb.append("    collectionStatus: ").append(toIndentedString(collectionStatus)).append("\n");
    sb.append("    agentType: ").append(toIndentedString(agentType)).append("\n");
    sb.append("    registeredTime: ").append(toIndentedString(registeredTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agentId");
    openapiFields.add("hostName");
    openapiFields.add("agentNetworkInfoList");
    openapiFields.add("connectorId");
    openapiFields.add("version");
    openapiFields.add("health");
    openapiFields.add("lastHealthPingTime");
    openapiFields.add("collectionStatus");
    openapiFields.add("agentType");
    openapiFields.add("registeredTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AgentInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AgentInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AgentInfo is not found in the empty JSON string", AgentInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AgentInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AgentInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `agentId`
      if (jsonObj.get("agentId") != null && !jsonObj.get("agentId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("agentId"));
      }
      // validate the optional field `hostName`
      if (jsonObj.get("hostName") != null && !jsonObj.get("hostName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("hostName"));
      }
      // validate the optional field `agentNetworkInfoList`
      if (jsonObj.get("agentNetworkInfoList") != null && !jsonObj.get("agentNetworkInfoList").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("agentNetworkInfoList"));
      }
      // validate the optional field `connectorId`
      if (jsonObj.get("connectorId") != null && !jsonObj.get("connectorId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("connectorId"));
      }
      // validate the optional field `version`
      if (jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("version"));
      }
      // validate the optional field `health`
      if (jsonObj.get("health") != null && !jsonObj.get("health").isJsonNull()) {
        AgentStatus.validateJsonElement(jsonObj.get("health"));
      }
      // validate the optional field `lastHealthPingTime`
      if (jsonObj.get("lastHealthPingTime") != null && !jsonObj.get("lastHealthPingTime").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("lastHealthPingTime"));
      }
      // validate the optional field `collectionStatus`
      if (jsonObj.get("collectionStatus") != null && !jsonObj.get("collectionStatus").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("collectionStatus"));
      }
      // validate the optional field `agentType`
      if (jsonObj.get("agentType") != null && !jsonObj.get("agentType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("agentType"));
      }
      // validate the optional field `registeredTime`
      if (jsonObj.get("registeredTime") != null && !jsonObj.get("registeredTime").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("registeredTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AgentInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AgentInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AgentInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AgentInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<AgentInfo>() {
           @Override
           public void write(JsonWriter out, AgentInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AgentInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AgentInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AgentInfo
   * @throws IOException if the JSON string is invalid with respect to AgentInfo
   */
  public static AgentInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AgentInfo.class);
  }

  /**
   * Convert an instance of AgentInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

