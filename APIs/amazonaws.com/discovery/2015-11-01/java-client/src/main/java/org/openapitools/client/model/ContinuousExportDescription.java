/*
 * AWS Application Discovery Service
 * <fullname>Amazon Web Services Application Discovery Service</fullname> <p>Amazon Web Services Application Discovery Service (Application Discovery Service) helps you plan application migration projects. It automatically identifies servers, virtual machines (VMs), and network dependencies in your on-premises data centers. For more information, see the <a href=\"http://aws.amazon.com/application-discovery/faqs/\">Amazon Web Services Application Discovery Service FAQ</a>. </p> <p>Application Discovery Service offers three ways of performing discovery and collecting data about your on-premises servers:</p> <ul> <li> <p> <b>Agentless discovery</b> using Amazon Web Services Application Discovery Service Agentless Collector (Agentless Collector), which doesn't require you to install an agent on each host.</p> <ul> <li> <p>Agentless Collector gathers server information regardless of the operating systems, which minimizes the time required for initial on-premises infrastructure assessment.</p> </li> <li> <p>Agentless Collector doesn't collect information about network dependencies, only agent-based discovery collects that information. </p> </li> </ul> </li> </ul> <ul> <li> <p> <b>Agent-based discovery</b> using the Amazon Web Services Application Discovery Agent (Application Discovery Agent) collects a richer set of data than agentless discovery, which you install on one or more hosts in your data center.</p> <ul> <li> <p> The agent captures infrastructure and application information, including an inventory of running processes, system performance information, resource utilization, and network dependencies.</p> </li> <li> <p>The information collected by agents is secured at rest and in transit to the Application Discovery Service database in the Amazon Web Services cloud. For more information, see <a href=\"https://docs.aws.amazon.com/application-discovery/latest/userguide/discovery-agent.html\">Amazon Web Services Application Discovery Agent</a>.</p> </li> </ul> </li> </ul> <ul> <li> <p> <b>Amazon Web Services Partner Network (APN) solutions</b> integrate with Application Discovery Service, enabling you to import details of your on-premises environment directly into Amazon Web Services Migration Hub (Migration Hub) without using Agentless Collector or Application Discovery Agent.</p> <ul> <li> <p>Third-party application discovery tools can query Amazon Web Services Application Discovery Service, and they can write to the Application Discovery Service database using the public API.</p> </li> <li> <p>In this way, you can import data into Migration Hub and view it, so that you can associate applications with servers and track migrations.</p> </li> </ul> </li> </ul> <p> <b>Working With This Guide</b> </p> <p>This API reference provides descriptions, syntax, and usage examples for each of the actions and data types for Application Discovery Service. The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <note> <ul> <li> <p>Remember that you must set your Migration Hub home Region before you call any of these APIs.</p> </li> <li> <p>You must make API calls for write actions (create, notify, associate, disassociate, import, or put) while in your home Region, or a <code>HomeRegionNotSetException</code> error is returned.</p> </li> <li> <p>API calls for read actions (list, describe, stop, and delete) are permitted outside of your home Region.</p> </li> <li> <p>Although it is unlikely, the Migration Hub home Region could change. If you call APIs outside the home Region, an <code>InvalidInputException</code> is returned.</p> </li> <li> <p>You must call <code>GetHomeRegion</code> to obtain the latest Migration Hub home Region.</p> </li> </ul> </note> <p>This guide is intended for use with the <a href=\"https://docs.aws.amazon.com/application-discovery/latest/userguide/\">Amazon Web Services Application Discovery Service User Guide</a>.</p> <important> <p>All data is handled according to the <a href=\"https://aws.amazon.com/privacy/\">Amazon Web Services Privacy Policy</a>. You can operate Application Discovery Service offline to inspect collected data before it is shared with the service.</p> </important>
 *
 * The version of the OpenAPI document: 2015-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.ContinuousExportStatus;
import org.openapitools.client.model.DataSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A list of continuous export descriptions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:27.087008-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContinuousExportDescription {
  public static final String SERIALIZED_NAME_EXPORT_ID = "exportId";
  @SerializedName(SERIALIZED_NAME_EXPORT_ID)
  private String exportId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ContinuousExportStatus status;

  public static final String SERIALIZED_NAME_STATUS_DETAIL = "statusDetail";
  @SerializedName(SERIALIZED_NAME_STATUS_DETAIL)
  private String statusDetail;

  public static final String SERIALIZED_NAME_S3_BUCKET = "s3Bucket";
  @SerializedName(SERIALIZED_NAME_S3_BUCKET)
  private String s3Bucket;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STOP_TIME = "stopTime";
  @SerializedName(SERIALIZED_NAME_STOP_TIME)
  private OffsetDateTime stopTime;

  public static final String SERIALIZED_NAME_DATA_SOURCE = "dataSource";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE)
  private DataSource dataSource;

  public static final String SERIALIZED_NAME_SCHEMA_STORAGE_CONFIG = "schemaStorageConfig";
  @SerializedName(SERIALIZED_NAME_SCHEMA_STORAGE_CONFIG)
  private Map schemaStorageConfig;

  public ContinuousExportDescription() {
  }

  public ContinuousExportDescription exportId(String exportId) {
    this.exportId = exportId;
    return this;
  }

  /**
   * Get exportId
   * @return exportId
   */
  @javax.annotation.Nullable
  public String getExportId() {
    return exportId;
  }

  public void setExportId(String exportId) {
    this.exportId = exportId;
  }


  public ContinuousExportDescription status(ContinuousExportStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ContinuousExportStatus getStatus() {
    return status;
  }

  public void setStatus(ContinuousExportStatus status) {
    this.status = status;
  }


  public ContinuousExportDescription statusDetail(String statusDetail) {
    this.statusDetail = statusDetail;
    return this;
  }

  /**
   * Get statusDetail
   * @return statusDetail
   */
  @javax.annotation.Nullable
  public String getStatusDetail() {
    return statusDetail;
  }

  public void setStatusDetail(String statusDetail) {
    this.statusDetail = statusDetail;
  }


  public ContinuousExportDescription s3Bucket(String s3Bucket) {
    this.s3Bucket = s3Bucket;
    return this;
  }

  /**
   * Get s3Bucket
   * @return s3Bucket
   */
  @javax.annotation.Nullable
  public String getS3Bucket() {
    return s3Bucket;
  }

  public void setS3Bucket(String s3Bucket) {
    this.s3Bucket = s3Bucket;
  }


  public ContinuousExportDescription startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public ContinuousExportDescription stopTime(OffsetDateTime stopTime) {
    this.stopTime = stopTime;
    return this;
  }

  /**
   * Get stopTime
   * @return stopTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStopTime() {
    return stopTime;
  }

  public void setStopTime(OffsetDateTime stopTime) {
    this.stopTime = stopTime;
  }


  public ContinuousExportDescription dataSource(DataSource dataSource) {
    this.dataSource = dataSource;
    return this;
  }

  /**
   * Get dataSource
   * @return dataSource
   */
  @javax.annotation.Nullable
  public DataSource getDataSource() {
    return dataSource;
  }

  public void setDataSource(DataSource dataSource) {
    this.dataSource = dataSource;
  }


  public ContinuousExportDescription schemaStorageConfig(Map schemaStorageConfig) {
    this.schemaStorageConfig = schemaStorageConfig;
    return this;
  }

  /**
   * Get schemaStorageConfig
   * @return schemaStorageConfig
   */
  @javax.annotation.Nullable
  public Map getSchemaStorageConfig() {
    return schemaStorageConfig;
  }

  public void setSchemaStorageConfig(Map schemaStorageConfig) {
    this.schemaStorageConfig = schemaStorageConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContinuousExportDescription continuousExportDescription = (ContinuousExportDescription) o;
    return Objects.equals(this.exportId, continuousExportDescription.exportId) &&
        Objects.equals(this.status, continuousExportDescription.status) &&
        Objects.equals(this.statusDetail, continuousExportDescription.statusDetail) &&
        Objects.equals(this.s3Bucket, continuousExportDescription.s3Bucket) &&
        Objects.equals(this.startTime, continuousExportDescription.startTime) &&
        Objects.equals(this.stopTime, continuousExportDescription.stopTime) &&
        Objects.equals(this.dataSource, continuousExportDescription.dataSource) &&
        Objects.equals(this.schemaStorageConfig, continuousExportDescription.schemaStorageConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exportId, status, statusDetail, s3Bucket, startTime, stopTime, dataSource, schemaStorageConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContinuousExportDescription {\n");
    sb.append("    exportId: ").append(toIndentedString(exportId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusDetail: ").append(toIndentedString(statusDetail)).append("\n");
    sb.append("    s3Bucket: ").append(toIndentedString(s3Bucket)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    stopTime: ").append(toIndentedString(stopTime)).append("\n");
    sb.append("    dataSource: ").append(toIndentedString(dataSource)).append("\n");
    sb.append("    schemaStorageConfig: ").append(toIndentedString(schemaStorageConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("exportId");
    openapiFields.add("status");
    openapiFields.add("statusDetail");
    openapiFields.add("s3Bucket");
    openapiFields.add("startTime");
    openapiFields.add("stopTime");
    openapiFields.add("dataSource");
    openapiFields.add("schemaStorageConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContinuousExportDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContinuousExportDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContinuousExportDescription is not found in the empty JSON string", ContinuousExportDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContinuousExportDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContinuousExportDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `exportId`
      if (jsonObj.get("exportId") != null && !jsonObj.get("exportId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("exportId"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ContinuousExportStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `statusDetail`
      if (jsonObj.get("statusDetail") != null && !jsonObj.get("statusDetail").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("statusDetail"));
      }
      // validate the optional field `s3Bucket`
      if (jsonObj.get("s3Bucket") != null && !jsonObj.get("s3Bucket").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("s3Bucket"));
      }
      // validate the optional field `startTime`
      if (jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("startTime"));
      }
      // validate the optional field `stopTime`
      if (jsonObj.get("stopTime") != null && !jsonObj.get("stopTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("stopTime"));
      }
      // validate the optional field `dataSource`
      if (jsonObj.get("dataSource") != null && !jsonObj.get("dataSource").isJsonNull()) {
        DataSource.validateJsonElement(jsonObj.get("dataSource"));
      }
      // validate the optional field `schemaStorageConfig`
      if (jsonObj.get("schemaStorageConfig") != null && !jsonObj.get("schemaStorageConfig").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("schemaStorageConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContinuousExportDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContinuousExportDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContinuousExportDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContinuousExportDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<ContinuousExportDescription>() {
           @Override
           public void write(JsonWriter out, ContinuousExportDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContinuousExportDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContinuousExportDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContinuousExportDescription
   * @throws IOException if the JSON string is invalid with respect to ContinuousExportDescription
   */
  public static ContinuousExportDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContinuousExportDescription.class);
  }

  /**
   * Convert an instance of ContinuousExportDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

