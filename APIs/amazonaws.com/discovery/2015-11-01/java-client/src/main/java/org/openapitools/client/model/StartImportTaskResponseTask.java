/*
 * AWS Application Discovery Service
 * <fullname>Amazon Web Services Application Discovery Service</fullname> <p>Amazon Web Services Application Discovery Service (Application Discovery Service) helps you plan application migration projects. It automatically identifies servers, virtual machines (VMs), and network dependencies in your on-premises data centers. For more information, see the <a href=\"http://aws.amazon.com/application-discovery/faqs/\">Amazon Web Services Application Discovery Service FAQ</a>. </p> <p>Application Discovery Service offers three ways of performing discovery and collecting data about your on-premises servers:</p> <ul> <li> <p> <b>Agentless discovery</b> using Amazon Web Services Application Discovery Service Agentless Collector (Agentless Collector), which doesn't require you to install an agent on each host.</p> <ul> <li> <p>Agentless Collector gathers server information regardless of the operating systems, which minimizes the time required for initial on-premises infrastructure assessment.</p> </li> <li> <p>Agentless Collector doesn't collect information about network dependencies, only agent-based discovery collects that information. </p> </li> </ul> </li> </ul> <ul> <li> <p> <b>Agent-based discovery</b> using the Amazon Web Services Application Discovery Agent (Application Discovery Agent) collects a richer set of data than agentless discovery, which you install on one or more hosts in your data center.</p> <ul> <li> <p> The agent captures infrastructure and application information, including an inventory of running processes, system performance information, resource utilization, and network dependencies.</p> </li> <li> <p>The information collected by agents is secured at rest and in transit to the Application Discovery Service database in the Amazon Web Services cloud. For more information, see <a href=\"https://docs.aws.amazon.com/application-discovery/latest/userguide/discovery-agent.html\">Amazon Web Services Application Discovery Agent</a>.</p> </li> </ul> </li> </ul> <ul> <li> <p> <b>Amazon Web Services Partner Network (APN) solutions</b> integrate with Application Discovery Service, enabling you to import details of your on-premises environment directly into Amazon Web Services Migration Hub (Migration Hub) without using Agentless Collector or Application Discovery Agent.</p> <ul> <li> <p>Third-party application discovery tools can query Amazon Web Services Application Discovery Service, and they can write to the Application Discovery Service database using the public API.</p> </li> <li> <p>In this way, you can import data into Migration Hub and view it, so that you can associate applications with servers and track migrations.</p> </li> </ul> </li> </ul> <p> <b>Working With This Guide</b> </p> <p>This API reference provides descriptions, syntax, and usage examples for each of the actions and data types for Application Discovery Service. The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <note> <ul> <li> <p>Remember that you must set your Migration Hub home Region before you call any of these APIs.</p> </li> <li> <p>You must make API calls for write actions (create, notify, associate, disassociate, import, or put) while in your home Region, or a <code>HomeRegionNotSetException</code> error is returned.</p> </li> <li> <p>API calls for read actions (list, describe, stop, and delete) are permitted outside of your home Region.</p> </li> <li> <p>Although it is unlikely, the Migration Hub home Region could change. If you call APIs outside the home Region, an <code>InvalidInputException</code> is returned.</p> </li> <li> <p>You must call <code>GetHomeRegion</code> to obtain the latest Migration Hub home Region.</p> </li> </ul> </note> <p>This guide is intended for use with the <a href=\"https://docs.aws.amazon.com/application-discovery/latest/userguide/\">Amazon Web Services Application Discovery Service User Guide</a>.</p> <important> <p>All data is handled according to the <a href=\"https://aws.amazon.com/privacy/\">Amazon Web Services Privacy Policy</a>. You can operate Application Discovery Service offline to inspect collected data before it is shared with the service.</p> </important>
 *
 * The version of the OpenAPI document: 2015-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ImportStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartImportTaskResponseTask
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:27.087008-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartImportTaskResponseTask {
  public static final String SERIALIZED_NAME_IMPORT_TASK_ID = "importTaskId";
  @SerializedName(SERIALIZED_NAME_IMPORT_TASK_ID)
  private String importTaskId;

  public static final String SERIALIZED_NAME_CLIENT_REQUEST_TOKEN = "clientRequestToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_TOKEN)
  private String clientRequestToken;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_IMPORT_URL = "importUrl";
  @SerializedName(SERIALIZED_NAME_IMPORT_URL)
  private String importUrl;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ImportStatus status;

  public static final String SERIALIZED_NAME_IMPORT_REQUEST_TIME = "importRequestTime";
  @SerializedName(SERIALIZED_NAME_IMPORT_REQUEST_TIME)
  private OffsetDateTime importRequestTime;

  public static final String SERIALIZED_NAME_IMPORT_COMPLETION_TIME = "importCompletionTime";
  @SerializedName(SERIALIZED_NAME_IMPORT_COMPLETION_TIME)
  private OffsetDateTime importCompletionTime;

  public static final String SERIALIZED_NAME_IMPORT_DELETED_TIME = "importDeletedTime";
  @SerializedName(SERIALIZED_NAME_IMPORT_DELETED_TIME)
  private OffsetDateTime importDeletedTime;

  public static final String SERIALIZED_NAME_SERVER_IMPORT_SUCCESS = "serverImportSuccess";
  @SerializedName(SERIALIZED_NAME_SERVER_IMPORT_SUCCESS)
  private Integer serverImportSuccess;

  public static final String SERIALIZED_NAME_SERVER_IMPORT_FAILURE = "serverImportFailure";
  @SerializedName(SERIALIZED_NAME_SERVER_IMPORT_FAILURE)
  private Integer serverImportFailure;

  public static final String SERIALIZED_NAME_APPLICATION_IMPORT_SUCCESS = "applicationImportSuccess";
  @SerializedName(SERIALIZED_NAME_APPLICATION_IMPORT_SUCCESS)
  private Integer applicationImportSuccess;

  public static final String SERIALIZED_NAME_APPLICATION_IMPORT_FAILURE = "applicationImportFailure";
  @SerializedName(SERIALIZED_NAME_APPLICATION_IMPORT_FAILURE)
  private Integer applicationImportFailure;

  public static final String SERIALIZED_NAME_ERRORS_AND_FAILED_ENTRIES_ZIP = "errorsAndFailedEntriesZip";
  @SerializedName(SERIALIZED_NAME_ERRORS_AND_FAILED_ENTRIES_ZIP)
  private String errorsAndFailedEntriesZip;

  public StartImportTaskResponseTask() {
  }

  public StartImportTaskResponseTask importTaskId(String importTaskId) {
    this.importTaskId = importTaskId;
    return this;
  }

  /**
   * Get importTaskId
   * @return importTaskId
   */
  @javax.annotation.Nullable
  public String getImportTaskId() {
    return importTaskId;
  }

  public void setImportTaskId(String importTaskId) {
    this.importTaskId = importTaskId;
  }


  public StartImportTaskResponseTask clientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
    return this;
  }

  /**
   * Get clientRequestToken
   * @return clientRequestToken
   */
  @javax.annotation.Nullable
  public String getClientRequestToken() {
    return clientRequestToken;
  }

  public void setClientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
  }


  public StartImportTaskResponseTask name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public StartImportTaskResponseTask importUrl(String importUrl) {
    this.importUrl = importUrl;
    return this;
  }

  /**
   * Get importUrl
   * @return importUrl
   */
  @javax.annotation.Nullable
  public String getImportUrl() {
    return importUrl;
  }

  public void setImportUrl(String importUrl) {
    this.importUrl = importUrl;
  }


  public StartImportTaskResponseTask status(ImportStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ImportStatus getStatus() {
    return status;
  }

  public void setStatus(ImportStatus status) {
    this.status = status;
  }


  public StartImportTaskResponseTask importRequestTime(OffsetDateTime importRequestTime) {
    this.importRequestTime = importRequestTime;
    return this;
  }

  /**
   * Get importRequestTime
   * @return importRequestTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getImportRequestTime() {
    return importRequestTime;
  }

  public void setImportRequestTime(OffsetDateTime importRequestTime) {
    this.importRequestTime = importRequestTime;
  }


  public StartImportTaskResponseTask importCompletionTime(OffsetDateTime importCompletionTime) {
    this.importCompletionTime = importCompletionTime;
    return this;
  }

  /**
   * Get importCompletionTime
   * @return importCompletionTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getImportCompletionTime() {
    return importCompletionTime;
  }

  public void setImportCompletionTime(OffsetDateTime importCompletionTime) {
    this.importCompletionTime = importCompletionTime;
  }


  public StartImportTaskResponseTask importDeletedTime(OffsetDateTime importDeletedTime) {
    this.importDeletedTime = importDeletedTime;
    return this;
  }

  /**
   * Get importDeletedTime
   * @return importDeletedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getImportDeletedTime() {
    return importDeletedTime;
  }

  public void setImportDeletedTime(OffsetDateTime importDeletedTime) {
    this.importDeletedTime = importDeletedTime;
  }


  public StartImportTaskResponseTask serverImportSuccess(Integer serverImportSuccess) {
    this.serverImportSuccess = serverImportSuccess;
    return this;
  }

  /**
   * Get serverImportSuccess
   * @return serverImportSuccess
   */
  @javax.annotation.Nullable
  public Integer getServerImportSuccess() {
    return serverImportSuccess;
  }

  public void setServerImportSuccess(Integer serverImportSuccess) {
    this.serverImportSuccess = serverImportSuccess;
  }


  public StartImportTaskResponseTask serverImportFailure(Integer serverImportFailure) {
    this.serverImportFailure = serverImportFailure;
    return this;
  }

  /**
   * Get serverImportFailure
   * @return serverImportFailure
   */
  @javax.annotation.Nullable
  public Integer getServerImportFailure() {
    return serverImportFailure;
  }

  public void setServerImportFailure(Integer serverImportFailure) {
    this.serverImportFailure = serverImportFailure;
  }


  public StartImportTaskResponseTask applicationImportSuccess(Integer applicationImportSuccess) {
    this.applicationImportSuccess = applicationImportSuccess;
    return this;
  }

  /**
   * Get applicationImportSuccess
   * @return applicationImportSuccess
   */
  @javax.annotation.Nullable
  public Integer getApplicationImportSuccess() {
    return applicationImportSuccess;
  }

  public void setApplicationImportSuccess(Integer applicationImportSuccess) {
    this.applicationImportSuccess = applicationImportSuccess;
  }


  public StartImportTaskResponseTask applicationImportFailure(Integer applicationImportFailure) {
    this.applicationImportFailure = applicationImportFailure;
    return this;
  }

  /**
   * Get applicationImportFailure
   * @return applicationImportFailure
   */
  @javax.annotation.Nullable
  public Integer getApplicationImportFailure() {
    return applicationImportFailure;
  }

  public void setApplicationImportFailure(Integer applicationImportFailure) {
    this.applicationImportFailure = applicationImportFailure;
  }


  public StartImportTaskResponseTask errorsAndFailedEntriesZip(String errorsAndFailedEntriesZip) {
    this.errorsAndFailedEntriesZip = errorsAndFailedEntriesZip;
    return this;
  }

  /**
   * Get errorsAndFailedEntriesZip
   * @return errorsAndFailedEntriesZip
   */
  @javax.annotation.Nullable
  public String getErrorsAndFailedEntriesZip() {
    return errorsAndFailedEntriesZip;
  }

  public void setErrorsAndFailedEntriesZip(String errorsAndFailedEntriesZip) {
    this.errorsAndFailedEntriesZip = errorsAndFailedEntriesZip;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartImportTaskResponseTask startImportTaskResponseTask = (StartImportTaskResponseTask) o;
    return Objects.equals(this.importTaskId, startImportTaskResponseTask.importTaskId) &&
        Objects.equals(this.clientRequestToken, startImportTaskResponseTask.clientRequestToken) &&
        Objects.equals(this.name, startImportTaskResponseTask.name) &&
        Objects.equals(this.importUrl, startImportTaskResponseTask.importUrl) &&
        Objects.equals(this.status, startImportTaskResponseTask.status) &&
        Objects.equals(this.importRequestTime, startImportTaskResponseTask.importRequestTime) &&
        Objects.equals(this.importCompletionTime, startImportTaskResponseTask.importCompletionTime) &&
        Objects.equals(this.importDeletedTime, startImportTaskResponseTask.importDeletedTime) &&
        Objects.equals(this.serverImportSuccess, startImportTaskResponseTask.serverImportSuccess) &&
        Objects.equals(this.serverImportFailure, startImportTaskResponseTask.serverImportFailure) &&
        Objects.equals(this.applicationImportSuccess, startImportTaskResponseTask.applicationImportSuccess) &&
        Objects.equals(this.applicationImportFailure, startImportTaskResponseTask.applicationImportFailure) &&
        Objects.equals(this.errorsAndFailedEntriesZip, startImportTaskResponseTask.errorsAndFailedEntriesZip);
  }

  @Override
  public int hashCode() {
    return Objects.hash(importTaskId, clientRequestToken, name, importUrl, status, importRequestTime, importCompletionTime, importDeletedTime, serverImportSuccess, serverImportFailure, applicationImportSuccess, applicationImportFailure, errorsAndFailedEntriesZip);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartImportTaskResponseTask {\n");
    sb.append("    importTaskId: ").append(toIndentedString(importTaskId)).append("\n");
    sb.append("    clientRequestToken: ").append(toIndentedString(clientRequestToken)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    importUrl: ").append(toIndentedString(importUrl)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    importRequestTime: ").append(toIndentedString(importRequestTime)).append("\n");
    sb.append("    importCompletionTime: ").append(toIndentedString(importCompletionTime)).append("\n");
    sb.append("    importDeletedTime: ").append(toIndentedString(importDeletedTime)).append("\n");
    sb.append("    serverImportSuccess: ").append(toIndentedString(serverImportSuccess)).append("\n");
    sb.append("    serverImportFailure: ").append(toIndentedString(serverImportFailure)).append("\n");
    sb.append("    applicationImportSuccess: ").append(toIndentedString(applicationImportSuccess)).append("\n");
    sb.append("    applicationImportFailure: ").append(toIndentedString(applicationImportFailure)).append("\n");
    sb.append("    errorsAndFailedEntriesZip: ").append(toIndentedString(errorsAndFailedEntriesZip)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("importTaskId");
    openapiFields.add("clientRequestToken");
    openapiFields.add("name");
    openapiFields.add("importUrl");
    openapiFields.add("status");
    openapiFields.add("importRequestTime");
    openapiFields.add("importCompletionTime");
    openapiFields.add("importDeletedTime");
    openapiFields.add("serverImportSuccess");
    openapiFields.add("serverImportFailure");
    openapiFields.add("applicationImportSuccess");
    openapiFields.add("applicationImportFailure");
    openapiFields.add("errorsAndFailedEntriesZip");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartImportTaskResponseTask
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartImportTaskResponseTask.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartImportTaskResponseTask is not found in the empty JSON string", StartImportTaskResponseTask.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartImportTaskResponseTask.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartImportTaskResponseTask` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `importTaskId`
      if (jsonObj.get("importTaskId") != null && !jsonObj.get("importTaskId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("importTaskId"));
      }
      // validate the optional field `clientRequestToken`
      if (jsonObj.get("clientRequestToken") != null && !jsonObj.get("clientRequestToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("clientRequestToken"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `importUrl`
      if (jsonObj.get("importUrl") != null && !jsonObj.get("importUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("importUrl"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ImportStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `importRequestTime`
      if (jsonObj.get("importRequestTime") != null && !jsonObj.get("importRequestTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("importRequestTime"));
      }
      // validate the optional field `importCompletionTime`
      if (jsonObj.get("importCompletionTime") != null && !jsonObj.get("importCompletionTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("importCompletionTime"));
      }
      // validate the optional field `importDeletedTime`
      if (jsonObj.get("importDeletedTime") != null && !jsonObj.get("importDeletedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("importDeletedTime"));
      }
      // validate the optional field `serverImportSuccess`
      if (jsonObj.get("serverImportSuccess") != null && !jsonObj.get("serverImportSuccess").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("serverImportSuccess"));
      }
      // validate the optional field `serverImportFailure`
      if (jsonObj.get("serverImportFailure") != null && !jsonObj.get("serverImportFailure").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("serverImportFailure"));
      }
      // validate the optional field `applicationImportSuccess`
      if (jsonObj.get("applicationImportSuccess") != null && !jsonObj.get("applicationImportSuccess").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("applicationImportSuccess"));
      }
      // validate the optional field `applicationImportFailure`
      if (jsonObj.get("applicationImportFailure") != null && !jsonObj.get("applicationImportFailure").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("applicationImportFailure"));
      }
      // validate the optional field `errorsAndFailedEntriesZip`
      if (jsonObj.get("errorsAndFailedEntriesZip") != null && !jsonObj.get("errorsAndFailedEntriesZip").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("errorsAndFailedEntriesZip"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartImportTaskResponseTask.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartImportTaskResponseTask' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartImportTaskResponseTask> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartImportTaskResponseTask.class));

       return (TypeAdapter<T>) new TypeAdapter<StartImportTaskResponseTask>() {
           @Override
           public void write(JsonWriter out, StartImportTaskResponseTask value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartImportTaskResponseTask read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartImportTaskResponseTask given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartImportTaskResponseTask
   * @throws IOException if the JSON string is invalid with respect to StartImportTaskResponseTask
   */
  public static StartImportTaskResponseTask fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartImportTaskResponseTask.class);
  }

  /**
   * Convert an instance of StartImportTaskResponseTask to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

