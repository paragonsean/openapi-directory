/*
 * AWS Application Discovery Service
 * <fullname>Amazon Web Services Application Discovery Service</fullname> <p>Amazon Web Services Application Discovery Service (Application Discovery Service) helps you plan application migration projects. It automatically identifies servers, virtual machines (VMs), and network dependencies in your on-premises data centers. For more information, see the <a href=\"http://aws.amazon.com/application-discovery/faqs/\">Amazon Web Services Application Discovery Service FAQ</a>. </p> <p>Application Discovery Service offers three ways of performing discovery and collecting data about your on-premises servers:</p> <ul> <li> <p> <b>Agentless discovery</b> using Amazon Web Services Application Discovery Service Agentless Collector (Agentless Collector), which doesn't require you to install an agent on each host.</p> <ul> <li> <p>Agentless Collector gathers server information regardless of the operating systems, which minimizes the time required for initial on-premises infrastructure assessment.</p> </li> <li> <p>Agentless Collector doesn't collect information about network dependencies, only agent-based discovery collects that information. </p> </li> </ul> </li> </ul> <ul> <li> <p> <b>Agent-based discovery</b> using the Amazon Web Services Application Discovery Agent (Application Discovery Agent) collects a richer set of data than agentless discovery, which you install on one or more hosts in your data center.</p> <ul> <li> <p> The agent captures infrastructure and application information, including an inventory of running processes, system performance information, resource utilization, and network dependencies.</p> </li> <li> <p>The information collected by agents is secured at rest and in transit to the Application Discovery Service database in the Amazon Web Services cloud. For more information, see <a href=\"https://docs.aws.amazon.com/application-discovery/latest/userguide/discovery-agent.html\">Amazon Web Services Application Discovery Agent</a>.</p> </li> </ul> </li> </ul> <ul> <li> <p> <b>Amazon Web Services Partner Network (APN) solutions</b> integrate with Application Discovery Service, enabling you to import details of your on-premises environment directly into Amazon Web Services Migration Hub (Migration Hub) without using Agentless Collector or Application Discovery Agent.</p> <ul> <li> <p>Third-party application discovery tools can query Amazon Web Services Application Discovery Service, and they can write to the Application Discovery Service database using the public API.</p> </li> <li> <p>In this way, you can import data into Migration Hub and view it, so that you can associate applications with servers and track migrations.</p> </li> </ul> </li> </ul> <p> <b>Working With This Guide</b> </p> <p>This API reference provides descriptions, syntax, and usage examples for each of the actions and data types for Application Discovery Service. The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <note> <ul> <li> <p>Remember that you must set your Migration Hub home Region before you call any of these APIs.</p> </li> <li> <p>You must make API calls for write actions (create, notify, associate, disassociate, import, or put) while in your home Region, or a <code>HomeRegionNotSetException</code> error is returned.</p> </li> <li> <p>API calls for read actions (list, describe, stop, and delete) are permitted outside of your home Region.</p> </li> <li> <p>Although it is unlikely, the Migration Hub home Region could change. If you call APIs outside the home Region, an <code>InvalidInputException</code> is returned.</p> </li> <li> <p>You must call <code>GetHomeRegion</code> to obtain the latest Migration Hub home Region.</p> </li> </ul> </note> <p>This guide is intended for use with the <a href=\"https://docs.aws.amazon.com/application-discovery/latest/userguide/\">Amazon Web Services Application Discovery Service User Guide</a>.</p> <important> <p>All data is handled according to the <a href=\"https://aws.amazon.com/privacy/\">Amazon Web Services Privacy Policy</a>. You can operate Application Discovery Service offline to inspect collected data before it is shared with the service.</p> </important>
 *
 * The version of the OpenAPI document: 2015-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetDiscoverySummaryResponseAgentlessCollectorSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:27.087008-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetDiscoverySummaryResponseAgentlessCollectorSummary {
  public static final String SERIALIZED_NAME_ACTIVE_AGENTLESS_COLLECTORS = "activeAgentlessCollectors";
  @SerializedName(SERIALIZED_NAME_ACTIVE_AGENTLESS_COLLECTORS)
  private Integer activeAgentlessCollectors;

  public static final String SERIALIZED_NAME_HEALTHY_AGENTLESS_COLLECTORS = "healthyAgentlessCollectors";
  @SerializedName(SERIALIZED_NAME_HEALTHY_AGENTLESS_COLLECTORS)
  private Integer healthyAgentlessCollectors;

  public static final String SERIALIZED_NAME_DENY_LISTED_AGENTLESS_COLLECTORS = "denyListedAgentlessCollectors";
  @SerializedName(SERIALIZED_NAME_DENY_LISTED_AGENTLESS_COLLECTORS)
  private Integer denyListedAgentlessCollectors;

  public static final String SERIALIZED_NAME_SHUTDOWN_AGENTLESS_COLLECTORS = "shutdownAgentlessCollectors";
  @SerializedName(SERIALIZED_NAME_SHUTDOWN_AGENTLESS_COLLECTORS)
  private Integer shutdownAgentlessCollectors;

  public static final String SERIALIZED_NAME_UNHEALTHY_AGENTLESS_COLLECTORS = "unhealthyAgentlessCollectors";
  @SerializedName(SERIALIZED_NAME_UNHEALTHY_AGENTLESS_COLLECTORS)
  private Integer unhealthyAgentlessCollectors;

  public static final String SERIALIZED_NAME_TOTAL_AGENTLESS_COLLECTORS = "totalAgentlessCollectors";
  @SerializedName(SERIALIZED_NAME_TOTAL_AGENTLESS_COLLECTORS)
  private Integer totalAgentlessCollectors;

  public static final String SERIALIZED_NAME_UNKNOWN_AGENTLESS_COLLECTORS = "unknownAgentlessCollectors";
  @SerializedName(SERIALIZED_NAME_UNKNOWN_AGENTLESS_COLLECTORS)
  private Integer unknownAgentlessCollectors;

  public GetDiscoverySummaryResponseAgentlessCollectorSummary() {
  }

  public GetDiscoverySummaryResponseAgentlessCollectorSummary activeAgentlessCollectors(Integer activeAgentlessCollectors) {
    this.activeAgentlessCollectors = activeAgentlessCollectors;
    return this;
  }

  /**
   * Get activeAgentlessCollectors
   * @return activeAgentlessCollectors
   */
  @javax.annotation.Nonnull
  public Integer getActiveAgentlessCollectors() {
    return activeAgentlessCollectors;
  }

  public void setActiveAgentlessCollectors(Integer activeAgentlessCollectors) {
    this.activeAgentlessCollectors = activeAgentlessCollectors;
  }


  public GetDiscoverySummaryResponseAgentlessCollectorSummary healthyAgentlessCollectors(Integer healthyAgentlessCollectors) {
    this.healthyAgentlessCollectors = healthyAgentlessCollectors;
    return this;
  }

  /**
   * Get healthyAgentlessCollectors
   * @return healthyAgentlessCollectors
   */
  @javax.annotation.Nonnull
  public Integer getHealthyAgentlessCollectors() {
    return healthyAgentlessCollectors;
  }

  public void setHealthyAgentlessCollectors(Integer healthyAgentlessCollectors) {
    this.healthyAgentlessCollectors = healthyAgentlessCollectors;
  }


  public GetDiscoverySummaryResponseAgentlessCollectorSummary denyListedAgentlessCollectors(Integer denyListedAgentlessCollectors) {
    this.denyListedAgentlessCollectors = denyListedAgentlessCollectors;
    return this;
  }

  /**
   * Get denyListedAgentlessCollectors
   * @return denyListedAgentlessCollectors
   */
  @javax.annotation.Nonnull
  public Integer getDenyListedAgentlessCollectors() {
    return denyListedAgentlessCollectors;
  }

  public void setDenyListedAgentlessCollectors(Integer denyListedAgentlessCollectors) {
    this.denyListedAgentlessCollectors = denyListedAgentlessCollectors;
  }


  public GetDiscoverySummaryResponseAgentlessCollectorSummary shutdownAgentlessCollectors(Integer shutdownAgentlessCollectors) {
    this.shutdownAgentlessCollectors = shutdownAgentlessCollectors;
    return this;
  }

  /**
   * Get shutdownAgentlessCollectors
   * @return shutdownAgentlessCollectors
   */
  @javax.annotation.Nonnull
  public Integer getShutdownAgentlessCollectors() {
    return shutdownAgentlessCollectors;
  }

  public void setShutdownAgentlessCollectors(Integer shutdownAgentlessCollectors) {
    this.shutdownAgentlessCollectors = shutdownAgentlessCollectors;
  }


  public GetDiscoverySummaryResponseAgentlessCollectorSummary unhealthyAgentlessCollectors(Integer unhealthyAgentlessCollectors) {
    this.unhealthyAgentlessCollectors = unhealthyAgentlessCollectors;
    return this;
  }

  /**
   * Get unhealthyAgentlessCollectors
   * @return unhealthyAgentlessCollectors
   */
  @javax.annotation.Nonnull
  public Integer getUnhealthyAgentlessCollectors() {
    return unhealthyAgentlessCollectors;
  }

  public void setUnhealthyAgentlessCollectors(Integer unhealthyAgentlessCollectors) {
    this.unhealthyAgentlessCollectors = unhealthyAgentlessCollectors;
  }


  public GetDiscoverySummaryResponseAgentlessCollectorSummary totalAgentlessCollectors(Integer totalAgentlessCollectors) {
    this.totalAgentlessCollectors = totalAgentlessCollectors;
    return this;
  }

  /**
   * Get totalAgentlessCollectors
   * @return totalAgentlessCollectors
   */
  @javax.annotation.Nonnull
  public Integer getTotalAgentlessCollectors() {
    return totalAgentlessCollectors;
  }

  public void setTotalAgentlessCollectors(Integer totalAgentlessCollectors) {
    this.totalAgentlessCollectors = totalAgentlessCollectors;
  }


  public GetDiscoverySummaryResponseAgentlessCollectorSummary unknownAgentlessCollectors(Integer unknownAgentlessCollectors) {
    this.unknownAgentlessCollectors = unknownAgentlessCollectors;
    return this;
  }

  /**
   * Get unknownAgentlessCollectors
   * @return unknownAgentlessCollectors
   */
  @javax.annotation.Nonnull
  public Integer getUnknownAgentlessCollectors() {
    return unknownAgentlessCollectors;
  }

  public void setUnknownAgentlessCollectors(Integer unknownAgentlessCollectors) {
    this.unknownAgentlessCollectors = unknownAgentlessCollectors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetDiscoverySummaryResponseAgentlessCollectorSummary getDiscoverySummaryResponseAgentlessCollectorSummary = (GetDiscoverySummaryResponseAgentlessCollectorSummary) o;
    return Objects.equals(this.activeAgentlessCollectors, getDiscoverySummaryResponseAgentlessCollectorSummary.activeAgentlessCollectors) &&
        Objects.equals(this.healthyAgentlessCollectors, getDiscoverySummaryResponseAgentlessCollectorSummary.healthyAgentlessCollectors) &&
        Objects.equals(this.denyListedAgentlessCollectors, getDiscoverySummaryResponseAgentlessCollectorSummary.denyListedAgentlessCollectors) &&
        Objects.equals(this.shutdownAgentlessCollectors, getDiscoverySummaryResponseAgentlessCollectorSummary.shutdownAgentlessCollectors) &&
        Objects.equals(this.unhealthyAgentlessCollectors, getDiscoverySummaryResponseAgentlessCollectorSummary.unhealthyAgentlessCollectors) &&
        Objects.equals(this.totalAgentlessCollectors, getDiscoverySummaryResponseAgentlessCollectorSummary.totalAgentlessCollectors) &&
        Objects.equals(this.unknownAgentlessCollectors, getDiscoverySummaryResponseAgentlessCollectorSummary.unknownAgentlessCollectors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeAgentlessCollectors, healthyAgentlessCollectors, denyListedAgentlessCollectors, shutdownAgentlessCollectors, unhealthyAgentlessCollectors, totalAgentlessCollectors, unknownAgentlessCollectors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetDiscoverySummaryResponseAgentlessCollectorSummary {\n");
    sb.append("    activeAgentlessCollectors: ").append(toIndentedString(activeAgentlessCollectors)).append("\n");
    sb.append("    healthyAgentlessCollectors: ").append(toIndentedString(healthyAgentlessCollectors)).append("\n");
    sb.append("    denyListedAgentlessCollectors: ").append(toIndentedString(denyListedAgentlessCollectors)).append("\n");
    sb.append("    shutdownAgentlessCollectors: ").append(toIndentedString(shutdownAgentlessCollectors)).append("\n");
    sb.append("    unhealthyAgentlessCollectors: ").append(toIndentedString(unhealthyAgentlessCollectors)).append("\n");
    sb.append("    totalAgentlessCollectors: ").append(toIndentedString(totalAgentlessCollectors)).append("\n");
    sb.append("    unknownAgentlessCollectors: ").append(toIndentedString(unknownAgentlessCollectors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activeAgentlessCollectors");
    openapiFields.add("healthyAgentlessCollectors");
    openapiFields.add("denyListedAgentlessCollectors");
    openapiFields.add("shutdownAgentlessCollectors");
    openapiFields.add("unhealthyAgentlessCollectors");
    openapiFields.add("totalAgentlessCollectors");
    openapiFields.add("unknownAgentlessCollectors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("activeAgentlessCollectors");
    openapiRequiredFields.add("healthyAgentlessCollectors");
    openapiRequiredFields.add("denyListedAgentlessCollectors");
    openapiRequiredFields.add("shutdownAgentlessCollectors");
    openapiRequiredFields.add("unhealthyAgentlessCollectors");
    openapiRequiredFields.add("totalAgentlessCollectors");
    openapiRequiredFields.add("unknownAgentlessCollectors");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetDiscoverySummaryResponseAgentlessCollectorSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetDiscoverySummaryResponseAgentlessCollectorSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetDiscoverySummaryResponseAgentlessCollectorSummary is not found in the empty JSON string", GetDiscoverySummaryResponseAgentlessCollectorSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetDiscoverySummaryResponseAgentlessCollectorSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetDiscoverySummaryResponseAgentlessCollectorSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetDiscoverySummaryResponseAgentlessCollectorSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `activeAgentlessCollectors`
      Integer.validateJsonElement(jsonObj.get("activeAgentlessCollectors"));
      // validate the required field `healthyAgentlessCollectors`
      Integer.validateJsonElement(jsonObj.get("healthyAgentlessCollectors"));
      // validate the required field `denyListedAgentlessCollectors`
      Integer.validateJsonElement(jsonObj.get("denyListedAgentlessCollectors"));
      // validate the required field `shutdownAgentlessCollectors`
      Integer.validateJsonElement(jsonObj.get("shutdownAgentlessCollectors"));
      // validate the required field `unhealthyAgentlessCollectors`
      Integer.validateJsonElement(jsonObj.get("unhealthyAgentlessCollectors"));
      // validate the required field `totalAgentlessCollectors`
      Integer.validateJsonElement(jsonObj.get("totalAgentlessCollectors"));
      // validate the required field `unknownAgentlessCollectors`
      Integer.validateJsonElement(jsonObj.get("unknownAgentlessCollectors"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetDiscoverySummaryResponseAgentlessCollectorSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetDiscoverySummaryResponseAgentlessCollectorSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetDiscoverySummaryResponseAgentlessCollectorSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetDiscoverySummaryResponseAgentlessCollectorSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<GetDiscoverySummaryResponseAgentlessCollectorSummary>() {
           @Override
           public void write(JsonWriter out, GetDiscoverySummaryResponseAgentlessCollectorSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetDiscoverySummaryResponseAgentlessCollectorSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetDiscoverySummaryResponseAgentlessCollectorSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetDiscoverySummaryResponseAgentlessCollectorSummary
   * @throws IOException if the JSON string is invalid with respect to GetDiscoverySummaryResponseAgentlessCollectorSummary
   */
  public static GetDiscoverySummaryResponseAgentlessCollectorSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetDiscoverySummaryResponseAgentlessCollectorSummary.class);
  }

  /**
   * Convert an instance of GetDiscoverySummaryResponseAgentlessCollectorSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

