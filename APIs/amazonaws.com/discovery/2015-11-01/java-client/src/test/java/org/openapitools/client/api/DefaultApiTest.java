/*
 * AWS Application Discovery Service
 * <fullname>Amazon Web Services Application Discovery Service</fullname> <p>Amazon Web Services Application Discovery Service (Application Discovery Service) helps you plan application migration projects. It automatically identifies servers, virtual machines (VMs), and network dependencies in your on-premises data centers. For more information, see the <a href=\"http://aws.amazon.com/application-discovery/faqs/\">Amazon Web Services Application Discovery Service FAQ</a>. </p> <p>Application Discovery Service offers three ways of performing discovery and collecting data about your on-premises servers:</p> <ul> <li> <p> <b>Agentless discovery</b> using Amazon Web Services Application Discovery Service Agentless Collector (Agentless Collector), which doesn't require you to install an agent on each host.</p> <ul> <li> <p>Agentless Collector gathers server information regardless of the operating systems, which minimizes the time required for initial on-premises infrastructure assessment.</p> </li> <li> <p>Agentless Collector doesn't collect information about network dependencies, only agent-based discovery collects that information. </p> </li> </ul> </li> </ul> <ul> <li> <p> <b>Agent-based discovery</b> using the Amazon Web Services Application Discovery Agent (Application Discovery Agent) collects a richer set of data than agentless discovery, which you install on one or more hosts in your data center.</p> <ul> <li> <p> The agent captures infrastructure and application information, including an inventory of running processes, system performance information, resource utilization, and network dependencies.</p> </li> <li> <p>The information collected by agents is secured at rest and in transit to the Application Discovery Service database in the Amazon Web Services cloud. For more information, see <a href=\"https://docs.aws.amazon.com/application-discovery/latest/userguide/discovery-agent.html\">Amazon Web Services Application Discovery Agent</a>.</p> </li> </ul> </li> </ul> <ul> <li> <p> <b>Amazon Web Services Partner Network (APN) solutions</b> integrate with Application Discovery Service, enabling you to import details of your on-premises environment directly into Amazon Web Services Migration Hub (Migration Hub) without using Agentless Collector or Application Discovery Agent.</p> <ul> <li> <p>Third-party application discovery tools can query Amazon Web Services Application Discovery Service, and they can write to the Application Discovery Service database using the public API.</p> </li> <li> <p>In this way, you can import data into Migration Hub and view it, so that you can associate applications with servers and track migrations.</p> </li> </ul> </li> </ul> <p> <b>Working With This Guide</b> </p> <p>This API reference provides descriptions, syntax, and usage examples for each of the actions and data types for Application Discovery Service. The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <note> <ul> <li> <p>Remember that you must set your Migration Hub home Region before you call any of these APIs.</p> </li> <li> <p>You must make API calls for write actions (create, notify, associate, disassociate, import, or put) while in your home Region, or a <code>HomeRegionNotSetException</code> error is returned.</p> </li> <li> <p>API calls for read actions (list, describe, stop, and delete) are permitted outside of your home Region.</p> </li> <li> <p>Although it is unlikely, the Migration Hub home Region could change. If you call APIs outside the home Region, an <code>InvalidInputException</code> is returned.</p> </li> <li> <p>You must call <code>GetHomeRegion</code> to obtain the latest Migration Hub home Region.</p> </li> </ul> </note> <p>This guide is intended for use with the <a href=\"https://docs.aws.amazon.com/application-discovery/latest/userguide/\">Amazon Web Services Application Discovery Service User Guide</a>.</p> <important> <p>All data is handled according to the <a href=\"https://aws.amazon.com/privacy/\">Amazon Web Services Privacy Policy</a>. You can operate Application Discovery Service offline to inspect collected data before it is shared with the service.</p> </important>
 *
 * The version of the OpenAPI document: 2015-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AssociateConfigurationItemsToApplicationRequest;
import org.openapitools.client.model.BatchDeleteImportDataRequest;
import org.openapitools.client.model.BatchDeleteImportDataResponse;
import org.openapitools.client.model.CreateApplicationRequest;
import org.openapitools.client.model.CreateApplicationResponse;
import org.openapitools.client.model.CreateTagsRequest;
import org.openapitools.client.model.DeleteApplicationsRequest;
import org.openapitools.client.model.DeleteTagsRequest;
import org.openapitools.client.model.DescribeAgentsRequest;
import org.openapitools.client.model.DescribeAgentsResponse;
import org.openapitools.client.model.DescribeConfigurationsRequest;
import org.openapitools.client.model.DescribeConfigurationsResponse;
import org.openapitools.client.model.DescribeContinuousExportsRequest;
import org.openapitools.client.model.DescribeContinuousExportsResponse;
import org.openapitools.client.model.DescribeExportConfigurationsRequest;
import org.openapitools.client.model.DescribeExportConfigurationsResponse;
import org.openapitools.client.model.DescribeExportTasksRequest;
import org.openapitools.client.model.DescribeExportTasksResponse;
import org.openapitools.client.model.DescribeImportTasksRequest;
import org.openapitools.client.model.DescribeImportTasksResponse;
import org.openapitools.client.model.DescribeTagsRequest;
import org.openapitools.client.model.DescribeTagsResponse;
import org.openapitools.client.model.DisassociateConfigurationItemsFromApplicationRequest;
import org.openapitools.client.model.ExportConfigurationsResponse;
import org.openapitools.client.model.GetDiscoverySummaryResponse;
import org.openapitools.client.model.ListConfigurationsRequest;
import org.openapitools.client.model.ListConfigurationsResponse;
import org.openapitools.client.model.ListServerNeighborsRequest;
import org.openapitools.client.model.ListServerNeighborsResponse;
import org.openapitools.client.model.StartContinuousExportResponse;
import org.openapitools.client.model.StartDataCollectionByAgentIdsRequest;
import org.openapitools.client.model.StartDataCollectionByAgentIdsResponse;
import org.openapitools.client.model.StartExportTaskRequest;
import org.openapitools.client.model.StartExportTaskResponse;
import org.openapitools.client.model.StartImportTaskRequest;
import org.openapitools.client.model.StartImportTaskResponse;
import org.openapitools.client.model.StopContinuousExportRequest;
import org.openapitools.client.model.StopContinuousExportResponse;
import org.openapitools.client.model.StopDataCollectionByAgentIdsRequest;
import org.openapitools.client.model.StopDataCollectionByAgentIdsResponse;
import org.openapitools.client.model.UpdateApplicationRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Associates one or more configuration items with an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateConfigurationItemsToApplicationTest() throws ApiException {
        String xAmzTarget = null;
        AssociateConfigurationItemsToApplicationRequest associateConfigurationItemsToApplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.associateConfigurationItemsToApplication(xAmzTarget, associateConfigurationItemsToApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes one or more import tasks, each identified by their import ID. Each import task has a number of records that can identify servers or applications. &lt;/p&gt; &lt;p&gt;Amazon Web Services Application Discovery Service has built-in matching logic that will identify when discovered servers match existing entries that you&#39;ve previously discovered, the information for the already-existing discovered server is updated. When you delete an import task that contains records that were used to match, the information in those matched records that comes from the deleted records will also be deleted.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchDeleteImportDataTest() throws ApiException {
        String xAmzTarget = null;
        BatchDeleteImportDataRequest batchDeleteImportDataRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchDeleteImportDataResponse response = api.batchDeleteImportData(xAmzTarget, batchDeleteImportDataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an application with the given name and description.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createApplicationTest() throws ApiException {
        String xAmzTarget = null;
        CreateApplicationRequest createApplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateApplicationResponse response = api.createApplication(xAmzTarget, createApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates one or more tags for configuration items. Tags are metadata that help you categorize IT assets. This API accepts a list of multiple configuration items.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Do not store sensitive information (like personal data) in tags.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTagsTest() throws ApiException {
        String xAmzTarget = null;
        CreateTagsRequest createTagsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createTags(xAmzTarget, createTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a list of applications and their associations with configuration items.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteApplicationsTest() throws ApiException {
        String xAmzTarget = null;
        DeleteApplicationsRequest deleteApplicationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteApplications(xAmzTarget, deleteApplicationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the association between configuration items and one or more tags. This API accepts a list of multiple configuration items.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTagsTest() throws ApiException {
        String xAmzTarget = null;
        DeleteTagsRequest deleteTagsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteTags(xAmzTarget, deleteTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists agents or collectors as specified by ID or other filters. All agents/collectors associated with your user can be listed if you call &lt;code&gt;DescribeAgents&lt;/code&gt; as is without passing any parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeAgentsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeAgentsRequest describeAgentsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAgentsResponse response = api.describeAgents(xAmzTarget, describeAgentsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves attributes for a list of configuration item IDs.&lt;/p&gt; &lt;note&gt; &lt;p&gt;All of the supplied IDs must be for the same asset type from one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;server&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;application&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;process&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;connection&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Output fields are specific to the asset type specified. For example, the output for a &lt;i&gt;server&lt;/i&gt; configuration item includes a list of attributes about the server, such as host name, operating system, number of network cards, etc.&lt;/p&gt; &lt;p&gt;For a complete list of outputs for each asset type, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/application-discovery/latest/userguide/discovery-api-queries.html#DescribeConfigurations\&quot;&gt;Using the DescribeConfigurations Action&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Application Discovery Service User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeConfigurationsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeConfigurationsRequest describeConfigurationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeConfigurationsResponse response = api.describeConfigurations(xAmzTarget, describeConfigurationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists exports as specified by ID. All continuous exports associated with your user can be listed if you call &lt;code&gt;DescribeContinuousExports&lt;/code&gt; as is without passing any parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeContinuousExportsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeContinuousExportsRequest describeContinuousExportsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeContinuousExportsResponse response = api.describeContinuousExports(xAmzTarget, describeContinuousExportsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  &lt;code&gt;DescribeExportConfigurations&lt;/code&gt; is deprecated. Use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/application-discovery/latest/APIReference/API_DescribeExportTasks.html\&quot;&gt;DescribeExportTasks&lt;/a&gt;, instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeExportConfigurationsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeExportConfigurationsRequest describeExportConfigurationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeExportConfigurationsResponse response = api.describeExportConfigurations(xAmzTarget, describeExportConfigurationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieve status of one or more export tasks. You can retrieve the status of up to 100 export tasks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeExportTasksTest() throws ApiException {
        String xAmzTarget = null;
        DescribeExportTasksRequest describeExportTasksRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeExportTasksResponse response = api.describeExportTasks(xAmzTarget, describeExportTasksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns an array of import tasks for your account, including status information, times, IDs, the Amazon S3 Object URL for the import file, and more.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeImportTasksTest() throws ApiException {
        String xAmzTarget = null;
        DescribeImportTasksRequest describeImportTasksRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeImportTasksResponse response = api.describeImportTasks(xAmzTarget, describeImportTasksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves a list of configuration items that have tags as specified by the key-value pairs, name and value, passed to the optional parameter &lt;code&gt;filters&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;There are three valid tag filter names:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;tagKey&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;tagValue&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;configurationId&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Also, all configuration items associated with your user that have tags can be listed if you call &lt;code&gt;DescribeTags&lt;/code&gt; as is without passing any parameters.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeTagsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeTagsRequest describeTagsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeTagsResponse response = api.describeTags(xAmzTarget, describeTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disassociates one or more configuration items from an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateConfigurationItemsFromApplicationTest() throws ApiException {
        String xAmzTarget = null;
        DisassociateConfigurationItemsFromApplicationRequest disassociateConfigurationItemsFromApplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateConfigurationItemsFromApplication(xAmzTarget, disassociateConfigurationItemsFromApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deprecated. Use &lt;code&gt;StartExportTask&lt;/code&gt; instead.&lt;/p&gt; &lt;p&gt;Exports all discovered configuration data to an Amazon S3 bucket or an application that enables you to view and evaluate the data. Data includes tags and tag associations, processes, connections, servers, and system performance. This API returns an export ID that you can query using the &lt;i&gt;DescribeExportConfigurations&lt;/i&gt; API. The system imposes a limit of two configuration exports in six hours.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportConfigurationsTest() throws ApiException {
        String xAmzTarget = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ExportConfigurationsResponse response = api.exportConfigurations(xAmzTarget, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves a short summary of discovered assets.&lt;/p&gt; &lt;p&gt;This API operation takes no request parameters and is called as is at the command prompt as shown in the example.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDiscoverySummaryTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDiscoverySummaryResponse response = api.getDiscoverySummary(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a list of configuration items as specified by the value passed to the required parameter &lt;code&gt;configurationType&lt;/code&gt;. Optional filtering may be applied to refine search results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConfigurationsTest() throws ApiException {
        String xAmzTarget = null;
        ListConfigurationsRequest listConfigurationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListConfigurationsResponse response = api.listConfigurations(xAmzTarget, listConfigurationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a list of servers that are one network hop away from a specified server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listServerNeighborsTest() throws ApiException {
        String xAmzTarget = null;
        ListServerNeighborsRequest listServerNeighborsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListServerNeighborsResponse response = api.listServerNeighbors(xAmzTarget, listServerNeighborsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Start the continuous flow of agent&#39;s discovered data into Amazon Athena.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startContinuousExportTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartContinuousExportResponse response = api.startContinuousExport(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Instructs the specified agents to start collecting data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startDataCollectionByAgentIdsTest() throws ApiException {
        String xAmzTarget = null;
        StartDataCollectionByAgentIdsRequest startDataCollectionByAgentIdsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartDataCollectionByAgentIdsResponse response = api.startDataCollectionByAgentIds(xAmzTarget, startDataCollectionByAgentIdsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Begins the export of a discovered data report to an Amazon S3 bucket managed by Amazon Web Services.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Exports might provide an estimate of fees and savings based on certain information that you provide. Fee estimates do not include any taxes that might apply. Your actual fees and savings depend on a variety of factors, including your actual usage of Amazon Web Services services, which might vary from the estimates provided in this report.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;If you do not specify &lt;code&gt;preferences&lt;/code&gt; or &lt;code&gt;agentIds&lt;/code&gt; in the filter, a summary of all servers, applications, tags, and performance is generated. This data is an aggregation of all server data collected through on-premises tooling, file import, application grouping and applying tags.&lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;agentIds&lt;/code&gt; in a filter, the task exports up to 72 hours of detailed data collected by the identified Application Discovery Agent, including network, process, and performance details. A time range for exported agent data may be set by using &lt;code&gt;startTime&lt;/code&gt; and &lt;code&gt;endTime&lt;/code&gt;. Export of detailed agent data is limited to five concurrently running exports. Export of detailed agent data is limited to two exports per day.&lt;/p&gt; &lt;p&gt;If you enable &lt;code&gt;ec2RecommendationsPreferences&lt;/code&gt; in &lt;code&gt;preferences&lt;/code&gt; , an Amazon EC2 instance matching the characteristics of each server in Application Discovery Service is generated. Changing the attributes of the &lt;code&gt;ec2RecommendationsPreferences&lt;/code&gt; changes the criteria of the recommendation.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startExportTaskTest() throws ApiException {
        String xAmzTarget = null;
        StartExportTaskRequest startExportTaskRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartExportTaskResponse response = api.startExportTask(xAmzTarget, startExportTaskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Starts an import task, which allows you to import details of your on-premises environment directly into Amazon Web Services Migration Hub without having to use the Amazon Web Services Application Discovery Service (Application Discovery Service) tools such as the Amazon Web Services Application Discovery Service Agentless Collector or Application Discovery Agent. This gives you the option to perform migration assessment and planning directly from your imported data, including the ability to group your devices as applications and track their migration status.&lt;/p&gt; &lt;p&gt;To start an import request, do this:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Download the specially formatted comma separated value (CSV) import template, which you can find here: &lt;a href&#x3D;\&quot;https://s3.us-west-2.amazonaws.com/templates-7cffcf56-bd96-4b1c-b45b-a5b42f282e46/import_template.csv\&quot;&gt;https://s3.us-west-2.amazonaws.com/templates-7cffcf56-bd96-4b1c-b45b-a5b42f282e46/import_template.csv&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Fill out the template with your server and application data.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Upload your import file to an Amazon S3 bucket, and make a note of it&#39;s Object URL. Your import file must be in the CSV format.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use the console or the &lt;code&gt;StartImportTask&lt;/code&gt; command with the Amazon Web Services CLI or one of the Amazon Web Services SDKs to import the records from your file.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information, including step-by-step procedures, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/application-discovery/latest/userguide/discovery-import.html\&quot;&gt;Migration Hub Import&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Application Discovery Service User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;There are limits to the number of import tasks you can create (and delete) in an Amazon Web Services account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/application-discovery/latest/userguide/ads_service_limits.html\&quot;&gt;Amazon Web Services Application Discovery Service Limits&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Application Discovery Service User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startImportTaskTest() throws ApiException {
        String xAmzTarget = null;
        StartImportTaskRequest startImportTaskRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartImportTaskResponse response = api.startImportTask(xAmzTarget, startImportTaskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stop the continuous flow of agent&#39;s discovered data into Amazon Athena.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopContinuousExportTest() throws ApiException {
        String xAmzTarget = null;
        StopContinuousExportRequest stopContinuousExportRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopContinuousExportResponse response = api.stopContinuousExport(xAmzTarget, stopContinuousExportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Instructs the specified agents to stop collecting data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopDataCollectionByAgentIdsTest() throws ApiException {
        String xAmzTarget = null;
        StopDataCollectionByAgentIdsRequest stopDataCollectionByAgentIdsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopDataCollectionByAgentIdsResponse response = api.stopDataCollectionByAgentIds(xAmzTarget, stopDataCollectionByAgentIdsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates metadata about an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateApplicationTest() throws ApiException {
        String xAmzTarget = null;
        UpdateApplicationRequest updateApplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateApplication(xAmzTarget, updateApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
