# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListServerNeighborsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration_id: str=None, port_information_needed: bool=None, neighbor_configuration_ids: List=None, max_results: int=None, next_token: str=None):
        """ListServerNeighborsRequest - a model defined in OpenAPI

        :param configuration_id: The configuration_id of this ListServerNeighborsRequest.
        :param port_information_needed: The port_information_needed of this ListServerNeighborsRequest.
        :param neighbor_configuration_ids: The neighbor_configuration_ids of this ListServerNeighborsRequest.
        :param max_results: The max_results of this ListServerNeighborsRequest.
        :param next_token: The next_token of this ListServerNeighborsRequest.
        """
        self.openapi_types = {
            'configuration_id': str,
            'port_information_needed': bool,
            'neighbor_configuration_ids': List,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'configuration_id': 'configurationId',
            'port_information_needed': 'portInformationNeeded',
            'neighbor_configuration_ids': 'neighborConfigurationIds',
            'max_results': 'maxResults',
            'next_token': 'nextToken'
        }

        self._configuration_id = configuration_id
        self._port_information_needed = port_information_needed
        self._neighbor_configuration_ids = neighbor_configuration_ids
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListServerNeighborsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListServerNeighborsRequest of this ListServerNeighborsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration_id(self):
        """Gets the configuration_id of this ListServerNeighborsRequest.


        :return: The configuration_id of this ListServerNeighborsRequest.
        :rtype: str
        """
        return self._configuration_id

    @configuration_id.setter
    def configuration_id(self, configuration_id):
        """Sets the configuration_id of this ListServerNeighborsRequest.


        :param configuration_id: The configuration_id of this ListServerNeighborsRequest.
        :type configuration_id: str
        """
        if configuration_id is None:
            raise ValueError("Invalid value for `configuration_id`, must not be `None`")

        self._configuration_id = configuration_id

    @property
    def port_information_needed(self):
        """Gets the port_information_needed of this ListServerNeighborsRequest.


        :return: The port_information_needed of this ListServerNeighborsRequest.
        :rtype: bool
        """
        return self._port_information_needed

    @port_information_needed.setter
    def port_information_needed(self, port_information_needed):
        """Sets the port_information_needed of this ListServerNeighborsRequest.


        :param port_information_needed: The port_information_needed of this ListServerNeighborsRequest.
        :type port_information_needed: bool
        """

        self._port_information_needed = port_information_needed

    @property
    def neighbor_configuration_ids(self):
        """Gets the neighbor_configuration_ids of this ListServerNeighborsRequest.


        :return: The neighbor_configuration_ids of this ListServerNeighborsRequest.
        :rtype: List
        """
        return self._neighbor_configuration_ids

    @neighbor_configuration_ids.setter
    def neighbor_configuration_ids(self, neighbor_configuration_ids):
        """Sets the neighbor_configuration_ids of this ListServerNeighborsRequest.


        :param neighbor_configuration_ids: The neighbor_configuration_ids of this ListServerNeighborsRequest.
        :type neighbor_configuration_ids: List
        """

        self._neighbor_configuration_ids = neighbor_configuration_ids

    @property
    def max_results(self):
        """Gets the max_results of this ListServerNeighborsRequest.


        :return: The max_results of this ListServerNeighborsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListServerNeighborsRequest.


        :param max_results: The max_results of this ListServerNeighborsRequest.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListServerNeighborsRequest.


        :return: The next_token of this ListServerNeighborsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListServerNeighborsRequest.


        :param next_token: The next_token of this ListServerNeighborsRequest.
        :type next_token: str
        """

        self._next_token = next_token
