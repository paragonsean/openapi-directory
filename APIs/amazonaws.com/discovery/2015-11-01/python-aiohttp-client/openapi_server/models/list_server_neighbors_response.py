# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListServerNeighborsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, neighbors: List=None, next_token: str=None, known_dependency_count: int=None):
        """ListServerNeighborsResponse - a model defined in OpenAPI

        :param neighbors: The neighbors of this ListServerNeighborsResponse.
        :param next_token: The next_token of this ListServerNeighborsResponse.
        :param known_dependency_count: The known_dependency_count of this ListServerNeighborsResponse.
        """
        self.openapi_types = {
            'neighbors': List,
            'next_token': str,
            'known_dependency_count': int
        }

        self.attribute_map = {
            'neighbors': 'neighbors',
            'next_token': 'nextToken',
            'known_dependency_count': 'knownDependencyCount'
        }

        self._neighbors = neighbors
        self._next_token = next_token
        self._known_dependency_count = known_dependency_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListServerNeighborsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListServerNeighborsResponse of this ListServerNeighborsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def neighbors(self):
        """Gets the neighbors of this ListServerNeighborsResponse.


        :return: The neighbors of this ListServerNeighborsResponse.
        :rtype: List
        """
        return self._neighbors

    @neighbors.setter
    def neighbors(self, neighbors):
        """Sets the neighbors of this ListServerNeighborsResponse.


        :param neighbors: The neighbors of this ListServerNeighborsResponse.
        :type neighbors: List
        """
        if neighbors is None:
            raise ValueError("Invalid value for `neighbors`, must not be `None`")

        self._neighbors = neighbors

    @property
    def next_token(self):
        """Gets the next_token of this ListServerNeighborsResponse.


        :return: The next_token of this ListServerNeighborsResponse.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListServerNeighborsResponse.


        :param next_token: The next_token of this ListServerNeighborsResponse.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def known_dependency_count(self):
        """Gets the known_dependency_count of this ListServerNeighborsResponse.


        :return: The known_dependency_count of this ListServerNeighborsResponse.
        :rtype: int
        """
        return self._known_dependency_count

    @known_dependency_count.setter
    def known_dependency_count(self, known_dependency_count):
        """Sets the known_dependency_count of this ListServerNeighborsResponse.


        :param known_dependency_count: The known_dependency_count of this ListServerNeighborsResponse.
        :type known_dependency_count: int
        """

        self._known_dependency_count = known_dependency_count
