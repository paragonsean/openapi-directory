# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomerMeCollectorInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_me_collectors: int=None, healthy_me_collectors: int=None, deny_listed_me_collectors: int=None, shutdown_me_collectors: int=None, unhealthy_me_collectors: int=None, total_me_collectors: int=None, unknown_me_collectors: int=None):
        """CustomerMeCollectorInfo - a model defined in OpenAPI

        :param active_me_collectors: The active_me_collectors of this CustomerMeCollectorInfo.
        :param healthy_me_collectors: The healthy_me_collectors of this CustomerMeCollectorInfo.
        :param deny_listed_me_collectors: The deny_listed_me_collectors of this CustomerMeCollectorInfo.
        :param shutdown_me_collectors: The shutdown_me_collectors of this CustomerMeCollectorInfo.
        :param unhealthy_me_collectors: The unhealthy_me_collectors of this CustomerMeCollectorInfo.
        :param total_me_collectors: The total_me_collectors of this CustomerMeCollectorInfo.
        :param unknown_me_collectors: The unknown_me_collectors of this CustomerMeCollectorInfo.
        """
        self.openapi_types = {
            'active_me_collectors': int,
            'healthy_me_collectors': int,
            'deny_listed_me_collectors': int,
            'shutdown_me_collectors': int,
            'unhealthy_me_collectors': int,
            'total_me_collectors': int,
            'unknown_me_collectors': int
        }

        self.attribute_map = {
            'active_me_collectors': 'activeMeCollectors',
            'healthy_me_collectors': 'healthyMeCollectors',
            'deny_listed_me_collectors': 'denyListedMeCollectors',
            'shutdown_me_collectors': 'shutdownMeCollectors',
            'unhealthy_me_collectors': 'unhealthyMeCollectors',
            'total_me_collectors': 'totalMeCollectors',
            'unknown_me_collectors': 'unknownMeCollectors'
        }

        self._active_me_collectors = active_me_collectors
        self._healthy_me_collectors = healthy_me_collectors
        self._deny_listed_me_collectors = deny_listed_me_collectors
        self._shutdown_me_collectors = shutdown_me_collectors
        self._unhealthy_me_collectors = unhealthy_me_collectors
        self._total_me_collectors = total_me_collectors
        self._unknown_me_collectors = unknown_me_collectors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerMeCollectorInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomerMeCollectorInfo of this CustomerMeCollectorInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_me_collectors(self):
        """Gets the active_me_collectors of this CustomerMeCollectorInfo.


        :return: The active_me_collectors of this CustomerMeCollectorInfo.
        :rtype: int
        """
        return self._active_me_collectors

    @active_me_collectors.setter
    def active_me_collectors(self, active_me_collectors):
        """Sets the active_me_collectors of this CustomerMeCollectorInfo.


        :param active_me_collectors: The active_me_collectors of this CustomerMeCollectorInfo.
        :type active_me_collectors: int
        """
        if active_me_collectors is None:
            raise ValueError("Invalid value for `active_me_collectors`, must not be `None`")

        self._active_me_collectors = active_me_collectors

    @property
    def healthy_me_collectors(self):
        """Gets the healthy_me_collectors of this CustomerMeCollectorInfo.


        :return: The healthy_me_collectors of this CustomerMeCollectorInfo.
        :rtype: int
        """
        return self._healthy_me_collectors

    @healthy_me_collectors.setter
    def healthy_me_collectors(self, healthy_me_collectors):
        """Sets the healthy_me_collectors of this CustomerMeCollectorInfo.


        :param healthy_me_collectors: The healthy_me_collectors of this CustomerMeCollectorInfo.
        :type healthy_me_collectors: int
        """
        if healthy_me_collectors is None:
            raise ValueError("Invalid value for `healthy_me_collectors`, must not be `None`")

        self._healthy_me_collectors = healthy_me_collectors

    @property
    def deny_listed_me_collectors(self):
        """Gets the deny_listed_me_collectors of this CustomerMeCollectorInfo.


        :return: The deny_listed_me_collectors of this CustomerMeCollectorInfo.
        :rtype: int
        """
        return self._deny_listed_me_collectors

    @deny_listed_me_collectors.setter
    def deny_listed_me_collectors(self, deny_listed_me_collectors):
        """Sets the deny_listed_me_collectors of this CustomerMeCollectorInfo.


        :param deny_listed_me_collectors: The deny_listed_me_collectors of this CustomerMeCollectorInfo.
        :type deny_listed_me_collectors: int
        """
        if deny_listed_me_collectors is None:
            raise ValueError("Invalid value for `deny_listed_me_collectors`, must not be `None`")

        self._deny_listed_me_collectors = deny_listed_me_collectors

    @property
    def shutdown_me_collectors(self):
        """Gets the shutdown_me_collectors of this CustomerMeCollectorInfo.


        :return: The shutdown_me_collectors of this CustomerMeCollectorInfo.
        :rtype: int
        """
        return self._shutdown_me_collectors

    @shutdown_me_collectors.setter
    def shutdown_me_collectors(self, shutdown_me_collectors):
        """Sets the shutdown_me_collectors of this CustomerMeCollectorInfo.


        :param shutdown_me_collectors: The shutdown_me_collectors of this CustomerMeCollectorInfo.
        :type shutdown_me_collectors: int
        """
        if shutdown_me_collectors is None:
            raise ValueError("Invalid value for `shutdown_me_collectors`, must not be `None`")

        self._shutdown_me_collectors = shutdown_me_collectors

    @property
    def unhealthy_me_collectors(self):
        """Gets the unhealthy_me_collectors of this CustomerMeCollectorInfo.


        :return: The unhealthy_me_collectors of this CustomerMeCollectorInfo.
        :rtype: int
        """
        return self._unhealthy_me_collectors

    @unhealthy_me_collectors.setter
    def unhealthy_me_collectors(self, unhealthy_me_collectors):
        """Sets the unhealthy_me_collectors of this CustomerMeCollectorInfo.


        :param unhealthy_me_collectors: The unhealthy_me_collectors of this CustomerMeCollectorInfo.
        :type unhealthy_me_collectors: int
        """
        if unhealthy_me_collectors is None:
            raise ValueError("Invalid value for `unhealthy_me_collectors`, must not be `None`")

        self._unhealthy_me_collectors = unhealthy_me_collectors

    @property
    def total_me_collectors(self):
        """Gets the total_me_collectors of this CustomerMeCollectorInfo.


        :return: The total_me_collectors of this CustomerMeCollectorInfo.
        :rtype: int
        """
        return self._total_me_collectors

    @total_me_collectors.setter
    def total_me_collectors(self, total_me_collectors):
        """Sets the total_me_collectors of this CustomerMeCollectorInfo.


        :param total_me_collectors: The total_me_collectors of this CustomerMeCollectorInfo.
        :type total_me_collectors: int
        """
        if total_me_collectors is None:
            raise ValueError("Invalid value for `total_me_collectors`, must not be `None`")

        self._total_me_collectors = total_me_collectors

    @property
    def unknown_me_collectors(self):
        """Gets the unknown_me_collectors of this CustomerMeCollectorInfo.


        :return: The unknown_me_collectors of this CustomerMeCollectorInfo.
        :rtype: int
        """
        return self._unknown_me_collectors

    @unknown_me_collectors.setter
    def unknown_me_collectors(self, unknown_me_collectors):
        """Sets the unknown_me_collectors of this CustomerMeCollectorInfo.


        :param unknown_me_collectors: The unknown_me_collectors of this CustomerMeCollectorInfo.
        :type unknown_me_collectors: int
        """
        if unknown_me_collectors is None:
            raise ValueError("Invalid value for `unknown_me_collectors`, must not be `None`")

        self._unknown_me_collectors = unknown_me_collectors
