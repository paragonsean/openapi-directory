# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateApplicationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration_id: str=None, name: str=None, description: str=None):
        """UpdateApplicationRequest - a model defined in OpenAPI

        :param configuration_id: The configuration_id of this UpdateApplicationRequest.
        :param name: The name of this UpdateApplicationRequest.
        :param description: The description of this UpdateApplicationRequest.
        """
        self.openapi_types = {
            'configuration_id': str,
            'name': str,
            'description': str
        }

        self.attribute_map = {
            'configuration_id': 'configurationId',
            'name': 'name',
            'description': 'description'
        }

        self._configuration_id = configuration_id
        self._name = name
        self._description = description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateApplicationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateApplicationRequest of this UpdateApplicationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration_id(self):
        """Gets the configuration_id of this UpdateApplicationRequest.


        :return: The configuration_id of this UpdateApplicationRequest.
        :rtype: str
        """
        return self._configuration_id

    @configuration_id.setter
    def configuration_id(self, configuration_id):
        """Sets the configuration_id of this UpdateApplicationRequest.


        :param configuration_id: The configuration_id of this UpdateApplicationRequest.
        :type configuration_id: str
        """
        if configuration_id is None:
            raise ValueError("Invalid value for `configuration_id`, must not be `None`")

        self._configuration_id = configuration_id

    @property
    def name(self):
        """Gets the name of this UpdateApplicationRequest.


        :return: The name of this UpdateApplicationRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateApplicationRequest.


        :param name: The name of this UpdateApplicationRequest.
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this UpdateApplicationRequest.


        :return: The description of this UpdateApplicationRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateApplicationRequest.


        :param description: The description of this UpdateApplicationRequest.
        :type description: str
        """

        self._description = description
