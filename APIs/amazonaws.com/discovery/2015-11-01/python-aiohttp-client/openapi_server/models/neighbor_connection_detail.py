# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NeighborConnectionDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source_server_id: str=None, destination_server_id: str=None, destination_port: int=None, transport_protocol: str=None, connections_count: int=None):
        """NeighborConnectionDetail - a model defined in OpenAPI

        :param source_server_id: The source_server_id of this NeighborConnectionDetail.
        :param destination_server_id: The destination_server_id of this NeighborConnectionDetail.
        :param destination_port: The destination_port of this NeighborConnectionDetail.
        :param transport_protocol: The transport_protocol of this NeighborConnectionDetail.
        :param connections_count: The connections_count of this NeighborConnectionDetail.
        """
        self.openapi_types = {
            'source_server_id': str,
            'destination_server_id': str,
            'destination_port': int,
            'transport_protocol': str,
            'connections_count': int
        }

        self.attribute_map = {
            'source_server_id': 'sourceServerId',
            'destination_server_id': 'destinationServerId',
            'destination_port': 'destinationPort',
            'transport_protocol': 'transportProtocol',
            'connections_count': 'connectionsCount'
        }

        self._source_server_id = source_server_id
        self._destination_server_id = destination_server_id
        self._destination_port = destination_port
        self._transport_protocol = transport_protocol
        self._connections_count = connections_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NeighborConnectionDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NeighborConnectionDetail of this NeighborConnectionDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_server_id(self):
        """Gets the source_server_id of this NeighborConnectionDetail.


        :return: The source_server_id of this NeighborConnectionDetail.
        :rtype: str
        """
        return self._source_server_id

    @source_server_id.setter
    def source_server_id(self, source_server_id):
        """Sets the source_server_id of this NeighborConnectionDetail.


        :param source_server_id: The source_server_id of this NeighborConnectionDetail.
        :type source_server_id: str
        """
        if source_server_id is None:
            raise ValueError("Invalid value for `source_server_id`, must not be `None`")

        self._source_server_id = source_server_id

    @property
    def destination_server_id(self):
        """Gets the destination_server_id of this NeighborConnectionDetail.


        :return: The destination_server_id of this NeighborConnectionDetail.
        :rtype: str
        """
        return self._destination_server_id

    @destination_server_id.setter
    def destination_server_id(self, destination_server_id):
        """Sets the destination_server_id of this NeighborConnectionDetail.


        :param destination_server_id: The destination_server_id of this NeighborConnectionDetail.
        :type destination_server_id: str
        """
        if destination_server_id is None:
            raise ValueError("Invalid value for `destination_server_id`, must not be `None`")

        self._destination_server_id = destination_server_id

    @property
    def destination_port(self):
        """Gets the destination_port of this NeighborConnectionDetail.


        :return: The destination_port of this NeighborConnectionDetail.
        :rtype: int
        """
        return self._destination_port

    @destination_port.setter
    def destination_port(self, destination_port):
        """Sets the destination_port of this NeighborConnectionDetail.


        :param destination_port: The destination_port of this NeighborConnectionDetail.
        :type destination_port: int
        """

        self._destination_port = destination_port

    @property
    def transport_protocol(self):
        """Gets the transport_protocol of this NeighborConnectionDetail.


        :return: The transport_protocol of this NeighborConnectionDetail.
        :rtype: str
        """
        return self._transport_protocol

    @transport_protocol.setter
    def transport_protocol(self, transport_protocol):
        """Sets the transport_protocol of this NeighborConnectionDetail.


        :param transport_protocol: The transport_protocol of this NeighborConnectionDetail.
        :type transport_protocol: str
        """

        self._transport_protocol = transport_protocol

    @property
    def connections_count(self):
        """Gets the connections_count of this NeighborConnectionDetail.


        :return: The connections_count of this NeighborConnectionDetail.
        :rtype: int
        """
        return self._connections_count

    @connections_count.setter
    def connections_count(self, connections_count):
        """Sets the connections_count of this NeighborConnectionDetail.


        :param connections_count: The connections_count of this NeighborConnectionDetail.
        :type connections_count: int
        """
        if connections_count is None:
            raise ValueError("Invalid value for `connections_count`, must not be `None`")

        self._connections_count = connections_count
