# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomerAgentlessCollectorInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_agentless_collectors: int=None, healthy_agentless_collectors: int=None, deny_listed_agentless_collectors: int=None, shutdown_agentless_collectors: int=None, unhealthy_agentless_collectors: int=None, total_agentless_collectors: int=None, unknown_agentless_collectors: int=None):
        """CustomerAgentlessCollectorInfo - a model defined in OpenAPI

        :param active_agentless_collectors: The active_agentless_collectors of this CustomerAgentlessCollectorInfo.
        :param healthy_agentless_collectors: The healthy_agentless_collectors of this CustomerAgentlessCollectorInfo.
        :param deny_listed_agentless_collectors: The deny_listed_agentless_collectors of this CustomerAgentlessCollectorInfo.
        :param shutdown_agentless_collectors: The shutdown_agentless_collectors of this CustomerAgentlessCollectorInfo.
        :param unhealthy_agentless_collectors: The unhealthy_agentless_collectors of this CustomerAgentlessCollectorInfo.
        :param total_agentless_collectors: The total_agentless_collectors of this CustomerAgentlessCollectorInfo.
        :param unknown_agentless_collectors: The unknown_agentless_collectors of this CustomerAgentlessCollectorInfo.
        """
        self.openapi_types = {
            'active_agentless_collectors': int,
            'healthy_agentless_collectors': int,
            'deny_listed_agentless_collectors': int,
            'shutdown_agentless_collectors': int,
            'unhealthy_agentless_collectors': int,
            'total_agentless_collectors': int,
            'unknown_agentless_collectors': int
        }

        self.attribute_map = {
            'active_agentless_collectors': 'activeAgentlessCollectors',
            'healthy_agentless_collectors': 'healthyAgentlessCollectors',
            'deny_listed_agentless_collectors': 'denyListedAgentlessCollectors',
            'shutdown_agentless_collectors': 'shutdownAgentlessCollectors',
            'unhealthy_agentless_collectors': 'unhealthyAgentlessCollectors',
            'total_agentless_collectors': 'totalAgentlessCollectors',
            'unknown_agentless_collectors': 'unknownAgentlessCollectors'
        }

        self._active_agentless_collectors = active_agentless_collectors
        self._healthy_agentless_collectors = healthy_agentless_collectors
        self._deny_listed_agentless_collectors = deny_listed_agentless_collectors
        self._shutdown_agentless_collectors = shutdown_agentless_collectors
        self._unhealthy_agentless_collectors = unhealthy_agentless_collectors
        self._total_agentless_collectors = total_agentless_collectors
        self._unknown_agentless_collectors = unknown_agentless_collectors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerAgentlessCollectorInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomerAgentlessCollectorInfo of this CustomerAgentlessCollectorInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_agentless_collectors(self):
        """Gets the active_agentless_collectors of this CustomerAgentlessCollectorInfo.


        :return: The active_agentless_collectors of this CustomerAgentlessCollectorInfo.
        :rtype: int
        """
        return self._active_agentless_collectors

    @active_agentless_collectors.setter
    def active_agentless_collectors(self, active_agentless_collectors):
        """Sets the active_agentless_collectors of this CustomerAgentlessCollectorInfo.


        :param active_agentless_collectors: The active_agentless_collectors of this CustomerAgentlessCollectorInfo.
        :type active_agentless_collectors: int
        """
        if active_agentless_collectors is None:
            raise ValueError("Invalid value for `active_agentless_collectors`, must not be `None`")

        self._active_agentless_collectors = active_agentless_collectors

    @property
    def healthy_agentless_collectors(self):
        """Gets the healthy_agentless_collectors of this CustomerAgentlessCollectorInfo.


        :return: The healthy_agentless_collectors of this CustomerAgentlessCollectorInfo.
        :rtype: int
        """
        return self._healthy_agentless_collectors

    @healthy_agentless_collectors.setter
    def healthy_agentless_collectors(self, healthy_agentless_collectors):
        """Sets the healthy_agentless_collectors of this CustomerAgentlessCollectorInfo.


        :param healthy_agentless_collectors: The healthy_agentless_collectors of this CustomerAgentlessCollectorInfo.
        :type healthy_agentless_collectors: int
        """
        if healthy_agentless_collectors is None:
            raise ValueError("Invalid value for `healthy_agentless_collectors`, must not be `None`")

        self._healthy_agentless_collectors = healthy_agentless_collectors

    @property
    def deny_listed_agentless_collectors(self):
        """Gets the deny_listed_agentless_collectors of this CustomerAgentlessCollectorInfo.


        :return: The deny_listed_agentless_collectors of this CustomerAgentlessCollectorInfo.
        :rtype: int
        """
        return self._deny_listed_agentless_collectors

    @deny_listed_agentless_collectors.setter
    def deny_listed_agentless_collectors(self, deny_listed_agentless_collectors):
        """Sets the deny_listed_agentless_collectors of this CustomerAgentlessCollectorInfo.


        :param deny_listed_agentless_collectors: The deny_listed_agentless_collectors of this CustomerAgentlessCollectorInfo.
        :type deny_listed_agentless_collectors: int
        """
        if deny_listed_agentless_collectors is None:
            raise ValueError("Invalid value for `deny_listed_agentless_collectors`, must not be `None`")

        self._deny_listed_agentless_collectors = deny_listed_agentless_collectors

    @property
    def shutdown_agentless_collectors(self):
        """Gets the shutdown_agentless_collectors of this CustomerAgentlessCollectorInfo.


        :return: The shutdown_agentless_collectors of this CustomerAgentlessCollectorInfo.
        :rtype: int
        """
        return self._shutdown_agentless_collectors

    @shutdown_agentless_collectors.setter
    def shutdown_agentless_collectors(self, shutdown_agentless_collectors):
        """Sets the shutdown_agentless_collectors of this CustomerAgentlessCollectorInfo.


        :param shutdown_agentless_collectors: The shutdown_agentless_collectors of this CustomerAgentlessCollectorInfo.
        :type shutdown_agentless_collectors: int
        """
        if shutdown_agentless_collectors is None:
            raise ValueError("Invalid value for `shutdown_agentless_collectors`, must not be `None`")

        self._shutdown_agentless_collectors = shutdown_agentless_collectors

    @property
    def unhealthy_agentless_collectors(self):
        """Gets the unhealthy_agentless_collectors of this CustomerAgentlessCollectorInfo.


        :return: The unhealthy_agentless_collectors of this CustomerAgentlessCollectorInfo.
        :rtype: int
        """
        return self._unhealthy_agentless_collectors

    @unhealthy_agentless_collectors.setter
    def unhealthy_agentless_collectors(self, unhealthy_agentless_collectors):
        """Sets the unhealthy_agentless_collectors of this CustomerAgentlessCollectorInfo.


        :param unhealthy_agentless_collectors: The unhealthy_agentless_collectors of this CustomerAgentlessCollectorInfo.
        :type unhealthy_agentless_collectors: int
        """
        if unhealthy_agentless_collectors is None:
            raise ValueError("Invalid value for `unhealthy_agentless_collectors`, must not be `None`")

        self._unhealthy_agentless_collectors = unhealthy_agentless_collectors

    @property
    def total_agentless_collectors(self):
        """Gets the total_agentless_collectors of this CustomerAgentlessCollectorInfo.


        :return: The total_agentless_collectors of this CustomerAgentlessCollectorInfo.
        :rtype: int
        """
        return self._total_agentless_collectors

    @total_agentless_collectors.setter
    def total_agentless_collectors(self, total_agentless_collectors):
        """Sets the total_agentless_collectors of this CustomerAgentlessCollectorInfo.


        :param total_agentless_collectors: The total_agentless_collectors of this CustomerAgentlessCollectorInfo.
        :type total_agentless_collectors: int
        """
        if total_agentless_collectors is None:
            raise ValueError("Invalid value for `total_agentless_collectors`, must not be `None`")

        self._total_agentless_collectors = total_agentless_collectors

    @property
    def unknown_agentless_collectors(self):
        """Gets the unknown_agentless_collectors of this CustomerAgentlessCollectorInfo.


        :return: The unknown_agentless_collectors of this CustomerAgentlessCollectorInfo.
        :rtype: int
        """
        return self._unknown_agentless_collectors

    @unknown_agentless_collectors.setter
    def unknown_agentless_collectors(self, unknown_agentless_collectors):
        """Sets the unknown_agentless_collectors of this CustomerAgentlessCollectorInfo.


        :param unknown_agentless_collectors: The unknown_agentless_collectors of this CustomerAgentlessCollectorInfo.
        :type unknown_agentless_collectors: int
        """
        if unknown_agentless_collectors is None:
            raise ValueError("Invalid value for `unknown_agentless_collectors`, must not be `None`")

        self._unknown_agentless_collectors = unknown_agentless_collectors
