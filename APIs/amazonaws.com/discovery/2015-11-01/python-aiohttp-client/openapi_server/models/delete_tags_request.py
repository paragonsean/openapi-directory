# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeleteTagsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration_ids: List=None, tags: List=None):
        """DeleteTagsRequest - a model defined in OpenAPI

        :param configuration_ids: The configuration_ids of this DeleteTagsRequest.
        :param tags: The tags of this DeleteTagsRequest.
        """
        self.openapi_types = {
            'configuration_ids': List,
            'tags': List
        }

        self.attribute_map = {
            'configuration_ids': 'configurationIds',
            'tags': 'tags'
        }

        self._configuration_ids = configuration_ids
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteTagsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteTagsRequest of this DeleteTagsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration_ids(self):
        """Gets the configuration_ids of this DeleteTagsRequest.


        :return: The configuration_ids of this DeleteTagsRequest.
        :rtype: List
        """
        return self._configuration_ids

    @configuration_ids.setter
    def configuration_ids(self, configuration_ids):
        """Sets the configuration_ids of this DeleteTagsRequest.


        :param configuration_ids: The configuration_ids of this DeleteTagsRequest.
        :type configuration_ids: List
        """
        if configuration_ids is None:
            raise ValueError("Invalid value for `configuration_ids`, must not be `None`")

        self._configuration_ids = configuration_ids

    @property
    def tags(self):
        """Gets the tags of this DeleteTagsRequest.


        :return: The tags of this DeleteTagsRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DeleteTagsRequest.


        :param tags: The tags of this DeleteTagsRequest.
        :type tags: List
        """

        self._tags = tags
