# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomerConnectorInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_connectors: int=None, healthy_connectors: int=None, black_listed_connectors: int=None, shutdown_connectors: int=None, unhealthy_connectors: int=None, total_connectors: int=None, unknown_connectors: int=None):
        """CustomerConnectorInfo - a model defined in OpenAPI

        :param active_connectors: The active_connectors of this CustomerConnectorInfo.
        :param healthy_connectors: The healthy_connectors of this CustomerConnectorInfo.
        :param black_listed_connectors: The black_listed_connectors of this CustomerConnectorInfo.
        :param shutdown_connectors: The shutdown_connectors of this CustomerConnectorInfo.
        :param unhealthy_connectors: The unhealthy_connectors of this CustomerConnectorInfo.
        :param total_connectors: The total_connectors of this CustomerConnectorInfo.
        :param unknown_connectors: The unknown_connectors of this CustomerConnectorInfo.
        """
        self.openapi_types = {
            'active_connectors': int,
            'healthy_connectors': int,
            'black_listed_connectors': int,
            'shutdown_connectors': int,
            'unhealthy_connectors': int,
            'total_connectors': int,
            'unknown_connectors': int
        }

        self.attribute_map = {
            'active_connectors': 'activeConnectors',
            'healthy_connectors': 'healthyConnectors',
            'black_listed_connectors': 'blackListedConnectors',
            'shutdown_connectors': 'shutdownConnectors',
            'unhealthy_connectors': 'unhealthyConnectors',
            'total_connectors': 'totalConnectors',
            'unknown_connectors': 'unknownConnectors'
        }

        self._active_connectors = active_connectors
        self._healthy_connectors = healthy_connectors
        self._black_listed_connectors = black_listed_connectors
        self._shutdown_connectors = shutdown_connectors
        self._unhealthy_connectors = unhealthy_connectors
        self._total_connectors = total_connectors
        self._unknown_connectors = unknown_connectors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerConnectorInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomerConnectorInfo of this CustomerConnectorInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_connectors(self):
        """Gets the active_connectors of this CustomerConnectorInfo.


        :return: The active_connectors of this CustomerConnectorInfo.
        :rtype: int
        """
        return self._active_connectors

    @active_connectors.setter
    def active_connectors(self, active_connectors):
        """Sets the active_connectors of this CustomerConnectorInfo.


        :param active_connectors: The active_connectors of this CustomerConnectorInfo.
        :type active_connectors: int
        """
        if active_connectors is None:
            raise ValueError("Invalid value for `active_connectors`, must not be `None`")

        self._active_connectors = active_connectors

    @property
    def healthy_connectors(self):
        """Gets the healthy_connectors of this CustomerConnectorInfo.


        :return: The healthy_connectors of this CustomerConnectorInfo.
        :rtype: int
        """
        return self._healthy_connectors

    @healthy_connectors.setter
    def healthy_connectors(self, healthy_connectors):
        """Sets the healthy_connectors of this CustomerConnectorInfo.


        :param healthy_connectors: The healthy_connectors of this CustomerConnectorInfo.
        :type healthy_connectors: int
        """
        if healthy_connectors is None:
            raise ValueError("Invalid value for `healthy_connectors`, must not be `None`")

        self._healthy_connectors = healthy_connectors

    @property
    def black_listed_connectors(self):
        """Gets the black_listed_connectors of this CustomerConnectorInfo.


        :return: The black_listed_connectors of this CustomerConnectorInfo.
        :rtype: int
        """
        return self._black_listed_connectors

    @black_listed_connectors.setter
    def black_listed_connectors(self, black_listed_connectors):
        """Sets the black_listed_connectors of this CustomerConnectorInfo.


        :param black_listed_connectors: The black_listed_connectors of this CustomerConnectorInfo.
        :type black_listed_connectors: int
        """
        if black_listed_connectors is None:
            raise ValueError("Invalid value for `black_listed_connectors`, must not be `None`")

        self._black_listed_connectors = black_listed_connectors

    @property
    def shutdown_connectors(self):
        """Gets the shutdown_connectors of this CustomerConnectorInfo.


        :return: The shutdown_connectors of this CustomerConnectorInfo.
        :rtype: int
        """
        return self._shutdown_connectors

    @shutdown_connectors.setter
    def shutdown_connectors(self, shutdown_connectors):
        """Sets the shutdown_connectors of this CustomerConnectorInfo.


        :param shutdown_connectors: The shutdown_connectors of this CustomerConnectorInfo.
        :type shutdown_connectors: int
        """
        if shutdown_connectors is None:
            raise ValueError("Invalid value for `shutdown_connectors`, must not be `None`")

        self._shutdown_connectors = shutdown_connectors

    @property
    def unhealthy_connectors(self):
        """Gets the unhealthy_connectors of this CustomerConnectorInfo.


        :return: The unhealthy_connectors of this CustomerConnectorInfo.
        :rtype: int
        """
        return self._unhealthy_connectors

    @unhealthy_connectors.setter
    def unhealthy_connectors(self, unhealthy_connectors):
        """Sets the unhealthy_connectors of this CustomerConnectorInfo.


        :param unhealthy_connectors: The unhealthy_connectors of this CustomerConnectorInfo.
        :type unhealthy_connectors: int
        """
        if unhealthy_connectors is None:
            raise ValueError("Invalid value for `unhealthy_connectors`, must not be `None`")

        self._unhealthy_connectors = unhealthy_connectors

    @property
    def total_connectors(self):
        """Gets the total_connectors of this CustomerConnectorInfo.


        :return: The total_connectors of this CustomerConnectorInfo.
        :rtype: int
        """
        return self._total_connectors

    @total_connectors.setter
    def total_connectors(self, total_connectors):
        """Sets the total_connectors of this CustomerConnectorInfo.


        :param total_connectors: The total_connectors of this CustomerConnectorInfo.
        :type total_connectors: int
        """
        if total_connectors is None:
            raise ValueError("Invalid value for `total_connectors`, must not be `None`")

        self._total_connectors = total_connectors

    @property
    def unknown_connectors(self):
        """Gets the unknown_connectors of this CustomerConnectorInfo.


        :return: The unknown_connectors of this CustomerConnectorInfo.
        :rtype: int
        """
        return self._unknown_connectors

    @unknown_connectors.setter
    def unknown_connectors(self, unknown_connectors):
        """Sets the unknown_connectors of this CustomerConnectorInfo.


        :param unknown_connectors: The unknown_connectors of this CustomerConnectorInfo.
        :type unknown_connectors: int
        """
        if unknown_connectors is None:
            raise ValueError("Invalid value for `unknown_connectors`, must not be `None`")

        self._unknown_connectors = unknown_connectors
