# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order_string import OrderString
from openapi_server import util


class OrderByElement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, field_name: str=None, sort_order: OrderString=None):
        """OrderByElement - a model defined in OpenAPI

        :param field_name: The field_name of this OrderByElement.
        :param sort_order: The sort_order of this OrderByElement.
        """
        self.openapi_types = {
            'field_name': str,
            'sort_order': OrderString
        }

        self.attribute_map = {
            'field_name': 'fieldName',
            'sort_order': 'sortOrder'
        }

        self._field_name = field_name
        self._sort_order = sort_order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderByElement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderByElement of this OrderByElement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def field_name(self):
        """Gets the field_name of this OrderByElement.


        :return: The field_name of this OrderByElement.
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this OrderByElement.


        :param field_name: The field_name of this OrderByElement.
        :type field_name: str
        """
        if field_name is None:
            raise ValueError("Invalid value for `field_name`, must not be `None`")

        self._field_name = field_name

    @property
    def sort_order(self):
        """Gets the sort_order of this OrderByElement.


        :return: The sort_order of this OrderByElement.
        :rtype: OrderString
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this OrderByElement.


        :param sort_order: The sort_order of this OrderByElement.
        :type sort_order: OrderString
        """

        self._sort_order = sort_order
