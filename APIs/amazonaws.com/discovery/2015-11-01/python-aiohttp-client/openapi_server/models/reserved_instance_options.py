# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.offering_class import OfferingClass
from openapi_server.models.purchasing_option import PurchasingOption
from openapi_server.models.term_length import TermLength
from openapi_server import util


class ReservedInstanceOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, purchasing_option: PurchasingOption=None, offering_class: OfferingClass=None, term_length: TermLength=None):
        """ReservedInstanceOptions - a model defined in OpenAPI

        :param purchasing_option: The purchasing_option of this ReservedInstanceOptions.
        :param offering_class: The offering_class of this ReservedInstanceOptions.
        :param term_length: The term_length of this ReservedInstanceOptions.
        """
        self.openapi_types = {
            'purchasing_option': PurchasingOption,
            'offering_class': OfferingClass,
            'term_length': TermLength
        }

        self.attribute_map = {
            'purchasing_option': 'purchasingOption',
            'offering_class': 'offeringClass',
            'term_length': 'termLength'
        }

        self._purchasing_option = purchasing_option
        self._offering_class = offering_class
        self._term_length = term_length

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReservedInstanceOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReservedInstanceOptions of this ReservedInstanceOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def purchasing_option(self):
        """Gets the purchasing_option of this ReservedInstanceOptions.


        :return: The purchasing_option of this ReservedInstanceOptions.
        :rtype: PurchasingOption
        """
        return self._purchasing_option

    @purchasing_option.setter
    def purchasing_option(self, purchasing_option):
        """Sets the purchasing_option of this ReservedInstanceOptions.


        :param purchasing_option: The purchasing_option of this ReservedInstanceOptions.
        :type purchasing_option: PurchasingOption
        """
        if purchasing_option is None:
            raise ValueError("Invalid value for `purchasing_option`, must not be `None`")

        self._purchasing_option = purchasing_option

    @property
    def offering_class(self):
        """Gets the offering_class of this ReservedInstanceOptions.


        :return: The offering_class of this ReservedInstanceOptions.
        :rtype: OfferingClass
        """
        return self._offering_class

    @offering_class.setter
    def offering_class(self, offering_class):
        """Sets the offering_class of this ReservedInstanceOptions.


        :param offering_class: The offering_class of this ReservedInstanceOptions.
        :type offering_class: OfferingClass
        """
        if offering_class is None:
            raise ValueError("Invalid value for `offering_class`, must not be `None`")

        self._offering_class = offering_class

    @property
    def term_length(self):
        """Gets the term_length of this ReservedInstanceOptions.


        :return: The term_length of this ReservedInstanceOptions.
        :rtype: TermLength
        """
        return self._term_length

    @term_length.setter
    def term_length(self, term_length):
        """Sets the term_length of this ReservedInstanceOptions.


        :param term_length: The term_length of this ReservedInstanceOptions.
        :type term_length: TermLength
        """
        if term_length is None:
            raise ValueError("Invalid value for `term_length`, must not be `None`")

        self._term_length = term_length
