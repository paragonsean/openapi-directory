/**
 * AWS Application Discovery Service
 * <fullname>Amazon Web Services Application Discovery Service</fullname> <p>Amazon Web Services Application Discovery Service (Application Discovery Service) helps you plan application migration projects. It automatically identifies servers, virtual machines (VMs), and network dependencies in your on-premises data centers. For more information, see the <a href=\"http://aws.amazon.com/application-discovery/faqs/\">Amazon Web Services Application Discovery Service FAQ</a>. </p> <p>Application Discovery Service offers three ways of performing discovery and collecting data about your on-premises servers:</p> <ul> <li> <p> <b>Agentless discovery</b> using Amazon Web Services Application Discovery Service Agentless Collector (Agentless Collector), which doesn't require you to install an agent on each host.</p> <ul> <li> <p>Agentless Collector gathers server information regardless of the operating systems, which minimizes the time required for initial on-premises infrastructure assessment.</p> </li> <li> <p>Agentless Collector doesn't collect information about network dependencies, only agent-based discovery collects that information. </p> </li> </ul> </li> </ul> <ul> <li> <p> <b>Agent-based discovery</b> using the Amazon Web Services Application Discovery Agent (Application Discovery Agent) collects a richer set of data than agentless discovery, which you install on one or more hosts in your data center.</p> <ul> <li> <p> The agent captures infrastructure and application information, including an inventory of running processes, system performance information, resource utilization, and network dependencies.</p> </li> <li> <p>The information collected by agents is secured at rest and in transit to the Application Discovery Service database in the Amazon Web Services cloud. For more information, see <a href=\"https://docs.aws.amazon.com/application-discovery/latest/userguide/discovery-agent.html\">Amazon Web Services Application Discovery Agent</a>.</p> </li> </ul> </li> </ul> <ul> <li> <p> <b>Amazon Web Services Partner Network (APN) solutions</b> integrate with Application Discovery Service, enabling you to import details of your on-premises environment directly into Amazon Web Services Migration Hub (Migration Hub) without using Agentless Collector or Application Discovery Agent.</p> <ul> <li> <p>Third-party application discovery tools can query Amazon Web Services Application Discovery Service, and they can write to the Application Discovery Service database using the public API.</p> </li> <li> <p>In this way, you can import data into Migration Hub and view it, so that you can associate applications with servers and track migrations.</p> </li> </ul> </li> </ul> <p> <b>Working With This Guide</b> </p> <p>This API reference provides descriptions, syntax, and usage examples for each of the actions and data types for Application Discovery Service. The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <note> <ul> <li> <p>Remember that you must set your Migration Hub home Region before you call any of these APIs.</p> </li> <li> <p>You must make API calls for write actions (create, notify, associate, disassociate, import, or put) while in your home Region, or a <code>HomeRegionNotSetException</code> error is returned.</p> </li> <li> <p>API calls for read actions (list, describe, stop, and delete) are permitted outside of your home Region.</p> </li> <li> <p>Although it is unlikely, the Migration Hub home Region could change. If you call APIs outside the home Region, an <code>InvalidInputException</code> is returned.</p> </li> <li> <p>You must call <code>GetHomeRegion</code> to obtain the latest Migration Hub home Region.</p> </li> </ul> </note> <p>This guide is intended for use with the <a href=\"https://docs.aws.amazon.com/application-discovery/latest/userguide/\">Amazon Web Services Application Discovery Service User Guide</a>.</p> <important> <p>All data is handled according to the <a href=\"https://aws.amazon.com/privacy/\">Amazon Web Services Privacy Policy</a>. You can operate Application Discovery Service offline to inspect collected data before it is shared with the service.</p> </important>
 *
 * The version of the OpenAPI document: 2015-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStartImportTaskResponse_task.h
 *
 * 
 */

#ifndef OAIStartImportTaskResponse_task_H
#define OAIStartImportTaskResponse_task_H

#include <QJsonObject>

#include "OAIImportStatus.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIStartImportTaskResponse_task : public OAIObject {
public:
    OAIStartImportTaskResponse_task();
    OAIStartImportTaskResponse_task(QString json);
    ~OAIStartImportTaskResponse_task() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getImportTaskId() const;
    void setImportTaskId(const QString &import_task_id);
    bool is_import_task_id_Set() const;
    bool is_import_task_id_Valid() const;

    QString getClientRequestToken() const;
    void setClientRequestToken(const QString &client_request_token);
    bool is_client_request_token_Set() const;
    bool is_client_request_token_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getImportUrl() const;
    void setImportUrl(const QString &import_url);
    bool is_import_url_Set() const;
    bool is_import_url_Valid() const;

    OAIImportStatus getStatus() const;
    void setStatus(const OAIImportStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QDateTime getImportRequestTime() const;
    void setImportRequestTime(const QDateTime &import_request_time);
    bool is_import_request_time_Set() const;
    bool is_import_request_time_Valid() const;

    QDateTime getImportCompletionTime() const;
    void setImportCompletionTime(const QDateTime &import_completion_time);
    bool is_import_completion_time_Set() const;
    bool is_import_completion_time_Valid() const;

    QDateTime getImportDeletedTime() const;
    void setImportDeletedTime(const QDateTime &import_deleted_time);
    bool is_import_deleted_time_Set() const;
    bool is_import_deleted_time_Valid() const;

    qint32 getServerImportSuccess() const;
    void setServerImportSuccess(const qint32 &server_import_success);
    bool is_server_import_success_Set() const;
    bool is_server_import_success_Valid() const;

    qint32 getServerImportFailure() const;
    void setServerImportFailure(const qint32 &server_import_failure);
    bool is_server_import_failure_Set() const;
    bool is_server_import_failure_Valid() const;

    qint32 getApplicationImportSuccess() const;
    void setApplicationImportSuccess(const qint32 &application_import_success);
    bool is_application_import_success_Set() const;
    bool is_application_import_success_Valid() const;

    qint32 getApplicationImportFailure() const;
    void setApplicationImportFailure(const qint32 &application_import_failure);
    bool is_application_import_failure_Set() const;
    bool is_application_import_failure_Valid() const;

    QString getErrorsAndFailedEntriesZip() const;
    void setErrorsAndFailedEntriesZip(const QString &errors_and_failed_entries_zip);
    bool is_errors_and_failed_entries_zip_Set() const;
    bool is_errors_and_failed_entries_zip_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_import_task_id;
    bool m_import_task_id_isSet;
    bool m_import_task_id_isValid;

    QString m_client_request_token;
    bool m_client_request_token_isSet;
    bool m_client_request_token_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_import_url;
    bool m_import_url_isSet;
    bool m_import_url_isValid;

    OAIImportStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QDateTime m_import_request_time;
    bool m_import_request_time_isSet;
    bool m_import_request_time_isValid;

    QDateTime m_import_completion_time;
    bool m_import_completion_time_isSet;
    bool m_import_completion_time_isValid;

    QDateTime m_import_deleted_time;
    bool m_import_deleted_time_isSet;
    bool m_import_deleted_time_isValid;

    qint32 m_server_import_success;
    bool m_server_import_success_isSet;
    bool m_server_import_success_isValid;

    qint32 m_server_import_failure;
    bool m_server_import_failure_isSet;
    bool m_server_import_failure_isValid;

    qint32 m_application_import_success;
    bool m_application_import_success_isSet;
    bool m_application_import_success_isValid;

    qint32 m_application_import_failure;
    bool m_application_import_failure_isSet;
    bool m_application_import_failure_isValid;

    QString m_errors_and_failed_entries_zip;
    bool m_errors_and_failed_entries_zip_isSet;
    bool m_errors_and_failed_entries_zip_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStartImportTaskResponse_task)

#endif // OAIStartImportTaskResponse_task_H
