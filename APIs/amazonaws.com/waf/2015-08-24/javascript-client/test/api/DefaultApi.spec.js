/**
 * AWS WAF
 * <note> <p>This is <b>AWS WAF Classic</b> documentation. For more information, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p> <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p> </note> <p>This is the <i>AWS WAF Classic API Reference</i> for using AWS WAF Classic with Amazon CloudFront. The AWS WAF Classic actions and data types listed in the reference are available for protecting Amazon CloudFront distributions. You can use these actions and data types via the endpoint <i>waf.amazonaws.com</i>. This guide is for developers who need detailed information about the AWS WAF Classic API actions, data types, and errors. For detailed information about AWS WAF Classic features and an overview of how to use the AWS WAF Classic API, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p>
 *
 * The version of the OpenAPI document: 2015-08-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsWaf);
  }
}(this, function(expect, AwsWaf) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsWaf.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('createByteMatchSet', function() {
      it('should call createByteMatchSet successfully', function(done) {
        //uncomment below and update the code to test createByteMatchSet
        //instance.createByteMatchSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createGeoMatchSet', function() {
      it('should call createGeoMatchSet successfully', function(done) {
        //uncomment below and update the code to test createGeoMatchSet
        //instance.createGeoMatchSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createIPSet', function() {
      it('should call createIPSet successfully', function(done) {
        //uncomment below and update the code to test createIPSet
        //instance.createIPSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRateBasedRule', function() {
      it('should call createRateBasedRule successfully', function(done) {
        //uncomment below and update the code to test createRateBasedRule
        //instance.createRateBasedRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRegexMatchSet', function() {
      it('should call createRegexMatchSet successfully', function(done) {
        //uncomment below and update the code to test createRegexMatchSet
        //instance.createRegexMatchSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRegexPatternSet', function() {
      it('should call createRegexPatternSet successfully', function(done) {
        //uncomment below and update the code to test createRegexPatternSet
        //instance.createRegexPatternSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRule', function() {
      it('should call createRule successfully', function(done) {
        //uncomment below and update the code to test createRule
        //instance.createRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRuleGroup', function() {
      it('should call createRuleGroup successfully', function(done) {
        //uncomment below and update the code to test createRuleGroup
        //instance.createRuleGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSizeConstraintSet', function() {
      it('should call createSizeConstraintSet successfully', function(done) {
        //uncomment below and update the code to test createSizeConstraintSet
        //instance.createSizeConstraintSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSqlInjectionMatchSet', function() {
      it('should call createSqlInjectionMatchSet successfully', function(done) {
        //uncomment below and update the code to test createSqlInjectionMatchSet
        //instance.createSqlInjectionMatchSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createWebACL', function() {
      it('should call createWebACL successfully', function(done) {
        //uncomment below and update the code to test createWebACL
        //instance.createWebACL(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createWebACLMigrationStack', function() {
      it('should call createWebACLMigrationStack successfully', function(done) {
        //uncomment below and update the code to test createWebACLMigrationStack
        //instance.createWebACLMigrationStack(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createXssMatchSet', function() {
      it('should call createXssMatchSet successfully', function(done) {
        //uncomment below and update the code to test createXssMatchSet
        //instance.createXssMatchSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteByteMatchSet', function() {
      it('should call deleteByteMatchSet successfully', function(done) {
        //uncomment below and update the code to test deleteByteMatchSet
        //instance.deleteByteMatchSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteGeoMatchSet', function() {
      it('should call deleteGeoMatchSet successfully', function(done) {
        //uncomment below and update the code to test deleteGeoMatchSet
        //instance.deleteGeoMatchSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteIPSet', function() {
      it('should call deleteIPSet successfully', function(done) {
        //uncomment below and update the code to test deleteIPSet
        //instance.deleteIPSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteLoggingConfiguration', function() {
      it('should call deleteLoggingConfiguration successfully', function(done) {
        //uncomment below and update the code to test deleteLoggingConfiguration
        //instance.deleteLoggingConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePermissionPolicy', function() {
      it('should call deletePermissionPolicy successfully', function(done) {
        //uncomment below and update the code to test deletePermissionPolicy
        //instance.deletePermissionPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRateBasedRule', function() {
      it('should call deleteRateBasedRule successfully', function(done) {
        //uncomment below and update the code to test deleteRateBasedRule
        //instance.deleteRateBasedRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRegexMatchSet', function() {
      it('should call deleteRegexMatchSet successfully', function(done) {
        //uncomment below and update the code to test deleteRegexMatchSet
        //instance.deleteRegexMatchSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRegexPatternSet', function() {
      it('should call deleteRegexPatternSet successfully', function(done) {
        //uncomment below and update the code to test deleteRegexPatternSet
        //instance.deleteRegexPatternSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRule', function() {
      it('should call deleteRule successfully', function(done) {
        //uncomment below and update the code to test deleteRule
        //instance.deleteRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRuleGroup', function() {
      it('should call deleteRuleGroup successfully', function(done) {
        //uncomment below and update the code to test deleteRuleGroup
        //instance.deleteRuleGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSizeConstraintSet', function() {
      it('should call deleteSizeConstraintSet successfully', function(done) {
        //uncomment below and update the code to test deleteSizeConstraintSet
        //instance.deleteSizeConstraintSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSqlInjectionMatchSet', function() {
      it('should call deleteSqlInjectionMatchSet successfully', function(done) {
        //uncomment below and update the code to test deleteSqlInjectionMatchSet
        //instance.deleteSqlInjectionMatchSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteWebACL', function() {
      it('should call deleteWebACL successfully', function(done) {
        //uncomment below and update the code to test deleteWebACL
        //instance.deleteWebACL(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteXssMatchSet', function() {
      it('should call deleteXssMatchSet successfully', function(done) {
        //uncomment below and update the code to test deleteXssMatchSet
        //instance.deleteXssMatchSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getByteMatchSet', function() {
      it('should call getByteMatchSet successfully', function(done) {
        //uncomment below and update the code to test getByteMatchSet
        //instance.getByteMatchSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getChangeToken', function() {
      it('should call getChangeToken successfully', function(done) {
        //uncomment below and update the code to test getChangeToken
        //instance.getChangeToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getChangeTokenStatus', function() {
      it('should call getChangeTokenStatus successfully', function(done) {
        //uncomment below and update the code to test getChangeTokenStatus
        //instance.getChangeTokenStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getGeoMatchSet', function() {
      it('should call getGeoMatchSet successfully', function(done) {
        //uncomment below and update the code to test getGeoMatchSet
        //instance.getGeoMatchSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIPSet', function() {
      it('should call getIPSet successfully', function(done) {
        //uncomment below and update the code to test getIPSet
        //instance.getIPSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLoggingConfiguration', function() {
      it('should call getLoggingConfiguration successfully', function(done) {
        //uncomment below and update the code to test getLoggingConfiguration
        //instance.getLoggingConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPermissionPolicy', function() {
      it('should call getPermissionPolicy successfully', function(done) {
        //uncomment below and update the code to test getPermissionPolicy
        //instance.getPermissionPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRateBasedRule', function() {
      it('should call getRateBasedRule successfully', function(done) {
        //uncomment below and update the code to test getRateBasedRule
        //instance.getRateBasedRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRateBasedRuleManagedKeys', function() {
      it('should call getRateBasedRuleManagedKeys successfully', function(done) {
        //uncomment below and update the code to test getRateBasedRuleManagedKeys
        //instance.getRateBasedRuleManagedKeys(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRegexMatchSet', function() {
      it('should call getRegexMatchSet successfully', function(done) {
        //uncomment below and update the code to test getRegexMatchSet
        //instance.getRegexMatchSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRegexPatternSet', function() {
      it('should call getRegexPatternSet successfully', function(done) {
        //uncomment below and update the code to test getRegexPatternSet
        //instance.getRegexPatternSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRule', function() {
      it('should call getRule successfully', function(done) {
        //uncomment below and update the code to test getRule
        //instance.getRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRuleGroup', function() {
      it('should call getRuleGroup successfully', function(done) {
        //uncomment below and update the code to test getRuleGroup
        //instance.getRuleGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSampledRequests', function() {
      it('should call getSampledRequests successfully', function(done) {
        //uncomment below and update the code to test getSampledRequests
        //instance.getSampledRequests(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSizeConstraintSet', function() {
      it('should call getSizeConstraintSet successfully', function(done) {
        //uncomment below and update the code to test getSizeConstraintSet
        //instance.getSizeConstraintSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSqlInjectionMatchSet', function() {
      it('should call getSqlInjectionMatchSet successfully', function(done) {
        //uncomment below and update the code to test getSqlInjectionMatchSet
        //instance.getSqlInjectionMatchSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWebACL', function() {
      it('should call getWebACL successfully', function(done) {
        //uncomment below and update the code to test getWebACL
        //instance.getWebACL(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getXssMatchSet', function() {
      it('should call getXssMatchSet successfully', function(done) {
        //uncomment below and update the code to test getXssMatchSet
        //instance.getXssMatchSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listActivatedRulesInRuleGroup', function() {
      it('should call listActivatedRulesInRuleGroup successfully', function(done) {
        //uncomment below and update the code to test listActivatedRulesInRuleGroup
        //instance.listActivatedRulesInRuleGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listByteMatchSets', function() {
      it('should call listByteMatchSets successfully', function(done) {
        //uncomment below and update the code to test listByteMatchSets
        //instance.listByteMatchSets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listGeoMatchSets', function() {
      it('should call listGeoMatchSets successfully', function(done) {
        //uncomment below and update the code to test listGeoMatchSets
        //instance.listGeoMatchSets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listIPSets', function() {
      it('should call listIPSets successfully', function(done) {
        //uncomment below and update the code to test listIPSets
        //instance.listIPSets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listLoggingConfigurations', function() {
      it('should call listLoggingConfigurations successfully', function(done) {
        //uncomment below and update the code to test listLoggingConfigurations
        //instance.listLoggingConfigurations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRateBasedRules', function() {
      it('should call listRateBasedRules successfully', function(done) {
        //uncomment below and update the code to test listRateBasedRules
        //instance.listRateBasedRules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRegexMatchSets', function() {
      it('should call listRegexMatchSets successfully', function(done) {
        //uncomment below and update the code to test listRegexMatchSets
        //instance.listRegexMatchSets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRegexPatternSets', function() {
      it('should call listRegexPatternSets successfully', function(done) {
        //uncomment below and update the code to test listRegexPatternSets
        //instance.listRegexPatternSets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRuleGroups', function() {
      it('should call listRuleGroups successfully', function(done) {
        //uncomment below and update the code to test listRuleGroups
        //instance.listRuleGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRules', function() {
      it('should call listRules successfully', function(done) {
        //uncomment below and update the code to test listRules
        //instance.listRules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSizeConstraintSets', function() {
      it('should call listSizeConstraintSets successfully', function(done) {
        //uncomment below and update the code to test listSizeConstraintSets
        //instance.listSizeConstraintSets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSqlInjectionMatchSets', function() {
      it('should call listSqlInjectionMatchSets successfully', function(done) {
        //uncomment below and update the code to test listSqlInjectionMatchSets
        //instance.listSqlInjectionMatchSets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSubscribedRuleGroups', function() {
      it('should call listSubscribedRuleGroups successfully', function(done) {
        //uncomment below and update the code to test listSubscribedRuleGroups
        //instance.listSubscribedRuleGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listWebACLs', function() {
      it('should call listWebACLs successfully', function(done) {
        //uncomment below and update the code to test listWebACLs
        //instance.listWebACLs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listXssMatchSets', function() {
      it('should call listXssMatchSets successfully', function(done) {
        //uncomment below and update the code to test listXssMatchSets
        //instance.listXssMatchSets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putLoggingConfiguration', function() {
      it('should call putLoggingConfiguration successfully', function(done) {
        //uncomment below and update the code to test putLoggingConfiguration
        //instance.putLoggingConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putPermissionPolicy', function() {
      it('should call putPermissionPolicy successfully', function(done) {
        //uncomment below and update the code to test putPermissionPolicy
        //instance.putPermissionPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateByteMatchSet', function() {
      it('should call updateByteMatchSet successfully', function(done) {
        //uncomment below and update the code to test updateByteMatchSet
        //instance.updateByteMatchSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateGeoMatchSet', function() {
      it('should call updateGeoMatchSet successfully', function(done) {
        //uncomment below and update the code to test updateGeoMatchSet
        //instance.updateGeoMatchSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateIPSet', function() {
      it('should call updateIPSet successfully', function(done) {
        //uncomment below and update the code to test updateIPSet
        //instance.updateIPSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRateBasedRule', function() {
      it('should call updateRateBasedRule successfully', function(done) {
        //uncomment below and update the code to test updateRateBasedRule
        //instance.updateRateBasedRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRegexMatchSet', function() {
      it('should call updateRegexMatchSet successfully', function(done) {
        //uncomment below and update the code to test updateRegexMatchSet
        //instance.updateRegexMatchSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRegexPatternSet', function() {
      it('should call updateRegexPatternSet successfully', function(done) {
        //uncomment below and update the code to test updateRegexPatternSet
        //instance.updateRegexPatternSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRule', function() {
      it('should call updateRule successfully', function(done) {
        //uncomment below and update the code to test updateRule
        //instance.updateRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRuleGroup', function() {
      it('should call updateRuleGroup successfully', function(done) {
        //uncomment below and update the code to test updateRuleGroup
        //instance.updateRuleGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSizeConstraintSet', function() {
      it('should call updateSizeConstraintSet successfully', function(done) {
        //uncomment below and update the code to test updateSizeConstraintSet
        //instance.updateSizeConstraintSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSqlInjectionMatchSet', function() {
      it('should call updateSqlInjectionMatchSet successfully', function(done) {
        //uncomment below and update the code to test updateSqlInjectionMatchSet
        //instance.updateSqlInjectionMatchSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateWebACL', function() {
      it('should call updateWebACL successfully', function(done) {
        //uncomment below and update the code to test updateWebACL
        //instance.updateWebACL(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateXssMatchSet', function() {
      it('should call updateXssMatchSet successfully', function(done) {
        //uncomment below and update the code to test updateXssMatchSet
        //instance.updateXssMatchSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
