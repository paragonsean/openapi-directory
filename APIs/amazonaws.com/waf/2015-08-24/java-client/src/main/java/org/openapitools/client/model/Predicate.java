/*
 * AWS WAF
 * <note> <p>This is <b>AWS WAF Classic</b> documentation. For more information, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p> <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p> </note> <p>This is the <i>AWS WAF Classic API Reference</i> for using AWS WAF Classic with Amazon CloudFront. The AWS WAF Classic actions and data types listed in the reference are available for protecting Amazon CloudFront distributions. You can use these actions and data types via the endpoint <i>waf.amazonaws.com</i>. This guide is for developers who need detailed information about the AWS WAF Classic API actions, data types, and errors. For detailed information about AWS WAF Classic features and an overview of how to use the AWS WAF Classic API, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p>
 *
 * The version of the OpenAPI document: 2015-08-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PredicateType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Specifies the &lt;a&gt;ByteMatchSet&lt;/a&gt;, &lt;a&gt;IPSet&lt;/a&gt;, &lt;a&gt;SqlInjectionMatchSet&lt;/a&gt;, &lt;a&gt;XssMatchSet&lt;/a&gt;, &lt;a&gt;RegexMatchSet&lt;/a&gt;, &lt;a&gt;GeoMatchSet&lt;/a&gt;, and &lt;a&gt;SizeConstraintSet&lt;/a&gt; objects that you want to add to a &lt;code&gt;Rule&lt;/code&gt; and, for each object, indicates whether you want to negate the settings, for example, requests that do NOT originate from the IP address 192.0.2.44. &lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:24.665615-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Predicate {
  public static final String SERIALIZED_NAME_NEGATED = "Negated";
  @SerializedName(SERIALIZED_NAME_NEGATED)
  private Boolean negated;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private PredicateType type;

  public static final String SERIALIZED_NAME_DATA_ID = "DataId";
  @SerializedName(SERIALIZED_NAME_DATA_ID)
  private String dataId;

  public Predicate() {
  }

  public Predicate negated(Boolean negated) {
    this.negated = negated;
    return this;
  }

  /**
   * Get negated
   * @return negated
   */
  @javax.annotation.Nonnull
  public Boolean getNegated() {
    return negated;
  }

  public void setNegated(Boolean negated) {
    this.negated = negated;
  }


  public Predicate type(PredicateType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public PredicateType getType() {
    return type;
  }

  public void setType(PredicateType type) {
    this.type = type;
  }


  public Predicate dataId(String dataId) {
    this.dataId = dataId;
    return this;
  }

  /**
   * Get dataId
   * @return dataId
   */
  @javax.annotation.Nonnull
  public String getDataId() {
    return dataId;
  }

  public void setDataId(String dataId) {
    this.dataId = dataId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Predicate predicate = (Predicate) o;
    return Objects.equals(this.negated, predicate.negated) &&
        Objects.equals(this.type, predicate.type) &&
        Objects.equals(this.dataId, predicate.dataId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(negated, type, dataId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Predicate {\n");
    sb.append("    negated: ").append(toIndentedString(negated)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    dataId: ").append(toIndentedString(dataId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Negated");
    openapiFields.add("Type");
    openapiFields.add("DataId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Negated");
    openapiRequiredFields.add("Type");
    openapiRequiredFields.add("DataId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Predicate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Predicate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Predicate is not found in the empty JSON string", Predicate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Predicate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Predicate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Predicate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Negated`
      Boolean.validateJsonElement(jsonObj.get("Negated"));
      // validate the required field `Type`
      PredicateType.validateJsonElement(jsonObj.get("Type"));
      // validate the required field `DataId`
      String.validateJsonElement(jsonObj.get("DataId"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Predicate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Predicate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Predicate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Predicate.class));

       return (TypeAdapter<T>) new TypeAdapter<Predicate>() {
           @Override
           public void write(JsonWriter out, Predicate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Predicate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Predicate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Predicate
   * @throws IOException if the JSON string is invalid with respect to Predicate
   */
  public static Predicate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Predicate.class);
  }

  /**
   * Convert an instance of Predicate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

