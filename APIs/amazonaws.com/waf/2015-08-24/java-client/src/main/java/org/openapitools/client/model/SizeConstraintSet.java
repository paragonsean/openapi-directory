/*
 * AWS WAF
 * <note> <p>This is <b>AWS WAF Classic</b> documentation. For more information, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p> <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p> </note> <p>This is the <i>AWS WAF Classic API Reference</i> for using AWS WAF Classic with Amazon CloudFront. The AWS WAF Classic actions and data types listed in the reference are available for protecting Amazon CloudFront distributions. You can use these actions and data types via the endpoint <i>waf.amazonaws.com</i>. This guide is for developers who need detailed information about the AWS WAF Classic API actions, data types, and errors. For detailed information about AWS WAF Classic features and an overview of how to use the AWS WAF Classic API, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p>
 *
 * The version of the OpenAPI document: 2015-08-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;A complex type that contains &lt;code&gt;SizeConstraint&lt;/code&gt; objects, which specify the parts of web requests that you want AWS WAF to inspect the size of. If a &lt;code&gt;SizeConstraintSet&lt;/code&gt; contains more than one &lt;code&gt;SizeConstraint&lt;/code&gt; object, a request only needs to match one constraint to be considered a match.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:24.665615-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SizeConstraintSet {
  public static final String SERIALIZED_NAME_SIZE_CONSTRAINT_SET_ID = "SizeConstraintSetId";
  @SerializedName(SERIALIZED_NAME_SIZE_CONSTRAINT_SET_ID)
  private String sizeConstraintSetId;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SIZE_CONSTRAINTS = "SizeConstraints";
  @SerializedName(SERIALIZED_NAME_SIZE_CONSTRAINTS)
  private List sizeConstraints;

  public SizeConstraintSet() {
  }

  public SizeConstraintSet sizeConstraintSetId(String sizeConstraintSetId) {
    this.sizeConstraintSetId = sizeConstraintSetId;
    return this;
  }

  /**
   * Get sizeConstraintSetId
   * @return sizeConstraintSetId
   */
  @javax.annotation.Nonnull
  public String getSizeConstraintSetId() {
    return sizeConstraintSetId;
  }

  public void setSizeConstraintSetId(String sizeConstraintSetId) {
    this.sizeConstraintSetId = sizeConstraintSetId;
  }


  public SizeConstraintSet name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SizeConstraintSet sizeConstraints(List sizeConstraints) {
    this.sizeConstraints = sizeConstraints;
    return this;
  }

  /**
   * Get sizeConstraints
   * @return sizeConstraints
   */
  @javax.annotation.Nonnull
  public List getSizeConstraints() {
    return sizeConstraints;
  }

  public void setSizeConstraints(List sizeConstraints) {
    this.sizeConstraints = sizeConstraints;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SizeConstraintSet sizeConstraintSet = (SizeConstraintSet) o;
    return Objects.equals(this.sizeConstraintSetId, sizeConstraintSet.sizeConstraintSetId) &&
        Objects.equals(this.name, sizeConstraintSet.name) &&
        Objects.equals(this.sizeConstraints, sizeConstraintSet.sizeConstraints);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sizeConstraintSetId, name, sizeConstraints);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SizeConstraintSet {\n");
    sb.append("    sizeConstraintSetId: ").append(toIndentedString(sizeConstraintSetId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sizeConstraints: ").append(toIndentedString(sizeConstraints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SizeConstraintSetId");
    openapiFields.add("Name");
    openapiFields.add("SizeConstraints");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SizeConstraintSetId");
    openapiRequiredFields.add("SizeConstraints");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SizeConstraintSet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SizeConstraintSet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SizeConstraintSet is not found in the empty JSON string", SizeConstraintSet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SizeConstraintSet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SizeConstraintSet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SizeConstraintSet.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `SizeConstraintSetId`
      String.validateJsonElement(jsonObj.get("SizeConstraintSetId"));
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the required field `SizeConstraints`
      List.validateJsonElement(jsonObj.get("SizeConstraints"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SizeConstraintSet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SizeConstraintSet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SizeConstraintSet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SizeConstraintSet.class));

       return (TypeAdapter<T>) new TypeAdapter<SizeConstraintSet>() {
           @Override
           public void write(JsonWriter out, SizeConstraintSet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SizeConstraintSet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SizeConstraintSet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SizeConstraintSet
   * @throws IOException if the JSON string is invalid with respect to SizeConstraintSet
   */
  public static SizeConstraintSet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SizeConstraintSet.class);
  }

  /**
   * Convert an instance of SizeConstraintSet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

