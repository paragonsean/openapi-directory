/*
 * AWS WAF
 * <note> <p>This is <b>AWS WAF Classic</b> documentation. For more information, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p> <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p> </note> <p>This is the <i>AWS WAF Classic API Reference</i> for using AWS WAF Classic with Amazon CloudFront. The AWS WAF Classic actions and data types listed in the reference are available for protecting Amazon CloudFront distributions. You can use these actions and data types via the endpoint <i>waf.amazonaws.com</i>. This guide is for developers who need detailed information about the AWS WAF Classic API actions, data types, and errors. For detailed information about AWS WAF Classic features and an overview of how to use the AWS WAF Classic API, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p>
 *
 * The version of the OpenAPI document: 2015-08-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.SampledHTTPRequestRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;note&gt; &lt;p&gt;This is &lt;b&gt;AWS WAF Classic&lt;/b&gt; documentation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\&quot;&gt;AWS WAF Classic&lt;/a&gt; in the developer guide.&lt;/p&gt; &lt;p&gt; &lt;b&gt;For the latest version of AWS WAF&lt;/b&gt;, use the AWS WAFV2 API and see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;AWS WAF Developer Guide&lt;/a&gt;. With the latest version, AWS WAF has a single set of endpoints for regional and global use. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;The response from a &lt;a&gt;GetSampledRequests&lt;/a&gt; request includes a &lt;code&gt;SampledHTTPRequests&lt;/code&gt; complex type that appears as &lt;code&gt;SampledRequests&lt;/code&gt; in the response syntax. &lt;code&gt;SampledHTTPRequests&lt;/code&gt; contains one &lt;code&gt;SampledHTTPRequest&lt;/code&gt; object for each web request that is returned by &lt;code&gt;GetSampledRequests&lt;/code&gt;.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:24.665615-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SampledHTTPRequest {
  public static final String SERIALIZED_NAME_REQUEST = "Request";
  @SerializedName(SERIALIZED_NAME_REQUEST)
  private SampledHTTPRequestRequest request;

  public static final String SERIALIZED_NAME_WEIGHT = "Weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Integer weight;

  public static final String SERIALIZED_NAME_TIMESTAMP = "Timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_ACTION = "Action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_RULE_WITHIN_RULE_GROUP = "RuleWithinRuleGroup";
  @SerializedName(SERIALIZED_NAME_RULE_WITHIN_RULE_GROUP)
  private String ruleWithinRuleGroup;

  public SampledHTTPRequest() {
  }

  public SampledHTTPRequest request(SampledHTTPRequestRequest request) {
    this.request = request;
    return this;
  }

  /**
   * Get request
   * @return request
   */
  @javax.annotation.Nonnull
  public SampledHTTPRequestRequest getRequest() {
    return request;
  }

  public void setRequest(SampledHTTPRequestRequest request) {
    this.request = request;
  }


  public SampledHTTPRequest weight(Integer weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Get weight
   * @return weight
   */
  @javax.annotation.Nonnull
  public Integer getWeight() {
    return weight;
  }

  public void setWeight(Integer weight) {
    this.weight = weight;
  }


  public SampledHTTPRequest timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public SampledHTTPRequest action(String action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nullable
  public String getAction() {
    return action;
  }

  public void setAction(String action) {
    this.action = action;
  }


  public SampledHTTPRequest ruleWithinRuleGroup(String ruleWithinRuleGroup) {
    this.ruleWithinRuleGroup = ruleWithinRuleGroup;
    return this;
  }

  /**
   * Get ruleWithinRuleGroup
   * @return ruleWithinRuleGroup
   */
  @javax.annotation.Nullable
  public String getRuleWithinRuleGroup() {
    return ruleWithinRuleGroup;
  }

  public void setRuleWithinRuleGroup(String ruleWithinRuleGroup) {
    this.ruleWithinRuleGroup = ruleWithinRuleGroup;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SampledHTTPRequest sampledHTTPRequest = (SampledHTTPRequest) o;
    return Objects.equals(this.request, sampledHTTPRequest.request) &&
        Objects.equals(this.weight, sampledHTTPRequest.weight) &&
        Objects.equals(this.timestamp, sampledHTTPRequest.timestamp) &&
        Objects.equals(this.action, sampledHTTPRequest.action) &&
        Objects.equals(this.ruleWithinRuleGroup, sampledHTTPRequest.ruleWithinRuleGroup);
  }

  @Override
  public int hashCode() {
    return Objects.hash(request, weight, timestamp, action, ruleWithinRuleGroup);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SampledHTTPRequest {\n");
    sb.append("    request: ").append(toIndentedString(request)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    ruleWithinRuleGroup: ").append(toIndentedString(ruleWithinRuleGroup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Request");
    openapiFields.add("Weight");
    openapiFields.add("Timestamp");
    openapiFields.add("Action");
    openapiFields.add("RuleWithinRuleGroup");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Request");
    openapiRequiredFields.add("Weight");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SampledHTTPRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SampledHTTPRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SampledHTTPRequest is not found in the empty JSON string", SampledHTTPRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SampledHTTPRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SampledHTTPRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SampledHTTPRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Request`
      SampledHTTPRequestRequest.validateJsonElement(jsonObj.get("Request"));
      // validate the required field `Weight`
      Integer.validateJsonElement(jsonObj.get("Weight"));
      // validate the optional field `Timestamp`
      if (jsonObj.get("Timestamp") != null && !jsonObj.get("Timestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("Timestamp"));
      }
      // validate the optional field `Action`
      if (jsonObj.get("Action") != null && !jsonObj.get("Action").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Action"));
      }
      // validate the optional field `RuleWithinRuleGroup`
      if (jsonObj.get("RuleWithinRuleGroup") != null && !jsonObj.get("RuleWithinRuleGroup").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RuleWithinRuleGroup"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SampledHTTPRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SampledHTTPRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SampledHTTPRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SampledHTTPRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SampledHTTPRequest>() {
           @Override
           public void write(JsonWriter out, SampledHTTPRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SampledHTTPRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SampledHTTPRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SampledHTTPRequest
   * @throws IOException if the JSON string is invalid with respect to SampledHTTPRequest
   */
  public static SampledHTTPRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SampledHTTPRequest.class);
  }

  /**
   * Convert an instance of SampledHTTPRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

