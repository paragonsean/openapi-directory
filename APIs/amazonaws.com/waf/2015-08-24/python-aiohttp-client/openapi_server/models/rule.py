# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Rule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rule_id: str=None, name: str=None, metric_name: str=None, predicates: List=None):
        """Rule - a model defined in OpenAPI

        :param rule_id: The rule_id of this Rule.
        :param name: The name of this Rule.
        :param metric_name: The metric_name of this Rule.
        :param predicates: The predicates of this Rule.
        """
        self.openapi_types = {
            'rule_id': str,
            'name': str,
            'metric_name': str,
            'predicates': List
        }

        self.attribute_map = {
            'rule_id': 'RuleId',
            'name': 'Name',
            'metric_name': 'MetricName',
            'predicates': 'Predicates'
        }

        self._rule_id = rule_id
        self._name = name
        self._metric_name = metric_name
        self._predicates = predicates

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Rule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Rule of this Rule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rule_id(self):
        """Gets the rule_id of this Rule.


        :return: The rule_id of this Rule.
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this Rule.


        :param rule_id: The rule_id of this Rule.
        :type rule_id: str
        """
        if rule_id is None:
            raise ValueError("Invalid value for `rule_id`, must not be `None`")

        self._rule_id = rule_id

    @property
    def name(self):
        """Gets the name of this Rule.


        :return: The name of this Rule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Rule.


        :param name: The name of this Rule.
        :type name: str
        """

        self._name = name

    @property
    def metric_name(self):
        """Gets the metric_name of this Rule.


        :return: The metric_name of this Rule.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this Rule.


        :param metric_name: The metric_name of this Rule.
        :type metric_name: str
        """

        self._metric_name = metric_name

    @property
    def predicates(self):
        """Gets the predicates of this Rule.


        :return: The predicates of this Rule.
        :rtype: List
        """
        return self._predicates

    @predicates.setter
    def predicates(self, predicates):
        """Sets the predicates of this Rule.


        :param predicates: The predicates of this Rule.
        :type predicates: List
        """
        if predicates is None:
            raise ValueError("Invalid value for `predicates`, must not be `None`")

        self._predicates = predicates
