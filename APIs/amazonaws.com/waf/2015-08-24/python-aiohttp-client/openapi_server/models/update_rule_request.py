# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateRuleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rule_id: str=None, change_token: str=None, updates: List=None):
        """UpdateRuleRequest - a model defined in OpenAPI

        :param rule_id: The rule_id of this UpdateRuleRequest.
        :param change_token: The change_token of this UpdateRuleRequest.
        :param updates: The updates of this UpdateRuleRequest.
        """
        self.openapi_types = {
            'rule_id': str,
            'change_token': str,
            'updates': List
        }

        self.attribute_map = {
            'rule_id': 'RuleId',
            'change_token': 'ChangeToken',
            'updates': 'Updates'
        }

        self._rule_id = rule_id
        self._change_token = change_token
        self._updates = updates

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateRuleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateRuleRequest of this UpdateRuleRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rule_id(self):
        """Gets the rule_id of this UpdateRuleRequest.


        :return: The rule_id of this UpdateRuleRequest.
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this UpdateRuleRequest.


        :param rule_id: The rule_id of this UpdateRuleRequest.
        :type rule_id: str
        """
        if rule_id is None:
            raise ValueError("Invalid value for `rule_id`, must not be `None`")

        self._rule_id = rule_id

    @property
    def change_token(self):
        """Gets the change_token of this UpdateRuleRequest.


        :return: The change_token of this UpdateRuleRequest.
        :rtype: str
        """
        return self._change_token

    @change_token.setter
    def change_token(self, change_token):
        """Sets the change_token of this UpdateRuleRequest.


        :param change_token: The change_token of this UpdateRuleRequest.
        :type change_token: str
        """
        if change_token is None:
            raise ValueError("Invalid value for `change_token`, must not be `None`")

        self._change_token = change_token

    @property
    def updates(self):
        """Gets the updates of this UpdateRuleRequest.


        :return: The updates of this UpdateRuleRequest.
        :rtype: List
        """
        return self._updates

    @updates.setter
    def updates(self, updates):
        """Sets the updates of this UpdateRuleRequest.


        :param updates: The updates of this UpdateRuleRequest.
        :type updates: List
        """
        if updates is None:
            raise ValueError("Invalid value for `updates`, must not be `None`")

        self._updates = updates
