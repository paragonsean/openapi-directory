# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.byte_match_tuple_field_to_match import ByteMatchTupleFieldToMatch
from openapi_server.models.positional_constraint import PositionalConstraint
from openapi_server.models.text_transformation import TextTransformation
from openapi_server import util


class ByteMatchSetUpdateByteMatchTuple(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, field_to_match: ByteMatchTupleFieldToMatch=None, target_string: str=None, text_transformation: TextTransformation=None, positional_constraint: PositionalConstraint=None):
        """ByteMatchSetUpdateByteMatchTuple - a model defined in OpenAPI

        :param field_to_match: The field_to_match of this ByteMatchSetUpdateByteMatchTuple.
        :param target_string: The target_string of this ByteMatchSetUpdateByteMatchTuple.
        :param text_transformation: The text_transformation of this ByteMatchSetUpdateByteMatchTuple.
        :param positional_constraint: The positional_constraint of this ByteMatchSetUpdateByteMatchTuple.
        """
        self.openapi_types = {
            'field_to_match': ByteMatchTupleFieldToMatch,
            'target_string': str,
            'text_transformation': TextTransformation,
            'positional_constraint': PositionalConstraint
        }

        self.attribute_map = {
            'field_to_match': 'FieldToMatch',
            'target_string': 'TargetString',
            'text_transformation': 'TextTransformation',
            'positional_constraint': 'PositionalConstraint'
        }

        self._field_to_match = field_to_match
        self._target_string = target_string
        self._text_transformation = text_transformation
        self._positional_constraint = positional_constraint

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ByteMatchSetUpdateByteMatchTuple':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ByteMatchSetUpdate_ByteMatchTuple of this ByteMatchSetUpdateByteMatchTuple.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def field_to_match(self):
        """Gets the field_to_match of this ByteMatchSetUpdateByteMatchTuple.


        :return: The field_to_match of this ByteMatchSetUpdateByteMatchTuple.
        :rtype: ByteMatchTupleFieldToMatch
        """
        return self._field_to_match

    @field_to_match.setter
    def field_to_match(self, field_to_match):
        """Sets the field_to_match of this ByteMatchSetUpdateByteMatchTuple.


        :param field_to_match: The field_to_match of this ByteMatchSetUpdateByteMatchTuple.
        :type field_to_match: ByteMatchTupleFieldToMatch
        """
        if field_to_match is None:
            raise ValueError("Invalid value for `field_to_match`, must not be `None`")

        self._field_to_match = field_to_match

    @property
    def target_string(self):
        """Gets the target_string of this ByteMatchSetUpdateByteMatchTuple.


        :return: The target_string of this ByteMatchSetUpdateByteMatchTuple.
        :rtype: str
        """
        return self._target_string

    @target_string.setter
    def target_string(self, target_string):
        """Sets the target_string of this ByteMatchSetUpdateByteMatchTuple.


        :param target_string: The target_string of this ByteMatchSetUpdateByteMatchTuple.
        :type target_string: str
        """
        if target_string is None:
            raise ValueError("Invalid value for `target_string`, must not be `None`")

        self._target_string = target_string

    @property
    def text_transformation(self):
        """Gets the text_transformation of this ByteMatchSetUpdateByteMatchTuple.


        :return: The text_transformation of this ByteMatchSetUpdateByteMatchTuple.
        :rtype: TextTransformation
        """
        return self._text_transformation

    @text_transformation.setter
    def text_transformation(self, text_transformation):
        """Sets the text_transformation of this ByteMatchSetUpdateByteMatchTuple.


        :param text_transformation: The text_transformation of this ByteMatchSetUpdateByteMatchTuple.
        :type text_transformation: TextTransformation
        """
        if text_transformation is None:
            raise ValueError("Invalid value for `text_transformation`, must not be `None`")

        self._text_transformation = text_transformation

    @property
    def positional_constraint(self):
        """Gets the positional_constraint of this ByteMatchSetUpdateByteMatchTuple.


        :return: The positional_constraint of this ByteMatchSetUpdateByteMatchTuple.
        :rtype: PositionalConstraint
        """
        return self._positional_constraint

    @positional_constraint.setter
    def positional_constraint(self, positional_constraint):
        """Sets the positional_constraint of this ByteMatchSetUpdateByteMatchTuple.


        :param positional_constraint: The positional_constraint of this ByteMatchSetUpdateByteMatchTuple.
        :type positional_constraint: PositionalConstraint
        """
        if positional_constraint is None:
            raise ValueError("Invalid value for `positional_constraint`, must not be `None`")

        self._positional_constraint = positional_constraint
