# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.change_action import ChangeAction
from openapi_server.models.size_constraint_set_update_size_constraint import SizeConstraintSetUpdateSizeConstraint
from openapi_server import util


class SizeConstraintSetUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: ChangeAction=None, size_constraint: SizeConstraintSetUpdateSizeConstraint=None):
        """SizeConstraintSetUpdate - a model defined in OpenAPI

        :param action: The action of this SizeConstraintSetUpdate.
        :param size_constraint: The size_constraint of this SizeConstraintSetUpdate.
        """
        self.openapi_types = {
            'action': ChangeAction,
            'size_constraint': SizeConstraintSetUpdateSizeConstraint
        }

        self.attribute_map = {
            'action': 'Action',
            'size_constraint': 'SizeConstraint'
        }

        self._action = action
        self._size_constraint = size_constraint

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SizeConstraintSetUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SizeConstraintSetUpdate of this SizeConstraintSetUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this SizeConstraintSetUpdate.


        :return: The action of this SizeConstraintSetUpdate.
        :rtype: ChangeAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this SizeConstraintSetUpdate.


        :param action: The action of this SizeConstraintSetUpdate.
        :type action: ChangeAction
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def size_constraint(self):
        """Gets the size_constraint of this SizeConstraintSetUpdate.


        :return: The size_constraint of this SizeConstraintSetUpdate.
        :rtype: SizeConstraintSetUpdateSizeConstraint
        """
        return self._size_constraint

    @size_constraint.setter
    def size_constraint(self, size_constraint):
        """Sets the size_constraint of this SizeConstraintSetUpdate.


        :param size_constraint: The size_constraint of this SizeConstraintSetUpdate.
        :type size_constraint: SizeConstraintSetUpdateSizeConstraint
        """
        if size_constraint is None:
            raise ValueError("Invalid value for `size_constraint`, must not be `None`")

        self._size_constraint = size_constraint
