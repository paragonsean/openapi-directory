# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetIPSetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip_set_id: str=None):
        """GetIPSetRequest - a model defined in OpenAPI

        :param ip_set_id: The ip_set_id of this GetIPSetRequest.
        """
        self.openapi_types = {
            'ip_set_id': str
        }

        self.attribute_map = {
            'ip_set_id': 'IPSetId'
        }

        self._ip_set_id = ip_set_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetIPSetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetIPSetRequest of this GetIPSetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip_set_id(self):
        """Gets the ip_set_id of this GetIPSetRequest.


        :return: The ip_set_id of this GetIPSetRequest.
        :rtype: str
        """
        return self._ip_set_id

    @ip_set_id.setter
    def ip_set_id(self, ip_set_id):
        """Sets the ip_set_id of this GetIPSetRequest.


        :param ip_set_id: The ip_set_id of this GetIPSetRequest.
        :type ip_set_id: str
        """
        if ip_set_id is None:
            raise ValueError("Invalid value for `ip_set_id`, must not be `None`")

        self._ip_set_id = ip_set_id
