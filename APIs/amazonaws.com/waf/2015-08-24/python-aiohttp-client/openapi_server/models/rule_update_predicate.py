# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.predicate_type import PredicateType
from openapi_server import util


class RuleUpdatePredicate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, negated: bool=None, type: PredicateType=None, data_id: str=None):
        """RuleUpdatePredicate - a model defined in OpenAPI

        :param negated: The negated of this RuleUpdatePredicate.
        :param type: The type of this RuleUpdatePredicate.
        :param data_id: The data_id of this RuleUpdatePredicate.
        """
        self.openapi_types = {
            'negated': bool,
            'type': PredicateType,
            'data_id': str
        }

        self.attribute_map = {
            'negated': 'Negated',
            'type': 'Type',
            'data_id': 'DataId'
        }

        self._negated = negated
        self._type = type
        self._data_id = data_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleUpdatePredicate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RuleUpdate_Predicate of this RuleUpdatePredicate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def negated(self):
        """Gets the negated of this RuleUpdatePredicate.


        :return: The negated of this RuleUpdatePredicate.
        :rtype: bool
        """
        return self._negated

    @negated.setter
    def negated(self, negated):
        """Sets the negated of this RuleUpdatePredicate.


        :param negated: The negated of this RuleUpdatePredicate.
        :type negated: bool
        """
        if negated is None:
            raise ValueError("Invalid value for `negated`, must not be `None`")

        self._negated = negated

    @property
    def type(self):
        """Gets the type of this RuleUpdatePredicate.


        :return: The type of this RuleUpdatePredicate.
        :rtype: PredicateType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RuleUpdatePredicate.


        :param type: The type of this RuleUpdatePredicate.
        :type type: PredicateType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def data_id(self):
        """Gets the data_id of this RuleUpdatePredicate.


        :return: The data_id of this RuleUpdatePredicate.
        :rtype: str
        """
        return self._data_id

    @data_id.setter
    def data_id(self, data_id):
        """Sets the data_id of this RuleUpdatePredicate.


        :param data_id: The data_id of this RuleUpdatePredicate.
        :type data_id: str
        """
        if data_id is None:
            raise ValueError("Invalid value for `data_id`, must not be `None`")

        self._data_id = data_id
