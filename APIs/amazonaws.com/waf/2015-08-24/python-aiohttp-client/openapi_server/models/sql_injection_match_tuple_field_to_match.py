# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.match_field_type import MatchFieldType
from openapi_server import util


class SqlInjectionMatchTupleFieldToMatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: MatchFieldType=None, data: str=None):
        """SqlInjectionMatchTupleFieldToMatch - a model defined in OpenAPI

        :param type: The type of this SqlInjectionMatchTupleFieldToMatch.
        :param data: The data of this SqlInjectionMatchTupleFieldToMatch.
        """
        self.openapi_types = {
            'type': MatchFieldType,
            'data': str
        }

        self.attribute_map = {
            'type': 'Type',
            'data': 'Data'
        }

        self._type = type
        self._data = data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SqlInjectionMatchTupleFieldToMatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SqlInjectionMatchTuple_FieldToMatch of this SqlInjectionMatchTupleFieldToMatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this SqlInjectionMatchTupleFieldToMatch.


        :return: The type of this SqlInjectionMatchTupleFieldToMatch.
        :rtype: MatchFieldType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SqlInjectionMatchTupleFieldToMatch.


        :param type: The type of this SqlInjectionMatchTupleFieldToMatch.
        :type type: MatchFieldType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def data(self):
        """Gets the data of this SqlInjectionMatchTupleFieldToMatch.


        :return: The data of this SqlInjectionMatchTupleFieldToMatch.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this SqlInjectionMatchTupleFieldToMatch.


        :param data: The data of this SqlInjectionMatchTupleFieldToMatch.
        :type data: str
        """

        self._data = data
