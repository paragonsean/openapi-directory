# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateRateBasedRuleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rule_id: str=None, change_token: str=None, updates: List=None, rate_limit: int=None):
        """UpdateRateBasedRuleRequest - a model defined in OpenAPI

        :param rule_id: The rule_id of this UpdateRateBasedRuleRequest.
        :param change_token: The change_token of this UpdateRateBasedRuleRequest.
        :param updates: The updates of this UpdateRateBasedRuleRequest.
        :param rate_limit: The rate_limit of this UpdateRateBasedRuleRequest.
        """
        self.openapi_types = {
            'rule_id': str,
            'change_token': str,
            'updates': List,
            'rate_limit': int
        }

        self.attribute_map = {
            'rule_id': 'RuleId',
            'change_token': 'ChangeToken',
            'updates': 'Updates',
            'rate_limit': 'RateLimit'
        }

        self._rule_id = rule_id
        self._change_token = change_token
        self._updates = updates
        self._rate_limit = rate_limit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateRateBasedRuleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateRateBasedRuleRequest of this UpdateRateBasedRuleRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rule_id(self):
        """Gets the rule_id of this UpdateRateBasedRuleRequest.


        :return: The rule_id of this UpdateRateBasedRuleRequest.
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this UpdateRateBasedRuleRequest.


        :param rule_id: The rule_id of this UpdateRateBasedRuleRequest.
        :type rule_id: str
        """
        if rule_id is None:
            raise ValueError("Invalid value for `rule_id`, must not be `None`")

        self._rule_id = rule_id

    @property
    def change_token(self):
        """Gets the change_token of this UpdateRateBasedRuleRequest.


        :return: The change_token of this UpdateRateBasedRuleRequest.
        :rtype: str
        """
        return self._change_token

    @change_token.setter
    def change_token(self, change_token):
        """Sets the change_token of this UpdateRateBasedRuleRequest.


        :param change_token: The change_token of this UpdateRateBasedRuleRequest.
        :type change_token: str
        """
        if change_token is None:
            raise ValueError("Invalid value for `change_token`, must not be `None`")

        self._change_token = change_token

    @property
    def updates(self):
        """Gets the updates of this UpdateRateBasedRuleRequest.


        :return: The updates of this UpdateRateBasedRuleRequest.
        :rtype: List
        """
        return self._updates

    @updates.setter
    def updates(self, updates):
        """Sets the updates of this UpdateRateBasedRuleRequest.


        :param updates: The updates of this UpdateRateBasedRuleRequest.
        :type updates: List
        """
        if updates is None:
            raise ValueError("Invalid value for `updates`, must not be `None`")

        self._updates = updates

    @property
    def rate_limit(self):
        """Gets the rate_limit of this UpdateRateBasedRuleRequest.


        :return: The rate_limit of this UpdateRateBasedRuleRequest.
        :rtype: int
        """
        return self._rate_limit

    @rate_limit.setter
    def rate_limit(self, rate_limit):
        """Sets the rate_limit of this UpdateRateBasedRuleRequest.


        :param rate_limit: The rate_limit of this UpdateRateBasedRuleRequest.
        :type rate_limit: int
        """
        if rate_limit is None:
            raise ValueError("Invalid value for `rate_limit`, must not be `None`")

        self._rate_limit = rate_limit
