# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rate_key import RateKey
from openapi_server import util


class RateBasedRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rule_id: str=None, name: str=None, metric_name: str=None, match_predicates: List=None, rate_key: RateKey=None, rate_limit: int=None):
        """RateBasedRule - a model defined in OpenAPI

        :param rule_id: The rule_id of this RateBasedRule.
        :param name: The name of this RateBasedRule.
        :param metric_name: The metric_name of this RateBasedRule.
        :param match_predicates: The match_predicates of this RateBasedRule.
        :param rate_key: The rate_key of this RateBasedRule.
        :param rate_limit: The rate_limit of this RateBasedRule.
        """
        self.openapi_types = {
            'rule_id': str,
            'name': str,
            'metric_name': str,
            'match_predicates': List,
            'rate_key': RateKey,
            'rate_limit': int
        }

        self.attribute_map = {
            'rule_id': 'RuleId',
            'name': 'Name',
            'metric_name': 'MetricName',
            'match_predicates': 'MatchPredicates',
            'rate_key': 'RateKey',
            'rate_limit': 'RateLimit'
        }

        self._rule_id = rule_id
        self._name = name
        self._metric_name = metric_name
        self._match_predicates = match_predicates
        self._rate_key = rate_key
        self._rate_limit = rate_limit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RateBasedRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RateBasedRule of this RateBasedRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rule_id(self):
        """Gets the rule_id of this RateBasedRule.


        :return: The rule_id of this RateBasedRule.
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this RateBasedRule.


        :param rule_id: The rule_id of this RateBasedRule.
        :type rule_id: str
        """
        if rule_id is None:
            raise ValueError("Invalid value for `rule_id`, must not be `None`")

        self._rule_id = rule_id

    @property
    def name(self):
        """Gets the name of this RateBasedRule.


        :return: The name of this RateBasedRule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RateBasedRule.


        :param name: The name of this RateBasedRule.
        :type name: str
        """

        self._name = name

    @property
    def metric_name(self):
        """Gets the metric_name of this RateBasedRule.


        :return: The metric_name of this RateBasedRule.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this RateBasedRule.


        :param metric_name: The metric_name of this RateBasedRule.
        :type metric_name: str
        """

        self._metric_name = metric_name

    @property
    def match_predicates(self):
        """Gets the match_predicates of this RateBasedRule.


        :return: The match_predicates of this RateBasedRule.
        :rtype: List
        """
        return self._match_predicates

    @match_predicates.setter
    def match_predicates(self, match_predicates):
        """Sets the match_predicates of this RateBasedRule.


        :param match_predicates: The match_predicates of this RateBasedRule.
        :type match_predicates: List
        """
        if match_predicates is None:
            raise ValueError("Invalid value for `match_predicates`, must not be `None`")

        self._match_predicates = match_predicates

    @property
    def rate_key(self):
        """Gets the rate_key of this RateBasedRule.


        :return: The rate_key of this RateBasedRule.
        :rtype: RateKey
        """
        return self._rate_key

    @rate_key.setter
    def rate_key(self, rate_key):
        """Sets the rate_key of this RateBasedRule.


        :param rate_key: The rate_key of this RateBasedRule.
        :type rate_key: RateKey
        """
        if rate_key is None:
            raise ValueError("Invalid value for `rate_key`, must not be `None`")

        self._rate_key = rate_key

    @property
    def rate_limit(self):
        """Gets the rate_limit of this RateBasedRule.


        :return: The rate_limit of this RateBasedRule.
        :rtype: int
        """
        return self._rate_limit

    @rate_limit.setter
    def rate_limit(self, rate_limit):
        """Sets the rate_limit of this RateBasedRule.


        :param rate_limit: The rate_limit of this RateBasedRule.
        :type rate_limit: int
        """
        if rate_limit is None:
            raise ValueError("Invalid value for `rate_limit`, must not be `None`")

        self._rate_limit = rate_limit
