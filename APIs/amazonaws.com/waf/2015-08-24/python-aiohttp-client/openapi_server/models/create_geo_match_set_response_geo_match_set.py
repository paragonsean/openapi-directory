# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateGeoMatchSetResponseGeoMatchSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, geo_match_set_id: str=None, name: str=None, geo_match_constraints: List=None):
        """CreateGeoMatchSetResponseGeoMatchSet - a model defined in OpenAPI

        :param geo_match_set_id: The geo_match_set_id of this CreateGeoMatchSetResponseGeoMatchSet.
        :param name: The name of this CreateGeoMatchSetResponseGeoMatchSet.
        :param geo_match_constraints: The geo_match_constraints of this CreateGeoMatchSetResponseGeoMatchSet.
        """
        self.openapi_types = {
            'geo_match_set_id': str,
            'name': str,
            'geo_match_constraints': List
        }

        self.attribute_map = {
            'geo_match_set_id': 'GeoMatchSetId',
            'name': 'Name',
            'geo_match_constraints': 'GeoMatchConstraints'
        }

        self._geo_match_set_id = geo_match_set_id
        self._name = name
        self._geo_match_constraints = geo_match_constraints

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateGeoMatchSetResponseGeoMatchSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateGeoMatchSetResponse_GeoMatchSet of this CreateGeoMatchSetResponseGeoMatchSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def geo_match_set_id(self):
        """Gets the geo_match_set_id of this CreateGeoMatchSetResponseGeoMatchSet.


        :return: The geo_match_set_id of this CreateGeoMatchSetResponseGeoMatchSet.
        :rtype: str
        """
        return self._geo_match_set_id

    @geo_match_set_id.setter
    def geo_match_set_id(self, geo_match_set_id):
        """Sets the geo_match_set_id of this CreateGeoMatchSetResponseGeoMatchSet.


        :param geo_match_set_id: The geo_match_set_id of this CreateGeoMatchSetResponseGeoMatchSet.
        :type geo_match_set_id: str
        """
        if geo_match_set_id is None:
            raise ValueError("Invalid value for `geo_match_set_id`, must not be `None`")

        self._geo_match_set_id = geo_match_set_id

    @property
    def name(self):
        """Gets the name of this CreateGeoMatchSetResponseGeoMatchSet.


        :return: The name of this CreateGeoMatchSetResponseGeoMatchSet.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateGeoMatchSetResponseGeoMatchSet.


        :param name: The name of this CreateGeoMatchSetResponseGeoMatchSet.
        :type name: str
        """

        self._name = name

    @property
    def geo_match_constraints(self):
        """Gets the geo_match_constraints of this CreateGeoMatchSetResponseGeoMatchSet.


        :return: The geo_match_constraints of this CreateGeoMatchSetResponseGeoMatchSet.
        :rtype: List
        """
        return self._geo_match_constraints

    @geo_match_constraints.setter
    def geo_match_constraints(self, geo_match_constraints):
        """Sets the geo_match_constraints of this CreateGeoMatchSetResponseGeoMatchSet.


        :param geo_match_constraints: The geo_match_constraints of this CreateGeoMatchSetResponseGeoMatchSet.
        :type geo_match_constraints: List
        """
        if geo_match_constraints is None:
            raise ValueError("Invalid value for `geo_match_constraints`, must not be `None`")

        self._geo_match_constraints = geo_match_constraints
