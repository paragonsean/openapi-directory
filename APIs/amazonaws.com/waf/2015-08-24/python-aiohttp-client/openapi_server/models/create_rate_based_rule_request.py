# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rate_key import RateKey
from openapi_server import util


class CreateRateBasedRuleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, metric_name: str=None, rate_key: RateKey=None, rate_limit: int=None, change_token: str=None, tags: List=None):
        """CreateRateBasedRuleRequest - a model defined in OpenAPI

        :param name: The name of this CreateRateBasedRuleRequest.
        :param metric_name: The metric_name of this CreateRateBasedRuleRequest.
        :param rate_key: The rate_key of this CreateRateBasedRuleRequest.
        :param rate_limit: The rate_limit of this CreateRateBasedRuleRequest.
        :param change_token: The change_token of this CreateRateBasedRuleRequest.
        :param tags: The tags of this CreateRateBasedRuleRequest.
        """
        self.openapi_types = {
            'name': str,
            'metric_name': str,
            'rate_key': RateKey,
            'rate_limit': int,
            'change_token': str,
            'tags': List
        }

        self.attribute_map = {
            'name': 'Name',
            'metric_name': 'MetricName',
            'rate_key': 'RateKey',
            'rate_limit': 'RateLimit',
            'change_token': 'ChangeToken',
            'tags': 'Tags'
        }

        self._name = name
        self._metric_name = metric_name
        self._rate_key = rate_key
        self._rate_limit = rate_limit
        self._change_token = change_token
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateRateBasedRuleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateRateBasedRuleRequest of this CreateRateBasedRuleRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateRateBasedRuleRequest.


        :return: The name of this CreateRateBasedRuleRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateRateBasedRuleRequest.


        :param name: The name of this CreateRateBasedRuleRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def metric_name(self):
        """Gets the metric_name of this CreateRateBasedRuleRequest.


        :return: The metric_name of this CreateRateBasedRuleRequest.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this CreateRateBasedRuleRequest.


        :param metric_name: The metric_name of this CreateRateBasedRuleRequest.
        :type metric_name: str
        """
        if metric_name is None:
            raise ValueError("Invalid value for `metric_name`, must not be `None`")

        self._metric_name = metric_name

    @property
    def rate_key(self):
        """Gets the rate_key of this CreateRateBasedRuleRequest.


        :return: The rate_key of this CreateRateBasedRuleRequest.
        :rtype: RateKey
        """
        return self._rate_key

    @rate_key.setter
    def rate_key(self, rate_key):
        """Sets the rate_key of this CreateRateBasedRuleRequest.


        :param rate_key: The rate_key of this CreateRateBasedRuleRequest.
        :type rate_key: RateKey
        """
        if rate_key is None:
            raise ValueError("Invalid value for `rate_key`, must not be `None`")

        self._rate_key = rate_key

    @property
    def rate_limit(self):
        """Gets the rate_limit of this CreateRateBasedRuleRequest.


        :return: The rate_limit of this CreateRateBasedRuleRequest.
        :rtype: int
        """
        return self._rate_limit

    @rate_limit.setter
    def rate_limit(self, rate_limit):
        """Sets the rate_limit of this CreateRateBasedRuleRequest.


        :param rate_limit: The rate_limit of this CreateRateBasedRuleRequest.
        :type rate_limit: int
        """
        if rate_limit is None:
            raise ValueError("Invalid value for `rate_limit`, must not be `None`")

        self._rate_limit = rate_limit

    @property
    def change_token(self):
        """Gets the change_token of this CreateRateBasedRuleRequest.


        :return: The change_token of this CreateRateBasedRuleRequest.
        :rtype: str
        """
        return self._change_token

    @change_token.setter
    def change_token(self, change_token):
        """Sets the change_token of this CreateRateBasedRuleRequest.


        :param change_token: The change_token of this CreateRateBasedRuleRequest.
        :type change_token: str
        """
        if change_token is None:
            raise ValueError("Invalid value for `change_token`, must not be `None`")

        self._change_token = change_token

    @property
    def tags(self):
        """Gets the tags of this CreateRateBasedRuleRequest.


        :return: The tags of this CreateRateBasedRuleRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateRateBasedRuleRequest.


        :param tags: The tags of this CreateRateBasedRuleRequest.
        :type tags: List
        """

        self._tags = tags
