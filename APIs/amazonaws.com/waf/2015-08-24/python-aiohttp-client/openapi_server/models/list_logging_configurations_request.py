# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListLoggingConfigurationsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_marker: str=None, limit: int=None):
        """ListLoggingConfigurationsRequest - a model defined in OpenAPI

        :param next_marker: The next_marker of this ListLoggingConfigurationsRequest.
        :param limit: The limit of this ListLoggingConfigurationsRequest.
        """
        self.openapi_types = {
            'next_marker': str,
            'limit': int
        }

        self.attribute_map = {
            'next_marker': 'NextMarker',
            'limit': 'Limit'
        }

        self._next_marker = next_marker
        self._limit = limit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListLoggingConfigurationsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListLoggingConfigurationsRequest of this ListLoggingConfigurationsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_marker(self):
        """Gets the next_marker of this ListLoggingConfigurationsRequest.


        :return: The next_marker of this ListLoggingConfigurationsRequest.
        :rtype: str
        """
        return self._next_marker

    @next_marker.setter
    def next_marker(self, next_marker):
        """Sets the next_marker of this ListLoggingConfigurationsRequest.


        :param next_marker: The next_marker of this ListLoggingConfigurationsRequest.
        :type next_marker: str
        """

        self._next_marker = next_marker

    @property
    def limit(self):
        """Gets the limit of this ListLoggingConfigurationsRequest.


        :return: The limit of this ListLoggingConfigurationsRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ListLoggingConfigurationsRequest.


        :param limit: The limit of this ListLoggingConfigurationsRequest.
        :type limit: int
        """

        self._limit = limit
