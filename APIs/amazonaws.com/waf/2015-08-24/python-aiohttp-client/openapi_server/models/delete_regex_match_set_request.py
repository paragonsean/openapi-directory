# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeleteRegexMatchSetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, regex_match_set_id: str=None, change_token: str=None):
        """DeleteRegexMatchSetRequest - a model defined in OpenAPI

        :param regex_match_set_id: The regex_match_set_id of this DeleteRegexMatchSetRequest.
        :param change_token: The change_token of this DeleteRegexMatchSetRequest.
        """
        self.openapi_types = {
            'regex_match_set_id': str,
            'change_token': str
        }

        self.attribute_map = {
            'regex_match_set_id': 'RegexMatchSetId',
            'change_token': 'ChangeToken'
        }

        self._regex_match_set_id = regex_match_set_id
        self._change_token = change_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteRegexMatchSetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteRegexMatchSetRequest of this DeleteRegexMatchSetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def regex_match_set_id(self):
        """Gets the regex_match_set_id of this DeleteRegexMatchSetRequest.


        :return: The regex_match_set_id of this DeleteRegexMatchSetRequest.
        :rtype: str
        """
        return self._regex_match_set_id

    @regex_match_set_id.setter
    def regex_match_set_id(self, regex_match_set_id):
        """Sets the regex_match_set_id of this DeleteRegexMatchSetRequest.


        :param regex_match_set_id: The regex_match_set_id of this DeleteRegexMatchSetRequest.
        :type regex_match_set_id: str
        """
        if regex_match_set_id is None:
            raise ValueError("Invalid value for `regex_match_set_id`, must not be `None`")

        self._regex_match_set_id = regex_match_set_id

    @property
    def change_token(self):
        """Gets the change_token of this DeleteRegexMatchSetRequest.


        :return: The change_token of this DeleteRegexMatchSetRequest.
        :rtype: str
        """
        return self._change_token

    @change_token.setter
    def change_token(self, change_token):
        """Sets the change_token of this DeleteRegexMatchSetRequest.


        :param change_token: The change_token of this DeleteRegexMatchSetRequest.
        :type change_token: str
        """
        if change_token is None:
            raise ValueError("Invalid value for `change_token`, must not be `None`")

        self._change_token = change_token
