# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sampled_http_request_request import SampledHTTPRequestRequest
from openapi_server import util


class SampledHTTPRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, request: SampledHTTPRequestRequest=None, weight: int=None, timestamp: datetime=None, action: str=None, rule_within_rule_group: str=None):
        """SampledHTTPRequest - a model defined in OpenAPI

        :param request: The request of this SampledHTTPRequest.
        :param weight: The weight of this SampledHTTPRequest.
        :param timestamp: The timestamp of this SampledHTTPRequest.
        :param action: The action of this SampledHTTPRequest.
        :param rule_within_rule_group: The rule_within_rule_group of this SampledHTTPRequest.
        """
        self.openapi_types = {
            'request': SampledHTTPRequestRequest,
            'weight': int,
            'timestamp': datetime,
            'action': str,
            'rule_within_rule_group': str
        }

        self.attribute_map = {
            'request': 'Request',
            'weight': 'Weight',
            'timestamp': 'Timestamp',
            'action': 'Action',
            'rule_within_rule_group': 'RuleWithinRuleGroup'
        }

        self._request = request
        self._weight = weight
        self._timestamp = timestamp
        self._action = action
        self._rule_within_rule_group = rule_within_rule_group

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SampledHTTPRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SampledHTTPRequest of this SampledHTTPRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def request(self):
        """Gets the request of this SampledHTTPRequest.


        :return: The request of this SampledHTTPRequest.
        :rtype: SampledHTTPRequestRequest
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this SampledHTTPRequest.


        :param request: The request of this SampledHTTPRequest.
        :type request: SampledHTTPRequestRequest
        """
        if request is None:
            raise ValueError("Invalid value for `request`, must not be `None`")

        self._request = request

    @property
    def weight(self):
        """Gets the weight of this SampledHTTPRequest.


        :return: The weight of this SampledHTTPRequest.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this SampledHTTPRequest.


        :param weight: The weight of this SampledHTTPRequest.
        :type weight: int
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")

        self._weight = weight

    @property
    def timestamp(self):
        """Gets the timestamp of this SampledHTTPRequest.


        :return: The timestamp of this SampledHTTPRequest.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this SampledHTTPRequest.


        :param timestamp: The timestamp of this SampledHTTPRequest.
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def action(self):
        """Gets the action of this SampledHTTPRequest.


        :return: The action of this SampledHTTPRequest.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this SampledHTTPRequest.


        :param action: The action of this SampledHTTPRequest.
        :type action: str
        """

        self._action = action

    @property
    def rule_within_rule_group(self):
        """Gets the rule_within_rule_group of this SampledHTTPRequest.


        :return: The rule_within_rule_group of this SampledHTTPRequest.
        :rtype: str
        """
        return self._rule_within_rule_group

    @rule_within_rule_group.setter
    def rule_within_rule_group(self, rule_within_rule_group):
        """Sets the rule_within_rule_group of this SampledHTTPRequest.


        :param rule_within_rule_group: The rule_within_rule_group of this SampledHTTPRequest.
        :type rule_within_rule_group: str
        """

        self._rule_within_rule_group = rule_within_rule_group
