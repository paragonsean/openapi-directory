/**
 * AWS WAF
 * <note> <p>This is <b>AWS WAF Classic</b> documentation. For more information, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p> <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p> </note> <p>This is the <i>AWS WAF Classic API Reference</i> for using AWS WAF Classic with Amazon CloudFront. The AWS WAF Classic actions and data types listed in the reference are available for protecting Amazon CloudFront distributions. You can use these actions and data types via the endpoint <i>waf.amazonaws.com</i>. This guide is for developers who need detailed information about the AWS WAF Classic API actions, data types, and errors. For detailed information about AWS WAF Classic features and an overview of how to use the AWS WAF Classic API, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p>
 *
 * The version of the OpenAPI document: 2015-08-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIByteMatchSetSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIByteMatchSetSummary::OAIByteMatchSetSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIByteMatchSetSummary::OAIByteMatchSetSummary() {
    this->initializeModel();
}

OAIByteMatchSetSummary::~OAIByteMatchSetSummary() {}

void OAIByteMatchSetSummary::initializeModel() {

    m_byte_match_set_id_isSet = false;
    m_byte_match_set_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIByteMatchSetSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIByteMatchSetSummary::fromJsonObject(QJsonObject json) {

    m_byte_match_set_id_isValid = ::OpenAPI::fromJsonValue(m_byte_match_set_id, json[QString("ByteMatchSetId")]);
    m_byte_match_set_id_isSet = !json[QString("ByteMatchSetId")].isNull() && m_byte_match_set_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;
}

QString OAIByteMatchSetSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIByteMatchSetSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_byte_match_set_id_isSet) {
        obj.insert(QString("ByteMatchSetId"), ::OpenAPI::toJsonValue(m_byte_match_set_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIByteMatchSetSummary::getByteMatchSetId() const {
    return m_byte_match_set_id;
}
void OAIByteMatchSetSummary::setByteMatchSetId(const QString &byte_match_set_id) {
    m_byte_match_set_id = byte_match_set_id;
    m_byte_match_set_id_isSet = true;
}

bool OAIByteMatchSetSummary::is_byte_match_set_id_Set() const{
    return m_byte_match_set_id_isSet;
}

bool OAIByteMatchSetSummary::is_byte_match_set_id_Valid() const{
    return m_byte_match_set_id_isValid;
}

QString OAIByteMatchSetSummary::getName() const {
    return m_name;
}
void OAIByteMatchSetSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIByteMatchSetSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIByteMatchSetSummary::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIByteMatchSetSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_byte_match_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIByteMatchSetSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_byte_match_set_id_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
