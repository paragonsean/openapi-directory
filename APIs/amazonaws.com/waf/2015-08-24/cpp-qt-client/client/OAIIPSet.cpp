/**
 * AWS WAF
 * <note> <p>This is <b>AWS WAF Classic</b> documentation. For more information, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p> <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p> </note> <p>This is the <i>AWS WAF Classic API Reference</i> for using AWS WAF Classic with Amazon CloudFront. The AWS WAF Classic actions and data types listed in the reference are available for protecting Amazon CloudFront distributions. You can use these actions and data types via the endpoint <i>waf.amazonaws.com</i>. This guide is for developers who need detailed information about the AWS WAF Classic API actions, data types, and errors. For detailed information about AWS WAF Classic features and an overview of how to use the AWS WAF Classic API, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p>
 *
 * The version of the OpenAPI document: 2015-08-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIPSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIPSet::OAIIPSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIPSet::OAIIPSet() {
    this->initializeModel();
}

OAIIPSet::~OAIIPSet() {}

void OAIIPSet::initializeModel() {

    m_ip_set_id_isSet = false;
    m_ip_set_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_ip_set_descriptors_isSet = false;
    m_ip_set_descriptors_isValid = false;
}

void OAIIPSet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIPSet::fromJsonObject(QJsonObject json) {

    m_ip_set_id_isValid = ::OpenAPI::fromJsonValue(m_ip_set_id, json[QString("IPSetId")]);
    m_ip_set_id_isSet = !json[QString("IPSetId")].isNull() && m_ip_set_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_ip_set_descriptors_isValid = ::OpenAPI::fromJsonValue(m_ip_set_descriptors, json[QString("IPSetDescriptors")]);
    m_ip_set_descriptors_isSet = !json[QString("IPSetDescriptors")].isNull() && m_ip_set_descriptors_isValid;
}

QString OAIIPSet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIPSet::asJsonObject() const {
    QJsonObject obj;
    if (m_ip_set_id_isSet) {
        obj.insert(QString("IPSetId"), ::OpenAPI::toJsonValue(m_ip_set_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_ip_set_descriptors.isSet()) {
        obj.insert(QString("IPSetDescriptors"), ::OpenAPI::toJsonValue(m_ip_set_descriptors));
    }
    return obj;
}

QString OAIIPSet::getIpSetId() const {
    return m_ip_set_id;
}
void OAIIPSet::setIpSetId(const QString &ip_set_id) {
    m_ip_set_id = ip_set_id;
    m_ip_set_id_isSet = true;
}

bool OAIIPSet::is_ip_set_id_Set() const{
    return m_ip_set_id_isSet;
}

bool OAIIPSet::is_ip_set_id_Valid() const{
    return m_ip_set_id_isValid;
}

QString OAIIPSet::getName() const {
    return m_name;
}
void OAIIPSet::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIIPSet::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIPSet::is_name_Valid() const{
    return m_name_isValid;
}

QList OAIIPSet::getIpSetDescriptors() const {
    return m_ip_set_descriptors;
}
void OAIIPSet::setIpSetDescriptors(const QList &ip_set_descriptors) {
    m_ip_set_descriptors = ip_set_descriptors;
    m_ip_set_descriptors_isSet = true;
}

bool OAIIPSet::is_ip_set_descriptors_Set() const{
    return m_ip_set_descriptors_isSet;
}

bool OAIIPSet::is_ip_set_descriptors_Valid() const{
    return m_ip_set_descriptors_isValid;
}

bool OAIIPSet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ip_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_set_descriptors.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIPSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ip_set_id_isValid && m_ip_set_descriptors_isValid && true;
}

} // namespace OpenAPI
