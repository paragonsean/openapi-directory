/**
 * AWS WAF
 * <note> <p>This is <b>AWS WAF Classic</b> documentation. For more information, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p> <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p> </note> <p>This is the <i>AWS WAF Classic API Reference</i> for using AWS WAF Classic with Amazon CloudFront. The AWS WAF Classic actions and data types listed in the reference are available for protecting Amazon CloudFront distributions. You can use these actions and data types via the endpoint <i>waf.amazonaws.com</i>. This guide is for developers who need detailed information about the AWS WAF Classic API actions, data types, and errors. For detailed information about AWS WAF Classic features and an overview of how to use the AWS WAF Classic API, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p>
 *
 * The version of the OpenAPI document: 2015-08-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetWebACLResponse_WebACL.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetWebACLResponse_WebACL::OAIGetWebACLResponse_WebACL(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetWebACLResponse_WebACL::OAIGetWebACLResponse_WebACL() {
    this->initializeModel();
}

OAIGetWebACLResponse_WebACL::~OAIGetWebACLResponse_WebACL() {}

void OAIGetWebACLResponse_WebACL::initializeModel() {

    m_web_aclid_isSet = false;
    m_web_aclid_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_metric_name_isSet = false;
    m_metric_name_isValid = false;

    m_default_action_isSet = false;
    m_default_action_isValid = false;

    m_rules_isSet = false;
    m_rules_isValid = false;

    m_web_acl_arn_isSet = false;
    m_web_acl_arn_isValid = false;
}

void OAIGetWebACLResponse_WebACL::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetWebACLResponse_WebACL::fromJsonObject(QJsonObject json) {

    m_web_aclid_isValid = ::OpenAPI::fromJsonValue(m_web_aclid, json[QString("WebACLId")]);
    m_web_aclid_isSet = !json[QString("WebACLId")].isNull() && m_web_aclid_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_metric_name_isValid = ::OpenAPI::fromJsonValue(m_metric_name, json[QString("MetricName")]);
    m_metric_name_isSet = !json[QString("MetricName")].isNull() && m_metric_name_isValid;

    m_default_action_isValid = ::OpenAPI::fromJsonValue(m_default_action, json[QString("DefaultAction")]);
    m_default_action_isSet = !json[QString("DefaultAction")].isNull() && m_default_action_isValid;

    m_rules_isValid = ::OpenAPI::fromJsonValue(m_rules, json[QString("Rules")]);
    m_rules_isSet = !json[QString("Rules")].isNull() && m_rules_isValid;

    m_web_acl_arn_isValid = ::OpenAPI::fromJsonValue(m_web_acl_arn, json[QString("WebACLArn")]);
    m_web_acl_arn_isSet = !json[QString("WebACLArn")].isNull() && m_web_acl_arn_isValid;
}

QString OAIGetWebACLResponse_WebACL::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetWebACLResponse_WebACL::asJsonObject() const {
    QJsonObject obj;
    if (m_web_aclid_isSet) {
        obj.insert(QString("WebACLId"), ::OpenAPI::toJsonValue(m_web_aclid));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_metric_name_isSet) {
        obj.insert(QString("MetricName"), ::OpenAPI::toJsonValue(m_metric_name));
    }
    if (m_default_action.isSet()) {
        obj.insert(QString("DefaultAction"), ::OpenAPI::toJsonValue(m_default_action));
    }
    if (m_rules.isSet()) {
        obj.insert(QString("Rules"), ::OpenAPI::toJsonValue(m_rules));
    }
    if (m_web_acl_arn_isSet) {
        obj.insert(QString("WebACLArn"), ::OpenAPI::toJsonValue(m_web_acl_arn));
    }
    return obj;
}

QString OAIGetWebACLResponse_WebACL::getWebAclid() const {
    return m_web_aclid;
}
void OAIGetWebACLResponse_WebACL::setWebAclid(const QString &web_aclid) {
    m_web_aclid = web_aclid;
    m_web_aclid_isSet = true;
}

bool OAIGetWebACLResponse_WebACL::is_web_aclid_Set() const{
    return m_web_aclid_isSet;
}

bool OAIGetWebACLResponse_WebACL::is_web_aclid_Valid() const{
    return m_web_aclid_isValid;
}

QString OAIGetWebACLResponse_WebACL::getName() const {
    return m_name;
}
void OAIGetWebACLResponse_WebACL::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetWebACLResponse_WebACL::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetWebACLResponse_WebACL::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetWebACLResponse_WebACL::getMetricName() const {
    return m_metric_name;
}
void OAIGetWebACLResponse_WebACL::setMetricName(const QString &metric_name) {
    m_metric_name = metric_name;
    m_metric_name_isSet = true;
}

bool OAIGetWebACLResponse_WebACL::is_metric_name_Set() const{
    return m_metric_name_isSet;
}

bool OAIGetWebACLResponse_WebACL::is_metric_name_Valid() const{
    return m_metric_name_isValid;
}

OAIWebACL_DefaultAction OAIGetWebACLResponse_WebACL::getDefaultAction() const {
    return m_default_action;
}
void OAIGetWebACLResponse_WebACL::setDefaultAction(const OAIWebACL_DefaultAction &default_action) {
    m_default_action = default_action;
    m_default_action_isSet = true;
}

bool OAIGetWebACLResponse_WebACL::is_default_action_Set() const{
    return m_default_action_isSet;
}

bool OAIGetWebACLResponse_WebACL::is_default_action_Valid() const{
    return m_default_action_isValid;
}

QList OAIGetWebACLResponse_WebACL::getRules() const {
    return m_rules;
}
void OAIGetWebACLResponse_WebACL::setRules(const QList &rules) {
    m_rules = rules;
    m_rules_isSet = true;
}

bool OAIGetWebACLResponse_WebACL::is_rules_Set() const{
    return m_rules_isSet;
}

bool OAIGetWebACLResponse_WebACL::is_rules_Valid() const{
    return m_rules_isValid;
}

QString OAIGetWebACLResponse_WebACL::getWebAclArn() const {
    return m_web_acl_arn;
}
void OAIGetWebACLResponse_WebACL::setWebAclArn(const QString &web_acl_arn) {
    m_web_acl_arn = web_acl_arn;
    m_web_acl_arn_isSet = true;
}

bool OAIGetWebACLResponse_WebACL::is_web_acl_arn_Set() const{
    return m_web_acl_arn_isSet;
}

bool OAIGetWebACLResponse_WebACL::is_web_acl_arn_Valid() const{
    return m_web_acl_arn_isValid;
}

bool OAIGetWebACLResponse_WebACL::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_web_aclid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_acl_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetWebACLResponse_WebACL::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_web_aclid_isValid && m_default_action_isValid && m_rules_isValid && true;
}

} // namespace OpenAPI
