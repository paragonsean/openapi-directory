/**
 * AWS WAF
 * <note> <p>This is <b>AWS WAF Classic</b> documentation. For more information, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p> <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p> </note> <p>This is the <i>AWS WAF Classic API Reference</i> for using AWS WAF Classic with Amazon CloudFront. The AWS WAF Classic actions and data types listed in the reference are available for protecting Amazon CloudFront distributions. You can use these actions and data types via the endpoint <i>waf.amazonaws.com</i>. This guide is for developers who need detailed information about the AWS WAF Classic API actions, data types, and errors. For detailed information about AWS WAF Classic features and an overview of how to use the AWS WAF Classic API, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p>
 *
 * The version of the OpenAPI document: 2015-08-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIByteMatchSetUpdate_ByteMatchTuple.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIByteMatchSetUpdate_ByteMatchTuple::OAIByteMatchSetUpdate_ByteMatchTuple(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIByteMatchSetUpdate_ByteMatchTuple::OAIByteMatchSetUpdate_ByteMatchTuple() {
    this->initializeModel();
}

OAIByteMatchSetUpdate_ByteMatchTuple::~OAIByteMatchSetUpdate_ByteMatchTuple() {}

void OAIByteMatchSetUpdate_ByteMatchTuple::initializeModel() {

    m_field_to_match_isSet = false;
    m_field_to_match_isValid = false;

    m_target_string_isSet = false;
    m_target_string_isValid = false;

    m_text_transformation_isSet = false;
    m_text_transformation_isValid = false;

    m_positional_constraint_isSet = false;
    m_positional_constraint_isValid = false;
}

void OAIByteMatchSetUpdate_ByteMatchTuple::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIByteMatchSetUpdate_ByteMatchTuple::fromJsonObject(QJsonObject json) {

    m_field_to_match_isValid = ::OpenAPI::fromJsonValue(m_field_to_match, json[QString("FieldToMatch")]);
    m_field_to_match_isSet = !json[QString("FieldToMatch")].isNull() && m_field_to_match_isValid;

    m_target_string_isValid = ::OpenAPI::fromJsonValue(m_target_string, json[QString("TargetString")]);
    m_target_string_isSet = !json[QString("TargetString")].isNull() && m_target_string_isValid;

    m_text_transformation_isValid = ::OpenAPI::fromJsonValue(m_text_transformation, json[QString("TextTransformation")]);
    m_text_transformation_isSet = !json[QString("TextTransformation")].isNull() && m_text_transformation_isValid;

    m_positional_constraint_isValid = ::OpenAPI::fromJsonValue(m_positional_constraint, json[QString("PositionalConstraint")]);
    m_positional_constraint_isSet = !json[QString("PositionalConstraint")].isNull() && m_positional_constraint_isValid;
}

QString OAIByteMatchSetUpdate_ByteMatchTuple::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIByteMatchSetUpdate_ByteMatchTuple::asJsonObject() const {
    QJsonObject obj;
    if (m_field_to_match.isSet()) {
        obj.insert(QString("FieldToMatch"), ::OpenAPI::toJsonValue(m_field_to_match));
    }
    if (m_target_string_isSet) {
        obj.insert(QString("TargetString"), ::OpenAPI::toJsonValue(m_target_string));
    }
    if (m_text_transformation.isSet()) {
        obj.insert(QString("TextTransformation"), ::OpenAPI::toJsonValue(m_text_transformation));
    }
    if (m_positional_constraint.isSet()) {
        obj.insert(QString("PositionalConstraint"), ::OpenAPI::toJsonValue(m_positional_constraint));
    }
    return obj;
}

OAIByteMatchTuple_FieldToMatch OAIByteMatchSetUpdate_ByteMatchTuple::getFieldToMatch() const {
    return m_field_to_match;
}
void OAIByteMatchSetUpdate_ByteMatchTuple::setFieldToMatch(const OAIByteMatchTuple_FieldToMatch &field_to_match) {
    m_field_to_match = field_to_match;
    m_field_to_match_isSet = true;
}

bool OAIByteMatchSetUpdate_ByteMatchTuple::is_field_to_match_Set() const{
    return m_field_to_match_isSet;
}

bool OAIByteMatchSetUpdate_ByteMatchTuple::is_field_to_match_Valid() const{
    return m_field_to_match_isValid;
}

QString OAIByteMatchSetUpdate_ByteMatchTuple::getTargetString() const {
    return m_target_string;
}
void OAIByteMatchSetUpdate_ByteMatchTuple::setTargetString(const QString &target_string) {
    m_target_string = target_string;
    m_target_string_isSet = true;
}

bool OAIByteMatchSetUpdate_ByteMatchTuple::is_target_string_Set() const{
    return m_target_string_isSet;
}

bool OAIByteMatchSetUpdate_ByteMatchTuple::is_target_string_Valid() const{
    return m_target_string_isValid;
}

OAITextTransformation OAIByteMatchSetUpdate_ByteMatchTuple::getTextTransformation() const {
    return m_text_transformation;
}
void OAIByteMatchSetUpdate_ByteMatchTuple::setTextTransformation(const OAITextTransformation &text_transformation) {
    m_text_transformation = text_transformation;
    m_text_transformation_isSet = true;
}

bool OAIByteMatchSetUpdate_ByteMatchTuple::is_text_transformation_Set() const{
    return m_text_transformation_isSet;
}

bool OAIByteMatchSetUpdate_ByteMatchTuple::is_text_transformation_Valid() const{
    return m_text_transformation_isValid;
}

OAIPositionalConstraint OAIByteMatchSetUpdate_ByteMatchTuple::getPositionalConstraint() const {
    return m_positional_constraint;
}
void OAIByteMatchSetUpdate_ByteMatchTuple::setPositionalConstraint(const OAIPositionalConstraint &positional_constraint) {
    m_positional_constraint = positional_constraint;
    m_positional_constraint_isSet = true;
}

bool OAIByteMatchSetUpdate_ByteMatchTuple::is_positional_constraint_Set() const{
    return m_positional_constraint_isSet;
}

bool OAIByteMatchSetUpdate_ByteMatchTuple::is_positional_constraint_Valid() const{
    return m_positional_constraint_isValid;
}

bool OAIByteMatchSetUpdate_ByteMatchTuple::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_to_match.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_transformation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_positional_constraint.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIByteMatchSetUpdate_ByteMatchTuple::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_field_to_match_isValid && m_target_string_isValid && m_text_transformation_isValid && m_positional_constraint_isValid && true;
}

} // namespace OpenAPI
