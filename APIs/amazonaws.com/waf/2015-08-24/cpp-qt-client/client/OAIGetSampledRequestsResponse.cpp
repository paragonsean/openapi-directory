/**
 * AWS WAF
 * <note> <p>This is <b>AWS WAF Classic</b> documentation. For more information, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p> <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p> </note> <p>This is the <i>AWS WAF Classic API Reference</i> for using AWS WAF Classic with Amazon CloudFront. The AWS WAF Classic actions and data types listed in the reference are available for protecting Amazon CloudFront distributions. You can use these actions and data types via the endpoint <i>waf.amazonaws.com</i>. This guide is for developers who need detailed information about the AWS WAF Classic API actions, data types, and errors. For detailed information about AWS WAF Classic features and an overview of how to use the AWS WAF Classic API, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p>
 *
 * The version of the OpenAPI document: 2015-08-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSampledRequestsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSampledRequestsResponse::OAIGetSampledRequestsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSampledRequestsResponse::OAIGetSampledRequestsResponse() {
    this->initializeModel();
}

OAIGetSampledRequestsResponse::~OAIGetSampledRequestsResponse() {}

void OAIGetSampledRequestsResponse::initializeModel() {

    m_sampled_requests_isSet = false;
    m_sampled_requests_isValid = false;

    m_population_size_isSet = false;
    m_population_size_isValid = false;

    m_time_window_isSet = false;
    m_time_window_isValid = false;
}

void OAIGetSampledRequestsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSampledRequestsResponse::fromJsonObject(QJsonObject json) {

    m_sampled_requests_isValid = ::OpenAPI::fromJsonValue(m_sampled_requests, json[QString("SampledRequests")]);
    m_sampled_requests_isSet = !json[QString("SampledRequests")].isNull() && m_sampled_requests_isValid;

    m_population_size_isValid = ::OpenAPI::fromJsonValue(m_population_size, json[QString("PopulationSize")]);
    m_population_size_isSet = !json[QString("PopulationSize")].isNull() && m_population_size_isValid;

    m_time_window_isValid = ::OpenAPI::fromJsonValue(m_time_window, json[QString("TimeWindow")]);
    m_time_window_isSet = !json[QString("TimeWindow")].isNull() && m_time_window_isValid;
}

QString OAIGetSampledRequestsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSampledRequestsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_sampled_requests.isSet()) {
        obj.insert(QString("SampledRequests"), ::OpenAPI::toJsonValue(m_sampled_requests));
    }
    if (m_population_size_isSet) {
        obj.insert(QString("PopulationSize"), ::OpenAPI::toJsonValue(m_population_size));
    }
    if (m_time_window.isSet()) {
        obj.insert(QString("TimeWindow"), ::OpenAPI::toJsonValue(m_time_window));
    }
    return obj;
}

QList OAIGetSampledRequestsResponse::getSampledRequests() const {
    return m_sampled_requests;
}
void OAIGetSampledRequestsResponse::setSampledRequests(const QList &sampled_requests) {
    m_sampled_requests = sampled_requests;
    m_sampled_requests_isSet = true;
}

bool OAIGetSampledRequestsResponse::is_sampled_requests_Set() const{
    return m_sampled_requests_isSet;
}

bool OAIGetSampledRequestsResponse::is_sampled_requests_Valid() const{
    return m_sampled_requests_isValid;
}

qint32 OAIGetSampledRequestsResponse::getPopulationSize() const {
    return m_population_size;
}
void OAIGetSampledRequestsResponse::setPopulationSize(const qint32 &population_size) {
    m_population_size = population_size;
    m_population_size_isSet = true;
}

bool OAIGetSampledRequestsResponse::is_population_size_Set() const{
    return m_population_size_isSet;
}

bool OAIGetSampledRequestsResponse::is_population_size_Valid() const{
    return m_population_size_isValid;
}

OAIGetSampledRequestsResponse_TimeWindow OAIGetSampledRequestsResponse::getTimeWindow() const {
    return m_time_window;
}
void OAIGetSampledRequestsResponse::setTimeWindow(const OAIGetSampledRequestsResponse_TimeWindow &time_window) {
    m_time_window = time_window;
    m_time_window_isSet = true;
}

bool OAIGetSampledRequestsResponse::is_time_window_Set() const{
    return m_time_window_isSet;
}

bool OAIGetSampledRequestsResponse::is_time_window_Valid() const{
    return m_time_window_isValid;
}

bool OAIGetSampledRequestsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sampled_requests.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_population_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_window.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSampledRequestsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
