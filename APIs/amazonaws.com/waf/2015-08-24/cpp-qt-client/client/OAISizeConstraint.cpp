/**
 * AWS WAF
 * <note> <p>This is <b>AWS WAF Classic</b> documentation. For more information, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p> <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p> </note> <p>This is the <i>AWS WAF Classic API Reference</i> for using AWS WAF Classic with Amazon CloudFront. The AWS WAF Classic actions and data types listed in the reference are available for protecting Amazon CloudFront distributions. You can use these actions and data types via the endpoint <i>waf.amazonaws.com</i>. This guide is for developers who need detailed information about the AWS WAF Classic API actions, data types, and errors. For detailed information about AWS WAF Classic features and an overview of how to use the AWS WAF Classic API, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p>
 *
 * The version of the OpenAPI document: 2015-08-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISizeConstraint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISizeConstraint::OAISizeConstraint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISizeConstraint::OAISizeConstraint() {
    this->initializeModel();
}

OAISizeConstraint::~OAISizeConstraint() {}

void OAISizeConstraint::initializeModel() {

    m_field_to_match_isSet = false;
    m_field_to_match_isValid = false;

    m_text_transformation_isSet = false;
    m_text_transformation_isValid = false;

    m_comparison_operator_isSet = false;
    m_comparison_operator_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;
}

void OAISizeConstraint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISizeConstraint::fromJsonObject(QJsonObject json) {

    m_field_to_match_isValid = ::OpenAPI::fromJsonValue(m_field_to_match, json[QString("FieldToMatch")]);
    m_field_to_match_isSet = !json[QString("FieldToMatch")].isNull() && m_field_to_match_isValid;

    m_text_transformation_isValid = ::OpenAPI::fromJsonValue(m_text_transformation, json[QString("TextTransformation")]);
    m_text_transformation_isSet = !json[QString("TextTransformation")].isNull() && m_text_transformation_isValid;

    m_comparison_operator_isValid = ::OpenAPI::fromJsonValue(m_comparison_operator, json[QString("ComparisonOperator")]);
    m_comparison_operator_isSet = !json[QString("ComparisonOperator")].isNull() && m_comparison_operator_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("Size")]);
    m_size_isSet = !json[QString("Size")].isNull() && m_size_isValid;
}

QString OAISizeConstraint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISizeConstraint::asJsonObject() const {
    QJsonObject obj;
    if (m_field_to_match.isSet()) {
        obj.insert(QString("FieldToMatch"), ::OpenAPI::toJsonValue(m_field_to_match));
    }
    if (m_text_transformation.isSet()) {
        obj.insert(QString("TextTransformation"), ::OpenAPI::toJsonValue(m_text_transformation));
    }
    if (m_comparison_operator.isSet()) {
        obj.insert(QString("ComparisonOperator"), ::OpenAPI::toJsonValue(m_comparison_operator));
    }
    if (m_size_isSet) {
        obj.insert(QString("Size"), ::OpenAPI::toJsonValue(m_size));
    }
    return obj;
}

OAISizeConstraint_FieldToMatch OAISizeConstraint::getFieldToMatch() const {
    return m_field_to_match;
}
void OAISizeConstraint::setFieldToMatch(const OAISizeConstraint_FieldToMatch &field_to_match) {
    m_field_to_match = field_to_match;
    m_field_to_match_isSet = true;
}

bool OAISizeConstraint::is_field_to_match_Set() const{
    return m_field_to_match_isSet;
}

bool OAISizeConstraint::is_field_to_match_Valid() const{
    return m_field_to_match_isValid;
}

OAITextTransformation OAISizeConstraint::getTextTransformation() const {
    return m_text_transformation;
}
void OAISizeConstraint::setTextTransformation(const OAITextTransformation &text_transformation) {
    m_text_transformation = text_transformation;
    m_text_transformation_isSet = true;
}

bool OAISizeConstraint::is_text_transformation_Set() const{
    return m_text_transformation_isSet;
}

bool OAISizeConstraint::is_text_transformation_Valid() const{
    return m_text_transformation_isValid;
}

OAIComparisonOperator OAISizeConstraint::getComparisonOperator() const {
    return m_comparison_operator;
}
void OAISizeConstraint::setComparisonOperator(const OAIComparisonOperator &comparison_operator) {
    m_comparison_operator = comparison_operator;
    m_comparison_operator_isSet = true;
}

bool OAISizeConstraint::is_comparison_operator_Set() const{
    return m_comparison_operator_isSet;
}

bool OAISizeConstraint::is_comparison_operator_Valid() const{
    return m_comparison_operator_isValid;
}

qint32 OAISizeConstraint::getSize() const {
    return m_size;
}
void OAISizeConstraint::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAISizeConstraint::is_size_Set() const{
    return m_size_isSet;
}

bool OAISizeConstraint::is_size_Valid() const{
    return m_size_isValid;
}

bool OAISizeConstraint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_to_match.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_transformation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comparison_operator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISizeConstraint::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_field_to_match_isValid && m_text_transformation_isValid && m_comparison_operator_isValid && m_size_isValid && true;
}

} // namespace OpenAPI
