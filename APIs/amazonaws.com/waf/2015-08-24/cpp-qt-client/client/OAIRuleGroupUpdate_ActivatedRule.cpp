/**
 * AWS WAF
 * <note> <p>This is <b>AWS WAF Classic</b> documentation. For more information, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p> <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p> </note> <p>This is the <i>AWS WAF Classic API Reference</i> for using AWS WAF Classic with Amazon CloudFront. The AWS WAF Classic actions and data types listed in the reference are available for protecting Amazon CloudFront distributions. You can use these actions and data types via the endpoint <i>waf.amazonaws.com</i>. This guide is for developers who need detailed information about the AWS WAF Classic API actions, data types, and errors. For detailed information about AWS WAF Classic features and an overview of how to use the AWS WAF Classic API, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p>
 *
 * The version of the OpenAPI document: 2015-08-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRuleGroupUpdate_ActivatedRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRuleGroupUpdate_ActivatedRule::OAIRuleGroupUpdate_ActivatedRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRuleGroupUpdate_ActivatedRule::OAIRuleGroupUpdate_ActivatedRule() {
    this->initializeModel();
}

OAIRuleGroupUpdate_ActivatedRule::~OAIRuleGroupUpdate_ActivatedRule() {}

void OAIRuleGroupUpdate_ActivatedRule::initializeModel() {

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_rule_id_isSet = false;
    m_rule_id_isValid = false;

    m_action_isSet = false;
    m_action_isValid = false;

    m_override_action_isSet = false;
    m_override_action_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_excluded_rules_isSet = false;
    m_excluded_rules_isValid = false;
}

void OAIRuleGroupUpdate_ActivatedRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRuleGroupUpdate_ActivatedRule::fromJsonObject(QJsonObject json) {

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("Priority")]);
    m_priority_isSet = !json[QString("Priority")].isNull() && m_priority_isValid;

    m_rule_id_isValid = ::OpenAPI::fromJsonValue(m_rule_id, json[QString("RuleId")]);
    m_rule_id_isSet = !json[QString("RuleId")].isNull() && m_rule_id_isValid;

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("Action")]);
    m_action_isSet = !json[QString("Action")].isNull() && m_action_isValid;

    m_override_action_isValid = ::OpenAPI::fromJsonValue(m_override_action, json[QString("OverrideAction")]);
    m_override_action_isSet = !json[QString("OverrideAction")].isNull() && m_override_action_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_excluded_rules_isValid = ::OpenAPI::fromJsonValue(m_excluded_rules, json[QString("ExcludedRules")]);
    m_excluded_rules_isSet = !json[QString("ExcludedRules")].isNull() && m_excluded_rules_isValid;
}

QString OAIRuleGroupUpdate_ActivatedRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRuleGroupUpdate_ActivatedRule::asJsonObject() const {
    QJsonObject obj;
    if (m_priority_isSet) {
        obj.insert(QString("Priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_rule_id_isSet) {
        obj.insert(QString("RuleId"), ::OpenAPI::toJsonValue(m_rule_id));
    }
    if (m_action.isSet()) {
        obj.insert(QString("Action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_override_action.isSet()) {
        obj.insert(QString("OverrideAction"), ::OpenAPI::toJsonValue(m_override_action));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_excluded_rules.isSet()) {
        obj.insert(QString("ExcludedRules"), ::OpenAPI::toJsonValue(m_excluded_rules));
    }
    return obj;
}

qint32 OAIRuleGroupUpdate_ActivatedRule::getPriority() const {
    return m_priority;
}
void OAIRuleGroupUpdate_ActivatedRule::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIRuleGroupUpdate_ActivatedRule::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIRuleGroupUpdate_ActivatedRule::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAIRuleGroupUpdate_ActivatedRule::getRuleId() const {
    return m_rule_id;
}
void OAIRuleGroupUpdate_ActivatedRule::setRuleId(const QString &rule_id) {
    m_rule_id = rule_id;
    m_rule_id_isSet = true;
}

bool OAIRuleGroupUpdate_ActivatedRule::is_rule_id_Set() const{
    return m_rule_id_isSet;
}

bool OAIRuleGroupUpdate_ActivatedRule::is_rule_id_Valid() const{
    return m_rule_id_isValid;
}

OAIActivatedRule_Action OAIRuleGroupUpdate_ActivatedRule::getAction() const {
    return m_action;
}
void OAIRuleGroupUpdate_ActivatedRule::setAction(const OAIActivatedRule_Action &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIRuleGroupUpdate_ActivatedRule::is_action_Set() const{
    return m_action_isSet;
}

bool OAIRuleGroupUpdate_ActivatedRule::is_action_Valid() const{
    return m_action_isValid;
}

OAIActivatedRule_OverrideAction OAIRuleGroupUpdate_ActivatedRule::getOverrideAction() const {
    return m_override_action;
}
void OAIRuleGroupUpdate_ActivatedRule::setOverrideAction(const OAIActivatedRule_OverrideAction &override_action) {
    m_override_action = override_action;
    m_override_action_isSet = true;
}

bool OAIRuleGroupUpdate_ActivatedRule::is_override_action_Set() const{
    return m_override_action_isSet;
}

bool OAIRuleGroupUpdate_ActivatedRule::is_override_action_Valid() const{
    return m_override_action_isValid;
}

OAIWafRuleType OAIRuleGroupUpdate_ActivatedRule::getType() const {
    return m_type;
}
void OAIRuleGroupUpdate_ActivatedRule::setType(const OAIWafRuleType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRuleGroupUpdate_ActivatedRule::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRuleGroupUpdate_ActivatedRule::is_type_Valid() const{
    return m_type_isValid;
}

QList OAIRuleGroupUpdate_ActivatedRule::getExcludedRules() const {
    return m_excluded_rules;
}
void OAIRuleGroupUpdate_ActivatedRule::setExcludedRules(const QList &excluded_rules) {
    m_excluded_rules = excluded_rules;
    m_excluded_rules_isSet = true;
}

bool OAIRuleGroupUpdate_ActivatedRule::is_excluded_rules_Set() const{
    return m_excluded_rules_isSet;
}

bool OAIRuleGroupUpdate_ActivatedRule::is_excluded_rules_Valid() const{
    return m_excluded_rules_isValid;
}

bool OAIRuleGroupUpdate_ActivatedRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_rules.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRuleGroupUpdate_ActivatedRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_priority_isValid && m_rule_id_isValid && true;
}

} // namespace OpenAPI
