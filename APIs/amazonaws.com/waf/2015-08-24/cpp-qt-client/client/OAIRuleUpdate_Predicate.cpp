/**
 * AWS WAF
 * <note> <p>This is <b>AWS WAF Classic</b> documentation. For more information, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p> <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p> </note> <p>This is the <i>AWS WAF Classic API Reference</i> for using AWS WAF Classic with Amazon CloudFront. The AWS WAF Classic actions and data types listed in the reference are available for protecting Amazon CloudFront distributions. You can use these actions and data types via the endpoint <i>waf.amazonaws.com</i>. This guide is for developers who need detailed information about the AWS WAF Classic API actions, data types, and errors. For detailed information about AWS WAF Classic features and an overview of how to use the AWS WAF Classic API, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p>
 *
 * The version of the OpenAPI document: 2015-08-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRuleUpdate_Predicate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRuleUpdate_Predicate::OAIRuleUpdate_Predicate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRuleUpdate_Predicate::OAIRuleUpdate_Predicate() {
    this->initializeModel();
}

OAIRuleUpdate_Predicate::~OAIRuleUpdate_Predicate() {}

void OAIRuleUpdate_Predicate::initializeModel() {

    m_negated_isSet = false;
    m_negated_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_data_id_isSet = false;
    m_data_id_isValid = false;
}

void OAIRuleUpdate_Predicate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRuleUpdate_Predicate::fromJsonObject(QJsonObject json) {

    m_negated_isValid = ::OpenAPI::fromJsonValue(m_negated, json[QString("Negated")]);
    m_negated_isSet = !json[QString("Negated")].isNull() && m_negated_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_data_id_isValid = ::OpenAPI::fromJsonValue(m_data_id, json[QString("DataId")]);
    m_data_id_isSet = !json[QString("DataId")].isNull() && m_data_id_isValid;
}

QString OAIRuleUpdate_Predicate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRuleUpdate_Predicate::asJsonObject() const {
    QJsonObject obj;
    if (m_negated_isSet) {
        obj.insert(QString("Negated"), ::OpenAPI::toJsonValue(m_negated));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_data_id_isSet) {
        obj.insert(QString("DataId"), ::OpenAPI::toJsonValue(m_data_id));
    }
    return obj;
}

bool OAIRuleUpdate_Predicate::getNegated() const {
    return m_negated;
}
void OAIRuleUpdate_Predicate::setNegated(const bool &negated) {
    m_negated = negated;
    m_negated_isSet = true;
}

bool OAIRuleUpdate_Predicate::is_negated_Set() const{
    return m_negated_isSet;
}

bool OAIRuleUpdate_Predicate::is_negated_Valid() const{
    return m_negated_isValid;
}

OAIPredicateType OAIRuleUpdate_Predicate::getType() const {
    return m_type;
}
void OAIRuleUpdate_Predicate::setType(const OAIPredicateType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRuleUpdate_Predicate::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRuleUpdate_Predicate::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIRuleUpdate_Predicate::getDataId() const {
    return m_data_id;
}
void OAIRuleUpdate_Predicate::setDataId(const QString &data_id) {
    m_data_id = data_id;
    m_data_id_isSet = true;
}

bool OAIRuleUpdate_Predicate::is_data_id_Set() const{
    return m_data_id_isSet;
}

bool OAIRuleUpdate_Predicate::is_data_id_Valid() const{
    return m_data_id_isValid;
}

bool OAIRuleUpdate_Predicate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_negated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRuleUpdate_Predicate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_negated_isValid && m_type_isValid && m_data_id_isValid && true;
}

} // namespace OpenAPI
