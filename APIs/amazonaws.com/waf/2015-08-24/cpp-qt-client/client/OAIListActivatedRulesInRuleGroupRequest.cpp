/**
 * AWS WAF
 * <note> <p>This is <b>AWS WAF Classic</b> documentation. For more information, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p> <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p> </note> <p>This is the <i>AWS WAF Classic API Reference</i> for using AWS WAF Classic with Amazon CloudFront. The AWS WAF Classic actions and data types listed in the reference are available for protecting Amazon CloudFront distributions. You can use these actions and data types via the endpoint <i>waf.amazonaws.com</i>. This guide is for developers who need detailed information about the AWS WAF Classic API actions, data types, and errors. For detailed information about AWS WAF Classic features and an overview of how to use the AWS WAF Classic API, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p>
 *
 * The version of the OpenAPI document: 2015-08-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListActivatedRulesInRuleGroupRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListActivatedRulesInRuleGroupRequest::OAIListActivatedRulesInRuleGroupRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListActivatedRulesInRuleGroupRequest::OAIListActivatedRulesInRuleGroupRequest() {
    this->initializeModel();
}

OAIListActivatedRulesInRuleGroupRequest::~OAIListActivatedRulesInRuleGroupRequest() {}

void OAIListActivatedRulesInRuleGroupRequest::initializeModel() {

    m_rule_group_id_isSet = false;
    m_rule_group_id_isValid = false;

    m_next_marker_isSet = false;
    m_next_marker_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;
}

void OAIListActivatedRulesInRuleGroupRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListActivatedRulesInRuleGroupRequest::fromJsonObject(QJsonObject json) {

    m_rule_group_id_isValid = ::OpenAPI::fromJsonValue(m_rule_group_id, json[QString("RuleGroupId")]);
    m_rule_group_id_isSet = !json[QString("RuleGroupId")].isNull() && m_rule_group_id_isValid;

    m_next_marker_isValid = ::OpenAPI::fromJsonValue(m_next_marker, json[QString("NextMarker")]);
    m_next_marker_isSet = !json[QString("NextMarker")].isNull() && m_next_marker_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("Limit")]);
    m_limit_isSet = !json[QString("Limit")].isNull() && m_limit_isValid;
}

QString OAIListActivatedRulesInRuleGroupRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListActivatedRulesInRuleGroupRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_rule_group_id_isSet) {
        obj.insert(QString("RuleGroupId"), ::OpenAPI::toJsonValue(m_rule_group_id));
    }
    if (m_next_marker_isSet) {
        obj.insert(QString("NextMarker"), ::OpenAPI::toJsonValue(m_next_marker));
    }
    if (m_limit_isSet) {
        obj.insert(QString("Limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    return obj;
}

QString OAIListActivatedRulesInRuleGroupRequest::getRuleGroupId() const {
    return m_rule_group_id;
}
void OAIListActivatedRulesInRuleGroupRequest::setRuleGroupId(const QString &rule_group_id) {
    m_rule_group_id = rule_group_id;
    m_rule_group_id_isSet = true;
}

bool OAIListActivatedRulesInRuleGroupRequest::is_rule_group_id_Set() const{
    return m_rule_group_id_isSet;
}

bool OAIListActivatedRulesInRuleGroupRequest::is_rule_group_id_Valid() const{
    return m_rule_group_id_isValid;
}

QString OAIListActivatedRulesInRuleGroupRequest::getNextMarker() const {
    return m_next_marker;
}
void OAIListActivatedRulesInRuleGroupRequest::setNextMarker(const QString &next_marker) {
    m_next_marker = next_marker;
    m_next_marker_isSet = true;
}

bool OAIListActivatedRulesInRuleGroupRequest::is_next_marker_Set() const{
    return m_next_marker_isSet;
}

bool OAIListActivatedRulesInRuleGroupRequest::is_next_marker_Valid() const{
    return m_next_marker_isValid;
}

qint32 OAIListActivatedRulesInRuleGroupRequest::getLimit() const {
    return m_limit;
}
void OAIListActivatedRulesInRuleGroupRequest::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIListActivatedRulesInRuleGroupRequest::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIListActivatedRulesInRuleGroupRequest::is_limit_Valid() const{
    return m_limit_isValid;
}

bool OAIListActivatedRulesInRuleGroupRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rule_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_marker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListActivatedRulesInRuleGroupRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
