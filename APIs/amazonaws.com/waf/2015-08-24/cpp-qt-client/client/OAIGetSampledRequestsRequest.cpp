/**
 * AWS WAF
 * <note> <p>This is <b>AWS WAF Classic</b> documentation. For more information, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p> <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p> </note> <p>This is the <i>AWS WAF Classic API Reference</i> for using AWS WAF Classic with Amazon CloudFront. The AWS WAF Classic actions and data types listed in the reference are available for protecting Amazon CloudFront distributions. You can use these actions and data types via the endpoint <i>waf.amazonaws.com</i>. This guide is for developers who need detailed information about the AWS WAF Classic API actions, data types, and errors. For detailed information about AWS WAF Classic features and an overview of how to use the AWS WAF Classic API, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p>
 *
 * The version of the OpenAPI document: 2015-08-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSampledRequestsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSampledRequestsRequest::OAIGetSampledRequestsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSampledRequestsRequest::OAIGetSampledRequestsRequest() {
    this->initializeModel();
}

OAIGetSampledRequestsRequest::~OAIGetSampledRequestsRequest() {}

void OAIGetSampledRequestsRequest::initializeModel() {

    m_web_acl_id_isSet = false;
    m_web_acl_id_isValid = false;

    m_rule_id_isSet = false;
    m_rule_id_isValid = false;

    m_time_window_isSet = false;
    m_time_window_isValid = false;

    m_max_items_isSet = false;
    m_max_items_isValid = false;
}

void OAIGetSampledRequestsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSampledRequestsRequest::fromJsonObject(QJsonObject json) {

    m_web_acl_id_isValid = ::OpenAPI::fromJsonValue(m_web_acl_id, json[QString("WebAclId")]);
    m_web_acl_id_isSet = !json[QString("WebAclId")].isNull() && m_web_acl_id_isValid;

    m_rule_id_isValid = ::OpenAPI::fromJsonValue(m_rule_id, json[QString("RuleId")]);
    m_rule_id_isSet = !json[QString("RuleId")].isNull() && m_rule_id_isValid;

    m_time_window_isValid = ::OpenAPI::fromJsonValue(m_time_window, json[QString("TimeWindow")]);
    m_time_window_isSet = !json[QString("TimeWindow")].isNull() && m_time_window_isValid;

    m_max_items_isValid = ::OpenAPI::fromJsonValue(m_max_items, json[QString("MaxItems")]);
    m_max_items_isSet = !json[QString("MaxItems")].isNull() && m_max_items_isValid;
}

QString OAIGetSampledRequestsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSampledRequestsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_web_acl_id_isSet) {
        obj.insert(QString("WebAclId"), ::OpenAPI::toJsonValue(m_web_acl_id));
    }
    if (m_rule_id_isSet) {
        obj.insert(QString("RuleId"), ::OpenAPI::toJsonValue(m_rule_id));
    }
    if (m_time_window.isSet()) {
        obj.insert(QString("TimeWindow"), ::OpenAPI::toJsonValue(m_time_window));
    }
    if (m_max_items_isSet) {
        obj.insert(QString("MaxItems"), ::OpenAPI::toJsonValue(m_max_items));
    }
    return obj;
}

QString OAIGetSampledRequestsRequest::getWebAclId() const {
    return m_web_acl_id;
}
void OAIGetSampledRequestsRequest::setWebAclId(const QString &web_acl_id) {
    m_web_acl_id = web_acl_id;
    m_web_acl_id_isSet = true;
}

bool OAIGetSampledRequestsRequest::is_web_acl_id_Set() const{
    return m_web_acl_id_isSet;
}

bool OAIGetSampledRequestsRequest::is_web_acl_id_Valid() const{
    return m_web_acl_id_isValid;
}

QString OAIGetSampledRequestsRequest::getRuleId() const {
    return m_rule_id;
}
void OAIGetSampledRequestsRequest::setRuleId(const QString &rule_id) {
    m_rule_id = rule_id;
    m_rule_id_isSet = true;
}

bool OAIGetSampledRequestsRequest::is_rule_id_Set() const{
    return m_rule_id_isSet;
}

bool OAIGetSampledRequestsRequest::is_rule_id_Valid() const{
    return m_rule_id_isValid;
}

OAIGetSampledRequestsRequest_TimeWindow OAIGetSampledRequestsRequest::getTimeWindow() const {
    return m_time_window;
}
void OAIGetSampledRequestsRequest::setTimeWindow(const OAIGetSampledRequestsRequest_TimeWindow &time_window) {
    m_time_window = time_window;
    m_time_window_isSet = true;
}

bool OAIGetSampledRequestsRequest::is_time_window_Set() const{
    return m_time_window_isSet;
}

bool OAIGetSampledRequestsRequest::is_time_window_Valid() const{
    return m_time_window_isValid;
}

qint32 OAIGetSampledRequestsRequest::getMaxItems() const {
    return m_max_items;
}
void OAIGetSampledRequestsRequest::setMaxItems(const qint32 &max_items) {
    m_max_items = max_items;
    m_max_items_isSet = true;
}

bool OAIGetSampledRequestsRequest::is_max_items_Set() const{
    return m_max_items_isSet;
}

bool OAIGetSampledRequestsRequest::is_max_items_Valid() const{
    return m_max_items_isValid;
}

bool OAIGetSampledRequestsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_web_acl_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_window.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_items_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSampledRequestsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_web_acl_id_isValid && m_rule_id_isValid && m_time_window_isValid && m_max_items_isValid && true;
}

} // namespace OpenAPI
