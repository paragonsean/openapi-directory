/**
 * AWS WAF
 * <note> <p>This is <b>AWS WAF Classic</b> documentation. For more information, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p> <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p> </note> <p>This is the <i>AWS WAF Classic API Reference</i> for using AWS WAF Classic with Amazon CloudFront. The AWS WAF Classic actions and data types listed in the reference are available for protecting Amazon CloudFront distributions. You can use these actions and data types via the endpoint <i>waf.amazonaws.com</i>. This guide is for developers who need detailed information about the AWS WAF Classic API actions, data types, and errors. For detailed information about AWS WAF Classic features and an overview of how to use the AWS WAF Classic API, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p>
 *
 * The version of the OpenAPI document: 2015-08-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISampledHTTPRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISampledHTTPRequest::OAISampledHTTPRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISampledHTTPRequest::OAISampledHTTPRequest() {
    this->initializeModel();
}

OAISampledHTTPRequest::~OAISampledHTTPRequest() {}

void OAISampledHTTPRequest::initializeModel() {

    m_request_isSet = false;
    m_request_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_action_isSet = false;
    m_action_isValid = false;

    m_rule_within_rule_group_isSet = false;
    m_rule_within_rule_group_isValid = false;
}

void OAISampledHTTPRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISampledHTTPRequest::fromJsonObject(QJsonObject json) {

    m_request_isValid = ::OpenAPI::fromJsonValue(m_request, json[QString("Request")]);
    m_request_isSet = !json[QString("Request")].isNull() && m_request_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("Weight")]);
    m_weight_isSet = !json[QString("Weight")].isNull() && m_weight_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("Timestamp")]);
    m_timestamp_isSet = !json[QString("Timestamp")].isNull() && m_timestamp_isValid;

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("Action")]);
    m_action_isSet = !json[QString("Action")].isNull() && m_action_isValid;

    m_rule_within_rule_group_isValid = ::OpenAPI::fromJsonValue(m_rule_within_rule_group, json[QString("RuleWithinRuleGroup")]);
    m_rule_within_rule_group_isSet = !json[QString("RuleWithinRuleGroup")].isNull() && m_rule_within_rule_group_isValid;
}

QString OAISampledHTTPRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISampledHTTPRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_request.isSet()) {
        obj.insert(QString("Request"), ::OpenAPI::toJsonValue(m_request));
    }
    if (m_weight_isSet) {
        obj.insert(QString("Weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("Timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_action_isSet) {
        obj.insert(QString("Action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_rule_within_rule_group_isSet) {
        obj.insert(QString("RuleWithinRuleGroup"), ::OpenAPI::toJsonValue(m_rule_within_rule_group));
    }
    return obj;
}

OAISampledHTTPRequest_Request OAISampledHTTPRequest::getRequest() const {
    return m_request;
}
void OAISampledHTTPRequest::setRequest(const OAISampledHTTPRequest_Request &request) {
    m_request = request;
    m_request_isSet = true;
}

bool OAISampledHTTPRequest::is_request_Set() const{
    return m_request_isSet;
}

bool OAISampledHTTPRequest::is_request_Valid() const{
    return m_request_isValid;
}

qint32 OAISampledHTTPRequest::getWeight() const {
    return m_weight;
}
void OAISampledHTTPRequest::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAISampledHTTPRequest::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAISampledHTTPRequest::is_weight_Valid() const{
    return m_weight_isValid;
}

QDateTime OAISampledHTTPRequest::getTimestamp() const {
    return m_timestamp;
}
void OAISampledHTTPRequest::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAISampledHTTPRequest::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAISampledHTTPRequest::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAISampledHTTPRequest::getAction() const {
    return m_action;
}
void OAISampledHTTPRequest::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAISampledHTTPRequest::is_action_Set() const{
    return m_action_isSet;
}

bool OAISampledHTTPRequest::is_action_Valid() const{
    return m_action_isValid;
}

QString OAISampledHTTPRequest::getRuleWithinRuleGroup() const {
    return m_rule_within_rule_group;
}
void OAISampledHTTPRequest::setRuleWithinRuleGroup(const QString &rule_within_rule_group) {
    m_rule_within_rule_group = rule_within_rule_group;
    m_rule_within_rule_group_isSet = true;
}

bool OAISampledHTTPRequest::is_rule_within_rule_group_Set() const{
    return m_rule_within_rule_group_isSet;
}

bool OAISampledHTTPRequest::is_rule_within_rule_group_Valid() const{
    return m_rule_within_rule_group_isValid;
}

bool OAISampledHTTPRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_within_rule_group_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISampledHTTPRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_request_isValid && m_weight_isValid && true;
}

} // namespace OpenAPI
