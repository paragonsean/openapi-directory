/**
 * AWS WAF
 * <note> <p>This is <b>AWS WAF Classic</b> documentation. For more information, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p> <p> <b>For the latest version of AWS WAF</b>, use the AWS WAFV2 API and see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\">AWS WAF Developer Guide</a>. With the latest version, AWS WAF has a single set of endpoints for regional and global use. </p> </note> <p>This is the <i>AWS WAF Classic API Reference</i> for using AWS WAF Classic with Amazon CloudFront. The AWS WAF Classic actions and data types listed in the reference are available for protecting Amazon CloudFront distributions. You can use these actions and data types via the endpoint <i>waf.amazonaws.com</i>. This guide is for developers who need detailed information about the AWS WAF Classic API actions, data types, and errors. For detailed information about AWS WAF Classic features and an overview of how to use the AWS WAF Classic API, see the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/classic-waf-chapter.html\">AWS WAF Classic</a> in the developer guide.</p>
 *
 * The version of the OpenAPI document: 2015-08-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateByteMatchSetRequest.h"
#include "OAICreateByteMatchSetResponse.h"
#include "OAICreateGeoMatchSetRequest.h"
#include "OAICreateGeoMatchSetResponse.h"
#include "OAICreateIPSetRequest.h"
#include "OAICreateIPSetResponse.h"
#include "OAICreateRateBasedRuleRequest.h"
#include "OAICreateRateBasedRuleResponse.h"
#include "OAICreateRegexMatchSetRequest.h"
#include "OAICreateRegexMatchSetResponse.h"
#include "OAICreateRegexPatternSetRequest.h"
#include "OAICreateRegexPatternSetResponse.h"
#include "OAICreateRuleGroupRequest.h"
#include "OAICreateRuleGroupResponse.h"
#include "OAICreateRuleRequest.h"
#include "OAICreateRuleResponse.h"
#include "OAICreateSizeConstraintSetRequest.h"
#include "OAICreateSizeConstraintSetResponse.h"
#include "OAICreateSqlInjectionMatchSetRequest.h"
#include "OAICreateSqlInjectionMatchSetResponse.h"
#include "OAICreateWebACLMigrationStackRequest.h"
#include "OAICreateWebACLMigrationStackResponse.h"
#include "OAICreateWebACLRequest.h"
#include "OAICreateWebACLResponse.h"
#include "OAICreateXssMatchSetRequest.h"
#include "OAICreateXssMatchSetResponse.h"
#include "OAIDeleteByteMatchSetRequest.h"
#include "OAIDeleteByteMatchSetResponse.h"
#include "OAIDeleteGeoMatchSetRequest.h"
#include "OAIDeleteGeoMatchSetResponse.h"
#include "OAIDeleteIPSetRequest.h"
#include "OAIDeleteIPSetResponse.h"
#include "OAIDeleteLoggingConfigurationRequest.h"
#include "OAIDeletePermissionPolicyRequest.h"
#include "OAIDeleteRateBasedRuleRequest.h"
#include "OAIDeleteRateBasedRuleResponse.h"
#include "OAIDeleteRegexMatchSetRequest.h"
#include "OAIDeleteRegexMatchSetResponse.h"
#include "OAIDeleteRegexPatternSetRequest.h"
#include "OAIDeleteRegexPatternSetResponse.h"
#include "OAIDeleteRuleGroupRequest.h"
#include "OAIDeleteRuleGroupResponse.h"
#include "OAIDeleteRuleRequest.h"
#include "OAIDeleteRuleResponse.h"
#include "OAIDeleteSizeConstraintSetRequest.h"
#include "OAIDeleteSizeConstraintSetResponse.h"
#include "OAIDeleteSqlInjectionMatchSetRequest.h"
#include "OAIDeleteSqlInjectionMatchSetResponse.h"
#include "OAIDeleteWebACLRequest.h"
#include "OAIDeleteWebACLResponse.h"
#include "OAIDeleteXssMatchSetRequest.h"
#include "OAIDeleteXssMatchSetResponse.h"
#include "OAIGetByteMatchSetRequest.h"
#include "OAIGetByteMatchSetResponse.h"
#include "OAIGetChangeTokenResponse.h"
#include "OAIGetChangeTokenStatusRequest.h"
#include "OAIGetChangeTokenStatusResponse.h"
#include "OAIGetGeoMatchSetRequest.h"
#include "OAIGetGeoMatchSetResponse.h"
#include "OAIGetIPSetRequest.h"
#include "OAIGetIPSetResponse.h"
#include "OAIGetLoggingConfigurationRequest.h"
#include "OAIGetLoggingConfigurationResponse.h"
#include "OAIGetPermissionPolicyRequest.h"
#include "OAIGetPermissionPolicyResponse.h"
#include "OAIGetRateBasedRuleManagedKeysRequest.h"
#include "OAIGetRateBasedRuleManagedKeysResponse.h"
#include "OAIGetRateBasedRuleRequest.h"
#include "OAIGetRateBasedRuleResponse.h"
#include "OAIGetRegexMatchSetRequest.h"
#include "OAIGetRegexMatchSetResponse.h"
#include "OAIGetRegexPatternSetRequest.h"
#include "OAIGetRegexPatternSetResponse.h"
#include "OAIGetRuleGroupRequest.h"
#include "OAIGetRuleGroupResponse.h"
#include "OAIGetRuleRequest.h"
#include "OAIGetRuleResponse.h"
#include "OAIGetSampledRequestsRequest.h"
#include "OAIGetSampledRequestsResponse.h"
#include "OAIGetSizeConstraintSetRequest.h"
#include "OAIGetSizeConstraintSetResponse.h"
#include "OAIGetSqlInjectionMatchSetRequest.h"
#include "OAIGetSqlInjectionMatchSetResponse.h"
#include "OAIGetWebACLRequest.h"
#include "OAIGetWebACLResponse.h"
#include "OAIGetXssMatchSetRequest.h"
#include "OAIGetXssMatchSetResponse.h"
#include "OAIListActivatedRulesInRuleGroupRequest.h"
#include "OAIListActivatedRulesInRuleGroupResponse.h"
#include "OAIListByteMatchSetsRequest.h"
#include "OAIListByteMatchSetsResponse.h"
#include "OAIListGeoMatchSetsRequest.h"
#include "OAIListGeoMatchSetsResponse.h"
#include "OAIListIPSetsRequest.h"
#include "OAIListIPSetsResponse.h"
#include "OAIListLoggingConfigurationsRequest.h"
#include "OAIListLoggingConfigurationsResponse.h"
#include "OAIListRateBasedRulesRequest.h"
#include "OAIListRateBasedRulesResponse.h"
#include "OAIListRegexMatchSetsRequest.h"
#include "OAIListRegexMatchSetsResponse.h"
#include "OAIListRegexPatternSetsRequest.h"
#include "OAIListRegexPatternSetsResponse.h"
#include "OAIListRuleGroupsRequest.h"
#include "OAIListRuleGroupsResponse.h"
#include "OAIListRulesRequest.h"
#include "OAIListRulesResponse.h"
#include "OAIListSizeConstraintSetsRequest.h"
#include "OAIListSizeConstraintSetsResponse.h"
#include "OAIListSqlInjectionMatchSetsRequest.h"
#include "OAIListSqlInjectionMatchSetsResponse.h"
#include "OAIListSubscribedRuleGroupsRequest.h"
#include "OAIListSubscribedRuleGroupsResponse.h"
#include "OAIListTagsForResourceRequest.h"
#include "OAIListTagsForResourceResponse.h"
#include "OAIListWebACLsRequest.h"
#include "OAIListWebACLsResponse.h"
#include "OAIListXssMatchSetsRequest.h"
#include "OAIListXssMatchSetsResponse.h"
#include "OAIObject.h"
#include "OAIPutLoggingConfigurationRequest.h"
#include "OAIPutLoggingConfigurationResponse.h"
#include "OAIPutPermissionPolicyRequest.h"
#include "OAITagResourceRequest.h"
#include "OAIUntagResourceRequest.h"
#include "OAIUpdateByteMatchSetRequest.h"
#include "OAIUpdateByteMatchSetResponse.h"
#include "OAIUpdateGeoMatchSetRequest.h"
#include "OAIUpdateGeoMatchSetResponse.h"
#include "OAIUpdateIPSetRequest.h"
#include "OAIUpdateIPSetResponse.h"
#include "OAIUpdateRateBasedRuleRequest.h"
#include "OAIUpdateRateBasedRuleResponse.h"
#include "OAIUpdateRegexMatchSetRequest.h"
#include "OAIUpdateRegexMatchSetResponse.h"
#include "OAIUpdateRegexPatternSetRequest.h"
#include "OAIUpdateRegexPatternSetResponse.h"
#include "OAIUpdateRuleGroupRequest.h"
#include "OAIUpdateRuleGroupResponse.h"
#include "OAIUpdateRuleRequest.h"
#include "OAIUpdateRuleResponse.h"
#include "OAIUpdateSizeConstraintSetRequest.h"
#include "OAIUpdateSizeConstraintSetResponse.h"
#include "OAIUpdateSqlInjectionMatchSetRequest.h"
#include "OAIUpdateSqlInjectionMatchSetResponse.h"
#include "OAIUpdateWebACLRequest.h"
#include "OAIUpdateWebACLResponse.h"
#include "OAIUpdateXssMatchSetRequest.h"
#include "OAIUpdateXssMatchSetResponse.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_byte_match_set_request OAICreateByteMatchSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createByteMatchSet(const QString &x_amz_target, const OAICreateByteMatchSetRequest &oai_create_byte_match_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_geo_match_set_request OAICreateGeoMatchSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createGeoMatchSet(const QString &x_amz_target, const OAICreateGeoMatchSetRequest &oai_create_geo_match_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_ip_set_request OAICreateIPSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createIPSet(const QString &x_amz_target, const OAICreateIPSetRequest &oai_create_ip_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_rate_based_rule_request OAICreateRateBasedRuleRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createRateBasedRule(const QString &x_amz_target, const OAICreateRateBasedRuleRequest &oai_create_rate_based_rule_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_regex_match_set_request OAICreateRegexMatchSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createRegexMatchSet(const QString &x_amz_target, const OAICreateRegexMatchSetRequest &oai_create_regex_match_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_regex_pattern_set_request OAICreateRegexPatternSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createRegexPatternSet(const QString &x_amz_target, const OAICreateRegexPatternSetRequest &oai_create_regex_pattern_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_rule_request OAICreateRuleRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createRule(const QString &x_amz_target, const OAICreateRuleRequest &oai_create_rule_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_rule_group_request OAICreateRuleGroupRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createRuleGroup(const QString &x_amz_target, const OAICreateRuleGroupRequest &oai_create_rule_group_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_size_constraint_set_request OAICreateSizeConstraintSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createSizeConstraintSet(const QString &x_amz_target, const OAICreateSizeConstraintSetRequest &oai_create_size_constraint_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_sql_injection_match_set_request OAICreateSqlInjectionMatchSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createSqlInjectionMatchSet(const QString &x_amz_target, const OAICreateSqlInjectionMatchSetRequest &oai_create_sql_injection_match_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_web_acl_request OAICreateWebACLRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createWebACL(const QString &x_amz_target, const OAICreateWebACLRequest &oai_create_web_acl_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_web_acl_migration_stack_request OAICreateWebACLMigrationStackRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createWebACLMigrationStack(const QString &x_amz_target, const OAICreateWebACLMigrationStackRequest &oai_create_web_acl_migration_stack_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_xss_match_set_request OAICreateXssMatchSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createXssMatchSet(const QString &x_amz_target, const OAICreateXssMatchSetRequest &oai_create_xss_match_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_byte_match_set_request OAIDeleteByteMatchSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteByteMatchSet(const QString &x_amz_target, const OAIDeleteByteMatchSetRequest &oai_delete_byte_match_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_geo_match_set_request OAIDeleteGeoMatchSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteGeoMatchSet(const QString &x_amz_target, const OAIDeleteGeoMatchSetRequest &oai_delete_geo_match_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_ip_set_request OAIDeleteIPSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteIPSet(const QString &x_amz_target, const OAIDeleteIPSetRequest &oai_delete_ip_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_logging_configuration_request OAIDeleteLoggingConfigurationRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteLoggingConfiguration(const QString &x_amz_target, const OAIDeleteLoggingConfigurationRequest &oai_delete_logging_configuration_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_permission_policy_request OAIDeletePermissionPolicyRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deletePermissionPolicy(const QString &x_amz_target, const OAIDeletePermissionPolicyRequest &oai_delete_permission_policy_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_rate_based_rule_request OAIDeleteRateBasedRuleRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteRateBasedRule(const QString &x_amz_target, const OAIDeleteRateBasedRuleRequest &oai_delete_rate_based_rule_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_regex_match_set_request OAIDeleteRegexMatchSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteRegexMatchSet(const QString &x_amz_target, const OAIDeleteRegexMatchSetRequest &oai_delete_regex_match_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_regex_pattern_set_request OAIDeleteRegexPatternSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteRegexPatternSet(const QString &x_amz_target, const OAIDeleteRegexPatternSetRequest &oai_delete_regex_pattern_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_rule_request OAIDeleteRuleRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteRule(const QString &x_amz_target, const OAIDeleteRuleRequest &oai_delete_rule_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_rule_group_request OAIDeleteRuleGroupRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteRuleGroup(const QString &x_amz_target, const OAIDeleteRuleGroupRequest &oai_delete_rule_group_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_size_constraint_set_request OAIDeleteSizeConstraintSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteSizeConstraintSet(const QString &x_amz_target, const OAIDeleteSizeConstraintSetRequest &oai_delete_size_constraint_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_sql_injection_match_set_request OAIDeleteSqlInjectionMatchSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteSqlInjectionMatchSet(const QString &x_amz_target, const OAIDeleteSqlInjectionMatchSetRequest &oai_delete_sql_injection_match_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_web_acl_request OAIDeleteWebACLRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteWebACL(const QString &x_amz_target, const OAIDeleteWebACLRequest &oai_delete_web_acl_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_xss_match_set_request OAIDeleteXssMatchSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteXssMatchSet(const QString &x_amz_target, const OAIDeleteXssMatchSetRequest &oai_delete_xss_match_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_byte_match_set_request OAIGetByteMatchSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getByteMatchSet(const QString &x_amz_target, const OAIGetByteMatchSetRequest &oai_get_byte_match_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  body OAIObject [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getChangeToken(const QString &x_amz_target, const OAIObject &body, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_change_token_status_request OAIGetChangeTokenStatusRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getChangeTokenStatus(const QString &x_amz_target, const OAIGetChangeTokenStatusRequest &oai_get_change_token_status_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_geo_match_set_request OAIGetGeoMatchSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getGeoMatchSet(const QString &x_amz_target, const OAIGetGeoMatchSetRequest &oai_get_geo_match_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_ip_set_request OAIGetIPSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getIPSet(const QString &x_amz_target, const OAIGetIPSetRequest &oai_get_ip_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_logging_configuration_request OAIGetLoggingConfigurationRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getLoggingConfiguration(const QString &x_amz_target, const OAIGetLoggingConfigurationRequest &oai_get_logging_configuration_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_permission_policy_request OAIGetPermissionPolicyRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getPermissionPolicy(const QString &x_amz_target, const OAIGetPermissionPolicyRequest &oai_get_permission_policy_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_rate_based_rule_request OAIGetRateBasedRuleRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getRateBasedRule(const QString &x_amz_target, const OAIGetRateBasedRuleRequest &oai_get_rate_based_rule_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_rate_based_rule_managed_keys_request OAIGetRateBasedRuleManagedKeysRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getRateBasedRuleManagedKeys(const QString &x_amz_target, const OAIGetRateBasedRuleManagedKeysRequest &oai_get_rate_based_rule_managed_keys_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_regex_match_set_request OAIGetRegexMatchSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getRegexMatchSet(const QString &x_amz_target, const OAIGetRegexMatchSetRequest &oai_get_regex_match_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_regex_pattern_set_request OAIGetRegexPatternSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getRegexPatternSet(const QString &x_amz_target, const OAIGetRegexPatternSetRequest &oai_get_regex_pattern_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_rule_request OAIGetRuleRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getRule(const QString &x_amz_target, const OAIGetRuleRequest &oai_get_rule_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_rule_group_request OAIGetRuleGroupRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getRuleGroup(const QString &x_amz_target, const OAIGetRuleGroupRequest &oai_get_rule_group_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_sampled_requests_request OAIGetSampledRequestsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getSampledRequests(const QString &x_amz_target, const OAIGetSampledRequestsRequest &oai_get_sampled_requests_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_size_constraint_set_request OAIGetSizeConstraintSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getSizeConstraintSet(const QString &x_amz_target, const OAIGetSizeConstraintSetRequest &oai_get_size_constraint_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_sql_injection_match_set_request OAIGetSqlInjectionMatchSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getSqlInjectionMatchSet(const QString &x_amz_target, const OAIGetSqlInjectionMatchSetRequest &oai_get_sql_injection_match_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_web_acl_request OAIGetWebACLRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getWebACL(const QString &x_amz_target, const OAIGetWebACLRequest &oai_get_web_acl_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_xss_match_set_request OAIGetXssMatchSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getXssMatchSet(const QString &x_amz_target, const OAIGetXssMatchSetRequest &oai_get_xss_match_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_activated_rules_in_rule_group_request OAIListActivatedRulesInRuleGroupRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listActivatedRulesInRuleGroup(const QString &x_amz_target, const OAIListActivatedRulesInRuleGroupRequest &oai_list_activated_rules_in_rule_group_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_byte_match_sets_request OAIListByteMatchSetsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listByteMatchSets(const QString &x_amz_target, const OAIListByteMatchSetsRequest &oai_list_byte_match_sets_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_geo_match_sets_request OAIListGeoMatchSetsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listGeoMatchSets(const QString &x_amz_target, const OAIListGeoMatchSetsRequest &oai_list_geo_match_sets_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_ip_sets_request OAIListIPSetsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listIPSets(const QString &x_amz_target, const OAIListIPSetsRequest &oai_list_ip_sets_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_logging_configurations_request OAIListLoggingConfigurationsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listLoggingConfigurations(const QString &x_amz_target, const OAIListLoggingConfigurationsRequest &oai_list_logging_configurations_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_rate_based_rules_request OAIListRateBasedRulesRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listRateBasedRules(const QString &x_amz_target, const OAIListRateBasedRulesRequest &oai_list_rate_based_rules_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_regex_match_sets_request OAIListRegexMatchSetsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listRegexMatchSets(const QString &x_amz_target, const OAIListRegexMatchSetsRequest &oai_list_regex_match_sets_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_regex_pattern_sets_request OAIListRegexPatternSetsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listRegexPatternSets(const QString &x_amz_target, const OAIListRegexPatternSetsRequest &oai_list_regex_pattern_sets_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_rule_groups_request OAIListRuleGroupsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listRuleGroups(const QString &x_amz_target, const OAIListRuleGroupsRequest &oai_list_rule_groups_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_rules_request OAIListRulesRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listRules(const QString &x_amz_target, const OAIListRulesRequest &oai_list_rules_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_size_constraint_sets_request OAIListSizeConstraintSetsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listSizeConstraintSets(const QString &x_amz_target, const OAIListSizeConstraintSetsRequest &oai_list_size_constraint_sets_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_sql_injection_match_sets_request OAIListSqlInjectionMatchSetsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listSqlInjectionMatchSets(const QString &x_amz_target, const OAIListSqlInjectionMatchSetsRequest &oai_list_sql_injection_match_sets_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_subscribed_rule_groups_request OAIListSubscribedRuleGroupsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listSubscribedRuleGroups(const QString &x_amz_target, const OAIListSubscribedRuleGroupsRequest &oai_list_subscribed_rule_groups_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_tags_for_resource_request OAIListTagsForResourceRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listTagsForResource(const QString &x_amz_target, const OAIListTagsForResourceRequest &oai_list_tags_for_resource_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_web_acls_request OAIListWebACLsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listWebACLs(const QString &x_amz_target, const OAIListWebACLsRequest &oai_list_web_acls_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_xss_match_sets_request OAIListXssMatchSetsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listXssMatchSets(const QString &x_amz_target, const OAIListXssMatchSetsRequest &oai_list_xss_match_sets_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_put_logging_configuration_request OAIPutLoggingConfigurationRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void putLoggingConfiguration(const QString &x_amz_target, const OAIPutLoggingConfigurationRequest &oai_put_logging_configuration_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_put_permission_policy_request OAIPutPermissionPolicyRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void putPermissionPolicy(const QString &x_amz_target, const OAIPutPermissionPolicyRequest &oai_put_permission_policy_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_tag_resource_request OAITagResourceRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void tagResource(const QString &x_amz_target, const OAITagResourceRequest &oai_tag_resource_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_untag_resource_request OAIUntagResourceRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void untagResource(const QString &x_amz_target, const OAIUntagResourceRequest &oai_untag_resource_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_byte_match_set_request OAIUpdateByteMatchSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateByteMatchSet(const QString &x_amz_target, const OAIUpdateByteMatchSetRequest &oai_update_byte_match_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_geo_match_set_request OAIUpdateGeoMatchSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateGeoMatchSet(const QString &x_amz_target, const OAIUpdateGeoMatchSetRequest &oai_update_geo_match_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_ip_set_request OAIUpdateIPSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateIPSet(const QString &x_amz_target, const OAIUpdateIPSetRequest &oai_update_ip_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_rate_based_rule_request OAIUpdateRateBasedRuleRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateRateBasedRule(const QString &x_amz_target, const OAIUpdateRateBasedRuleRequest &oai_update_rate_based_rule_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_regex_match_set_request OAIUpdateRegexMatchSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateRegexMatchSet(const QString &x_amz_target, const OAIUpdateRegexMatchSetRequest &oai_update_regex_match_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_regex_pattern_set_request OAIUpdateRegexPatternSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateRegexPatternSet(const QString &x_amz_target, const OAIUpdateRegexPatternSetRequest &oai_update_regex_pattern_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_rule_request OAIUpdateRuleRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateRule(const QString &x_amz_target, const OAIUpdateRuleRequest &oai_update_rule_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_rule_group_request OAIUpdateRuleGroupRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateRuleGroup(const QString &x_amz_target, const OAIUpdateRuleGroupRequest &oai_update_rule_group_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_size_constraint_set_request OAIUpdateSizeConstraintSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateSizeConstraintSet(const QString &x_amz_target, const OAIUpdateSizeConstraintSetRequest &oai_update_size_constraint_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_sql_injection_match_set_request OAIUpdateSqlInjectionMatchSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateSqlInjectionMatchSet(const QString &x_amz_target, const OAIUpdateSqlInjectionMatchSetRequest &oai_update_sql_injection_match_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_web_acl_request OAIUpdateWebACLRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateWebACL(const QString &x_amz_target, const OAIUpdateWebACLRequest &oai_update_web_acl_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_xss_match_set_request OAIUpdateXssMatchSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateXssMatchSet(const QString &x_amz_target, const OAIUpdateXssMatchSetRequest &oai_update_xss_match_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createByteMatchSetCallback(OAIHttpRequestWorker *worker);
    void createGeoMatchSetCallback(OAIHttpRequestWorker *worker);
    void createIPSetCallback(OAIHttpRequestWorker *worker);
    void createRateBasedRuleCallback(OAIHttpRequestWorker *worker);
    void createRegexMatchSetCallback(OAIHttpRequestWorker *worker);
    void createRegexPatternSetCallback(OAIHttpRequestWorker *worker);
    void createRuleCallback(OAIHttpRequestWorker *worker);
    void createRuleGroupCallback(OAIHttpRequestWorker *worker);
    void createSizeConstraintSetCallback(OAIHttpRequestWorker *worker);
    void createSqlInjectionMatchSetCallback(OAIHttpRequestWorker *worker);
    void createWebACLCallback(OAIHttpRequestWorker *worker);
    void createWebACLMigrationStackCallback(OAIHttpRequestWorker *worker);
    void createXssMatchSetCallback(OAIHttpRequestWorker *worker);
    void deleteByteMatchSetCallback(OAIHttpRequestWorker *worker);
    void deleteGeoMatchSetCallback(OAIHttpRequestWorker *worker);
    void deleteIPSetCallback(OAIHttpRequestWorker *worker);
    void deleteLoggingConfigurationCallback(OAIHttpRequestWorker *worker);
    void deletePermissionPolicyCallback(OAIHttpRequestWorker *worker);
    void deleteRateBasedRuleCallback(OAIHttpRequestWorker *worker);
    void deleteRegexMatchSetCallback(OAIHttpRequestWorker *worker);
    void deleteRegexPatternSetCallback(OAIHttpRequestWorker *worker);
    void deleteRuleCallback(OAIHttpRequestWorker *worker);
    void deleteRuleGroupCallback(OAIHttpRequestWorker *worker);
    void deleteSizeConstraintSetCallback(OAIHttpRequestWorker *worker);
    void deleteSqlInjectionMatchSetCallback(OAIHttpRequestWorker *worker);
    void deleteWebACLCallback(OAIHttpRequestWorker *worker);
    void deleteXssMatchSetCallback(OAIHttpRequestWorker *worker);
    void getByteMatchSetCallback(OAIHttpRequestWorker *worker);
    void getChangeTokenCallback(OAIHttpRequestWorker *worker);
    void getChangeTokenStatusCallback(OAIHttpRequestWorker *worker);
    void getGeoMatchSetCallback(OAIHttpRequestWorker *worker);
    void getIPSetCallback(OAIHttpRequestWorker *worker);
    void getLoggingConfigurationCallback(OAIHttpRequestWorker *worker);
    void getPermissionPolicyCallback(OAIHttpRequestWorker *worker);
    void getRateBasedRuleCallback(OAIHttpRequestWorker *worker);
    void getRateBasedRuleManagedKeysCallback(OAIHttpRequestWorker *worker);
    void getRegexMatchSetCallback(OAIHttpRequestWorker *worker);
    void getRegexPatternSetCallback(OAIHttpRequestWorker *worker);
    void getRuleCallback(OAIHttpRequestWorker *worker);
    void getRuleGroupCallback(OAIHttpRequestWorker *worker);
    void getSampledRequestsCallback(OAIHttpRequestWorker *worker);
    void getSizeConstraintSetCallback(OAIHttpRequestWorker *worker);
    void getSqlInjectionMatchSetCallback(OAIHttpRequestWorker *worker);
    void getWebACLCallback(OAIHttpRequestWorker *worker);
    void getXssMatchSetCallback(OAIHttpRequestWorker *worker);
    void listActivatedRulesInRuleGroupCallback(OAIHttpRequestWorker *worker);
    void listByteMatchSetsCallback(OAIHttpRequestWorker *worker);
    void listGeoMatchSetsCallback(OAIHttpRequestWorker *worker);
    void listIPSetsCallback(OAIHttpRequestWorker *worker);
    void listLoggingConfigurationsCallback(OAIHttpRequestWorker *worker);
    void listRateBasedRulesCallback(OAIHttpRequestWorker *worker);
    void listRegexMatchSetsCallback(OAIHttpRequestWorker *worker);
    void listRegexPatternSetsCallback(OAIHttpRequestWorker *worker);
    void listRuleGroupsCallback(OAIHttpRequestWorker *worker);
    void listRulesCallback(OAIHttpRequestWorker *worker);
    void listSizeConstraintSetsCallback(OAIHttpRequestWorker *worker);
    void listSqlInjectionMatchSetsCallback(OAIHttpRequestWorker *worker);
    void listSubscribedRuleGroupsCallback(OAIHttpRequestWorker *worker);
    void listTagsForResourceCallback(OAIHttpRequestWorker *worker);
    void listWebACLsCallback(OAIHttpRequestWorker *worker);
    void listXssMatchSetsCallback(OAIHttpRequestWorker *worker);
    void putLoggingConfigurationCallback(OAIHttpRequestWorker *worker);
    void putPermissionPolicyCallback(OAIHttpRequestWorker *worker);
    void tagResourceCallback(OAIHttpRequestWorker *worker);
    void untagResourceCallback(OAIHttpRequestWorker *worker);
    void updateByteMatchSetCallback(OAIHttpRequestWorker *worker);
    void updateGeoMatchSetCallback(OAIHttpRequestWorker *worker);
    void updateIPSetCallback(OAIHttpRequestWorker *worker);
    void updateRateBasedRuleCallback(OAIHttpRequestWorker *worker);
    void updateRegexMatchSetCallback(OAIHttpRequestWorker *worker);
    void updateRegexPatternSetCallback(OAIHttpRequestWorker *worker);
    void updateRuleCallback(OAIHttpRequestWorker *worker);
    void updateRuleGroupCallback(OAIHttpRequestWorker *worker);
    void updateSizeConstraintSetCallback(OAIHttpRequestWorker *worker);
    void updateSqlInjectionMatchSetCallback(OAIHttpRequestWorker *worker);
    void updateWebACLCallback(OAIHttpRequestWorker *worker);
    void updateXssMatchSetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createByteMatchSetSignal(OAICreateByteMatchSetResponse summary);
    void createGeoMatchSetSignal(OAICreateGeoMatchSetResponse summary);
    void createIPSetSignal(OAICreateIPSetResponse summary);
    void createRateBasedRuleSignal(OAICreateRateBasedRuleResponse summary);
    void createRegexMatchSetSignal(OAICreateRegexMatchSetResponse summary);
    void createRegexPatternSetSignal(OAICreateRegexPatternSetResponse summary);
    void createRuleSignal(OAICreateRuleResponse summary);
    void createRuleGroupSignal(OAICreateRuleGroupResponse summary);
    void createSizeConstraintSetSignal(OAICreateSizeConstraintSetResponse summary);
    void createSqlInjectionMatchSetSignal(OAICreateSqlInjectionMatchSetResponse summary);
    void createWebACLSignal(OAICreateWebACLResponse summary);
    void createWebACLMigrationStackSignal(OAICreateWebACLMigrationStackResponse summary);
    void createXssMatchSetSignal(OAICreateXssMatchSetResponse summary);
    void deleteByteMatchSetSignal(OAIDeleteByteMatchSetResponse summary);
    void deleteGeoMatchSetSignal(OAIDeleteGeoMatchSetResponse summary);
    void deleteIPSetSignal(OAIDeleteIPSetResponse summary);
    void deleteLoggingConfigurationSignal(OAIObject summary);
    void deletePermissionPolicySignal(OAIObject summary);
    void deleteRateBasedRuleSignal(OAIDeleteRateBasedRuleResponse summary);
    void deleteRegexMatchSetSignal(OAIDeleteRegexMatchSetResponse summary);
    void deleteRegexPatternSetSignal(OAIDeleteRegexPatternSetResponse summary);
    void deleteRuleSignal(OAIDeleteRuleResponse summary);
    void deleteRuleGroupSignal(OAIDeleteRuleGroupResponse summary);
    void deleteSizeConstraintSetSignal(OAIDeleteSizeConstraintSetResponse summary);
    void deleteSqlInjectionMatchSetSignal(OAIDeleteSqlInjectionMatchSetResponse summary);
    void deleteWebACLSignal(OAIDeleteWebACLResponse summary);
    void deleteXssMatchSetSignal(OAIDeleteXssMatchSetResponse summary);
    void getByteMatchSetSignal(OAIGetByteMatchSetResponse summary);
    void getChangeTokenSignal(OAIGetChangeTokenResponse summary);
    void getChangeTokenStatusSignal(OAIGetChangeTokenStatusResponse summary);
    void getGeoMatchSetSignal(OAIGetGeoMatchSetResponse summary);
    void getIPSetSignal(OAIGetIPSetResponse summary);
    void getLoggingConfigurationSignal(OAIGetLoggingConfigurationResponse summary);
    void getPermissionPolicySignal(OAIGetPermissionPolicyResponse summary);
    void getRateBasedRuleSignal(OAIGetRateBasedRuleResponse summary);
    void getRateBasedRuleManagedKeysSignal(OAIGetRateBasedRuleManagedKeysResponse summary);
    void getRegexMatchSetSignal(OAIGetRegexMatchSetResponse summary);
    void getRegexPatternSetSignal(OAIGetRegexPatternSetResponse summary);
    void getRuleSignal(OAIGetRuleResponse summary);
    void getRuleGroupSignal(OAIGetRuleGroupResponse summary);
    void getSampledRequestsSignal(OAIGetSampledRequestsResponse summary);
    void getSizeConstraintSetSignal(OAIGetSizeConstraintSetResponse summary);
    void getSqlInjectionMatchSetSignal(OAIGetSqlInjectionMatchSetResponse summary);
    void getWebACLSignal(OAIGetWebACLResponse summary);
    void getXssMatchSetSignal(OAIGetXssMatchSetResponse summary);
    void listActivatedRulesInRuleGroupSignal(OAIListActivatedRulesInRuleGroupResponse summary);
    void listByteMatchSetsSignal(OAIListByteMatchSetsResponse summary);
    void listGeoMatchSetsSignal(OAIListGeoMatchSetsResponse summary);
    void listIPSetsSignal(OAIListIPSetsResponse summary);
    void listLoggingConfigurationsSignal(OAIListLoggingConfigurationsResponse summary);
    void listRateBasedRulesSignal(OAIListRateBasedRulesResponse summary);
    void listRegexMatchSetsSignal(OAIListRegexMatchSetsResponse summary);
    void listRegexPatternSetsSignal(OAIListRegexPatternSetsResponse summary);
    void listRuleGroupsSignal(OAIListRuleGroupsResponse summary);
    void listRulesSignal(OAIListRulesResponse summary);
    void listSizeConstraintSetsSignal(OAIListSizeConstraintSetsResponse summary);
    void listSqlInjectionMatchSetsSignal(OAIListSqlInjectionMatchSetsResponse summary);
    void listSubscribedRuleGroupsSignal(OAIListSubscribedRuleGroupsResponse summary);
    void listTagsForResourceSignal(OAIListTagsForResourceResponse summary);
    void listWebACLsSignal(OAIListWebACLsResponse summary);
    void listXssMatchSetsSignal(OAIListXssMatchSetsResponse summary);
    void putLoggingConfigurationSignal(OAIPutLoggingConfigurationResponse summary);
    void putPermissionPolicySignal(OAIObject summary);
    void tagResourceSignal(OAIObject summary);
    void untagResourceSignal(OAIObject summary);
    void updateByteMatchSetSignal(OAIUpdateByteMatchSetResponse summary);
    void updateGeoMatchSetSignal(OAIUpdateGeoMatchSetResponse summary);
    void updateIPSetSignal(OAIUpdateIPSetResponse summary);
    void updateRateBasedRuleSignal(OAIUpdateRateBasedRuleResponse summary);
    void updateRegexMatchSetSignal(OAIUpdateRegexMatchSetResponse summary);
    void updateRegexPatternSetSignal(OAIUpdateRegexPatternSetResponse summary);
    void updateRuleSignal(OAIUpdateRuleResponse summary);
    void updateRuleGroupSignal(OAIUpdateRuleGroupResponse summary);
    void updateSizeConstraintSetSignal(OAIUpdateSizeConstraintSetResponse summary);
    void updateSqlInjectionMatchSetSignal(OAIUpdateSqlInjectionMatchSetResponse summary);
    void updateWebACLSignal(OAIUpdateWebACLResponse summary);
    void updateXssMatchSetSignal(OAIUpdateXssMatchSetResponse summary);


    void createByteMatchSetSignalFull(OAIHttpRequestWorker *worker, OAICreateByteMatchSetResponse summary);
    void createGeoMatchSetSignalFull(OAIHttpRequestWorker *worker, OAICreateGeoMatchSetResponse summary);
    void createIPSetSignalFull(OAIHttpRequestWorker *worker, OAICreateIPSetResponse summary);
    void createRateBasedRuleSignalFull(OAIHttpRequestWorker *worker, OAICreateRateBasedRuleResponse summary);
    void createRegexMatchSetSignalFull(OAIHttpRequestWorker *worker, OAICreateRegexMatchSetResponse summary);
    void createRegexPatternSetSignalFull(OAIHttpRequestWorker *worker, OAICreateRegexPatternSetResponse summary);
    void createRuleSignalFull(OAIHttpRequestWorker *worker, OAICreateRuleResponse summary);
    void createRuleGroupSignalFull(OAIHttpRequestWorker *worker, OAICreateRuleGroupResponse summary);
    void createSizeConstraintSetSignalFull(OAIHttpRequestWorker *worker, OAICreateSizeConstraintSetResponse summary);
    void createSqlInjectionMatchSetSignalFull(OAIHttpRequestWorker *worker, OAICreateSqlInjectionMatchSetResponse summary);
    void createWebACLSignalFull(OAIHttpRequestWorker *worker, OAICreateWebACLResponse summary);
    void createWebACLMigrationStackSignalFull(OAIHttpRequestWorker *worker, OAICreateWebACLMigrationStackResponse summary);
    void createXssMatchSetSignalFull(OAIHttpRequestWorker *worker, OAICreateXssMatchSetResponse summary);
    void deleteByteMatchSetSignalFull(OAIHttpRequestWorker *worker, OAIDeleteByteMatchSetResponse summary);
    void deleteGeoMatchSetSignalFull(OAIHttpRequestWorker *worker, OAIDeleteGeoMatchSetResponse summary);
    void deleteIPSetSignalFull(OAIHttpRequestWorker *worker, OAIDeleteIPSetResponse summary);
    void deleteLoggingConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deletePermissionPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteRateBasedRuleSignalFull(OAIHttpRequestWorker *worker, OAIDeleteRateBasedRuleResponse summary);
    void deleteRegexMatchSetSignalFull(OAIHttpRequestWorker *worker, OAIDeleteRegexMatchSetResponse summary);
    void deleteRegexPatternSetSignalFull(OAIHttpRequestWorker *worker, OAIDeleteRegexPatternSetResponse summary);
    void deleteRuleSignalFull(OAIHttpRequestWorker *worker, OAIDeleteRuleResponse summary);
    void deleteRuleGroupSignalFull(OAIHttpRequestWorker *worker, OAIDeleteRuleGroupResponse summary);
    void deleteSizeConstraintSetSignalFull(OAIHttpRequestWorker *worker, OAIDeleteSizeConstraintSetResponse summary);
    void deleteSqlInjectionMatchSetSignalFull(OAIHttpRequestWorker *worker, OAIDeleteSqlInjectionMatchSetResponse summary);
    void deleteWebACLSignalFull(OAIHttpRequestWorker *worker, OAIDeleteWebACLResponse summary);
    void deleteXssMatchSetSignalFull(OAIHttpRequestWorker *worker, OAIDeleteXssMatchSetResponse summary);
    void getByteMatchSetSignalFull(OAIHttpRequestWorker *worker, OAIGetByteMatchSetResponse summary);
    void getChangeTokenSignalFull(OAIHttpRequestWorker *worker, OAIGetChangeTokenResponse summary);
    void getChangeTokenStatusSignalFull(OAIHttpRequestWorker *worker, OAIGetChangeTokenStatusResponse summary);
    void getGeoMatchSetSignalFull(OAIHttpRequestWorker *worker, OAIGetGeoMatchSetResponse summary);
    void getIPSetSignalFull(OAIHttpRequestWorker *worker, OAIGetIPSetResponse summary);
    void getLoggingConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIGetLoggingConfigurationResponse summary);
    void getPermissionPolicySignalFull(OAIHttpRequestWorker *worker, OAIGetPermissionPolicyResponse summary);
    void getRateBasedRuleSignalFull(OAIHttpRequestWorker *worker, OAIGetRateBasedRuleResponse summary);
    void getRateBasedRuleManagedKeysSignalFull(OAIHttpRequestWorker *worker, OAIGetRateBasedRuleManagedKeysResponse summary);
    void getRegexMatchSetSignalFull(OAIHttpRequestWorker *worker, OAIGetRegexMatchSetResponse summary);
    void getRegexPatternSetSignalFull(OAIHttpRequestWorker *worker, OAIGetRegexPatternSetResponse summary);
    void getRuleSignalFull(OAIHttpRequestWorker *worker, OAIGetRuleResponse summary);
    void getRuleGroupSignalFull(OAIHttpRequestWorker *worker, OAIGetRuleGroupResponse summary);
    void getSampledRequestsSignalFull(OAIHttpRequestWorker *worker, OAIGetSampledRequestsResponse summary);
    void getSizeConstraintSetSignalFull(OAIHttpRequestWorker *worker, OAIGetSizeConstraintSetResponse summary);
    void getSqlInjectionMatchSetSignalFull(OAIHttpRequestWorker *worker, OAIGetSqlInjectionMatchSetResponse summary);
    void getWebACLSignalFull(OAIHttpRequestWorker *worker, OAIGetWebACLResponse summary);
    void getXssMatchSetSignalFull(OAIHttpRequestWorker *worker, OAIGetXssMatchSetResponse summary);
    void listActivatedRulesInRuleGroupSignalFull(OAIHttpRequestWorker *worker, OAIListActivatedRulesInRuleGroupResponse summary);
    void listByteMatchSetsSignalFull(OAIHttpRequestWorker *worker, OAIListByteMatchSetsResponse summary);
    void listGeoMatchSetsSignalFull(OAIHttpRequestWorker *worker, OAIListGeoMatchSetsResponse summary);
    void listIPSetsSignalFull(OAIHttpRequestWorker *worker, OAIListIPSetsResponse summary);
    void listLoggingConfigurationsSignalFull(OAIHttpRequestWorker *worker, OAIListLoggingConfigurationsResponse summary);
    void listRateBasedRulesSignalFull(OAIHttpRequestWorker *worker, OAIListRateBasedRulesResponse summary);
    void listRegexMatchSetsSignalFull(OAIHttpRequestWorker *worker, OAIListRegexMatchSetsResponse summary);
    void listRegexPatternSetsSignalFull(OAIHttpRequestWorker *worker, OAIListRegexPatternSetsResponse summary);
    void listRuleGroupsSignalFull(OAIHttpRequestWorker *worker, OAIListRuleGroupsResponse summary);
    void listRulesSignalFull(OAIHttpRequestWorker *worker, OAIListRulesResponse summary);
    void listSizeConstraintSetsSignalFull(OAIHttpRequestWorker *worker, OAIListSizeConstraintSetsResponse summary);
    void listSqlInjectionMatchSetsSignalFull(OAIHttpRequestWorker *worker, OAIListSqlInjectionMatchSetsResponse summary);
    void listSubscribedRuleGroupsSignalFull(OAIHttpRequestWorker *worker, OAIListSubscribedRuleGroupsResponse summary);
    void listTagsForResourceSignalFull(OAIHttpRequestWorker *worker, OAIListTagsForResourceResponse summary);
    void listWebACLsSignalFull(OAIHttpRequestWorker *worker, OAIListWebACLsResponse summary);
    void listXssMatchSetsSignalFull(OAIHttpRequestWorker *worker, OAIListXssMatchSetsResponse summary);
    void putLoggingConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIPutLoggingConfigurationResponse summary);
    void putPermissionPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void tagResourceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void untagResourceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateByteMatchSetSignalFull(OAIHttpRequestWorker *worker, OAIUpdateByteMatchSetResponse summary);
    void updateGeoMatchSetSignalFull(OAIHttpRequestWorker *worker, OAIUpdateGeoMatchSetResponse summary);
    void updateIPSetSignalFull(OAIHttpRequestWorker *worker, OAIUpdateIPSetResponse summary);
    void updateRateBasedRuleSignalFull(OAIHttpRequestWorker *worker, OAIUpdateRateBasedRuleResponse summary);
    void updateRegexMatchSetSignalFull(OAIHttpRequestWorker *worker, OAIUpdateRegexMatchSetResponse summary);
    void updateRegexPatternSetSignalFull(OAIHttpRequestWorker *worker, OAIUpdateRegexPatternSetResponse summary);
    void updateRuleSignalFull(OAIHttpRequestWorker *worker, OAIUpdateRuleResponse summary);
    void updateRuleGroupSignalFull(OAIHttpRequestWorker *worker, OAIUpdateRuleGroupResponse summary);
    void updateSizeConstraintSetSignalFull(OAIHttpRequestWorker *worker, OAIUpdateSizeConstraintSetResponse summary);
    void updateSqlInjectionMatchSetSignalFull(OAIHttpRequestWorker *worker, OAIUpdateSqlInjectionMatchSetResponse summary);
    void updateWebACLSignalFull(OAIHttpRequestWorker *worker, OAIUpdateWebACLResponse summary);
    void updateXssMatchSetSignalFull(OAIHttpRequestWorker *worker, OAIUpdateXssMatchSetResponse summary);

    Q_DECL_DEPRECATED_X("Use createByteMatchSetSignalError() instead")
    void createByteMatchSetSignalE(OAICreateByteMatchSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createByteMatchSetSignalError(OAICreateByteMatchSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGeoMatchSetSignalError() instead")
    void createGeoMatchSetSignalE(OAICreateGeoMatchSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createGeoMatchSetSignalError(OAICreateGeoMatchSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createIPSetSignalError() instead")
    void createIPSetSignalE(OAICreateIPSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createIPSetSignalError(OAICreateIPSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRateBasedRuleSignalError() instead")
    void createRateBasedRuleSignalE(OAICreateRateBasedRuleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createRateBasedRuleSignalError(OAICreateRateBasedRuleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRegexMatchSetSignalError() instead")
    void createRegexMatchSetSignalE(OAICreateRegexMatchSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createRegexMatchSetSignalError(OAICreateRegexMatchSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRegexPatternSetSignalError() instead")
    void createRegexPatternSetSignalE(OAICreateRegexPatternSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createRegexPatternSetSignalError(OAICreateRegexPatternSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRuleSignalError() instead")
    void createRuleSignalE(OAICreateRuleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createRuleSignalError(OAICreateRuleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRuleGroupSignalError() instead")
    void createRuleGroupSignalE(OAICreateRuleGroupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createRuleGroupSignalError(OAICreateRuleGroupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSizeConstraintSetSignalError() instead")
    void createSizeConstraintSetSignalE(OAICreateSizeConstraintSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSizeConstraintSetSignalError(OAICreateSizeConstraintSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSqlInjectionMatchSetSignalError() instead")
    void createSqlInjectionMatchSetSignalE(OAICreateSqlInjectionMatchSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSqlInjectionMatchSetSignalError(OAICreateSqlInjectionMatchSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createWebACLSignalError() instead")
    void createWebACLSignalE(OAICreateWebACLResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createWebACLSignalError(OAICreateWebACLResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createWebACLMigrationStackSignalError() instead")
    void createWebACLMigrationStackSignalE(OAICreateWebACLMigrationStackResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createWebACLMigrationStackSignalError(OAICreateWebACLMigrationStackResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createXssMatchSetSignalError() instead")
    void createXssMatchSetSignalE(OAICreateXssMatchSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createXssMatchSetSignalError(OAICreateXssMatchSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteByteMatchSetSignalError() instead")
    void deleteByteMatchSetSignalE(OAIDeleteByteMatchSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteByteMatchSetSignalError(OAIDeleteByteMatchSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGeoMatchSetSignalError() instead")
    void deleteGeoMatchSetSignalE(OAIDeleteGeoMatchSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGeoMatchSetSignalError(OAIDeleteGeoMatchSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteIPSetSignalError() instead")
    void deleteIPSetSignalE(OAIDeleteIPSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteIPSetSignalError(OAIDeleteIPSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteLoggingConfigurationSignalError() instead")
    void deleteLoggingConfigurationSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLoggingConfigurationSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePermissionPolicySignalError() instead")
    void deletePermissionPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePermissionPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRateBasedRuleSignalError() instead")
    void deleteRateBasedRuleSignalE(OAIDeleteRateBasedRuleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRateBasedRuleSignalError(OAIDeleteRateBasedRuleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRegexMatchSetSignalError() instead")
    void deleteRegexMatchSetSignalE(OAIDeleteRegexMatchSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRegexMatchSetSignalError(OAIDeleteRegexMatchSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRegexPatternSetSignalError() instead")
    void deleteRegexPatternSetSignalE(OAIDeleteRegexPatternSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRegexPatternSetSignalError(OAIDeleteRegexPatternSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRuleSignalError() instead")
    void deleteRuleSignalE(OAIDeleteRuleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRuleSignalError(OAIDeleteRuleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRuleGroupSignalError() instead")
    void deleteRuleGroupSignalE(OAIDeleteRuleGroupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRuleGroupSignalError(OAIDeleteRuleGroupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSizeConstraintSetSignalError() instead")
    void deleteSizeConstraintSetSignalE(OAIDeleteSizeConstraintSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSizeConstraintSetSignalError(OAIDeleteSizeConstraintSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSqlInjectionMatchSetSignalError() instead")
    void deleteSqlInjectionMatchSetSignalE(OAIDeleteSqlInjectionMatchSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSqlInjectionMatchSetSignalError(OAIDeleteSqlInjectionMatchSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWebACLSignalError() instead")
    void deleteWebACLSignalE(OAIDeleteWebACLResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWebACLSignalError(OAIDeleteWebACLResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteXssMatchSetSignalError() instead")
    void deleteXssMatchSetSignalE(OAIDeleteXssMatchSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteXssMatchSetSignalError(OAIDeleteXssMatchSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getByteMatchSetSignalError() instead")
    void getByteMatchSetSignalE(OAIGetByteMatchSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getByteMatchSetSignalError(OAIGetByteMatchSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChangeTokenSignalError() instead")
    void getChangeTokenSignalE(OAIGetChangeTokenResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChangeTokenSignalError(OAIGetChangeTokenResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChangeTokenStatusSignalError() instead")
    void getChangeTokenStatusSignalE(OAIGetChangeTokenStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChangeTokenStatusSignalError(OAIGetChangeTokenStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeoMatchSetSignalError() instead")
    void getGeoMatchSetSignalE(OAIGetGeoMatchSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeoMatchSetSignalError(OAIGetGeoMatchSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIPSetSignalError() instead")
    void getIPSetSignalE(OAIGetIPSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIPSetSignalError(OAIGetIPSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLoggingConfigurationSignalError() instead")
    void getLoggingConfigurationSignalE(OAIGetLoggingConfigurationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLoggingConfigurationSignalError(OAIGetLoggingConfigurationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPermissionPolicySignalError() instead")
    void getPermissionPolicySignalE(OAIGetPermissionPolicyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPermissionPolicySignalError(OAIGetPermissionPolicyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRateBasedRuleSignalError() instead")
    void getRateBasedRuleSignalE(OAIGetRateBasedRuleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRateBasedRuleSignalError(OAIGetRateBasedRuleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRateBasedRuleManagedKeysSignalError() instead")
    void getRateBasedRuleManagedKeysSignalE(OAIGetRateBasedRuleManagedKeysResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRateBasedRuleManagedKeysSignalError(OAIGetRateBasedRuleManagedKeysResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegexMatchSetSignalError() instead")
    void getRegexMatchSetSignalE(OAIGetRegexMatchSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegexMatchSetSignalError(OAIGetRegexMatchSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegexPatternSetSignalError() instead")
    void getRegexPatternSetSignalE(OAIGetRegexPatternSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegexPatternSetSignalError(OAIGetRegexPatternSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRuleSignalError() instead")
    void getRuleSignalE(OAIGetRuleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRuleSignalError(OAIGetRuleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRuleGroupSignalError() instead")
    void getRuleGroupSignalE(OAIGetRuleGroupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRuleGroupSignalError(OAIGetRuleGroupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSampledRequestsSignalError() instead")
    void getSampledRequestsSignalE(OAIGetSampledRequestsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSampledRequestsSignalError(OAIGetSampledRequestsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSizeConstraintSetSignalError() instead")
    void getSizeConstraintSetSignalE(OAIGetSizeConstraintSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSizeConstraintSetSignalError(OAIGetSizeConstraintSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSqlInjectionMatchSetSignalError() instead")
    void getSqlInjectionMatchSetSignalE(OAIGetSqlInjectionMatchSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSqlInjectionMatchSetSignalError(OAIGetSqlInjectionMatchSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWebACLSignalError() instead")
    void getWebACLSignalE(OAIGetWebACLResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWebACLSignalError(OAIGetWebACLResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getXssMatchSetSignalError() instead")
    void getXssMatchSetSignalE(OAIGetXssMatchSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getXssMatchSetSignalError(OAIGetXssMatchSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listActivatedRulesInRuleGroupSignalError() instead")
    void listActivatedRulesInRuleGroupSignalE(OAIListActivatedRulesInRuleGroupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listActivatedRulesInRuleGroupSignalError(OAIListActivatedRulesInRuleGroupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listByteMatchSetsSignalError() instead")
    void listByteMatchSetsSignalE(OAIListByteMatchSetsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listByteMatchSetsSignalError(OAIListByteMatchSetsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listGeoMatchSetsSignalError() instead")
    void listGeoMatchSetsSignalE(OAIListGeoMatchSetsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listGeoMatchSetsSignalError(OAIListGeoMatchSetsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listIPSetsSignalError() instead")
    void listIPSetsSignalE(OAIListIPSetsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listIPSetsSignalError(OAIListIPSetsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLoggingConfigurationsSignalError() instead")
    void listLoggingConfigurationsSignalE(OAIListLoggingConfigurationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listLoggingConfigurationsSignalError(OAIListLoggingConfigurationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRateBasedRulesSignalError() instead")
    void listRateBasedRulesSignalE(OAIListRateBasedRulesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listRateBasedRulesSignalError(OAIListRateBasedRulesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRegexMatchSetsSignalError() instead")
    void listRegexMatchSetsSignalE(OAIListRegexMatchSetsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listRegexMatchSetsSignalError(OAIListRegexMatchSetsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRegexPatternSetsSignalError() instead")
    void listRegexPatternSetsSignalE(OAIListRegexPatternSetsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listRegexPatternSetsSignalError(OAIListRegexPatternSetsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRuleGroupsSignalError() instead")
    void listRuleGroupsSignalE(OAIListRuleGroupsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listRuleGroupsSignalError(OAIListRuleGroupsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRulesSignalError() instead")
    void listRulesSignalE(OAIListRulesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listRulesSignalError(OAIListRulesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSizeConstraintSetsSignalError() instead")
    void listSizeConstraintSetsSignalE(OAIListSizeConstraintSetsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSizeConstraintSetsSignalError(OAIListSizeConstraintSetsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSqlInjectionMatchSetsSignalError() instead")
    void listSqlInjectionMatchSetsSignalE(OAIListSqlInjectionMatchSetsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSqlInjectionMatchSetsSignalError(OAIListSqlInjectionMatchSetsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSubscribedRuleGroupsSignalError() instead")
    void listSubscribedRuleGroupsSignalE(OAIListSubscribedRuleGroupsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSubscribedRuleGroupsSignalError(OAIListSubscribedRuleGroupsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResourceSignalError() instead")
    void listTagsForResourceSignalE(OAIListTagsForResourceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResourceSignalError(OAIListTagsForResourceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listWebACLsSignalError() instead")
    void listWebACLsSignalE(OAIListWebACLsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listWebACLsSignalError(OAIListWebACLsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listXssMatchSetsSignalError() instead")
    void listXssMatchSetsSignalE(OAIListXssMatchSetsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listXssMatchSetsSignalError(OAIListXssMatchSetsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putLoggingConfigurationSignalError() instead")
    void putLoggingConfigurationSignalE(OAIPutLoggingConfigurationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putLoggingConfigurationSignalError(OAIPutLoggingConfigurationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPermissionPolicySignalError() instead")
    void putPermissionPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putPermissionPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagResourceSignalError() instead")
    void tagResourceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagResourceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagResourceSignalError() instead")
    void untagResourceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void untagResourceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateByteMatchSetSignalError() instead")
    void updateByteMatchSetSignalE(OAIUpdateByteMatchSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateByteMatchSetSignalError(OAIUpdateByteMatchSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGeoMatchSetSignalError() instead")
    void updateGeoMatchSetSignalE(OAIUpdateGeoMatchSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGeoMatchSetSignalError(OAIUpdateGeoMatchSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateIPSetSignalError() instead")
    void updateIPSetSignalE(OAIUpdateIPSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateIPSetSignalError(OAIUpdateIPSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRateBasedRuleSignalError() instead")
    void updateRateBasedRuleSignalE(OAIUpdateRateBasedRuleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRateBasedRuleSignalError(OAIUpdateRateBasedRuleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRegexMatchSetSignalError() instead")
    void updateRegexMatchSetSignalE(OAIUpdateRegexMatchSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRegexMatchSetSignalError(OAIUpdateRegexMatchSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRegexPatternSetSignalError() instead")
    void updateRegexPatternSetSignalE(OAIUpdateRegexPatternSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRegexPatternSetSignalError(OAIUpdateRegexPatternSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRuleSignalError() instead")
    void updateRuleSignalE(OAIUpdateRuleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRuleSignalError(OAIUpdateRuleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRuleGroupSignalError() instead")
    void updateRuleGroupSignalE(OAIUpdateRuleGroupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRuleGroupSignalError(OAIUpdateRuleGroupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSizeConstraintSetSignalError() instead")
    void updateSizeConstraintSetSignalE(OAIUpdateSizeConstraintSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSizeConstraintSetSignalError(OAIUpdateSizeConstraintSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSqlInjectionMatchSetSignalError() instead")
    void updateSqlInjectionMatchSetSignalE(OAIUpdateSqlInjectionMatchSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSqlInjectionMatchSetSignalError(OAIUpdateSqlInjectionMatchSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWebACLSignalError() instead")
    void updateWebACLSignalE(OAIUpdateWebACLResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWebACLSignalError(OAIUpdateWebACLResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateXssMatchSetSignalError() instead")
    void updateXssMatchSetSignalE(OAIUpdateXssMatchSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateXssMatchSetSignalError(OAIUpdateXssMatchSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createByteMatchSetSignalErrorFull() instead")
    void createByteMatchSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createByteMatchSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGeoMatchSetSignalErrorFull() instead")
    void createGeoMatchSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createGeoMatchSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createIPSetSignalErrorFull() instead")
    void createIPSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createIPSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRateBasedRuleSignalErrorFull() instead")
    void createRateBasedRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createRateBasedRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRegexMatchSetSignalErrorFull() instead")
    void createRegexMatchSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createRegexMatchSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRegexPatternSetSignalErrorFull() instead")
    void createRegexPatternSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createRegexPatternSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRuleSignalErrorFull() instead")
    void createRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRuleGroupSignalErrorFull() instead")
    void createRuleGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createRuleGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSizeConstraintSetSignalErrorFull() instead")
    void createSizeConstraintSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSizeConstraintSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSqlInjectionMatchSetSignalErrorFull() instead")
    void createSqlInjectionMatchSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSqlInjectionMatchSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createWebACLSignalErrorFull() instead")
    void createWebACLSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createWebACLSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createWebACLMigrationStackSignalErrorFull() instead")
    void createWebACLMigrationStackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createWebACLMigrationStackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createXssMatchSetSignalErrorFull() instead")
    void createXssMatchSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createXssMatchSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteByteMatchSetSignalErrorFull() instead")
    void deleteByteMatchSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteByteMatchSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGeoMatchSetSignalErrorFull() instead")
    void deleteGeoMatchSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGeoMatchSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteIPSetSignalErrorFull() instead")
    void deleteIPSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteIPSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteLoggingConfigurationSignalErrorFull() instead")
    void deleteLoggingConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLoggingConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePermissionPolicySignalErrorFull() instead")
    void deletePermissionPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePermissionPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRateBasedRuleSignalErrorFull() instead")
    void deleteRateBasedRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRateBasedRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRegexMatchSetSignalErrorFull() instead")
    void deleteRegexMatchSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRegexMatchSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRegexPatternSetSignalErrorFull() instead")
    void deleteRegexPatternSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRegexPatternSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRuleSignalErrorFull() instead")
    void deleteRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRuleGroupSignalErrorFull() instead")
    void deleteRuleGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRuleGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSizeConstraintSetSignalErrorFull() instead")
    void deleteSizeConstraintSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSizeConstraintSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSqlInjectionMatchSetSignalErrorFull() instead")
    void deleteSqlInjectionMatchSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSqlInjectionMatchSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWebACLSignalErrorFull() instead")
    void deleteWebACLSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWebACLSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteXssMatchSetSignalErrorFull() instead")
    void deleteXssMatchSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteXssMatchSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getByteMatchSetSignalErrorFull() instead")
    void getByteMatchSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getByteMatchSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChangeTokenSignalErrorFull() instead")
    void getChangeTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChangeTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChangeTokenStatusSignalErrorFull() instead")
    void getChangeTokenStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChangeTokenStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGeoMatchSetSignalErrorFull() instead")
    void getGeoMatchSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGeoMatchSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIPSetSignalErrorFull() instead")
    void getIPSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIPSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLoggingConfigurationSignalErrorFull() instead")
    void getLoggingConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLoggingConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPermissionPolicySignalErrorFull() instead")
    void getPermissionPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPermissionPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRateBasedRuleSignalErrorFull() instead")
    void getRateBasedRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRateBasedRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRateBasedRuleManagedKeysSignalErrorFull() instead")
    void getRateBasedRuleManagedKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRateBasedRuleManagedKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegexMatchSetSignalErrorFull() instead")
    void getRegexMatchSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegexMatchSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegexPatternSetSignalErrorFull() instead")
    void getRegexPatternSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegexPatternSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRuleSignalErrorFull() instead")
    void getRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRuleGroupSignalErrorFull() instead")
    void getRuleGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRuleGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSampledRequestsSignalErrorFull() instead")
    void getSampledRequestsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSampledRequestsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSizeConstraintSetSignalErrorFull() instead")
    void getSizeConstraintSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSizeConstraintSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSqlInjectionMatchSetSignalErrorFull() instead")
    void getSqlInjectionMatchSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSqlInjectionMatchSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWebACLSignalErrorFull() instead")
    void getWebACLSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWebACLSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getXssMatchSetSignalErrorFull() instead")
    void getXssMatchSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getXssMatchSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listActivatedRulesInRuleGroupSignalErrorFull() instead")
    void listActivatedRulesInRuleGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listActivatedRulesInRuleGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listByteMatchSetsSignalErrorFull() instead")
    void listByteMatchSetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listByteMatchSetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listGeoMatchSetsSignalErrorFull() instead")
    void listGeoMatchSetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listGeoMatchSetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listIPSetsSignalErrorFull() instead")
    void listIPSetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listIPSetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLoggingConfigurationsSignalErrorFull() instead")
    void listLoggingConfigurationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listLoggingConfigurationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRateBasedRulesSignalErrorFull() instead")
    void listRateBasedRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRateBasedRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRegexMatchSetsSignalErrorFull() instead")
    void listRegexMatchSetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRegexMatchSetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRegexPatternSetsSignalErrorFull() instead")
    void listRegexPatternSetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRegexPatternSetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRuleGroupsSignalErrorFull() instead")
    void listRuleGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRuleGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRulesSignalErrorFull() instead")
    void listRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSizeConstraintSetsSignalErrorFull() instead")
    void listSizeConstraintSetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSizeConstraintSetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSqlInjectionMatchSetsSignalErrorFull() instead")
    void listSqlInjectionMatchSetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSqlInjectionMatchSetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSubscribedRuleGroupsSignalErrorFull() instead")
    void listSubscribedRuleGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSubscribedRuleGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResourceSignalErrorFull() instead")
    void listTagsForResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listWebACLsSignalErrorFull() instead")
    void listWebACLsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listWebACLsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listXssMatchSetsSignalErrorFull() instead")
    void listXssMatchSetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listXssMatchSetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putLoggingConfigurationSignalErrorFull() instead")
    void putLoggingConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putLoggingConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPermissionPolicySignalErrorFull() instead")
    void putPermissionPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putPermissionPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagResourceSignalErrorFull() instead")
    void tagResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagResourceSignalErrorFull() instead")
    void untagResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void untagResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateByteMatchSetSignalErrorFull() instead")
    void updateByteMatchSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateByteMatchSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGeoMatchSetSignalErrorFull() instead")
    void updateGeoMatchSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGeoMatchSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateIPSetSignalErrorFull() instead")
    void updateIPSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateIPSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRateBasedRuleSignalErrorFull() instead")
    void updateRateBasedRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRateBasedRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRegexMatchSetSignalErrorFull() instead")
    void updateRegexMatchSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRegexMatchSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRegexPatternSetSignalErrorFull() instead")
    void updateRegexPatternSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRegexPatternSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRuleSignalErrorFull() instead")
    void updateRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRuleGroupSignalErrorFull() instead")
    void updateRuleGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRuleGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSizeConstraintSetSignalErrorFull() instead")
    void updateSizeConstraintSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSizeConstraintSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSqlInjectionMatchSetSignalErrorFull() instead")
    void updateSqlInjectionMatchSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSqlInjectionMatchSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWebACLSignalErrorFull() instead")
    void updateWebACLSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWebACLSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateXssMatchSetSignalErrorFull() instead")
    void updateXssMatchSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateXssMatchSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
