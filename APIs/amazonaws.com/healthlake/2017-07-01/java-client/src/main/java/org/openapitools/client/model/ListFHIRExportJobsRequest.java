/*
 * Amazon HealthLake
 * AWS HealthLake is a HIPAA eligibile service that allows customers to store, transform, query, and analyze their FHIR-formatted data in a consistent fashion in the cloud.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.JobStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListFHIRExportJobsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:50.835141-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListFHIRExportJobsRequest {
  public static final String SERIALIZED_NAME_DATASTORE_ID = "DatastoreId";
  @SerializedName(SERIALIZED_NAME_DATASTORE_ID)
  private String datastoreId;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "MaxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public static final String SERIALIZED_NAME_JOB_NAME = "JobName";
  @SerializedName(SERIALIZED_NAME_JOB_NAME)
  private String jobName;

  public static final String SERIALIZED_NAME_JOB_STATUS = "JobStatus";
  @SerializedName(SERIALIZED_NAME_JOB_STATUS)
  private JobStatus jobStatus;

  public static final String SERIALIZED_NAME_SUBMITTED_BEFORE = "SubmittedBefore";
  @SerializedName(SERIALIZED_NAME_SUBMITTED_BEFORE)
  private OffsetDateTime submittedBefore;

  public static final String SERIALIZED_NAME_SUBMITTED_AFTER = "SubmittedAfter";
  @SerializedName(SERIALIZED_NAME_SUBMITTED_AFTER)
  private OffsetDateTime submittedAfter;

  public ListFHIRExportJobsRequest() {
  }

  public ListFHIRExportJobsRequest datastoreId(String datastoreId) {
    this.datastoreId = datastoreId;
    return this;
  }

  /**
   * Get datastoreId
   * @return datastoreId
   */
  @javax.annotation.Nonnull
  public String getDatastoreId() {
    return datastoreId;
  }

  public void setDatastoreId(String datastoreId) {
    this.datastoreId = datastoreId;
  }


  public ListFHIRExportJobsRequest nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Get nextToken
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public ListFHIRExportJobsRequest maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * Get maxResults
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }


  public ListFHIRExportJobsRequest jobName(String jobName) {
    this.jobName = jobName;
    return this;
  }

  /**
   * Get jobName
   * @return jobName
   */
  @javax.annotation.Nullable
  public String getJobName() {
    return jobName;
  }

  public void setJobName(String jobName) {
    this.jobName = jobName;
  }


  public ListFHIRExportJobsRequest jobStatus(JobStatus jobStatus) {
    this.jobStatus = jobStatus;
    return this;
  }

  /**
   * Get jobStatus
   * @return jobStatus
   */
  @javax.annotation.Nullable
  public JobStatus getJobStatus() {
    return jobStatus;
  }

  public void setJobStatus(JobStatus jobStatus) {
    this.jobStatus = jobStatus;
  }


  public ListFHIRExportJobsRequest submittedBefore(OffsetDateTime submittedBefore) {
    this.submittedBefore = submittedBefore;
    return this;
  }

  /**
   * Get submittedBefore
   * @return submittedBefore
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSubmittedBefore() {
    return submittedBefore;
  }

  public void setSubmittedBefore(OffsetDateTime submittedBefore) {
    this.submittedBefore = submittedBefore;
  }


  public ListFHIRExportJobsRequest submittedAfter(OffsetDateTime submittedAfter) {
    this.submittedAfter = submittedAfter;
    return this;
  }

  /**
   * Get submittedAfter
   * @return submittedAfter
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSubmittedAfter() {
    return submittedAfter;
  }

  public void setSubmittedAfter(OffsetDateTime submittedAfter) {
    this.submittedAfter = submittedAfter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListFHIRExportJobsRequest listFHIRExportJobsRequest = (ListFHIRExportJobsRequest) o;
    return Objects.equals(this.datastoreId, listFHIRExportJobsRequest.datastoreId) &&
        Objects.equals(this.nextToken, listFHIRExportJobsRequest.nextToken) &&
        Objects.equals(this.maxResults, listFHIRExportJobsRequest.maxResults) &&
        Objects.equals(this.jobName, listFHIRExportJobsRequest.jobName) &&
        Objects.equals(this.jobStatus, listFHIRExportJobsRequest.jobStatus) &&
        Objects.equals(this.submittedBefore, listFHIRExportJobsRequest.submittedBefore) &&
        Objects.equals(this.submittedAfter, listFHIRExportJobsRequest.submittedAfter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(datastoreId, nextToken, maxResults, jobName, jobStatus, submittedBefore, submittedAfter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListFHIRExportJobsRequest {\n");
    sb.append("    datastoreId: ").append(toIndentedString(datastoreId)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    jobName: ").append(toIndentedString(jobName)).append("\n");
    sb.append("    jobStatus: ").append(toIndentedString(jobStatus)).append("\n");
    sb.append("    submittedBefore: ").append(toIndentedString(submittedBefore)).append("\n");
    sb.append("    submittedAfter: ").append(toIndentedString(submittedAfter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DatastoreId");
    openapiFields.add("NextToken");
    openapiFields.add("MaxResults");
    openapiFields.add("JobName");
    openapiFields.add("JobStatus");
    openapiFields.add("SubmittedBefore");
    openapiFields.add("SubmittedAfter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DatastoreId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListFHIRExportJobsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListFHIRExportJobsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListFHIRExportJobsRequest is not found in the empty JSON string", ListFHIRExportJobsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListFHIRExportJobsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListFHIRExportJobsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListFHIRExportJobsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `DatastoreId`
      String.validateJsonElement(jsonObj.get("DatastoreId"));
      // validate the optional field `NextToken`
      if (jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NextToken"));
      }
      // validate the optional field `MaxResults`
      if (jsonObj.get("MaxResults") != null && !jsonObj.get("MaxResults").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxResults"));
      }
      // validate the optional field `JobName`
      if (jsonObj.get("JobName") != null && !jsonObj.get("JobName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("JobName"));
      }
      // validate the optional field `JobStatus`
      if (jsonObj.get("JobStatus") != null && !jsonObj.get("JobStatus").isJsonNull()) {
        JobStatus.validateJsonElement(jsonObj.get("JobStatus"));
      }
      // validate the optional field `SubmittedBefore`
      if (jsonObj.get("SubmittedBefore") != null && !jsonObj.get("SubmittedBefore").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("SubmittedBefore"));
      }
      // validate the optional field `SubmittedAfter`
      if (jsonObj.get("SubmittedAfter") != null && !jsonObj.get("SubmittedAfter").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("SubmittedAfter"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListFHIRExportJobsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListFHIRExportJobsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListFHIRExportJobsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListFHIRExportJobsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ListFHIRExportJobsRequest>() {
           @Override
           public void write(JsonWriter out, ListFHIRExportJobsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListFHIRExportJobsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListFHIRExportJobsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListFHIRExportJobsRequest
   * @throws IOException if the JSON string is invalid with respect to ListFHIRExportJobsRequest
   */
  public static ListFHIRExportJobsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListFHIRExportJobsRequest.class);
  }

  /**
   * Convert an instance of ListFHIRExportJobsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

