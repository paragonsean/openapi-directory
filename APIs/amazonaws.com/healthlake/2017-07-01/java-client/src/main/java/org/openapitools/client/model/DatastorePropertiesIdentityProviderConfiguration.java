/*
 * Amazon HealthLake
 * AWS HealthLake is a HIPAA eligibile service that allows customers to store, transform, query, and analyze their FHIR-formatted data in a consistent fashion in the cloud.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AuthorizationStrategy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DatastorePropertiesIdentityProviderConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:50.835141-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DatastorePropertiesIdentityProviderConfiguration {
  public static final String SERIALIZED_NAME_AUTHORIZATION_STRATEGY = "AuthorizationStrategy";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_STRATEGY)
  private AuthorizationStrategy authorizationStrategy;

  public static final String SERIALIZED_NAME_FINE_GRAINED_AUTHORIZATION_ENABLED = "FineGrainedAuthorizationEnabled";
  @SerializedName(SERIALIZED_NAME_FINE_GRAINED_AUTHORIZATION_ENABLED)
  private Boolean fineGrainedAuthorizationEnabled;

  public static final String SERIALIZED_NAME_METADATA = "Metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private String metadata;

  public static final String SERIALIZED_NAME_IDP_LAMBDA_ARN = "IdpLambdaArn";
  @SerializedName(SERIALIZED_NAME_IDP_LAMBDA_ARN)
  private String idpLambdaArn;

  public DatastorePropertiesIdentityProviderConfiguration() {
  }

  public DatastorePropertiesIdentityProviderConfiguration authorizationStrategy(AuthorizationStrategy authorizationStrategy) {
    this.authorizationStrategy = authorizationStrategy;
    return this;
  }

  /**
   * Get authorizationStrategy
   * @return authorizationStrategy
   */
  @javax.annotation.Nonnull
  public AuthorizationStrategy getAuthorizationStrategy() {
    return authorizationStrategy;
  }

  public void setAuthorizationStrategy(AuthorizationStrategy authorizationStrategy) {
    this.authorizationStrategy = authorizationStrategy;
  }


  public DatastorePropertiesIdentityProviderConfiguration fineGrainedAuthorizationEnabled(Boolean fineGrainedAuthorizationEnabled) {
    this.fineGrainedAuthorizationEnabled = fineGrainedAuthorizationEnabled;
    return this;
  }

  /**
   * Get fineGrainedAuthorizationEnabled
   * @return fineGrainedAuthorizationEnabled
   */
  @javax.annotation.Nullable
  public Boolean getFineGrainedAuthorizationEnabled() {
    return fineGrainedAuthorizationEnabled;
  }

  public void setFineGrainedAuthorizationEnabled(Boolean fineGrainedAuthorizationEnabled) {
    this.fineGrainedAuthorizationEnabled = fineGrainedAuthorizationEnabled;
  }


  public DatastorePropertiesIdentityProviderConfiguration metadata(String metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public String getMetadata() {
    return metadata;
  }

  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }


  public DatastorePropertiesIdentityProviderConfiguration idpLambdaArn(String idpLambdaArn) {
    this.idpLambdaArn = idpLambdaArn;
    return this;
  }

  /**
   * Get idpLambdaArn
   * @return idpLambdaArn
   */
  @javax.annotation.Nullable
  public String getIdpLambdaArn() {
    return idpLambdaArn;
  }

  public void setIdpLambdaArn(String idpLambdaArn) {
    this.idpLambdaArn = idpLambdaArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatastorePropertiesIdentityProviderConfiguration datastorePropertiesIdentityProviderConfiguration = (DatastorePropertiesIdentityProviderConfiguration) o;
    return Objects.equals(this.authorizationStrategy, datastorePropertiesIdentityProviderConfiguration.authorizationStrategy) &&
        Objects.equals(this.fineGrainedAuthorizationEnabled, datastorePropertiesIdentityProviderConfiguration.fineGrainedAuthorizationEnabled) &&
        Objects.equals(this.metadata, datastorePropertiesIdentityProviderConfiguration.metadata) &&
        Objects.equals(this.idpLambdaArn, datastorePropertiesIdentityProviderConfiguration.idpLambdaArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizationStrategy, fineGrainedAuthorizationEnabled, metadata, idpLambdaArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatastorePropertiesIdentityProviderConfiguration {\n");
    sb.append("    authorizationStrategy: ").append(toIndentedString(authorizationStrategy)).append("\n");
    sb.append("    fineGrainedAuthorizationEnabled: ").append(toIndentedString(fineGrainedAuthorizationEnabled)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    idpLambdaArn: ").append(toIndentedString(idpLambdaArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AuthorizationStrategy");
    openapiFields.add("FineGrainedAuthorizationEnabled");
    openapiFields.add("Metadata");
    openapiFields.add("IdpLambdaArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AuthorizationStrategy");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatastorePropertiesIdentityProviderConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatastorePropertiesIdentityProviderConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatastorePropertiesIdentityProviderConfiguration is not found in the empty JSON string", DatastorePropertiesIdentityProviderConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatastorePropertiesIdentityProviderConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatastorePropertiesIdentityProviderConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DatastorePropertiesIdentityProviderConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `AuthorizationStrategy`
      AuthorizationStrategy.validateJsonElement(jsonObj.get("AuthorizationStrategy"));
      // validate the optional field `FineGrainedAuthorizationEnabled`
      if (jsonObj.get("FineGrainedAuthorizationEnabled") != null && !jsonObj.get("FineGrainedAuthorizationEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("FineGrainedAuthorizationEnabled"));
      }
      // validate the optional field `Metadata`
      if (jsonObj.get("Metadata") != null && !jsonObj.get("Metadata").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Metadata"));
      }
      // validate the optional field `IdpLambdaArn`
      if (jsonObj.get("IdpLambdaArn") != null && !jsonObj.get("IdpLambdaArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IdpLambdaArn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatastorePropertiesIdentityProviderConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatastorePropertiesIdentityProviderConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatastorePropertiesIdentityProviderConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatastorePropertiesIdentityProviderConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<DatastorePropertiesIdentityProviderConfiguration>() {
           @Override
           public void write(JsonWriter out, DatastorePropertiesIdentityProviderConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatastorePropertiesIdentityProviderConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatastorePropertiesIdentityProviderConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatastorePropertiesIdentityProviderConfiguration
   * @throws IOException if the JSON string is invalid with respect to DatastorePropertiesIdentityProviderConfiguration
   */
  public static DatastorePropertiesIdentityProviderConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatastorePropertiesIdentityProviderConfiguration.class);
  }

  /**
   * Convert an instance of DatastorePropertiesIdentityProviderConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

