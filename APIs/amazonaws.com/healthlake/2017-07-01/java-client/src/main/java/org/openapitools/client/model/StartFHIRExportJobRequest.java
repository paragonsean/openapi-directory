/*
 * Amazon HealthLake
 * AWS HealthLake is a HIPAA eligibile service that allows customers to store, transform, query, and analyze their FHIR-formatted data in a consistent fashion in the cloud.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.StartFHIRExportJobRequestOutputDataConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartFHIRExportJobRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:50.835141-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartFHIRExportJobRequest {
  public static final String SERIALIZED_NAME_JOB_NAME = "JobName";
  @SerializedName(SERIALIZED_NAME_JOB_NAME)
  private String jobName;

  public static final String SERIALIZED_NAME_OUTPUT_DATA_CONFIG = "OutputDataConfig";
  @SerializedName(SERIALIZED_NAME_OUTPUT_DATA_CONFIG)
  private StartFHIRExportJobRequestOutputDataConfig outputDataConfig;

  public static final String SERIALIZED_NAME_DATASTORE_ID = "DatastoreId";
  @SerializedName(SERIALIZED_NAME_DATASTORE_ID)
  private String datastoreId;

  public static final String SERIALIZED_NAME_DATA_ACCESS_ROLE_ARN = "DataAccessRoleArn";
  @SerializedName(SERIALIZED_NAME_DATA_ACCESS_ROLE_ARN)
  private String dataAccessRoleArn;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "ClientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public StartFHIRExportJobRequest() {
  }

  public StartFHIRExportJobRequest jobName(String jobName) {
    this.jobName = jobName;
    return this;
  }

  /**
   * Get jobName
   * @return jobName
   */
  @javax.annotation.Nullable
  public String getJobName() {
    return jobName;
  }

  public void setJobName(String jobName) {
    this.jobName = jobName;
  }


  public StartFHIRExportJobRequest outputDataConfig(StartFHIRExportJobRequestOutputDataConfig outputDataConfig) {
    this.outputDataConfig = outputDataConfig;
    return this;
  }

  /**
   * Get outputDataConfig
   * @return outputDataConfig
   */
  @javax.annotation.Nonnull
  public StartFHIRExportJobRequestOutputDataConfig getOutputDataConfig() {
    return outputDataConfig;
  }

  public void setOutputDataConfig(StartFHIRExportJobRequestOutputDataConfig outputDataConfig) {
    this.outputDataConfig = outputDataConfig;
  }


  public StartFHIRExportJobRequest datastoreId(String datastoreId) {
    this.datastoreId = datastoreId;
    return this;
  }

  /**
   * Get datastoreId
   * @return datastoreId
   */
  @javax.annotation.Nonnull
  public String getDatastoreId() {
    return datastoreId;
  }

  public void setDatastoreId(String datastoreId) {
    this.datastoreId = datastoreId;
  }


  public StartFHIRExportJobRequest dataAccessRoleArn(String dataAccessRoleArn) {
    this.dataAccessRoleArn = dataAccessRoleArn;
    return this;
  }

  /**
   * Get dataAccessRoleArn
   * @return dataAccessRoleArn
   */
  @javax.annotation.Nonnull
  public String getDataAccessRoleArn() {
    return dataAccessRoleArn;
  }

  public void setDataAccessRoleArn(String dataAccessRoleArn) {
    this.dataAccessRoleArn = dataAccessRoleArn;
  }


  public StartFHIRExportJobRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * Get clientToken
   * @return clientToken
   */
  @javax.annotation.Nonnull
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartFHIRExportJobRequest startFHIRExportJobRequest = (StartFHIRExportJobRequest) o;
    return Objects.equals(this.jobName, startFHIRExportJobRequest.jobName) &&
        Objects.equals(this.outputDataConfig, startFHIRExportJobRequest.outputDataConfig) &&
        Objects.equals(this.datastoreId, startFHIRExportJobRequest.datastoreId) &&
        Objects.equals(this.dataAccessRoleArn, startFHIRExportJobRequest.dataAccessRoleArn) &&
        Objects.equals(this.clientToken, startFHIRExportJobRequest.clientToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobName, outputDataConfig, datastoreId, dataAccessRoleArn, clientToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartFHIRExportJobRequest {\n");
    sb.append("    jobName: ").append(toIndentedString(jobName)).append("\n");
    sb.append("    outputDataConfig: ").append(toIndentedString(outputDataConfig)).append("\n");
    sb.append("    datastoreId: ").append(toIndentedString(datastoreId)).append("\n");
    sb.append("    dataAccessRoleArn: ").append(toIndentedString(dataAccessRoleArn)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("JobName");
    openapiFields.add("OutputDataConfig");
    openapiFields.add("DatastoreId");
    openapiFields.add("DataAccessRoleArn");
    openapiFields.add("ClientToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("OutputDataConfig");
    openapiRequiredFields.add("DatastoreId");
    openapiRequiredFields.add("DataAccessRoleArn");
    openapiRequiredFields.add("ClientToken");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartFHIRExportJobRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartFHIRExportJobRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartFHIRExportJobRequest is not found in the empty JSON string", StartFHIRExportJobRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartFHIRExportJobRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartFHIRExportJobRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartFHIRExportJobRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `JobName`
      if (jsonObj.get("JobName") != null && !jsonObj.get("JobName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("JobName"));
      }
      // validate the required field `OutputDataConfig`
      StartFHIRExportJobRequestOutputDataConfig.validateJsonElement(jsonObj.get("OutputDataConfig"));
      // validate the required field `DatastoreId`
      String.validateJsonElement(jsonObj.get("DatastoreId"));
      // validate the required field `DataAccessRoleArn`
      String.validateJsonElement(jsonObj.get("DataAccessRoleArn"));
      // validate the required field `ClientToken`
      String.validateJsonElement(jsonObj.get("ClientToken"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartFHIRExportJobRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartFHIRExportJobRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartFHIRExportJobRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartFHIRExportJobRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartFHIRExportJobRequest>() {
           @Override
           public void write(JsonWriter out, StartFHIRExportJobRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartFHIRExportJobRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartFHIRExportJobRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartFHIRExportJobRequest
   * @throws IOException if the JSON string is invalid with respect to StartFHIRExportJobRequest
   */
  public static StartFHIRExportJobRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartFHIRExportJobRequest.class);
  }

  /**
   * Convert an instance of StartFHIRExportJobRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

