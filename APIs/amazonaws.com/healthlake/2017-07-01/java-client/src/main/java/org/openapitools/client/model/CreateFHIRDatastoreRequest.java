/*
 * Amazon HealthLake
 * AWS HealthLake is a HIPAA eligibile service that allows customers to store, transform, query, and analyze their FHIR-formatted data in a consistent fashion in the cloud.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateFHIRDatastoreRequestIdentityProviderConfiguration;
import org.openapitools.client.model.CreateFHIRDatastoreRequestPreloadDataConfig;
import org.openapitools.client.model.CreateFHIRDatastoreRequestSseConfiguration;
import org.openapitools.client.model.FHIRVersion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateFHIRDatastoreRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:50.835141-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateFHIRDatastoreRequest {
  public static final String SERIALIZED_NAME_DATASTORE_NAME = "DatastoreName";
  @SerializedName(SERIALIZED_NAME_DATASTORE_NAME)
  private String datastoreName;

  public static final String SERIALIZED_NAME_DATASTORE_TYPE_VERSION = "DatastoreTypeVersion";
  @SerializedName(SERIALIZED_NAME_DATASTORE_TYPE_VERSION)
  private FHIRVersion datastoreTypeVersion;

  public static final String SERIALIZED_NAME_SSE_CONFIGURATION = "SseConfiguration";
  @SerializedName(SERIALIZED_NAME_SSE_CONFIGURATION)
  private CreateFHIRDatastoreRequestSseConfiguration sseConfiguration;

  public static final String SERIALIZED_NAME_PRELOAD_DATA_CONFIG = "PreloadDataConfig";
  @SerializedName(SERIALIZED_NAME_PRELOAD_DATA_CONFIG)
  private CreateFHIRDatastoreRequestPreloadDataConfig preloadDataConfig;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "ClientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_IDENTITY_PROVIDER_CONFIGURATION = "IdentityProviderConfiguration";
  @SerializedName(SERIALIZED_NAME_IDENTITY_PROVIDER_CONFIGURATION)
  private CreateFHIRDatastoreRequestIdentityProviderConfiguration identityProviderConfiguration;

  public CreateFHIRDatastoreRequest() {
  }

  public CreateFHIRDatastoreRequest datastoreName(String datastoreName) {
    this.datastoreName = datastoreName;
    return this;
  }

  /**
   * Get datastoreName
   * @return datastoreName
   */
  @javax.annotation.Nullable
  public String getDatastoreName() {
    return datastoreName;
  }

  public void setDatastoreName(String datastoreName) {
    this.datastoreName = datastoreName;
  }


  public CreateFHIRDatastoreRequest datastoreTypeVersion(FHIRVersion datastoreTypeVersion) {
    this.datastoreTypeVersion = datastoreTypeVersion;
    return this;
  }

  /**
   * Get datastoreTypeVersion
   * @return datastoreTypeVersion
   */
  @javax.annotation.Nonnull
  public FHIRVersion getDatastoreTypeVersion() {
    return datastoreTypeVersion;
  }

  public void setDatastoreTypeVersion(FHIRVersion datastoreTypeVersion) {
    this.datastoreTypeVersion = datastoreTypeVersion;
  }


  public CreateFHIRDatastoreRequest sseConfiguration(CreateFHIRDatastoreRequestSseConfiguration sseConfiguration) {
    this.sseConfiguration = sseConfiguration;
    return this;
  }

  /**
   * Get sseConfiguration
   * @return sseConfiguration
   */
  @javax.annotation.Nullable
  public CreateFHIRDatastoreRequestSseConfiguration getSseConfiguration() {
    return sseConfiguration;
  }

  public void setSseConfiguration(CreateFHIRDatastoreRequestSseConfiguration sseConfiguration) {
    this.sseConfiguration = sseConfiguration;
  }


  public CreateFHIRDatastoreRequest preloadDataConfig(CreateFHIRDatastoreRequestPreloadDataConfig preloadDataConfig) {
    this.preloadDataConfig = preloadDataConfig;
    return this;
  }

  /**
   * Get preloadDataConfig
   * @return preloadDataConfig
   */
  @javax.annotation.Nullable
  public CreateFHIRDatastoreRequestPreloadDataConfig getPreloadDataConfig() {
    return preloadDataConfig;
  }

  public void setPreloadDataConfig(CreateFHIRDatastoreRequestPreloadDataConfig preloadDataConfig) {
    this.preloadDataConfig = preloadDataConfig;
  }


  public CreateFHIRDatastoreRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * Get clientToken
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public CreateFHIRDatastoreRequest tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public CreateFHIRDatastoreRequest identityProviderConfiguration(CreateFHIRDatastoreRequestIdentityProviderConfiguration identityProviderConfiguration) {
    this.identityProviderConfiguration = identityProviderConfiguration;
    return this;
  }

  /**
   * Get identityProviderConfiguration
   * @return identityProviderConfiguration
   */
  @javax.annotation.Nullable
  public CreateFHIRDatastoreRequestIdentityProviderConfiguration getIdentityProviderConfiguration() {
    return identityProviderConfiguration;
  }

  public void setIdentityProviderConfiguration(CreateFHIRDatastoreRequestIdentityProviderConfiguration identityProviderConfiguration) {
    this.identityProviderConfiguration = identityProviderConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateFHIRDatastoreRequest createFHIRDatastoreRequest = (CreateFHIRDatastoreRequest) o;
    return Objects.equals(this.datastoreName, createFHIRDatastoreRequest.datastoreName) &&
        Objects.equals(this.datastoreTypeVersion, createFHIRDatastoreRequest.datastoreTypeVersion) &&
        Objects.equals(this.sseConfiguration, createFHIRDatastoreRequest.sseConfiguration) &&
        Objects.equals(this.preloadDataConfig, createFHIRDatastoreRequest.preloadDataConfig) &&
        Objects.equals(this.clientToken, createFHIRDatastoreRequest.clientToken) &&
        Objects.equals(this.tags, createFHIRDatastoreRequest.tags) &&
        Objects.equals(this.identityProviderConfiguration, createFHIRDatastoreRequest.identityProviderConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(datastoreName, datastoreTypeVersion, sseConfiguration, preloadDataConfig, clientToken, tags, identityProviderConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateFHIRDatastoreRequest {\n");
    sb.append("    datastoreName: ").append(toIndentedString(datastoreName)).append("\n");
    sb.append("    datastoreTypeVersion: ").append(toIndentedString(datastoreTypeVersion)).append("\n");
    sb.append("    sseConfiguration: ").append(toIndentedString(sseConfiguration)).append("\n");
    sb.append("    preloadDataConfig: ").append(toIndentedString(preloadDataConfig)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    identityProviderConfiguration: ").append(toIndentedString(identityProviderConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DatastoreName");
    openapiFields.add("DatastoreTypeVersion");
    openapiFields.add("SseConfiguration");
    openapiFields.add("PreloadDataConfig");
    openapiFields.add("ClientToken");
    openapiFields.add("Tags");
    openapiFields.add("IdentityProviderConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DatastoreTypeVersion");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateFHIRDatastoreRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateFHIRDatastoreRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateFHIRDatastoreRequest is not found in the empty JSON string", CreateFHIRDatastoreRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateFHIRDatastoreRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateFHIRDatastoreRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateFHIRDatastoreRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DatastoreName`
      if (jsonObj.get("DatastoreName") != null && !jsonObj.get("DatastoreName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DatastoreName"));
      }
      // validate the required field `DatastoreTypeVersion`
      FHIRVersion.validateJsonElement(jsonObj.get("DatastoreTypeVersion"));
      // validate the optional field `SseConfiguration`
      if (jsonObj.get("SseConfiguration") != null && !jsonObj.get("SseConfiguration").isJsonNull()) {
        CreateFHIRDatastoreRequestSseConfiguration.validateJsonElement(jsonObj.get("SseConfiguration"));
      }
      // validate the optional field `PreloadDataConfig`
      if (jsonObj.get("PreloadDataConfig") != null && !jsonObj.get("PreloadDataConfig").isJsonNull()) {
        CreateFHIRDatastoreRequestPreloadDataConfig.validateJsonElement(jsonObj.get("PreloadDataConfig"));
      }
      // validate the optional field `ClientToken`
      if (jsonObj.get("ClientToken") != null && !jsonObj.get("ClientToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ClientToken"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `IdentityProviderConfiguration`
      if (jsonObj.get("IdentityProviderConfiguration") != null && !jsonObj.get("IdentityProviderConfiguration").isJsonNull()) {
        CreateFHIRDatastoreRequestIdentityProviderConfiguration.validateJsonElement(jsonObj.get("IdentityProviderConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateFHIRDatastoreRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateFHIRDatastoreRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateFHIRDatastoreRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateFHIRDatastoreRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateFHIRDatastoreRequest>() {
           @Override
           public void write(JsonWriter out, CreateFHIRDatastoreRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateFHIRDatastoreRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateFHIRDatastoreRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateFHIRDatastoreRequest
   * @throws IOException if the JSON string is invalid with respect to CreateFHIRDatastoreRequest
   */
  public static CreateFHIRDatastoreRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateFHIRDatastoreRequest.class);
  }

  /**
   * Convert an instance of CreateFHIRDatastoreRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

