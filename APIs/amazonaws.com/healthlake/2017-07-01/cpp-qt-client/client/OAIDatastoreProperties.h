/**
 * Amazon HealthLake
 * AWS HealthLake is a HIPAA eligibile service that allows customers to store, transform, query, and analyze their FHIR-formatted data in a consistent fashion in the cloud.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDatastoreProperties.h
 *
 * Displays the properties of the data store, including the ID, ARN, name, and the status of the data store.
 */

#ifndef OAIDatastoreProperties_H
#define OAIDatastoreProperties_H

#include <QJsonObject>

#include "OAIDatastoreProperties_IdentityProviderConfiguration.h"
#include "OAIDatastoreProperties_PreloadDataConfig.h"
#include "OAIDatastoreProperties_SseConfiguration.h"
#include "OAIDatastoreStatus.h"
#include "OAIFHIRVersion.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDatastoreProperties_SseConfiguration;
class OAIDatastoreProperties_PreloadDataConfig;
class OAIDatastoreProperties_IdentityProviderConfiguration;

class OAIDatastoreProperties : public OAIObject {
public:
    OAIDatastoreProperties();
    OAIDatastoreProperties(QString json);
    ~OAIDatastoreProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDatastoreId() const;
    void setDatastoreId(const QString &datastore_id);
    bool is_datastore_id_Set() const;
    bool is_datastore_id_Valid() const;

    QString getDatastoreArn() const;
    void setDatastoreArn(const QString &datastore_arn);
    bool is_datastore_arn_Set() const;
    bool is_datastore_arn_Valid() const;

    QString getDatastoreName() const;
    void setDatastoreName(const QString &datastore_name);
    bool is_datastore_name_Set() const;
    bool is_datastore_name_Valid() const;

    OAIDatastoreStatus getDatastoreStatus() const;
    void setDatastoreStatus(const OAIDatastoreStatus &datastore_status);
    bool is_datastore_status_Set() const;
    bool is_datastore_status_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    OAIFHIRVersion getDatastoreTypeVersion() const;
    void setDatastoreTypeVersion(const OAIFHIRVersion &datastore_type_version);
    bool is_datastore_type_version_Set() const;
    bool is_datastore_type_version_Valid() const;

    QString getDatastoreEndpoint() const;
    void setDatastoreEndpoint(const QString &datastore_endpoint);
    bool is_datastore_endpoint_Set() const;
    bool is_datastore_endpoint_Valid() const;

    OAIDatastoreProperties_SseConfiguration getSseConfiguration() const;
    void setSseConfiguration(const OAIDatastoreProperties_SseConfiguration &sse_configuration);
    bool is_sse_configuration_Set() const;
    bool is_sse_configuration_Valid() const;

    OAIDatastoreProperties_PreloadDataConfig getPreloadDataConfig() const;
    void setPreloadDataConfig(const OAIDatastoreProperties_PreloadDataConfig &preload_data_config);
    bool is_preload_data_config_Set() const;
    bool is_preload_data_config_Valid() const;

    OAIDatastoreProperties_IdentityProviderConfiguration getIdentityProviderConfiguration() const;
    void setIdentityProviderConfiguration(const OAIDatastoreProperties_IdentityProviderConfiguration &identity_provider_configuration);
    bool is_identity_provider_configuration_Set() const;
    bool is_identity_provider_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_datastore_id;
    bool m_datastore_id_isSet;
    bool m_datastore_id_isValid;

    QString m_datastore_arn;
    bool m_datastore_arn_isSet;
    bool m_datastore_arn_isValid;

    QString m_datastore_name;
    bool m_datastore_name_isSet;
    bool m_datastore_name_isValid;

    OAIDatastoreStatus m_datastore_status;
    bool m_datastore_status_isSet;
    bool m_datastore_status_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    OAIFHIRVersion m_datastore_type_version;
    bool m_datastore_type_version_isSet;
    bool m_datastore_type_version_isValid;

    QString m_datastore_endpoint;
    bool m_datastore_endpoint_isSet;
    bool m_datastore_endpoint_isValid;

    OAIDatastoreProperties_SseConfiguration m_sse_configuration;
    bool m_sse_configuration_isSet;
    bool m_sse_configuration_isValid;

    OAIDatastoreProperties_PreloadDataConfig m_preload_data_config;
    bool m_preload_data_config_isSet;
    bool m_preload_data_config_isValid;

    OAIDatastoreProperties_IdentityProviderConfiguration m_identity_provider_configuration;
    bool m_identity_provider_configuration_isSet;
    bool m_identity_provider_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDatastoreProperties)

#endif // OAIDatastoreProperties_H
