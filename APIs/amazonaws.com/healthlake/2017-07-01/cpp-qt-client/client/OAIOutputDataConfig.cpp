/**
 * Amazon HealthLake
 * AWS HealthLake is a HIPAA eligibile service that allows customers to store, transform, query, and analyze their FHIR-formatted data in a consistent fashion in the cloud.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutputDataConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutputDataConfig::OAIOutputDataConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutputDataConfig::OAIOutputDataConfig() {
    this->initializeModel();
}

OAIOutputDataConfig::~OAIOutputDataConfig() {}

void OAIOutputDataConfig::initializeModel() {

    m_s3_configuration_isSet = false;
    m_s3_configuration_isValid = false;
}

void OAIOutputDataConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutputDataConfig::fromJsonObject(QJsonObject json) {

    m_s3_configuration_isValid = ::OpenAPI::fromJsonValue(m_s3_configuration, json[QString("S3Configuration")]);
    m_s3_configuration_isSet = !json[QString("S3Configuration")].isNull() && m_s3_configuration_isValid;
}

QString OAIOutputDataConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutputDataConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_s3_configuration.isSet()) {
        obj.insert(QString("S3Configuration"), ::OpenAPI::toJsonValue(m_s3_configuration));
    }
    return obj;
}

OAIOutputDataConfig_S3Configuration OAIOutputDataConfig::getS3Configuration() const {
    return m_s3_configuration;
}
void OAIOutputDataConfig::setS3Configuration(const OAIOutputDataConfig_S3Configuration &s3_configuration) {
    m_s3_configuration = s3_configuration;
    m_s3_configuration_isSet = true;
}

bool OAIOutputDataConfig::is_s3_configuration_Set() const{
    return m_s3_configuration_isSet;
}

bool OAIOutputDataConfig::is_s3_configuration_Valid() const{
    return m_s3_configuration_isValid;
}

bool OAIOutputDataConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutputDataConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
