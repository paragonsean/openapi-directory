/**
 * Amazon HealthLake
 * AWS HealthLake is a HIPAA eligibile service that allows customers to store, transform, query, and analyze their FHIR-formatted data in a consistent fashion in the cloud.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListFHIRImportJobsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListFHIRImportJobsRequest::OAIListFHIRImportJobsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListFHIRImportJobsRequest::OAIListFHIRImportJobsRequest() {
    this->initializeModel();
}

OAIListFHIRImportJobsRequest::~OAIListFHIRImportJobsRequest() {}

void OAIListFHIRImportJobsRequest::initializeModel() {

    m_datastore_id_isSet = false;
    m_datastore_id_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_job_name_isSet = false;
    m_job_name_isValid = false;

    m_job_status_isSet = false;
    m_job_status_isValid = false;

    m_submitted_before_isSet = false;
    m_submitted_before_isValid = false;

    m_submitted_after_isSet = false;
    m_submitted_after_isValid = false;
}

void OAIListFHIRImportJobsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListFHIRImportJobsRequest::fromJsonObject(QJsonObject json) {

    m_datastore_id_isValid = ::OpenAPI::fromJsonValue(m_datastore_id, json[QString("DatastoreId")]);
    m_datastore_id_isSet = !json[QString("DatastoreId")].isNull() && m_datastore_id_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_job_name_isValid = ::OpenAPI::fromJsonValue(m_job_name, json[QString("JobName")]);
    m_job_name_isSet = !json[QString("JobName")].isNull() && m_job_name_isValid;

    m_job_status_isValid = ::OpenAPI::fromJsonValue(m_job_status, json[QString("JobStatus")]);
    m_job_status_isSet = !json[QString("JobStatus")].isNull() && m_job_status_isValid;

    m_submitted_before_isValid = ::OpenAPI::fromJsonValue(m_submitted_before, json[QString("SubmittedBefore")]);
    m_submitted_before_isSet = !json[QString("SubmittedBefore")].isNull() && m_submitted_before_isValid;

    m_submitted_after_isValid = ::OpenAPI::fromJsonValue(m_submitted_after, json[QString("SubmittedAfter")]);
    m_submitted_after_isSet = !json[QString("SubmittedAfter")].isNull() && m_submitted_after_isValid;
}

QString OAIListFHIRImportJobsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListFHIRImportJobsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_datastore_id_isSet) {
        obj.insert(QString("DatastoreId"), ::OpenAPI::toJsonValue(m_datastore_id));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_job_name_isSet) {
        obj.insert(QString("JobName"), ::OpenAPI::toJsonValue(m_job_name));
    }
    if (m_job_status.isSet()) {
        obj.insert(QString("JobStatus"), ::OpenAPI::toJsonValue(m_job_status));
    }
    if (m_submitted_before_isSet) {
        obj.insert(QString("SubmittedBefore"), ::OpenAPI::toJsonValue(m_submitted_before));
    }
    if (m_submitted_after_isSet) {
        obj.insert(QString("SubmittedAfter"), ::OpenAPI::toJsonValue(m_submitted_after));
    }
    return obj;
}

QString OAIListFHIRImportJobsRequest::getDatastoreId() const {
    return m_datastore_id;
}
void OAIListFHIRImportJobsRequest::setDatastoreId(const QString &datastore_id) {
    m_datastore_id = datastore_id;
    m_datastore_id_isSet = true;
}

bool OAIListFHIRImportJobsRequest::is_datastore_id_Set() const{
    return m_datastore_id_isSet;
}

bool OAIListFHIRImportJobsRequest::is_datastore_id_Valid() const{
    return m_datastore_id_isValid;
}

QString OAIListFHIRImportJobsRequest::getNextToken() const {
    return m_next_token;
}
void OAIListFHIRImportJobsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListFHIRImportJobsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListFHIRImportJobsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListFHIRImportJobsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListFHIRImportJobsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListFHIRImportJobsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListFHIRImportJobsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListFHIRImportJobsRequest::getJobName() const {
    return m_job_name;
}
void OAIListFHIRImportJobsRequest::setJobName(const QString &job_name) {
    m_job_name = job_name;
    m_job_name_isSet = true;
}

bool OAIListFHIRImportJobsRequest::is_job_name_Set() const{
    return m_job_name_isSet;
}

bool OAIListFHIRImportJobsRequest::is_job_name_Valid() const{
    return m_job_name_isValid;
}

OAIJobStatus OAIListFHIRImportJobsRequest::getJobStatus() const {
    return m_job_status;
}
void OAIListFHIRImportJobsRequest::setJobStatus(const OAIJobStatus &job_status) {
    m_job_status = job_status;
    m_job_status_isSet = true;
}

bool OAIListFHIRImportJobsRequest::is_job_status_Set() const{
    return m_job_status_isSet;
}

bool OAIListFHIRImportJobsRequest::is_job_status_Valid() const{
    return m_job_status_isValid;
}

QDateTime OAIListFHIRImportJobsRequest::getSubmittedBefore() const {
    return m_submitted_before;
}
void OAIListFHIRImportJobsRequest::setSubmittedBefore(const QDateTime &submitted_before) {
    m_submitted_before = submitted_before;
    m_submitted_before_isSet = true;
}

bool OAIListFHIRImportJobsRequest::is_submitted_before_Set() const{
    return m_submitted_before_isSet;
}

bool OAIListFHIRImportJobsRequest::is_submitted_before_Valid() const{
    return m_submitted_before_isValid;
}

QDateTime OAIListFHIRImportJobsRequest::getSubmittedAfter() const {
    return m_submitted_after;
}
void OAIListFHIRImportJobsRequest::setSubmittedAfter(const QDateTime &submitted_after) {
    m_submitted_after = submitted_after;
    m_submitted_after_isSet = true;
}

bool OAIListFHIRImportJobsRequest::is_submitted_after_Set() const{
    return m_submitted_after_isSet;
}

bool OAIListFHIRImportJobsRequest::is_submitted_after_Valid() const{
    return m_submitted_after_isValid;
}

bool OAIListFHIRImportJobsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_datastore_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_submitted_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submitted_after_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListFHIRImportJobsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_datastore_id_isValid && true;
}

} // namespace OpenAPI
