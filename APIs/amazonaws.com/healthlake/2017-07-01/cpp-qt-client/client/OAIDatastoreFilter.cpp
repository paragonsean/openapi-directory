/**
 * Amazon HealthLake
 * AWS HealthLake is a HIPAA eligibile service that allows customers to store, transform, query, and analyze their FHIR-formatted data in a consistent fashion in the cloud.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatastoreFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatastoreFilter::OAIDatastoreFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatastoreFilter::OAIDatastoreFilter() {
    this->initializeModel();
}

OAIDatastoreFilter::~OAIDatastoreFilter() {}

void OAIDatastoreFilter::initializeModel() {

    m_datastore_name_isSet = false;
    m_datastore_name_isValid = false;

    m_datastore_status_isSet = false;
    m_datastore_status_isValid = false;

    m_created_before_isSet = false;
    m_created_before_isValid = false;

    m_created_after_isSet = false;
    m_created_after_isValid = false;
}

void OAIDatastoreFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatastoreFilter::fromJsonObject(QJsonObject json) {

    m_datastore_name_isValid = ::OpenAPI::fromJsonValue(m_datastore_name, json[QString("DatastoreName")]);
    m_datastore_name_isSet = !json[QString("DatastoreName")].isNull() && m_datastore_name_isValid;

    m_datastore_status_isValid = ::OpenAPI::fromJsonValue(m_datastore_status, json[QString("DatastoreStatus")]);
    m_datastore_status_isSet = !json[QString("DatastoreStatus")].isNull() && m_datastore_status_isValid;

    m_created_before_isValid = ::OpenAPI::fromJsonValue(m_created_before, json[QString("CreatedBefore")]);
    m_created_before_isSet = !json[QString("CreatedBefore")].isNull() && m_created_before_isValid;

    m_created_after_isValid = ::OpenAPI::fromJsonValue(m_created_after, json[QString("CreatedAfter")]);
    m_created_after_isSet = !json[QString("CreatedAfter")].isNull() && m_created_after_isValid;
}

QString OAIDatastoreFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatastoreFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_datastore_name_isSet) {
        obj.insert(QString("DatastoreName"), ::OpenAPI::toJsonValue(m_datastore_name));
    }
    if (m_datastore_status.isSet()) {
        obj.insert(QString("DatastoreStatus"), ::OpenAPI::toJsonValue(m_datastore_status));
    }
    if (m_created_before_isSet) {
        obj.insert(QString("CreatedBefore"), ::OpenAPI::toJsonValue(m_created_before));
    }
    if (m_created_after_isSet) {
        obj.insert(QString("CreatedAfter"), ::OpenAPI::toJsonValue(m_created_after));
    }
    return obj;
}

QString OAIDatastoreFilter::getDatastoreName() const {
    return m_datastore_name;
}
void OAIDatastoreFilter::setDatastoreName(const QString &datastore_name) {
    m_datastore_name = datastore_name;
    m_datastore_name_isSet = true;
}

bool OAIDatastoreFilter::is_datastore_name_Set() const{
    return m_datastore_name_isSet;
}

bool OAIDatastoreFilter::is_datastore_name_Valid() const{
    return m_datastore_name_isValid;
}

OAIDatastoreStatus OAIDatastoreFilter::getDatastoreStatus() const {
    return m_datastore_status;
}
void OAIDatastoreFilter::setDatastoreStatus(const OAIDatastoreStatus &datastore_status) {
    m_datastore_status = datastore_status;
    m_datastore_status_isSet = true;
}

bool OAIDatastoreFilter::is_datastore_status_Set() const{
    return m_datastore_status_isSet;
}

bool OAIDatastoreFilter::is_datastore_status_Valid() const{
    return m_datastore_status_isValid;
}

QDateTime OAIDatastoreFilter::getCreatedBefore() const {
    return m_created_before;
}
void OAIDatastoreFilter::setCreatedBefore(const QDateTime &created_before) {
    m_created_before = created_before;
    m_created_before_isSet = true;
}

bool OAIDatastoreFilter::is_created_before_Set() const{
    return m_created_before_isSet;
}

bool OAIDatastoreFilter::is_created_before_Valid() const{
    return m_created_before_isValid;
}

QDateTime OAIDatastoreFilter::getCreatedAfter() const {
    return m_created_after;
}
void OAIDatastoreFilter::setCreatedAfter(const QDateTime &created_after) {
    m_created_after = created_after;
    m_created_after_isSet = true;
}

bool OAIDatastoreFilter::is_created_after_Set() const{
    return m_created_after_isSet;
}

bool OAIDatastoreFilter::is_created_after_Valid() const{
    return m_created_after_isValid;
}

bool OAIDatastoreFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_datastore_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datastore_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_after_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatastoreFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
