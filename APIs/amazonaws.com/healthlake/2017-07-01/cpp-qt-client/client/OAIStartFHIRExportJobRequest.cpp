/**
 * Amazon HealthLake
 * AWS HealthLake is a HIPAA eligibile service that allows customers to store, transform, query, and analyze their FHIR-formatted data in a consistent fashion in the cloud.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartFHIRExportJobRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartFHIRExportJobRequest::OAIStartFHIRExportJobRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartFHIRExportJobRequest::OAIStartFHIRExportJobRequest() {
    this->initializeModel();
}

OAIStartFHIRExportJobRequest::~OAIStartFHIRExportJobRequest() {}

void OAIStartFHIRExportJobRequest::initializeModel() {

    m_job_name_isSet = false;
    m_job_name_isValid = false;

    m_output_data_config_isSet = false;
    m_output_data_config_isValid = false;

    m_datastore_id_isSet = false;
    m_datastore_id_isValid = false;

    m_data_access_role_arn_isSet = false;
    m_data_access_role_arn_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;
}

void OAIStartFHIRExportJobRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartFHIRExportJobRequest::fromJsonObject(QJsonObject json) {

    m_job_name_isValid = ::OpenAPI::fromJsonValue(m_job_name, json[QString("JobName")]);
    m_job_name_isSet = !json[QString("JobName")].isNull() && m_job_name_isValid;

    m_output_data_config_isValid = ::OpenAPI::fromJsonValue(m_output_data_config, json[QString("OutputDataConfig")]);
    m_output_data_config_isSet = !json[QString("OutputDataConfig")].isNull() && m_output_data_config_isValid;

    m_datastore_id_isValid = ::OpenAPI::fromJsonValue(m_datastore_id, json[QString("DatastoreId")]);
    m_datastore_id_isSet = !json[QString("DatastoreId")].isNull() && m_datastore_id_isValid;

    m_data_access_role_arn_isValid = ::OpenAPI::fromJsonValue(m_data_access_role_arn, json[QString("DataAccessRoleArn")]);
    m_data_access_role_arn_isSet = !json[QString("DataAccessRoleArn")].isNull() && m_data_access_role_arn_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;
}

QString OAIStartFHIRExportJobRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartFHIRExportJobRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_job_name_isSet) {
        obj.insert(QString("JobName"), ::OpenAPI::toJsonValue(m_job_name));
    }
    if (m_output_data_config.isSet()) {
        obj.insert(QString("OutputDataConfig"), ::OpenAPI::toJsonValue(m_output_data_config));
    }
    if (m_datastore_id_isSet) {
        obj.insert(QString("DatastoreId"), ::OpenAPI::toJsonValue(m_datastore_id));
    }
    if (m_data_access_role_arn_isSet) {
        obj.insert(QString("DataAccessRoleArn"), ::OpenAPI::toJsonValue(m_data_access_role_arn));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    return obj;
}

QString OAIStartFHIRExportJobRequest::getJobName() const {
    return m_job_name;
}
void OAIStartFHIRExportJobRequest::setJobName(const QString &job_name) {
    m_job_name = job_name;
    m_job_name_isSet = true;
}

bool OAIStartFHIRExportJobRequest::is_job_name_Set() const{
    return m_job_name_isSet;
}

bool OAIStartFHIRExportJobRequest::is_job_name_Valid() const{
    return m_job_name_isValid;
}

OAIStartFHIRExportJobRequest_OutputDataConfig OAIStartFHIRExportJobRequest::getOutputDataConfig() const {
    return m_output_data_config;
}
void OAIStartFHIRExportJobRequest::setOutputDataConfig(const OAIStartFHIRExportJobRequest_OutputDataConfig &output_data_config) {
    m_output_data_config = output_data_config;
    m_output_data_config_isSet = true;
}

bool OAIStartFHIRExportJobRequest::is_output_data_config_Set() const{
    return m_output_data_config_isSet;
}

bool OAIStartFHIRExportJobRequest::is_output_data_config_Valid() const{
    return m_output_data_config_isValid;
}

QString OAIStartFHIRExportJobRequest::getDatastoreId() const {
    return m_datastore_id;
}
void OAIStartFHIRExportJobRequest::setDatastoreId(const QString &datastore_id) {
    m_datastore_id = datastore_id;
    m_datastore_id_isSet = true;
}

bool OAIStartFHIRExportJobRequest::is_datastore_id_Set() const{
    return m_datastore_id_isSet;
}

bool OAIStartFHIRExportJobRequest::is_datastore_id_Valid() const{
    return m_datastore_id_isValid;
}

QString OAIStartFHIRExportJobRequest::getDataAccessRoleArn() const {
    return m_data_access_role_arn;
}
void OAIStartFHIRExportJobRequest::setDataAccessRoleArn(const QString &data_access_role_arn) {
    m_data_access_role_arn = data_access_role_arn;
    m_data_access_role_arn_isSet = true;
}

bool OAIStartFHIRExportJobRequest::is_data_access_role_arn_Set() const{
    return m_data_access_role_arn_isSet;
}

bool OAIStartFHIRExportJobRequest::is_data_access_role_arn_Valid() const{
    return m_data_access_role_arn_isValid;
}

QString OAIStartFHIRExportJobRequest::getClientToken() const {
    return m_client_token;
}
void OAIStartFHIRExportJobRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIStartFHIRExportJobRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIStartFHIRExportJobRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

bool OAIStartFHIRExportJobRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_data_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_datastore_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_access_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartFHIRExportJobRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_output_data_config_isValid && m_datastore_id_isValid && m_data_access_role_arn_isValid && m_client_token_isValid && true;
}

} // namespace OpenAPI
