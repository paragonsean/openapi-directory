/**
 * Amazon HealthLake
 * AWS HealthLake is a HIPAA eligibile service that allows customers to store, transform, query, and analyze their FHIR-formatted data in a consistent fashion in the cloud.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeFHIRDatastoreResponse_DatastoreProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeFHIRDatastoreResponse_DatastoreProperties::OAIDescribeFHIRDatastoreResponse_DatastoreProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeFHIRDatastoreResponse_DatastoreProperties::OAIDescribeFHIRDatastoreResponse_DatastoreProperties() {
    this->initializeModel();
}

OAIDescribeFHIRDatastoreResponse_DatastoreProperties::~OAIDescribeFHIRDatastoreResponse_DatastoreProperties() {}

void OAIDescribeFHIRDatastoreResponse_DatastoreProperties::initializeModel() {

    m_datastore_id_isSet = false;
    m_datastore_id_isValid = false;

    m_datastore_arn_isSet = false;
    m_datastore_arn_isValid = false;

    m_datastore_name_isSet = false;
    m_datastore_name_isValid = false;

    m_datastore_status_isSet = false;
    m_datastore_status_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_datastore_type_version_isSet = false;
    m_datastore_type_version_isValid = false;

    m_datastore_endpoint_isSet = false;
    m_datastore_endpoint_isValid = false;

    m_sse_configuration_isSet = false;
    m_sse_configuration_isValid = false;

    m_preload_data_config_isSet = false;
    m_preload_data_config_isValid = false;

    m_identity_provider_configuration_isSet = false;
    m_identity_provider_configuration_isValid = false;
}

void OAIDescribeFHIRDatastoreResponse_DatastoreProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeFHIRDatastoreResponse_DatastoreProperties::fromJsonObject(QJsonObject json) {

    m_datastore_id_isValid = ::OpenAPI::fromJsonValue(m_datastore_id, json[QString("DatastoreId")]);
    m_datastore_id_isSet = !json[QString("DatastoreId")].isNull() && m_datastore_id_isValid;

    m_datastore_arn_isValid = ::OpenAPI::fromJsonValue(m_datastore_arn, json[QString("DatastoreArn")]);
    m_datastore_arn_isSet = !json[QString("DatastoreArn")].isNull() && m_datastore_arn_isValid;

    m_datastore_name_isValid = ::OpenAPI::fromJsonValue(m_datastore_name, json[QString("DatastoreName")]);
    m_datastore_name_isSet = !json[QString("DatastoreName")].isNull() && m_datastore_name_isValid;

    m_datastore_status_isValid = ::OpenAPI::fromJsonValue(m_datastore_status, json[QString("DatastoreStatus")]);
    m_datastore_status_isSet = !json[QString("DatastoreStatus")].isNull() && m_datastore_status_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_datastore_type_version_isValid = ::OpenAPI::fromJsonValue(m_datastore_type_version, json[QString("DatastoreTypeVersion")]);
    m_datastore_type_version_isSet = !json[QString("DatastoreTypeVersion")].isNull() && m_datastore_type_version_isValid;

    m_datastore_endpoint_isValid = ::OpenAPI::fromJsonValue(m_datastore_endpoint, json[QString("DatastoreEndpoint")]);
    m_datastore_endpoint_isSet = !json[QString("DatastoreEndpoint")].isNull() && m_datastore_endpoint_isValid;

    m_sse_configuration_isValid = ::OpenAPI::fromJsonValue(m_sse_configuration, json[QString("SseConfiguration")]);
    m_sse_configuration_isSet = !json[QString("SseConfiguration")].isNull() && m_sse_configuration_isValid;

    m_preload_data_config_isValid = ::OpenAPI::fromJsonValue(m_preload_data_config, json[QString("PreloadDataConfig")]);
    m_preload_data_config_isSet = !json[QString("PreloadDataConfig")].isNull() && m_preload_data_config_isValid;

    m_identity_provider_configuration_isValid = ::OpenAPI::fromJsonValue(m_identity_provider_configuration, json[QString("IdentityProviderConfiguration")]);
    m_identity_provider_configuration_isSet = !json[QString("IdentityProviderConfiguration")].isNull() && m_identity_provider_configuration_isValid;
}

QString OAIDescribeFHIRDatastoreResponse_DatastoreProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeFHIRDatastoreResponse_DatastoreProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_datastore_id_isSet) {
        obj.insert(QString("DatastoreId"), ::OpenAPI::toJsonValue(m_datastore_id));
    }
    if (m_datastore_arn_isSet) {
        obj.insert(QString("DatastoreArn"), ::OpenAPI::toJsonValue(m_datastore_arn));
    }
    if (m_datastore_name_isSet) {
        obj.insert(QString("DatastoreName"), ::OpenAPI::toJsonValue(m_datastore_name));
    }
    if (m_datastore_status.isSet()) {
        obj.insert(QString("DatastoreStatus"), ::OpenAPI::toJsonValue(m_datastore_status));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_datastore_type_version.isSet()) {
        obj.insert(QString("DatastoreTypeVersion"), ::OpenAPI::toJsonValue(m_datastore_type_version));
    }
    if (m_datastore_endpoint_isSet) {
        obj.insert(QString("DatastoreEndpoint"), ::OpenAPI::toJsonValue(m_datastore_endpoint));
    }
    if (m_sse_configuration.isSet()) {
        obj.insert(QString("SseConfiguration"), ::OpenAPI::toJsonValue(m_sse_configuration));
    }
    if (m_preload_data_config.isSet()) {
        obj.insert(QString("PreloadDataConfig"), ::OpenAPI::toJsonValue(m_preload_data_config));
    }
    if (m_identity_provider_configuration.isSet()) {
        obj.insert(QString("IdentityProviderConfiguration"), ::OpenAPI::toJsonValue(m_identity_provider_configuration));
    }
    return obj;
}

QString OAIDescribeFHIRDatastoreResponse_DatastoreProperties::getDatastoreId() const {
    return m_datastore_id;
}
void OAIDescribeFHIRDatastoreResponse_DatastoreProperties::setDatastoreId(const QString &datastore_id) {
    m_datastore_id = datastore_id;
    m_datastore_id_isSet = true;
}

bool OAIDescribeFHIRDatastoreResponse_DatastoreProperties::is_datastore_id_Set() const{
    return m_datastore_id_isSet;
}

bool OAIDescribeFHIRDatastoreResponse_DatastoreProperties::is_datastore_id_Valid() const{
    return m_datastore_id_isValid;
}

QString OAIDescribeFHIRDatastoreResponse_DatastoreProperties::getDatastoreArn() const {
    return m_datastore_arn;
}
void OAIDescribeFHIRDatastoreResponse_DatastoreProperties::setDatastoreArn(const QString &datastore_arn) {
    m_datastore_arn = datastore_arn;
    m_datastore_arn_isSet = true;
}

bool OAIDescribeFHIRDatastoreResponse_DatastoreProperties::is_datastore_arn_Set() const{
    return m_datastore_arn_isSet;
}

bool OAIDescribeFHIRDatastoreResponse_DatastoreProperties::is_datastore_arn_Valid() const{
    return m_datastore_arn_isValid;
}

QString OAIDescribeFHIRDatastoreResponse_DatastoreProperties::getDatastoreName() const {
    return m_datastore_name;
}
void OAIDescribeFHIRDatastoreResponse_DatastoreProperties::setDatastoreName(const QString &datastore_name) {
    m_datastore_name = datastore_name;
    m_datastore_name_isSet = true;
}

bool OAIDescribeFHIRDatastoreResponse_DatastoreProperties::is_datastore_name_Set() const{
    return m_datastore_name_isSet;
}

bool OAIDescribeFHIRDatastoreResponse_DatastoreProperties::is_datastore_name_Valid() const{
    return m_datastore_name_isValid;
}

OAIDatastoreStatus OAIDescribeFHIRDatastoreResponse_DatastoreProperties::getDatastoreStatus() const {
    return m_datastore_status;
}
void OAIDescribeFHIRDatastoreResponse_DatastoreProperties::setDatastoreStatus(const OAIDatastoreStatus &datastore_status) {
    m_datastore_status = datastore_status;
    m_datastore_status_isSet = true;
}

bool OAIDescribeFHIRDatastoreResponse_DatastoreProperties::is_datastore_status_Set() const{
    return m_datastore_status_isSet;
}

bool OAIDescribeFHIRDatastoreResponse_DatastoreProperties::is_datastore_status_Valid() const{
    return m_datastore_status_isValid;
}

QDateTime OAIDescribeFHIRDatastoreResponse_DatastoreProperties::getCreatedAt() const {
    return m_created_at;
}
void OAIDescribeFHIRDatastoreResponse_DatastoreProperties::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDescribeFHIRDatastoreResponse_DatastoreProperties::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDescribeFHIRDatastoreResponse_DatastoreProperties::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIFHIRVersion OAIDescribeFHIRDatastoreResponse_DatastoreProperties::getDatastoreTypeVersion() const {
    return m_datastore_type_version;
}
void OAIDescribeFHIRDatastoreResponse_DatastoreProperties::setDatastoreTypeVersion(const OAIFHIRVersion &datastore_type_version) {
    m_datastore_type_version = datastore_type_version;
    m_datastore_type_version_isSet = true;
}

bool OAIDescribeFHIRDatastoreResponse_DatastoreProperties::is_datastore_type_version_Set() const{
    return m_datastore_type_version_isSet;
}

bool OAIDescribeFHIRDatastoreResponse_DatastoreProperties::is_datastore_type_version_Valid() const{
    return m_datastore_type_version_isValid;
}

QString OAIDescribeFHIRDatastoreResponse_DatastoreProperties::getDatastoreEndpoint() const {
    return m_datastore_endpoint;
}
void OAIDescribeFHIRDatastoreResponse_DatastoreProperties::setDatastoreEndpoint(const QString &datastore_endpoint) {
    m_datastore_endpoint = datastore_endpoint;
    m_datastore_endpoint_isSet = true;
}

bool OAIDescribeFHIRDatastoreResponse_DatastoreProperties::is_datastore_endpoint_Set() const{
    return m_datastore_endpoint_isSet;
}

bool OAIDescribeFHIRDatastoreResponse_DatastoreProperties::is_datastore_endpoint_Valid() const{
    return m_datastore_endpoint_isValid;
}

OAIDatastoreProperties_SseConfiguration OAIDescribeFHIRDatastoreResponse_DatastoreProperties::getSseConfiguration() const {
    return m_sse_configuration;
}
void OAIDescribeFHIRDatastoreResponse_DatastoreProperties::setSseConfiguration(const OAIDatastoreProperties_SseConfiguration &sse_configuration) {
    m_sse_configuration = sse_configuration;
    m_sse_configuration_isSet = true;
}

bool OAIDescribeFHIRDatastoreResponse_DatastoreProperties::is_sse_configuration_Set() const{
    return m_sse_configuration_isSet;
}

bool OAIDescribeFHIRDatastoreResponse_DatastoreProperties::is_sse_configuration_Valid() const{
    return m_sse_configuration_isValid;
}

OAIDatastoreProperties_PreloadDataConfig OAIDescribeFHIRDatastoreResponse_DatastoreProperties::getPreloadDataConfig() const {
    return m_preload_data_config;
}
void OAIDescribeFHIRDatastoreResponse_DatastoreProperties::setPreloadDataConfig(const OAIDatastoreProperties_PreloadDataConfig &preload_data_config) {
    m_preload_data_config = preload_data_config;
    m_preload_data_config_isSet = true;
}

bool OAIDescribeFHIRDatastoreResponse_DatastoreProperties::is_preload_data_config_Set() const{
    return m_preload_data_config_isSet;
}

bool OAIDescribeFHIRDatastoreResponse_DatastoreProperties::is_preload_data_config_Valid() const{
    return m_preload_data_config_isValid;
}

OAIDatastoreProperties_IdentityProviderConfiguration OAIDescribeFHIRDatastoreResponse_DatastoreProperties::getIdentityProviderConfiguration() const {
    return m_identity_provider_configuration;
}
void OAIDescribeFHIRDatastoreResponse_DatastoreProperties::setIdentityProviderConfiguration(const OAIDatastoreProperties_IdentityProviderConfiguration &identity_provider_configuration) {
    m_identity_provider_configuration = identity_provider_configuration;
    m_identity_provider_configuration_isSet = true;
}

bool OAIDescribeFHIRDatastoreResponse_DatastoreProperties::is_identity_provider_configuration_Set() const{
    return m_identity_provider_configuration_isSet;
}

bool OAIDescribeFHIRDatastoreResponse_DatastoreProperties::is_identity_provider_configuration_Valid() const{
    return m_identity_provider_configuration_isValid;
}

bool OAIDescribeFHIRDatastoreResponse_DatastoreProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_datastore_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datastore_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datastore_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datastore_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datastore_type_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_datastore_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sse_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preload_data_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_provider_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeFHIRDatastoreResponse_DatastoreProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_datastore_id_isValid && m_datastore_arn_isValid && m_datastore_status_isValid && m_datastore_type_version_isValid && m_datastore_endpoint_isValid && true;
}

} // namespace OpenAPI
