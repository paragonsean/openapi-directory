/**
 * Amazon HealthLake
 * AWS HealthLake is a HIPAA eligibile service that allows customers to store, transform, query, and analyze their FHIR-formatted data in a consistent fashion in the cloud.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateFHIRDatastoreRequest_IdentityProviderConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateFHIRDatastoreRequest_IdentityProviderConfiguration::OAICreateFHIRDatastoreRequest_IdentityProviderConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateFHIRDatastoreRequest_IdentityProviderConfiguration::OAICreateFHIRDatastoreRequest_IdentityProviderConfiguration() {
    this->initializeModel();
}

OAICreateFHIRDatastoreRequest_IdentityProviderConfiguration::~OAICreateFHIRDatastoreRequest_IdentityProviderConfiguration() {}

void OAICreateFHIRDatastoreRequest_IdentityProviderConfiguration::initializeModel() {

    m_authorization_strategy_isSet = false;
    m_authorization_strategy_isValid = false;

    m_fine_grained_authorization_enabled_isSet = false;
    m_fine_grained_authorization_enabled_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_idp_lambda_arn_isSet = false;
    m_idp_lambda_arn_isValid = false;
}

void OAICreateFHIRDatastoreRequest_IdentityProviderConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateFHIRDatastoreRequest_IdentityProviderConfiguration::fromJsonObject(QJsonObject json) {

    m_authorization_strategy_isValid = ::OpenAPI::fromJsonValue(m_authorization_strategy, json[QString("AuthorizationStrategy")]);
    m_authorization_strategy_isSet = !json[QString("AuthorizationStrategy")].isNull() && m_authorization_strategy_isValid;

    m_fine_grained_authorization_enabled_isValid = ::OpenAPI::fromJsonValue(m_fine_grained_authorization_enabled, json[QString("FineGrainedAuthorizationEnabled")]);
    m_fine_grained_authorization_enabled_isSet = !json[QString("FineGrainedAuthorizationEnabled")].isNull() && m_fine_grained_authorization_enabled_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("Metadata")]);
    m_metadata_isSet = !json[QString("Metadata")].isNull() && m_metadata_isValid;

    m_idp_lambda_arn_isValid = ::OpenAPI::fromJsonValue(m_idp_lambda_arn, json[QString("IdpLambdaArn")]);
    m_idp_lambda_arn_isSet = !json[QString("IdpLambdaArn")].isNull() && m_idp_lambda_arn_isValid;
}

QString OAICreateFHIRDatastoreRequest_IdentityProviderConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateFHIRDatastoreRequest_IdentityProviderConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_authorization_strategy.isSet()) {
        obj.insert(QString("AuthorizationStrategy"), ::OpenAPI::toJsonValue(m_authorization_strategy));
    }
    if (m_fine_grained_authorization_enabled_isSet) {
        obj.insert(QString("FineGrainedAuthorizationEnabled"), ::OpenAPI::toJsonValue(m_fine_grained_authorization_enabled));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("Metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_idp_lambda_arn_isSet) {
        obj.insert(QString("IdpLambdaArn"), ::OpenAPI::toJsonValue(m_idp_lambda_arn));
    }
    return obj;
}

OAIAuthorizationStrategy OAICreateFHIRDatastoreRequest_IdentityProviderConfiguration::getAuthorizationStrategy() const {
    return m_authorization_strategy;
}
void OAICreateFHIRDatastoreRequest_IdentityProviderConfiguration::setAuthorizationStrategy(const OAIAuthorizationStrategy &authorization_strategy) {
    m_authorization_strategy = authorization_strategy;
    m_authorization_strategy_isSet = true;
}

bool OAICreateFHIRDatastoreRequest_IdentityProviderConfiguration::is_authorization_strategy_Set() const{
    return m_authorization_strategy_isSet;
}

bool OAICreateFHIRDatastoreRequest_IdentityProviderConfiguration::is_authorization_strategy_Valid() const{
    return m_authorization_strategy_isValid;
}

bool OAICreateFHIRDatastoreRequest_IdentityProviderConfiguration::getFineGrainedAuthorizationEnabled() const {
    return m_fine_grained_authorization_enabled;
}
void OAICreateFHIRDatastoreRequest_IdentityProviderConfiguration::setFineGrainedAuthorizationEnabled(const bool &fine_grained_authorization_enabled) {
    m_fine_grained_authorization_enabled = fine_grained_authorization_enabled;
    m_fine_grained_authorization_enabled_isSet = true;
}

bool OAICreateFHIRDatastoreRequest_IdentityProviderConfiguration::is_fine_grained_authorization_enabled_Set() const{
    return m_fine_grained_authorization_enabled_isSet;
}

bool OAICreateFHIRDatastoreRequest_IdentityProviderConfiguration::is_fine_grained_authorization_enabled_Valid() const{
    return m_fine_grained_authorization_enabled_isValid;
}

QString OAICreateFHIRDatastoreRequest_IdentityProviderConfiguration::getMetadata() const {
    return m_metadata;
}
void OAICreateFHIRDatastoreRequest_IdentityProviderConfiguration::setMetadata(const QString &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAICreateFHIRDatastoreRequest_IdentityProviderConfiguration::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAICreateFHIRDatastoreRequest_IdentityProviderConfiguration::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAICreateFHIRDatastoreRequest_IdentityProviderConfiguration::getIdpLambdaArn() const {
    return m_idp_lambda_arn;
}
void OAICreateFHIRDatastoreRequest_IdentityProviderConfiguration::setIdpLambdaArn(const QString &idp_lambda_arn) {
    m_idp_lambda_arn = idp_lambda_arn;
    m_idp_lambda_arn_isSet = true;
}

bool OAICreateFHIRDatastoreRequest_IdentityProviderConfiguration::is_idp_lambda_arn_Set() const{
    return m_idp_lambda_arn_isSet;
}

bool OAICreateFHIRDatastoreRequest_IdentityProviderConfiguration::is_idp_lambda_arn_Valid() const{
    return m_idp_lambda_arn_isValid;
}

bool OAICreateFHIRDatastoreRequest_IdentityProviderConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorization_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fine_grained_authorization_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_idp_lambda_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateFHIRDatastoreRequest_IdentityProviderConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_authorization_strategy_isValid && true;
}

} // namespace OpenAPI
