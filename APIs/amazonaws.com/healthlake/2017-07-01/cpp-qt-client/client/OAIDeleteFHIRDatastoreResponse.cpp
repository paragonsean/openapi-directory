/**
 * Amazon HealthLake
 * AWS HealthLake is a HIPAA eligibile service that allows customers to store, transform, query, and analyze their FHIR-formatted data in a consistent fashion in the cloud.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteFHIRDatastoreResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteFHIRDatastoreResponse::OAIDeleteFHIRDatastoreResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteFHIRDatastoreResponse::OAIDeleteFHIRDatastoreResponse() {
    this->initializeModel();
}

OAIDeleteFHIRDatastoreResponse::~OAIDeleteFHIRDatastoreResponse() {}

void OAIDeleteFHIRDatastoreResponse::initializeModel() {

    m_datastore_id_isSet = false;
    m_datastore_id_isValid = false;

    m_datastore_arn_isSet = false;
    m_datastore_arn_isValid = false;

    m_datastore_status_isSet = false;
    m_datastore_status_isValid = false;

    m_datastore_endpoint_isSet = false;
    m_datastore_endpoint_isValid = false;
}

void OAIDeleteFHIRDatastoreResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteFHIRDatastoreResponse::fromJsonObject(QJsonObject json) {

    m_datastore_id_isValid = ::OpenAPI::fromJsonValue(m_datastore_id, json[QString("DatastoreId")]);
    m_datastore_id_isSet = !json[QString("DatastoreId")].isNull() && m_datastore_id_isValid;

    m_datastore_arn_isValid = ::OpenAPI::fromJsonValue(m_datastore_arn, json[QString("DatastoreArn")]);
    m_datastore_arn_isSet = !json[QString("DatastoreArn")].isNull() && m_datastore_arn_isValid;

    m_datastore_status_isValid = ::OpenAPI::fromJsonValue(m_datastore_status, json[QString("DatastoreStatus")]);
    m_datastore_status_isSet = !json[QString("DatastoreStatus")].isNull() && m_datastore_status_isValid;

    m_datastore_endpoint_isValid = ::OpenAPI::fromJsonValue(m_datastore_endpoint, json[QString("DatastoreEndpoint")]);
    m_datastore_endpoint_isSet = !json[QString("DatastoreEndpoint")].isNull() && m_datastore_endpoint_isValid;
}

QString OAIDeleteFHIRDatastoreResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteFHIRDatastoreResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_datastore_id_isSet) {
        obj.insert(QString("DatastoreId"), ::OpenAPI::toJsonValue(m_datastore_id));
    }
    if (m_datastore_arn_isSet) {
        obj.insert(QString("DatastoreArn"), ::OpenAPI::toJsonValue(m_datastore_arn));
    }
    if (m_datastore_status.isSet()) {
        obj.insert(QString("DatastoreStatus"), ::OpenAPI::toJsonValue(m_datastore_status));
    }
    if (m_datastore_endpoint_isSet) {
        obj.insert(QString("DatastoreEndpoint"), ::OpenAPI::toJsonValue(m_datastore_endpoint));
    }
    return obj;
}

QString OAIDeleteFHIRDatastoreResponse::getDatastoreId() const {
    return m_datastore_id;
}
void OAIDeleteFHIRDatastoreResponse::setDatastoreId(const QString &datastore_id) {
    m_datastore_id = datastore_id;
    m_datastore_id_isSet = true;
}

bool OAIDeleteFHIRDatastoreResponse::is_datastore_id_Set() const{
    return m_datastore_id_isSet;
}

bool OAIDeleteFHIRDatastoreResponse::is_datastore_id_Valid() const{
    return m_datastore_id_isValid;
}

QString OAIDeleteFHIRDatastoreResponse::getDatastoreArn() const {
    return m_datastore_arn;
}
void OAIDeleteFHIRDatastoreResponse::setDatastoreArn(const QString &datastore_arn) {
    m_datastore_arn = datastore_arn;
    m_datastore_arn_isSet = true;
}

bool OAIDeleteFHIRDatastoreResponse::is_datastore_arn_Set() const{
    return m_datastore_arn_isSet;
}

bool OAIDeleteFHIRDatastoreResponse::is_datastore_arn_Valid() const{
    return m_datastore_arn_isValid;
}

OAIDatastoreStatus OAIDeleteFHIRDatastoreResponse::getDatastoreStatus() const {
    return m_datastore_status;
}
void OAIDeleteFHIRDatastoreResponse::setDatastoreStatus(const OAIDatastoreStatus &datastore_status) {
    m_datastore_status = datastore_status;
    m_datastore_status_isSet = true;
}

bool OAIDeleteFHIRDatastoreResponse::is_datastore_status_Set() const{
    return m_datastore_status_isSet;
}

bool OAIDeleteFHIRDatastoreResponse::is_datastore_status_Valid() const{
    return m_datastore_status_isValid;
}

QString OAIDeleteFHIRDatastoreResponse::getDatastoreEndpoint() const {
    return m_datastore_endpoint;
}
void OAIDeleteFHIRDatastoreResponse::setDatastoreEndpoint(const QString &datastore_endpoint) {
    m_datastore_endpoint = datastore_endpoint;
    m_datastore_endpoint_isSet = true;
}

bool OAIDeleteFHIRDatastoreResponse::is_datastore_endpoint_Set() const{
    return m_datastore_endpoint_isSet;
}

bool OAIDeleteFHIRDatastoreResponse::is_datastore_endpoint_Valid() const{
    return m_datastore_endpoint_isValid;
}

bool OAIDeleteFHIRDatastoreResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_datastore_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datastore_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datastore_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_datastore_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteFHIRDatastoreResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_datastore_id_isValid && m_datastore_arn_isValid && m_datastore_status_isValid && m_datastore_endpoint_isValid && true;
}

} // namespace OpenAPI
