/**
 * Amazon HealthLake
 * AWS HealthLake is a HIPAA eligibile service that allows customers to store, transform, query, and analyze their FHIR-formatted data in a consistent fashion in the cloud.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateFHIRDatastoreRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateFHIRDatastoreRequest::OAICreateFHIRDatastoreRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateFHIRDatastoreRequest::OAICreateFHIRDatastoreRequest() {
    this->initializeModel();
}

OAICreateFHIRDatastoreRequest::~OAICreateFHIRDatastoreRequest() {}

void OAICreateFHIRDatastoreRequest::initializeModel() {

    m_datastore_name_isSet = false;
    m_datastore_name_isValid = false;

    m_datastore_type_version_isSet = false;
    m_datastore_type_version_isValid = false;

    m_sse_configuration_isSet = false;
    m_sse_configuration_isValid = false;

    m_preload_data_config_isSet = false;
    m_preload_data_config_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_identity_provider_configuration_isSet = false;
    m_identity_provider_configuration_isValid = false;
}

void OAICreateFHIRDatastoreRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateFHIRDatastoreRequest::fromJsonObject(QJsonObject json) {

    m_datastore_name_isValid = ::OpenAPI::fromJsonValue(m_datastore_name, json[QString("DatastoreName")]);
    m_datastore_name_isSet = !json[QString("DatastoreName")].isNull() && m_datastore_name_isValid;

    m_datastore_type_version_isValid = ::OpenAPI::fromJsonValue(m_datastore_type_version, json[QString("DatastoreTypeVersion")]);
    m_datastore_type_version_isSet = !json[QString("DatastoreTypeVersion")].isNull() && m_datastore_type_version_isValid;

    m_sse_configuration_isValid = ::OpenAPI::fromJsonValue(m_sse_configuration, json[QString("SseConfiguration")]);
    m_sse_configuration_isSet = !json[QString("SseConfiguration")].isNull() && m_sse_configuration_isValid;

    m_preload_data_config_isValid = ::OpenAPI::fromJsonValue(m_preload_data_config, json[QString("PreloadDataConfig")]);
    m_preload_data_config_isSet = !json[QString("PreloadDataConfig")].isNull() && m_preload_data_config_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_identity_provider_configuration_isValid = ::OpenAPI::fromJsonValue(m_identity_provider_configuration, json[QString("IdentityProviderConfiguration")]);
    m_identity_provider_configuration_isSet = !json[QString("IdentityProviderConfiguration")].isNull() && m_identity_provider_configuration_isValid;
}

QString OAICreateFHIRDatastoreRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateFHIRDatastoreRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_datastore_name_isSet) {
        obj.insert(QString("DatastoreName"), ::OpenAPI::toJsonValue(m_datastore_name));
    }
    if (m_datastore_type_version.isSet()) {
        obj.insert(QString("DatastoreTypeVersion"), ::OpenAPI::toJsonValue(m_datastore_type_version));
    }
    if (m_sse_configuration.isSet()) {
        obj.insert(QString("SseConfiguration"), ::OpenAPI::toJsonValue(m_sse_configuration));
    }
    if (m_preload_data_config.isSet()) {
        obj.insert(QString("PreloadDataConfig"), ::OpenAPI::toJsonValue(m_preload_data_config));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_identity_provider_configuration.isSet()) {
        obj.insert(QString("IdentityProviderConfiguration"), ::OpenAPI::toJsonValue(m_identity_provider_configuration));
    }
    return obj;
}

QString OAICreateFHIRDatastoreRequest::getDatastoreName() const {
    return m_datastore_name;
}
void OAICreateFHIRDatastoreRequest::setDatastoreName(const QString &datastore_name) {
    m_datastore_name = datastore_name;
    m_datastore_name_isSet = true;
}

bool OAICreateFHIRDatastoreRequest::is_datastore_name_Set() const{
    return m_datastore_name_isSet;
}

bool OAICreateFHIRDatastoreRequest::is_datastore_name_Valid() const{
    return m_datastore_name_isValid;
}

OAIFHIRVersion OAICreateFHIRDatastoreRequest::getDatastoreTypeVersion() const {
    return m_datastore_type_version;
}
void OAICreateFHIRDatastoreRequest::setDatastoreTypeVersion(const OAIFHIRVersion &datastore_type_version) {
    m_datastore_type_version = datastore_type_version;
    m_datastore_type_version_isSet = true;
}

bool OAICreateFHIRDatastoreRequest::is_datastore_type_version_Set() const{
    return m_datastore_type_version_isSet;
}

bool OAICreateFHIRDatastoreRequest::is_datastore_type_version_Valid() const{
    return m_datastore_type_version_isValid;
}

OAICreateFHIRDatastoreRequest_SseConfiguration OAICreateFHIRDatastoreRequest::getSseConfiguration() const {
    return m_sse_configuration;
}
void OAICreateFHIRDatastoreRequest::setSseConfiguration(const OAICreateFHIRDatastoreRequest_SseConfiguration &sse_configuration) {
    m_sse_configuration = sse_configuration;
    m_sse_configuration_isSet = true;
}

bool OAICreateFHIRDatastoreRequest::is_sse_configuration_Set() const{
    return m_sse_configuration_isSet;
}

bool OAICreateFHIRDatastoreRequest::is_sse_configuration_Valid() const{
    return m_sse_configuration_isValid;
}

OAICreateFHIRDatastoreRequest_PreloadDataConfig OAICreateFHIRDatastoreRequest::getPreloadDataConfig() const {
    return m_preload_data_config;
}
void OAICreateFHIRDatastoreRequest::setPreloadDataConfig(const OAICreateFHIRDatastoreRequest_PreloadDataConfig &preload_data_config) {
    m_preload_data_config = preload_data_config;
    m_preload_data_config_isSet = true;
}

bool OAICreateFHIRDatastoreRequest::is_preload_data_config_Set() const{
    return m_preload_data_config_isSet;
}

bool OAICreateFHIRDatastoreRequest::is_preload_data_config_Valid() const{
    return m_preload_data_config_isValid;
}

QString OAICreateFHIRDatastoreRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateFHIRDatastoreRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateFHIRDatastoreRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateFHIRDatastoreRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QList OAICreateFHIRDatastoreRequest::getTags() const {
    return m_tags;
}
void OAICreateFHIRDatastoreRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateFHIRDatastoreRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateFHIRDatastoreRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

OAICreateFHIRDatastoreRequest_IdentityProviderConfiguration OAICreateFHIRDatastoreRequest::getIdentityProviderConfiguration() const {
    return m_identity_provider_configuration;
}
void OAICreateFHIRDatastoreRequest::setIdentityProviderConfiguration(const OAICreateFHIRDatastoreRequest_IdentityProviderConfiguration &identity_provider_configuration) {
    m_identity_provider_configuration = identity_provider_configuration;
    m_identity_provider_configuration_isSet = true;
}

bool OAICreateFHIRDatastoreRequest::is_identity_provider_configuration_Set() const{
    return m_identity_provider_configuration_isSet;
}

bool OAICreateFHIRDatastoreRequest::is_identity_provider_configuration_Valid() const{
    return m_identity_provider_configuration_isValid;
}

bool OAICreateFHIRDatastoreRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_datastore_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datastore_type_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sse_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preload_data_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_provider_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateFHIRDatastoreRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_datastore_type_version_isValid && true;
}

} // namespace OpenAPI
