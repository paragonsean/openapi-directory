/**
 * Amazon HealthLake
 * AWS HealthLake is a HIPAA eligibile service that allows customers to store, transform, query, and analyze their FHIR-formatted data in a consistent fashion in the cloud.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateFHIRDatastoreRequest.h
 *
 * 
 */

#ifndef OAICreateFHIRDatastoreRequest_H
#define OAICreateFHIRDatastoreRequest_H

#include <QJsonObject>

#include "OAICreateFHIRDatastoreRequest_IdentityProviderConfiguration.h"
#include "OAICreateFHIRDatastoreRequest_PreloadDataConfig.h"
#include "OAICreateFHIRDatastoreRequest_SseConfiguration.h"
#include "OAIFHIRVersion.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateFHIRDatastoreRequest_SseConfiguration;
class OAICreateFHIRDatastoreRequest_PreloadDataConfig;
class OAICreateFHIRDatastoreRequest_IdentityProviderConfiguration;

class OAICreateFHIRDatastoreRequest : public OAIObject {
public:
    OAICreateFHIRDatastoreRequest();
    OAICreateFHIRDatastoreRequest(QString json);
    ~OAICreateFHIRDatastoreRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDatastoreName() const;
    void setDatastoreName(const QString &datastore_name);
    bool is_datastore_name_Set() const;
    bool is_datastore_name_Valid() const;

    OAIFHIRVersion getDatastoreTypeVersion() const;
    void setDatastoreTypeVersion(const OAIFHIRVersion &datastore_type_version);
    bool is_datastore_type_version_Set() const;
    bool is_datastore_type_version_Valid() const;

    OAICreateFHIRDatastoreRequest_SseConfiguration getSseConfiguration() const;
    void setSseConfiguration(const OAICreateFHIRDatastoreRequest_SseConfiguration &sse_configuration);
    bool is_sse_configuration_Set() const;
    bool is_sse_configuration_Valid() const;

    OAICreateFHIRDatastoreRequest_PreloadDataConfig getPreloadDataConfig() const;
    void setPreloadDataConfig(const OAICreateFHIRDatastoreRequest_PreloadDataConfig &preload_data_config);
    bool is_preload_data_config_Set() const;
    bool is_preload_data_config_Valid() const;

    QString getClientToken() const;
    void setClientToken(const QString &client_token);
    bool is_client_token_Set() const;
    bool is_client_token_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    OAICreateFHIRDatastoreRequest_IdentityProviderConfiguration getIdentityProviderConfiguration() const;
    void setIdentityProviderConfiguration(const OAICreateFHIRDatastoreRequest_IdentityProviderConfiguration &identity_provider_configuration);
    bool is_identity_provider_configuration_Set() const;
    bool is_identity_provider_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_datastore_name;
    bool m_datastore_name_isSet;
    bool m_datastore_name_isValid;

    OAIFHIRVersion m_datastore_type_version;
    bool m_datastore_type_version_isSet;
    bool m_datastore_type_version_isValid;

    OAICreateFHIRDatastoreRequest_SseConfiguration m_sse_configuration;
    bool m_sse_configuration_isSet;
    bool m_sse_configuration_isValid;

    OAICreateFHIRDatastoreRequest_PreloadDataConfig m_preload_data_config;
    bool m_preload_data_config_isSet;
    bool m_preload_data_config_isValid;

    QString m_client_token;
    bool m_client_token_isSet;
    bool m_client_token_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    OAICreateFHIRDatastoreRequest_IdentityProviderConfiguration m_identity_provider_configuration;
    bool m_identity_provider_configuration_isSet;
    bool m_identity_provider_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateFHIRDatastoreRequest)

#endif // OAICreateFHIRDatastoreRequest_H
