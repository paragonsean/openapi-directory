/**
 * Amazon HealthLake
 * AWS HealthLake is a HIPAA eligibile service that allows customers to store, transform, query, and analyze their FHIR-formatted data in a consistent fashion in the cloud.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PreloadDataConfig from './PreloadDataConfig';
import PreloadDataType from './PreloadDataType';

/**
 * The CreateFHIRDatastoreRequestPreloadDataConfig model module.
 * @module model/CreateFHIRDatastoreRequestPreloadDataConfig
 * @version 2017-07-01
 */
class CreateFHIRDatastoreRequestPreloadDataConfig {
    /**
     * Constructs a new <code>CreateFHIRDatastoreRequestPreloadDataConfig</code>.
     * @alias module:model/CreateFHIRDatastoreRequestPreloadDataConfig
     * @implements module:model/PreloadDataConfig
     * @param preloadDataType {module:model/PreloadDataType} 
     */
    constructor(preloadDataType) { 
        PreloadDataConfig.initialize(this, preloadDataType);
        CreateFHIRDatastoreRequestPreloadDataConfig.initialize(this, preloadDataType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, preloadDataType) { 
        obj['PreloadDataType'] = preloadDataType;
    }

    /**
     * Constructs a <code>CreateFHIRDatastoreRequestPreloadDataConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateFHIRDatastoreRequestPreloadDataConfig} obj Optional instance to populate.
     * @return {module:model/CreateFHIRDatastoreRequestPreloadDataConfig} The populated <code>CreateFHIRDatastoreRequestPreloadDataConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateFHIRDatastoreRequestPreloadDataConfig();
            PreloadDataConfig.constructFromObject(data, obj);

            if (data.hasOwnProperty('PreloadDataType')) {
                obj['PreloadDataType'] = ApiClient.convertToType(data['PreloadDataType'], PreloadDataType);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateFHIRDatastoreRequestPreloadDataConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateFHIRDatastoreRequestPreloadDataConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateFHIRDatastoreRequestPreloadDataConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `PreloadDataType`
        if (data['PreloadDataType']) { // data not null
          PreloadDataType.validateJSON(data['PreloadDataType']);
        }

        return true;
    }


}

CreateFHIRDatastoreRequestPreloadDataConfig.RequiredProperties = ["PreloadDataType"];

/**
 * @member {module:model/PreloadDataType} PreloadDataType
 */
CreateFHIRDatastoreRequestPreloadDataConfig.prototype['PreloadDataType'] = undefined;


// Implement PreloadDataConfig interface:
/**
 * @member {module:model/PreloadDataType} PreloadDataType
 */
PreloadDataConfig.prototype['PreloadDataType'] = undefined;




export default CreateFHIRDatastoreRequestPreloadDataConfig;

