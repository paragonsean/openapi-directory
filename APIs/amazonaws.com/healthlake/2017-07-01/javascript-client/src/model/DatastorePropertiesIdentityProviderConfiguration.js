/**
 * Amazon HealthLake
 * AWS HealthLake is a HIPAA eligibile service that allows customers to store, transform, query, and analyze their FHIR-formatted data in a consistent fashion in the cloud.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuthorizationStrategy from './AuthorizationStrategy';
import IdentityProviderConfiguration from './IdentityProviderConfiguration';

/**
 * The DatastorePropertiesIdentityProviderConfiguration model module.
 * @module model/DatastorePropertiesIdentityProviderConfiguration
 * @version 2017-07-01
 */
class DatastorePropertiesIdentityProviderConfiguration {
    /**
     * Constructs a new <code>DatastorePropertiesIdentityProviderConfiguration</code>.
     * @alias module:model/DatastorePropertiesIdentityProviderConfiguration
     * @implements module:model/IdentityProviderConfiguration
     * @param authorizationStrategy {module:model/AuthorizationStrategy} 
     */
    constructor(authorizationStrategy) { 
        IdentityProviderConfiguration.initialize(this, authorizationStrategy);
        DatastorePropertiesIdentityProviderConfiguration.initialize(this, authorizationStrategy);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, authorizationStrategy) { 
        obj['AuthorizationStrategy'] = authorizationStrategy;
    }

    /**
     * Constructs a <code>DatastorePropertiesIdentityProviderConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DatastorePropertiesIdentityProviderConfiguration} obj Optional instance to populate.
     * @return {module:model/DatastorePropertiesIdentityProviderConfiguration} The populated <code>DatastorePropertiesIdentityProviderConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DatastorePropertiesIdentityProviderConfiguration();
            IdentityProviderConfiguration.constructFromObject(data, obj);

            if (data.hasOwnProperty('AuthorizationStrategy')) {
                obj['AuthorizationStrategy'] = ApiClient.convertToType(data['AuthorizationStrategy'], AuthorizationStrategy);
            }
            if (data.hasOwnProperty('FineGrainedAuthorizationEnabled')) {
                obj['FineGrainedAuthorizationEnabled'] = ApiClient.convertToType(data['FineGrainedAuthorizationEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('Metadata')) {
                obj['Metadata'] = ApiClient.convertToType(data['Metadata'], 'String');
            }
            if (data.hasOwnProperty('IdpLambdaArn')) {
                obj['IdpLambdaArn'] = ApiClient.convertToType(data['IdpLambdaArn'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DatastorePropertiesIdentityProviderConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DatastorePropertiesIdentityProviderConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DatastorePropertiesIdentityProviderConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `AuthorizationStrategy`
        if (data['AuthorizationStrategy']) { // data not null
          AuthorizationStrategy.validateJSON(data['AuthorizationStrategy']);
        }
        // validate the optional field `FineGrainedAuthorizationEnabled`
        if (data['FineGrainedAuthorizationEnabled']) { // data not null
          Boolean.validateJSON(data['FineGrainedAuthorizationEnabled']);
        }
        // validate the optional field `Metadata`
        if (data['Metadata']) { // data not null
          String.validateJSON(data['Metadata']);
        }
        // validate the optional field `IdpLambdaArn`
        if (data['IdpLambdaArn']) { // data not null
          String.validateJSON(data['IdpLambdaArn']);
        }

        return true;
    }


}

DatastorePropertiesIdentityProviderConfiguration.RequiredProperties = ["AuthorizationStrategy"];

/**
 * @member {module:model/AuthorizationStrategy} AuthorizationStrategy
 */
DatastorePropertiesIdentityProviderConfiguration.prototype['AuthorizationStrategy'] = undefined;

/**
 * @member {Boolean} FineGrainedAuthorizationEnabled
 */
DatastorePropertiesIdentityProviderConfiguration.prototype['FineGrainedAuthorizationEnabled'] = undefined;

/**
 * @member {String} Metadata
 */
DatastorePropertiesIdentityProviderConfiguration.prototype['Metadata'] = undefined;

/**
 * @member {String} IdpLambdaArn
 */
DatastorePropertiesIdentityProviderConfiguration.prototype['IdpLambdaArn'] = undefined;


// Implement IdentityProviderConfiguration interface:
/**
 * @member {module:model/AuthorizationStrategy} AuthorizationStrategy
 */
IdentityProviderConfiguration.prototype['AuthorizationStrategy'] = undefined;
/**
 * @member {Boolean} FineGrainedAuthorizationEnabled
 */
IdentityProviderConfiguration.prototype['FineGrainedAuthorizationEnabled'] = undefined;
/**
 * @member {String} Metadata
 */
IdentityProviderConfiguration.prototype['Metadata'] = undefined;
/**
 * @member {String} IdpLambdaArn
 */
IdentityProviderConfiguration.prototype['IdpLambdaArn'] = undefined;




export default DatastorePropertiesIdentityProviderConfiguration;

