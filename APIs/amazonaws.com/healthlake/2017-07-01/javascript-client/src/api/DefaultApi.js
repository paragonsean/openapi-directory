/**
 * Amazon HealthLake
 * AWS HealthLake is a HIPAA eligibile service that allows customers to store, transform, query, and analyze their FHIR-formatted data in a consistent fashion in the cloud.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateFHIRDatastoreRequest from '../model/CreateFHIRDatastoreRequest';
import CreateFHIRDatastoreResponse from '../model/CreateFHIRDatastoreResponse';
import DeleteFHIRDatastoreRequest from '../model/DeleteFHIRDatastoreRequest';
import DeleteFHIRDatastoreResponse from '../model/DeleteFHIRDatastoreResponse';
import DescribeFHIRDatastoreRequest from '../model/DescribeFHIRDatastoreRequest';
import DescribeFHIRDatastoreResponse from '../model/DescribeFHIRDatastoreResponse';
import DescribeFHIRExportJobRequest from '../model/DescribeFHIRExportJobRequest';
import DescribeFHIRExportJobResponse from '../model/DescribeFHIRExportJobResponse';
import DescribeFHIRImportJobRequest from '../model/DescribeFHIRImportJobRequest';
import DescribeFHIRImportJobResponse from '../model/DescribeFHIRImportJobResponse';
import ListFHIRDatastoresRequest from '../model/ListFHIRDatastoresRequest';
import ListFHIRDatastoresResponse from '../model/ListFHIRDatastoresResponse';
import ListFHIRExportJobsRequest from '../model/ListFHIRExportJobsRequest';
import ListFHIRExportJobsResponse from '../model/ListFHIRExportJobsResponse';
import ListFHIRImportJobsRequest from '../model/ListFHIRImportJobsRequest';
import ListFHIRImportJobsResponse from '../model/ListFHIRImportJobsResponse';
import ListTagsForResourceRequest from '../model/ListTagsForResourceRequest';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import StartFHIRExportJobRequest from '../model/StartFHIRExportJobRequest';
import StartFHIRExportJobResponse from '../model/StartFHIRExportJobResponse';
import StartFHIRImportJobRequest from '../model/StartFHIRImportJobRequest';
import StartFHIRImportJobResponse from '../model/StartFHIRImportJobResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UntagResourceRequest from '../model/UntagResourceRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 2017-07-01
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createFHIRDatastore operation.
     * @callback module:api/DefaultApi~createFHIRDatastoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateFHIRDatastoreResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a data store that can ingest and export FHIR formatted data.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateFHIRDatastoreRequest} createFHIRDatastoreRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createFHIRDatastoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateFHIRDatastoreResponse}
     */
    createFHIRDatastore(xAmzTarget, createFHIRDatastoreRequest, opts, callback) {
      opts = opts || {};
      let postBody = createFHIRDatastoreRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createFHIRDatastore");
      }
      // verify the required parameter 'createFHIRDatastoreRequest' is set
      if (createFHIRDatastoreRequest === undefined || createFHIRDatastoreRequest === null) {
        throw new Error("Missing the required parameter 'createFHIRDatastoreRequest' when calling createFHIRDatastore");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateFHIRDatastoreResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=HealthLake.CreateFHIRDatastore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFHIRDatastore operation.
     * @callback module:api/DefaultApi~deleteFHIRDatastoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteFHIRDatastoreResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a data store. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteFHIRDatastoreRequest} deleteFHIRDatastoreRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteFHIRDatastoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteFHIRDatastoreResponse}
     */
    deleteFHIRDatastore(xAmzTarget, deleteFHIRDatastoreRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteFHIRDatastoreRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteFHIRDatastore");
      }
      // verify the required parameter 'deleteFHIRDatastoreRequest' is set
      if (deleteFHIRDatastoreRequest === undefined || deleteFHIRDatastoreRequest === null) {
        throw new Error("Missing the required parameter 'deleteFHIRDatastoreRequest' when calling deleteFHIRDatastore");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteFHIRDatastoreResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=HealthLake.DeleteFHIRDatastore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeFHIRDatastore operation.
     * @callback module:api/DefaultApi~describeFHIRDatastoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeFHIRDatastoreResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the properties associated with the FHIR data store, including the data store ID, data store ARN, data store name, data store status, when the data store was created, data store type version, and the data store's endpoint.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeFHIRDatastoreRequest} describeFHIRDatastoreRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeFHIRDatastoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeFHIRDatastoreResponse}
     */
    describeFHIRDatastore(xAmzTarget, describeFHIRDatastoreRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeFHIRDatastoreRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeFHIRDatastore");
      }
      // verify the required parameter 'describeFHIRDatastoreRequest' is set
      if (describeFHIRDatastoreRequest === undefined || describeFHIRDatastoreRequest === null) {
        throw new Error("Missing the required parameter 'describeFHIRDatastoreRequest' when calling describeFHIRDatastore");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeFHIRDatastoreResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=HealthLake.DescribeFHIRDatastore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeFHIRExportJob operation.
     * @callback module:api/DefaultApi~describeFHIRExportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeFHIRExportJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays the properties of a FHIR export job, including the ID, ARN, name, and the status of the job.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeFHIRExportJobRequest} describeFHIRExportJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeFHIRExportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeFHIRExportJobResponse}
     */
    describeFHIRExportJob(xAmzTarget, describeFHIRExportJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeFHIRExportJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeFHIRExportJob");
      }
      // verify the required parameter 'describeFHIRExportJobRequest' is set
      if (describeFHIRExportJobRequest === undefined || describeFHIRExportJobRequest === null) {
        throw new Error("Missing the required parameter 'describeFHIRExportJobRequest' when calling describeFHIRExportJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeFHIRExportJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=HealthLake.DescribeFHIRExportJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeFHIRImportJob operation.
     * @callback module:api/DefaultApi~describeFHIRImportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeFHIRImportJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays the properties of a FHIR import job, including the ID, ARN, name, and the status of the job. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeFHIRImportJobRequest} describeFHIRImportJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeFHIRImportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeFHIRImportJobResponse}
     */
    describeFHIRImportJob(xAmzTarget, describeFHIRImportJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeFHIRImportJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeFHIRImportJob");
      }
      // verify the required parameter 'describeFHIRImportJobRequest' is set
      if (describeFHIRImportJobRequest === undefined || describeFHIRImportJobRequest === null) {
        throw new Error("Missing the required parameter 'describeFHIRImportJobRequest' when calling describeFHIRImportJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeFHIRImportJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=HealthLake.DescribeFHIRImportJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFHIRDatastores operation.
     * @callback module:api/DefaultApi~listFHIRDatastoresCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFHIRDatastoresResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all FHIR data stores that are in the user’s account, regardless of data store status.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListFHIRDatastoresRequest} listFHIRDatastoresRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listFHIRDatastoresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFHIRDatastoresResponse}
     */
    listFHIRDatastores(xAmzTarget, listFHIRDatastoresRequest, opts, callback) {
      opts = opts || {};
      let postBody = listFHIRDatastoresRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listFHIRDatastores");
      }
      // verify the required parameter 'listFHIRDatastoresRequest' is set
      if (listFHIRDatastoresRequest === undefined || listFHIRDatastoresRequest === null) {
        throw new Error("Missing the required parameter 'listFHIRDatastoresRequest' when calling listFHIRDatastores");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListFHIRDatastoresResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=HealthLake.ListFHIRDatastores', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFHIRExportJobs operation.
     * @callback module:api/DefaultApi~listFHIRExportJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFHIRExportJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Lists all FHIR export jobs associated with an account and their statuses. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListFHIRExportJobsRequest} listFHIRExportJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listFHIRExportJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFHIRExportJobsResponse}
     */
    listFHIRExportJobs(xAmzTarget, listFHIRExportJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listFHIRExportJobsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listFHIRExportJobs");
      }
      // verify the required parameter 'listFHIRExportJobsRequest' is set
      if (listFHIRExportJobsRequest === undefined || listFHIRExportJobsRequest === null) {
        throw new Error("Missing the required parameter 'listFHIRExportJobsRequest' when calling listFHIRExportJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListFHIRExportJobsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=HealthLake.ListFHIRExportJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFHIRImportJobs operation.
     * @callback module:api/DefaultApi~listFHIRImportJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFHIRImportJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Lists all FHIR import jobs associated with an account and their statuses. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListFHIRImportJobsRequest} listFHIRImportJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listFHIRImportJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFHIRImportJobsResponse}
     */
    listFHIRImportJobs(xAmzTarget, listFHIRImportJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listFHIRImportJobsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listFHIRImportJobs");
      }
      // verify the required parameter 'listFHIRImportJobsRequest' is set
      if (listFHIRImportJobsRequest === undefined || listFHIRImportJobsRequest === null) {
        throw new Error("Missing the required parameter 'listFHIRImportJobsRequest' when calling listFHIRImportJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListFHIRImportJobsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=HealthLake.ListFHIRImportJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns a list of all existing tags associated with a data store. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTagsForResourceRequest} listTagsForResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(xAmzTarget, listTagsForResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTagsForResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTagsForResource");
      }
      // verify the required parameter 'listTagsForResourceRequest' is set
      if (listTagsForResourceRequest === undefined || listTagsForResourceRequest === null) {
        throw new Error("Missing the required parameter 'listTagsForResourceRequest' when calling listTagsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=HealthLake.ListTagsForResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startFHIRExportJob operation.
     * @callback module:api/DefaultApi~startFHIRExportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartFHIRExportJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Begins a FHIR export job.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartFHIRExportJobRequest} startFHIRExportJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startFHIRExportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartFHIRExportJobResponse}
     */
    startFHIRExportJob(xAmzTarget, startFHIRExportJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = startFHIRExportJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startFHIRExportJob");
      }
      // verify the required parameter 'startFHIRExportJobRequest' is set
      if (startFHIRExportJobRequest === undefined || startFHIRExportJobRequest === null) {
        throw new Error("Missing the required parameter 'startFHIRExportJobRequest' when calling startFHIRExportJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartFHIRExportJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=HealthLake.StartFHIRExportJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startFHIRImportJob operation.
     * @callback module:api/DefaultApi~startFHIRImportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartFHIRImportJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Begins a FHIR Import job.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartFHIRImportJobRequest} startFHIRImportJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startFHIRImportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartFHIRImportJobResponse}
     */
    startFHIRImportJob(xAmzTarget, startFHIRImportJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = startFHIRImportJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startFHIRImportJob");
      }
      // verify the required parameter 'startFHIRImportJobRequest' is set
      if (startFHIRImportJobRequest === undefined || startFHIRImportJobRequest === null) {
        throw new Error("Missing the required parameter 'startFHIRImportJobRequest' when calling startFHIRImportJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartFHIRImportJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=HealthLake.StartFHIRImportJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Adds a user specified key and value tag to a data store. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(xAmzTarget, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=HealthLake.TagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Removes tags from a data store. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UntagResourceRequest} untagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(xAmzTarget, untagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = untagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling untagResource");
      }
      // verify the required parameter 'untagResourceRequest' is set
      if (untagResourceRequest === undefined || untagResourceRequest === null) {
        throw new Error("Missing the required parameter 'untagResourceRequest' when calling untagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=HealthLake.UntagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
