/**
 * Amazon HealthLake
 * AWS HealthLake is a HIPAA eligibile service that allows customers to store, transform, query, and analyze their FHIR-formatted data in a consistent fashion in the cloud.
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonHealthLake);
  }
}(this, function(expect, AmazonHealthLake) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonHealthLake.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('createFHIRDatastore', function() {
      it('should call createFHIRDatastore successfully', function(done) {
        //uncomment below and update the code to test createFHIRDatastore
        //instance.createFHIRDatastore(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFHIRDatastore', function() {
      it('should call deleteFHIRDatastore successfully', function(done) {
        //uncomment below and update the code to test deleteFHIRDatastore
        //instance.deleteFHIRDatastore(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeFHIRDatastore', function() {
      it('should call describeFHIRDatastore successfully', function(done) {
        //uncomment below and update the code to test describeFHIRDatastore
        //instance.describeFHIRDatastore(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeFHIRExportJob', function() {
      it('should call describeFHIRExportJob successfully', function(done) {
        //uncomment below and update the code to test describeFHIRExportJob
        //instance.describeFHIRExportJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeFHIRImportJob', function() {
      it('should call describeFHIRImportJob successfully', function(done) {
        //uncomment below and update the code to test describeFHIRImportJob
        //instance.describeFHIRImportJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFHIRDatastores', function() {
      it('should call listFHIRDatastores successfully', function(done) {
        //uncomment below and update the code to test listFHIRDatastores
        //instance.listFHIRDatastores(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFHIRExportJobs', function() {
      it('should call listFHIRExportJobs successfully', function(done) {
        //uncomment below and update the code to test listFHIRExportJobs
        //instance.listFHIRExportJobs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFHIRImportJobs', function() {
      it('should call listFHIRImportJobs successfully', function(done) {
        //uncomment below and update the code to test listFHIRImportJobs
        //instance.listFHIRImportJobs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startFHIRExportJob', function() {
      it('should call startFHIRExportJob successfully', function(done) {
        //uncomment below and update the code to test startFHIRExportJob
        //instance.startFHIRExportJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startFHIRImportJob', function() {
      it('should call startFHIRImportJob successfully', function(done) {
        //uncomment below and update the code to test startFHIRImportJob
        //instance.startFHIRImportJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
