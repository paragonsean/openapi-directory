# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.start_fhir_export_job_request_output_data_config import StartFHIRExportJobRequestOutputDataConfig
from openapi_server import util


class StartFHIRExportJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_name: str=None, output_data_config: StartFHIRExportJobRequestOutputDataConfig=None, datastore_id: str=None, data_access_role_arn: str=None, client_token: str=None):
        """StartFHIRExportJobRequest - a model defined in OpenAPI

        :param job_name: The job_name of this StartFHIRExportJobRequest.
        :param output_data_config: The output_data_config of this StartFHIRExportJobRequest.
        :param datastore_id: The datastore_id of this StartFHIRExportJobRequest.
        :param data_access_role_arn: The data_access_role_arn of this StartFHIRExportJobRequest.
        :param client_token: The client_token of this StartFHIRExportJobRequest.
        """
        self.openapi_types = {
            'job_name': str,
            'output_data_config': StartFHIRExportJobRequestOutputDataConfig,
            'datastore_id': str,
            'data_access_role_arn': str,
            'client_token': str
        }

        self.attribute_map = {
            'job_name': 'JobName',
            'output_data_config': 'OutputDataConfig',
            'datastore_id': 'DatastoreId',
            'data_access_role_arn': 'DataAccessRoleArn',
            'client_token': 'ClientToken'
        }

        self._job_name = job_name
        self._output_data_config = output_data_config
        self._datastore_id = datastore_id
        self._data_access_role_arn = data_access_role_arn
        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartFHIRExportJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartFHIRExportJobRequest of this StartFHIRExportJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_name(self):
        """Gets the job_name of this StartFHIRExportJobRequest.


        :return: The job_name of this StartFHIRExportJobRequest.
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this StartFHIRExportJobRequest.


        :param job_name: The job_name of this StartFHIRExportJobRequest.
        :type job_name: str
        """

        self._job_name = job_name

    @property
    def output_data_config(self):
        """Gets the output_data_config of this StartFHIRExportJobRequest.


        :return: The output_data_config of this StartFHIRExportJobRequest.
        :rtype: StartFHIRExportJobRequestOutputDataConfig
        """
        return self._output_data_config

    @output_data_config.setter
    def output_data_config(self, output_data_config):
        """Sets the output_data_config of this StartFHIRExportJobRequest.


        :param output_data_config: The output_data_config of this StartFHIRExportJobRequest.
        :type output_data_config: StartFHIRExportJobRequestOutputDataConfig
        """
        if output_data_config is None:
            raise ValueError("Invalid value for `output_data_config`, must not be `None`")

        self._output_data_config = output_data_config

    @property
    def datastore_id(self):
        """Gets the datastore_id of this StartFHIRExportJobRequest.


        :return: The datastore_id of this StartFHIRExportJobRequest.
        :rtype: str
        """
        return self._datastore_id

    @datastore_id.setter
    def datastore_id(self, datastore_id):
        """Sets the datastore_id of this StartFHIRExportJobRequest.


        :param datastore_id: The datastore_id of this StartFHIRExportJobRequest.
        :type datastore_id: str
        """
        if datastore_id is None:
            raise ValueError("Invalid value for `datastore_id`, must not be `None`")

        self._datastore_id = datastore_id

    @property
    def data_access_role_arn(self):
        """Gets the data_access_role_arn of this StartFHIRExportJobRequest.


        :return: The data_access_role_arn of this StartFHIRExportJobRequest.
        :rtype: str
        """
        return self._data_access_role_arn

    @data_access_role_arn.setter
    def data_access_role_arn(self, data_access_role_arn):
        """Sets the data_access_role_arn of this StartFHIRExportJobRequest.


        :param data_access_role_arn: The data_access_role_arn of this StartFHIRExportJobRequest.
        :type data_access_role_arn: str
        """
        if data_access_role_arn is None:
            raise ValueError("Invalid value for `data_access_role_arn`, must not be `None`")

        self._data_access_role_arn = data_access_role_arn

    @property
    def client_token(self):
        """Gets the client_token of this StartFHIRExportJobRequest.


        :return: The client_token of this StartFHIRExportJobRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this StartFHIRExportJobRequest.


        :param client_token: The client_token of this StartFHIRExportJobRequest.
        :type client_token: str
        """
        if client_token is None:
            raise ValueError("Invalid value for `client_token`, must not be `None`")

        self._client_token = client_token
