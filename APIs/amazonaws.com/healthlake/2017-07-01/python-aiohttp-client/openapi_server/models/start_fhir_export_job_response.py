# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_status import JobStatus
from openapi_server import util


class StartFHIRExportJobResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_id: str=None, job_status: JobStatus=None, datastore_id: str=None):
        """StartFHIRExportJobResponse - a model defined in OpenAPI

        :param job_id: The job_id of this StartFHIRExportJobResponse.
        :param job_status: The job_status of this StartFHIRExportJobResponse.
        :param datastore_id: The datastore_id of this StartFHIRExportJobResponse.
        """
        self.openapi_types = {
            'job_id': str,
            'job_status': JobStatus,
            'datastore_id': str
        }

        self.attribute_map = {
            'job_id': 'JobId',
            'job_status': 'JobStatus',
            'datastore_id': 'DatastoreId'
        }

        self._job_id = job_id
        self._job_status = job_status
        self._datastore_id = datastore_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartFHIRExportJobResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartFHIRExportJobResponse of this StartFHIRExportJobResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_id(self):
        """Gets the job_id of this StartFHIRExportJobResponse.


        :return: The job_id of this StartFHIRExportJobResponse.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this StartFHIRExportJobResponse.


        :param job_id: The job_id of this StartFHIRExportJobResponse.
        :type job_id: str
        """
        if job_id is None:
            raise ValueError("Invalid value for `job_id`, must not be `None`")

        self._job_id = job_id

    @property
    def job_status(self):
        """Gets the job_status of this StartFHIRExportJobResponse.


        :return: The job_status of this StartFHIRExportJobResponse.
        :rtype: JobStatus
        """
        return self._job_status

    @job_status.setter
    def job_status(self, job_status):
        """Sets the job_status of this StartFHIRExportJobResponse.


        :param job_status: The job_status of this StartFHIRExportJobResponse.
        :type job_status: JobStatus
        """
        if job_status is None:
            raise ValueError("Invalid value for `job_status`, must not be `None`")

        self._job_status = job_status

    @property
    def datastore_id(self):
        """Gets the datastore_id of this StartFHIRExportJobResponse.


        :return: The datastore_id of this StartFHIRExportJobResponse.
        :rtype: str
        """
        return self._datastore_id

    @datastore_id.setter
    def datastore_id(self, datastore_id):
        """Sets the datastore_id of this StartFHIRExportJobResponse.


        :param datastore_id: The datastore_id of this StartFHIRExportJobResponse.
        :type datastore_id: str
        """

        self._datastore_id = datastore_id
