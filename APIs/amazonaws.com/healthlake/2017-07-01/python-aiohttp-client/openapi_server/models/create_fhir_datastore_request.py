# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_fhir_datastore_request_identity_provider_configuration import CreateFHIRDatastoreRequestIdentityProviderConfiguration
from openapi_server.models.create_fhir_datastore_request_preload_data_config import CreateFHIRDatastoreRequestPreloadDataConfig
from openapi_server.models.create_fhir_datastore_request_sse_configuration import CreateFHIRDatastoreRequestSseConfiguration
from openapi_server.models.fhir_version import FHIRVersion
from openapi_server import util


class CreateFHIRDatastoreRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, datastore_name: str=None, datastore_type_version: FHIRVersion=None, sse_configuration: CreateFHIRDatastoreRequestSseConfiguration=None, preload_data_config: CreateFHIRDatastoreRequestPreloadDataConfig=None, client_token: str=None, tags: List=None, identity_provider_configuration: CreateFHIRDatastoreRequestIdentityProviderConfiguration=None):
        """CreateFHIRDatastoreRequest - a model defined in OpenAPI

        :param datastore_name: The datastore_name of this CreateFHIRDatastoreRequest.
        :param datastore_type_version: The datastore_type_version of this CreateFHIRDatastoreRequest.
        :param sse_configuration: The sse_configuration of this CreateFHIRDatastoreRequest.
        :param preload_data_config: The preload_data_config of this CreateFHIRDatastoreRequest.
        :param client_token: The client_token of this CreateFHIRDatastoreRequest.
        :param tags: The tags of this CreateFHIRDatastoreRequest.
        :param identity_provider_configuration: The identity_provider_configuration of this CreateFHIRDatastoreRequest.
        """
        self.openapi_types = {
            'datastore_name': str,
            'datastore_type_version': FHIRVersion,
            'sse_configuration': CreateFHIRDatastoreRequestSseConfiguration,
            'preload_data_config': CreateFHIRDatastoreRequestPreloadDataConfig,
            'client_token': str,
            'tags': List,
            'identity_provider_configuration': CreateFHIRDatastoreRequestIdentityProviderConfiguration
        }

        self.attribute_map = {
            'datastore_name': 'DatastoreName',
            'datastore_type_version': 'DatastoreTypeVersion',
            'sse_configuration': 'SseConfiguration',
            'preload_data_config': 'PreloadDataConfig',
            'client_token': 'ClientToken',
            'tags': 'Tags',
            'identity_provider_configuration': 'IdentityProviderConfiguration'
        }

        self._datastore_name = datastore_name
        self._datastore_type_version = datastore_type_version
        self._sse_configuration = sse_configuration
        self._preload_data_config = preload_data_config
        self._client_token = client_token
        self._tags = tags
        self._identity_provider_configuration = identity_provider_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateFHIRDatastoreRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateFHIRDatastoreRequest of this CreateFHIRDatastoreRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def datastore_name(self):
        """Gets the datastore_name of this CreateFHIRDatastoreRequest.


        :return: The datastore_name of this CreateFHIRDatastoreRequest.
        :rtype: str
        """
        return self._datastore_name

    @datastore_name.setter
    def datastore_name(self, datastore_name):
        """Sets the datastore_name of this CreateFHIRDatastoreRequest.


        :param datastore_name: The datastore_name of this CreateFHIRDatastoreRequest.
        :type datastore_name: str
        """

        self._datastore_name = datastore_name

    @property
    def datastore_type_version(self):
        """Gets the datastore_type_version of this CreateFHIRDatastoreRequest.


        :return: The datastore_type_version of this CreateFHIRDatastoreRequest.
        :rtype: FHIRVersion
        """
        return self._datastore_type_version

    @datastore_type_version.setter
    def datastore_type_version(self, datastore_type_version):
        """Sets the datastore_type_version of this CreateFHIRDatastoreRequest.


        :param datastore_type_version: The datastore_type_version of this CreateFHIRDatastoreRequest.
        :type datastore_type_version: FHIRVersion
        """
        if datastore_type_version is None:
            raise ValueError("Invalid value for `datastore_type_version`, must not be `None`")

        self._datastore_type_version = datastore_type_version

    @property
    def sse_configuration(self):
        """Gets the sse_configuration of this CreateFHIRDatastoreRequest.


        :return: The sse_configuration of this CreateFHIRDatastoreRequest.
        :rtype: CreateFHIRDatastoreRequestSseConfiguration
        """
        return self._sse_configuration

    @sse_configuration.setter
    def sse_configuration(self, sse_configuration):
        """Sets the sse_configuration of this CreateFHIRDatastoreRequest.


        :param sse_configuration: The sse_configuration of this CreateFHIRDatastoreRequest.
        :type sse_configuration: CreateFHIRDatastoreRequestSseConfiguration
        """

        self._sse_configuration = sse_configuration

    @property
    def preload_data_config(self):
        """Gets the preload_data_config of this CreateFHIRDatastoreRequest.


        :return: The preload_data_config of this CreateFHIRDatastoreRequest.
        :rtype: CreateFHIRDatastoreRequestPreloadDataConfig
        """
        return self._preload_data_config

    @preload_data_config.setter
    def preload_data_config(self, preload_data_config):
        """Sets the preload_data_config of this CreateFHIRDatastoreRequest.


        :param preload_data_config: The preload_data_config of this CreateFHIRDatastoreRequest.
        :type preload_data_config: CreateFHIRDatastoreRequestPreloadDataConfig
        """

        self._preload_data_config = preload_data_config

    @property
    def client_token(self):
        """Gets the client_token of this CreateFHIRDatastoreRequest.


        :return: The client_token of this CreateFHIRDatastoreRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateFHIRDatastoreRequest.


        :param client_token: The client_token of this CreateFHIRDatastoreRequest.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def tags(self):
        """Gets the tags of this CreateFHIRDatastoreRequest.


        :return: The tags of this CreateFHIRDatastoreRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateFHIRDatastoreRequest.


        :param tags: The tags of this CreateFHIRDatastoreRequest.
        :type tags: List
        """

        self._tags = tags

    @property
    def identity_provider_configuration(self):
        """Gets the identity_provider_configuration of this CreateFHIRDatastoreRequest.


        :return: The identity_provider_configuration of this CreateFHIRDatastoreRequest.
        :rtype: CreateFHIRDatastoreRequestIdentityProviderConfiguration
        """
        return self._identity_provider_configuration

    @identity_provider_configuration.setter
    def identity_provider_configuration(self, identity_provider_configuration):
        """Sets the identity_provider_configuration of this CreateFHIRDatastoreRequest.


        :param identity_provider_configuration: The identity_provider_configuration of this CreateFHIRDatastoreRequest.
        :type identity_provider_configuration: CreateFHIRDatastoreRequestIdentityProviderConfiguration
        """

        self._identity_provider_configuration = identity_provider_configuration
