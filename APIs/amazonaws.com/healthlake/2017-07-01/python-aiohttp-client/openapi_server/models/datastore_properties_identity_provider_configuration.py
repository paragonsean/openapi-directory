# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authorization_strategy import AuthorizationStrategy
from openapi_server import util


class DatastorePropertiesIdentityProviderConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorization_strategy: AuthorizationStrategy=None, fine_grained_authorization_enabled: bool=None, metadata: str=None, idp_lambda_arn: str=None):
        """DatastorePropertiesIdentityProviderConfiguration - a model defined in OpenAPI

        :param authorization_strategy: The authorization_strategy of this DatastorePropertiesIdentityProviderConfiguration.
        :param fine_grained_authorization_enabled: The fine_grained_authorization_enabled of this DatastorePropertiesIdentityProviderConfiguration.
        :param metadata: The metadata of this DatastorePropertiesIdentityProviderConfiguration.
        :param idp_lambda_arn: The idp_lambda_arn of this DatastorePropertiesIdentityProviderConfiguration.
        """
        self.openapi_types = {
            'authorization_strategy': AuthorizationStrategy,
            'fine_grained_authorization_enabled': bool,
            'metadata': str,
            'idp_lambda_arn': str
        }

        self.attribute_map = {
            'authorization_strategy': 'AuthorizationStrategy',
            'fine_grained_authorization_enabled': 'FineGrainedAuthorizationEnabled',
            'metadata': 'Metadata',
            'idp_lambda_arn': 'IdpLambdaArn'
        }

        self._authorization_strategy = authorization_strategy
        self._fine_grained_authorization_enabled = fine_grained_authorization_enabled
        self._metadata = metadata
        self._idp_lambda_arn = idp_lambda_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatastorePropertiesIdentityProviderConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatastoreProperties_IdentityProviderConfiguration of this DatastorePropertiesIdentityProviderConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorization_strategy(self):
        """Gets the authorization_strategy of this DatastorePropertiesIdentityProviderConfiguration.


        :return: The authorization_strategy of this DatastorePropertiesIdentityProviderConfiguration.
        :rtype: AuthorizationStrategy
        """
        return self._authorization_strategy

    @authorization_strategy.setter
    def authorization_strategy(self, authorization_strategy):
        """Sets the authorization_strategy of this DatastorePropertiesIdentityProviderConfiguration.


        :param authorization_strategy: The authorization_strategy of this DatastorePropertiesIdentityProviderConfiguration.
        :type authorization_strategy: AuthorizationStrategy
        """
        if authorization_strategy is None:
            raise ValueError("Invalid value for `authorization_strategy`, must not be `None`")

        self._authorization_strategy = authorization_strategy

    @property
    def fine_grained_authorization_enabled(self):
        """Gets the fine_grained_authorization_enabled of this DatastorePropertiesIdentityProviderConfiguration.


        :return: The fine_grained_authorization_enabled of this DatastorePropertiesIdentityProviderConfiguration.
        :rtype: bool
        """
        return self._fine_grained_authorization_enabled

    @fine_grained_authorization_enabled.setter
    def fine_grained_authorization_enabled(self, fine_grained_authorization_enabled):
        """Sets the fine_grained_authorization_enabled of this DatastorePropertiesIdentityProviderConfiguration.


        :param fine_grained_authorization_enabled: The fine_grained_authorization_enabled of this DatastorePropertiesIdentityProviderConfiguration.
        :type fine_grained_authorization_enabled: bool
        """

        self._fine_grained_authorization_enabled = fine_grained_authorization_enabled

    @property
    def metadata(self):
        """Gets the metadata of this DatastorePropertiesIdentityProviderConfiguration.


        :return: The metadata of this DatastorePropertiesIdentityProviderConfiguration.
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this DatastorePropertiesIdentityProviderConfiguration.


        :param metadata: The metadata of this DatastorePropertiesIdentityProviderConfiguration.
        :type metadata: str
        """

        self._metadata = metadata

    @property
    def idp_lambda_arn(self):
        """Gets the idp_lambda_arn of this DatastorePropertiesIdentityProviderConfiguration.


        :return: The idp_lambda_arn of this DatastorePropertiesIdentityProviderConfiguration.
        :rtype: str
        """
        return self._idp_lambda_arn

    @idp_lambda_arn.setter
    def idp_lambda_arn(self, idp_lambda_arn):
        """Sets the idp_lambda_arn of this DatastorePropertiesIdentityProviderConfiguration.


        :param idp_lambda_arn: The idp_lambda_arn of this DatastorePropertiesIdentityProviderConfiguration.
        :type idp_lambda_arn: str
        """

        self._idp_lambda_arn = idp_lambda_arn
