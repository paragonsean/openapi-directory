/**
 * Amazon Security Lake
 * <p>Amazon Security Lake is a fully managed security data lake service. You can use Security Lake to automatically centralize security data from cloud, on-premises, and custom sources into a data lake that's stored in your Amazon Web Services account. Amazon Web Services Organizations is an account management service that lets you consolidate multiple Amazon Web Services accounts into an organization that you create and centrally manage. With Organizations, you can create member accounts and invite existing accounts to join your organization. Security Lake helps you analyze security data for a more complete understanding of your security posture across the entire organization. It can also help you improve the protection of your workloads, applications, and data.</p> <p>The data lake is backed by Amazon Simple Storage Service (Amazon S3) buckets, and you retain ownership over your data.</p> <p>Amazon Security Lake integrates with CloudTrail, a service that provides a record of actions taken by a user, role, or an Amazon Web Services service. In Security Lake, CloudTrail captures API calls for Security Lake as events. The calls captured include calls from the Security Lake console and code calls to the Security Lake API operations. If you create a trail, you can enable continuous delivery of CloudTrail events to an Amazon S3 bucket, including events for Security Lake. If you don't configure a trail, you can still view the most recent events in the CloudTrail console in Event history. Using the information collected by CloudTrail you can determine the request that was made to Security Lake, the IP address from which the request was made, who made the request, when it was made, and additional details. To learn more about Security Lake information in CloudTrail, see the <a href=\"https://docs.aws.amazon.com/security-lake/latest/userguide/securitylake-cloudtrail.html\">Amazon Security Lake User Guide</a>.</p> <p>Security Lake automates the collection of security-related log and event data from integrated Amazon Web Services and third-party services. It also helps you manage the lifecycle of data with customizable retention and replication settings. Security Lake converts ingested data into Apache Parquet format and a standard open-source schema called the Open Cybersecurity Schema Framework (OCSF).</p> <p>Other Amazon Web Services and third-party services can subscribe to the data that's stored in Security Lake for incident response and security data analytics.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDataLakeResource.h
 *
 * Provides details of Amazon Security Lake object.
 */

#ifndef OAIDataLakeResource_H
#define OAIDataLakeResource_H

#include <QJsonObject>

#include "OAIDataLakeConfiguration_encryptionConfiguration.h"
#include "OAIDataLakeConfiguration_lifecycleConfiguration.h"
#include "OAIDataLakeConfiguration_replicationConfiguration.h"
#include "OAIDataLakeResource_updateStatus.h"
#include "OAIDataLakeStatus.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDataLakeConfiguration_encryptionConfiguration;
class OAIDataLakeConfiguration_lifecycleConfiguration;
class OAIDataLakeConfiguration_replicationConfiguration;
class OAIDataLakeResource_updateStatus;

class OAIDataLakeResource : public OAIObject {
public:
    OAIDataLakeResource();
    OAIDataLakeResource(QString json);
    ~OAIDataLakeResource() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIDataLakeStatus getCreateStatus() const;
    void setCreateStatus(const OAIDataLakeStatus &create_status);
    bool is_create_status_Set() const;
    bool is_create_status_Valid() const;

    QString getDataLakeArn() const;
    void setDataLakeArn(const QString &data_lake_arn);
    bool is_data_lake_arn_Set() const;
    bool is_data_lake_arn_Valid() const;

    OAIDataLakeConfiguration_encryptionConfiguration getEncryptionConfiguration() const;
    void setEncryptionConfiguration(const OAIDataLakeConfiguration_encryptionConfiguration &encryption_configuration);
    bool is_encryption_configuration_Set() const;
    bool is_encryption_configuration_Valid() const;

    OAIDataLakeConfiguration_lifecycleConfiguration getLifecycleConfiguration() const;
    void setLifecycleConfiguration(const OAIDataLakeConfiguration_lifecycleConfiguration &lifecycle_configuration);
    bool is_lifecycle_configuration_Set() const;
    bool is_lifecycle_configuration_Valid() const;

    QString getRegion() const;
    void setRegion(const QString &region);
    bool is_region_Set() const;
    bool is_region_Valid() const;

    OAIDataLakeConfiguration_replicationConfiguration getReplicationConfiguration() const;
    void setReplicationConfiguration(const OAIDataLakeConfiguration_replicationConfiguration &replication_configuration);
    bool is_replication_configuration_Set() const;
    bool is_replication_configuration_Valid() const;

    QString getS3BucketArn() const;
    void setS3BucketArn(const QString &s3_bucket_arn);
    bool is_s3_bucket_arn_Set() const;
    bool is_s3_bucket_arn_Valid() const;

    OAIDataLakeResource_updateStatus getUpdateStatus() const;
    void setUpdateStatus(const OAIDataLakeResource_updateStatus &update_status);
    bool is_update_status_Set() const;
    bool is_update_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIDataLakeStatus m_create_status;
    bool m_create_status_isSet;
    bool m_create_status_isValid;

    QString m_data_lake_arn;
    bool m_data_lake_arn_isSet;
    bool m_data_lake_arn_isValid;

    OAIDataLakeConfiguration_encryptionConfiguration m_encryption_configuration;
    bool m_encryption_configuration_isSet;
    bool m_encryption_configuration_isValid;

    OAIDataLakeConfiguration_lifecycleConfiguration m_lifecycle_configuration;
    bool m_lifecycle_configuration_isSet;
    bool m_lifecycle_configuration_isValid;

    QString m_region;
    bool m_region_isSet;
    bool m_region_isValid;

    OAIDataLakeConfiguration_replicationConfiguration m_replication_configuration;
    bool m_replication_configuration_isSet;
    bool m_replication_configuration_isValid;

    QString m_s3_bucket_arn;
    bool m_s3_bucket_arn_isSet;
    bool m_s3_bucket_arn_isValid;

    OAIDataLakeResource_updateStatus m_update_status;
    bool m_update_status_isSet;
    bool m_update_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDataLakeResource)

#endif // OAIDataLakeResource_H
