/**
 * Amazon Security Lake
 * <p>Amazon Security Lake is a fully managed security data lake service. You can use Security Lake to automatically centralize security data from cloud, on-premises, and custom sources into a data lake that's stored in your Amazon Web Services account. Amazon Web Services Organizations is an account management service that lets you consolidate multiple Amazon Web Services accounts into an organization that you create and centrally manage. With Organizations, you can create member accounts and invite existing accounts to join your organization. Security Lake helps you analyze security data for a more complete understanding of your security posture across the entire organization. It can also help you improve the protection of your workloads, applications, and data.</p> <p>The data lake is backed by Amazon Simple Storage Service (Amazon S3) buckets, and you retain ownership over your data.</p> <p>Amazon Security Lake integrates with CloudTrail, a service that provides a record of actions taken by a user, role, or an Amazon Web Services service. In Security Lake, CloudTrail captures API calls for Security Lake as events. The calls captured include calls from the Security Lake console and code calls to the Security Lake API operations. If you create a trail, you can enable continuous delivery of CloudTrail events to an Amazon S3 bucket, including events for Security Lake. If you don't configure a trail, you can still view the most recent events in the CloudTrail console in Event history. Using the information collected by CloudTrail you can determine the request that was made to Security Lake, the IP address from which the request was made, who made the request, when it was made, and additional details. To learn more about Security Lake information in CloudTrail, see the <a href=\"https://docs.aws.amazon.com/security-lake/latest/userguide/securitylake-cloudtrail.html\">Amazon Security Lake User Guide</a>.</p> <p>Security Lake automates the collection of security-related log and event data from integrated Amazon Web Services and third-party services. It also helps you manage the lifecycle of data with customizable retention and replication settings. Security Lake converts ingested data into Apache Parquet format and a standard open-source schema called the Open Cybersecurity Schema Framework (OCSF).</p> <p>Other Amazon Web Services and third-party services can subscribe to the data that's stored in Security Lake for incident response and security data analytics.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateSubscriberResponse_subscriber.h
 *
 * 
 */

#ifndef OAICreateSubscriberResponse_subscriber_H
#define OAICreateSubscriberResponse_subscriber_H

#include <QJsonObject>

#include "OAICreateSubscriberRequest_subscriberIdentity.h"
#include "OAISubscriberStatus.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateSubscriberRequest_subscriberIdentity;

class OAICreateSubscriberResponse_subscriber : public OAIObject {
public:
    OAICreateSubscriberResponse_subscriber();
    OAICreateSubscriberResponse_subscriber(QString json);
    ~OAICreateSubscriberResponse_subscriber() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getAccessTypes() const;
    void setAccessTypes(const QList &access_types);
    bool is_access_types_Set() const;
    bool is_access_types_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getResourceShareArn() const;
    void setResourceShareArn(const QString &resource_share_arn);
    bool is_resource_share_arn_Set() const;
    bool is_resource_share_arn_Valid() const;

    QString getResourceShareName() const;
    void setResourceShareName(const QString &resource_share_name);
    bool is_resource_share_name_Set() const;
    bool is_resource_share_name_Valid() const;

    QString getRoleArn() const;
    void setRoleArn(const QString &role_arn);
    bool is_role_arn_Set() const;
    bool is_role_arn_Valid() const;

    QString getS3BucketArn() const;
    void setS3BucketArn(const QString &s3_bucket_arn);
    bool is_s3_bucket_arn_Set() const;
    bool is_s3_bucket_arn_Valid() const;

    QList getSources() const;
    void setSources(const QList &sources);
    bool is_sources_Set() const;
    bool is_sources_Valid() const;

    QString getSubscriberArn() const;
    void setSubscriberArn(const QString &subscriber_arn);
    bool is_subscriber_arn_Set() const;
    bool is_subscriber_arn_Valid() const;

    QString getSubscriberDescription() const;
    void setSubscriberDescription(const QString &subscriber_description);
    bool is_subscriber_description_Set() const;
    bool is_subscriber_description_Valid() const;

    QString getSubscriberEndpoint() const;
    void setSubscriberEndpoint(const QString &subscriber_endpoint);
    bool is_subscriber_endpoint_Set() const;
    bool is_subscriber_endpoint_Valid() const;

    QString getSubscriberId() const;
    void setSubscriberId(const QString &subscriber_id);
    bool is_subscriber_id_Set() const;
    bool is_subscriber_id_Valid() const;

    OAICreateSubscriberRequest_subscriberIdentity getSubscriberIdentity() const;
    void setSubscriberIdentity(const OAICreateSubscriberRequest_subscriberIdentity &subscriber_identity);
    bool is_subscriber_identity_Set() const;
    bool is_subscriber_identity_Valid() const;

    QString getSubscriberName() const;
    void setSubscriberName(const QString &subscriber_name);
    bool is_subscriber_name_Set() const;
    bool is_subscriber_name_Valid() const;

    OAISubscriberStatus getSubscriberStatus() const;
    void setSubscriberStatus(const OAISubscriberStatus &subscriber_status);
    bool is_subscriber_status_Set() const;
    bool is_subscriber_status_Valid() const;

    QDateTime getUpdatedAt() const;
    void setUpdatedAt(const QDateTime &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_access_types;
    bool m_access_types_isSet;
    bool m_access_types_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_resource_share_arn;
    bool m_resource_share_arn_isSet;
    bool m_resource_share_arn_isValid;

    QString m_resource_share_name;
    bool m_resource_share_name_isSet;
    bool m_resource_share_name_isValid;

    QString m_role_arn;
    bool m_role_arn_isSet;
    bool m_role_arn_isValid;

    QString m_s3_bucket_arn;
    bool m_s3_bucket_arn_isSet;
    bool m_s3_bucket_arn_isValid;

    QList m_sources;
    bool m_sources_isSet;
    bool m_sources_isValid;

    QString m_subscriber_arn;
    bool m_subscriber_arn_isSet;
    bool m_subscriber_arn_isValid;

    QString m_subscriber_description;
    bool m_subscriber_description_isSet;
    bool m_subscriber_description_isValid;

    QString m_subscriber_endpoint;
    bool m_subscriber_endpoint_isSet;
    bool m_subscriber_endpoint_isValid;

    QString m_subscriber_id;
    bool m_subscriber_id_isSet;
    bool m_subscriber_id_isValid;

    OAICreateSubscriberRequest_subscriberIdentity m_subscriber_identity;
    bool m_subscriber_identity_isSet;
    bool m_subscriber_identity_isValid;

    QString m_subscriber_name;
    bool m_subscriber_name_isSet;
    bool m_subscriber_name_isValid;

    OAISubscriberStatus m_subscriber_status;
    bool m_subscriber_status_isSet;
    bool m_subscriber_status_isValid;

    QDateTime m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateSubscriberResponse_subscriber)

#endif // OAICreateSubscriberResponse_subscriber_H
