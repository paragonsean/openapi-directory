/**
 * Amazon Security Lake
 * <p>Amazon Security Lake is a fully managed security data lake service. You can use Security Lake to automatically centralize security data from cloud, on-premises, and custom sources into a data lake that's stored in your Amazon Web Services account. Amazon Web Services Organizations is an account management service that lets you consolidate multiple Amazon Web Services accounts into an organization that you create and centrally manage. With Organizations, you can create member accounts and invite existing accounts to join your organization. Security Lake helps you analyze security data for a more complete understanding of your security posture across the entire organization. It can also help you improve the protection of your workloads, applications, and data.</p> <p>The data lake is backed by Amazon Simple Storage Service (Amazon S3) buckets, and you retain ownership over your data.</p> <p>Amazon Security Lake integrates with CloudTrail, a service that provides a record of actions taken by a user, role, or an Amazon Web Services service. In Security Lake, CloudTrail captures API calls for Security Lake as events. The calls captured include calls from the Security Lake console and code calls to the Security Lake API operations. If you create a trail, you can enable continuous delivery of CloudTrail events to an Amazon S3 bucket, including events for Security Lake. If you don't configure a trail, you can still view the most recent events in the CloudTrail console in Event history. Using the information collected by CloudTrail you can determine the request that was made to Security Lake, the IP address from which the request was made, who made the request, when it was made, and additional details. To learn more about Security Lake information in CloudTrail, see the <a href=\"https://docs.aws.amazon.com/security-lake/latest/userguide/securitylake-cloudtrail.html\">Amazon Security Lake User Guide</a>.</p> <p>Security Lake automates the collection of security-related log and event data from integrated Amazon Web Services and third-party services. It also helps you manage the lifecycle of data with customizable retention and replication settings. Security Lake converts ingested data into Apache Parquet format and a standard open-source schema called the Open Cybersecurity Schema Framework (OCSF).</p> <p>Other Amazon Web Services and third-party services can subscribe to the data that's stored in Security Lake for incident response and security data analytics.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonSecurityLake);
  }
}(this, function(expect, AmazonSecurityLake) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonSecurityLake.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('createAwsLogSource', function() {
      it('should call createAwsLogSource successfully', function(done) {
        //uncomment below and update the code to test createAwsLogSource
        //instance.createAwsLogSource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCustomLogSource', function() {
      it('should call createCustomLogSource successfully', function(done) {
        //uncomment below and update the code to test createCustomLogSource
        //instance.createCustomLogSource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createDataLake', function() {
      it('should call createDataLake successfully', function(done) {
        //uncomment below and update the code to test createDataLake
        //instance.createDataLake(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createDataLakeExceptionSubscription', function() {
      it('should call createDataLakeExceptionSubscription successfully', function(done) {
        //uncomment below and update the code to test createDataLakeExceptionSubscription
        //instance.createDataLakeExceptionSubscription(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createDataLakeOrganizationConfiguration', function() {
      it('should call createDataLakeOrganizationConfiguration successfully', function(done) {
        //uncomment below and update the code to test createDataLakeOrganizationConfiguration
        //instance.createDataLakeOrganizationConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSubscriber', function() {
      it('should call createSubscriber successfully', function(done) {
        //uncomment below and update the code to test createSubscriber
        //instance.createSubscriber(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSubscriberNotification', function() {
      it('should call createSubscriberNotification successfully', function(done) {
        //uncomment below and update the code to test createSubscriberNotification
        //instance.createSubscriberNotification(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAwsLogSource', function() {
      it('should call deleteAwsLogSource successfully', function(done) {
        //uncomment below and update the code to test deleteAwsLogSource
        //instance.deleteAwsLogSource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCustomLogSource', function() {
      it('should call deleteCustomLogSource successfully', function(done) {
        //uncomment below and update the code to test deleteCustomLogSource
        //instance.deleteCustomLogSource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDataLake', function() {
      it('should call deleteDataLake successfully', function(done) {
        //uncomment below and update the code to test deleteDataLake
        //instance.deleteDataLake(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDataLakeExceptionSubscription', function() {
      it('should call deleteDataLakeExceptionSubscription successfully', function(done) {
        //uncomment below and update the code to test deleteDataLakeExceptionSubscription
        //instance.deleteDataLakeExceptionSubscription(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDataLakeOrganizationConfiguration', function() {
      it('should call deleteDataLakeOrganizationConfiguration successfully', function(done) {
        //uncomment below and update the code to test deleteDataLakeOrganizationConfiguration
        //instance.deleteDataLakeOrganizationConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSubscriber', function() {
      it('should call deleteSubscriber successfully', function(done) {
        //uncomment below and update the code to test deleteSubscriber
        //instance.deleteSubscriber(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSubscriberNotification', function() {
      it('should call deleteSubscriberNotification successfully', function(done) {
        //uncomment below and update the code to test deleteSubscriberNotification
        //instance.deleteSubscriberNotification(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deregisterDataLakeDelegatedAdministrator', function() {
      it('should call deregisterDataLakeDelegatedAdministrator successfully', function(done) {
        //uncomment below and update the code to test deregisterDataLakeDelegatedAdministrator
        //instance.deregisterDataLakeDelegatedAdministrator(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDataLakeExceptionSubscription', function() {
      it('should call getDataLakeExceptionSubscription successfully', function(done) {
        //uncomment below and update the code to test getDataLakeExceptionSubscription
        //instance.getDataLakeExceptionSubscription(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDataLakeOrganizationConfiguration', function() {
      it('should call getDataLakeOrganizationConfiguration successfully', function(done) {
        //uncomment below and update the code to test getDataLakeOrganizationConfiguration
        //instance.getDataLakeOrganizationConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDataLakeSources', function() {
      it('should call getDataLakeSources successfully', function(done) {
        //uncomment below and update the code to test getDataLakeSources
        //instance.getDataLakeSources(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSubscriber', function() {
      it('should call getSubscriber successfully', function(done) {
        //uncomment below and update the code to test getSubscriber
        //instance.getSubscriber(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDataLakeExceptions', function() {
      it('should call listDataLakeExceptions successfully', function(done) {
        //uncomment below and update the code to test listDataLakeExceptions
        //instance.listDataLakeExceptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDataLakes', function() {
      it('should call listDataLakes successfully', function(done) {
        //uncomment below and update the code to test listDataLakes
        //instance.listDataLakes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listLogSources', function() {
      it('should call listLogSources successfully', function(done) {
        //uncomment below and update the code to test listLogSources
        //instance.listLogSources(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSubscribers', function() {
      it('should call listSubscribers successfully', function(done) {
        //uncomment below and update the code to test listSubscribers
        //instance.listSubscribers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('registerDataLakeDelegatedAdministrator', function() {
      it('should call registerDataLakeDelegatedAdministrator successfully', function(done) {
        //uncomment below and update the code to test registerDataLakeDelegatedAdministrator
        //instance.registerDataLakeDelegatedAdministrator(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDataLake', function() {
      it('should call updateDataLake successfully', function(done) {
        //uncomment below and update the code to test updateDataLake
        //instance.updateDataLake(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDataLakeExceptionSubscription', function() {
      it('should call updateDataLakeExceptionSubscription successfully', function(done) {
        //uncomment below and update the code to test updateDataLakeExceptionSubscription
        //instance.updateDataLakeExceptionSubscription(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSubscriber', function() {
      it('should call updateSubscriber successfully', function(done) {
        //uncomment below and update the code to test updateSubscriber
        //instance.updateSubscriber(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSubscriberNotification', function() {
      it('should call updateSubscriberNotification successfully', function(done) {
        //uncomment below and update the code to test updateSubscriberNotification
        //instance.updateSubscriberNotification(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
