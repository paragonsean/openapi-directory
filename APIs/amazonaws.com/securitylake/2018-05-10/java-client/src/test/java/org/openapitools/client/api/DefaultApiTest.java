/*
 * Amazon Security Lake
 * <p>Amazon Security Lake is a fully managed security data lake service. You can use Security Lake to automatically centralize security data from cloud, on-premises, and custom sources into a data lake that's stored in your Amazon Web Services account. Amazon Web Services Organizations is an account management service that lets you consolidate multiple Amazon Web Services accounts into an organization that you create and centrally manage. With Organizations, you can create member accounts and invite existing accounts to join your organization. Security Lake helps you analyze security data for a more complete understanding of your security posture across the entire organization. It can also help you improve the protection of your workloads, applications, and data.</p> <p>The data lake is backed by Amazon Simple Storage Service (Amazon S3) buckets, and you retain ownership over your data.</p> <p>Amazon Security Lake integrates with CloudTrail, a service that provides a record of actions taken by a user, role, or an Amazon Web Services service. In Security Lake, CloudTrail captures API calls for Security Lake as events. The calls captured include calls from the Security Lake console and code calls to the Security Lake API operations. If you create a trail, you can enable continuous delivery of CloudTrail events to an Amazon S3 bucket, including events for Security Lake. If you don't configure a trail, you can still view the most recent events in the CloudTrail console in Event history. Using the information collected by CloudTrail you can determine the request that was made to Security Lake, the IP address from which the request was made, who made the request, when it was made, and additional details. To learn more about Security Lake information in CloudTrail, see the <a href=\"https://docs.aws.amazon.com/security-lake/latest/userguide/securitylake-cloudtrail.html\">Amazon Security Lake User Guide</a>.</p> <p>Security Lake automates the collection of security-related log and event data from integrated Amazon Web Services and third-party services. It also helps you manage the lifecycle of data with customizable retention and replication settings. Security Lake converts ingested data into Apache Parquet format and a standard open-source schema called the Open Cybersecurity Schema Framework (OCSF).</p> <p>Other Amazon Web Services and third-party services can subscribe to the data that's stored in Security Lake for incident response and security data analytics.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateAwsLogSourceRequest;
import org.openapitools.client.model.CreateAwsLogSourceResponse;
import org.openapitools.client.model.CreateCustomLogSourceRequest;
import org.openapitools.client.model.CreateCustomLogSourceResponse;
import org.openapitools.client.model.CreateDataLakeExceptionSubscriptionRequest;
import org.openapitools.client.model.CreateDataLakeOrganizationConfigurationRequest;
import org.openapitools.client.model.CreateDataLakeRequest;
import org.openapitools.client.model.CreateDataLakeResponse;
import org.openapitools.client.model.CreateSubscriberNotificationResponse;
import org.openapitools.client.model.CreateSubscriberRequest;
import org.openapitools.client.model.CreateSubscriberResponse;
import org.openapitools.client.model.DeleteAwsLogSourceRequest;
import org.openapitools.client.model.DeleteAwsLogSourceResponse;
import org.openapitools.client.model.DeleteDataLakeOrganizationConfigurationRequest;
import org.openapitools.client.model.DeleteDataLakeRequest;
import org.openapitools.client.model.GetDataLakeExceptionSubscriptionResponse;
import org.openapitools.client.model.GetDataLakeOrganizationConfigurationResponse;
import org.openapitools.client.model.GetDataLakeSourcesRequest;
import org.openapitools.client.model.GetDataLakeSourcesResponse;
import org.openapitools.client.model.GetSubscriberResponse;
import org.openapitools.client.model.ListDataLakeExceptionsRequest;
import org.openapitools.client.model.ListDataLakeExceptionsResponse;
import org.openapitools.client.model.ListDataLakesResponse;
import org.openapitools.client.model.ListLogSourcesRequest;
import org.openapitools.client.model.ListLogSourcesResponse;
import org.openapitools.client.model.ListSubscribersResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.RegisterDataLakeDelegatedAdministratorRequest;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UpdateDataLakeExceptionSubscriptionRequest;
import org.openapitools.client.model.UpdateDataLakeRequest;
import org.openapitools.client.model.UpdateDataLakeResponse;
import org.openapitools.client.model.UpdateSubscriberNotificationRequest;
import org.openapitools.client.model.UpdateSubscriberNotificationResponse;
import org.openapitools.client.model.UpdateSubscriberRequest;
import org.openapitools.client.model.UpdateSubscriberResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt;Adds a natively supported Amazon Web Service as an Amazon Security Lake source. Enables source types for member accounts in required Amazon Web Services Regions, based on the parameters you specify. You can choose any source type in any Region for either accounts that are part of a trusted organization or standalone accounts. Once you add an Amazon Web Service as a source, Security Lake starts collecting logs and events from it.&lt;/p&gt; &lt;p&gt;You can use this API only to enable natively supported Amazon Web Services as a source. Use &lt;code&gt;CreateCustomLogSource&lt;/code&gt; to enable data collection from a custom source.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAwsLogSourceTest() throws ApiException {
        CreateAwsLogSourceRequest createAwsLogSourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAwsLogSourceResponse response = api.createAwsLogSource(createAwsLogSourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds a third-party custom source in Amazon Security Lake, from the Amazon Web Services Region where you want to create a custom source. Security Lake can collect logs and events from third-party custom sources. After creating the appropriate IAM role to invoke Glue crawler, use this API to add a custom source name in Security Lake. This operation creates a partition in the Amazon S3 bucket for Security Lake as the target location for log files from the custom source. In addition, this operation also creates an associated Glue table and an Glue crawler.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCustomLogSourceTest() throws ApiException {
        CreateCustomLogSourceRequest createCustomLogSourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateCustomLogSourceResponse response = api.createCustomLogSource(createCustomLogSourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Initializes an Amazon Security Lake instance with the provided (or default) configuration. You can enable Security Lake in Amazon Web Services Regions with customized settings before enabling log collection in Regions. To specify particular Regions, configure these Regions using the &lt;code&gt;configurations&lt;/code&gt; parameter. If you have already enabled Security Lake in a Region when you call this command, the command will update the Region if you provide new configuration parameters. If you have not already enabled Security Lake in the Region when you call this API, it will set up the data lake in the Region with the specified configurations.&lt;/p&gt; &lt;p&gt;When you enable Security Lake, it starts ingesting security data after the &lt;code&gt;CreateAwsLogSource&lt;/code&gt; call. This includes ingesting security data from sources, storing data, and making data accessible to subscribers. Security Lake also enables all the existing settings and resources that it stores or maintains for your Amazon Web Services account in the current Region, including security log and event data. For more information, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/security-lake/latest/userguide/what-is-security-lake.html\&quot;&gt;Amazon Security Lake User Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDataLakeTest() throws ApiException {
        CreateDataLakeRequest createDataLakeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDataLakeResponse response = api.createDataLake(createDataLakeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates the specified notification subscription in Amazon Security Lake for the organization you specify.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDataLakeExceptionSubscriptionTest() throws ApiException {
        CreateDataLakeExceptionSubscriptionRequest createDataLakeExceptionSubscriptionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createDataLakeExceptionSubscription(createDataLakeExceptionSubscriptionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Automatically enables Amazon Security Lake for new member accounts in your organization. Security Lake is not automatically enabled for any existing member accounts in your organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDataLakeOrganizationConfigurationTest() throws ApiException {
        CreateDataLakeOrganizationConfigurationRequest createDataLakeOrganizationConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createDataLakeOrganizationConfiguration(createDataLakeOrganizationConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a subscription permission for accounts that are already enabled in Amazon Security Lake. You can create a subscriber with access to data in the current Amazon Web Services Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSubscriberTest() throws ApiException {
        CreateSubscriberRequest createSubscriberRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateSubscriberResponse response = api.createSubscriber(createSubscriberRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Notifies the subscriber when new data is written to the data lake for the sources that the subscriber consumes in Security Lake. You can create only one subscriber notification per subscriber.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSubscriberNotificationTest() throws ApiException {
        String subscriberId = null;
        UpdateSubscriberNotificationRequest updateSubscriberNotificationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateSubscriberNotificationResponse response = api.createSubscriberNotification(subscriberId, updateSubscriberNotificationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Removes a natively supported Amazon Web Service as an Amazon Security Lake source. You can remove a source for one or more Regions. When you remove the source, Security Lake stops collecting data from that source in the specified Regions and accounts, and subscribers can no longer consume new data from the source. However, subscribers can still consume data that Security Lake collected from the source before removal.&lt;/p&gt; &lt;p&gt;You can choose any source type in any Amazon Web Services Region for either accounts that are part of a trusted organization or standalone accounts. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAwsLogSourceTest() throws ApiException {
        DeleteAwsLogSourceRequest deleteAwsLogSourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteAwsLogSourceResponse response = api.deleteAwsLogSource(deleteAwsLogSourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes a custom log source from Amazon Security Lake, to stop sending data from the custom source to Security Lake.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCustomLogSourceTest() throws ApiException {
        String sourceName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String sourceVersion = null;
        Object response = api.deleteCustomLogSource(sourceName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceVersion);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;When you disable Amazon Security Lake from your account, Security Lake is disabled in all Amazon Web Services Regions and it stops collecting data from your sources. Also, this API automatically takes steps to remove the account from Security Lake. However, Security Lake retains all of your existing settings and the resources that it created in your Amazon Web Services account in the current Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;DeleteDataLake&lt;/code&gt; operation does not delete the data that is stored in your Amazon S3 bucket, which is owned by your Amazon Web Services account. For more information, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/security-lake/latest/userguide/disable-security-lake.html\&quot;&gt;Amazon Security Lake User Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDataLakeTest() throws ApiException {
        DeleteDataLakeRequest deleteDataLakeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteDataLake(deleteDataLakeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified notification subscription in Amazon Security Lake for the organization you specify.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDataLakeExceptionSubscriptionTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteDataLakeExceptionSubscription(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Turns off automatic enablement of Amazon Security Lake for member accounts that are added to an organization in Organizations. Only the delegated Security Lake administrator for an organization can perform this operation. If the delegated Security Lake administrator performs this operation, new member accounts won&#39;t automatically contribute data to the data lake.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDataLakeOrganizationConfigurationTest() throws ApiException {
        DeleteDataLakeOrganizationConfigurationRequest deleteDataLakeOrganizationConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteDataLakeOrganizationConfiguration(deleteDataLakeOrganizationConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the subscription permission and all notification settings for accounts that are already enabled in Amazon Security Lake. When you run &lt;code&gt;DeleteSubscriber&lt;/code&gt;, the subscriber will no longer consume data from Security Lake and the subscriber is removed. This operation deletes the subscriber and removes access to data in the current Amazon Web Services Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSubscriberTest() throws ApiException {
        String subscriberId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteSubscriber(subscriberId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified notification subscription in Amazon Security Lake for the organization you specify.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSubscriberNotificationTest() throws ApiException {
        String subscriberId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteSubscriberNotification(subscriberId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the Amazon Security Lake delegated administrator account for the organization. This API can only be called by the organization management account. The organization management account cannot be the delegated administrator account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deregisterDataLakeDelegatedAdministratorTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deregisterDataLakeDelegatedAdministrator(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the details of exception notifications for the account in Amazon Security Lake.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataLakeExceptionSubscriptionTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDataLakeExceptionSubscriptionResponse response = api.getDataLakeExceptionSubscription(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the configuration that will be automatically set up for accounts added to the organization after the organization has onboarded to Amazon Security Lake. This API does not take input parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataLakeOrganizationConfigurationTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDataLakeOrganizationConfigurationResponse response = api.getDataLakeOrganizationConfiguration(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a snapshot of the current Region, including whether Amazon Security Lake is enabled for those accounts and which sources Security Lake is collecting data from.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataLakeSourcesTest() throws ApiException {
        GetDataLakeSourcesRequest getDataLakeSourcesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetDataLakeSourcesResponse response = api.getDataLakeSources(getDataLakeSourcesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves the subscription information for the specified subscription ID. You can get information about a specific subscriber.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubscriberTest() throws ApiException {
        String subscriberId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSubscriberResponse response = api.getSubscriber(subscriberId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists the Amazon Security Lake exceptions that you can use to find the source of problems and fix them.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDataLakeExceptionsTest() throws ApiException {
        ListDataLakeExceptionsRequest listDataLakeExceptionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListDataLakeExceptionsResponse response = api.listDataLakeExceptions(listDataLakeExceptionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves the Amazon Security Lake configuration object for the specified Amazon Web Services Regions. You can use this operation to determine whether Security Lake is enabled for a Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDataLakesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> regions = null;
        ListDataLakesResponse response = api.listDataLakes(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, regions);
        // TODO: test validations
    }

    /**
     * Retrieves the log sources in the current Amazon Web Services Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLogSourcesTest() throws ApiException {
        ListLogSourcesRequest listLogSourcesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListLogSourcesResponse response = api.listLogSources(listLogSourcesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * List all subscribers for the specific Amazon Security Lake account ID. You can retrieve a list of subscriptions associated with a specific organization or Amazon Web Services account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSubscribersTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListSubscribersResponse response = api.listSubscribers(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves the tags (keys and values) that are associated with an Amazon Security Lake resource: a subscriber, or the data lake configuration for your Amazon Web Services account in a particular Amazon Web Services Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Designates the Amazon Security Lake delegated administrator account for the organization. This API can only be called by the organization management account. The organization management account cannot be the delegated administrator account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerDataLakeDelegatedAdministratorTest() throws ApiException {
        RegisterDataLakeDelegatedAdministratorRequest registerDataLakeDelegatedAdministratorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.registerDataLakeDelegatedAdministrator(registerDataLakeDelegatedAdministratorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds or updates one or more tags that are associated with an Amazon Security Lake resource: a subscriber, or the data lake configuration for your Amazon Web Services account in a particular Amazon Web Services Region. A &lt;i&gt;tag&lt;/i&gt; is a label that you can define and associate with Amazon Web Services resources. Each tag consists of a required &lt;i&gt;tag key&lt;/i&gt; and an associated &lt;i&gt;tag value&lt;/i&gt;. A &lt;i&gt;tag key&lt;/i&gt; is a general label that acts as a category for a more specific tag value. A &lt;i&gt;tag value&lt;/i&gt; acts as a descriptor for a tag key. Tags can help you identify, categorize, and manage resources in different ways, such as by owner, environment, or other criteria. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/security-lake/latest/userguide/tagging-resources.html\&quot;&gt;Tagging Amazon Security Lake resources&lt;/a&gt; in the &lt;i&gt;Amazon Security Lake User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes one or more tags (keys and values) from an Amazon Security Lake resource: a subscriber, or the data lake configuration for your Amazon Web Services account in a particular Amazon Web Services Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Specifies where to store your security data and for how long. You can add a rollup Region to consolidate data from multiple Amazon Web Services Regions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDataLakeTest() throws ApiException {
        UpdateDataLakeRequest updateDataLakeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateDataLakeResponse response = api.updateDataLake(updateDataLakeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the specified notification subscription in Amazon Security Lake for the organization you specify.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDataLakeExceptionSubscriptionTest() throws ApiException {
        UpdateDataLakeExceptionSubscriptionRequest updateDataLakeExceptionSubscriptionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateDataLakeExceptionSubscription(updateDataLakeExceptionSubscriptionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing subscription for the given Amazon Security Lake account ID. You can update a subscriber by changing the sources that the subscriber consumes data from.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSubscriberTest() throws ApiException {
        String subscriberId = null;
        UpdateSubscriberRequest updateSubscriberRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateSubscriberResponse response = api.updateSubscriber(subscriberId, updateSubscriberRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing notification method for the subscription (SQS or HTTPs endpoint) or switches the notification subscription endpoint for a subscriber.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSubscriberNotificationTest() throws ApiException {
        String subscriberId = null;
        UpdateSubscriberNotificationRequest updateSubscriberNotificationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateSubscriberNotificationResponse response = api.updateSubscriberNotification(subscriberId, updateSubscriberNotificationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
