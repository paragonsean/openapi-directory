/*
 * Amazon Security Lake
 * <p>Amazon Security Lake is a fully managed security data lake service. You can use Security Lake to automatically centralize security data from cloud, on-premises, and custom sources into a data lake that's stored in your Amazon Web Services account. Amazon Web Services Organizations is an account management service that lets you consolidate multiple Amazon Web Services accounts into an organization that you create and centrally manage. With Organizations, you can create member accounts and invite existing accounts to join your organization. Security Lake helps you analyze security data for a more complete understanding of your security posture across the entire organization. It can also help you improve the protection of your workloads, applications, and data.</p> <p>The data lake is backed by Amazon Simple Storage Service (Amazon S3) buckets, and you retain ownership over your data.</p> <p>Amazon Security Lake integrates with CloudTrail, a service that provides a record of actions taken by a user, role, or an Amazon Web Services service. In Security Lake, CloudTrail captures API calls for Security Lake as events. The calls captured include calls from the Security Lake console and code calls to the Security Lake API operations. If you create a trail, you can enable continuous delivery of CloudTrail events to an Amazon S3 bucket, including events for Security Lake. If you don't configure a trail, you can still view the most recent events in the CloudTrail console in Event history. Using the information collected by CloudTrail you can determine the request that was made to Security Lake, the IP address from which the request was made, who made the request, when it was made, and additional details. To learn more about Security Lake information in CloudTrail, see the <a href=\"https://docs.aws.amazon.com/security-lake/latest/userguide/securitylake-cloudtrail.html\">Amazon Security Lake User Guide</a>.</p> <p>Security Lake automates the collection of security-related log and event data from integrated Amazon Web Services and third-party services. It also helps you manage the lifecycle of data with customizable retention and replication settings. Security Lake converts ingested data into Apache Parquet format and a standard open-source schema called the Open Cybersecurity Schema Framework (OCSF).</p> <p>Other Amazon Web Services and third-party services can subscribe to the data that's stored in Security Lake for incident response and security data analytics.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateSubscriberRequestSubscriberIdentity;
import org.openapitools.client.model.SubscriberStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetSubscriberResponseSubscriber
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:52.370107-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetSubscriberResponseSubscriber {
  public static final String SERIALIZED_NAME_ACCESS_TYPES = "accessTypes";
  @SerializedName(SERIALIZED_NAME_ACCESS_TYPES)
  private List accessTypes;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_RESOURCE_SHARE_ARN = "resourceShareArn";
  @SerializedName(SERIALIZED_NAME_RESOURCE_SHARE_ARN)
  private String resourceShareArn;

  public static final String SERIALIZED_NAME_RESOURCE_SHARE_NAME = "resourceShareName";
  @SerializedName(SERIALIZED_NAME_RESOURCE_SHARE_NAME)
  private String resourceShareName;

  public static final String SERIALIZED_NAME_ROLE_ARN = "roleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_S3_BUCKET_ARN = "s3BucketArn";
  @SerializedName(SERIALIZED_NAME_S3_BUCKET_ARN)
  private String s3BucketArn;

  public static final String SERIALIZED_NAME_SOURCES = "sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private List sources;

  public static final String SERIALIZED_NAME_SUBSCRIBER_ARN = "subscriberArn";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBER_ARN)
  private String subscriberArn;

  public static final String SERIALIZED_NAME_SUBSCRIBER_DESCRIPTION = "subscriberDescription";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBER_DESCRIPTION)
  private String subscriberDescription;

  public static final String SERIALIZED_NAME_SUBSCRIBER_ENDPOINT = "subscriberEndpoint";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBER_ENDPOINT)
  private String subscriberEndpoint;

  public static final String SERIALIZED_NAME_SUBSCRIBER_ID = "subscriberId";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBER_ID)
  private String subscriberId;

  public static final String SERIALIZED_NAME_SUBSCRIBER_IDENTITY = "subscriberIdentity";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBER_IDENTITY)
  private CreateSubscriberRequestSubscriberIdentity subscriberIdentity;

  public static final String SERIALIZED_NAME_SUBSCRIBER_NAME = "subscriberName";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBER_NAME)
  private String subscriberName;

  public static final String SERIALIZED_NAME_SUBSCRIBER_STATUS = "subscriberStatus";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBER_STATUS)
  private SubscriberStatus subscriberStatus;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public GetSubscriberResponseSubscriber() {
  }

  public GetSubscriberResponseSubscriber accessTypes(List accessTypes) {
    this.accessTypes = accessTypes;
    return this;
  }

  /**
   * Get accessTypes
   * @return accessTypes
   */
  @javax.annotation.Nullable
  public List getAccessTypes() {
    return accessTypes;
  }

  public void setAccessTypes(List accessTypes) {
    this.accessTypes = accessTypes;
  }


  public GetSubscriberResponseSubscriber createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public GetSubscriberResponseSubscriber resourceShareArn(String resourceShareArn) {
    this.resourceShareArn = resourceShareArn;
    return this;
  }

  /**
   * Get resourceShareArn
   * @return resourceShareArn
   */
  @javax.annotation.Nullable
  public String getResourceShareArn() {
    return resourceShareArn;
  }

  public void setResourceShareArn(String resourceShareArn) {
    this.resourceShareArn = resourceShareArn;
  }


  public GetSubscriberResponseSubscriber resourceShareName(String resourceShareName) {
    this.resourceShareName = resourceShareName;
    return this;
  }

  /**
   * Get resourceShareName
   * @return resourceShareName
   */
  @javax.annotation.Nullable
  public String getResourceShareName() {
    return resourceShareName;
  }

  public void setResourceShareName(String resourceShareName) {
    this.resourceShareName = resourceShareName;
  }


  public GetSubscriberResponseSubscriber roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * Get roleArn
   * @return roleArn
   */
  @javax.annotation.Nullable
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public GetSubscriberResponseSubscriber s3BucketArn(String s3BucketArn) {
    this.s3BucketArn = s3BucketArn;
    return this;
  }

  /**
   * Get s3BucketArn
   * @return s3BucketArn
   */
  @javax.annotation.Nullable
  public String getS3BucketArn() {
    return s3BucketArn;
  }

  public void setS3BucketArn(String s3BucketArn) {
    this.s3BucketArn = s3BucketArn;
  }


  public GetSubscriberResponseSubscriber sources(List sources) {
    this.sources = sources;
    return this;
  }

  /**
   * Get sources
   * @return sources
   */
  @javax.annotation.Nonnull
  public List getSources() {
    return sources;
  }

  public void setSources(List sources) {
    this.sources = sources;
  }


  public GetSubscriberResponseSubscriber subscriberArn(String subscriberArn) {
    this.subscriberArn = subscriberArn;
    return this;
  }

  /**
   * Get subscriberArn
   * @return subscriberArn
   */
  @javax.annotation.Nonnull
  public String getSubscriberArn() {
    return subscriberArn;
  }

  public void setSubscriberArn(String subscriberArn) {
    this.subscriberArn = subscriberArn;
  }


  public GetSubscriberResponseSubscriber subscriberDescription(String subscriberDescription) {
    this.subscriberDescription = subscriberDescription;
    return this;
  }

  /**
   * Get subscriberDescription
   * @return subscriberDescription
   */
  @javax.annotation.Nullable
  public String getSubscriberDescription() {
    return subscriberDescription;
  }

  public void setSubscriberDescription(String subscriberDescription) {
    this.subscriberDescription = subscriberDescription;
  }


  public GetSubscriberResponseSubscriber subscriberEndpoint(String subscriberEndpoint) {
    this.subscriberEndpoint = subscriberEndpoint;
    return this;
  }

  /**
   * Get subscriberEndpoint
   * @return subscriberEndpoint
   */
  @javax.annotation.Nullable
  public String getSubscriberEndpoint() {
    return subscriberEndpoint;
  }

  public void setSubscriberEndpoint(String subscriberEndpoint) {
    this.subscriberEndpoint = subscriberEndpoint;
  }


  public GetSubscriberResponseSubscriber subscriberId(String subscriberId) {
    this.subscriberId = subscriberId;
    return this;
  }

  /**
   * Get subscriberId
   * @return subscriberId
   */
  @javax.annotation.Nonnull
  public String getSubscriberId() {
    return subscriberId;
  }

  public void setSubscriberId(String subscriberId) {
    this.subscriberId = subscriberId;
  }


  public GetSubscriberResponseSubscriber subscriberIdentity(CreateSubscriberRequestSubscriberIdentity subscriberIdentity) {
    this.subscriberIdentity = subscriberIdentity;
    return this;
  }

  /**
   * Get subscriberIdentity
   * @return subscriberIdentity
   */
  @javax.annotation.Nonnull
  public CreateSubscriberRequestSubscriberIdentity getSubscriberIdentity() {
    return subscriberIdentity;
  }

  public void setSubscriberIdentity(CreateSubscriberRequestSubscriberIdentity subscriberIdentity) {
    this.subscriberIdentity = subscriberIdentity;
  }


  public GetSubscriberResponseSubscriber subscriberName(String subscriberName) {
    this.subscriberName = subscriberName;
    return this;
  }

  /**
   * Get subscriberName
   * @return subscriberName
   */
  @javax.annotation.Nonnull
  public String getSubscriberName() {
    return subscriberName;
  }

  public void setSubscriberName(String subscriberName) {
    this.subscriberName = subscriberName;
  }


  public GetSubscriberResponseSubscriber subscriberStatus(SubscriberStatus subscriberStatus) {
    this.subscriberStatus = subscriberStatus;
    return this;
  }

  /**
   * Get subscriberStatus
   * @return subscriberStatus
   */
  @javax.annotation.Nullable
  public SubscriberStatus getSubscriberStatus() {
    return subscriberStatus;
  }

  public void setSubscriberStatus(SubscriberStatus subscriberStatus) {
    this.subscriberStatus = subscriberStatus;
  }


  public GetSubscriberResponseSubscriber updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetSubscriberResponseSubscriber getSubscriberResponseSubscriber = (GetSubscriberResponseSubscriber) o;
    return Objects.equals(this.accessTypes, getSubscriberResponseSubscriber.accessTypes) &&
        Objects.equals(this.createdAt, getSubscriberResponseSubscriber.createdAt) &&
        Objects.equals(this.resourceShareArn, getSubscriberResponseSubscriber.resourceShareArn) &&
        Objects.equals(this.resourceShareName, getSubscriberResponseSubscriber.resourceShareName) &&
        Objects.equals(this.roleArn, getSubscriberResponseSubscriber.roleArn) &&
        Objects.equals(this.s3BucketArn, getSubscriberResponseSubscriber.s3BucketArn) &&
        Objects.equals(this.sources, getSubscriberResponseSubscriber.sources) &&
        Objects.equals(this.subscriberArn, getSubscriberResponseSubscriber.subscriberArn) &&
        Objects.equals(this.subscriberDescription, getSubscriberResponseSubscriber.subscriberDescription) &&
        Objects.equals(this.subscriberEndpoint, getSubscriberResponseSubscriber.subscriberEndpoint) &&
        Objects.equals(this.subscriberId, getSubscriberResponseSubscriber.subscriberId) &&
        Objects.equals(this.subscriberIdentity, getSubscriberResponseSubscriber.subscriberIdentity) &&
        Objects.equals(this.subscriberName, getSubscriberResponseSubscriber.subscriberName) &&
        Objects.equals(this.subscriberStatus, getSubscriberResponseSubscriber.subscriberStatus) &&
        Objects.equals(this.updatedAt, getSubscriberResponseSubscriber.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessTypes, createdAt, resourceShareArn, resourceShareName, roleArn, s3BucketArn, sources, subscriberArn, subscriberDescription, subscriberEndpoint, subscriberId, subscriberIdentity, subscriberName, subscriberStatus, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetSubscriberResponseSubscriber {\n");
    sb.append("    accessTypes: ").append(toIndentedString(accessTypes)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    resourceShareArn: ").append(toIndentedString(resourceShareArn)).append("\n");
    sb.append("    resourceShareName: ").append(toIndentedString(resourceShareName)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    s3BucketArn: ").append(toIndentedString(s3BucketArn)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    subscriberArn: ").append(toIndentedString(subscriberArn)).append("\n");
    sb.append("    subscriberDescription: ").append(toIndentedString(subscriberDescription)).append("\n");
    sb.append("    subscriberEndpoint: ").append(toIndentedString(subscriberEndpoint)).append("\n");
    sb.append("    subscriberId: ").append(toIndentedString(subscriberId)).append("\n");
    sb.append("    subscriberIdentity: ").append(toIndentedString(subscriberIdentity)).append("\n");
    sb.append("    subscriberName: ").append(toIndentedString(subscriberName)).append("\n");
    sb.append("    subscriberStatus: ").append(toIndentedString(subscriberStatus)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessTypes");
    openapiFields.add("createdAt");
    openapiFields.add("resourceShareArn");
    openapiFields.add("resourceShareName");
    openapiFields.add("roleArn");
    openapiFields.add("s3BucketArn");
    openapiFields.add("sources");
    openapiFields.add("subscriberArn");
    openapiFields.add("subscriberDescription");
    openapiFields.add("subscriberEndpoint");
    openapiFields.add("subscriberId");
    openapiFields.add("subscriberIdentity");
    openapiFields.add("subscriberName");
    openapiFields.add("subscriberStatus");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sources");
    openapiRequiredFields.add("subscriberArn");
    openapiRequiredFields.add("subscriberId");
    openapiRequiredFields.add("subscriberIdentity");
    openapiRequiredFields.add("subscriberName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetSubscriberResponseSubscriber
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetSubscriberResponseSubscriber.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetSubscriberResponseSubscriber is not found in the empty JSON string", GetSubscriberResponseSubscriber.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetSubscriberResponseSubscriber.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetSubscriberResponseSubscriber` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetSubscriberResponseSubscriber.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accessTypes`
      if (jsonObj.get("accessTypes") != null && !jsonObj.get("accessTypes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("accessTypes"));
      }
      // validate the optional field `createdAt`
      if (jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("createdAt"));
      }
      // validate the optional field `resourceShareArn`
      if (jsonObj.get("resourceShareArn") != null && !jsonObj.get("resourceShareArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("resourceShareArn"));
      }
      // validate the optional field `resourceShareName`
      if (jsonObj.get("resourceShareName") != null && !jsonObj.get("resourceShareName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("resourceShareName"));
      }
      // validate the optional field `roleArn`
      if (jsonObj.get("roleArn") != null && !jsonObj.get("roleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("roleArn"));
      }
      // validate the optional field `s3BucketArn`
      if (jsonObj.get("s3BucketArn") != null && !jsonObj.get("s3BucketArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("s3BucketArn"));
      }
      // validate the required field `sources`
      List.validateJsonElement(jsonObj.get("sources"));
      // validate the required field `subscriberArn`
      String.validateJsonElement(jsonObj.get("subscriberArn"));
      // validate the optional field `subscriberDescription`
      if (jsonObj.get("subscriberDescription") != null && !jsonObj.get("subscriberDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("subscriberDescription"));
      }
      // validate the optional field `subscriberEndpoint`
      if (jsonObj.get("subscriberEndpoint") != null && !jsonObj.get("subscriberEndpoint").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("subscriberEndpoint"));
      }
      // validate the required field `subscriberId`
      String.validateJsonElement(jsonObj.get("subscriberId"));
      // validate the required field `subscriberIdentity`
      CreateSubscriberRequestSubscriberIdentity.validateJsonElement(jsonObj.get("subscriberIdentity"));
      // validate the required field `subscriberName`
      String.validateJsonElement(jsonObj.get("subscriberName"));
      // validate the optional field `subscriberStatus`
      if (jsonObj.get("subscriberStatus") != null && !jsonObj.get("subscriberStatus").isJsonNull()) {
        SubscriberStatus.validateJsonElement(jsonObj.get("subscriberStatus"));
      }
      // validate the optional field `updatedAt`
      if (jsonObj.get("updatedAt") != null && !jsonObj.get("updatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("updatedAt"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetSubscriberResponseSubscriber.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetSubscriberResponseSubscriber' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetSubscriberResponseSubscriber> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetSubscriberResponseSubscriber.class));

       return (TypeAdapter<T>) new TypeAdapter<GetSubscriberResponseSubscriber>() {
           @Override
           public void write(JsonWriter out, GetSubscriberResponseSubscriber value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetSubscriberResponseSubscriber read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetSubscriberResponseSubscriber given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetSubscriberResponseSubscriber
   * @throws IOException if the JSON string is invalid with respect to GetSubscriberResponseSubscriber
   */
  public static GetSubscriberResponseSubscriber fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetSubscriberResponseSubscriber.class);
  }

  /**
   * Convert an instance of GetSubscriberResponseSubscriber to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

