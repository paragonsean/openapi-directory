/*
 * Amazon Security Lake
 * <p>Amazon Security Lake is a fully managed security data lake service. You can use Security Lake to automatically centralize security data from cloud, on-premises, and custom sources into a data lake that's stored in your Amazon Web Services account. Amazon Web Services Organizations is an account management service that lets you consolidate multiple Amazon Web Services accounts into an organization that you create and centrally manage. With Organizations, you can create member accounts and invite existing accounts to join your organization. Security Lake helps you analyze security data for a more complete understanding of your security posture across the entire organization. It can also help you improve the protection of your workloads, applications, and data.</p> <p>The data lake is backed by Amazon Simple Storage Service (Amazon S3) buckets, and you retain ownership over your data.</p> <p>Amazon Security Lake integrates with CloudTrail, a service that provides a record of actions taken by a user, role, or an Amazon Web Services service. In Security Lake, CloudTrail captures API calls for Security Lake as events. The calls captured include calls from the Security Lake console and code calls to the Security Lake API operations. If you create a trail, you can enable continuous delivery of CloudTrail events to an Amazon S3 bucket, including events for Security Lake. If you don't configure a trail, you can still view the most recent events in the CloudTrail console in Event history. Using the information collected by CloudTrail you can determine the request that was made to Security Lake, the IP address from which the request was made, who made the request, when it was made, and additional details. To learn more about Security Lake information in CloudTrail, see the <a href=\"https://docs.aws.amazon.com/security-lake/latest/userguide/securitylake-cloudtrail.html\">Amazon Security Lake User Guide</a>.</p> <p>Security Lake automates the collection of security-related log and event data from integrated Amazon Web Services and third-party services. It also helps you manage the lifecycle of data with customizable retention and replication settings. Security Lake converts ingested data into Apache Parquet format and a standard open-source schema called the Open Cybersecurity Schema Framework (OCSF).</p> <p>Other Amazon Web Services and third-party services can subscribe to the data that's stored in Security Lake for incident response and security data analytics.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateDataLakeExceptionSubscriptionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:52.370107-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateDataLakeExceptionSubscriptionRequest {
  public static final String SERIALIZED_NAME_EXCEPTION_TIME_TO_LIVE = "exceptionTimeToLive";
  @SerializedName(SERIALIZED_NAME_EXCEPTION_TIME_TO_LIVE)
  private Integer exceptionTimeToLive;

  public static final String SERIALIZED_NAME_NOTIFICATION_ENDPOINT = "notificationEndpoint";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_ENDPOINT)
  private String notificationEndpoint;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_PROTOCOL = "subscriptionProtocol";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_PROTOCOL)
  private String subscriptionProtocol;

  public UpdateDataLakeExceptionSubscriptionRequest() {
  }

  public UpdateDataLakeExceptionSubscriptionRequest exceptionTimeToLive(Integer exceptionTimeToLive) {
    this.exceptionTimeToLive = exceptionTimeToLive;
    return this;
  }

  /**
   * The time-to-live (TTL) for the exception message to remain.
   * minimum: 1
   * @return exceptionTimeToLive
   */
  @javax.annotation.Nullable
  public Integer getExceptionTimeToLive() {
    return exceptionTimeToLive;
  }

  public void setExceptionTimeToLive(Integer exceptionTimeToLive) {
    this.exceptionTimeToLive = exceptionTimeToLive;
  }


  public UpdateDataLakeExceptionSubscriptionRequest notificationEndpoint(String notificationEndpoint) {
    this.notificationEndpoint = notificationEndpoint;
    return this;
  }

  /**
   * The account that is subscribed to receive exception notifications.
   * @return notificationEndpoint
   */
  @javax.annotation.Nonnull
  public String getNotificationEndpoint() {
    return notificationEndpoint;
  }

  public void setNotificationEndpoint(String notificationEndpoint) {
    this.notificationEndpoint = notificationEndpoint;
  }


  public UpdateDataLakeExceptionSubscriptionRequest subscriptionProtocol(String subscriptionProtocol) {
    this.subscriptionProtocol = subscriptionProtocol;
    return this;
  }

  /**
   * The subscription protocol to which exception messages are posted.
   * @return subscriptionProtocol
   */
  @javax.annotation.Nonnull
  public String getSubscriptionProtocol() {
    return subscriptionProtocol;
  }

  public void setSubscriptionProtocol(String subscriptionProtocol) {
    this.subscriptionProtocol = subscriptionProtocol;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateDataLakeExceptionSubscriptionRequest updateDataLakeExceptionSubscriptionRequest = (UpdateDataLakeExceptionSubscriptionRequest) o;
    return Objects.equals(this.exceptionTimeToLive, updateDataLakeExceptionSubscriptionRequest.exceptionTimeToLive) &&
        Objects.equals(this.notificationEndpoint, updateDataLakeExceptionSubscriptionRequest.notificationEndpoint) &&
        Objects.equals(this.subscriptionProtocol, updateDataLakeExceptionSubscriptionRequest.subscriptionProtocol);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exceptionTimeToLive, notificationEndpoint, subscriptionProtocol);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateDataLakeExceptionSubscriptionRequest {\n");
    sb.append("    exceptionTimeToLive: ").append(toIndentedString(exceptionTimeToLive)).append("\n");
    sb.append("    notificationEndpoint: ").append(toIndentedString(notificationEndpoint)).append("\n");
    sb.append("    subscriptionProtocol: ").append(toIndentedString(subscriptionProtocol)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("exceptionTimeToLive");
    openapiFields.add("notificationEndpoint");
    openapiFields.add("subscriptionProtocol");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("notificationEndpoint");
    openapiRequiredFields.add("subscriptionProtocol");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateDataLakeExceptionSubscriptionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateDataLakeExceptionSubscriptionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateDataLakeExceptionSubscriptionRequest is not found in the empty JSON string", UpdateDataLakeExceptionSubscriptionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateDataLakeExceptionSubscriptionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateDataLakeExceptionSubscriptionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateDataLakeExceptionSubscriptionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("notificationEndpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationEndpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notificationEndpoint").toString()));
      }
      if (!jsonObj.get("subscriptionProtocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionProtocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionProtocol").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateDataLakeExceptionSubscriptionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateDataLakeExceptionSubscriptionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateDataLakeExceptionSubscriptionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateDataLakeExceptionSubscriptionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateDataLakeExceptionSubscriptionRequest>() {
           @Override
           public void write(JsonWriter out, UpdateDataLakeExceptionSubscriptionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateDataLakeExceptionSubscriptionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateDataLakeExceptionSubscriptionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateDataLakeExceptionSubscriptionRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateDataLakeExceptionSubscriptionRequest
   */
  public static UpdateDataLakeExceptionSubscriptionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateDataLakeExceptionSubscriptionRequest.class);
  }

  /**
   * Convert an instance of UpdateDataLakeExceptionSubscriptionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

