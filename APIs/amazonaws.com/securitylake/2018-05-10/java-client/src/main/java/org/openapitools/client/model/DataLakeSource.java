/*
 * Amazon Security Lake
 * <p>Amazon Security Lake is a fully managed security data lake service. You can use Security Lake to automatically centralize security data from cloud, on-premises, and custom sources into a data lake that's stored in your Amazon Web Services account. Amazon Web Services Organizations is an account management service that lets you consolidate multiple Amazon Web Services accounts into an organization that you create and centrally manage. With Organizations, you can create member accounts and invite existing accounts to join your organization. Security Lake helps you analyze security data for a more complete understanding of your security posture across the entire organization. It can also help you improve the protection of your workloads, applications, and data.</p> <p>The data lake is backed by Amazon Simple Storage Service (Amazon S3) buckets, and you retain ownership over your data.</p> <p>Amazon Security Lake integrates with CloudTrail, a service that provides a record of actions taken by a user, role, or an Amazon Web Services service. In Security Lake, CloudTrail captures API calls for Security Lake as events. The calls captured include calls from the Security Lake console and code calls to the Security Lake API operations. If you create a trail, you can enable continuous delivery of CloudTrail events to an Amazon S3 bucket, including events for Security Lake. If you don't configure a trail, you can still view the most recent events in the CloudTrail console in Event history. Using the information collected by CloudTrail you can determine the request that was made to Security Lake, the IP address from which the request was made, who made the request, when it was made, and additional details. To learn more about Security Lake information in CloudTrail, see the <a href=\"https://docs.aws.amazon.com/security-lake/latest/userguide/securitylake-cloudtrail.html\">Amazon Security Lake User Guide</a>.</p> <p>Security Lake automates the collection of security-related log and event data from integrated Amazon Web Services and third-party services. It also helps you manage the lifecycle of data with customizable retention and replication settings. Security Lake converts ingested data into Apache Parquet format and a standard open-source schema called the Open Cybersecurity Schema Framework (OCSF).</p> <p>Other Amazon Web Services and third-party services can subscribe to the data that's stored in Security Lake for incident response and security data analytics.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Amazon Security Lake collects logs and events from supported Amazon Web Services and custom sources. For the list of supported Amazon Web Services, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/security-lake/latest/userguide/internal-sources.html\&quot;&gt;Amazon Security Lake User Guide&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:52.370107-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataLakeSource {
  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private String account;

  public static final String SERIALIZED_NAME_EVENT_CLASSES = "eventClasses";
  @SerializedName(SERIALIZED_NAME_EVENT_CLASSES)
  private List eventClasses;

  public static final String SERIALIZED_NAME_SOURCE_NAME = "sourceName";
  @SerializedName(SERIALIZED_NAME_SOURCE_NAME)
  private String sourceName;

  public static final String SERIALIZED_NAME_SOURCE_STATUSES = "sourceStatuses";
  @SerializedName(SERIALIZED_NAME_SOURCE_STATUSES)
  private List sourceStatuses;

  public DataLakeSource() {
  }

  public DataLakeSource account(String account) {
    this.account = account;
    return this;
  }

  /**
   * Get account
   * @return account
   */
  @javax.annotation.Nullable
  public String getAccount() {
    return account;
  }

  public void setAccount(String account) {
    this.account = account;
  }


  public DataLakeSource eventClasses(List eventClasses) {
    this.eventClasses = eventClasses;
    return this;
  }

  /**
   * Get eventClasses
   * @return eventClasses
   */
  @javax.annotation.Nullable
  public List getEventClasses() {
    return eventClasses;
  }

  public void setEventClasses(List eventClasses) {
    this.eventClasses = eventClasses;
  }


  public DataLakeSource sourceName(String sourceName) {
    this.sourceName = sourceName;
    return this;
  }

  /**
   * Get sourceName
   * @return sourceName
   */
  @javax.annotation.Nullable
  public String getSourceName() {
    return sourceName;
  }

  public void setSourceName(String sourceName) {
    this.sourceName = sourceName;
  }


  public DataLakeSource sourceStatuses(List sourceStatuses) {
    this.sourceStatuses = sourceStatuses;
    return this;
  }

  /**
   * Get sourceStatuses
   * @return sourceStatuses
   */
  @javax.annotation.Nullable
  public List getSourceStatuses() {
    return sourceStatuses;
  }

  public void setSourceStatuses(List sourceStatuses) {
    this.sourceStatuses = sourceStatuses;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataLakeSource dataLakeSource = (DataLakeSource) o;
    return Objects.equals(this.account, dataLakeSource.account) &&
        Objects.equals(this.eventClasses, dataLakeSource.eventClasses) &&
        Objects.equals(this.sourceName, dataLakeSource.sourceName) &&
        Objects.equals(this.sourceStatuses, dataLakeSource.sourceStatuses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, eventClasses, sourceName, sourceStatuses);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataLakeSource {\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    eventClasses: ").append(toIndentedString(eventClasses)).append("\n");
    sb.append("    sourceName: ").append(toIndentedString(sourceName)).append("\n");
    sb.append("    sourceStatuses: ").append(toIndentedString(sourceStatuses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account");
    openapiFields.add("eventClasses");
    openapiFields.add("sourceName");
    openapiFields.add("sourceStatuses");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataLakeSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataLakeSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataLakeSource is not found in the empty JSON string", DataLakeSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataLakeSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataLakeSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `account`
      if (jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("account"));
      }
      // validate the optional field `eventClasses`
      if (jsonObj.get("eventClasses") != null && !jsonObj.get("eventClasses").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("eventClasses"));
      }
      // validate the optional field `sourceName`
      if (jsonObj.get("sourceName") != null && !jsonObj.get("sourceName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("sourceName"));
      }
      // validate the optional field `sourceStatuses`
      if (jsonObj.get("sourceStatuses") != null && !jsonObj.get("sourceStatuses").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("sourceStatuses"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataLakeSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataLakeSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataLakeSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataLakeSource.class));

       return (TypeAdapter<T>) new TypeAdapter<DataLakeSource>() {
           @Override
           public void write(JsonWriter out, DataLakeSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataLakeSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataLakeSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataLakeSource
   * @throws IOException if the JSON string is invalid with respect to DataLakeSource
   */
  public static DataLakeSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataLakeSource.class);
  }

  /**
   * Convert an instance of DataLakeSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

