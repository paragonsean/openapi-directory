/*
 * Amazon Security Lake
 * <p>Amazon Security Lake is a fully managed security data lake service. You can use Security Lake to automatically centralize security data from cloud, on-premises, and custom sources into a data lake that's stored in your Amazon Web Services account. Amazon Web Services Organizations is an account management service that lets you consolidate multiple Amazon Web Services accounts into an organization that you create and centrally manage. With Organizations, you can create member accounts and invite existing accounts to join your organization. Security Lake helps you analyze security data for a more complete understanding of your security posture across the entire organization. It can also help you improve the protection of your workloads, applications, and data.</p> <p>The data lake is backed by Amazon Simple Storage Service (Amazon S3) buckets, and you retain ownership over your data.</p> <p>Amazon Security Lake integrates with CloudTrail, a service that provides a record of actions taken by a user, role, or an Amazon Web Services service. In Security Lake, CloudTrail captures API calls for Security Lake as events. The calls captured include calls from the Security Lake console and code calls to the Security Lake API operations. If you create a trail, you can enable continuous delivery of CloudTrail events to an Amazon S3 bucket, including events for Security Lake. If you don't configure a trail, you can still view the most recent events in the CloudTrail console in Event history. Using the information collected by CloudTrail you can determine the request that was made to Security Lake, the IP address from which the request was made, who made the request, when it was made, and additional details. To learn more about Security Lake information in CloudTrail, see the <a href=\"https://docs.aws.amazon.com/security-lake/latest/userguide/securitylake-cloudtrail.html\">Amazon Security Lake User Guide</a>.</p> <p>Security Lake automates the collection of security-related log and event data from integrated Amazon Web Services and third-party services. It also helps you manage the lifecycle of data with customizable retention and replication settings. Security Lake converts ingested data into Apache Parquet format and a standard open-source schema called the Open Cybersecurity Schema Framework (OCSF).</p> <p>Other Amazon Web Services and third-party services can subscribe to the data that's stored in Security Lake for incident response and security data analytics.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AccessType;
import org.openapitools.client.model.CreateSubscriberRequestSubscriberIdentity;
import org.openapitools.client.model.LogSourceResource;
import org.openapitools.client.model.Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateSubscriberRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:52.370107-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateSubscriberRequest {
  public static final String SERIALIZED_NAME_ACCESS_TYPES = "accessTypes";
  @SerializedName(SERIALIZED_NAME_ACCESS_TYPES)
  private List<AccessType> accessTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCES = "sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private List<LogSourceResource> sources = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBSCRIBER_DESCRIPTION = "subscriberDescription";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBER_DESCRIPTION)
  private String subscriberDescription;

  public static final String SERIALIZED_NAME_SUBSCRIBER_IDENTITY = "subscriberIdentity";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBER_IDENTITY)
  private CreateSubscriberRequestSubscriberIdentity subscriberIdentity;

  public static final String SERIALIZED_NAME_SUBSCRIBER_NAME = "subscriberName";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBER_NAME)
  private String subscriberName;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags = new ArrayList<>();

  public CreateSubscriberRequest() {
  }

  public CreateSubscriberRequest accessTypes(List<AccessType> accessTypes) {
    this.accessTypes = accessTypes;
    return this;
  }

  public CreateSubscriberRequest addAccessTypesItem(AccessType accessTypesItem) {
    if (this.accessTypes == null) {
      this.accessTypes = new ArrayList<>();
    }
    this.accessTypes.add(accessTypesItem);
    return this;
  }

  /**
   * The Amazon S3 or Lake Formation access type.
   * @return accessTypes
   */
  @javax.annotation.Nullable
  public List<AccessType> getAccessTypes() {
    return accessTypes;
  }

  public void setAccessTypes(List<AccessType> accessTypes) {
    this.accessTypes = accessTypes;
  }


  public CreateSubscriberRequest sources(List<LogSourceResource> sources) {
    this.sources = sources;
    return this;
  }

  public CreateSubscriberRequest addSourcesItem(LogSourceResource sourcesItem) {
    if (this.sources == null) {
      this.sources = new ArrayList<>();
    }
    this.sources.add(sourcesItem);
    return this;
  }

  /**
   * The supported Amazon Web Services from which logs and events are collected. Security Lake supports log and event collection for natively supported Amazon Web Services.
   * @return sources
   */
  @javax.annotation.Nonnull
  public List<LogSourceResource> getSources() {
    return sources;
  }

  public void setSources(List<LogSourceResource> sources) {
    this.sources = sources;
  }


  public CreateSubscriberRequest subscriberDescription(String subscriberDescription) {
    this.subscriberDescription = subscriberDescription;
    return this;
  }

  /**
   * The description for your subscriber account in Security Lake.
   * @return subscriberDescription
   */
  @javax.annotation.Nullable
  public String getSubscriberDescription() {
    return subscriberDescription;
  }

  public void setSubscriberDescription(String subscriberDescription) {
    this.subscriberDescription = subscriberDescription;
  }


  public CreateSubscriberRequest subscriberIdentity(CreateSubscriberRequestSubscriberIdentity subscriberIdentity) {
    this.subscriberIdentity = subscriberIdentity;
    return this;
  }

  /**
   * Get subscriberIdentity
   * @return subscriberIdentity
   */
  @javax.annotation.Nonnull
  public CreateSubscriberRequestSubscriberIdentity getSubscriberIdentity() {
    return subscriberIdentity;
  }

  public void setSubscriberIdentity(CreateSubscriberRequestSubscriberIdentity subscriberIdentity) {
    this.subscriberIdentity = subscriberIdentity;
  }


  public CreateSubscriberRequest subscriberName(String subscriberName) {
    this.subscriberName = subscriberName;
    return this;
  }

  /**
   * The name of your Security Lake subscriber account.
   * @return subscriberName
   */
  @javax.annotation.Nonnull
  public String getSubscriberName() {
    return subscriberName;
  }

  public void setSubscriberName(String subscriberName) {
    this.subscriberName = subscriberName;
  }


  public CreateSubscriberRequest tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public CreateSubscriberRequest addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * An array of objects, one for each tag to associate with the subscriber. For each tag, you must specify both a tag key and a tag value. A tag value cannot be null, but it can be an empty string.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSubscriberRequest createSubscriberRequest = (CreateSubscriberRequest) o;
    return Objects.equals(this.accessTypes, createSubscriberRequest.accessTypes) &&
        Objects.equals(this.sources, createSubscriberRequest.sources) &&
        Objects.equals(this.subscriberDescription, createSubscriberRequest.subscriberDescription) &&
        Objects.equals(this.subscriberIdentity, createSubscriberRequest.subscriberIdentity) &&
        Objects.equals(this.subscriberName, createSubscriberRequest.subscriberName) &&
        Objects.equals(this.tags, createSubscriberRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessTypes, sources, subscriberDescription, subscriberIdentity, subscriberName, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSubscriberRequest {\n");
    sb.append("    accessTypes: ").append(toIndentedString(accessTypes)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    subscriberDescription: ").append(toIndentedString(subscriberDescription)).append("\n");
    sb.append("    subscriberIdentity: ").append(toIndentedString(subscriberIdentity)).append("\n");
    sb.append("    subscriberName: ").append(toIndentedString(subscriberName)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessTypes");
    openapiFields.add("sources");
    openapiFields.add("subscriberDescription");
    openapiFields.add("subscriberIdentity");
    openapiFields.add("subscriberName");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sources");
    openapiRequiredFields.add("subscriberIdentity");
    openapiRequiredFields.add("subscriberName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateSubscriberRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateSubscriberRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateSubscriberRequest is not found in the empty JSON string", CreateSubscriberRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateSubscriberRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateSubscriberRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateSubscriberRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("accessTypes") != null && !jsonObj.get("accessTypes").isJsonNull() && !jsonObj.get("accessTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessTypes` to be an array in the JSON string but got `%s`", jsonObj.get("accessTypes").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("sources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sources` to be an array in the JSON string but got `%s`", jsonObj.get("sources").toString()));
      }

      JsonArray jsonArraysources = jsonObj.getAsJsonArray("sources");
      // validate the required field `sources` (array)
      for (int i = 0; i < jsonArraysources.size(); i++) {
        LogSourceResource.validateJsonElement(jsonArraysources.get(i));
      };
      if ((jsonObj.get("subscriberDescription") != null && !jsonObj.get("subscriberDescription").isJsonNull()) && !jsonObj.get("subscriberDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriberDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriberDescription").toString()));
      }
      // validate the required field `subscriberIdentity`
      CreateSubscriberRequestSubscriberIdentity.validateJsonElement(jsonObj.get("subscriberIdentity"));
      if (!jsonObj.get("subscriberName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriberName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriberName").toString()));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateSubscriberRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateSubscriberRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateSubscriberRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateSubscriberRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateSubscriberRequest>() {
           @Override
           public void write(JsonWriter out, CreateSubscriberRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateSubscriberRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateSubscriberRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateSubscriberRequest
   * @throws IOException if the JSON string is invalid with respect to CreateSubscriberRequest
   */
  public static CreateSubscriberRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateSubscriberRequest.class);
  }

  /**
   * Convert an instance of CreateSubscriberRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

