# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataLakeException(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exception: str=None, region: str=None, remediation: str=None, timestamp: datetime=None):
        """DataLakeException - a model defined in OpenAPI

        :param exception: The exception of this DataLakeException.
        :param region: The region of this DataLakeException.
        :param remediation: The remediation of this DataLakeException.
        :param timestamp: The timestamp of this DataLakeException.
        """
        self.openapi_types = {
            'exception': str,
            'region': str,
            'remediation': str,
            'timestamp': datetime
        }

        self.attribute_map = {
            'exception': 'exception',
            'region': 'region',
            'remediation': 'remediation',
            'timestamp': 'timestamp'
        }

        self._exception = exception
        self._region = region
        self._remediation = remediation
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataLakeException':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataLakeException of this DataLakeException.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exception(self):
        """Gets the exception of this DataLakeException.


        :return: The exception of this DataLakeException.
        :rtype: str
        """
        return self._exception

    @exception.setter
    def exception(self, exception):
        """Sets the exception of this DataLakeException.


        :param exception: The exception of this DataLakeException.
        :type exception: str
        """

        self._exception = exception

    @property
    def region(self):
        """Gets the region of this DataLakeException.


        :return: The region of this DataLakeException.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this DataLakeException.


        :param region: The region of this DataLakeException.
        :type region: str
        """

        self._region = region

    @property
    def remediation(self):
        """Gets the remediation of this DataLakeException.


        :return: The remediation of this DataLakeException.
        :rtype: str
        """
        return self._remediation

    @remediation.setter
    def remediation(self, remediation):
        """Sets the remediation of this DataLakeException.


        :param remediation: The remediation of this DataLakeException.
        :type remediation: str
        """

        self._remediation = remediation

    @property
    def timestamp(self):
        """Gets the timestamp of this DataLakeException.


        :return: The timestamp of this DataLakeException.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this DataLakeException.


        :param timestamp: The timestamp of this DataLakeException.
        :type timestamp: datetime
        """

        self._timestamp = timestamp
