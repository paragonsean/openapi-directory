# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_lake_configuration import DataLakeConfiguration
from openapi_server.models.tag import Tag
import re
from openapi_server import util


class CreateDataLakeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configurations: List[DataLakeConfiguration]=None, meta_store_manager_role_arn: str=None, tags: List[Tag]=None):
        """CreateDataLakeRequest - a model defined in OpenAPI

        :param configurations: The configurations of this CreateDataLakeRequest.
        :param meta_store_manager_role_arn: The meta_store_manager_role_arn of this CreateDataLakeRequest.
        :param tags: The tags of this CreateDataLakeRequest.
        """
        self.openapi_types = {
            'configurations': List[DataLakeConfiguration],
            'meta_store_manager_role_arn': str,
            'tags': List[Tag]
        }

        self.attribute_map = {
            'configurations': 'configurations',
            'meta_store_manager_role_arn': 'metaStoreManagerRoleArn',
            'tags': 'tags'
        }

        self._configurations = configurations
        self._meta_store_manager_role_arn = meta_store_manager_role_arn
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDataLakeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDataLake_request of this CreateDataLakeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configurations(self):
        """Gets the configurations of this CreateDataLakeRequest.

        Specify the Region or Regions that will contribute data to the rollup region.

        :return: The configurations of this CreateDataLakeRequest.
        :rtype: List[DataLakeConfiguration]
        """
        return self._configurations

    @configurations.setter
    def configurations(self, configurations):
        """Sets the configurations of this CreateDataLakeRequest.

        Specify the Region or Regions that will contribute data to the rollup region.

        :param configurations: The configurations of this CreateDataLakeRequest.
        :type configurations: List[DataLakeConfiguration]
        """
        if configurations is None:
            raise ValueError("Invalid value for `configurations`, must not be `None`")

        self._configurations = configurations

    @property
    def meta_store_manager_role_arn(self):
        """Gets the meta_store_manager_role_arn of this CreateDataLakeRequest.

        The Amazon Resource Name (ARN) used to create and update the Glue table. This table contains partitions generated by the ingestion and normalization of Amazon Web Services log sources and custom sources.

        :return: The meta_store_manager_role_arn of this CreateDataLakeRequest.
        :rtype: str
        """
        return self._meta_store_manager_role_arn

    @meta_store_manager_role_arn.setter
    def meta_store_manager_role_arn(self, meta_store_manager_role_arn):
        """Sets the meta_store_manager_role_arn of this CreateDataLakeRequest.

        The Amazon Resource Name (ARN) used to create and update the Glue table. This table contains partitions generated by the ingestion and normalization of Amazon Web Services log sources and custom sources.

        :param meta_store_manager_role_arn: The meta_store_manager_role_arn of this CreateDataLakeRequest.
        :type meta_store_manager_role_arn: str
        """
        if meta_store_manager_role_arn is None:
            raise ValueError("Invalid value for `meta_store_manager_role_arn`, must not be `None`")
        if meta_store_manager_role_arn is not None and not re.search(r'^arn:.*$', meta_store_manager_role_arn):
            raise ValueError("Invalid value for `meta_store_manager_role_arn`, must be a follow pattern or equal to `/^arn:.*$/`")

        self._meta_store_manager_role_arn = meta_store_manager_role_arn

    @property
    def tags(self):
        """Gets the tags of this CreateDataLakeRequest.

        An array of objects, one for each tag to associate with the data lake configuration. For each tag, you must specify both a tag key and a tag value. A tag value cannot be null, but it can be an empty string.

        :return: The tags of this CreateDataLakeRequest.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateDataLakeRequest.

        An array of objects, one for each tag to associate with the data lake configuration. For each tag, you must specify both a tag key and a tag value. A tag value cannot be null, but it can be an empty string.

        :param tags: The tags of this CreateDataLakeRequest.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
