# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_subscriber_request_subscriber_identity import CreateSubscriberRequestSubscriberIdentity
from openapi_server.models.log_source_resource import LogSourceResource
import re
from openapi_server import util


class UpdateSubscriberRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sources: List[LogSourceResource]=None, subscriber_description: str=None, subscriber_identity: CreateSubscriberRequestSubscriberIdentity=None, subscriber_name: str=None):
        """UpdateSubscriberRequest - a model defined in OpenAPI

        :param sources: The sources of this UpdateSubscriberRequest.
        :param subscriber_description: The subscriber_description of this UpdateSubscriberRequest.
        :param subscriber_identity: The subscriber_identity of this UpdateSubscriberRequest.
        :param subscriber_name: The subscriber_name of this UpdateSubscriberRequest.
        """
        self.openapi_types = {
            'sources': List[LogSourceResource],
            'subscriber_description': str,
            'subscriber_identity': CreateSubscriberRequestSubscriberIdentity,
            'subscriber_name': str
        }

        self.attribute_map = {
            'sources': 'sources',
            'subscriber_description': 'subscriberDescription',
            'subscriber_identity': 'subscriberIdentity',
            'subscriber_name': 'subscriberName'
        }

        self._sources = sources
        self._subscriber_description = subscriber_description
        self._subscriber_identity = subscriber_identity
        self._subscriber_name = subscriber_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateSubscriberRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateSubscriber_request of this UpdateSubscriberRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sources(self):
        """Gets the sources of this UpdateSubscriberRequest.

        The supported Amazon Web Services from which logs and events are collected. For the list of supported Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/security-lake/latest/userguide/internal-sources.html\">Amazon Security Lake User Guide</a>.

        :return: The sources of this UpdateSubscriberRequest.
        :rtype: List[LogSourceResource]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this UpdateSubscriberRequest.

        The supported Amazon Web Services from which logs and events are collected. For the list of supported Amazon Web Services, see the <a href=\"https://docs.aws.amazon.com/security-lake/latest/userguide/internal-sources.html\">Amazon Security Lake User Guide</a>.

        :param sources: The sources of this UpdateSubscriberRequest.
        :type sources: List[LogSourceResource]
        """

        self._sources = sources

    @property
    def subscriber_description(self):
        """Gets the subscriber_description of this UpdateSubscriberRequest.

        The description of the Security Lake account subscriber.

        :return: The subscriber_description of this UpdateSubscriberRequest.
        :rtype: str
        """
        return self._subscriber_description

    @subscriber_description.setter
    def subscriber_description(self, subscriber_description):
        """Sets the subscriber_description of this UpdateSubscriberRequest.

        The description of the Security Lake account subscriber.

        :param subscriber_description: The subscriber_description of this UpdateSubscriberRequest.
        :type subscriber_description: str
        """
        if subscriber_description is not None and not re.search(r'^[\\\w\s\-_:\/,.@=+]*$', subscriber_description):
            raise ValueError("Invalid value for `subscriber_description`, must be a follow pattern or equal to `/^[\\\w\s\-_:\/,.@=+]*$/`")

        self._subscriber_description = subscriber_description

    @property
    def subscriber_identity(self):
        """Gets the subscriber_identity of this UpdateSubscriberRequest.


        :return: The subscriber_identity of this UpdateSubscriberRequest.
        :rtype: CreateSubscriberRequestSubscriberIdentity
        """
        return self._subscriber_identity

    @subscriber_identity.setter
    def subscriber_identity(self, subscriber_identity):
        """Sets the subscriber_identity of this UpdateSubscriberRequest.


        :param subscriber_identity: The subscriber_identity of this UpdateSubscriberRequest.
        :type subscriber_identity: CreateSubscriberRequestSubscriberIdentity
        """

        self._subscriber_identity = subscriber_identity

    @property
    def subscriber_name(self):
        """Gets the subscriber_name of this UpdateSubscriberRequest.

        The name of the Security Lake account subscriber.

        :return: The subscriber_name of this UpdateSubscriberRequest.
        :rtype: str
        """
        return self._subscriber_name

    @subscriber_name.setter
    def subscriber_name(self, subscriber_name):
        """Sets the subscriber_name of this UpdateSubscriberRequest.

        The name of the Security Lake account subscriber.

        :param subscriber_name: The subscriber_name of this UpdateSubscriberRequest.
        :type subscriber_name: str
        """
        if subscriber_name is not None and len(subscriber_name) > 64:
            raise ValueError("Invalid value for `subscriber_name`, length must be less than or equal to `64`")
        if subscriber_name is not None and len(subscriber_name) < 0:
            raise ValueError("Invalid value for `subscriber_name`, length must be greater than or equal to `0`")
        if subscriber_name is not None and not re.search(r'^[\\\w\-_:\/.@=+]*$', subscriber_name):
            raise ValueError("Invalid value for `subscriber_name`, must be a follow pattern or equal to `/^[\\\w\-_:\/.@=+]*$/`")

        self._subscriber_name = subscriber_name
