# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_custom_log_source_request_configuration import CreateCustomLogSourceRequestConfiguration
import re
from openapi_server import util


class CreateCustomLogSourceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration: CreateCustomLogSourceRequestConfiguration=None, event_classes: List[str]=None, source_name: str=None, source_version: str=None):
        """CreateCustomLogSourceRequest - a model defined in OpenAPI

        :param configuration: The configuration of this CreateCustomLogSourceRequest.
        :param event_classes: The event_classes of this CreateCustomLogSourceRequest.
        :param source_name: The source_name of this CreateCustomLogSourceRequest.
        :param source_version: The source_version of this CreateCustomLogSourceRequest.
        """
        self.openapi_types = {
            'configuration': CreateCustomLogSourceRequestConfiguration,
            'event_classes': List[str],
            'source_name': str,
            'source_version': str
        }

        self.attribute_map = {
            'configuration': 'configuration',
            'event_classes': 'eventClasses',
            'source_name': 'sourceName',
            'source_version': 'sourceVersion'
        }

        self._configuration = configuration
        self._event_classes = event_classes
        self._source_name = source_name
        self._source_version = source_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCustomLogSourceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCustomLogSource_request of this CreateCustomLogSourceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration(self):
        """Gets the configuration of this CreateCustomLogSourceRequest.


        :return: The configuration of this CreateCustomLogSourceRequest.
        :rtype: CreateCustomLogSourceRequestConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this CreateCustomLogSourceRequest.


        :param configuration: The configuration of this CreateCustomLogSourceRequest.
        :type configuration: CreateCustomLogSourceRequestConfiguration
        """

        self._configuration = configuration

    @property
    def event_classes(self):
        """Gets the event_classes of this CreateCustomLogSourceRequest.

        <p>The Open Cybersecurity Schema Framework (OCSF) event classes which describes the type of data that the custom source will send to Security Lake. The supported event classes are:</p> <ul> <li> <p> <code>ACCESS_ACTIVITY</code> </p> </li> <li> <p> <code>FILE_ACTIVITY</code> </p> </li> <li> <p> <code>KERNEL_ACTIVITY</code> </p> </li> <li> <p> <code>KERNEL_EXTENSION</code> </p> </li> <li> <p> <code>MEMORY_ACTIVITY</code> </p> </li> <li> <p> <code>MODULE_ACTIVITY</code> </p> </li> <li> <p> <code>PROCESS_ACTIVITY</code> </p> </li> <li> <p> <code>REGISTRY_KEY_ACTIVITY</code> </p> </li> <li> <p> <code>REGISTRY_VALUE_ACTIVITY</code> </p> </li> <li> <p> <code>RESOURCE_ACTIVITY</code> </p> </li> <li> <p> <code>SCHEDULED_JOB_ACTIVITY</code> </p> </li> <li> <p> <code>SECURITY_FINDING</code> </p> </li> <li> <p> <code>ACCOUNT_CHANGE</code> </p> </li> <li> <p> <code>AUTHENTICATION</code> </p> </li> <li> <p> <code>AUTHORIZATION</code> </p> </li> <li> <p> <code>ENTITY_MANAGEMENT_AUDIT</code> </p> </li> <li> <p> <code>DHCP_ACTIVITY</code> </p> </li> <li> <p> <code>NETWORK_ACTIVITY</code> </p> </li> <li> <p> <code>DNS_ACTIVITY</code> </p> </li> <li> <p> <code>FTP_ACTIVITY</code> </p> </li> <li> <p> <code>HTTP_ACTIVITY</code> </p> </li> <li> <p> <code>RDP_ACTIVITY</code> </p> </li> <li> <p> <code>SMB_ACTIVITY</code> </p> </li> <li> <p> <code>SSH_ACTIVITY</code> </p> </li> <li> <p> <code>CONFIG_STATE</code> </p> </li> <li> <p> <code>INVENTORY_INFO</code> </p> </li> <li> <p> <code>EMAIL_ACTIVITY</code> </p> </li> <li> <p> <code>API_ACTIVITY</code> </p> </li> <li> <p> <code>CLOUD_API</code> </p> </li> </ul>

        :return: The event_classes of this CreateCustomLogSourceRequest.
        :rtype: List[str]
        """
        return self._event_classes

    @event_classes.setter
    def event_classes(self, event_classes):
        """Sets the event_classes of this CreateCustomLogSourceRequest.

        <p>The Open Cybersecurity Schema Framework (OCSF) event classes which describes the type of data that the custom source will send to Security Lake. The supported event classes are:</p> <ul> <li> <p> <code>ACCESS_ACTIVITY</code> </p> </li> <li> <p> <code>FILE_ACTIVITY</code> </p> </li> <li> <p> <code>KERNEL_ACTIVITY</code> </p> </li> <li> <p> <code>KERNEL_EXTENSION</code> </p> </li> <li> <p> <code>MEMORY_ACTIVITY</code> </p> </li> <li> <p> <code>MODULE_ACTIVITY</code> </p> </li> <li> <p> <code>PROCESS_ACTIVITY</code> </p> </li> <li> <p> <code>REGISTRY_KEY_ACTIVITY</code> </p> </li> <li> <p> <code>REGISTRY_VALUE_ACTIVITY</code> </p> </li> <li> <p> <code>RESOURCE_ACTIVITY</code> </p> </li> <li> <p> <code>SCHEDULED_JOB_ACTIVITY</code> </p> </li> <li> <p> <code>SECURITY_FINDING</code> </p> </li> <li> <p> <code>ACCOUNT_CHANGE</code> </p> </li> <li> <p> <code>AUTHENTICATION</code> </p> </li> <li> <p> <code>AUTHORIZATION</code> </p> </li> <li> <p> <code>ENTITY_MANAGEMENT_AUDIT</code> </p> </li> <li> <p> <code>DHCP_ACTIVITY</code> </p> </li> <li> <p> <code>NETWORK_ACTIVITY</code> </p> </li> <li> <p> <code>DNS_ACTIVITY</code> </p> </li> <li> <p> <code>FTP_ACTIVITY</code> </p> </li> <li> <p> <code>HTTP_ACTIVITY</code> </p> </li> <li> <p> <code>RDP_ACTIVITY</code> </p> </li> <li> <p> <code>SMB_ACTIVITY</code> </p> </li> <li> <p> <code>SSH_ACTIVITY</code> </p> </li> <li> <p> <code>CONFIG_STATE</code> </p> </li> <li> <p> <code>INVENTORY_INFO</code> </p> </li> <li> <p> <code>EMAIL_ACTIVITY</code> </p> </li> <li> <p> <code>API_ACTIVITY</code> </p> </li> <li> <p> <code>CLOUD_API</code> </p> </li> </ul>

        :param event_classes: The event_classes of this CreateCustomLogSourceRequest.
        :type event_classes: List[str]
        """

        self._event_classes = event_classes

    @property
    def source_name(self):
        """Gets the source_name of this CreateCustomLogSourceRequest.

        Specify the name for a third-party custom source. This must be a Regionally unique value.

        :return: The source_name of this CreateCustomLogSourceRequest.
        :rtype: str
        """
        return self._source_name

    @source_name.setter
    def source_name(self, source_name):
        """Sets the source_name of this CreateCustomLogSourceRequest.

        Specify the name for a third-party custom source. This must be a Regionally unique value.

        :param source_name: The source_name of this CreateCustomLogSourceRequest.
        :type source_name: str
        """
        if source_name is None:
            raise ValueError("Invalid value for `source_name`, must not be `None`")
        if source_name is not None and len(source_name) > 64:
            raise ValueError("Invalid value for `source_name`, length must be less than or equal to `64`")
        if source_name is not None and len(source_name) < 1:
            raise ValueError("Invalid value for `source_name`, length must be greater than or equal to `1`")
        if source_name is not None and not re.search(r'^[\\\w\-_:\/.]*$', source_name):
            raise ValueError("Invalid value for `source_name`, must be a follow pattern or equal to `/^[\\\w\-_:\/.]*$/`")

        self._source_name = source_name

    @property
    def source_version(self):
        """Gets the source_version of this CreateCustomLogSourceRequest.

        Specify the source version for the third-party custom source, to limit log collection to a specific version of custom data source.

        :return: The source_version of this CreateCustomLogSourceRequest.
        :rtype: str
        """
        return self._source_version

    @source_version.setter
    def source_version(self, source_version):
        """Sets the source_version of this CreateCustomLogSourceRequest.

        Specify the source version for the third-party custom source, to limit log collection to a specific version of custom data source.

        :param source_version: The source_version of this CreateCustomLogSourceRequest.
        :type source_version: str
        """
        if source_version is not None and len(source_version) > 32:
            raise ValueError("Invalid value for `source_version`, length must be less than or equal to `32`")
        if source_version is not None and len(source_version) < 1:
            raise ValueError("Invalid value for `source_version`, length must be greater than or equal to `1`")
        if source_version is not None and not re.search(r'^[A-Za-z0-9\-\.\_]*$', source_version):
            raise ValueError("Invalid value for `source_version`, must be a follow pattern or equal to `/^[A-Za-z0-9\-\.\_]*$/`")

        self._source_version = source_version
