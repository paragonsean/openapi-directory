# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_custom_log_source_request_configuration_crawler_configuration import CreateCustomLogSourceRequestConfigurationCrawlerConfiguration
from openapi_server.models.create_custom_log_source_request_configuration_provider_identity import CreateCustomLogSourceRequestConfigurationProviderIdentity
from openapi_server import util


class CreateCustomLogSourceRequestConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, crawler_configuration: CreateCustomLogSourceRequestConfigurationCrawlerConfiguration=None, provider_identity: CreateCustomLogSourceRequestConfigurationProviderIdentity=None):
        """CreateCustomLogSourceRequestConfiguration - a model defined in OpenAPI

        :param crawler_configuration: The crawler_configuration of this CreateCustomLogSourceRequestConfiguration.
        :param provider_identity: The provider_identity of this CreateCustomLogSourceRequestConfiguration.
        """
        self.openapi_types = {
            'crawler_configuration': CreateCustomLogSourceRequestConfigurationCrawlerConfiguration,
            'provider_identity': CreateCustomLogSourceRequestConfigurationProviderIdentity
        }

        self.attribute_map = {
            'crawler_configuration': 'crawlerConfiguration',
            'provider_identity': 'providerIdentity'
        }

        self._crawler_configuration = crawler_configuration
        self._provider_identity = provider_identity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCustomLogSourceRequestConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCustomLogSourceRequest_configuration of this CreateCustomLogSourceRequestConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def crawler_configuration(self):
        """Gets the crawler_configuration of this CreateCustomLogSourceRequestConfiguration.


        :return: The crawler_configuration of this CreateCustomLogSourceRequestConfiguration.
        :rtype: CreateCustomLogSourceRequestConfigurationCrawlerConfiguration
        """
        return self._crawler_configuration

    @crawler_configuration.setter
    def crawler_configuration(self, crawler_configuration):
        """Sets the crawler_configuration of this CreateCustomLogSourceRequestConfiguration.


        :param crawler_configuration: The crawler_configuration of this CreateCustomLogSourceRequestConfiguration.
        :type crawler_configuration: CreateCustomLogSourceRequestConfigurationCrawlerConfiguration
        """
        if crawler_configuration is None:
            raise ValueError("Invalid value for `crawler_configuration`, must not be `None`")

        self._crawler_configuration = crawler_configuration

    @property
    def provider_identity(self):
        """Gets the provider_identity of this CreateCustomLogSourceRequestConfiguration.


        :return: The provider_identity of this CreateCustomLogSourceRequestConfiguration.
        :rtype: CreateCustomLogSourceRequestConfigurationProviderIdentity
        """
        return self._provider_identity

    @provider_identity.setter
    def provider_identity(self, provider_identity):
        """Sets the provider_identity of this CreateCustomLogSourceRequestConfiguration.


        :param provider_identity: The provider_identity of this CreateCustomLogSourceRequestConfiguration.
        :type provider_identity: CreateCustomLogSourceRequestConfigurationProviderIdentity
        """
        if provider_identity is None:
            raise ValueError("Invalid value for `provider_identity`, must not be `None`")

        self._provider_identity = provider_identity
