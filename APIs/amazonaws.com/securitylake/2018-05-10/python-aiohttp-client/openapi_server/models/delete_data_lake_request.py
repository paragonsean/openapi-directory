# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeleteDataLakeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, regions: List[str]=None):
        """DeleteDataLakeRequest - a model defined in OpenAPI

        :param regions: The regions of this DeleteDataLakeRequest.
        """
        self.openapi_types = {
            'regions': List[str]
        }

        self.attribute_map = {
            'regions': 'regions'
        }

        self._regions = regions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteDataLakeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteDataLake_request of this DeleteDataLakeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def regions(self):
        """Gets the regions of this DeleteDataLakeRequest.

        The list of Regions where Security Lake is enabled.

        :return: The regions of this DeleteDataLakeRequest.
        :rtype: List[str]
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this DeleteDataLakeRequest.

        The list of Regions where Security Lake is enabled.

        :param regions: The regions of this DeleteDataLakeRequest.
        :type regions: List[str]
        """
        if regions is None:
            raise ValueError("Invalid value for `regions`, must not be `None`")

        self._regions = regions
