# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_lake_configuration_encryption_configuration import DataLakeConfigurationEncryptionConfiguration
from openapi_server.models.data_lake_configuration_lifecycle_configuration import DataLakeConfigurationLifecycleConfiguration
from openapi_server.models.data_lake_configuration_replication_configuration import DataLakeConfigurationReplicationConfiguration
from openapi_server import util


class DataLakeConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encryption_configuration: DataLakeConfigurationEncryptionConfiguration=None, lifecycle_configuration: DataLakeConfigurationLifecycleConfiguration=None, region: str=None, replication_configuration: DataLakeConfigurationReplicationConfiguration=None):
        """DataLakeConfiguration - a model defined in OpenAPI

        :param encryption_configuration: The encryption_configuration of this DataLakeConfiguration.
        :param lifecycle_configuration: The lifecycle_configuration of this DataLakeConfiguration.
        :param region: The region of this DataLakeConfiguration.
        :param replication_configuration: The replication_configuration of this DataLakeConfiguration.
        """
        self.openapi_types = {
            'encryption_configuration': DataLakeConfigurationEncryptionConfiguration,
            'lifecycle_configuration': DataLakeConfigurationLifecycleConfiguration,
            'region': str,
            'replication_configuration': DataLakeConfigurationReplicationConfiguration
        }

        self.attribute_map = {
            'encryption_configuration': 'encryptionConfiguration',
            'lifecycle_configuration': 'lifecycleConfiguration',
            'region': 'region',
            'replication_configuration': 'replicationConfiguration'
        }

        self._encryption_configuration = encryption_configuration
        self._lifecycle_configuration = lifecycle_configuration
        self._region = region
        self._replication_configuration = replication_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataLakeConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataLakeConfiguration of this DataLakeConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encryption_configuration(self):
        """Gets the encryption_configuration of this DataLakeConfiguration.


        :return: The encryption_configuration of this DataLakeConfiguration.
        :rtype: DataLakeConfigurationEncryptionConfiguration
        """
        return self._encryption_configuration

    @encryption_configuration.setter
    def encryption_configuration(self, encryption_configuration):
        """Sets the encryption_configuration of this DataLakeConfiguration.


        :param encryption_configuration: The encryption_configuration of this DataLakeConfiguration.
        :type encryption_configuration: DataLakeConfigurationEncryptionConfiguration
        """

        self._encryption_configuration = encryption_configuration

    @property
    def lifecycle_configuration(self):
        """Gets the lifecycle_configuration of this DataLakeConfiguration.


        :return: The lifecycle_configuration of this DataLakeConfiguration.
        :rtype: DataLakeConfigurationLifecycleConfiguration
        """
        return self._lifecycle_configuration

    @lifecycle_configuration.setter
    def lifecycle_configuration(self, lifecycle_configuration):
        """Sets the lifecycle_configuration of this DataLakeConfiguration.


        :param lifecycle_configuration: The lifecycle_configuration of this DataLakeConfiguration.
        :type lifecycle_configuration: DataLakeConfigurationLifecycleConfiguration
        """

        self._lifecycle_configuration = lifecycle_configuration

    @property
    def region(self):
        """Gets the region of this DataLakeConfiguration.


        :return: The region of this DataLakeConfiguration.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this DataLakeConfiguration.


        :param region: The region of this DataLakeConfiguration.
        :type region: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")

        self._region = region

    @property
    def replication_configuration(self):
        """Gets the replication_configuration of this DataLakeConfiguration.


        :return: The replication_configuration of this DataLakeConfiguration.
        :rtype: DataLakeConfigurationReplicationConfiguration
        """
        return self._replication_configuration

    @replication_configuration.setter
    def replication_configuration(self, replication_configuration):
        """Sets the replication_configuration of this DataLakeConfiguration.


        :param replication_configuration: The replication_configuration of this DataLakeConfiguration.
        :type replication_configuration: DataLakeConfigurationReplicationConfiguration
        """

        self._replication_configuration = replication_configuration
