# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateCustomLogSourceRequestConfigurationProviderIdentity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, external_id: str=None, principal: str=None):
        """CreateCustomLogSourceRequestConfigurationProviderIdentity - a model defined in OpenAPI

        :param external_id: The external_id of this CreateCustomLogSourceRequestConfigurationProviderIdentity.
        :param principal: The principal of this CreateCustomLogSourceRequestConfigurationProviderIdentity.
        """
        self.openapi_types = {
            'external_id': str,
            'principal': str
        }

        self.attribute_map = {
            'external_id': 'externalId',
            'principal': 'principal'
        }

        self._external_id = external_id
        self._principal = principal

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCustomLogSourceRequestConfigurationProviderIdentity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCustomLogSource_request_configuration_providerIdentity of this CreateCustomLogSourceRequestConfigurationProviderIdentity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def external_id(self):
        """Gets the external_id of this CreateCustomLogSourceRequestConfigurationProviderIdentity.


        :return: The external_id of this CreateCustomLogSourceRequestConfigurationProviderIdentity.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this CreateCustomLogSourceRequestConfigurationProviderIdentity.


        :param external_id: The external_id of this CreateCustomLogSourceRequestConfigurationProviderIdentity.
        :type external_id: str
        """
        if external_id is None:
            raise ValueError("Invalid value for `external_id`, must not be `None`")

        self._external_id = external_id

    @property
    def principal(self):
        """Gets the principal of this CreateCustomLogSourceRequestConfigurationProviderIdentity.


        :return: The principal of this CreateCustomLogSourceRequestConfigurationProviderIdentity.
        :rtype: str
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this CreateCustomLogSourceRequestConfigurationProviderIdentity.


        :param principal: The principal of this CreateCustomLogSourceRequestConfigurationProviderIdentity.
        :type principal: str
        """
        if principal is None:
            raise ValueError("Invalid value for `principal`, must not be `None`")

        self._principal = principal
