# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class GetDataLakeSourcesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accounts: List[str]=None, max_results: int=None, next_token: str=None):
        """GetDataLakeSourcesRequest - a model defined in OpenAPI

        :param accounts: The accounts of this GetDataLakeSourcesRequest.
        :param max_results: The max_results of this GetDataLakeSourcesRequest.
        :param next_token: The next_token of this GetDataLakeSourcesRequest.
        """
        self.openapi_types = {
            'accounts': List[str],
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'accounts': 'accounts',
            'max_results': 'maxResults',
            'next_token': 'nextToken'
        }

        self._accounts = accounts
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetDataLakeSourcesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetDataLakeSources_request of this GetDataLakeSourcesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accounts(self):
        """Gets the accounts of this GetDataLakeSourcesRequest.

        The Amazon Web Services account ID for which a static snapshot of the current Amazon Web Services Region, including enabled accounts and log sources, is retrieved.

        :return: The accounts of this GetDataLakeSourcesRequest.
        :rtype: List[str]
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this GetDataLakeSourcesRequest.

        The Amazon Web Services account ID for which a static snapshot of the current Amazon Web Services Region, including enabled accounts and log sources, is retrieved.

        :param accounts: The accounts of this GetDataLakeSourcesRequest.
        :type accounts: List[str]
        """

        self._accounts = accounts

    @property
    def max_results(self):
        """Gets the max_results of this GetDataLakeSourcesRequest.

        The maximum limit of accounts for which the static snapshot of the current Region, including enabled accounts and log sources, is retrieved.

        :return: The max_results of this GetDataLakeSourcesRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this GetDataLakeSourcesRequest.

        The maximum limit of accounts for which the static snapshot of the current Region, including enabled accounts and log sources, is retrieved.

        :param max_results: The max_results of this GetDataLakeSourcesRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 100:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `100`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this GetDataLakeSourcesRequest.

        <p>Lists if there are more results available. The value of nextToken is a unique pagination token for each page. Repeat the call using the returned token to retrieve the next page. Keep all other arguments unchanged.</p> <p>Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.</p>

        :return: The next_token of this GetDataLakeSourcesRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this GetDataLakeSourcesRequest.

        <p>Lists if there are more results available. The value of nextToken is a unique pagination token for each page. Repeat the call using the returned token to retrieve the next page. Keep all other arguments unchanged.</p> <p>Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.</p>

        :param next_token: The next_token of this GetDataLakeSourcesRequest.
        :type next_token: str
        """
        if next_token is not None and not re.search(r'^[\\\w\-_:\/.@=+]*$', next_token):
            raise ValueError("Invalid value for `next_token`, must be a follow pattern or equal to `/^[\\\w\-_:\/.@=+]*$/`")

        self._next_token = next_token
