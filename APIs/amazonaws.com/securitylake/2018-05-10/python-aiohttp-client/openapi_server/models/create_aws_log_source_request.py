# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aws_log_source_configuration import AwsLogSourceConfiguration
from openapi_server import util


class CreateAwsLogSourceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sources: List[AwsLogSourceConfiguration]=None):
        """CreateAwsLogSourceRequest - a model defined in OpenAPI

        :param sources: The sources of this CreateAwsLogSourceRequest.
        """
        self.openapi_types = {
            'sources': List[AwsLogSourceConfiguration]
        }

        self.attribute_map = {
            'sources': 'sources'
        }

        self._sources = sources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAwsLogSourceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAwsLogSource_request of this CreateAwsLogSourceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sources(self):
        """Gets the sources of this CreateAwsLogSourceRequest.

        Specify the natively-supported Amazon Web Services service to add as a source in Security Lake.

        :return: The sources of this CreateAwsLogSourceRequest.
        :rtype: List[AwsLogSourceConfiguration]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this CreateAwsLogSourceRequest.

        Specify the natively-supported Amazon Web Services service to add as a source in Security Lake.

        :param sources: The sources of this CreateAwsLogSourceRequest.
        :type sources: List[AwsLogSourceConfiguration]
        """
        if sources is None:
            raise ValueError("Invalid value for `sources`, must not be `None`")
        if sources is not None and len(sources) > 50:
            raise ValueError("Invalid value for `sources`, number of items must be less than or equal to `50`")
        if sources is not None and len(sources) < 0:
            raise ValueError("Invalid value for `sources`, number of items must be greater than or equal to `0`")

        self._sources = sources
