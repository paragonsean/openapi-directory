# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.access_type import AccessType
from openapi_server.models.create_subscriber_request_subscriber_identity import CreateSubscriberRequestSubscriberIdentity
from openapi_server.models.log_source_resource import LogSourceResource
from openapi_server.models.tag import Tag
import re
from openapi_server import util


class CreateSubscriberRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_types: List[AccessType]=None, sources: List[LogSourceResource]=None, subscriber_description: str=None, subscriber_identity: CreateSubscriberRequestSubscriberIdentity=None, subscriber_name: str=None, tags: List[Tag]=None):
        """CreateSubscriberRequest - a model defined in OpenAPI

        :param access_types: The access_types of this CreateSubscriberRequest.
        :param sources: The sources of this CreateSubscriberRequest.
        :param subscriber_description: The subscriber_description of this CreateSubscriberRequest.
        :param subscriber_identity: The subscriber_identity of this CreateSubscriberRequest.
        :param subscriber_name: The subscriber_name of this CreateSubscriberRequest.
        :param tags: The tags of this CreateSubscriberRequest.
        """
        self.openapi_types = {
            'access_types': List[AccessType],
            'sources': List[LogSourceResource],
            'subscriber_description': str,
            'subscriber_identity': CreateSubscriberRequestSubscriberIdentity,
            'subscriber_name': str,
            'tags': List[Tag]
        }

        self.attribute_map = {
            'access_types': 'accessTypes',
            'sources': 'sources',
            'subscriber_description': 'subscriberDescription',
            'subscriber_identity': 'subscriberIdentity',
            'subscriber_name': 'subscriberName',
            'tags': 'tags'
        }

        self._access_types = access_types
        self._sources = sources
        self._subscriber_description = subscriber_description
        self._subscriber_identity = subscriber_identity
        self._subscriber_name = subscriber_name
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSubscriberRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSubscriber_request of this CreateSubscriberRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_types(self):
        """Gets the access_types of this CreateSubscriberRequest.

        The Amazon S3 or Lake Formation access type.

        :return: The access_types of this CreateSubscriberRequest.
        :rtype: List[AccessType]
        """
        return self._access_types

    @access_types.setter
    def access_types(self, access_types):
        """Sets the access_types of this CreateSubscriberRequest.

        The Amazon S3 or Lake Formation access type.

        :param access_types: The access_types of this CreateSubscriberRequest.
        :type access_types: List[AccessType]
        """

        self._access_types = access_types

    @property
    def sources(self):
        """Gets the sources of this CreateSubscriberRequest.

        The supported Amazon Web Services from which logs and events are collected. Security Lake supports log and event collection for natively supported Amazon Web Services.

        :return: The sources of this CreateSubscriberRequest.
        :rtype: List[LogSourceResource]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this CreateSubscriberRequest.

        The supported Amazon Web Services from which logs and events are collected. Security Lake supports log and event collection for natively supported Amazon Web Services.

        :param sources: The sources of this CreateSubscriberRequest.
        :type sources: List[LogSourceResource]
        """
        if sources is None:
            raise ValueError("Invalid value for `sources`, must not be `None`")

        self._sources = sources

    @property
    def subscriber_description(self):
        """Gets the subscriber_description of this CreateSubscriberRequest.

        The description for your subscriber account in Security Lake.

        :return: The subscriber_description of this CreateSubscriberRequest.
        :rtype: str
        """
        return self._subscriber_description

    @subscriber_description.setter
    def subscriber_description(self, subscriber_description):
        """Sets the subscriber_description of this CreateSubscriberRequest.

        The description for your subscriber account in Security Lake.

        :param subscriber_description: The subscriber_description of this CreateSubscriberRequest.
        :type subscriber_description: str
        """
        if subscriber_description is not None and not re.search(r'^[\\\w\s\-_:\/,.@=+]*$', subscriber_description):
            raise ValueError("Invalid value for `subscriber_description`, must be a follow pattern or equal to `/^[\\\w\s\-_:\/,.@=+]*$/`")

        self._subscriber_description = subscriber_description

    @property
    def subscriber_identity(self):
        """Gets the subscriber_identity of this CreateSubscriberRequest.


        :return: The subscriber_identity of this CreateSubscriberRequest.
        :rtype: CreateSubscriberRequestSubscriberIdentity
        """
        return self._subscriber_identity

    @subscriber_identity.setter
    def subscriber_identity(self, subscriber_identity):
        """Sets the subscriber_identity of this CreateSubscriberRequest.


        :param subscriber_identity: The subscriber_identity of this CreateSubscriberRequest.
        :type subscriber_identity: CreateSubscriberRequestSubscriberIdentity
        """
        if subscriber_identity is None:
            raise ValueError("Invalid value for `subscriber_identity`, must not be `None`")

        self._subscriber_identity = subscriber_identity

    @property
    def subscriber_name(self):
        """Gets the subscriber_name of this CreateSubscriberRequest.

        The name of your Security Lake subscriber account.

        :return: The subscriber_name of this CreateSubscriberRequest.
        :rtype: str
        """
        return self._subscriber_name

    @subscriber_name.setter
    def subscriber_name(self, subscriber_name):
        """Sets the subscriber_name of this CreateSubscriberRequest.

        The name of your Security Lake subscriber account.

        :param subscriber_name: The subscriber_name of this CreateSubscriberRequest.
        :type subscriber_name: str
        """
        if subscriber_name is None:
            raise ValueError("Invalid value for `subscriber_name`, must not be `None`")
        if subscriber_name is not None and len(subscriber_name) > 64:
            raise ValueError("Invalid value for `subscriber_name`, length must be less than or equal to `64`")
        if subscriber_name is not None and len(subscriber_name) < 0:
            raise ValueError("Invalid value for `subscriber_name`, length must be greater than or equal to `0`")

        self._subscriber_name = subscriber_name

    @property
    def tags(self):
        """Gets the tags of this CreateSubscriberRequest.

        An array of objects, one for each tag to associate with the subscriber. For each tag, you must specify both a tag key and a tag value. A tag value cannot be null, but it can be an empty string.

        :return: The tags of this CreateSubscriberRequest.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateSubscriberRequest.

        An array of objects, one for each tag to associate with the subscriber. For each tag, you must specify both a tag key and a tag value. A tag value cannot be null, but it can be an empty string.

        :param tags: The tags of this CreateSubscriberRequest.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
