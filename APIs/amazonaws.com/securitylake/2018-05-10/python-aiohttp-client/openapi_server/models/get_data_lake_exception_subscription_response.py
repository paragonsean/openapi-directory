# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetDataLakeExceptionSubscriptionResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exception_time_to_live: int=None, notification_endpoint: str=None, subscription_protocol: str=None):
        """GetDataLakeExceptionSubscriptionResponse - a model defined in OpenAPI

        :param exception_time_to_live: The exception_time_to_live of this GetDataLakeExceptionSubscriptionResponse.
        :param notification_endpoint: The notification_endpoint of this GetDataLakeExceptionSubscriptionResponse.
        :param subscription_protocol: The subscription_protocol of this GetDataLakeExceptionSubscriptionResponse.
        """
        self.openapi_types = {
            'exception_time_to_live': int,
            'notification_endpoint': str,
            'subscription_protocol': str
        }

        self.attribute_map = {
            'exception_time_to_live': 'exceptionTimeToLive',
            'notification_endpoint': 'notificationEndpoint',
            'subscription_protocol': 'subscriptionProtocol'
        }

        self._exception_time_to_live = exception_time_to_live
        self._notification_endpoint = notification_endpoint
        self._subscription_protocol = subscription_protocol

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetDataLakeExceptionSubscriptionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetDataLakeExceptionSubscriptionResponse of this GetDataLakeExceptionSubscriptionResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exception_time_to_live(self):
        """Gets the exception_time_to_live of this GetDataLakeExceptionSubscriptionResponse.


        :return: The exception_time_to_live of this GetDataLakeExceptionSubscriptionResponse.
        :rtype: int
        """
        return self._exception_time_to_live

    @exception_time_to_live.setter
    def exception_time_to_live(self, exception_time_to_live):
        """Sets the exception_time_to_live of this GetDataLakeExceptionSubscriptionResponse.


        :param exception_time_to_live: The exception_time_to_live of this GetDataLakeExceptionSubscriptionResponse.
        :type exception_time_to_live: int
        """

        self._exception_time_to_live = exception_time_to_live

    @property
    def notification_endpoint(self):
        """Gets the notification_endpoint of this GetDataLakeExceptionSubscriptionResponse.


        :return: The notification_endpoint of this GetDataLakeExceptionSubscriptionResponse.
        :rtype: str
        """
        return self._notification_endpoint

    @notification_endpoint.setter
    def notification_endpoint(self, notification_endpoint):
        """Sets the notification_endpoint of this GetDataLakeExceptionSubscriptionResponse.


        :param notification_endpoint: The notification_endpoint of this GetDataLakeExceptionSubscriptionResponse.
        :type notification_endpoint: str
        """

        self._notification_endpoint = notification_endpoint

    @property
    def subscription_protocol(self):
        """Gets the subscription_protocol of this GetDataLakeExceptionSubscriptionResponse.


        :return: The subscription_protocol of this GetDataLakeExceptionSubscriptionResponse.
        :rtype: str
        """
        return self._subscription_protocol

    @subscription_protocol.setter
    def subscription_protocol(self, subscription_protocol):
        """Sets the subscription_protocol of this GetDataLakeExceptionSubscriptionResponse.


        :param subscription_protocol: The subscription_protocol of this GetDataLakeExceptionSubscriptionResponse.
        :type subscription_protocol: str
        """

        self._subscription_protocol = subscription_protocol
