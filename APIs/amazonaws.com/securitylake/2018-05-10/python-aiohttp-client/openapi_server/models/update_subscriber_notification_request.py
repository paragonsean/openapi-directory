# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_subscriber_notification_request_configuration import UpdateSubscriberNotificationRequestConfiguration
from openapi_server import util


class UpdateSubscriberNotificationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration: UpdateSubscriberNotificationRequestConfiguration=None):
        """UpdateSubscriberNotificationRequest - a model defined in OpenAPI

        :param configuration: The configuration of this UpdateSubscriberNotificationRequest.
        """
        self.openapi_types = {
            'configuration': UpdateSubscriberNotificationRequestConfiguration
        }

        self.attribute_map = {
            'configuration': 'configuration'
        }

        self._configuration = configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateSubscriberNotificationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateSubscriberNotification_request of this UpdateSubscriberNotificationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration(self):
        """Gets the configuration of this UpdateSubscriberNotificationRequest.


        :return: The configuration of this UpdateSubscriberNotificationRequest.
        :rtype: UpdateSubscriberNotificationRequestConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this UpdateSubscriberNotificationRequest.


        :param configuration: The configuration of this UpdateSubscriberNotificationRequest.
        :type configuration: UpdateSubscriberNotificationRequestConfiguration
        """
        if configuration is None:
            raise ValueError("Invalid value for `configuration`, must not be `None`")

        self._configuration = configuration
