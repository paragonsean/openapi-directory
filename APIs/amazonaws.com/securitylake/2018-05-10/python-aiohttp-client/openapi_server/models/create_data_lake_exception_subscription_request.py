# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateDataLakeExceptionSubscriptionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exception_time_to_live: int=None, notification_endpoint: str=None, subscription_protocol: str=None):
        """CreateDataLakeExceptionSubscriptionRequest - a model defined in OpenAPI

        :param exception_time_to_live: The exception_time_to_live of this CreateDataLakeExceptionSubscriptionRequest.
        :param notification_endpoint: The notification_endpoint of this CreateDataLakeExceptionSubscriptionRequest.
        :param subscription_protocol: The subscription_protocol of this CreateDataLakeExceptionSubscriptionRequest.
        """
        self.openapi_types = {
            'exception_time_to_live': int,
            'notification_endpoint': str,
            'subscription_protocol': str
        }

        self.attribute_map = {
            'exception_time_to_live': 'exceptionTimeToLive',
            'notification_endpoint': 'notificationEndpoint',
            'subscription_protocol': 'subscriptionProtocol'
        }

        self._exception_time_to_live = exception_time_to_live
        self._notification_endpoint = notification_endpoint
        self._subscription_protocol = subscription_protocol

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDataLakeExceptionSubscriptionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDataLakeExceptionSubscription_request of this CreateDataLakeExceptionSubscriptionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exception_time_to_live(self):
        """Gets the exception_time_to_live of this CreateDataLakeExceptionSubscriptionRequest.

        The expiration period and time-to-live (TTL).

        :return: The exception_time_to_live of this CreateDataLakeExceptionSubscriptionRequest.
        :rtype: int
        """
        return self._exception_time_to_live

    @exception_time_to_live.setter
    def exception_time_to_live(self, exception_time_to_live):
        """Sets the exception_time_to_live of this CreateDataLakeExceptionSubscriptionRequest.

        The expiration period and time-to-live (TTL).

        :param exception_time_to_live: The exception_time_to_live of this CreateDataLakeExceptionSubscriptionRequest.
        :type exception_time_to_live: int
        """
        if exception_time_to_live is not None and exception_time_to_live < 1:
            raise ValueError("Invalid value for `exception_time_to_live`, must be a value greater than or equal to `1`")

        self._exception_time_to_live = exception_time_to_live

    @property
    def notification_endpoint(self):
        """Gets the notification_endpoint of this CreateDataLakeExceptionSubscriptionRequest.

        The Amazon Web Services account where you want to receive exception notifications.

        :return: The notification_endpoint of this CreateDataLakeExceptionSubscriptionRequest.
        :rtype: str
        """
        return self._notification_endpoint

    @notification_endpoint.setter
    def notification_endpoint(self, notification_endpoint):
        """Sets the notification_endpoint of this CreateDataLakeExceptionSubscriptionRequest.

        The Amazon Web Services account where you want to receive exception notifications.

        :param notification_endpoint: The notification_endpoint of this CreateDataLakeExceptionSubscriptionRequest.
        :type notification_endpoint: str
        """
        if notification_endpoint is None:
            raise ValueError("Invalid value for `notification_endpoint`, must not be `None`")
        if notification_endpoint is not None and not re.search(r'^[\\\w\-_:\/.@=+]*$', notification_endpoint):
            raise ValueError("Invalid value for `notification_endpoint`, must be a follow pattern or equal to `/^[\\\w\-_:\/.@=+]*$/`")

        self._notification_endpoint = notification_endpoint

    @property
    def subscription_protocol(self):
        """Gets the subscription_protocol of this CreateDataLakeExceptionSubscriptionRequest.

        The subscription protocol to which exception notifications are posted.

        :return: The subscription_protocol of this CreateDataLakeExceptionSubscriptionRequest.
        :rtype: str
        """
        return self._subscription_protocol

    @subscription_protocol.setter
    def subscription_protocol(self, subscription_protocol):
        """Sets the subscription_protocol of this CreateDataLakeExceptionSubscriptionRequest.

        The subscription protocol to which exception notifications are posted.

        :param subscription_protocol: The subscription_protocol of this CreateDataLakeExceptionSubscriptionRequest.
        :type subscription_protocol: str
        """
        if subscription_protocol is None:
            raise ValueError("Invalid value for `subscription_protocol`, must not be `None`")
        if subscription_protocol is not None and not re.search(r'^[a-z\-]*$', subscription_protocol):
            raise ValueError("Invalid value for `subscription_protocol`, must be a follow pattern or equal to `/^[a-z\-]*$/`")

        self._subscription_protocol = subscription_protocol
