# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataLakeSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: str=None, event_classes: List=None, source_name: str=None, source_statuses: List=None):
        """DataLakeSource - a model defined in OpenAPI

        :param account: The account of this DataLakeSource.
        :param event_classes: The event_classes of this DataLakeSource.
        :param source_name: The source_name of this DataLakeSource.
        :param source_statuses: The source_statuses of this DataLakeSource.
        """
        self.openapi_types = {
            'account': str,
            'event_classes': List,
            'source_name': str,
            'source_statuses': List
        }

        self.attribute_map = {
            'account': 'account',
            'event_classes': 'eventClasses',
            'source_name': 'sourceName',
            'source_statuses': 'sourceStatuses'
        }

        self._account = account
        self._event_classes = event_classes
        self._source_name = source_name
        self._source_statuses = source_statuses

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataLakeSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataLakeSource of this DataLakeSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this DataLakeSource.


        :return: The account of this DataLakeSource.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this DataLakeSource.


        :param account: The account of this DataLakeSource.
        :type account: str
        """

        self._account = account

    @property
    def event_classes(self):
        """Gets the event_classes of this DataLakeSource.


        :return: The event_classes of this DataLakeSource.
        :rtype: List
        """
        return self._event_classes

    @event_classes.setter
    def event_classes(self, event_classes):
        """Sets the event_classes of this DataLakeSource.


        :param event_classes: The event_classes of this DataLakeSource.
        :type event_classes: List
        """

        self._event_classes = event_classes

    @property
    def source_name(self):
        """Gets the source_name of this DataLakeSource.


        :return: The source_name of this DataLakeSource.
        :rtype: str
        """
        return self._source_name

    @source_name.setter
    def source_name(self, source_name):
        """Sets the source_name of this DataLakeSource.


        :param source_name: The source_name of this DataLakeSource.
        :type source_name: str
        """

        self._source_name = source_name

    @property
    def source_statuses(self):
        """Gets the source_statuses of this DataLakeSource.


        :return: The source_statuses of this DataLakeSource.
        :rtype: List
        """
        return self._source_statuses

    @source_statuses.setter
    def source_statuses(self, source_statuses):
        """Sets the source_statuses of this DataLakeSource.


        :param source_statuses: The source_statuses of this DataLakeSource.
        :type source_statuses: List
        """

        self._source_statuses = source_statuses
