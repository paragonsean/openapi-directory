/**
 * FinSpace Public API
 *  The FinSpace APIs let you take actions inside the FinSpace.
 *
 * The version of the OpenAPI document: 2020-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssociateUserToPermissionGroupRequest from '../model/AssociateUserToPermissionGroupRequest';
import AssociateUserToPermissionGroupResponse from '../model/AssociateUserToPermissionGroupResponse';
import CreateChangesetRequest from '../model/CreateChangesetRequest';
import CreateChangesetResponse from '../model/CreateChangesetResponse';
import CreateDataViewRequest from '../model/CreateDataViewRequest';
import CreateDataViewResponse from '../model/CreateDataViewResponse';
import CreateDatasetRequest from '../model/CreateDatasetRequest';
import CreateDatasetResponse from '../model/CreateDatasetResponse';
import CreatePermissionGroupRequest from '../model/CreatePermissionGroupRequest';
import CreatePermissionGroupResponse from '../model/CreatePermissionGroupResponse';
import CreateUserRequest from '../model/CreateUserRequest';
import CreateUserResponse from '../model/CreateUserResponse';
import DeleteDatasetResponse from '../model/DeleteDatasetResponse';
import DeletePermissionGroupResponse from '../model/DeletePermissionGroupResponse';
import DisableUserResponse from '../model/DisableUserResponse';
import DisassociateUserFromPermissionGroupResponse from '../model/DisassociateUserFromPermissionGroupResponse';
import EnableUserResponse from '../model/EnableUserResponse';
import GetChangesetResponse from '../model/GetChangesetResponse';
import GetDataViewResponse from '../model/GetDataViewResponse';
import GetDatasetResponse from '../model/GetDatasetResponse';
import GetExternalDataViewAccessDetailsResponse from '../model/GetExternalDataViewAccessDetailsResponse';
import GetPermissionGroupResponse from '../model/GetPermissionGroupResponse';
import GetProgrammaticAccessCredentialsResponse from '../model/GetProgrammaticAccessCredentialsResponse';
import GetUserResponse from '../model/GetUserResponse';
import GetWorkingLocationRequest from '../model/GetWorkingLocationRequest';
import GetWorkingLocationResponse from '../model/GetWorkingLocationResponse';
import ListChangesetsResponse from '../model/ListChangesetsResponse';
import ListDataViewsResponse from '../model/ListDataViewsResponse';
import ListDatasetsResponse from '../model/ListDatasetsResponse';
import ListPermissionGroupsByUserResponse from '../model/ListPermissionGroupsByUserResponse';
import ListPermissionGroupsResponse from '../model/ListPermissionGroupsResponse';
import ListUsersByPermissionGroupResponse from '../model/ListUsersByPermissionGroupResponse';
import ListUsersResponse from '../model/ListUsersResponse';
import ResetUserPasswordResponse from '../model/ResetUserPasswordResponse';
import UpdateChangesetRequest from '../model/UpdateChangesetRequest';
import UpdateChangesetResponse from '../model/UpdateChangesetResponse';
import UpdateDatasetRequest from '../model/UpdateDatasetRequest';
import UpdateDatasetResponse from '../model/UpdateDatasetResponse';
import UpdatePermissionGroupRequest from '../model/UpdatePermissionGroupRequest';
import UpdatePermissionGroupResponse from '../model/UpdatePermissionGroupResponse';
import UpdateUserRequest from '../model/UpdateUserRequest';
import UpdateUserResponse from '../model/UpdateUserResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2020-07-13
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the associateUserToPermissionGroup operation.
     * @callback module:api/DefaultApi~associateUserToPermissionGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociateUserToPermissionGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a user account to a permission group to grant permissions for actions a user can perform in FinSpace.
     * @param {String} permissionGroupId The unique identifier for the permission group.
     * @param {String} userId The unique identifier for the user.
     * @param {module:model/AssociateUserToPermissionGroupRequest} associateUserToPermissionGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateUserToPermissionGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociateUserToPermissionGroupResponse}
     */
    associateUserToPermissionGroup(permissionGroupId, userId, associateUserToPermissionGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateUserToPermissionGroupRequest;
      // verify the required parameter 'permissionGroupId' is set
      if (permissionGroupId === undefined || permissionGroupId === null) {
        throw new Error("Missing the required parameter 'permissionGroupId' when calling associateUserToPermissionGroup");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling associateUserToPermissionGroup");
      }
      // verify the required parameter 'associateUserToPermissionGroupRequest' is set
      if (associateUserToPermissionGroupRequest === undefined || associateUserToPermissionGroupRequest === null) {
        throw new Error("Missing the required parameter 'associateUserToPermissionGroupRequest' when calling associateUserToPermissionGroup");
      }

      let pathParams = {
        'permissionGroupId': permissionGroupId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssociateUserToPermissionGroupResponse;
      return this.apiClient.callApi(
        '/permission-group/{permissionGroupId}/users/{userId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createChangeset operation.
     * @callback module:api/DefaultApi~createChangesetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateChangesetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Changeset in a FinSpace Dataset.
     * @param {String} datasetId The unique identifier for the FinSpace Dataset where the Changeset will be created. 
     * @param {module:model/CreateChangesetRequest} createChangesetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createChangesetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateChangesetResponse}
     */
    createChangeset(datasetId, createChangesetRequest, opts, callback) {
      opts = opts || {};
      let postBody = createChangesetRequest;
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling createChangeset");
      }
      // verify the required parameter 'createChangesetRequest' is set
      if (createChangesetRequest === undefined || createChangesetRequest === null) {
        throw new Error("Missing the required parameter 'createChangesetRequest' when calling createChangeset");
      }

      let pathParams = {
        'datasetId': datasetId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateChangesetResponse;
      return this.apiClient.callApi(
        '/datasets/{datasetId}/changesetsv2', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDataView operation.
     * @callback module:api/DefaultApi~createDataViewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDataViewResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Dataview for a Dataset.
     * @param {String} datasetId The unique Dataset identifier that is used to create a Dataview.
     * @param {module:model/CreateDataViewRequest} createDataViewRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDataViewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDataViewResponse}
     */
    createDataView(datasetId, createDataViewRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDataViewRequest;
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling createDataView");
      }
      // verify the required parameter 'createDataViewRequest' is set
      if (createDataViewRequest === undefined || createDataViewRequest === null) {
        throw new Error("Missing the required parameter 'createDataViewRequest' when calling createDataView");
      }

      let pathParams = {
        'datasetId': datasetId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDataViewResponse;
      return this.apiClient.callApi(
        '/datasets/{datasetId}/dataviewsv2', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDataset operation.
     * @callback module:api/DefaultApi~createDatasetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDatasetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new FinSpace Dataset.
     * @param {module:model/CreateDatasetRequest} createDatasetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDatasetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDatasetResponse}
     */
    createDataset(createDatasetRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDatasetRequest;
      // verify the required parameter 'createDatasetRequest' is set
      if (createDatasetRequest === undefined || createDatasetRequest === null) {
        throw new Error("Missing the required parameter 'createDatasetRequest' when calling createDataset");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDatasetResponse;
      return this.apiClient.callApi(
        '/datasetsv2', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPermissionGroup operation.
     * @callback module:api/DefaultApi~createPermissionGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePermissionGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a group of permissions for various actions that a user can perform in FinSpace.
     * @param {module:model/CreatePermissionGroupRequest} createPermissionGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createPermissionGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePermissionGroupResponse}
     */
    createPermissionGroup(createPermissionGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = createPermissionGroupRequest;
      // verify the required parameter 'createPermissionGroupRequest' is set
      if (createPermissionGroupRequest === undefined || createPermissionGroupRequest === null) {
        throw new Error("Missing the required parameter 'createPermissionGroupRequest' when calling createPermissionGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePermissionGroupResponse;
      return this.apiClient.callApi(
        '/permission-group', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createUser operation.
     * @callback module:api/DefaultApi~createUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new user in FinSpace.
     * @param {module:model/CreateUserRequest} createUserRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateUserResponse}
     */
    createUser(createUserRequest, opts, callback) {
      opts = opts || {};
      let postBody = createUserRequest;
      // verify the required parameter 'createUserRequest' is set
      if (createUserRequest === undefined || createUserRequest === null) {
        throw new Error("Missing the required parameter 'createUserRequest' when calling createUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateUserResponse;
      return this.apiClient.callApi(
        '/user', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDataset operation.
     * @callback module:api/DefaultApi~deleteDatasetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteDatasetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a FinSpace Dataset.
     * @param {String} datasetId The unique identifier of the Dataset to be deleted.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clientToken] A token that ensures idempotency. This token expires in 10 minutes.
     * @param {module:api/DefaultApi~deleteDatasetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteDatasetResponse}
     */
    deleteDataset(datasetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling deleteDataset");
      }

      let pathParams = {
        'datasetId': datasetId
      };
      let queryParams = {
        'clientToken': opts['clientToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteDatasetResponse;
      return this.apiClient.callApi(
        '/datasetsv2/{datasetId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePermissionGroup operation.
     * @callback module:api/DefaultApi~deletePermissionGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletePermissionGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a permission group. This action is irreversible.
     * @param {String} permissionGroupId The unique identifier for the permission group that you want to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clientToken] A token that ensures idempotency. This token expires in 10 minutes.
     * @param {module:api/DefaultApi~deletePermissionGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletePermissionGroupResponse}
     */
    deletePermissionGroup(permissionGroupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'permissionGroupId' is set
      if (permissionGroupId === undefined || permissionGroupId === null) {
        throw new Error("Missing the required parameter 'permissionGroupId' when calling deletePermissionGroup");
      }

      let pathParams = {
        'permissionGroupId': permissionGroupId
      };
      let queryParams = {
        'clientToken': opts['clientToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeletePermissionGroupResponse;
      return this.apiClient.callApi(
        '/permission-group/{permissionGroupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disableUser operation.
     * @callback module:api/DefaultApi~disableUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisableUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Denies access to the FinSpace web application and API for the specified user.
     * @param {String} userId The unique identifier for the user account that you want to disable.
     * @param {module:model/AssociateUserToPermissionGroupRequest} associateUserToPermissionGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disableUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisableUserResponse}
     */
    disableUser(userId, associateUserToPermissionGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateUserToPermissionGroupRequest;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling disableUser");
      }
      // verify the required parameter 'associateUserToPermissionGroupRequest' is set
      if (associateUserToPermissionGroupRequest === undefined || associateUserToPermissionGroupRequest === null) {
        throw new Error("Missing the required parameter 'associateUserToPermissionGroupRequest' when calling disableUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DisableUserResponse;
      return this.apiClient.callApi(
        '/user/{userId}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateUserFromPermissionGroup operation.
     * @callback module:api/DefaultApi~disassociateUserFromPermissionGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisassociateUserFromPermissionGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a user account from a permission group.
     * @param {String} permissionGroupId The unique identifier for the permission group.
     * @param {String} userId The unique identifier for the user.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clientToken] A token that ensures idempotency. This token expires in 10 minutes.
     * @param {module:api/DefaultApi~disassociateUserFromPermissionGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisassociateUserFromPermissionGroupResponse}
     */
    disassociateUserFromPermissionGroup(permissionGroupId, userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'permissionGroupId' is set
      if (permissionGroupId === undefined || permissionGroupId === null) {
        throw new Error("Missing the required parameter 'permissionGroupId' when calling disassociateUserFromPermissionGroup");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling disassociateUserFromPermissionGroup");
      }

      let pathParams = {
        'permissionGroupId': permissionGroupId,
        'userId': userId
      };
      let queryParams = {
        'clientToken': opts['clientToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DisassociateUserFromPermissionGroupResponse;
      return this.apiClient.callApi(
        '/permission-group/{permissionGroupId}/users/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enableUser operation.
     * @callback module:api/DefaultApi~enableUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnableUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Allows the specified user to access the FinSpace web application and API.
     * @param {String} userId The unique identifier for the user account that you want to enable.
     * @param {module:model/AssociateUserToPermissionGroupRequest} associateUserToPermissionGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~enableUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnableUserResponse}
     */
    enableUser(userId, associateUserToPermissionGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateUserToPermissionGroupRequest;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling enableUser");
      }
      // verify the required parameter 'associateUserToPermissionGroupRequest' is set
      if (associateUserToPermissionGroupRequest === undefined || associateUserToPermissionGroupRequest === null) {
        throw new Error("Missing the required parameter 'associateUserToPermissionGroupRequest' when calling enableUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnableUserResponse;
      return this.apiClient.callApi(
        '/user/{userId}/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChangeset operation.
     * @callback module:api/DefaultApi~getChangesetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetChangesetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about a Changeset.
     * @param {String} datasetId The unique identifier for the FinSpace Dataset where the Changeset is created.
     * @param {String} changesetId The unique identifier of the Changeset for which to get data.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getChangesetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetChangesetResponse}
     */
    getChangeset(datasetId, changesetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling getChangeset");
      }
      // verify the required parameter 'changesetId' is set
      if (changesetId === undefined || changesetId === null) {
        throw new Error("Missing the required parameter 'changesetId' when calling getChangeset");
      }

      let pathParams = {
        'datasetId': datasetId,
        'changesetId': changesetId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetChangesetResponse;
      return this.apiClient.callApi(
        '/datasets/{datasetId}/changesetsv2/{changesetId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataView operation.
     * @callback module:api/DefaultApi~getDataViewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDataViewResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a Dataview.
     * @param {String} dataviewId The unique identifier for the Dataview.
     * @param {String} datasetId The unique identifier for the Dataset used in the Dataview.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDataViewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDataViewResponse}
     */
    getDataView(dataviewId, datasetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dataviewId' is set
      if (dataviewId === undefined || dataviewId === null) {
        throw new Error("Missing the required parameter 'dataviewId' when calling getDataView");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling getDataView");
      }

      let pathParams = {
        'dataviewId': dataviewId,
        'datasetId': datasetId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDataViewResponse;
      return this.apiClient.callApi(
        '/datasets/{datasetId}/dataviewsv2/{dataviewId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataset operation.
     * @callback module:api/DefaultApi~getDatasetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDatasetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about a Dataset.
     * @param {String} datasetId The unique identifier for a Dataset.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDatasetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDatasetResponse}
     */
    getDataset(datasetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling getDataset");
      }

      let pathParams = {
        'datasetId': datasetId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDatasetResponse;
      return this.apiClient.callApi(
        '/datasetsv2/{datasetId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExternalDataViewAccessDetails operation.
     * @callback module:api/DefaultApi~getExternalDataViewAccessDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetExternalDataViewAccessDetailsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns the credentials to access the external Dataview from an S3 location. To call this API:</p> <ul> <li> <p>You must retrieve the programmatic credentials.</p> </li> <li> <p>You must be a member of a FinSpace user group, where the dataset that you want to access has <code>Read Dataset Data</code> permissions.</p> </li> </ul>
     * @param {String} dataviewId The unique identifier for the Dataview that you want to access.
     * @param {String} datasetId The unique identifier for the Dataset.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getExternalDataViewAccessDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetExternalDataViewAccessDetailsResponse}
     */
    getExternalDataViewAccessDetails(dataviewId, datasetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dataviewId' is set
      if (dataviewId === undefined || dataviewId === null) {
        throw new Error("Missing the required parameter 'dataviewId' when calling getExternalDataViewAccessDetails");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling getExternalDataViewAccessDetails");
      }

      let pathParams = {
        'dataviewId': dataviewId,
        'datasetId': datasetId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetExternalDataViewAccessDetailsResponse;
      return this.apiClient.callApi(
        '/datasets/{datasetId}/dataviewsv2/{dataviewId}/external-access-details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPermissionGroup operation.
     * @callback module:api/DefaultApi~getPermissionGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPermissionGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the details of a specific permission group.
     * @param {String} permissionGroupId The unique identifier for the permission group.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getPermissionGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPermissionGroupResponse}
     */
    getPermissionGroup(permissionGroupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'permissionGroupId' is set
      if (permissionGroupId === undefined || permissionGroupId === null) {
        throw new Error("Missing the required parameter 'permissionGroupId' when calling getPermissionGroup");
      }

      let pathParams = {
        'permissionGroupId': permissionGroupId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPermissionGroupResponse;
      return this.apiClient.callApi(
        '/permission-group/{permissionGroupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProgrammaticAccessCredentials operation.
     * @callback module:api/DefaultApi~getProgrammaticAccessCredentialsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetProgrammaticAccessCredentialsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request programmatic credentials to use with FinSpace SDK.
     * @param {String} environmentId The FinSpace environment identifier.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [durationInMinutes] The time duration in which the credentials remain valid. 
     * @param {module:api/DefaultApi~getProgrammaticAccessCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetProgrammaticAccessCredentialsResponse}
     */
    getProgrammaticAccessCredentials(environmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'environmentId' is set
      if (environmentId === undefined || environmentId === null) {
        throw new Error("Missing the required parameter 'environmentId' when calling getProgrammaticAccessCredentials");
      }

      let pathParams = {
      };
      let queryParams = {
        'durationInMinutes': opts['durationInMinutes'],
        'environmentId': environmentId
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetProgrammaticAccessCredentialsResponse;
      return this.apiClient.callApi(
        '/credentials/programmatic#environmentId', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUser operation.
     * @callback module:api/DefaultApi~getUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves details for a specific user.
     * @param {String} userId The unique identifier of the user to get data for.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUserResponse}
     */
    getUser(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetUserResponse;
      return this.apiClient.callApi(
        '/user/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkingLocation operation.
     * @callback module:api/DefaultApi~getWorkingLocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetWorkingLocationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A temporary Amazon S3 location, where you can copy your files from a source location to stage or use as a scratch space in FinSpace notebook.
     * @param {module:model/GetWorkingLocationRequest} getWorkingLocationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getWorkingLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetWorkingLocationResponse}
     */
    getWorkingLocation(getWorkingLocationRequest, opts, callback) {
      opts = opts || {};
      let postBody = getWorkingLocationRequest;
      // verify the required parameter 'getWorkingLocationRequest' is set
      if (getWorkingLocationRequest === undefined || getWorkingLocationRequest === null) {
        throw new Error("Missing the required parameter 'getWorkingLocationRequest' when calling getWorkingLocation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetWorkingLocationResponse;
      return this.apiClient.callApi(
        '/workingLocationV1', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listChangesets operation.
     * @callback module:api/DefaultApi~listChangesetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListChangesetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the FinSpace Changesets for a Dataset.
     * @param {String} datasetId The unique identifier for the FinSpace Dataset to which the Changeset belongs.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results per page.
     * @param {String} [nextToken] A token that indicates where a results page should begin.
     * @param {module:api/DefaultApi~listChangesetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListChangesetsResponse}
     */
    listChangesets(datasetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling listChangesets");
      }

      let pathParams = {
        'datasetId': datasetId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListChangesetsResponse;
      return this.apiClient.callApi(
        '/datasets/{datasetId}/changesetsv2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDataViews operation.
     * @callback module:api/DefaultApi~listDataViewsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDataViewsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all available Dataviews for a Dataset.
     * @param {String} datasetId The unique identifier of the Dataset for which to retrieve Dataviews.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] A token that indicates where a results page should begin.
     * @param {Number} [maxResults] The maximum number of results per page.
     * @param {module:api/DefaultApi~listDataViewsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDataViewsResponse}
     */
    listDataViews(datasetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling listDataViews");
      }

      let pathParams = {
        'datasetId': datasetId
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListDataViewsResponse;
      return this.apiClient.callApi(
        '/datasets/{datasetId}/dataviewsv2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDatasets operation.
     * @callback module:api/DefaultApi~listDatasetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDatasetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all of the active Datasets that a user has access to.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] A token that indicates where a results page should begin.
     * @param {Number} [maxResults] The maximum number of results per page.
     * @param {module:api/DefaultApi~listDatasetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDatasetsResponse}
     */
    listDatasets(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListDatasetsResponse;
      return this.apiClient.callApi(
        '/datasetsv2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPermissionGroups operation.
     * @callback module:api/DefaultApi~listPermissionGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPermissionGroupsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all available permission groups in FinSpace.
     * @param {Number} maxResults The maximum number of results per page.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] A token that indicates where a results page should begin.
     * @param {module:api/DefaultApi~listPermissionGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPermissionGroupsResponse}
     */
    listPermissionGroups(maxResults, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'maxResults' is set
      if (maxResults === undefined || maxResults === null) {
        throw new Error("Missing the required parameter 'maxResults' when calling listPermissionGroups");
      }

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': maxResults
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListPermissionGroupsResponse;
      return this.apiClient.callApi(
        '/permission-group#maxResults', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPermissionGroupsByUser operation.
     * @callback module:api/DefaultApi~listPermissionGroupsByUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPermissionGroupsByUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the permission groups that are associated with a specific user account.
     * @param {String} userId The unique identifier for the user.
     * @param {Number} maxResults The maximum number of results per page.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] A token that indicates where a results page should begin.
     * @param {module:api/DefaultApi~listPermissionGroupsByUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPermissionGroupsByUserResponse}
     */
    listPermissionGroupsByUser(userId, maxResults, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling listPermissionGroupsByUser");
      }
      // verify the required parameter 'maxResults' is set
      if (maxResults === undefined || maxResults === null) {
        throw new Error("Missing the required parameter 'maxResults' when calling listPermissionGroupsByUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': maxResults
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListPermissionGroupsByUserResponse;
      return this.apiClient.callApi(
        '/user/{userId}/permission-groups#maxResults', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUsers operation.
     * @callback module:api/DefaultApi~listUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListUsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all available user accounts in FinSpace.
     * @param {Number} maxResults The maximum number of results per page.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] A token that indicates where a results page should begin.
     * @param {module:api/DefaultApi~listUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListUsersResponse}
     */
    listUsers(maxResults, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'maxResults' is set
      if (maxResults === undefined || maxResults === null) {
        throw new Error("Missing the required parameter 'maxResults' when calling listUsers");
      }

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': maxResults
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListUsersResponse;
      return this.apiClient.callApi(
        '/user#maxResults', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUsersByPermissionGroup operation.
     * @callback module:api/DefaultApi~listUsersByPermissionGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListUsersByPermissionGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists details of all the users in a specific permission group.
     * @param {String} permissionGroupId The unique identifier for the permission group.
     * @param {Number} maxResults The maximum number of results per page.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] A token that indicates where a results page should begin.
     * @param {module:api/DefaultApi~listUsersByPermissionGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListUsersByPermissionGroupResponse}
     */
    listUsersByPermissionGroup(permissionGroupId, maxResults, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'permissionGroupId' is set
      if (permissionGroupId === undefined || permissionGroupId === null) {
        throw new Error("Missing the required parameter 'permissionGroupId' when calling listUsersByPermissionGroup");
      }
      // verify the required parameter 'maxResults' is set
      if (maxResults === undefined || maxResults === null) {
        throw new Error("Missing the required parameter 'maxResults' when calling listUsersByPermissionGroup");
      }

      let pathParams = {
        'permissionGroupId': permissionGroupId
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': maxResults
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListUsersByPermissionGroupResponse;
      return this.apiClient.callApi(
        '/permission-group/{permissionGroupId}/users#maxResults', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetUserPassword operation.
     * @callback module:api/DefaultApi~resetUserPasswordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResetUserPasswordResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resets the password for a specified user ID and generates a temporary one. Only a superuser can reset password for other users. Resetting the password immediately invalidates the previous password associated with the user.
     * @param {String} userId The unique identifier of the user that a temporary password is requested for.
     * @param {module:model/AssociateUserToPermissionGroupRequest} associateUserToPermissionGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~resetUserPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResetUserPasswordResponse}
     */
    resetUserPassword(userId, associateUserToPermissionGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateUserToPermissionGroupRequest;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling resetUserPassword");
      }
      // verify the required parameter 'associateUserToPermissionGroupRequest' is set
      if (associateUserToPermissionGroupRequest === undefined || associateUserToPermissionGroupRequest === null) {
        throw new Error("Missing the required parameter 'associateUserToPermissionGroupRequest' when calling resetUserPassword");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResetUserPasswordResponse;
      return this.apiClient.callApi(
        '/user/{userId}/password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChangeset operation.
     * @callback module:api/DefaultApi~updateChangesetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateChangesetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a FinSpace Changeset.
     * @param {String} datasetId The unique identifier for the FinSpace Dataset in which the Changeset is created.
     * @param {String} changesetId The unique identifier for the Changeset to update.
     * @param {module:model/UpdateChangesetRequest} updateChangesetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateChangesetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateChangesetResponse}
     */
    updateChangeset(datasetId, changesetId, updateChangesetRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateChangesetRequest;
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling updateChangeset");
      }
      // verify the required parameter 'changesetId' is set
      if (changesetId === undefined || changesetId === null) {
        throw new Error("Missing the required parameter 'changesetId' when calling updateChangeset");
      }
      // verify the required parameter 'updateChangesetRequest' is set
      if (updateChangesetRequest === undefined || updateChangesetRequest === null) {
        throw new Error("Missing the required parameter 'updateChangesetRequest' when calling updateChangeset");
      }

      let pathParams = {
        'datasetId': datasetId,
        'changesetId': changesetId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateChangesetResponse;
      return this.apiClient.callApi(
        '/datasets/{datasetId}/changesetsv2/{changesetId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDataset operation.
     * @callback module:api/DefaultApi~updateDatasetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateDatasetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a FinSpace Dataset.
     * @param {String} datasetId The unique identifier for the Dataset to update.
     * @param {module:model/UpdateDatasetRequest} updateDatasetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateDatasetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateDatasetResponse}
     */
    updateDataset(datasetId, updateDatasetRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateDatasetRequest;
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling updateDataset");
      }
      // verify the required parameter 'updateDatasetRequest' is set
      if (updateDatasetRequest === undefined || updateDatasetRequest === null) {
        throw new Error("Missing the required parameter 'updateDatasetRequest' when calling updateDataset");
      }

      let pathParams = {
        'datasetId': datasetId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateDatasetResponse;
      return this.apiClient.callApi(
        '/datasetsv2/{datasetId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePermissionGroup operation.
     * @callback module:api/DefaultApi~updatePermissionGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdatePermissionGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the details of a permission group. You cannot modify a <code>permissionGroupID</code>.
     * @param {String} permissionGroupId The unique identifier for the permission group to update.
     * @param {module:model/UpdatePermissionGroupRequest} updatePermissionGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updatePermissionGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdatePermissionGroupResponse}
     */
    updatePermissionGroup(permissionGroupId, updatePermissionGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = updatePermissionGroupRequest;
      // verify the required parameter 'permissionGroupId' is set
      if (permissionGroupId === undefined || permissionGroupId === null) {
        throw new Error("Missing the required parameter 'permissionGroupId' when calling updatePermissionGroup");
      }
      // verify the required parameter 'updatePermissionGroupRequest' is set
      if (updatePermissionGroupRequest === undefined || updatePermissionGroupRequest === null) {
        throw new Error("Missing the required parameter 'updatePermissionGroupRequest' when calling updatePermissionGroup");
      }

      let pathParams = {
        'permissionGroupId': permissionGroupId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdatePermissionGroupResponse;
      return this.apiClient.callApi(
        '/permission-group/{permissionGroupId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUser operation.
     * @callback module:api/DefaultApi~updateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the details of the specified user account. You cannot update the <code>userId</code> for a user.
     * @param {String} userId The unique identifier for the user account to update.
     * @param {module:model/UpdateUserRequest} updateUserRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateUserResponse}
     */
    updateUser(userId, updateUserRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateUserRequest;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUser");
      }
      // verify the required parameter 'updateUserRequest' is set
      if (updateUserRequest === undefined || updateUserRequest === null) {
        throw new Error("Missing the required parameter 'updateUserRequest' when calling updateUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateUserResponse;
      return this.apiClient.callApi(
        '/user/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
