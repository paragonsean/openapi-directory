/**
 * FinSpace Public API
 *  The FinSpace APIs let you take actions inside the FinSpace.
 *
 * The version of the OpenAPI document: 2020-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateDatasetRequestSchemaDefinition from './CreateDatasetRequestSchemaDefinition';

/**
 * The UpdateDatasetRequest model module.
 * @module model/UpdateDatasetRequest
 * @version 2020-07-13
 */
class UpdateDatasetRequest {
    /**
     * Constructs a new <code>UpdateDatasetRequest</code>.
     * @alias module:model/UpdateDatasetRequest
     * @param datasetTitle {String} Title for a given Dataset
     * @param kind {module:model/UpdateDatasetRequest.KindEnum} Dataset Kind
     */
    constructor(datasetTitle, kind) { 
        
        UpdateDatasetRequest.initialize(this, datasetTitle, kind);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, datasetTitle, kind) { 
        obj['datasetTitle'] = datasetTitle;
        obj['kind'] = kind;
    }

    /**
     * Constructs a <code>UpdateDatasetRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateDatasetRequest} obj Optional instance to populate.
     * @return {module:model/UpdateDatasetRequest} The populated <code>UpdateDatasetRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateDatasetRequest();

            if (data.hasOwnProperty('clientToken')) {
                obj['clientToken'] = ApiClient.convertToType(data['clientToken'], 'String');
            }
            if (data.hasOwnProperty('datasetTitle')) {
                obj['datasetTitle'] = ApiClient.convertToType(data['datasetTitle'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('datasetDescription')) {
                obj['datasetDescription'] = ApiClient.convertToType(data['datasetDescription'], 'String');
            }
            if (data.hasOwnProperty('alias')) {
                obj['alias'] = ApiClient.convertToType(data['alias'], 'String');
            }
            if (data.hasOwnProperty('schemaDefinition')) {
                obj['schemaDefinition'] = CreateDatasetRequestSchemaDefinition.constructFromObject(data['schemaDefinition']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateDatasetRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateDatasetRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateDatasetRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['clientToken'] && !(typeof data['clientToken'] === 'string' || data['clientToken'] instanceof String)) {
            throw new Error("Expected the field `clientToken` to be a primitive type in the JSON string but got " + data['clientToken']);
        }
        // ensure the json data is a string
        if (data['datasetTitle'] && !(typeof data['datasetTitle'] === 'string' || data['datasetTitle'] instanceof String)) {
            throw new Error("Expected the field `datasetTitle` to be a primitive type in the JSON string but got " + data['datasetTitle']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['datasetDescription'] && !(typeof data['datasetDescription'] === 'string' || data['datasetDescription'] instanceof String)) {
            throw new Error("Expected the field `datasetDescription` to be a primitive type in the JSON string but got " + data['datasetDescription']);
        }
        // ensure the json data is a string
        if (data['alias'] && !(typeof data['alias'] === 'string' || data['alias'] instanceof String)) {
            throw new Error("Expected the field `alias` to be a primitive type in the JSON string but got " + data['alias']);
        }
        // validate the optional field `schemaDefinition`
        if (data['schemaDefinition']) { // data not null
          CreateDatasetRequestSchemaDefinition.validateJSON(data['schemaDefinition']);
        }

        return true;
    }


}

UpdateDatasetRequest.RequiredProperties = ["datasetTitle", "kind"];

/**
 * Idempotence Token for API operations
 * @member {String} clientToken
 */
UpdateDatasetRequest.prototype['clientToken'] = undefined;

/**
 * Title for a given Dataset
 * @member {String} datasetTitle
 */
UpdateDatasetRequest.prototype['datasetTitle'] = undefined;

/**
 * Dataset Kind
 * @member {module:model/UpdateDatasetRequest.KindEnum} kind
 */
UpdateDatasetRequest.prototype['kind'] = undefined;

/**
 * Description of a dataset
 * @member {String} datasetDescription
 */
UpdateDatasetRequest.prototype['datasetDescription'] = undefined;

/**
 * The unique resource identifier for a Dataset.
 * @member {String} alias
 */
UpdateDatasetRequest.prototype['alias'] = undefined;

/**
 * @member {module:model/CreateDatasetRequestSchemaDefinition} schemaDefinition
 */
UpdateDatasetRequest.prototype['schemaDefinition'] = undefined;





/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
UpdateDatasetRequest['KindEnum'] = {

    /**
     * value: "TABULAR"
     * @const
     */
    "TABULAR": "TABULAR",

    /**
     * value: "NON_TABULAR"
     * @const
     */
    "NON_TABULAR": "NON_TABULAR"
};



export default UpdateDatasetRequest;

