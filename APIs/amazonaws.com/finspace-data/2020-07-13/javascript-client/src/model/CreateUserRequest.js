/**
 * FinSpace Public API
 *  The FinSpace APIs let you take actions inside the FinSpace.
 *
 * The version of the OpenAPI document: 2020-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateUserRequest model module.
 * @module model/CreateUserRequest
 * @version 2020-07-13
 */
class CreateUserRequest {
    /**
     * Constructs a new <code>CreateUserRequest</code>.
     * @alias module:model/CreateUserRequest
     * @param emailAddress {String} The email address of the user that you want to register. The email address serves as a uniquer identifier for each user and cannot be changed after it's created.
     * @param type {module:model/CreateUserRequest.TypeEnum} <p>The option to indicate the type of user. Use one of the following options to specify this parameter:</p> <ul> <li> <p> <code>SUPER_USER</code> – A user with permission to all the functionality and data in FinSpace.</p> </li> <li> <p> <code>APP_USER</code> – A user with specific permissions in FinSpace. The users are assigned permissions by adding them to a permission group.</p> </li> </ul>
     */
    constructor(emailAddress, type) { 
        
        CreateUserRequest.initialize(this, emailAddress, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, emailAddress, type) { 
        obj['emailAddress'] = emailAddress;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>CreateUserRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateUserRequest} obj Optional instance to populate.
     * @return {module:model/CreateUserRequest} The populated <code>CreateUserRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateUserRequest();

            if (data.hasOwnProperty('emailAddress')) {
                obj['emailAddress'] = ApiClient.convertToType(data['emailAddress'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('ApiAccess')) {
                obj['ApiAccess'] = ApiClient.convertToType(data['ApiAccess'], 'String');
            }
            if (data.hasOwnProperty('apiAccessPrincipalArn')) {
                obj['apiAccessPrincipalArn'] = ApiClient.convertToType(data['apiAccessPrincipalArn'], 'String');
            }
            if (data.hasOwnProperty('clientToken')) {
                obj['clientToken'] = ApiClient.convertToType(data['clientToken'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateUserRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateUserRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateUserRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['emailAddress'] && !(typeof data['emailAddress'] === 'string' || data['emailAddress'] instanceof String)) {
            throw new Error("Expected the field `emailAddress` to be a primitive type in the JSON string but got " + data['emailAddress']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['ApiAccess'] && !(typeof data['ApiAccess'] === 'string' || data['ApiAccess'] instanceof String)) {
            throw new Error("Expected the field `ApiAccess` to be a primitive type in the JSON string but got " + data['ApiAccess']);
        }
        // ensure the json data is a string
        if (data['apiAccessPrincipalArn'] && !(typeof data['apiAccessPrincipalArn'] === 'string' || data['apiAccessPrincipalArn'] instanceof String)) {
            throw new Error("Expected the field `apiAccessPrincipalArn` to be a primitive type in the JSON string but got " + data['apiAccessPrincipalArn']);
        }
        // ensure the json data is a string
        if (data['clientToken'] && !(typeof data['clientToken'] === 'string' || data['clientToken'] instanceof String)) {
            throw new Error("Expected the field `clientToken` to be a primitive type in the JSON string but got " + data['clientToken']);
        }

        return true;
    }


}

CreateUserRequest.RequiredProperties = ["emailAddress", "type"];

/**
 * The email address of the user that you want to register. The email address serves as a uniquer identifier for each user and cannot be changed after it's created.
 * @member {String} emailAddress
 */
CreateUserRequest.prototype['emailAddress'] = undefined;

/**
 * <p>The option to indicate the type of user. Use one of the following options to specify this parameter:</p> <ul> <li> <p> <code>SUPER_USER</code> – A user with permission to all the functionality and data in FinSpace.</p> </li> <li> <p> <code>APP_USER</code> – A user with specific permissions in FinSpace. The users are assigned permissions by adding them to a permission group.</p> </li> </ul>
 * @member {module:model/CreateUserRequest.TypeEnum} type
 */
CreateUserRequest.prototype['type'] = undefined;

/**
 * The first name of the user that you want to register.
 * @member {String} firstName
 */
CreateUserRequest.prototype['firstName'] = undefined;

/**
 * The last name of the user that you want to register.
 * @member {String} lastName
 */
CreateUserRequest.prototype['lastName'] = undefined;

/**
 * <p>The option to indicate whether the user can use the <code>GetProgrammaticAccessCredentials</code> API to obtain credentials that can then be used to access other FinSpace Data API operations.</p> <ul> <li> <p> <code>ENABLED</code> – The user has permissions to use the APIs.</p> </li> <li> <p> <code>DISABLED</code> – The user does not have permissions to use any APIs.</p> </li> </ul>
 * @member {module:model/CreateUserRequest.ApiAccessEnum} ApiAccess
 */
CreateUserRequest.prototype['ApiAccess'] = undefined;

/**
 * The ARN identifier of an AWS user or role that is allowed to call the <code>GetProgrammaticAccessCredentials</code> API to obtain a credentials token for a specific FinSpace user. This must be an IAM role within your FinSpace account.
 * @member {String} apiAccessPrincipalArn
 */
CreateUserRequest.prototype['apiAccessPrincipalArn'] = undefined;

/**
 * Idempotence Token for API operations
 * @member {String} clientToken
 */
CreateUserRequest.prototype['clientToken'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
CreateUserRequest['TypeEnum'] = {

    /**
     * value: "SUPER_USER"
     * @const
     */
    "SUPER_USER": "SUPER_USER",

    /**
     * value: "APP_USER"
     * @const
     */
    "APP_USER": "APP_USER"
};


/**
 * Allowed values for the <code>ApiAccess</code> property.
 * @enum {String}
 * @readonly
 */
CreateUserRequest['ApiAccessEnum'] = {

    /**
     * value: "ENABLED"
     * @const
     */
    "ENABLED": "ENABLED",

    /**
     * value: "DISABLED"
     * @const
     */
    "DISABLED": "DISABLED"
};



export default CreateUserRequest;

