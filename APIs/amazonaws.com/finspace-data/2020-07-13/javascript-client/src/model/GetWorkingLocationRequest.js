/**
 * FinSpace Public API
 *  The FinSpace APIs let you take actions inside the FinSpace.
 *
 * The version of the OpenAPI document: 2020-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GetWorkingLocationRequest model module.
 * @module model/GetWorkingLocationRequest
 * @version 2020-07-13
 */
class GetWorkingLocationRequest {
    /**
     * Constructs a new <code>GetWorkingLocationRequest</code>.
     * @alias module:model/GetWorkingLocationRequest
     */
    constructor() { 
        
        GetWorkingLocationRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetWorkingLocationRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetWorkingLocationRequest} obj Optional instance to populate.
     * @return {module:model/GetWorkingLocationRequest} The populated <code>GetWorkingLocationRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetWorkingLocationRequest();

            if (data.hasOwnProperty('locationType')) {
                obj['locationType'] = ApiClient.convertToType(data['locationType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetWorkingLocationRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetWorkingLocationRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['locationType'] && !(typeof data['locationType'] === 'string' || data['locationType'] instanceof String)) {
            throw new Error("Expected the field `locationType` to be a primitive type in the JSON string but got " + data['locationType']);
        }

        return true;
    }


}



/**
 * <p>Specify the type of the working location.</p> <ul> <li> <p> <code>SAGEMAKER</code> – Use the Amazon S3 location as a temporary location to store data content when working with FinSpace Notebooks that run on SageMaker studio.</p> </li> <li> <p> <code>INGESTION</code> – Use the Amazon S3 location as a staging location to copy your data content and then use the location with the Changeset creation operation.</p> </li> </ul>
 * @member {module:model/GetWorkingLocationRequest.LocationTypeEnum} locationType
 */
GetWorkingLocationRequest.prototype['locationType'] = undefined;





/**
 * Allowed values for the <code>locationType</code> property.
 * @enum {String}
 * @readonly
 */
GetWorkingLocationRequest['LocationTypeEnum'] = {

    /**
     * value: "INGESTION"
     * @const
     */
    "INGESTION": "INGESTION",

    /**
     * value: "SAGEMAKER"
     * @const
     */
    "SAGEMAKER": "SAGEMAKER"
};



export default GetWorkingLocationRequest;

