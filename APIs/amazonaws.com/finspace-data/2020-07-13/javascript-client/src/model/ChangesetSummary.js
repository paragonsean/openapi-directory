/**
 * FinSpace Public API
 *  The FinSpace APIs let you take actions inside the FinSpace.
 *
 * The version of the OpenAPI document: 2020-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChangeType from './ChangeType';
import GetChangesetResponseErrorInfo from './GetChangesetResponseErrorInfo';
import IngestionStatus from './IngestionStatus';

/**
 * The ChangesetSummary model module.
 * @module model/ChangesetSummary
 * @version 2020-07-13
 */
class ChangesetSummary {
    /**
     * Constructs a new <code>ChangesetSummary</code>.
     * A Changeset is unit of data in a Dataset.
     * @alias module:model/ChangesetSummary
     */
    constructor() { 
        
        ChangesetSummary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChangesetSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChangesetSummary} obj Optional instance to populate.
     * @return {module:model/ChangesetSummary} The populated <code>ChangesetSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChangesetSummary();

            if (data.hasOwnProperty('changesetId')) {
                obj['changesetId'] = ApiClient.convertToType(data['changesetId'], 'String');
            }
            if (data.hasOwnProperty('changesetArn')) {
                obj['changesetArn'] = ApiClient.convertToType(data['changesetArn'], 'String');
            }
            if (data.hasOwnProperty('datasetId')) {
                obj['datasetId'] = ApiClient.convertToType(data['datasetId'], 'String');
            }
            if (data.hasOwnProperty('changeType')) {
                obj['changeType'] = ApiClient.convertToType(data['changeType'], ChangeType);
            }
            if (data.hasOwnProperty('sourceParams')) {
                obj['sourceParams'] = ApiClient.convertToType(data['sourceParams'], Object);
            }
            if (data.hasOwnProperty('formatParams')) {
                obj['formatParams'] = ApiClient.convertToType(data['formatParams'], Object);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], IngestionStatus);
            }
            if (data.hasOwnProperty('errorInfo')) {
                obj['errorInfo'] = GetChangesetResponseErrorInfo.constructFromObject(data['errorInfo']);
            }
            if (data.hasOwnProperty('activeUntilTimestamp')) {
                obj['activeUntilTimestamp'] = ApiClient.convertToType(data['activeUntilTimestamp'], 'Number');
            }
            if (data.hasOwnProperty('activeFromTimestamp')) {
                obj['activeFromTimestamp'] = ApiClient.convertToType(data['activeFromTimestamp'], 'Number');
            }
            if (data.hasOwnProperty('updatesChangesetId')) {
                obj['updatesChangesetId'] = ApiClient.convertToType(data['updatesChangesetId'], 'String');
            }
            if (data.hasOwnProperty('updatedByChangesetId')) {
                obj['updatedByChangesetId'] = ApiClient.convertToType(data['updatedByChangesetId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChangesetSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChangesetSummary</code>.
     */
    static validateJSON(data) {
        // validate the optional field `changesetId`
        if (data['changesetId']) { // data not null
          String.validateJSON(data['changesetId']);
        }
        // validate the optional field `changesetArn`
        if (data['changesetArn']) { // data not null
          String.validateJSON(data['changesetArn']);
        }
        // validate the optional field `datasetId`
        if (data['datasetId']) { // data not null
          String.validateJSON(data['datasetId']);
        }
        // validate the optional field `changeType`
        if (data['changeType']) { // data not null
          ChangeType.validateJSON(data['changeType']);
        }
        // validate the optional field `sourceParams`
        if (data['sourceParams']) { // data not null
          Object.validateJSON(data['sourceParams']);
        }
        // validate the optional field `formatParams`
        if (data['formatParams']) { // data not null
          Object.validateJSON(data['formatParams']);
        }
        // validate the optional field `createTime`
        if (data['createTime']) { // data not null
          Number.validateJSON(data['createTime']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          IngestionStatus.validateJSON(data['status']);
        }
        // validate the optional field `errorInfo`
        if (data['errorInfo']) { // data not null
          GetChangesetResponseErrorInfo.validateJSON(data['errorInfo']);
        }
        // validate the optional field `activeUntilTimestamp`
        if (data['activeUntilTimestamp']) { // data not null
          Number.validateJSON(data['activeUntilTimestamp']);
        }
        // validate the optional field `activeFromTimestamp`
        if (data['activeFromTimestamp']) { // data not null
          Number.validateJSON(data['activeFromTimestamp']);
        }
        // validate the optional field `updatesChangesetId`
        if (data['updatesChangesetId']) { // data not null
          String.validateJSON(data['updatesChangesetId']);
        }
        // validate the optional field `updatedByChangesetId`
        if (data['updatedByChangesetId']) { // data not null
          String.validateJSON(data['updatedByChangesetId']);
        }

        return true;
    }


}



/**
 * @member {String} changesetId
 */
ChangesetSummary.prototype['changesetId'] = undefined;

/**
 * @member {String} changesetArn
 */
ChangesetSummary.prototype['changesetArn'] = undefined;

/**
 * @member {String} datasetId
 */
ChangesetSummary.prototype['datasetId'] = undefined;

/**
 * @member {module:model/ChangeType} changeType
 */
ChangesetSummary.prototype['changeType'] = undefined;

/**
 * @member {Object} sourceParams
 */
ChangesetSummary.prototype['sourceParams'] = undefined;

/**
 * @member {Object} formatParams
 */
ChangesetSummary.prototype['formatParams'] = undefined;

/**
 * @member {Number} createTime
 */
ChangesetSummary.prototype['createTime'] = undefined;

/**
 * @member {module:model/IngestionStatus} status
 */
ChangesetSummary.prototype['status'] = undefined;

/**
 * @member {module:model/GetChangesetResponseErrorInfo} errorInfo
 */
ChangesetSummary.prototype['errorInfo'] = undefined;

/**
 * @member {Number} activeUntilTimestamp
 */
ChangesetSummary.prototype['activeUntilTimestamp'] = undefined;

/**
 * @member {Number} activeFromTimestamp
 */
ChangesetSummary.prototype['activeFromTimestamp'] = undefined;

/**
 * @member {String} updatesChangesetId
 */
ChangesetSummary.prototype['updatesChangesetId'] = undefined;

/**
 * @member {String} updatedByChangesetId
 */
ChangesetSummary.prototype['updatedByChangesetId'] = undefined;






export default ChangesetSummary;

