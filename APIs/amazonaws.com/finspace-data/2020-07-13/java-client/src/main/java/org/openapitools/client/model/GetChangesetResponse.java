/*
 * FinSpace Public API
 *  The FinSpace APIs let you take actions inside the FinSpace.
 *
 * The version of the OpenAPI document: 2020-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.ChangeType;
import org.openapitools.client.model.GetChangesetResponseErrorInfo;
import org.openapitools.client.model.IngestionStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The response from a describe changeset operation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:36.596014-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetChangesetResponse {
  public static final String SERIALIZED_NAME_CHANGESET_ID = "changesetId";
  @SerializedName(SERIALIZED_NAME_CHANGESET_ID)
  private String changesetId;

  public static final String SERIALIZED_NAME_CHANGESET_ARN = "changesetArn";
  @SerializedName(SERIALIZED_NAME_CHANGESET_ARN)
  private String changesetArn;

  public static final String SERIALIZED_NAME_DATASET_ID = "datasetId";
  @SerializedName(SERIALIZED_NAME_DATASET_ID)
  private String datasetId;

  public static final String SERIALIZED_NAME_CHANGE_TYPE = "changeType";
  @SerializedName(SERIALIZED_NAME_CHANGE_TYPE)
  private ChangeType changeType;

  public static final String SERIALIZED_NAME_SOURCE_PARAMS = "sourceParams";
  @SerializedName(SERIALIZED_NAME_SOURCE_PARAMS)
  private Map sourceParams;

  public static final String SERIALIZED_NAME_FORMAT_PARAMS = "formatParams";
  @SerializedName(SERIALIZED_NAME_FORMAT_PARAMS)
  private Map formatParams;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private Integer createTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private IngestionStatus status;

  public static final String SERIALIZED_NAME_ERROR_INFO = "errorInfo";
  @SerializedName(SERIALIZED_NAME_ERROR_INFO)
  private GetChangesetResponseErrorInfo errorInfo;

  public static final String SERIALIZED_NAME_ACTIVE_UNTIL_TIMESTAMP = "activeUntilTimestamp";
  @SerializedName(SERIALIZED_NAME_ACTIVE_UNTIL_TIMESTAMP)
  private Integer activeUntilTimestamp;

  public static final String SERIALIZED_NAME_ACTIVE_FROM_TIMESTAMP = "activeFromTimestamp";
  @SerializedName(SERIALIZED_NAME_ACTIVE_FROM_TIMESTAMP)
  private Integer activeFromTimestamp;

  public static final String SERIALIZED_NAME_UPDATES_CHANGESET_ID = "updatesChangesetId";
  @SerializedName(SERIALIZED_NAME_UPDATES_CHANGESET_ID)
  private String updatesChangesetId;

  public static final String SERIALIZED_NAME_UPDATED_BY_CHANGESET_ID = "updatedByChangesetId";
  @SerializedName(SERIALIZED_NAME_UPDATED_BY_CHANGESET_ID)
  private String updatedByChangesetId;

  public GetChangesetResponse() {
  }

  public GetChangesetResponse changesetId(String changesetId) {
    this.changesetId = changesetId;
    return this;
  }

  /**
   * Get changesetId
   * @return changesetId
   */
  @javax.annotation.Nullable
  public String getChangesetId() {
    return changesetId;
  }

  public void setChangesetId(String changesetId) {
    this.changesetId = changesetId;
  }


  public GetChangesetResponse changesetArn(String changesetArn) {
    this.changesetArn = changesetArn;
    return this;
  }

  /**
   * Get changesetArn
   * @return changesetArn
   */
  @javax.annotation.Nullable
  public String getChangesetArn() {
    return changesetArn;
  }

  public void setChangesetArn(String changesetArn) {
    this.changesetArn = changesetArn;
  }


  public GetChangesetResponse datasetId(String datasetId) {
    this.datasetId = datasetId;
    return this;
  }

  /**
   * Get datasetId
   * @return datasetId
   */
  @javax.annotation.Nullable
  public String getDatasetId() {
    return datasetId;
  }

  public void setDatasetId(String datasetId) {
    this.datasetId = datasetId;
  }


  public GetChangesetResponse changeType(ChangeType changeType) {
    this.changeType = changeType;
    return this;
  }

  /**
   * Get changeType
   * @return changeType
   */
  @javax.annotation.Nullable
  public ChangeType getChangeType() {
    return changeType;
  }

  public void setChangeType(ChangeType changeType) {
    this.changeType = changeType;
  }


  public GetChangesetResponse sourceParams(Map sourceParams) {
    this.sourceParams = sourceParams;
    return this;
  }

  /**
   * Get sourceParams
   * @return sourceParams
   */
  @javax.annotation.Nullable
  public Map getSourceParams() {
    return sourceParams;
  }

  public void setSourceParams(Map sourceParams) {
    this.sourceParams = sourceParams;
  }


  public GetChangesetResponse formatParams(Map formatParams) {
    this.formatParams = formatParams;
    return this;
  }

  /**
   * Get formatParams
   * @return formatParams
   */
  @javax.annotation.Nullable
  public Map getFormatParams() {
    return formatParams;
  }

  public void setFormatParams(Map formatParams) {
    this.formatParams = formatParams;
  }


  public GetChangesetResponse createTime(Integer createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Get createTime
   * @return createTime
   */
  @javax.annotation.Nullable
  public Integer getCreateTime() {
    return createTime;
  }

  public void setCreateTime(Integer createTime) {
    this.createTime = createTime;
  }


  public GetChangesetResponse status(IngestionStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public IngestionStatus getStatus() {
    return status;
  }

  public void setStatus(IngestionStatus status) {
    this.status = status;
  }


  public GetChangesetResponse errorInfo(GetChangesetResponseErrorInfo errorInfo) {
    this.errorInfo = errorInfo;
    return this;
  }

  /**
   * Get errorInfo
   * @return errorInfo
   */
  @javax.annotation.Nullable
  public GetChangesetResponseErrorInfo getErrorInfo() {
    return errorInfo;
  }

  public void setErrorInfo(GetChangesetResponseErrorInfo errorInfo) {
    this.errorInfo = errorInfo;
  }


  public GetChangesetResponse activeUntilTimestamp(Integer activeUntilTimestamp) {
    this.activeUntilTimestamp = activeUntilTimestamp;
    return this;
  }

  /**
   * Get activeUntilTimestamp
   * @return activeUntilTimestamp
   */
  @javax.annotation.Nullable
  public Integer getActiveUntilTimestamp() {
    return activeUntilTimestamp;
  }

  public void setActiveUntilTimestamp(Integer activeUntilTimestamp) {
    this.activeUntilTimestamp = activeUntilTimestamp;
  }


  public GetChangesetResponse activeFromTimestamp(Integer activeFromTimestamp) {
    this.activeFromTimestamp = activeFromTimestamp;
    return this;
  }

  /**
   * Get activeFromTimestamp
   * @return activeFromTimestamp
   */
  @javax.annotation.Nullable
  public Integer getActiveFromTimestamp() {
    return activeFromTimestamp;
  }

  public void setActiveFromTimestamp(Integer activeFromTimestamp) {
    this.activeFromTimestamp = activeFromTimestamp;
  }


  public GetChangesetResponse updatesChangesetId(String updatesChangesetId) {
    this.updatesChangesetId = updatesChangesetId;
    return this;
  }

  /**
   * Get updatesChangesetId
   * @return updatesChangesetId
   */
  @javax.annotation.Nullable
  public String getUpdatesChangesetId() {
    return updatesChangesetId;
  }

  public void setUpdatesChangesetId(String updatesChangesetId) {
    this.updatesChangesetId = updatesChangesetId;
  }


  public GetChangesetResponse updatedByChangesetId(String updatedByChangesetId) {
    this.updatedByChangesetId = updatedByChangesetId;
    return this;
  }

  /**
   * Get updatedByChangesetId
   * @return updatedByChangesetId
   */
  @javax.annotation.Nullable
  public String getUpdatedByChangesetId() {
    return updatedByChangesetId;
  }

  public void setUpdatedByChangesetId(String updatedByChangesetId) {
    this.updatedByChangesetId = updatedByChangesetId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetChangesetResponse getChangesetResponse = (GetChangesetResponse) o;
    return Objects.equals(this.changesetId, getChangesetResponse.changesetId) &&
        Objects.equals(this.changesetArn, getChangesetResponse.changesetArn) &&
        Objects.equals(this.datasetId, getChangesetResponse.datasetId) &&
        Objects.equals(this.changeType, getChangesetResponse.changeType) &&
        Objects.equals(this.sourceParams, getChangesetResponse.sourceParams) &&
        Objects.equals(this.formatParams, getChangesetResponse.formatParams) &&
        Objects.equals(this.createTime, getChangesetResponse.createTime) &&
        Objects.equals(this.status, getChangesetResponse.status) &&
        Objects.equals(this.errorInfo, getChangesetResponse.errorInfo) &&
        Objects.equals(this.activeUntilTimestamp, getChangesetResponse.activeUntilTimestamp) &&
        Objects.equals(this.activeFromTimestamp, getChangesetResponse.activeFromTimestamp) &&
        Objects.equals(this.updatesChangesetId, getChangesetResponse.updatesChangesetId) &&
        Objects.equals(this.updatedByChangesetId, getChangesetResponse.updatedByChangesetId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changesetId, changesetArn, datasetId, changeType, sourceParams, formatParams, createTime, status, errorInfo, activeUntilTimestamp, activeFromTimestamp, updatesChangesetId, updatedByChangesetId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetChangesetResponse {\n");
    sb.append("    changesetId: ").append(toIndentedString(changesetId)).append("\n");
    sb.append("    changesetArn: ").append(toIndentedString(changesetArn)).append("\n");
    sb.append("    datasetId: ").append(toIndentedString(datasetId)).append("\n");
    sb.append("    changeType: ").append(toIndentedString(changeType)).append("\n");
    sb.append("    sourceParams: ").append(toIndentedString(sourceParams)).append("\n");
    sb.append("    formatParams: ").append(toIndentedString(formatParams)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    errorInfo: ").append(toIndentedString(errorInfo)).append("\n");
    sb.append("    activeUntilTimestamp: ").append(toIndentedString(activeUntilTimestamp)).append("\n");
    sb.append("    activeFromTimestamp: ").append(toIndentedString(activeFromTimestamp)).append("\n");
    sb.append("    updatesChangesetId: ").append(toIndentedString(updatesChangesetId)).append("\n");
    sb.append("    updatedByChangesetId: ").append(toIndentedString(updatedByChangesetId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("changesetId");
    openapiFields.add("changesetArn");
    openapiFields.add("datasetId");
    openapiFields.add("changeType");
    openapiFields.add("sourceParams");
    openapiFields.add("formatParams");
    openapiFields.add("createTime");
    openapiFields.add("status");
    openapiFields.add("errorInfo");
    openapiFields.add("activeUntilTimestamp");
    openapiFields.add("activeFromTimestamp");
    openapiFields.add("updatesChangesetId");
    openapiFields.add("updatedByChangesetId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetChangesetResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetChangesetResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetChangesetResponse is not found in the empty JSON string", GetChangesetResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetChangesetResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetChangesetResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `changesetId`
      if (jsonObj.get("changesetId") != null && !jsonObj.get("changesetId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("changesetId"));
      }
      // validate the optional field `changesetArn`
      if (jsonObj.get("changesetArn") != null && !jsonObj.get("changesetArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("changesetArn"));
      }
      // validate the optional field `datasetId`
      if (jsonObj.get("datasetId") != null && !jsonObj.get("datasetId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("datasetId"));
      }
      // validate the optional field `changeType`
      if (jsonObj.get("changeType") != null && !jsonObj.get("changeType").isJsonNull()) {
        ChangeType.validateJsonElement(jsonObj.get("changeType"));
      }
      // validate the optional field `sourceParams`
      if (jsonObj.get("sourceParams") != null && !jsonObj.get("sourceParams").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("sourceParams"));
      }
      // validate the optional field `formatParams`
      if (jsonObj.get("formatParams") != null && !jsonObj.get("formatParams").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("formatParams"));
      }
      // validate the optional field `createTime`
      if (jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("createTime"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        IngestionStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `errorInfo`
      if (jsonObj.get("errorInfo") != null && !jsonObj.get("errorInfo").isJsonNull()) {
        GetChangesetResponseErrorInfo.validateJsonElement(jsonObj.get("errorInfo"));
      }
      // validate the optional field `activeUntilTimestamp`
      if (jsonObj.get("activeUntilTimestamp") != null && !jsonObj.get("activeUntilTimestamp").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("activeUntilTimestamp"));
      }
      // validate the optional field `activeFromTimestamp`
      if (jsonObj.get("activeFromTimestamp") != null && !jsonObj.get("activeFromTimestamp").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("activeFromTimestamp"));
      }
      // validate the optional field `updatesChangesetId`
      if (jsonObj.get("updatesChangesetId") != null && !jsonObj.get("updatesChangesetId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("updatesChangesetId"));
      }
      // validate the optional field `updatedByChangesetId`
      if (jsonObj.get("updatedByChangesetId") != null && !jsonObj.get("updatedByChangesetId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("updatedByChangesetId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetChangesetResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetChangesetResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetChangesetResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetChangesetResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetChangesetResponse>() {
           @Override
           public void write(JsonWriter out, GetChangesetResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetChangesetResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetChangesetResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetChangesetResponse
   * @throws IOException if the JSON string is invalid with respect to GetChangesetResponse
   */
  public static GetChangesetResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetChangesetResponse.class);
  }

  /**
   * Convert an instance of GetChangesetResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

