/*
 * FinSpace Public API
 *  The FinSpace APIs let you take actions inside the FinSpace.
 *
 * The version of the OpenAPI document: 2020-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateDataViewRequestDestinationTypeParams;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateDataViewRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:36.596014-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateDataViewRequest {
  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_AUTO_UPDATE = "autoUpdate";
  @SerializedName(SERIALIZED_NAME_AUTO_UPDATE)
  private Boolean autoUpdate;

  public static final String SERIALIZED_NAME_SORT_COLUMNS = "sortColumns";
  @SerializedName(SERIALIZED_NAME_SORT_COLUMNS)
  private List<String> sortColumns = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARTITION_COLUMNS = "partitionColumns";
  @SerializedName(SERIALIZED_NAME_PARTITION_COLUMNS)
  private List<String> partitionColumns = new ArrayList<>();

  public static final String SERIALIZED_NAME_AS_OF_TIMESTAMP = "asOfTimestamp";
  @SerializedName(SERIALIZED_NAME_AS_OF_TIMESTAMP)
  private Integer asOfTimestamp;

  public static final String SERIALIZED_NAME_DESTINATION_TYPE_PARAMS = "destinationTypeParams";
  @SerializedName(SERIALIZED_NAME_DESTINATION_TYPE_PARAMS)
  private CreateDataViewRequestDestinationTypeParams destinationTypeParams;

  public CreateDataViewRequest() {
  }

  public CreateDataViewRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * Idempotence Token for API operations
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public CreateDataViewRequest autoUpdate(Boolean autoUpdate) {
    this.autoUpdate = autoUpdate;
    return this;
  }

  /**
   * Common Boolean data type
   * @return autoUpdate
   */
  @javax.annotation.Nullable
  public Boolean getAutoUpdate() {
    return autoUpdate;
  }

  public void setAutoUpdate(Boolean autoUpdate) {
    this.autoUpdate = autoUpdate;
  }


  public CreateDataViewRequest sortColumns(List<String> sortColumns) {
    this.sortColumns = sortColumns;
    return this;
  }

  public CreateDataViewRequest addSortColumnsItem(String sortColumnsItem) {
    if (this.sortColumns == null) {
      this.sortColumns = new ArrayList<>();
    }
    this.sortColumns.add(sortColumnsItem);
    return this;
  }

  /**
   * DataView Sort Column List
   * @return sortColumns
   */
  @javax.annotation.Nullable
  public List<String> getSortColumns() {
    return sortColumns;
  }

  public void setSortColumns(List<String> sortColumns) {
    this.sortColumns = sortColumns;
  }


  public CreateDataViewRequest partitionColumns(List<String> partitionColumns) {
    this.partitionColumns = partitionColumns;
    return this;
  }

  public CreateDataViewRequest addPartitionColumnsItem(String partitionColumnsItem) {
    if (this.partitionColumns == null) {
      this.partitionColumns = new ArrayList<>();
    }
    this.partitionColumns.add(partitionColumnsItem);
    return this;
  }

  /**
   * DataView Partition Column List
   * @return partitionColumns
   */
  @javax.annotation.Nullable
  public List<String> getPartitionColumns() {
    return partitionColumns;
  }

  public void setPartitionColumns(List<String> partitionColumns) {
    this.partitionColumns = partitionColumns;
  }


  public CreateDataViewRequest asOfTimestamp(Integer asOfTimestamp) {
    this.asOfTimestamp = asOfTimestamp;
    return this;
  }

  /**
   * Milliseconds since UTC epoch
   * @return asOfTimestamp
   */
  @javax.annotation.Nullable
  public Integer getAsOfTimestamp() {
    return asOfTimestamp;
  }

  public void setAsOfTimestamp(Integer asOfTimestamp) {
    this.asOfTimestamp = asOfTimestamp;
  }


  public CreateDataViewRequest destinationTypeParams(CreateDataViewRequestDestinationTypeParams destinationTypeParams) {
    this.destinationTypeParams = destinationTypeParams;
    return this;
  }

  /**
   * Get destinationTypeParams
   * @return destinationTypeParams
   */
  @javax.annotation.Nonnull
  public CreateDataViewRequestDestinationTypeParams getDestinationTypeParams() {
    return destinationTypeParams;
  }

  public void setDestinationTypeParams(CreateDataViewRequestDestinationTypeParams destinationTypeParams) {
    this.destinationTypeParams = destinationTypeParams;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDataViewRequest createDataViewRequest = (CreateDataViewRequest) o;
    return Objects.equals(this.clientToken, createDataViewRequest.clientToken) &&
        Objects.equals(this.autoUpdate, createDataViewRequest.autoUpdate) &&
        Objects.equals(this.sortColumns, createDataViewRequest.sortColumns) &&
        Objects.equals(this.partitionColumns, createDataViewRequest.partitionColumns) &&
        Objects.equals(this.asOfTimestamp, createDataViewRequest.asOfTimestamp) &&
        Objects.equals(this.destinationTypeParams, createDataViewRequest.destinationTypeParams);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientToken, autoUpdate, sortColumns, partitionColumns, asOfTimestamp, destinationTypeParams);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDataViewRequest {\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    autoUpdate: ").append(toIndentedString(autoUpdate)).append("\n");
    sb.append("    sortColumns: ").append(toIndentedString(sortColumns)).append("\n");
    sb.append("    partitionColumns: ").append(toIndentedString(partitionColumns)).append("\n");
    sb.append("    asOfTimestamp: ").append(toIndentedString(asOfTimestamp)).append("\n");
    sb.append("    destinationTypeParams: ").append(toIndentedString(destinationTypeParams)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientToken");
    openapiFields.add("autoUpdate");
    openapiFields.add("sortColumns");
    openapiFields.add("partitionColumns");
    openapiFields.add("asOfTimestamp");
    openapiFields.add("destinationTypeParams");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("destinationTypeParams");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateDataViewRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateDataViewRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDataViewRequest is not found in the empty JSON string", CreateDataViewRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateDataViewRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateDataViewRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateDataViewRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clientToken") != null && !jsonObj.get("clientToken").isJsonNull()) && !jsonObj.get("clientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientToken").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sortColumns") != null && !jsonObj.get("sortColumns").isJsonNull() && !jsonObj.get("sortColumns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sortColumns` to be an array in the JSON string but got `%s`", jsonObj.get("sortColumns").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("partitionColumns") != null && !jsonObj.get("partitionColumns").isJsonNull() && !jsonObj.get("partitionColumns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `partitionColumns` to be an array in the JSON string but got `%s`", jsonObj.get("partitionColumns").toString()));
      }
      // validate the required field `destinationTypeParams`
      CreateDataViewRequestDestinationTypeParams.validateJsonElement(jsonObj.get("destinationTypeParams"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDataViewRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDataViewRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDataViewRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDataViewRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDataViewRequest>() {
           @Override
           public void write(JsonWriter out, CreateDataViewRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDataViewRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateDataViewRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateDataViewRequest
   * @throws IOException if the JSON string is invalid with respect to CreateDataViewRequest
   */
  public static CreateDataViewRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDataViewRequest.class);
  }

  /**
   * Convert an instance of CreateDataViewRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

