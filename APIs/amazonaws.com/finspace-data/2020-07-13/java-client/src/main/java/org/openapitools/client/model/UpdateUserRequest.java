/*
 * FinSpace Public API
 *  The FinSpace APIs let you take actions inside the FinSpace.
 *
 * The version of the OpenAPI document: 2020-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateUserRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:36.596014-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateUserRequest {
  /**
   * &lt;p&gt;The option to indicate the type of user.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SUPER_USER&lt;/code&gt;– A user with permission to all the functionality and data in FinSpace.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;APP_USER&lt;/code&gt; – A user with specific permissions in FinSpace. The users are assigned permissions by adding them to a permission group.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    SUPER_USER("SUPER_USER"),
    
    APP_USER("APP_USER");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  /**
   * &lt;p&gt;The option to indicate whether the user can use the &lt;code&gt;GetProgrammaticAccessCredentials&lt;/code&gt; API to obtain credentials that can then be used to access other FinSpace Data API operations.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ENABLED&lt;/code&gt; – The user has permissions to use the APIs.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DISABLED&lt;/code&gt; – The user does not have permissions to use any APIs.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   */
  @JsonAdapter(ApiAccessEnum.Adapter.class)
  public enum ApiAccessEnum {
    ENABLED("ENABLED"),
    
    DISABLED("DISABLED");

    private String value;

    ApiAccessEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApiAccessEnum fromValue(String value) {
      for (ApiAccessEnum b : ApiAccessEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApiAccessEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApiAccessEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApiAccessEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApiAccessEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ApiAccessEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_API_ACCESS = "apiAccess";
  @SerializedName(SERIALIZED_NAME_API_ACCESS)
  private ApiAccessEnum apiAccess;

  public static final String SERIALIZED_NAME_API_ACCESS_PRINCIPAL_ARN = "apiAccessPrincipalArn";
  @SerializedName(SERIALIZED_NAME_API_ACCESS_PRINCIPAL_ARN)
  private String apiAccessPrincipalArn;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public UpdateUserRequest() {
  }

  public UpdateUserRequest type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * &lt;p&gt;The option to indicate the type of user.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SUPER_USER&lt;/code&gt;– A user with permission to all the functionality and data in FinSpace.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;APP_USER&lt;/code&gt; – A user with specific permissions in FinSpace. The users are assigned permissions by adding them to a permission group.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public UpdateUserRequest firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * The first name of the user.
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public UpdateUserRequest lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * The last name of the user.
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public UpdateUserRequest apiAccess(ApiAccessEnum apiAccess) {
    this.apiAccess = apiAccess;
    return this;
  }

  /**
   * &lt;p&gt;The option to indicate whether the user can use the &lt;code&gt;GetProgrammaticAccessCredentials&lt;/code&gt; API to obtain credentials that can then be used to access other FinSpace Data API operations.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ENABLED&lt;/code&gt; – The user has permissions to use the APIs.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DISABLED&lt;/code&gt; – The user does not have permissions to use any APIs.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return apiAccess
   */
  @javax.annotation.Nullable
  public ApiAccessEnum getApiAccess() {
    return apiAccess;
  }

  public void setApiAccess(ApiAccessEnum apiAccess) {
    this.apiAccess = apiAccess;
  }


  public UpdateUserRequest apiAccessPrincipalArn(String apiAccessPrincipalArn) {
    this.apiAccessPrincipalArn = apiAccessPrincipalArn;
    return this;
  }

  /**
   * The ARN identifier of an AWS user or role that is allowed to call the &lt;code&gt;GetProgrammaticAccessCredentials&lt;/code&gt; API to obtain a credentials token for a specific FinSpace user. This must be an IAM role within your FinSpace account.
   * @return apiAccessPrincipalArn
   */
  @javax.annotation.Nullable
  public String getApiAccessPrincipalArn() {
    return apiAccessPrincipalArn;
  }

  public void setApiAccessPrincipalArn(String apiAccessPrincipalArn) {
    this.apiAccessPrincipalArn = apiAccessPrincipalArn;
  }


  public UpdateUserRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * Idempotence Token for API operations
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateUserRequest updateUserRequest = (UpdateUserRequest) o;
    return Objects.equals(this.type, updateUserRequest.type) &&
        Objects.equals(this.firstName, updateUserRequest.firstName) &&
        Objects.equals(this.lastName, updateUserRequest.lastName) &&
        Objects.equals(this.apiAccess, updateUserRequest.apiAccess) &&
        Objects.equals(this.apiAccessPrincipalArn, updateUserRequest.apiAccessPrincipalArn) &&
        Objects.equals(this.clientToken, updateUserRequest.clientToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, firstName, lastName, apiAccess, apiAccessPrincipalArn, clientToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateUserRequest {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    firstName: ").append("*").append("\n");
    sb.append("    lastName: ").append("*").append("\n");
    sb.append("    apiAccess: ").append(toIndentedString(apiAccess)).append("\n");
    sb.append("    apiAccessPrincipalArn: ").append(toIndentedString(apiAccessPrincipalArn)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("apiAccess");
    openapiFields.add("apiAccessPrincipalArn");
    openapiFields.add("clientToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateUserRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateUserRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateUserRequest is not found in the empty JSON string", UpdateUserRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateUserRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateUserRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("apiAccess") != null && !jsonObj.get("apiAccess").isJsonNull()) && !jsonObj.get("apiAccess").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiAccess` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiAccess").toString()));
      }
      // validate the optional field `apiAccess`
      if (jsonObj.get("apiAccess") != null && !jsonObj.get("apiAccess").isJsonNull()) {
        ApiAccessEnum.validateJsonElement(jsonObj.get("apiAccess"));
      }
      if ((jsonObj.get("apiAccessPrincipalArn") != null && !jsonObj.get("apiAccessPrincipalArn").isJsonNull()) && !jsonObj.get("apiAccessPrincipalArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiAccessPrincipalArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiAccessPrincipalArn").toString()));
      }
      if ((jsonObj.get("clientToken") != null && !jsonObj.get("clientToken").isJsonNull()) && !jsonObj.get("clientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateUserRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateUserRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateUserRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateUserRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateUserRequest>() {
           @Override
           public void write(JsonWriter out, UpdateUserRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateUserRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateUserRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateUserRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateUserRequest
   */
  public static UpdateUserRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateUserRequest.class);
  }

  /**
   * Convert an instance of UpdateUserRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

