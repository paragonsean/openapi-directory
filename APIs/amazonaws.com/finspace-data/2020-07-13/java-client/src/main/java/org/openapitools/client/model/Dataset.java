/*
 * FinSpace Public API
 *  The FinSpace APIs let you take actions inside the FinSpace.
 *
 * The version of the OpenAPI document: 2020-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateDatasetRequestOwnerInfo;
import org.openapitools.client.model.DatasetKind;
import org.openapitools.client.model.GetDatasetResponseSchemaDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The structure for a Dataset.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:36.596014-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dataset {
  public static final String SERIALIZED_NAME_DATASET_ID = "datasetId";
  @SerializedName(SERIALIZED_NAME_DATASET_ID)
  private String datasetId;

  public static final String SERIALIZED_NAME_DATASET_ARN = "datasetArn";
  @SerializedName(SERIALIZED_NAME_DATASET_ARN)
  private String datasetArn;

  public static final String SERIALIZED_NAME_DATASET_TITLE = "datasetTitle";
  @SerializedName(SERIALIZED_NAME_DATASET_TITLE)
  private String datasetTitle;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private DatasetKind kind;

  public static final String SERIALIZED_NAME_DATASET_DESCRIPTION = "datasetDescription";
  @SerializedName(SERIALIZED_NAME_DATASET_DESCRIPTION)
  private String datasetDescription;

  public static final String SERIALIZED_NAME_OWNER_INFO = "ownerInfo";
  @SerializedName(SERIALIZED_NAME_OWNER_INFO)
  private CreateDatasetRequestOwnerInfo ownerInfo;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private Integer createTime;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "lastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private Integer lastModifiedTime;

  public static final String SERIALIZED_NAME_SCHEMA_DEFINITION = "schemaDefinition";
  @SerializedName(SERIALIZED_NAME_SCHEMA_DEFINITION)
  private GetDatasetResponseSchemaDefinition schemaDefinition;

  public static final String SERIALIZED_NAME_ALIAS = "alias";
  @SerializedName(SERIALIZED_NAME_ALIAS)
  private String alias;

  public Dataset() {
  }

  public Dataset datasetId(String datasetId) {
    this.datasetId = datasetId;
    return this;
  }

  /**
   * Get datasetId
   * @return datasetId
   */
  @javax.annotation.Nullable
  public String getDatasetId() {
    return datasetId;
  }

  public void setDatasetId(String datasetId) {
    this.datasetId = datasetId;
  }


  public Dataset datasetArn(String datasetArn) {
    this.datasetArn = datasetArn;
    return this;
  }

  /**
   * Get datasetArn
   * @return datasetArn
   */
  @javax.annotation.Nullable
  public String getDatasetArn() {
    return datasetArn;
  }

  public void setDatasetArn(String datasetArn) {
    this.datasetArn = datasetArn;
  }


  public Dataset datasetTitle(String datasetTitle) {
    this.datasetTitle = datasetTitle;
    return this;
  }

  /**
   * Get datasetTitle
   * @return datasetTitle
   */
  @javax.annotation.Nullable
  public String getDatasetTitle() {
    return datasetTitle;
  }

  public void setDatasetTitle(String datasetTitle) {
    this.datasetTitle = datasetTitle;
  }


  public Dataset kind(DatasetKind kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Get kind
   * @return kind
   */
  @javax.annotation.Nullable
  public DatasetKind getKind() {
    return kind;
  }

  public void setKind(DatasetKind kind) {
    this.kind = kind;
  }


  public Dataset datasetDescription(String datasetDescription) {
    this.datasetDescription = datasetDescription;
    return this;
  }

  /**
   * Get datasetDescription
   * @return datasetDescription
   */
  @javax.annotation.Nullable
  public String getDatasetDescription() {
    return datasetDescription;
  }

  public void setDatasetDescription(String datasetDescription) {
    this.datasetDescription = datasetDescription;
  }


  public Dataset ownerInfo(CreateDatasetRequestOwnerInfo ownerInfo) {
    this.ownerInfo = ownerInfo;
    return this;
  }

  /**
   * Get ownerInfo
   * @return ownerInfo
   */
  @javax.annotation.Nullable
  public CreateDatasetRequestOwnerInfo getOwnerInfo() {
    return ownerInfo;
  }

  public void setOwnerInfo(CreateDatasetRequestOwnerInfo ownerInfo) {
    this.ownerInfo = ownerInfo;
  }


  public Dataset createTime(Integer createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Get createTime
   * @return createTime
   */
  @javax.annotation.Nullable
  public Integer getCreateTime() {
    return createTime;
  }

  public void setCreateTime(Integer createTime) {
    this.createTime = createTime;
  }


  public Dataset lastModifiedTime(Integer lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
    return this;
  }

  /**
   * Get lastModifiedTime
   * @return lastModifiedTime
   */
  @javax.annotation.Nullable
  public Integer getLastModifiedTime() {
    return lastModifiedTime;
  }

  public void setLastModifiedTime(Integer lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
  }


  public Dataset schemaDefinition(GetDatasetResponseSchemaDefinition schemaDefinition) {
    this.schemaDefinition = schemaDefinition;
    return this;
  }

  /**
   * Get schemaDefinition
   * @return schemaDefinition
   */
  @javax.annotation.Nullable
  public GetDatasetResponseSchemaDefinition getSchemaDefinition() {
    return schemaDefinition;
  }

  public void setSchemaDefinition(GetDatasetResponseSchemaDefinition schemaDefinition) {
    this.schemaDefinition = schemaDefinition;
  }


  public Dataset alias(String alias) {
    this.alias = alias;
    return this;
  }

  /**
   * Get alias
   * @return alias
   */
  @javax.annotation.Nullable
  public String getAlias() {
    return alias;
  }

  public void setAlias(String alias) {
    this.alias = alias;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dataset dataset = (Dataset) o;
    return Objects.equals(this.datasetId, dataset.datasetId) &&
        Objects.equals(this.datasetArn, dataset.datasetArn) &&
        Objects.equals(this.datasetTitle, dataset.datasetTitle) &&
        Objects.equals(this.kind, dataset.kind) &&
        Objects.equals(this.datasetDescription, dataset.datasetDescription) &&
        Objects.equals(this.ownerInfo, dataset.ownerInfo) &&
        Objects.equals(this.createTime, dataset.createTime) &&
        Objects.equals(this.lastModifiedTime, dataset.lastModifiedTime) &&
        Objects.equals(this.schemaDefinition, dataset.schemaDefinition) &&
        Objects.equals(this.alias, dataset.alias);
  }

  @Override
  public int hashCode() {
    return Objects.hash(datasetId, datasetArn, datasetTitle, kind, datasetDescription, ownerInfo, createTime, lastModifiedTime, schemaDefinition, alias);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dataset {\n");
    sb.append("    datasetId: ").append(toIndentedString(datasetId)).append("\n");
    sb.append("    datasetArn: ").append(toIndentedString(datasetArn)).append("\n");
    sb.append("    datasetTitle: ").append(toIndentedString(datasetTitle)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    datasetDescription: ").append(toIndentedString(datasetDescription)).append("\n");
    sb.append("    ownerInfo: ").append(toIndentedString(ownerInfo)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    schemaDefinition: ").append(toIndentedString(schemaDefinition)).append("\n");
    sb.append("    alias: ").append(toIndentedString(alias)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("datasetId");
    openapiFields.add("datasetArn");
    openapiFields.add("datasetTitle");
    openapiFields.add("kind");
    openapiFields.add("datasetDescription");
    openapiFields.add("ownerInfo");
    openapiFields.add("createTime");
    openapiFields.add("lastModifiedTime");
    openapiFields.add("schemaDefinition");
    openapiFields.add("alias");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dataset
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dataset.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dataset is not found in the empty JSON string", Dataset.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dataset.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dataset` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `datasetId`
      if (jsonObj.get("datasetId") != null && !jsonObj.get("datasetId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("datasetId"));
      }
      // validate the optional field `datasetArn`
      if (jsonObj.get("datasetArn") != null && !jsonObj.get("datasetArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("datasetArn"));
      }
      // validate the optional field `datasetTitle`
      if (jsonObj.get("datasetTitle") != null && !jsonObj.get("datasetTitle").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("datasetTitle"));
      }
      // validate the optional field `kind`
      if (jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) {
        DatasetKind.validateJsonElement(jsonObj.get("kind"));
      }
      // validate the optional field `datasetDescription`
      if (jsonObj.get("datasetDescription") != null && !jsonObj.get("datasetDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("datasetDescription"));
      }
      // validate the optional field `ownerInfo`
      if (jsonObj.get("ownerInfo") != null && !jsonObj.get("ownerInfo").isJsonNull()) {
        CreateDatasetRequestOwnerInfo.validateJsonElement(jsonObj.get("ownerInfo"));
      }
      // validate the optional field `createTime`
      if (jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("createTime"));
      }
      // validate the optional field `lastModifiedTime`
      if (jsonObj.get("lastModifiedTime") != null && !jsonObj.get("lastModifiedTime").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("lastModifiedTime"));
      }
      // validate the optional field `schemaDefinition`
      if (jsonObj.get("schemaDefinition") != null && !jsonObj.get("schemaDefinition").isJsonNull()) {
        GetDatasetResponseSchemaDefinition.validateJsonElement(jsonObj.get("schemaDefinition"));
      }
      // validate the optional field `alias`
      if (jsonObj.get("alias") != null && !jsonObj.get("alias").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("alias"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dataset.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dataset' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dataset> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dataset.class));

       return (TypeAdapter<T>) new TypeAdapter<Dataset>() {
           @Override
           public void write(JsonWriter out, Dataset value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dataset read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dataset given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dataset
   * @throws IOException if the JSON string is invalid with respect to Dataset
   */
  public static Dataset fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dataset.class);
  }

  /**
   * Convert an instance of Dataset to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

