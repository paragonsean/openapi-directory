/*
 * FinSpace Public API
 *  The FinSpace APIs let you take actions inside the FinSpace.
 *
 * The version of the OpenAPI document: 2020-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DataViewStatus;
import org.openapitools.client.model.GetDataViewResponseDestinationTypeParams;
import org.openapitools.client.model.GetDataViewResponseErrorInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response from retrieving a dataview, which includes details on the target database and table name
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:36.596014-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetDataViewResponse {
  public static final String SERIALIZED_NAME_AUTO_UPDATE = "autoUpdate";
  @SerializedName(SERIALIZED_NAME_AUTO_UPDATE)
  private Boolean autoUpdate;

  public static final String SERIALIZED_NAME_PARTITION_COLUMNS = "partitionColumns";
  @SerializedName(SERIALIZED_NAME_PARTITION_COLUMNS)
  private List partitionColumns;

  public static final String SERIALIZED_NAME_DATASET_ID = "datasetId";
  @SerializedName(SERIALIZED_NAME_DATASET_ID)
  private String datasetId;

  public static final String SERIALIZED_NAME_AS_OF_TIMESTAMP = "asOfTimestamp";
  @SerializedName(SERIALIZED_NAME_AS_OF_TIMESTAMP)
  private Integer asOfTimestamp;

  public static final String SERIALIZED_NAME_ERROR_INFO = "errorInfo";
  @SerializedName(SERIALIZED_NAME_ERROR_INFO)
  private GetDataViewResponseErrorInfo errorInfo;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "lastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private Integer lastModifiedTime;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private Integer createTime;

  public static final String SERIALIZED_NAME_SORT_COLUMNS = "sortColumns";
  @SerializedName(SERIALIZED_NAME_SORT_COLUMNS)
  private List sortColumns;

  public static final String SERIALIZED_NAME_DATA_VIEW_ID = "dataViewId";
  @SerializedName(SERIALIZED_NAME_DATA_VIEW_ID)
  private String dataViewId;

  public static final String SERIALIZED_NAME_DATA_VIEW_ARN = "dataViewArn";
  @SerializedName(SERIALIZED_NAME_DATA_VIEW_ARN)
  private String dataViewArn;

  public static final String SERIALIZED_NAME_DESTINATION_TYPE_PARAMS = "destinationTypeParams";
  @SerializedName(SERIALIZED_NAME_DESTINATION_TYPE_PARAMS)
  private GetDataViewResponseDestinationTypeParams destinationTypeParams;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private DataViewStatus status;

  public GetDataViewResponse() {
  }

  public GetDataViewResponse autoUpdate(Boolean autoUpdate) {
    this.autoUpdate = autoUpdate;
    return this;
  }

  /**
   * Get autoUpdate
   * @return autoUpdate
   */
  @javax.annotation.Nullable
  public Boolean getAutoUpdate() {
    return autoUpdate;
  }

  public void setAutoUpdate(Boolean autoUpdate) {
    this.autoUpdate = autoUpdate;
  }


  public GetDataViewResponse partitionColumns(List partitionColumns) {
    this.partitionColumns = partitionColumns;
    return this;
  }

  /**
   * Get partitionColumns
   * @return partitionColumns
   */
  @javax.annotation.Nullable
  public List getPartitionColumns() {
    return partitionColumns;
  }

  public void setPartitionColumns(List partitionColumns) {
    this.partitionColumns = partitionColumns;
  }


  public GetDataViewResponse datasetId(String datasetId) {
    this.datasetId = datasetId;
    return this;
  }

  /**
   * Get datasetId
   * @return datasetId
   */
  @javax.annotation.Nullable
  public String getDatasetId() {
    return datasetId;
  }

  public void setDatasetId(String datasetId) {
    this.datasetId = datasetId;
  }


  public GetDataViewResponse asOfTimestamp(Integer asOfTimestamp) {
    this.asOfTimestamp = asOfTimestamp;
    return this;
  }

  /**
   * Get asOfTimestamp
   * @return asOfTimestamp
   */
  @javax.annotation.Nullable
  public Integer getAsOfTimestamp() {
    return asOfTimestamp;
  }

  public void setAsOfTimestamp(Integer asOfTimestamp) {
    this.asOfTimestamp = asOfTimestamp;
  }


  public GetDataViewResponse errorInfo(GetDataViewResponseErrorInfo errorInfo) {
    this.errorInfo = errorInfo;
    return this;
  }

  /**
   * Get errorInfo
   * @return errorInfo
   */
  @javax.annotation.Nullable
  public GetDataViewResponseErrorInfo getErrorInfo() {
    return errorInfo;
  }

  public void setErrorInfo(GetDataViewResponseErrorInfo errorInfo) {
    this.errorInfo = errorInfo;
  }


  public GetDataViewResponse lastModifiedTime(Integer lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
    return this;
  }

  /**
   * Get lastModifiedTime
   * @return lastModifiedTime
   */
  @javax.annotation.Nullable
  public Integer getLastModifiedTime() {
    return lastModifiedTime;
  }

  public void setLastModifiedTime(Integer lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
  }


  public GetDataViewResponse createTime(Integer createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Get createTime
   * @return createTime
   */
  @javax.annotation.Nullable
  public Integer getCreateTime() {
    return createTime;
  }

  public void setCreateTime(Integer createTime) {
    this.createTime = createTime;
  }


  public GetDataViewResponse sortColumns(List sortColumns) {
    this.sortColumns = sortColumns;
    return this;
  }

  /**
   * Get sortColumns
   * @return sortColumns
   */
  @javax.annotation.Nullable
  public List getSortColumns() {
    return sortColumns;
  }

  public void setSortColumns(List sortColumns) {
    this.sortColumns = sortColumns;
  }


  public GetDataViewResponse dataViewId(String dataViewId) {
    this.dataViewId = dataViewId;
    return this;
  }

  /**
   * Get dataViewId
   * @return dataViewId
   */
  @javax.annotation.Nullable
  public String getDataViewId() {
    return dataViewId;
  }

  public void setDataViewId(String dataViewId) {
    this.dataViewId = dataViewId;
  }


  public GetDataViewResponse dataViewArn(String dataViewArn) {
    this.dataViewArn = dataViewArn;
    return this;
  }

  /**
   * Get dataViewArn
   * @return dataViewArn
   */
  @javax.annotation.Nullable
  public String getDataViewArn() {
    return dataViewArn;
  }

  public void setDataViewArn(String dataViewArn) {
    this.dataViewArn = dataViewArn;
  }


  public GetDataViewResponse destinationTypeParams(GetDataViewResponseDestinationTypeParams destinationTypeParams) {
    this.destinationTypeParams = destinationTypeParams;
    return this;
  }

  /**
   * Get destinationTypeParams
   * @return destinationTypeParams
   */
  @javax.annotation.Nullable
  public GetDataViewResponseDestinationTypeParams getDestinationTypeParams() {
    return destinationTypeParams;
  }

  public void setDestinationTypeParams(GetDataViewResponseDestinationTypeParams destinationTypeParams) {
    this.destinationTypeParams = destinationTypeParams;
  }


  public GetDataViewResponse status(DataViewStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public DataViewStatus getStatus() {
    return status;
  }

  public void setStatus(DataViewStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetDataViewResponse getDataViewResponse = (GetDataViewResponse) o;
    return Objects.equals(this.autoUpdate, getDataViewResponse.autoUpdate) &&
        Objects.equals(this.partitionColumns, getDataViewResponse.partitionColumns) &&
        Objects.equals(this.datasetId, getDataViewResponse.datasetId) &&
        Objects.equals(this.asOfTimestamp, getDataViewResponse.asOfTimestamp) &&
        Objects.equals(this.errorInfo, getDataViewResponse.errorInfo) &&
        Objects.equals(this.lastModifiedTime, getDataViewResponse.lastModifiedTime) &&
        Objects.equals(this.createTime, getDataViewResponse.createTime) &&
        Objects.equals(this.sortColumns, getDataViewResponse.sortColumns) &&
        Objects.equals(this.dataViewId, getDataViewResponse.dataViewId) &&
        Objects.equals(this.dataViewArn, getDataViewResponse.dataViewArn) &&
        Objects.equals(this.destinationTypeParams, getDataViewResponse.destinationTypeParams) &&
        Objects.equals(this.status, getDataViewResponse.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoUpdate, partitionColumns, datasetId, asOfTimestamp, errorInfo, lastModifiedTime, createTime, sortColumns, dataViewId, dataViewArn, destinationTypeParams, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetDataViewResponse {\n");
    sb.append("    autoUpdate: ").append(toIndentedString(autoUpdate)).append("\n");
    sb.append("    partitionColumns: ").append(toIndentedString(partitionColumns)).append("\n");
    sb.append("    datasetId: ").append(toIndentedString(datasetId)).append("\n");
    sb.append("    asOfTimestamp: ").append(toIndentedString(asOfTimestamp)).append("\n");
    sb.append("    errorInfo: ").append(toIndentedString(errorInfo)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    sortColumns: ").append(toIndentedString(sortColumns)).append("\n");
    sb.append("    dataViewId: ").append(toIndentedString(dataViewId)).append("\n");
    sb.append("    dataViewArn: ").append(toIndentedString(dataViewArn)).append("\n");
    sb.append("    destinationTypeParams: ").append(toIndentedString(destinationTypeParams)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoUpdate");
    openapiFields.add("partitionColumns");
    openapiFields.add("datasetId");
    openapiFields.add("asOfTimestamp");
    openapiFields.add("errorInfo");
    openapiFields.add("lastModifiedTime");
    openapiFields.add("createTime");
    openapiFields.add("sortColumns");
    openapiFields.add("dataViewId");
    openapiFields.add("dataViewArn");
    openapiFields.add("destinationTypeParams");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetDataViewResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetDataViewResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetDataViewResponse is not found in the empty JSON string", GetDataViewResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetDataViewResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetDataViewResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `autoUpdate`
      if (jsonObj.get("autoUpdate") != null && !jsonObj.get("autoUpdate").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("autoUpdate"));
      }
      // validate the optional field `partitionColumns`
      if (jsonObj.get("partitionColumns") != null && !jsonObj.get("partitionColumns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("partitionColumns"));
      }
      // validate the optional field `datasetId`
      if (jsonObj.get("datasetId") != null && !jsonObj.get("datasetId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("datasetId"));
      }
      // validate the optional field `asOfTimestamp`
      if (jsonObj.get("asOfTimestamp") != null && !jsonObj.get("asOfTimestamp").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("asOfTimestamp"));
      }
      // validate the optional field `errorInfo`
      if (jsonObj.get("errorInfo") != null && !jsonObj.get("errorInfo").isJsonNull()) {
        GetDataViewResponseErrorInfo.validateJsonElement(jsonObj.get("errorInfo"));
      }
      // validate the optional field `lastModifiedTime`
      if (jsonObj.get("lastModifiedTime") != null && !jsonObj.get("lastModifiedTime").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("lastModifiedTime"));
      }
      // validate the optional field `createTime`
      if (jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("createTime"));
      }
      // validate the optional field `sortColumns`
      if (jsonObj.get("sortColumns") != null && !jsonObj.get("sortColumns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("sortColumns"));
      }
      // validate the optional field `dataViewId`
      if (jsonObj.get("dataViewId") != null && !jsonObj.get("dataViewId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("dataViewId"));
      }
      // validate the optional field `dataViewArn`
      if (jsonObj.get("dataViewArn") != null && !jsonObj.get("dataViewArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("dataViewArn"));
      }
      // validate the optional field `destinationTypeParams`
      if (jsonObj.get("destinationTypeParams") != null && !jsonObj.get("destinationTypeParams").isJsonNull()) {
        GetDataViewResponseDestinationTypeParams.validateJsonElement(jsonObj.get("destinationTypeParams"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        DataViewStatus.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetDataViewResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetDataViewResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetDataViewResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetDataViewResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetDataViewResponse>() {
           @Override
           public void write(JsonWriter out, GetDataViewResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetDataViewResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetDataViewResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetDataViewResponse
   * @throws IOException if the JSON string is invalid with respect to GetDataViewResponse
   */
  public static GetDataViewResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetDataViewResponse.class);
  }

  /**
   * Convert an instance of GetDataViewResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

