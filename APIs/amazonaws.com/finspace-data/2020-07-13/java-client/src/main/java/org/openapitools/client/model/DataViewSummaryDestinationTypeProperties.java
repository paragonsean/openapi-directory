/*
 * FinSpace Public API
 *  The FinSpace APIs let you take actions inside the FinSpace.
 *
 * The version of the OpenAPI document: 2020-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.ExportFileFormat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DataViewSummaryDestinationTypeProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:36.596014-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataViewSummaryDestinationTypeProperties {
  public static final String SERIALIZED_NAME_DESTINATION_TYPE = "destinationType";
  @SerializedName(SERIALIZED_NAME_DESTINATION_TYPE)
  private String destinationType;

  public static final String SERIALIZED_NAME_S3_DESTINATION_EXPORT_FILE_FORMAT = "s3DestinationExportFileFormat";
  @SerializedName(SERIALIZED_NAME_S3_DESTINATION_EXPORT_FILE_FORMAT)
  private ExportFileFormat s3DestinationExportFileFormat;

  public static final String SERIALIZED_NAME_S3_DESTINATION_EXPORT_FILE_FORMAT_OPTIONS = "s3DestinationExportFileFormatOptions";
  @SerializedName(SERIALIZED_NAME_S3_DESTINATION_EXPORT_FILE_FORMAT_OPTIONS)
  private Map s3DestinationExportFileFormatOptions;

  public DataViewSummaryDestinationTypeProperties() {
  }

  public DataViewSummaryDestinationTypeProperties destinationType(String destinationType) {
    this.destinationType = destinationType;
    return this;
  }

  /**
   * Get destinationType
   * @return destinationType
   */
  @javax.annotation.Nonnull
  public String getDestinationType() {
    return destinationType;
  }

  public void setDestinationType(String destinationType) {
    this.destinationType = destinationType;
  }


  public DataViewSummaryDestinationTypeProperties s3DestinationExportFileFormat(ExportFileFormat s3DestinationExportFileFormat) {
    this.s3DestinationExportFileFormat = s3DestinationExportFileFormat;
    return this;
  }

  /**
   * Get s3DestinationExportFileFormat
   * @return s3DestinationExportFileFormat
   */
  @javax.annotation.Nullable
  public ExportFileFormat getS3DestinationExportFileFormat() {
    return s3DestinationExportFileFormat;
  }

  public void setS3DestinationExportFileFormat(ExportFileFormat s3DestinationExportFileFormat) {
    this.s3DestinationExportFileFormat = s3DestinationExportFileFormat;
  }


  public DataViewSummaryDestinationTypeProperties s3DestinationExportFileFormatOptions(Map s3DestinationExportFileFormatOptions) {
    this.s3DestinationExportFileFormatOptions = s3DestinationExportFileFormatOptions;
    return this;
  }

  /**
   * Get s3DestinationExportFileFormatOptions
   * @return s3DestinationExportFileFormatOptions
   */
  @javax.annotation.Nullable
  public Map getS3DestinationExportFileFormatOptions() {
    return s3DestinationExportFileFormatOptions;
  }

  public void setS3DestinationExportFileFormatOptions(Map s3DestinationExportFileFormatOptions) {
    this.s3DestinationExportFileFormatOptions = s3DestinationExportFileFormatOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataViewSummaryDestinationTypeProperties dataViewSummaryDestinationTypeProperties = (DataViewSummaryDestinationTypeProperties) o;
    return Objects.equals(this.destinationType, dataViewSummaryDestinationTypeProperties.destinationType) &&
        Objects.equals(this.s3DestinationExportFileFormat, dataViewSummaryDestinationTypeProperties.s3DestinationExportFileFormat) &&
        Objects.equals(this.s3DestinationExportFileFormatOptions, dataViewSummaryDestinationTypeProperties.s3DestinationExportFileFormatOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinationType, s3DestinationExportFileFormat, s3DestinationExportFileFormatOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataViewSummaryDestinationTypeProperties {\n");
    sb.append("    destinationType: ").append(toIndentedString(destinationType)).append("\n");
    sb.append("    s3DestinationExportFileFormat: ").append(toIndentedString(s3DestinationExportFileFormat)).append("\n");
    sb.append("    s3DestinationExportFileFormatOptions: ").append(toIndentedString(s3DestinationExportFileFormatOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destinationType");
    openapiFields.add("s3DestinationExportFileFormat");
    openapiFields.add("s3DestinationExportFileFormatOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("destinationType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataViewSummaryDestinationTypeProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataViewSummaryDestinationTypeProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataViewSummaryDestinationTypeProperties is not found in the empty JSON string", DataViewSummaryDestinationTypeProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataViewSummaryDestinationTypeProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataViewSummaryDestinationTypeProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DataViewSummaryDestinationTypeProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `destinationType`
      String.validateJsonElement(jsonObj.get("destinationType"));
      // validate the optional field `s3DestinationExportFileFormat`
      if (jsonObj.get("s3DestinationExportFileFormat") != null && !jsonObj.get("s3DestinationExportFileFormat").isJsonNull()) {
        ExportFileFormat.validateJsonElement(jsonObj.get("s3DestinationExportFileFormat"));
      }
      // validate the optional field `s3DestinationExportFileFormatOptions`
      if (jsonObj.get("s3DestinationExportFileFormatOptions") != null && !jsonObj.get("s3DestinationExportFileFormatOptions").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("s3DestinationExportFileFormatOptions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataViewSummaryDestinationTypeProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataViewSummaryDestinationTypeProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataViewSummaryDestinationTypeProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataViewSummaryDestinationTypeProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DataViewSummaryDestinationTypeProperties>() {
           @Override
           public void write(JsonWriter out, DataViewSummaryDestinationTypeProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataViewSummaryDestinationTypeProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataViewSummaryDestinationTypeProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataViewSummaryDestinationTypeProperties
   * @throws IOException if the JSON string is invalid with respect to DataViewSummaryDestinationTypeProperties
   */
  public static DataViewSummaryDestinationTypeProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataViewSummaryDestinationTypeProperties.class);
  }

  /**
   * Convert an instance of DataViewSummaryDestinationTypeProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

