/*
 * FinSpace Public API
 *  The FinSpace APIs let you take actions inside the FinSpace.
 *
 * The version of the OpenAPI document: 2020-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetWorkingLocationResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:36.596014-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetWorkingLocationResponse {
  public static final String SERIALIZED_NAME_S3_URI = "s3Uri";
  @SerializedName(SERIALIZED_NAME_S3_URI)
  private String s3Uri;

  public static final String SERIALIZED_NAME_S3_PATH = "s3Path";
  @SerializedName(SERIALIZED_NAME_S3_PATH)
  private String s3Path;

  public static final String SERIALIZED_NAME_S3_BUCKET = "s3Bucket";
  @SerializedName(SERIALIZED_NAME_S3_BUCKET)
  private String s3Bucket;

  public GetWorkingLocationResponse() {
  }

  public GetWorkingLocationResponse s3Uri(String s3Uri) {
    this.s3Uri = s3Uri;
    return this;
  }

  /**
   * Get s3Uri
   * @return s3Uri
   */
  @javax.annotation.Nullable
  public String getS3Uri() {
    return s3Uri;
  }

  public void setS3Uri(String s3Uri) {
    this.s3Uri = s3Uri;
  }


  public GetWorkingLocationResponse s3Path(String s3Path) {
    this.s3Path = s3Path;
    return this;
  }

  /**
   * Get s3Path
   * @return s3Path
   */
  @javax.annotation.Nullable
  public String getS3Path() {
    return s3Path;
  }

  public void setS3Path(String s3Path) {
    this.s3Path = s3Path;
  }


  public GetWorkingLocationResponse s3Bucket(String s3Bucket) {
    this.s3Bucket = s3Bucket;
    return this;
  }

  /**
   * Get s3Bucket
   * @return s3Bucket
   */
  @javax.annotation.Nullable
  public String getS3Bucket() {
    return s3Bucket;
  }

  public void setS3Bucket(String s3Bucket) {
    this.s3Bucket = s3Bucket;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetWorkingLocationResponse getWorkingLocationResponse = (GetWorkingLocationResponse) o;
    return Objects.equals(this.s3Uri, getWorkingLocationResponse.s3Uri) &&
        Objects.equals(this.s3Path, getWorkingLocationResponse.s3Path) &&
        Objects.equals(this.s3Bucket, getWorkingLocationResponse.s3Bucket);
  }

  @Override
  public int hashCode() {
    return Objects.hash(s3Uri, s3Path, s3Bucket);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetWorkingLocationResponse {\n");
    sb.append("    s3Uri: ").append(toIndentedString(s3Uri)).append("\n");
    sb.append("    s3Path: ").append(toIndentedString(s3Path)).append("\n");
    sb.append("    s3Bucket: ").append(toIndentedString(s3Bucket)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("s3Uri");
    openapiFields.add("s3Path");
    openapiFields.add("s3Bucket");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetWorkingLocationResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetWorkingLocationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetWorkingLocationResponse is not found in the empty JSON string", GetWorkingLocationResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetWorkingLocationResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetWorkingLocationResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `s3Uri`
      if (jsonObj.get("s3Uri") != null && !jsonObj.get("s3Uri").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("s3Uri"));
      }
      // validate the optional field `s3Path`
      if (jsonObj.get("s3Path") != null && !jsonObj.get("s3Path").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("s3Path"));
      }
      // validate the optional field `s3Bucket`
      if (jsonObj.get("s3Bucket") != null && !jsonObj.get("s3Bucket").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("s3Bucket"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetWorkingLocationResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetWorkingLocationResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetWorkingLocationResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetWorkingLocationResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetWorkingLocationResponse>() {
           @Override
           public void write(JsonWriter out, GetWorkingLocationResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetWorkingLocationResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetWorkingLocationResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetWorkingLocationResponse
   * @throws IOException if the JSON string is invalid with respect to GetWorkingLocationResponse
   */
  public static GetWorkingLocationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetWorkingLocationResponse.class);
  }

  /**
   * Convert an instance of GetWorkingLocationResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

