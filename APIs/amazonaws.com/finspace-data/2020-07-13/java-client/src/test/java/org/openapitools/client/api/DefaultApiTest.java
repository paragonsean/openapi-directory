/*
 * FinSpace Public API
 *  The FinSpace APIs let you take actions inside the FinSpace.
 *
 * The version of the OpenAPI document: 2020-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AssociateUserToPermissionGroupRequest;
import org.openapitools.client.model.AssociateUserToPermissionGroupResponse;
import org.openapitools.client.model.CreateChangesetRequest;
import org.openapitools.client.model.CreateChangesetResponse;
import org.openapitools.client.model.CreateDataViewRequest;
import org.openapitools.client.model.CreateDataViewResponse;
import org.openapitools.client.model.CreateDatasetRequest;
import org.openapitools.client.model.CreateDatasetResponse;
import org.openapitools.client.model.CreatePermissionGroupRequest;
import org.openapitools.client.model.CreatePermissionGroupResponse;
import org.openapitools.client.model.CreateUserRequest;
import org.openapitools.client.model.CreateUserResponse;
import org.openapitools.client.model.DeleteDatasetResponse;
import org.openapitools.client.model.DeletePermissionGroupResponse;
import org.openapitools.client.model.DisableUserResponse;
import org.openapitools.client.model.DisassociateUserFromPermissionGroupResponse;
import org.openapitools.client.model.EnableUserResponse;
import org.openapitools.client.model.GetChangesetResponse;
import org.openapitools.client.model.GetDataViewResponse;
import org.openapitools.client.model.GetDatasetResponse;
import org.openapitools.client.model.GetExternalDataViewAccessDetailsResponse;
import org.openapitools.client.model.GetPermissionGroupResponse;
import org.openapitools.client.model.GetProgrammaticAccessCredentialsResponse;
import org.openapitools.client.model.GetUserResponse;
import org.openapitools.client.model.GetWorkingLocationRequest;
import org.openapitools.client.model.GetWorkingLocationResponse;
import org.openapitools.client.model.ListChangesetsResponse;
import org.openapitools.client.model.ListDataViewsResponse;
import org.openapitools.client.model.ListDatasetsResponse;
import org.openapitools.client.model.ListPermissionGroupsByUserResponse;
import org.openapitools.client.model.ListPermissionGroupsResponse;
import org.openapitools.client.model.ListUsersByPermissionGroupResponse;
import org.openapitools.client.model.ListUsersResponse;
import org.openapitools.client.model.ResetUserPasswordResponse;
import org.openapitools.client.model.UpdateChangesetRequest;
import org.openapitools.client.model.UpdateChangesetResponse;
import org.openapitools.client.model.UpdateDatasetRequest;
import org.openapitools.client.model.UpdateDatasetResponse;
import org.openapitools.client.model.UpdatePermissionGroupRequest;
import org.openapitools.client.model.UpdatePermissionGroupResponse;
import org.openapitools.client.model.UpdateUserRequest;
import org.openapitools.client.model.UpdateUserResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Adds a user account to a permission group to grant permissions for actions a user can perform in FinSpace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateUserToPermissionGroupTest() throws ApiException {
        String permissionGroupId = null;
        String userId = null;
        AssociateUserToPermissionGroupRequest associateUserToPermissionGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AssociateUserToPermissionGroupResponse response = api.associateUserToPermissionGroup(permissionGroupId, userId, associateUserToPermissionGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new Changeset in a FinSpace Dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createChangesetTest() throws ApiException {
        String datasetId = null;
        CreateChangesetRequest createChangesetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateChangesetResponse response = api.createChangeset(datasetId, createChangesetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a Dataview for a Dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDataViewTest() throws ApiException {
        String datasetId = null;
        CreateDataViewRequest createDataViewRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDataViewResponse response = api.createDataView(datasetId, createDataViewRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new FinSpace Dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDatasetTest() throws ApiException {
        CreateDatasetRequest createDatasetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDatasetResponse response = api.createDataset(createDatasetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a group of permissions for various actions that a user can perform in FinSpace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPermissionGroupTest() throws ApiException {
        CreatePermissionGroupRequest createPermissionGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreatePermissionGroupResponse response = api.createPermissionGroup(createPermissionGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new user in FinSpace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        CreateUserRequest createUserRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateUserResponse response = api.createUser(createUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a FinSpace Dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDatasetTest() throws ApiException {
        String datasetId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String clientToken = null;
        DeleteDatasetResponse response = api.deleteDataset(datasetId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clientToken);
        // TODO: test validations
    }

    /**
     * Deletes a permission group. This action is irreversible.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePermissionGroupTest() throws ApiException {
        String permissionGroupId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String clientToken = null;
        DeletePermissionGroupResponse response = api.deletePermissionGroup(permissionGroupId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clientToken);
        // TODO: test validations
    }

    /**
     * Denies access to the FinSpace web application and API for the specified user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableUserTest() throws ApiException {
        String userId = null;
        AssociateUserToPermissionGroupRequest associateUserToPermissionGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DisableUserResponse response = api.disableUser(userId, associateUserToPermissionGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes a user account from a permission group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateUserFromPermissionGroupTest() throws ApiException {
        String permissionGroupId = null;
        String userId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String clientToken = null;
        DisassociateUserFromPermissionGroupResponse response = api.disassociateUserFromPermissionGroup(permissionGroupId, userId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clientToken);
        // TODO: test validations
    }

    /**
     *  Allows the specified user to access the FinSpace web application and API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableUserTest() throws ApiException {
        String userId = null;
        AssociateUserToPermissionGroupRequest associateUserToPermissionGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        EnableUserResponse response = api.enableUser(userId, associateUserToPermissionGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get information about a Changeset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChangesetTest() throws ApiException {
        String datasetId = null;
        String changesetId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetChangesetResponse response = api.getChangeset(datasetId, changesetId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a Dataview.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataViewTest() throws ApiException {
        String dataviewId = null;
        String datasetId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDataViewResponse response = api.getDataView(dataviewId, datasetId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about a Dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDatasetTest() throws ApiException {
        String datasetId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDatasetResponse response = api.getDataset(datasetId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns the credentials to access the external Dataview from an S3 location. To call this API:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You must retrieve the programmatic credentials.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You must be a member of a FinSpace user group, where the dataset that you want to access has &lt;code&gt;Read Dataset Data&lt;/code&gt; permissions.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExternalDataViewAccessDetailsTest() throws ApiException {
        String dataviewId = null;
        String datasetId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetExternalDataViewAccessDetailsResponse response = api.getExternalDataViewAccessDetails(dataviewId, datasetId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the details of a specific permission group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPermissionGroupTest() throws ApiException {
        String permissionGroupId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetPermissionGroupResponse response = api.getPermissionGroup(permissionGroupId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Request programmatic credentials to use with FinSpace SDK.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProgrammaticAccessCredentialsTest() throws ApiException {
        String environmentId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer durationInMinutes = null;
        GetProgrammaticAccessCredentialsResponse response = api.getProgrammaticAccessCredentials(environmentId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, durationInMinutes);
        // TODO: test validations
    }

    /**
     * Retrieves details for a specific user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        String userId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetUserResponse response = api.getUser(userId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * A temporary Amazon S3 location, where you can copy your files from a source location to stage or use as a scratch space in FinSpace notebook.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkingLocationTest() throws ApiException {
        GetWorkingLocationRequest getWorkingLocationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetWorkingLocationResponse response = api.getWorkingLocation(getWorkingLocationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists the FinSpace Changesets for a Dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listChangesetsTest() throws ApiException {
        String datasetId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListChangesetsResponse response = api.listChangesets(datasetId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all available Dataviews for a Dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDataViewsTest() throws ApiException {
        String datasetId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListDataViewsResponse response = api.listDataViews(datasetId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * Lists all of the active Datasets that a user has access to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDatasetsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListDatasetsResponse response = api.listDatasets(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * Lists all available permission groups in FinSpace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPermissionGroupsTest() throws ApiException {
        Integer maxResults = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListPermissionGroupsResponse response = api.listPermissionGroups(maxResults, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all the permission groups that are associated with a specific user account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPermissionGroupsByUserTest() throws ApiException {
        String userId = null;
        Integer maxResults = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListPermissionGroupsByUserResponse response = api.listPermissionGroupsByUser(userId, maxResults, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all available user accounts in FinSpace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUsersTest() throws ApiException {
        Integer maxResults = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListUsersResponse response = api.listUsers(maxResults, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Lists details of all the users in a specific permission group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUsersByPermissionGroupTest() throws ApiException {
        String permissionGroupId = null;
        Integer maxResults = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListUsersByPermissionGroupResponse response = api.listUsersByPermissionGroup(permissionGroupId, maxResults, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Resets the password for a specified user ID and generates a temporary one. Only a superuser can reset password for other users. Resetting the password immediately invalidates the previous password associated with the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetUserPasswordTest() throws ApiException {
        String userId = null;
        AssociateUserToPermissionGroupRequest associateUserToPermissionGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ResetUserPasswordResponse response = api.resetUserPassword(userId, associateUserToPermissionGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a FinSpace Changeset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateChangesetTest() throws ApiException {
        String datasetId = null;
        String changesetId = null;
        UpdateChangesetRequest updateChangesetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateChangesetResponse response = api.updateChangeset(datasetId, changesetId, updateChangesetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a FinSpace Dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDatasetTest() throws ApiException {
        String datasetId = null;
        UpdateDatasetRequest updateDatasetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateDatasetResponse response = api.updateDataset(datasetId, updateDatasetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Modifies the details of a permission group. You cannot modify a &lt;code&gt;permissionGroupID&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePermissionGroupTest() throws ApiException {
        String permissionGroupId = null;
        UpdatePermissionGroupRequest updatePermissionGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdatePermissionGroupResponse response = api.updatePermissionGroup(permissionGroupId, updatePermissionGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Modifies the details of the specified user account. You cannot update the &lt;code&gt;userId&lt;/code&gt; for a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        String userId = null;
        UpdateUserRequest updateUserRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateUserResponse response = api.updateUser(userId, updateUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
