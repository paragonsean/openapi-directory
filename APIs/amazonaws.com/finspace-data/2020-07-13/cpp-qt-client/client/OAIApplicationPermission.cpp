/**
 * FinSpace Public API
 *  The FinSpace APIs let you take actions inside the FinSpace.
 *
 * The version of the OpenAPI document: 2020-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationPermission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationPermission::OAIApplicationPermission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationPermission::OAIApplicationPermission() {
    this->initializeModel();
}

OAIApplicationPermission::~OAIApplicationPermission() {}

void OAIApplicationPermission::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIApplicationPermission::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIApplicationPermission::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CreateDataset", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationPermission::CREATEDATASET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ManageClusters", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationPermission::MANAGECLUSTERS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ManageUsersAndGroups", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationPermission::MANAGEUSERSANDGROUPS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ManageAttributeSets", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationPermission::MANAGEATTRIBUTESETS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ViewAuditData", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationPermission::VIEWAUDITDATA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AccessNotebooks", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationPermission::ACCESSNOTEBOOKS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GetTemporaryCredentials", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationPermission::GETTEMPORARYCREDENTIALS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIApplicationPermission::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIApplicationPermission::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIApplicationPermission::CREATEDATASET:
            val = "CreateDataset";
            break;
        case eOAIApplicationPermission::MANAGECLUSTERS:
            val = "ManageClusters";
            break;
        case eOAIApplicationPermission::MANAGEUSERSANDGROUPS:
            val = "ManageUsersAndGroups";
            break;
        case eOAIApplicationPermission::MANAGEATTRIBUTESETS:
            val = "ManageAttributeSets";
            break;
        case eOAIApplicationPermission::VIEWAUDITDATA:
            val = "ViewAuditData";
            break;
        case eOAIApplicationPermission::ACCESSNOTEBOOKS:
            val = "AccessNotebooks";
            break;
        case eOAIApplicationPermission::GETTEMPORARYCREDENTIALS:
            val = "GetTemporaryCredentials";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIApplicationPermission::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIApplicationPermission::eOAIApplicationPermission OAIApplicationPermission::getValue() const {
    return m_value;
}

void OAIApplicationPermission::setValue(const OAIApplicationPermission::eOAIApplicationPermission& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIApplicationPermission::isSet() const {
    
    return m_value_isSet;
}

bool OAIApplicationPermission::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
