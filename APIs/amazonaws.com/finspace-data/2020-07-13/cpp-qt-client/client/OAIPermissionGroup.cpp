/**
 * FinSpace Public API
 *  The FinSpace APIs let you take actions inside the FinSpace.
 *
 * The version of the OpenAPI document: 2020-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPermissionGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPermissionGroup::OAIPermissionGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPermissionGroup::OAIPermissionGroup() {
    this->initializeModel();
}

OAIPermissionGroup::~OAIPermissionGroup() {}

void OAIPermissionGroup::initializeModel() {

    m_permission_group_id_isSet = false;
    m_permission_group_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_application_permissions_isSet = false;
    m_application_permissions_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_membership_status_isSet = false;
    m_membership_status_isValid = false;
}

void OAIPermissionGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPermissionGroup::fromJsonObject(QJsonObject json) {

    m_permission_group_id_isValid = ::OpenAPI::fromJsonValue(m_permission_group_id, json[QString("permissionGroupId")]);
    m_permission_group_id_isSet = !json[QString("permissionGroupId")].isNull() && m_permission_group_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_application_permissions_isValid = ::OpenAPI::fromJsonValue(m_application_permissions, json[QString("applicationPermissions")]);
    m_application_permissions_isSet = !json[QString("applicationPermissions")].isNull() && m_application_permissions_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("lastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("lastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_membership_status_isValid = ::OpenAPI::fromJsonValue(m_membership_status, json[QString("membershipStatus")]);
    m_membership_status_isSet = !json[QString("membershipStatus")].isNull() && m_membership_status_isValid;
}

QString OAIPermissionGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPermissionGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_permission_group_id_isSet) {
        obj.insert(QString("permissionGroupId"), ::OpenAPI::toJsonValue(m_permission_group_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_application_permissions.isSet()) {
        obj.insert(QString("applicationPermissions"), ::OpenAPI::toJsonValue(m_application_permissions));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("lastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_membership_status.isSet()) {
        obj.insert(QString("membershipStatus"), ::OpenAPI::toJsonValue(m_membership_status));
    }
    return obj;
}

QString OAIPermissionGroup::getPermissionGroupId() const {
    return m_permission_group_id;
}
void OAIPermissionGroup::setPermissionGroupId(const QString &permission_group_id) {
    m_permission_group_id = permission_group_id;
    m_permission_group_id_isSet = true;
}

bool OAIPermissionGroup::is_permission_group_id_Set() const{
    return m_permission_group_id_isSet;
}

bool OAIPermissionGroup::is_permission_group_id_Valid() const{
    return m_permission_group_id_isValid;
}

QString OAIPermissionGroup::getName() const {
    return m_name;
}
void OAIPermissionGroup::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPermissionGroup::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPermissionGroup::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPermissionGroup::getDescription() const {
    return m_description;
}
void OAIPermissionGroup::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPermissionGroup::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPermissionGroup::is_description_Valid() const{
    return m_description_isValid;
}

QList OAIPermissionGroup::getApplicationPermissions() const {
    return m_application_permissions;
}
void OAIPermissionGroup::setApplicationPermissions(const QList &application_permissions) {
    m_application_permissions = application_permissions;
    m_application_permissions_isSet = true;
}

bool OAIPermissionGroup::is_application_permissions_Set() const{
    return m_application_permissions_isSet;
}

bool OAIPermissionGroup::is_application_permissions_Valid() const{
    return m_application_permissions_isValid;
}

qint32 OAIPermissionGroup::getCreateTime() const {
    return m_create_time;
}
void OAIPermissionGroup::setCreateTime(const qint32 &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIPermissionGroup::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIPermissionGroup::is_create_time_Valid() const{
    return m_create_time_isValid;
}

qint32 OAIPermissionGroup::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIPermissionGroup::setLastModifiedTime(const qint32 &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIPermissionGroup::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIPermissionGroup::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

OAIPermissionGroupMembershipStatus OAIPermissionGroup::getMembershipStatus() const {
    return m_membership_status;
}
void OAIPermissionGroup::setMembershipStatus(const OAIPermissionGroupMembershipStatus &membership_status) {
    m_membership_status = membership_status;
    m_membership_status_isSet = true;
}

bool OAIPermissionGroup::is_membership_status_Set() const{
    return m_membership_status_isSet;
}

bool OAIPermissionGroup::is_membership_status_Valid() const{
    return m_membership_status_isValid;
}

bool OAIPermissionGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_permission_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPermissionGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
