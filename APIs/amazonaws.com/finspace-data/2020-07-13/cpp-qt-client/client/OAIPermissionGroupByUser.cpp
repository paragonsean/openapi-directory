/**
 * FinSpace Public API
 *  The FinSpace APIs let you take actions inside the FinSpace.
 *
 * The version of the OpenAPI document: 2020-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPermissionGroupByUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPermissionGroupByUser::OAIPermissionGroupByUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPermissionGroupByUser::OAIPermissionGroupByUser() {
    this->initializeModel();
}

OAIPermissionGroupByUser::~OAIPermissionGroupByUser() {}

void OAIPermissionGroupByUser::initializeModel() {

    m_permission_group_id_isSet = false;
    m_permission_group_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_membership_status_isSet = false;
    m_membership_status_isValid = false;
}

void OAIPermissionGroupByUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPermissionGroupByUser::fromJsonObject(QJsonObject json) {

    m_permission_group_id_isValid = ::OpenAPI::fromJsonValue(m_permission_group_id, json[QString("permissionGroupId")]);
    m_permission_group_id_isSet = !json[QString("permissionGroupId")].isNull() && m_permission_group_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_membership_status_isValid = ::OpenAPI::fromJsonValue(m_membership_status, json[QString("membershipStatus")]);
    m_membership_status_isSet = !json[QString("membershipStatus")].isNull() && m_membership_status_isValid;
}

QString OAIPermissionGroupByUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPermissionGroupByUser::asJsonObject() const {
    QJsonObject obj;
    if (m_permission_group_id_isSet) {
        obj.insert(QString("permissionGroupId"), ::OpenAPI::toJsonValue(m_permission_group_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_membership_status.isSet()) {
        obj.insert(QString("membershipStatus"), ::OpenAPI::toJsonValue(m_membership_status));
    }
    return obj;
}

QString OAIPermissionGroupByUser::getPermissionGroupId() const {
    return m_permission_group_id;
}
void OAIPermissionGroupByUser::setPermissionGroupId(const QString &permission_group_id) {
    m_permission_group_id = permission_group_id;
    m_permission_group_id_isSet = true;
}

bool OAIPermissionGroupByUser::is_permission_group_id_Set() const{
    return m_permission_group_id_isSet;
}

bool OAIPermissionGroupByUser::is_permission_group_id_Valid() const{
    return m_permission_group_id_isValid;
}

QString OAIPermissionGroupByUser::getName() const {
    return m_name;
}
void OAIPermissionGroupByUser::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPermissionGroupByUser::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPermissionGroupByUser::is_name_Valid() const{
    return m_name_isValid;
}

OAIPermissionGroupMembershipStatus OAIPermissionGroupByUser::getMembershipStatus() const {
    return m_membership_status;
}
void OAIPermissionGroupByUser::setMembershipStatus(const OAIPermissionGroupMembershipStatus &membership_status) {
    m_membership_status = membership_status;
    m_membership_status_isSet = true;
}

bool OAIPermissionGroupByUser::is_membership_status_Set() const{
    return m_membership_status_isSet;
}

bool OAIPermissionGroupByUser::is_membership_status_Valid() const{
    return m_membership_status_isValid;
}

bool OAIPermissionGroupByUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_permission_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPermissionGroupByUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
