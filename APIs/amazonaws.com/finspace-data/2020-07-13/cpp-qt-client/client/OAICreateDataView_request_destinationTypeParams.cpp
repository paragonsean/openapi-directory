/**
 * FinSpace Public API
 *  The FinSpace APIs let you take actions inside the FinSpace.
 *
 * The version of the OpenAPI document: 2020-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDataView_request_destinationTypeParams.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDataView_request_destinationTypeParams::OAICreateDataView_request_destinationTypeParams(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDataView_request_destinationTypeParams::OAICreateDataView_request_destinationTypeParams() {
    this->initializeModel();
}

OAICreateDataView_request_destinationTypeParams::~OAICreateDataView_request_destinationTypeParams() {}

void OAICreateDataView_request_destinationTypeParams::initializeModel() {

    m_destination_type_isSet = false;
    m_destination_type_isValid = false;

    m_s3_destination_export_file_format_isSet = false;
    m_s3_destination_export_file_format_isValid = false;

    m_s3_destination_export_file_format_options_isSet = false;
    m_s3_destination_export_file_format_options_isValid = false;
}

void OAICreateDataView_request_destinationTypeParams::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDataView_request_destinationTypeParams::fromJsonObject(QJsonObject json) {

    m_destination_type_isValid = ::OpenAPI::fromJsonValue(m_destination_type, json[QString("destinationType")]);
    m_destination_type_isSet = !json[QString("destinationType")].isNull() && m_destination_type_isValid;

    m_s3_destination_export_file_format_isValid = ::OpenAPI::fromJsonValue(m_s3_destination_export_file_format, json[QString("s3DestinationExportFileFormat")]);
    m_s3_destination_export_file_format_isSet = !json[QString("s3DestinationExportFileFormat")].isNull() && m_s3_destination_export_file_format_isValid;

    m_s3_destination_export_file_format_options_isValid = ::OpenAPI::fromJsonValue(m_s3_destination_export_file_format_options, json[QString("s3DestinationExportFileFormatOptions")]);
    m_s3_destination_export_file_format_options_isSet = !json[QString("s3DestinationExportFileFormatOptions")].isNull() && m_s3_destination_export_file_format_options_isValid;
}

QString OAICreateDataView_request_destinationTypeParams::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDataView_request_destinationTypeParams::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_type_isSet) {
        obj.insert(QString("destinationType"), ::OpenAPI::toJsonValue(m_destination_type));
    }
    if (m_s3_destination_export_file_format.isSet()) {
        obj.insert(QString("s3DestinationExportFileFormat"), ::OpenAPI::toJsonValue(m_s3_destination_export_file_format));
    }
    if (m_s3_destination_export_file_format_options.isSet()) {
        obj.insert(QString("s3DestinationExportFileFormatOptions"), ::OpenAPI::toJsonValue(m_s3_destination_export_file_format_options));
    }
    return obj;
}

QString OAICreateDataView_request_destinationTypeParams::getDestinationType() const {
    return m_destination_type;
}
void OAICreateDataView_request_destinationTypeParams::setDestinationType(const QString &destination_type) {
    m_destination_type = destination_type;
    m_destination_type_isSet = true;
}

bool OAICreateDataView_request_destinationTypeParams::is_destination_type_Set() const{
    return m_destination_type_isSet;
}

bool OAICreateDataView_request_destinationTypeParams::is_destination_type_Valid() const{
    return m_destination_type_isValid;
}

OAIExportFileFormat OAICreateDataView_request_destinationTypeParams::getS3DestinationExportFileFormat() const {
    return m_s3_destination_export_file_format;
}
void OAICreateDataView_request_destinationTypeParams::setS3DestinationExportFileFormat(const OAIExportFileFormat &s3_destination_export_file_format) {
    m_s3_destination_export_file_format = s3_destination_export_file_format;
    m_s3_destination_export_file_format_isSet = true;
}

bool OAICreateDataView_request_destinationTypeParams::is_s3_destination_export_file_format_Set() const{
    return m_s3_destination_export_file_format_isSet;
}

bool OAICreateDataView_request_destinationTypeParams::is_s3_destination_export_file_format_Valid() const{
    return m_s3_destination_export_file_format_isValid;
}

QMap OAICreateDataView_request_destinationTypeParams::getS3DestinationExportFileFormatOptions() const {
    return m_s3_destination_export_file_format_options;
}
void OAICreateDataView_request_destinationTypeParams::setS3DestinationExportFileFormatOptions(const QMap &s3_destination_export_file_format_options) {
    m_s3_destination_export_file_format_options = s3_destination_export_file_format_options;
    m_s3_destination_export_file_format_options_isSet = true;
}

bool OAICreateDataView_request_destinationTypeParams::is_s3_destination_export_file_format_options_Set() const{
    return m_s3_destination_export_file_format_options_isSet;
}

bool OAICreateDataView_request_destinationTypeParams::is_s3_destination_export_file_format_options_Valid() const{
    return m_s3_destination_export_file_format_options_isValid;
}

bool OAICreateDataView_request_destinationTypeParams::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_destination_export_file_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_destination_export_file_format_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDataView_request_destinationTypeParams::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
