/**
 * FinSpace Public API
 *  The FinSpace APIs let you take actions inside the FinSpace.
 *
 * The version of the OpenAPI document: 2020-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChangesetErrorInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChangesetErrorInfo::OAIChangesetErrorInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChangesetErrorInfo::OAIChangesetErrorInfo() {
    this->initializeModel();
}

OAIChangesetErrorInfo::~OAIChangesetErrorInfo() {}

void OAIChangesetErrorInfo::initializeModel() {

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_error_category_isSet = false;
    m_error_category_isValid = false;
}

void OAIChangesetErrorInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChangesetErrorInfo::fromJsonObject(QJsonObject json) {

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_error_category_isValid = ::OpenAPI::fromJsonValue(m_error_category, json[QString("errorCategory")]);
    m_error_category_isSet = !json[QString("errorCategory")].isNull() && m_error_category_isValid;
}

QString OAIChangesetErrorInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChangesetErrorInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_error_category.isSet()) {
        obj.insert(QString("errorCategory"), ::OpenAPI::toJsonValue(m_error_category));
    }
    return obj;
}

QString OAIChangesetErrorInfo::getErrorMessage() const {
    return m_error_message;
}
void OAIChangesetErrorInfo::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIChangesetErrorInfo::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIChangesetErrorInfo::is_error_message_Valid() const{
    return m_error_message_isValid;
}

OAIErrorCategory OAIChangesetErrorInfo::getErrorCategory() const {
    return m_error_category;
}
void OAIChangesetErrorInfo::setErrorCategory(const OAIErrorCategory &error_category) {
    m_error_category = error_category;
    m_error_category_isSet = true;
}

bool OAIChangesetErrorInfo::is_error_category_Set() const{
    return m_error_category_isSet;
}

bool OAIChangesetErrorInfo::is_error_category_Valid() const{
    return m_error_category_isValid;
}

bool OAIChangesetErrorInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_category.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChangesetErrorInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
