/**
 * FinSpace Public API
 *  The FinSpace APIs let you take actions inside the FinSpace.
 *
 * The version of the OpenAPI document: 2020-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIngestionStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIngestionStatus::OAIIngestionStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIngestionStatus::OAIIngestionStatus() {
    this->initializeModel();
}

OAIIngestionStatus::~OAIIngestionStatus() {}

void OAIIngestionStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIIngestionStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIIngestionStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PENDING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIngestionStatus::PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIngestionStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUCCESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIngestionStatus::SUCCESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RUNNING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIngestionStatus::RUNNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STOP_REQUESTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIngestionStatus::STOP_REQUESTED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIIngestionStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIIngestionStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIIngestionStatus::PENDING:
            val = "PENDING";
            break;
        case eOAIIngestionStatus::FAILED:
            val = "FAILED";
            break;
        case eOAIIngestionStatus::SUCCESS:
            val = "SUCCESS";
            break;
        case eOAIIngestionStatus::RUNNING:
            val = "RUNNING";
            break;
        case eOAIIngestionStatus::STOP_REQUESTED:
            val = "STOP_REQUESTED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIIngestionStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIIngestionStatus::eOAIIngestionStatus OAIIngestionStatus::getValue() const {
    return m_value;
}

void OAIIngestionStatus::setValue(const OAIIngestionStatus::eOAIIngestionStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIIngestionStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIIngestionStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
