/**
 * FinSpace Public API
 *  The FinSpace APIs let you take actions inside the FinSpace.
 *
 * The version of the OpenAPI document: 2020-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdatePermissionGroupRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdatePermissionGroupRequest::OAIUpdatePermissionGroupRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdatePermissionGroupRequest::OAIUpdatePermissionGroupRequest() {
    this->initializeModel();
}

OAIUpdatePermissionGroupRequest::~OAIUpdatePermissionGroupRequest() {}

void OAIUpdatePermissionGroupRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_application_permissions_isSet = false;
    m_application_permissions_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;
}

void OAIUpdatePermissionGroupRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdatePermissionGroupRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_application_permissions_isValid = ::OpenAPI::fromJsonValue(m_application_permissions, json[QString("applicationPermissions")]);
    m_application_permissions_isSet = !json[QString("applicationPermissions")].isNull() && m_application_permissions_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;
}

QString OAIUpdatePermissionGroupRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdatePermissionGroupRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_application_permissions.isSet()) {
        obj.insert(QString("applicationPermissions"), ::OpenAPI::toJsonValue(m_application_permissions));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    return obj;
}

QString OAIUpdatePermissionGroupRequest::getName() const {
    return m_name;
}
void OAIUpdatePermissionGroupRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdatePermissionGroupRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdatePermissionGroupRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdatePermissionGroupRequest::getDescription() const {
    return m_description;
}
void OAIUpdatePermissionGroupRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdatePermissionGroupRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdatePermissionGroupRequest::is_description_Valid() const{
    return m_description_isValid;
}

QList OAIUpdatePermissionGroupRequest::getApplicationPermissions() const {
    return m_application_permissions;
}
void OAIUpdatePermissionGroupRequest::setApplicationPermissions(const QList &application_permissions) {
    m_application_permissions = application_permissions;
    m_application_permissions_isSet = true;
}

bool OAIUpdatePermissionGroupRequest::is_application_permissions_Set() const{
    return m_application_permissions_isSet;
}

bool OAIUpdatePermissionGroupRequest::is_application_permissions_Valid() const{
    return m_application_permissions_isValid;
}

QString OAIUpdatePermissionGroupRequest::getClientToken() const {
    return m_client_token;
}
void OAIUpdatePermissionGroupRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIUpdatePermissionGroupRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIUpdatePermissionGroupRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

bool OAIUpdatePermissionGroupRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdatePermissionGroupRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
