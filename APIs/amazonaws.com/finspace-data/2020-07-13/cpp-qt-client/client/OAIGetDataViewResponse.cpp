/**
 * FinSpace Public API
 *  The FinSpace APIs let you take actions inside the FinSpace.
 *
 * The version of the OpenAPI document: 2020-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDataViewResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDataViewResponse::OAIGetDataViewResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDataViewResponse::OAIGetDataViewResponse() {
    this->initializeModel();
}

OAIGetDataViewResponse::~OAIGetDataViewResponse() {}

void OAIGetDataViewResponse::initializeModel() {

    m_auto_update_isSet = false;
    m_auto_update_isValid = false;

    m_partition_columns_isSet = false;
    m_partition_columns_isValid = false;

    m_dataset_id_isSet = false;
    m_dataset_id_isValid = false;

    m_as_of_timestamp_isSet = false;
    m_as_of_timestamp_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_sort_columns_isSet = false;
    m_sort_columns_isValid = false;

    m_data_view_id_isSet = false;
    m_data_view_id_isValid = false;

    m_data_view_arn_isSet = false;
    m_data_view_arn_isValid = false;

    m_destination_type_params_isSet = false;
    m_destination_type_params_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIGetDataViewResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDataViewResponse::fromJsonObject(QJsonObject json) {

    m_auto_update_isValid = ::OpenAPI::fromJsonValue(m_auto_update, json[QString("autoUpdate")]);
    m_auto_update_isSet = !json[QString("autoUpdate")].isNull() && m_auto_update_isValid;

    m_partition_columns_isValid = ::OpenAPI::fromJsonValue(m_partition_columns, json[QString("partitionColumns")]);
    m_partition_columns_isSet = !json[QString("partitionColumns")].isNull() && m_partition_columns_isValid;

    m_dataset_id_isValid = ::OpenAPI::fromJsonValue(m_dataset_id, json[QString("datasetId")]);
    m_dataset_id_isSet = !json[QString("datasetId")].isNull() && m_dataset_id_isValid;

    m_as_of_timestamp_isValid = ::OpenAPI::fromJsonValue(m_as_of_timestamp, json[QString("asOfTimestamp")]);
    m_as_of_timestamp_isSet = !json[QString("asOfTimestamp")].isNull() && m_as_of_timestamp_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("lastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("lastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_sort_columns_isValid = ::OpenAPI::fromJsonValue(m_sort_columns, json[QString("sortColumns")]);
    m_sort_columns_isSet = !json[QString("sortColumns")].isNull() && m_sort_columns_isValid;

    m_data_view_id_isValid = ::OpenAPI::fromJsonValue(m_data_view_id, json[QString("dataViewId")]);
    m_data_view_id_isSet = !json[QString("dataViewId")].isNull() && m_data_view_id_isValid;

    m_data_view_arn_isValid = ::OpenAPI::fromJsonValue(m_data_view_arn, json[QString("dataViewArn")]);
    m_data_view_arn_isSet = !json[QString("dataViewArn")].isNull() && m_data_view_arn_isValid;

    m_destination_type_params_isValid = ::OpenAPI::fromJsonValue(m_destination_type_params, json[QString("destinationTypeParams")]);
    m_destination_type_params_isSet = !json[QString("destinationTypeParams")].isNull() && m_destination_type_params_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIGetDataViewResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDataViewResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_update_isSet) {
        obj.insert(QString("autoUpdate"), ::OpenAPI::toJsonValue(m_auto_update));
    }
    if (m_partition_columns.isSet()) {
        obj.insert(QString("partitionColumns"), ::OpenAPI::toJsonValue(m_partition_columns));
    }
    if (m_dataset_id_isSet) {
        obj.insert(QString("datasetId"), ::OpenAPI::toJsonValue(m_dataset_id));
    }
    if (m_as_of_timestamp_isSet) {
        obj.insert(QString("asOfTimestamp"), ::OpenAPI::toJsonValue(m_as_of_timestamp));
    }
    if (m_error_info.isSet()) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("lastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_sort_columns.isSet()) {
        obj.insert(QString("sortColumns"), ::OpenAPI::toJsonValue(m_sort_columns));
    }
    if (m_data_view_id_isSet) {
        obj.insert(QString("dataViewId"), ::OpenAPI::toJsonValue(m_data_view_id));
    }
    if (m_data_view_arn_isSet) {
        obj.insert(QString("dataViewArn"), ::OpenAPI::toJsonValue(m_data_view_arn));
    }
    if (m_destination_type_params.isSet()) {
        obj.insert(QString("destinationTypeParams"), ::OpenAPI::toJsonValue(m_destination_type_params));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

bool OAIGetDataViewResponse::getAutoUpdate() const {
    return m_auto_update;
}
void OAIGetDataViewResponse::setAutoUpdate(const bool &auto_update) {
    m_auto_update = auto_update;
    m_auto_update_isSet = true;
}

bool OAIGetDataViewResponse::is_auto_update_Set() const{
    return m_auto_update_isSet;
}

bool OAIGetDataViewResponse::is_auto_update_Valid() const{
    return m_auto_update_isValid;
}

QList OAIGetDataViewResponse::getPartitionColumns() const {
    return m_partition_columns;
}
void OAIGetDataViewResponse::setPartitionColumns(const QList &partition_columns) {
    m_partition_columns = partition_columns;
    m_partition_columns_isSet = true;
}

bool OAIGetDataViewResponse::is_partition_columns_Set() const{
    return m_partition_columns_isSet;
}

bool OAIGetDataViewResponse::is_partition_columns_Valid() const{
    return m_partition_columns_isValid;
}

QString OAIGetDataViewResponse::getDatasetId() const {
    return m_dataset_id;
}
void OAIGetDataViewResponse::setDatasetId(const QString &dataset_id) {
    m_dataset_id = dataset_id;
    m_dataset_id_isSet = true;
}

bool OAIGetDataViewResponse::is_dataset_id_Set() const{
    return m_dataset_id_isSet;
}

bool OAIGetDataViewResponse::is_dataset_id_Valid() const{
    return m_dataset_id_isValid;
}

qint32 OAIGetDataViewResponse::getAsOfTimestamp() const {
    return m_as_of_timestamp;
}
void OAIGetDataViewResponse::setAsOfTimestamp(const qint32 &as_of_timestamp) {
    m_as_of_timestamp = as_of_timestamp;
    m_as_of_timestamp_isSet = true;
}

bool OAIGetDataViewResponse::is_as_of_timestamp_Set() const{
    return m_as_of_timestamp_isSet;
}

bool OAIGetDataViewResponse::is_as_of_timestamp_Valid() const{
    return m_as_of_timestamp_isValid;
}

OAIGetDataViewResponse_errorInfo OAIGetDataViewResponse::getErrorInfo() const {
    return m_error_info;
}
void OAIGetDataViewResponse::setErrorInfo(const OAIGetDataViewResponse_errorInfo &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAIGetDataViewResponse::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAIGetDataViewResponse::is_error_info_Valid() const{
    return m_error_info_isValid;
}

qint32 OAIGetDataViewResponse::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIGetDataViewResponse::setLastModifiedTime(const qint32 &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIGetDataViewResponse::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIGetDataViewResponse::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

qint32 OAIGetDataViewResponse::getCreateTime() const {
    return m_create_time;
}
void OAIGetDataViewResponse::setCreateTime(const qint32 &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGetDataViewResponse::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGetDataViewResponse::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QList OAIGetDataViewResponse::getSortColumns() const {
    return m_sort_columns;
}
void OAIGetDataViewResponse::setSortColumns(const QList &sort_columns) {
    m_sort_columns = sort_columns;
    m_sort_columns_isSet = true;
}

bool OAIGetDataViewResponse::is_sort_columns_Set() const{
    return m_sort_columns_isSet;
}

bool OAIGetDataViewResponse::is_sort_columns_Valid() const{
    return m_sort_columns_isValid;
}

QString OAIGetDataViewResponse::getDataViewId() const {
    return m_data_view_id;
}
void OAIGetDataViewResponse::setDataViewId(const QString &data_view_id) {
    m_data_view_id = data_view_id;
    m_data_view_id_isSet = true;
}

bool OAIGetDataViewResponse::is_data_view_id_Set() const{
    return m_data_view_id_isSet;
}

bool OAIGetDataViewResponse::is_data_view_id_Valid() const{
    return m_data_view_id_isValid;
}

QString OAIGetDataViewResponse::getDataViewArn() const {
    return m_data_view_arn;
}
void OAIGetDataViewResponse::setDataViewArn(const QString &data_view_arn) {
    m_data_view_arn = data_view_arn;
    m_data_view_arn_isSet = true;
}

bool OAIGetDataViewResponse::is_data_view_arn_Set() const{
    return m_data_view_arn_isSet;
}

bool OAIGetDataViewResponse::is_data_view_arn_Valid() const{
    return m_data_view_arn_isValid;
}

OAIGetDataViewResponse_destinationTypeParams OAIGetDataViewResponse::getDestinationTypeParams() const {
    return m_destination_type_params;
}
void OAIGetDataViewResponse::setDestinationTypeParams(const OAIGetDataViewResponse_destinationTypeParams &destination_type_params) {
    m_destination_type_params = destination_type_params;
    m_destination_type_params_isSet = true;
}

bool OAIGetDataViewResponse::is_destination_type_params_Set() const{
    return m_destination_type_params_isSet;
}

bool OAIGetDataViewResponse::is_destination_type_params_Valid() const{
    return m_destination_type_params_isValid;
}

OAIDataViewStatus OAIGetDataViewResponse::getStatus() const {
    return m_status;
}
void OAIGetDataViewResponse::setStatus(const OAIDataViewStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetDataViewResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetDataViewResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIGetDataViewResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_as_of_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_view_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_view_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_type_params.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDataViewResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
