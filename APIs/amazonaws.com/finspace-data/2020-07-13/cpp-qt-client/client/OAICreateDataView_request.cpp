/**
 * FinSpace Public API
 *  The FinSpace APIs let you take actions inside the FinSpace.
 *
 * The version of the OpenAPI document: 2020-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDataView_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDataView_request::OAICreateDataView_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDataView_request::OAICreateDataView_request() {
    this->initializeModel();
}

OAICreateDataView_request::~OAICreateDataView_request() {}

void OAICreateDataView_request::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_auto_update_isSet = false;
    m_auto_update_isValid = false;

    m_sort_columns_isSet = false;
    m_sort_columns_isValid = false;

    m_partition_columns_isSet = false;
    m_partition_columns_isValid = false;

    m_as_of_timestamp_isSet = false;
    m_as_of_timestamp_isValid = false;

    m_destination_type_params_isSet = false;
    m_destination_type_params_isValid = false;
}

void OAICreateDataView_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDataView_request::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_auto_update_isValid = ::OpenAPI::fromJsonValue(m_auto_update, json[QString("autoUpdate")]);
    m_auto_update_isSet = !json[QString("autoUpdate")].isNull() && m_auto_update_isValid;

    m_sort_columns_isValid = ::OpenAPI::fromJsonValue(m_sort_columns, json[QString("sortColumns")]);
    m_sort_columns_isSet = !json[QString("sortColumns")].isNull() && m_sort_columns_isValid;

    m_partition_columns_isValid = ::OpenAPI::fromJsonValue(m_partition_columns, json[QString("partitionColumns")]);
    m_partition_columns_isSet = !json[QString("partitionColumns")].isNull() && m_partition_columns_isValid;

    m_as_of_timestamp_isValid = ::OpenAPI::fromJsonValue(m_as_of_timestamp, json[QString("asOfTimestamp")]);
    m_as_of_timestamp_isSet = !json[QString("asOfTimestamp")].isNull() && m_as_of_timestamp_isValid;

    m_destination_type_params_isValid = ::OpenAPI::fromJsonValue(m_destination_type_params, json[QString("destinationTypeParams")]);
    m_destination_type_params_isSet = !json[QString("destinationTypeParams")].isNull() && m_destination_type_params_isValid;
}

QString OAICreateDataView_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDataView_request::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_auto_update_isSet) {
        obj.insert(QString("autoUpdate"), ::OpenAPI::toJsonValue(m_auto_update));
    }
    if (m_sort_columns.size() > 0) {
        obj.insert(QString("sortColumns"), ::OpenAPI::toJsonValue(m_sort_columns));
    }
    if (m_partition_columns.size() > 0) {
        obj.insert(QString("partitionColumns"), ::OpenAPI::toJsonValue(m_partition_columns));
    }
    if (m_as_of_timestamp_isSet) {
        obj.insert(QString("asOfTimestamp"), ::OpenAPI::toJsonValue(m_as_of_timestamp));
    }
    if (m_destination_type_params.isSet()) {
        obj.insert(QString("destinationTypeParams"), ::OpenAPI::toJsonValue(m_destination_type_params));
    }
    return obj;
}

QString OAICreateDataView_request::getClientToken() const {
    return m_client_token;
}
void OAICreateDataView_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateDataView_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateDataView_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

bool OAICreateDataView_request::isAutoUpdate() const {
    return m_auto_update;
}
void OAICreateDataView_request::setAutoUpdate(const bool &auto_update) {
    m_auto_update = auto_update;
    m_auto_update_isSet = true;
}

bool OAICreateDataView_request::is_auto_update_Set() const{
    return m_auto_update_isSet;
}

bool OAICreateDataView_request::is_auto_update_Valid() const{
    return m_auto_update_isValid;
}

QList<QString> OAICreateDataView_request::getSortColumns() const {
    return m_sort_columns;
}
void OAICreateDataView_request::setSortColumns(const QList<QString> &sort_columns) {
    m_sort_columns = sort_columns;
    m_sort_columns_isSet = true;
}

bool OAICreateDataView_request::is_sort_columns_Set() const{
    return m_sort_columns_isSet;
}

bool OAICreateDataView_request::is_sort_columns_Valid() const{
    return m_sort_columns_isValid;
}

QList<QString> OAICreateDataView_request::getPartitionColumns() const {
    return m_partition_columns;
}
void OAICreateDataView_request::setPartitionColumns(const QList<QString> &partition_columns) {
    m_partition_columns = partition_columns;
    m_partition_columns_isSet = true;
}

bool OAICreateDataView_request::is_partition_columns_Set() const{
    return m_partition_columns_isSet;
}

bool OAICreateDataView_request::is_partition_columns_Valid() const{
    return m_partition_columns_isValid;
}

qint32 OAICreateDataView_request::getAsOfTimestamp() const {
    return m_as_of_timestamp;
}
void OAICreateDataView_request::setAsOfTimestamp(const qint32 &as_of_timestamp) {
    m_as_of_timestamp = as_of_timestamp;
    m_as_of_timestamp_isSet = true;
}

bool OAICreateDataView_request::is_as_of_timestamp_Set() const{
    return m_as_of_timestamp_isSet;
}

bool OAICreateDataView_request::is_as_of_timestamp_Valid() const{
    return m_as_of_timestamp_isValid;
}

OAICreateDataView_request_destinationTypeParams OAICreateDataView_request::getDestinationTypeParams() const {
    return m_destination_type_params;
}
void OAICreateDataView_request::setDestinationTypeParams(const OAICreateDataView_request_destinationTypeParams &destination_type_params) {
    m_destination_type_params = destination_type_params;
    m_destination_type_params_isSet = true;
}

bool OAICreateDataView_request::is_destination_type_params_Set() const{
    return m_destination_type_params_isSet;
}

bool OAICreateDataView_request::is_destination_type_params_Valid() const{
    return m_destination_type_params_isValid;
}

bool OAICreateDataView_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_as_of_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_type_params.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDataView_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_destination_type_params_isValid && true;
}

} // namespace OpenAPI
