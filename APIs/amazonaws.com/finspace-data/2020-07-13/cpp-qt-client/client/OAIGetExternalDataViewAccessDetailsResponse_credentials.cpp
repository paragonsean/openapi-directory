/**
 * FinSpace Public API
 *  The FinSpace APIs let you take actions inside the FinSpace.
 *
 * The version of the OpenAPI document: 2020-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetExternalDataViewAccessDetailsResponse_credentials.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetExternalDataViewAccessDetailsResponse_credentials::OAIGetExternalDataViewAccessDetailsResponse_credentials(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetExternalDataViewAccessDetailsResponse_credentials::OAIGetExternalDataViewAccessDetailsResponse_credentials() {
    this->initializeModel();
}

OAIGetExternalDataViewAccessDetailsResponse_credentials::~OAIGetExternalDataViewAccessDetailsResponse_credentials() {}

void OAIGetExternalDataViewAccessDetailsResponse_credentials::initializeModel() {

    m_access_key_id_isSet = false;
    m_access_key_id_isValid = false;

    m_secret_access_key_isSet = false;
    m_secret_access_key_isValid = false;

    m_session_token_isSet = false;
    m_session_token_isValid = false;

    m_expiration_isSet = false;
    m_expiration_isValid = false;
}

void OAIGetExternalDataViewAccessDetailsResponse_credentials::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetExternalDataViewAccessDetailsResponse_credentials::fromJsonObject(QJsonObject json) {

    m_access_key_id_isValid = ::OpenAPI::fromJsonValue(m_access_key_id, json[QString("accessKeyId")]);
    m_access_key_id_isSet = !json[QString("accessKeyId")].isNull() && m_access_key_id_isValid;

    m_secret_access_key_isValid = ::OpenAPI::fromJsonValue(m_secret_access_key, json[QString("secretAccessKey")]);
    m_secret_access_key_isSet = !json[QString("secretAccessKey")].isNull() && m_secret_access_key_isValid;

    m_session_token_isValid = ::OpenAPI::fromJsonValue(m_session_token, json[QString("sessionToken")]);
    m_session_token_isSet = !json[QString("sessionToken")].isNull() && m_session_token_isValid;

    m_expiration_isValid = ::OpenAPI::fromJsonValue(m_expiration, json[QString("expiration")]);
    m_expiration_isSet = !json[QString("expiration")].isNull() && m_expiration_isValid;
}

QString OAIGetExternalDataViewAccessDetailsResponse_credentials::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetExternalDataViewAccessDetailsResponse_credentials::asJsonObject() const {
    QJsonObject obj;
    if (m_access_key_id_isSet) {
        obj.insert(QString("accessKeyId"), ::OpenAPI::toJsonValue(m_access_key_id));
    }
    if (m_secret_access_key_isSet) {
        obj.insert(QString("secretAccessKey"), ::OpenAPI::toJsonValue(m_secret_access_key));
    }
    if (m_session_token_isSet) {
        obj.insert(QString("sessionToken"), ::OpenAPI::toJsonValue(m_session_token));
    }
    if (m_expiration_isSet) {
        obj.insert(QString("expiration"), ::OpenAPI::toJsonValue(m_expiration));
    }
    return obj;
}

QString OAIGetExternalDataViewAccessDetailsResponse_credentials::getAccessKeyId() const {
    return m_access_key_id;
}
void OAIGetExternalDataViewAccessDetailsResponse_credentials::setAccessKeyId(const QString &access_key_id) {
    m_access_key_id = access_key_id;
    m_access_key_id_isSet = true;
}

bool OAIGetExternalDataViewAccessDetailsResponse_credentials::is_access_key_id_Set() const{
    return m_access_key_id_isSet;
}

bool OAIGetExternalDataViewAccessDetailsResponse_credentials::is_access_key_id_Valid() const{
    return m_access_key_id_isValid;
}

QString OAIGetExternalDataViewAccessDetailsResponse_credentials::getSecretAccessKey() const {
    return m_secret_access_key;
}
void OAIGetExternalDataViewAccessDetailsResponse_credentials::setSecretAccessKey(const QString &secret_access_key) {
    m_secret_access_key = secret_access_key;
    m_secret_access_key_isSet = true;
}

bool OAIGetExternalDataViewAccessDetailsResponse_credentials::is_secret_access_key_Set() const{
    return m_secret_access_key_isSet;
}

bool OAIGetExternalDataViewAccessDetailsResponse_credentials::is_secret_access_key_Valid() const{
    return m_secret_access_key_isValid;
}

QString OAIGetExternalDataViewAccessDetailsResponse_credentials::getSessionToken() const {
    return m_session_token;
}
void OAIGetExternalDataViewAccessDetailsResponse_credentials::setSessionToken(const QString &session_token) {
    m_session_token = session_token;
    m_session_token_isSet = true;
}

bool OAIGetExternalDataViewAccessDetailsResponse_credentials::is_session_token_Set() const{
    return m_session_token_isSet;
}

bool OAIGetExternalDataViewAccessDetailsResponse_credentials::is_session_token_Valid() const{
    return m_session_token_isValid;
}

qint32 OAIGetExternalDataViewAccessDetailsResponse_credentials::getExpiration() const {
    return m_expiration;
}
void OAIGetExternalDataViewAccessDetailsResponse_credentials::setExpiration(const qint32 &expiration) {
    m_expiration = expiration;
    m_expiration_isSet = true;
}

bool OAIGetExternalDataViewAccessDetailsResponse_credentials::is_expiration_Set() const{
    return m_expiration_isSet;
}

bool OAIGetExternalDataViewAccessDetailsResponse_credentials::is_expiration_Valid() const{
    return m_expiration_isValid;
}

bool OAIGetExternalDataViewAccessDetailsResponse_credentials::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_access_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetExternalDataViewAccessDetailsResponse_credentials::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
