/**
 * FinSpace Public API
 *  The FinSpace APIs let you take actions inside the FinSpace.
 *
 * The version of the OpenAPI document: 2020-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIColumnDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIColumnDefinition::OAIColumnDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIColumnDefinition::OAIColumnDefinition() {
    this->initializeModel();
}

OAIColumnDefinition::~OAIColumnDefinition() {}

void OAIColumnDefinition::initializeModel() {

    m_data_type_isSet = false;
    m_data_type_isValid = false;

    m_column_name_isSet = false;
    m_column_name_isValid = false;

    m_column_description_isSet = false;
    m_column_description_isValid = false;
}

void OAIColumnDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIColumnDefinition::fromJsonObject(QJsonObject json) {

    m_data_type_isValid = ::OpenAPI::fromJsonValue(m_data_type, json[QString("dataType")]);
    m_data_type_isSet = !json[QString("dataType")].isNull() && m_data_type_isValid;

    m_column_name_isValid = ::OpenAPI::fromJsonValue(m_column_name, json[QString("columnName")]);
    m_column_name_isSet = !json[QString("columnName")].isNull() && m_column_name_isValid;

    m_column_description_isValid = ::OpenAPI::fromJsonValue(m_column_description, json[QString("columnDescription")]);
    m_column_description_isSet = !json[QString("columnDescription")].isNull() && m_column_description_isValid;
}

QString OAIColumnDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIColumnDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_data_type.isSet()) {
        obj.insert(QString("dataType"), ::OpenAPI::toJsonValue(m_data_type));
    }
    if (m_column_name_isSet) {
        obj.insert(QString("columnName"), ::OpenAPI::toJsonValue(m_column_name));
    }
    if (m_column_description_isSet) {
        obj.insert(QString("columnDescription"), ::OpenAPI::toJsonValue(m_column_description));
    }
    return obj;
}

OAIColumnDataType OAIColumnDefinition::getDataType() const {
    return m_data_type;
}
void OAIColumnDefinition::setDataType(const OAIColumnDataType &data_type) {
    m_data_type = data_type;
    m_data_type_isSet = true;
}

bool OAIColumnDefinition::is_data_type_Set() const{
    return m_data_type_isSet;
}

bool OAIColumnDefinition::is_data_type_Valid() const{
    return m_data_type_isValid;
}

QString OAIColumnDefinition::getColumnName() const {
    return m_column_name;
}
void OAIColumnDefinition::setColumnName(const QString &column_name) {
    m_column_name = column_name;
    m_column_name_isSet = true;
}

bool OAIColumnDefinition::is_column_name_Set() const{
    return m_column_name_isSet;
}

bool OAIColumnDefinition::is_column_name_Valid() const{
    return m_column_name_isValid;
}

QString OAIColumnDefinition::getColumnDescription() const {
    return m_column_description;
}
void OAIColumnDefinition::setColumnDescription(const QString &column_description) {
    m_column_description = column_description;
    m_column_description_isSet = true;
}

bool OAIColumnDefinition::is_column_description_Set() const{
    return m_column_description_isSet;
}

bool OAIColumnDefinition::is_column_description_Valid() const{
    return m_column_description_isValid;
}

bool OAIColumnDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIColumnDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
