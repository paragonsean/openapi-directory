/**
 * FinSpace Public API
 *  The FinSpace APIs let you take actions inside the FinSpace.
 *
 * The version of the OpenAPI document: 2020-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateDataset_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateDataset_request::OAIUpdateDataset_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateDataset_request::OAIUpdateDataset_request() {
    this->initializeModel();
}

OAIUpdateDataset_request::~OAIUpdateDataset_request() {}

void OAIUpdateDataset_request::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_dataset_title_isSet = false;
    m_dataset_title_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_dataset_description_isSet = false;
    m_dataset_description_isValid = false;

    m_alias_isSet = false;
    m_alias_isValid = false;

    m_schema_definition_isSet = false;
    m_schema_definition_isValid = false;
}

void OAIUpdateDataset_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateDataset_request::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_dataset_title_isValid = ::OpenAPI::fromJsonValue(m_dataset_title, json[QString("datasetTitle")]);
    m_dataset_title_isSet = !json[QString("datasetTitle")].isNull() && m_dataset_title_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_dataset_description_isValid = ::OpenAPI::fromJsonValue(m_dataset_description, json[QString("datasetDescription")]);
    m_dataset_description_isSet = !json[QString("datasetDescription")].isNull() && m_dataset_description_isValid;

    m_alias_isValid = ::OpenAPI::fromJsonValue(m_alias, json[QString("alias")]);
    m_alias_isSet = !json[QString("alias")].isNull() && m_alias_isValid;

    m_schema_definition_isValid = ::OpenAPI::fromJsonValue(m_schema_definition, json[QString("schemaDefinition")]);
    m_schema_definition_isSet = !json[QString("schemaDefinition")].isNull() && m_schema_definition_isValid;
}

QString OAIUpdateDataset_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateDataset_request::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_dataset_title_isSet) {
        obj.insert(QString("datasetTitle"), ::OpenAPI::toJsonValue(m_dataset_title));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_dataset_description_isSet) {
        obj.insert(QString("datasetDescription"), ::OpenAPI::toJsonValue(m_dataset_description));
    }
    if (m_alias_isSet) {
        obj.insert(QString("alias"), ::OpenAPI::toJsonValue(m_alias));
    }
    if (m_schema_definition.isSet()) {
        obj.insert(QString("schemaDefinition"), ::OpenAPI::toJsonValue(m_schema_definition));
    }
    return obj;
}

QString OAIUpdateDataset_request::getClientToken() const {
    return m_client_token;
}
void OAIUpdateDataset_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIUpdateDataset_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIUpdateDataset_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAIUpdateDataset_request::getDatasetTitle() const {
    return m_dataset_title;
}
void OAIUpdateDataset_request::setDatasetTitle(const QString &dataset_title) {
    m_dataset_title = dataset_title;
    m_dataset_title_isSet = true;
}

bool OAIUpdateDataset_request::is_dataset_title_Set() const{
    return m_dataset_title_isSet;
}

bool OAIUpdateDataset_request::is_dataset_title_Valid() const{
    return m_dataset_title_isValid;
}

QString OAIUpdateDataset_request::getKind() const {
    return m_kind;
}
void OAIUpdateDataset_request::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIUpdateDataset_request::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIUpdateDataset_request::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIUpdateDataset_request::getDatasetDescription() const {
    return m_dataset_description;
}
void OAIUpdateDataset_request::setDatasetDescription(const QString &dataset_description) {
    m_dataset_description = dataset_description;
    m_dataset_description_isSet = true;
}

bool OAIUpdateDataset_request::is_dataset_description_Set() const{
    return m_dataset_description_isSet;
}

bool OAIUpdateDataset_request::is_dataset_description_Valid() const{
    return m_dataset_description_isValid;
}

QString OAIUpdateDataset_request::getAlias() const {
    return m_alias;
}
void OAIUpdateDataset_request::setAlias(const QString &alias) {
    m_alias = alias;
    m_alias_isSet = true;
}

bool OAIUpdateDataset_request::is_alias_Set() const{
    return m_alias_isSet;
}

bool OAIUpdateDataset_request::is_alias_Valid() const{
    return m_alias_isValid;
}

OAICreateDataset_request_schemaDefinition OAIUpdateDataset_request::getSchemaDefinition() const {
    return m_schema_definition;
}
void OAIUpdateDataset_request::setSchemaDefinition(const OAICreateDataset_request_schemaDefinition &schema_definition) {
    m_schema_definition = schema_definition;
    m_schema_definition_isSet = true;
}

bool OAIUpdateDataset_request::is_schema_definition_Set() const{
    return m_schema_definition_isSet;
}

bool OAIUpdateDataset_request::is_schema_definition_Valid() const{
    return m_schema_definition_isValid;
}

bool OAIUpdateDataset_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateDataset_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dataset_title_isValid && m_kind_isValid && true;
}

} // namespace OpenAPI
