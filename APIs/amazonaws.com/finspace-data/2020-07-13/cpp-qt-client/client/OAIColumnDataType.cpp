/**
 * FinSpace Public API
 *  The FinSpace APIs let you take actions inside the FinSpace.
 *
 * The version of the OpenAPI document: 2020-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIColumnDataType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIColumnDataType::OAIColumnDataType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIColumnDataType::OAIColumnDataType() {
    this->initializeModel();
}

OAIColumnDataType::~OAIColumnDataType() {}

void OAIColumnDataType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIColumnDataType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIColumnDataType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("STRING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColumnDataType::STRING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CHAR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColumnDataType::CHAR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INTEGER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColumnDataType::INTEGER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TINYINT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColumnDataType::TINYINT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SMALLINT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColumnDataType::SMALLINT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BIGINT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColumnDataType::BIGINT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FLOAT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColumnDataType::FLOAT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DOUBLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColumnDataType::DOUBLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColumnDataType::DATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DATETIME", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColumnDataType::DATETIME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BOOLEAN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColumnDataType::BOOLEAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BINARY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColumnDataType::BINARY;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIColumnDataType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIColumnDataType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIColumnDataType::STRING:
            val = "STRING";
            break;
        case eOAIColumnDataType::CHAR:
            val = "CHAR";
            break;
        case eOAIColumnDataType::INTEGER:
            val = "INTEGER";
            break;
        case eOAIColumnDataType::TINYINT:
            val = "TINYINT";
            break;
        case eOAIColumnDataType::SMALLINT:
            val = "SMALLINT";
            break;
        case eOAIColumnDataType::BIGINT:
            val = "BIGINT";
            break;
        case eOAIColumnDataType::FLOAT:
            val = "FLOAT";
            break;
        case eOAIColumnDataType::DOUBLE:
            val = "DOUBLE";
            break;
        case eOAIColumnDataType::DATE:
            val = "DATE";
            break;
        case eOAIColumnDataType::DATETIME:
            val = "DATETIME";
            break;
        case eOAIColumnDataType::BOOLEAN:
            val = "BOOLEAN";
            break;
        case eOAIColumnDataType::BINARY:
            val = "BINARY";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIColumnDataType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIColumnDataType::eOAIColumnDataType OAIColumnDataType::getValue() const {
    return m_value;
}

void OAIColumnDataType::setValue(const OAIColumnDataType::eOAIColumnDataType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIColumnDataType::isSet() const {
    
    return m_value_isSet;
}

bool OAIColumnDataType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
