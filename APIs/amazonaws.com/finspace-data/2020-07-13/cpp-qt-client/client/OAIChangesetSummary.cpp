/**
 * FinSpace Public API
 *  The FinSpace APIs let you take actions inside the FinSpace.
 *
 * The version of the OpenAPI document: 2020-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChangesetSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChangesetSummary::OAIChangesetSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChangesetSummary::OAIChangesetSummary() {
    this->initializeModel();
}

OAIChangesetSummary::~OAIChangesetSummary() {}

void OAIChangesetSummary::initializeModel() {

    m_changeset_id_isSet = false;
    m_changeset_id_isValid = false;

    m_changeset_arn_isSet = false;
    m_changeset_arn_isValid = false;

    m_dataset_id_isSet = false;
    m_dataset_id_isValid = false;

    m_change_type_isSet = false;
    m_change_type_isValid = false;

    m_source_params_isSet = false;
    m_source_params_isValid = false;

    m_format_params_isSet = false;
    m_format_params_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_active_until_timestamp_isSet = false;
    m_active_until_timestamp_isValid = false;

    m_active_from_timestamp_isSet = false;
    m_active_from_timestamp_isValid = false;

    m_updates_changeset_id_isSet = false;
    m_updates_changeset_id_isValid = false;

    m_updated_by_changeset_id_isSet = false;
    m_updated_by_changeset_id_isValid = false;
}

void OAIChangesetSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChangesetSummary::fromJsonObject(QJsonObject json) {

    m_changeset_id_isValid = ::OpenAPI::fromJsonValue(m_changeset_id, json[QString("changesetId")]);
    m_changeset_id_isSet = !json[QString("changesetId")].isNull() && m_changeset_id_isValid;

    m_changeset_arn_isValid = ::OpenAPI::fromJsonValue(m_changeset_arn, json[QString("changesetArn")]);
    m_changeset_arn_isSet = !json[QString("changesetArn")].isNull() && m_changeset_arn_isValid;

    m_dataset_id_isValid = ::OpenAPI::fromJsonValue(m_dataset_id, json[QString("datasetId")]);
    m_dataset_id_isSet = !json[QString("datasetId")].isNull() && m_dataset_id_isValid;

    m_change_type_isValid = ::OpenAPI::fromJsonValue(m_change_type, json[QString("changeType")]);
    m_change_type_isSet = !json[QString("changeType")].isNull() && m_change_type_isValid;

    m_source_params_isValid = ::OpenAPI::fromJsonValue(m_source_params, json[QString("sourceParams")]);
    m_source_params_isSet = !json[QString("sourceParams")].isNull() && m_source_params_isValid;

    m_format_params_isValid = ::OpenAPI::fromJsonValue(m_format_params, json[QString("formatParams")]);
    m_format_params_isSet = !json[QString("formatParams")].isNull() && m_format_params_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_active_until_timestamp_isValid = ::OpenAPI::fromJsonValue(m_active_until_timestamp, json[QString("activeUntilTimestamp")]);
    m_active_until_timestamp_isSet = !json[QString("activeUntilTimestamp")].isNull() && m_active_until_timestamp_isValid;

    m_active_from_timestamp_isValid = ::OpenAPI::fromJsonValue(m_active_from_timestamp, json[QString("activeFromTimestamp")]);
    m_active_from_timestamp_isSet = !json[QString("activeFromTimestamp")].isNull() && m_active_from_timestamp_isValid;

    m_updates_changeset_id_isValid = ::OpenAPI::fromJsonValue(m_updates_changeset_id, json[QString("updatesChangesetId")]);
    m_updates_changeset_id_isSet = !json[QString("updatesChangesetId")].isNull() && m_updates_changeset_id_isValid;

    m_updated_by_changeset_id_isValid = ::OpenAPI::fromJsonValue(m_updated_by_changeset_id, json[QString("updatedByChangesetId")]);
    m_updated_by_changeset_id_isSet = !json[QString("updatedByChangesetId")].isNull() && m_updated_by_changeset_id_isValid;
}

QString OAIChangesetSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChangesetSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_changeset_id_isSet) {
        obj.insert(QString("changesetId"), ::OpenAPI::toJsonValue(m_changeset_id));
    }
    if (m_changeset_arn_isSet) {
        obj.insert(QString("changesetArn"), ::OpenAPI::toJsonValue(m_changeset_arn));
    }
    if (m_dataset_id_isSet) {
        obj.insert(QString("datasetId"), ::OpenAPI::toJsonValue(m_dataset_id));
    }
    if (m_change_type.isSet()) {
        obj.insert(QString("changeType"), ::OpenAPI::toJsonValue(m_change_type));
    }
    if (m_source_params.isSet()) {
        obj.insert(QString("sourceParams"), ::OpenAPI::toJsonValue(m_source_params));
    }
    if (m_format_params.isSet()) {
        obj.insert(QString("formatParams"), ::OpenAPI::toJsonValue(m_format_params));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_error_info.isSet()) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_active_until_timestamp_isSet) {
        obj.insert(QString("activeUntilTimestamp"), ::OpenAPI::toJsonValue(m_active_until_timestamp));
    }
    if (m_active_from_timestamp_isSet) {
        obj.insert(QString("activeFromTimestamp"), ::OpenAPI::toJsonValue(m_active_from_timestamp));
    }
    if (m_updates_changeset_id_isSet) {
        obj.insert(QString("updatesChangesetId"), ::OpenAPI::toJsonValue(m_updates_changeset_id));
    }
    if (m_updated_by_changeset_id_isSet) {
        obj.insert(QString("updatedByChangesetId"), ::OpenAPI::toJsonValue(m_updated_by_changeset_id));
    }
    return obj;
}

QString OAIChangesetSummary::getChangesetId() const {
    return m_changeset_id;
}
void OAIChangesetSummary::setChangesetId(const QString &changeset_id) {
    m_changeset_id = changeset_id;
    m_changeset_id_isSet = true;
}

bool OAIChangesetSummary::is_changeset_id_Set() const{
    return m_changeset_id_isSet;
}

bool OAIChangesetSummary::is_changeset_id_Valid() const{
    return m_changeset_id_isValid;
}

QString OAIChangesetSummary::getChangesetArn() const {
    return m_changeset_arn;
}
void OAIChangesetSummary::setChangesetArn(const QString &changeset_arn) {
    m_changeset_arn = changeset_arn;
    m_changeset_arn_isSet = true;
}

bool OAIChangesetSummary::is_changeset_arn_Set() const{
    return m_changeset_arn_isSet;
}

bool OAIChangesetSummary::is_changeset_arn_Valid() const{
    return m_changeset_arn_isValid;
}

QString OAIChangesetSummary::getDatasetId() const {
    return m_dataset_id;
}
void OAIChangesetSummary::setDatasetId(const QString &dataset_id) {
    m_dataset_id = dataset_id;
    m_dataset_id_isSet = true;
}

bool OAIChangesetSummary::is_dataset_id_Set() const{
    return m_dataset_id_isSet;
}

bool OAIChangesetSummary::is_dataset_id_Valid() const{
    return m_dataset_id_isValid;
}

OAIChangeType OAIChangesetSummary::getChangeType() const {
    return m_change_type;
}
void OAIChangesetSummary::setChangeType(const OAIChangeType &change_type) {
    m_change_type = change_type;
    m_change_type_isSet = true;
}

bool OAIChangesetSummary::is_change_type_Set() const{
    return m_change_type_isSet;
}

bool OAIChangesetSummary::is_change_type_Valid() const{
    return m_change_type_isValid;
}

QMap OAIChangesetSummary::getSourceParams() const {
    return m_source_params;
}
void OAIChangesetSummary::setSourceParams(const QMap &source_params) {
    m_source_params = source_params;
    m_source_params_isSet = true;
}

bool OAIChangesetSummary::is_source_params_Set() const{
    return m_source_params_isSet;
}

bool OAIChangesetSummary::is_source_params_Valid() const{
    return m_source_params_isValid;
}

QMap OAIChangesetSummary::getFormatParams() const {
    return m_format_params;
}
void OAIChangesetSummary::setFormatParams(const QMap &format_params) {
    m_format_params = format_params;
    m_format_params_isSet = true;
}

bool OAIChangesetSummary::is_format_params_Set() const{
    return m_format_params_isSet;
}

bool OAIChangesetSummary::is_format_params_Valid() const{
    return m_format_params_isValid;
}

qint32 OAIChangesetSummary::getCreateTime() const {
    return m_create_time;
}
void OAIChangesetSummary::setCreateTime(const qint32 &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIChangesetSummary::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIChangesetSummary::is_create_time_Valid() const{
    return m_create_time_isValid;
}

OAIIngestionStatus OAIChangesetSummary::getStatus() const {
    return m_status;
}
void OAIChangesetSummary::setStatus(const OAIIngestionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIChangesetSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIChangesetSummary::is_status_Valid() const{
    return m_status_isValid;
}

OAIGetChangesetResponse_errorInfo OAIChangesetSummary::getErrorInfo() const {
    return m_error_info;
}
void OAIChangesetSummary::setErrorInfo(const OAIGetChangesetResponse_errorInfo &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAIChangesetSummary::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAIChangesetSummary::is_error_info_Valid() const{
    return m_error_info_isValid;
}

qint32 OAIChangesetSummary::getActiveUntilTimestamp() const {
    return m_active_until_timestamp;
}
void OAIChangesetSummary::setActiveUntilTimestamp(const qint32 &active_until_timestamp) {
    m_active_until_timestamp = active_until_timestamp;
    m_active_until_timestamp_isSet = true;
}

bool OAIChangesetSummary::is_active_until_timestamp_Set() const{
    return m_active_until_timestamp_isSet;
}

bool OAIChangesetSummary::is_active_until_timestamp_Valid() const{
    return m_active_until_timestamp_isValid;
}

qint32 OAIChangesetSummary::getActiveFromTimestamp() const {
    return m_active_from_timestamp;
}
void OAIChangesetSummary::setActiveFromTimestamp(const qint32 &active_from_timestamp) {
    m_active_from_timestamp = active_from_timestamp;
    m_active_from_timestamp_isSet = true;
}

bool OAIChangesetSummary::is_active_from_timestamp_Set() const{
    return m_active_from_timestamp_isSet;
}

bool OAIChangesetSummary::is_active_from_timestamp_Valid() const{
    return m_active_from_timestamp_isValid;
}

QString OAIChangesetSummary::getUpdatesChangesetId() const {
    return m_updates_changeset_id;
}
void OAIChangesetSummary::setUpdatesChangesetId(const QString &updates_changeset_id) {
    m_updates_changeset_id = updates_changeset_id;
    m_updates_changeset_id_isSet = true;
}

bool OAIChangesetSummary::is_updates_changeset_id_Set() const{
    return m_updates_changeset_id_isSet;
}

bool OAIChangesetSummary::is_updates_changeset_id_Valid() const{
    return m_updates_changeset_id_isValid;
}

QString OAIChangesetSummary::getUpdatedByChangesetId() const {
    return m_updated_by_changeset_id;
}
void OAIChangesetSummary::setUpdatedByChangesetId(const QString &updated_by_changeset_id) {
    m_updated_by_changeset_id = updated_by_changeset_id;
    m_updated_by_changeset_id_isSet = true;
}

bool OAIChangesetSummary::is_updated_by_changeset_id_Set() const{
    return m_updated_by_changeset_id_isSet;
}

bool OAIChangesetSummary::is_updated_by_changeset_id_Valid() const{
    return m_updated_by_changeset_id_isValid;
}

bool OAIChangesetSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_changeset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_changeset_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_params.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_params.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_until_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_from_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updates_changeset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_by_changeset_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChangesetSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
