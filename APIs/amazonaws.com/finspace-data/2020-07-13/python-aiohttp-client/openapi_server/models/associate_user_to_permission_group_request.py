# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class AssociateUserToPermissionGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None):
        """AssociateUserToPermissionGroupRequest - a model defined in OpenAPI

        :param client_token: The client_token of this AssociateUserToPermissionGroupRequest.
        """
        self.openapi_types = {
            'client_token': str
        }

        self.attribute_map = {
            'client_token': 'clientToken'
        }

        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociateUserToPermissionGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssociateUserToPermissionGroup_request of this AssociateUserToPermissionGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this AssociateUserToPermissionGroupRequest.

        Idempotence Token for API operations

        :return: The client_token of this AssociateUserToPermissionGroupRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this AssociateUserToPermissionGroupRequest.

        Idempotence Token for API operations

        :param client_token: The client_token of this AssociateUserToPermissionGroupRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 128:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `128`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'.*\S.*', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/.*\S.*/`")

        self._client_token = client_token
