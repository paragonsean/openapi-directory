# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_dataset_request_schema_definition import CreateDatasetRequestSchemaDefinition
import re
from openapi_server import util


class UpdateDatasetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, dataset_title: str=None, kind: str=None, dataset_description: str=None, alias: str=None, schema_definition: CreateDatasetRequestSchemaDefinition=None):
        """UpdateDatasetRequest - a model defined in OpenAPI

        :param client_token: The client_token of this UpdateDatasetRequest.
        :param dataset_title: The dataset_title of this UpdateDatasetRequest.
        :param kind: The kind of this UpdateDatasetRequest.
        :param dataset_description: The dataset_description of this UpdateDatasetRequest.
        :param alias: The alias of this UpdateDatasetRequest.
        :param schema_definition: The schema_definition of this UpdateDatasetRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'dataset_title': str,
            'kind': str,
            'dataset_description': str,
            'alias': str,
            'schema_definition': CreateDatasetRequestSchemaDefinition
        }

        self.attribute_map = {
            'client_token': 'clientToken',
            'dataset_title': 'datasetTitle',
            'kind': 'kind',
            'dataset_description': 'datasetDescription',
            'alias': 'alias',
            'schema_definition': 'schemaDefinition'
        }

        self._client_token = client_token
        self._dataset_title = dataset_title
        self._kind = kind
        self._dataset_description = dataset_description
        self._alias = alias
        self._schema_definition = schema_definition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateDatasetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateDataset_request of this UpdateDatasetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this UpdateDatasetRequest.

        Idempotence Token for API operations

        :return: The client_token of this UpdateDatasetRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this UpdateDatasetRequest.

        Idempotence Token for API operations

        :param client_token: The client_token of this UpdateDatasetRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 128:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `128`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'.*\S.*', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/.*\S.*/`")

        self._client_token = client_token

    @property
    def dataset_title(self):
        """Gets the dataset_title of this UpdateDatasetRequest.

        Title for a given Dataset

        :return: The dataset_title of this UpdateDatasetRequest.
        :rtype: str
        """
        return self._dataset_title

    @dataset_title.setter
    def dataset_title(self, dataset_title):
        """Sets the dataset_title of this UpdateDatasetRequest.

        Title for a given Dataset

        :param dataset_title: The dataset_title of this UpdateDatasetRequest.
        :type dataset_title: str
        """
        if dataset_title is None:
            raise ValueError("Invalid value for `dataset_title`, must not be `None`")
        if dataset_title is not None and len(dataset_title) > 255:
            raise ValueError("Invalid value for `dataset_title`, length must be less than or equal to `255`")
        if dataset_title is not None and len(dataset_title) < 1:
            raise ValueError("Invalid value for `dataset_title`, length must be greater than or equal to `1`")
        if dataset_title is not None and not re.search(r'.*\S.*', dataset_title):
            raise ValueError("Invalid value for `dataset_title`, must be a follow pattern or equal to `/.*\S.*/`")

        self._dataset_title = dataset_title

    @property
    def kind(self):
        """Gets the kind of this UpdateDatasetRequest.

        Dataset Kind

        :return: The kind of this UpdateDatasetRequest.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this UpdateDatasetRequest.

        Dataset Kind

        :param kind: The kind of this UpdateDatasetRequest.
        :type kind: str
        """
        allowed_values = ["TABULAR", "NON_TABULAR"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def dataset_description(self):
        """Gets the dataset_description of this UpdateDatasetRequest.

        Description of a dataset

        :return: The dataset_description of this UpdateDatasetRequest.
        :rtype: str
        """
        return self._dataset_description

    @dataset_description.setter
    def dataset_description(self, dataset_description):
        """Sets the dataset_description of this UpdateDatasetRequest.

        Description of a dataset

        :param dataset_description: The dataset_description of this UpdateDatasetRequest.
        :type dataset_description: str
        """
        if dataset_description is not None and len(dataset_description) > 1000:
            raise ValueError("Invalid value for `dataset_description`, length must be less than or equal to `1000`")
        if dataset_description is not None and not re.search(r'[\s\S]*', dataset_description):
            raise ValueError("Invalid value for `dataset_description`, must be a follow pattern or equal to `/[\s\S]*/`")

        self._dataset_description = dataset_description

    @property
    def alias(self):
        """Gets the alias of this UpdateDatasetRequest.

        The unique resource identifier for a Dataset.

        :return: The alias of this UpdateDatasetRequest.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this UpdateDatasetRequest.

        The unique resource identifier for a Dataset.

        :param alias: The alias of this UpdateDatasetRequest.
        :type alias: str
        """
        if alias is not None and len(alias) > 255:
            raise ValueError("Invalid value for `alias`, length must be less than or equal to `255`")
        if alias is not None and len(alias) < 1:
            raise ValueError("Invalid value for `alias`, length must be greater than or equal to `1`")
        if alias is not None and not re.search(r'^alias\/\S+', alias):
            raise ValueError("Invalid value for `alias`, must be a follow pattern or equal to `/^alias\/\S+/`")

        self._alias = alias

    @property
    def schema_definition(self):
        """Gets the schema_definition of this UpdateDatasetRequest.


        :return: The schema_definition of this UpdateDatasetRequest.
        :rtype: CreateDatasetRequestSchemaDefinition
        """
        return self._schema_definition

    @schema_definition.setter
    def schema_definition(self, schema_definition):
        """Sets the schema_definition of this UpdateDatasetRequest.


        :param schema_definition: The schema_definition of this UpdateDatasetRequest.
        :type schema_definition: CreateDatasetRequestSchemaDefinition
        """

        self._schema_definition = schema_definition
