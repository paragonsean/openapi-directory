# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_data_view_request_destination_type_params import CreateDataViewRequestDestinationTypeParams
import re
from openapi_server import util


class CreateDataViewRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, auto_update: bool=None, sort_columns: List[str]=None, partition_columns: List[str]=None, as_of_timestamp: int=None, destination_type_params: CreateDataViewRequestDestinationTypeParams=None):
        """CreateDataViewRequest - a model defined in OpenAPI

        :param client_token: The client_token of this CreateDataViewRequest.
        :param auto_update: The auto_update of this CreateDataViewRequest.
        :param sort_columns: The sort_columns of this CreateDataViewRequest.
        :param partition_columns: The partition_columns of this CreateDataViewRequest.
        :param as_of_timestamp: The as_of_timestamp of this CreateDataViewRequest.
        :param destination_type_params: The destination_type_params of this CreateDataViewRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'auto_update': bool,
            'sort_columns': List[str],
            'partition_columns': List[str],
            'as_of_timestamp': int,
            'destination_type_params': CreateDataViewRequestDestinationTypeParams
        }

        self.attribute_map = {
            'client_token': 'clientToken',
            'auto_update': 'autoUpdate',
            'sort_columns': 'sortColumns',
            'partition_columns': 'partitionColumns',
            'as_of_timestamp': 'asOfTimestamp',
            'destination_type_params': 'destinationTypeParams'
        }

        self._client_token = client_token
        self._auto_update = auto_update
        self._sort_columns = sort_columns
        self._partition_columns = partition_columns
        self._as_of_timestamp = as_of_timestamp
        self._destination_type_params = destination_type_params

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDataViewRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDataView_request of this CreateDataViewRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateDataViewRequest.

        Idempotence Token for API operations

        :return: The client_token of this CreateDataViewRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateDataViewRequest.

        Idempotence Token for API operations

        :param client_token: The client_token of this CreateDataViewRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 128:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `128`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'.*\S.*', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/.*\S.*/`")

        self._client_token = client_token

    @property
    def auto_update(self):
        """Gets the auto_update of this CreateDataViewRequest.

        Common Boolean data type

        :return: The auto_update of this CreateDataViewRequest.
        :rtype: bool
        """
        return self._auto_update

    @auto_update.setter
    def auto_update(self, auto_update):
        """Sets the auto_update of this CreateDataViewRequest.

        Common Boolean data type

        :param auto_update: The auto_update of this CreateDataViewRequest.
        :type auto_update: bool
        """

        self._auto_update = auto_update

    @property
    def sort_columns(self):
        """Gets the sort_columns of this CreateDataViewRequest.

        DataView Sort Column List

        :return: The sort_columns of this CreateDataViewRequest.
        :rtype: List[str]
        """
        return self._sort_columns

    @sort_columns.setter
    def sort_columns(self, sort_columns):
        """Sets the sort_columns of this CreateDataViewRequest.

        DataView Sort Column List

        :param sort_columns: The sort_columns of this CreateDataViewRequest.
        :type sort_columns: List[str]
        """

        self._sort_columns = sort_columns

    @property
    def partition_columns(self):
        """Gets the partition_columns of this CreateDataViewRequest.

        DataView Partition Column List

        :return: The partition_columns of this CreateDataViewRequest.
        :rtype: List[str]
        """
        return self._partition_columns

    @partition_columns.setter
    def partition_columns(self, partition_columns):
        """Sets the partition_columns of this CreateDataViewRequest.

        DataView Partition Column List

        :param partition_columns: The partition_columns of this CreateDataViewRequest.
        :type partition_columns: List[str]
        """

        self._partition_columns = partition_columns

    @property
    def as_of_timestamp(self):
        """Gets the as_of_timestamp of this CreateDataViewRequest.

        Milliseconds since UTC epoch

        :return: The as_of_timestamp of this CreateDataViewRequest.
        :rtype: int
        """
        return self._as_of_timestamp

    @as_of_timestamp.setter
    def as_of_timestamp(self, as_of_timestamp):
        """Sets the as_of_timestamp of this CreateDataViewRequest.

        Milliseconds since UTC epoch

        :param as_of_timestamp: The as_of_timestamp of this CreateDataViewRequest.
        :type as_of_timestamp: int
        """

        self._as_of_timestamp = as_of_timestamp

    @property
    def destination_type_params(self):
        """Gets the destination_type_params of this CreateDataViewRequest.


        :return: The destination_type_params of this CreateDataViewRequest.
        :rtype: CreateDataViewRequestDestinationTypeParams
        """
        return self._destination_type_params

    @destination_type_params.setter
    def destination_type_params(self, destination_type_params):
        """Sets the destination_type_params of this CreateDataViewRequest.


        :param destination_type_params: The destination_type_params of this CreateDataViewRequest.
        :type destination_type_params: CreateDataViewRequestDestinationTypeParams
        """
        if destination_type_params is None:
            raise ValueError("Invalid value for `destination_type_params`, must not be `None`")

        self._destination_type_params = destination_type_params
