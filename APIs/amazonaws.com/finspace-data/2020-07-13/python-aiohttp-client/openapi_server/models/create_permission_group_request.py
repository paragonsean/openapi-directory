# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_permission import ApplicationPermission
import re
from openapi_server import util


class CreatePermissionGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, application_permissions: List[ApplicationPermission]=None, client_token: str=None):
        """CreatePermissionGroupRequest - a model defined in OpenAPI

        :param name: The name of this CreatePermissionGroupRequest.
        :param description: The description of this CreatePermissionGroupRequest.
        :param application_permissions: The application_permissions of this CreatePermissionGroupRequest.
        :param client_token: The client_token of this CreatePermissionGroupRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'application_permissions': List[ApplicationPermission],
            'client_token': str
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'application_permissions': 'applicationPermissions',
            'client_token': 'clientToken'
        }

        self._name = name
        self._description = description
        self._application_permissions = application_permissions
        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatePermissionGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreatePermissionGroup_request of this CreatePermissionGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreatePermissionGroupRequest.

        The name of the permission group.

        :return: The name of this CreatePermissionGroupRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreatePermissionGroupRequest.

        The name of the permission group.

        :param name: The name of this CreatePermissionGroupRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'.*\S.*', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/.*\S.*/`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreatePermissionGroupRequest.

        A brief description for the permission group.

        :return: The description of this CreatePermissionGroupRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreatePermissionGroupRequest.

        A brief description for the permission group.

        :param description: The description of this CreatePermissionGroupRequest.
        :type description: str
        """
        if description is not None and len(description) > 4000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `4000`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")
        if description is not None and not re.search(r'[\s\S]*', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/[\s\S]*/`")

        self._description = description

    @property
    def application_permissions(self):
        """Gets the application_permissions of this CreatePermissionGroupRequest.

        <p>The option to indicate FinSpace application permissions that are granted to a specific group.</p> <important> <p>When assigning application permissions, be aware that the permission <code>ManageUsersAndGroups</code> allows users to grant themselves or others access to any functionality in their FinSpace environment's application. It should only be granted to trusted users.</p> </important> <ul> <li> <p> <code>CreateDataset</code> – Group members can create new datasets.</p> </li> <li> <p> <code>ManageClusters</code> – Group members can manage Apache Spark clusters from FinSpace notebooks.</p> </li> <li> <p> <code>ManageUsersAndGroups</code> – Group members can manage users and permission groups. This is a privileged permission that allows users to grant themselves or others access to any functionality in the application. It should only be granted to trusted users.</p> </li> <li> <p> <code>ManageAttributeSets</code> – Group members can manage attribute sets.</p> </li> <li> <p> <code>ViewAuditData</code> – Group members can view audit data.</p> </li> <li> <p> <code>AccessNotebooks</code> – Group members will have access to FinSpace notebooks.</p> </li> <li> <p> <code>GetTemporaryCredentials</code> – Group members can get temporary API credentials.</p> </li> </ul>

        :return: The application_permissions of this CreatePermissionGroupRequest.
        :rtype: List[ApplicationPermission]
        """
        return self._application_permissions

    @application_permissions.setter
    def application_permissions(self, application_permissions):
        """Sets the application_permissions of this CreatePermissionGroupRequest.

        <p>The option to indicate FinSpace application permissions that are granted to a specific group.</p> <important> <p>When assigning application permissions, be aware that the permission <code>ManageUsersAndGroups</code> allows users to grant themselves or others access to any functionality in their FinSpace environment's application. It should only be granted to trusted users.</p> </important> <ul> <li> <p> <code>CreateDataset</code> – Group members can create new datasets.</p> </li> <li> <p> <code>ManageClusters</code> – Group members can manage Apache Spark clusters from FinSpace notebooks.</p> </li> <li> <p> <code>ManageUsersAndGroups</code> – Group members can manage users and permission groups. This is a privileged permission that allows users to grant themselves or others access to any functionality in the application. It should only be granted to trusted users.</p> </li> <li> <p> <code>ManageAttributeSets</code> – Group members can manage attribute sets.</p> </li> <li> <p> <code>ViewAuditData</code> – Group members can view audit data.</p> </li> <li> <p> <code>AccessNotebooks</code> – Group members will have access to FinSpace notebooks.</p> </li> <li> <p> <code>GetTemporaryCredentials</code> – Group members can get temporary API credentials.</p> </li> </ul>

        :param application_permissions: The application_permissions of this CreatePermissionGroupRequest.
        :type application_permissions: List[ApplicationPermission]
        """
        if application_permissions is None:
            raise ValueError("Invalid value for `application_permissions`, must not be `None`")

        self._application_permissions = application_permissions

    @property
    def client_token(self):
        """Gets the client_token of this CreatePermissionGroupRequest.

        Idempotence Token for API operations

        :return: The client_token of this CreatePermissionGroupRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreatePermissionGroupRequest.

        Idempotence Token for API operations

        :param client_token: The client_token of this CreatePermissionGroupRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 128:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `128`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'.*\S.*', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/.*\S.*/`")

        self._client_token = client_token
