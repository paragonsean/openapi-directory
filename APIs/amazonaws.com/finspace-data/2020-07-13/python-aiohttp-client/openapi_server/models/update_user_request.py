# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UpdateUserRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, first_name: str=None, last_name: str=None, api_access: str=None, api_access_principal_arn: str=None, client_token: str=None):
        """UpdateUserRequest - a model defined in OpenAPI

        :param type: The type of this UpdateUserRequest.
        :param first_name: The first_name of this UpdateUserRequest.
        :param last_name: The last_name of this UpdateUserRequest.
        :param api_access: The api_access of this UpdateUserRequest.
        :param api_access_principal_arn: The api_access_principal_arn of this UpdateUserRequest.
        :param client_token: The client_token of this UpdateUserRequest.
        """
        self.openapi_types = {
            'type': str,
            'first_name': str,
            'last_name': str,
            'api_access': str,
            'api_access_principal_arn': str,
            'client_token': str
        }

        self.attribute_map = {
            'type': 'type',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'api_access': 'apiAccess',
            'api_access_principal_arn': 'apiAccessPrincipalArn',
            'client_token': 'clientToken'
        }

        self._type = type
        self._first_name = first_name
        self._last_name = last_name
        self._api_access = api_access
        self._api_access_principal_arn = api_access_principal_arn
        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateUserRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateUser_request of this UpdateUserRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this UpdateUserRequest.

        <p>The option to indicate the type of user.</p> <ul> <li> <p> <code>SUPER_USER</code>– A user with permission to all the functionality and data in FinSpace.</p> </li> <li> <p> <code>APP_USER</code> – A user with specific permissions in FinSpace. The users are assigned permissions by adding them to a permission group.</p> </li> </ul>

        :return: The type of this UpdateUserRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UpdateUserRequest.

        <p>The option to indicate the type of user.</p> <ul> <li> <p> <code>SUPER_USER</code>– A user with permission to all the functionality and data in FinSpace.</p> </li> <li> <p> <code>APP_USER</code> – A user with specific permissions in FinSpace. The users are assigned permissions by adding them to a permission group.</p> </li> </ul>

        :param type: The type of this UpdateUserRequest.
        :type type: str
        """
        allowed_values = ["SUPER_USER", "APP_USER"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def first_name(self):
        """Gets the first_name of this UpdateUserRequest.

        The first name of the user.

        :return: The first_name of this UpdateUserRequest.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UpdateUserRequest.

        The first name of the user.

        :param first_name: The first_name of this UpdateUserRequest.
        :type first_name: str
        """
        if first_name is not None and len(first_name) > 50:
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `50`")
        if first_name is not None and len(first_name) < 1:
            raise ValueError("Invalid value for `first_name`, length must be greater than or equal to `1`")
        if first_name is not None and not re.search(r'.*\S.*', first_name):
            raise ValueError("Invalid value for `first_name`, must be a follow pattern or equal to `/.*\S.*/`")

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UpdateUserRequest.

        The last name of the user.

        :return: The last_name of this UpdateUserRequest.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UpdateUserRequest.

        The last name of the user.

        :param last_name: The last_name of this UpdateUserRequest.
        :type last_name: str
        """
        if last_name is not None and len(last_name) > 50:
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `50`")
        if last_name is not None and len(last_name) < 1:
            raise ValueError("Invalid value for `last_name`, length must be greater than or equal to `1`")
        if last_name is not None and not re.search(r'.*\S.*', last_name):
            raise ValueError("Invalid value for `last_name`, must be a follow pattern or equal to `/.*\S.*/`")

        self._last_name = last_name

    @property
    def api_access(self):
        """Gets the api_access of this UpdateUserRequest.

        <p>The option to indicate whether the user can use the <code>GetProgrammaticAccessCredentials</code> API to obtain credentials that can then be used to access other FinSpace Data API operations.</p> <ul> <li> <p> <code>ENABLED</code> – The user has permissions to use the APIs.</p> </li> <li> <p> <code>DISABLED</code> – The user does not have permissions to use any APIs.</p> </li> </ul>

        :return: The api_access of this UpdateUserRequest.
        :rtype: str
        """
        return self._api_access

    @api_access.setter
    def api_access(self, api_access):
        """Sets the api_access of this UpdateUserRequest.

        <p>The option to indicate whether the user can use the <code>GetProgrammaticAccessCredentials</code> API to obtain credentials that can then be used to access other FinSpace Data API operations.</p> <ul> <li> <p> <code>ENABLED</code> – The user has permissions to use the APIs.</p> </li> <li> <p> <code>DISABLED</code> – The user does not have permissions to use any APIs.</p> </li> </ul>

        :param api_access: The api_access of this UpdateUserRequest.
        :type api_access: str
        """
        allowed_values = ["ENABLED", "DISABLED"]  # noqa: E501
        if api_access not in allowed_values:
            raise ValueError(
                "Invalid value for `api_access` ({0}), must be one of {1}"
                .format(api_access, allowed_values)
            )

        self._api_access = api_access

    @property
    def api_access_principal_arn(self):
        """Gets the api_access_principal_arn of this UpdateUserRequest.

        The ARN identifier of an AWS user or role that is allowed to call the <code>GetProgrammaticAccessCredentials</code> API to obtain a credentials token for a specific FinSpace user. This must be an IAM role within your FinSpace account.

        :return: The api_access_principal_arn of this UpdateUserRequest.
        :rtype: str
        """
        return self._api_access_principal_arn

    @api_access_principal_arn.setter
    def api_access_principal_arn(self, api_access_principal_arn):
        """Sets the api_access_principal_arn of this UpdateUserRequest.

        The ARN identifier of an AWS user or role that is allowed to call the <code>GetProgrammaticAccessCredentials</code> API to obtain a credentials token for a specific FinSpace user. This must be an IAM role within your FinSpace account.

        :param api_access_principal_arn: The api_access_principal_arn of this UpdateUserRequest.
        :type api_access_principal_arn: str
        """
        if api_access_principal_arn is not None and len(api_access_principal_arn) > 2048:
            raise ValueError("Invalid value for `api_access_principal_arn`, length must be less than or equal to `2048`")
        if api_access_principal_arn is not None and len(api_access_principal_arn) < 20:
            raise ValueError("Invalid value for `api_access_principal_arn`, length must be greater than or equal to `20`")
        if api_access_principal_arn is not None and not re.search(r'^arn:aws[a-z\-]*:iam::\d{12}:role\/?[a-zA-Z_0-9+=,.@\-_\/]+$', api_access_principal_arn):
            raise ValueError("Invalid value for `api_access_principal_arn`, must be a follow pattern or equal to `/^arn:aws[a-z\-]*:iam::\d{12}:role\/?[a-zA-Z_0-9+=,.@\-_\/]+$/`")

        self._api_access_principal_arn = api_access_principal_arn

    @property
    def client_token(self):
        """Gets the client_token of this UpdateUserRequest.

        Idempotence Token for API operations

        :return: The client_token of this UpdateUserRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this UpdateUserRequest.

        Idempotence Token for API operations

        :param client_token: The client_token of this UpdateUserRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 128:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `128`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'.*\S.*', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/.*\S.*/`")

        self._client_token = client_token
