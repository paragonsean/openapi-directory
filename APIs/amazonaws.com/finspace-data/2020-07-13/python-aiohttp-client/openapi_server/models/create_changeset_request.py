# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateChangesetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, change_type: str=None, source_params: Dict[str, str]=None, format_params: Dict[str, str]=None):
        """CreateChangesetRequest - a model defined in OpenAPI

        :param client_token: The client_token of this CreateChangesetRequest.
        :param change_type: The change_type of this CreateChangesetRequest.
        :param source_params: The source_params of this CreateChangesetRequest.
        :param format_params: The format_params of this CreateChangesetRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'change_type': str,
            'source_params': Dict[str, str],
            'format_params': Dict[str, str]
        }

        self.attribute_map = {
            'client_token': 'clientToken',
            'change_type': 'changeType',
            'source_params': 'sourceParams',
            'format_params': 'formatParams'
        }

        self._client_token = client_token
        self._change_type = change_type
        self._source_params = source_params
        self._format_params = format_params

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateChangesetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateChangeset_request of this CreateChangesetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateChangesetRequest.

        Idempotence Token for API operations

        :return: The client_token of this CreateChangesetRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateChangesetRequest.

        Idempotence Token for API operations

        :param client_token: The client_token of this CreateChangesetRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 128:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `128`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'.*\S.*', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/.*\S.*/`")

        self._client_token = client_token

    @property
    def change_type(self):
        """Gets the change_type of this CreateChangesetRequest.

        Indicates how the given change will be applied to the dataset.

        :return: The change_type of this CreateChangesetRequest.
        :rtype: str
        """
        return self._change_type

    @change_type.setter
    def change_type(self, change_type):
        """Sets the change_type of this CreateChangesetRequest.

        Indicates how the given change will be applied to the dataset.

        :param change_type: The change_type of this CreateChangesetRequest.
        :type change_type: str
        """
        allowed_values = ["REPLACE", "APPEND", "MODIFY"]  # noqa: E501
        if change_type not in allowed_values:
            raise ValueError(
                "Invalid value for `change_type` ({0}), must be one of {1}"
                .format(change_type, allowed_values)
            )

        self._change_type = change_type

    @property
    def source_params(self):
        """Gets the source_params of this CreateChangesetRequest.

        Source Parameters of a Changeset

        :return: The source_params of this CreateChangesetRequest.
        :rtype: Dict[str, str]
        """
        return self._source_params

    @source_params.setter
    def source_params(self, source_params):
        """Sets the source_params of this CreateChangesetRequest.

        Source Parameters of a Changeset

        :param source_params: The source_params of this CreateChangesetRequest.
        :type source_params: Dict[str, str]
        """
        if source_params is None:
            raise ValueError("Invalid value for `source_params`, must not be `None`")

        self._source_params = source_params

    @property
    def format_params(self):
        """Gets the format_params of this CreateChangesetRequest.

        Format Parameters of a Changeset

        :return: The format_params of this CreateChangesetRequest.
        :rtype: Dict[str, str]
        """
        return self._format_params

    @format_params.setter
    def format_params(self, format_params):
        """Sets the format_params of this CreateChangesetRequest.

        Format Parameters of a Changeset

        :param format_params: The format_params of this CreateChangesetRequest.
        :type format_params: Dict[str, str]
        """
        if format_params is None:
            raise ValueError("Invalid value for `format_params`, must not be `None`")

        self._format_params = format_params
