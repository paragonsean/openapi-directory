/**
 * Amazon Verified Permissions
 * <p>Amazon Verified Permissions is a permissions management service from Amazon Web Services. You can use Verified Permissions to manage permissions for your application, and authorize user access based on those permissions. Using Verified Permissions, application developers can grant access based on information about the users, resources, and requested actions. You can also evaluate additional information like group membership, attributes of the resources, and session context, such as time of request and IP addresses. Verified Permissions manages these permissions by letting you create and store authorization policies for your applications, such as consumer-facing web sites and enterprise business systems.</p> <p>Verified Permissions uses Cedar as the policy language to express your permission requirements. Cedar supports both role-based access control (RBAC) and attribute-based access control (ABAC) authorization models.</p> <p>For more information about configuring, administering, and using Amazon Verified Permissions in your applications, see the <a href=\"https://docs.aws.amazon.com/verifiedpermissions/latest/userguide/\">Amazon Verified Permissions User Guide</a>.</p> <p>For more information about the Cedar policy language, see the <a href=\"https://docs.cedarpolicy.com/\">Cedar Policy Language Guide</a>.</p> <important> <p>When you write Cedar policies that reference principals, resources and actions, you can define the unique identifiers used for each of those elements. We strongly recommend that you follow these best practices:</p> <ul> <li> <p> <b>Use values like universally unique identifiers (UUIDs) for all principal and resource identifiers.</b> </p> <p>For example, if user <code>jane</code> leaves the company, and you later let someone else use the name <code>jane</code>, then that new user automatically gets access to everything granted by policies that still reference <code>User::\"jane\"</code>. Cedar can’t distinguish between the new user and the old. This applies to both principal and resource identifiers. Always use identifiers that are guaranteed unique and never reused to ensure that you don’t unintentionally grant access because of the presence of an old identifier in a policy.</p> <p>Where you use a UUID for an entity, we recommend that you follow it with the // comment specifier and the ‘friendly’ name of your entity. This helps to make your policies easier to understand. For example: principal == User::\"a1b2c3d4-e5f6-a1b2-c3d4-EXAMPLE11111\", // alice</p> </li> <li> <p> <b>Do not include personally identifying, confidential, or sensitive information as part of the unique identifier for your principals or resources.</b> These identifiers are included in log entries shared in CloudTrail trails.</p> </li> </ul> </important> <p>Several operations return structures that appear similar, but have different purposes. As new functionality is added to the product, the structure used in a parameter of one operation might need to change in a way that wouldn't make sense for the same parameter in a different operation. To help you understand the purpose of each, the following naming convention is used for the structures:</p> <ul> <li> <p>Parameter type structures that end in <code>Detail</code> are used in <code>Get</code> operations.</p> </li> <li> <p>Parameter type structures that end in <code>Item</code> are used in <code>List</code> operations.</p> </li> <li> <p>Parameter type structures that use neither suffix are used in the mutating (create and update) operations.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2021-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateIdentitySourceInput from '../model/CreateIdentitySourceInput';
import CreateIdentitySourceOutput from '../model/CreateIdentitySourceOutput';
import CreatePolicyInput from '../model/CreatePolicyInput';
import CreatePolicyOutput from '../model/CreatePolicyOutput';
import CreatePolicyStoreInput from '../model/CreatePolicyStoreInput';
import CreatePolicyStoreOutput from '../model/CreatePolicyStoreOutput';
import CreatePolicyTemplateInput from '../model/CreatePolicyTemplateInput';
import CreatePolicyTemplateOutput from '../model/CreatePolicyTemplateOutput';
import DeleteIdentitySourceInput from '../model/DeleteIdentitySourceInput';
import DeletePolicyInput from '../model/DeletePolicyInput';
import DeletePolicyStoreInput from '../model/DeletePolicyStoreInput';
import DeletePolicyTemplateInput from '../model/DeletePolicyTemplateInput';
import GetIdentitySourceInput from '../model/GetIdentitySourceInput';
import GetIdentitySourceOutput from '../model/GetIdentitySourceOutput';
import GetPolicyInput from '../model/GetPolicyInput';
import GetPolicyOutput from '../model/GetPolicyOutput';
import GetPolicyStoreInput from '../model/GetPolicyStoreInput';
import GetPolicyStoreOutput from '../model/GetPolicyStoreOutput';
import GetPolicyTemplateInput from '../model/GetPolicyTemplateInput';
import GetPolicyTemplateOutput from '../model/GetPolicyTemplateOutput';
import GetSchemaInput from '../model/GetSchemaInput';
import GetSchemaOutput from '../model/GetSchemaOutput';
import IsAuthorizedInput from '../model/IsAuthorizedInput';
import IsAuthorizedOutput from '../model/IsAuthorizedOutput';
import IsAuthorizedWithTokenInput from '../model/IsAuthorizedWithTokenInput';
import IsAuthorizedWithTokenOutput from '../model/IsAuthorizedWithTokenOutput';
import ListIdentitySourcesInput from '../model/ListIdentitySourcesInput';
import ListIdentitySourcesOutput from '../model/ListIdentitySourcesOutput';
import ListPoliciesInput from '../model/ListPoliciesInput';
import ListPoliciesOutput from '../model/ListPoliciesOutput';
import ListPolicyStoresInput from '../model/ListPolicyStoresInput';
import ListPolicyStoresOutput from '../model/ListPolicyStoresOutput';
import ListPolicyTemplatesInput from '../model/ListPolicyTemplatesInput';
import ListPolicyTemplatesOutput from '../model/ListPolicyTemplatesOutput';
import PutSchemaInput from '../model/PutSchemaInput';
import PutSchemaOutput from '../model/PutSchemaOutput';
import UpdateIdentitySourceInput from '../model/UpdateIdentitySourceInput';
import UpdateIdentitySourceOutput from '../model/UpdateIdentitySourceOutput';
import UpdatePolicyInput from '../model/UpdatePolicyInput';
import UpdatePolicyOutput from '../model/UpdatePolicyOutput';
import UpdatePolicyStoreInput from '../model/UpdatePolicyStoreInput';
import UpdatePolicyStoreOutput from '../model/UpdatePolicyStoreOutput';
import UpdatePolicyTemplateInput from '../model/UpdatePolicyTemplateInput';
import UpdatePolicyTemplateOutput from '../model/UpdatePolicyTemplateOutput';

/**
* Default service.
* @module api/DefaultApi
* @version 2021-12-01
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createIdentitySource operation.
     * @callback module:api/DefaultApi~createIdentitySourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateIdentitySourceOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a reference to an Amazon Cognito user pool as an external identity provider (IdP). </p> <p>After you create an identity source, you can use the identities provided by the IdP as proxies for the principal in authorization queries that use the <a href=\"https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_IsAuthorizedWithToken.html\">IsAuthorizedWithToken</a> operation. These identities take the form of tokens that contain claims about the user, such as IDs, attributes and group memberships. Amazon Cognito provides both identity tokens and access tokens, and Verified Permissions can use either or both. Any combination of identity and access tokens results in the same Cedar principal. Verified Permissions automatically translates the information about the identities into the standard Cedar attributes that can be evaluated by your policies. Because the Amazon Cognito identity and access tokens can contain different information, the tokens you choose to use determine which principal attributes are available to access when evaluating Cedar policies.</p> <important> <p>If you delete a Amazon Cognito user pool or user, tokens from that deleted pool or that deleted user continue to be usable until they expire.</p> </important> <note> <p>To reference a user from this identity source in your Cedar policies, use the following syntax.</p> <p> <i>IdentityType::\"&lt;CognitoUserPoolIdentifier&gt;|&lt;CognitoClientId&gt;</i> </p> <p>Where <code>IdentityType</code> is the string that you provide to the <code>PrincipalEntityType</code> parameter for this operation. The <code>CognitoUserPoolId</code> and <code>CognitoClientId</code> are defined by the Amazon Cognito user pool.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateIdentitySourceInput} createIdentitySourceInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createIdentitySourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateIdentitySourceOutput}
     */
    createIdentitySource(xAmzTarget, createIdentitySourceInput, opts, callback) {
      opts = opts || {};
      let postBody = createIdentitySourceInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createIdentitySource");
      }
      // verify the required parameter 'createIdentitySourceInput' is set
      if (createIdentitySourceInput === undefined || createIdentitySourceInput === null) {
        throw new Error("Missing the required parameter 'createIdentitySourceInput' when calling createIdentitySource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateIdentitySourceOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VerifiedPermissions.CreateIdentitySource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPolicy operation.
     * @callback module:api/DefaultApi~createPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePolicyOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a Cedar policy and saves it in the specified policy store. You can create either a static policy or a policy linked to a policy template.</p> <ul> <li> <p>To create a static policy, provide the Cedar policy text in the <code>StaticPolicy</code> section of the <code>PolicyDefinition</code>.</p> </li> <li> <p>To create a policy that is dynamically linked to a policy template, specify the policy template ID and the principal and resource to associate with this policy in the <code>templateLinked</code> section of the <code>PolicyDefinition</code>. If the policy template is ever updated, any policies linked to the policy template automatically use the updated template.</p> </li> </ul> <note> <p>Creating a policy causes it to be validated against the schema in the policy store. If the policy doesn't pass validation, the operation fails and the policy isn't stored.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreatePolicyInput} createPolicyInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePolicyOutput}
     */
    createPolicy(xAmzTarget, createPolicyInput, opts, callback) {
      opts = opts || {};
      let postBody = createPolicyInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createPolicy");
      }
      // verify the required parameter 'createPolicyInput' is set
      if (createPolicyInput === undefined || createPolicyInput === null) {
        throw new Error("Missing the required parameter 'createPolicyInput' when calling createPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePolicyOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VerifiedPermissions.CreatePolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPolicyStore operation.
     * @callback module:api/DefaultApi~createPolicyStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePolicyStoreOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a policy store. A policy store is a container for policy resources.</p> <note> <p>Although <a href=\"https://docs.cedarpolicy.com/schema.html#namespace\">Cedar supports multiple namespaces</a>, Verified Permissions currently supports only one namespace per policy store.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreatePolicyStoreInput} createPolicyStoreInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createPolicyStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePolicyStoreOutput}
     */
    createPolicyStore(xAmzTarget, createPolicyStoreInput, opts, callback) {
      opts = opts || {};
      let postBody = createPolicyStoreInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createPolicyStore");
      }
      // verify the required parameter 'createPolicyStoreInput' is set
      if (createPolicyStoreInput === undefined || createPolicyStoreInput === null) {
        throw new Error("Missing the required parameter 'createPolicyStoreInput' when calling createPolicyStore");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePolicyStoreOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VerifiedPermissions.CreatePolicyStore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPolicyTemplate operation.
     * @callback module:api/DefaultApi~createPolicyTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePolicyTemplateOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a policy template. A template can use placeholders for the principal and resource. A template must be instantiated into a policy by associating it with specific principals and resources to use for the placeholders. That instantiated policy can then be considered in authorization decisions. The instantiated policy works identically to any other policy, except that it is dynamically linked to the template. If the template changes, then any policies that are linked to that template are immediately updated as well.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreatePolicyTemplateInput} createPolicyTemplateInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createPolicyTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePolicyTemplateOutput}
     */
    createPolicyTemplate(xAmzTarget, createPolicyTemplateInput, opts, callback) {
      opts = opts || {};
      let postBody = createPolicyTemplateInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createPolicyTemplate");
      }
      // verify the required parameter 'createPolicyTemplateInput' is set
      if (createPolicyTemplateInput === undefined || createPolicyTemplateInput === null) {
        throw new Error("Missing the required parameter 'createPolicyTemplateInput' when calling createPolicyTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePolicyTemplateOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VerifiedPermissions.CreatePolicyTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIdentitySource operation.
     * @callback module:api/DefaultApi~deleteIdentitySourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an identity source that references an identity provider (IdP) such as Amazon Cognito. After you delete the identity source, you can no longer use tokens for identities from that identity source to represent principals in authorization queries made using <a href=\"https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_IsAuthorizedWithToken.html\">IsAuthorizedWithToken</a>. operations.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteIdentitySourceInput} deleteIdentitySourceInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteIdentitySourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteIdentitySource(xAmzTarget, deleteIdentitySourceInput, opts, callback) {
      opts = opts || {};
      let postBody = deleteIdentitySourceInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteIdentitySource");
      }
      // verify the required parameter 'deleteIdentitySourceInput' is set
      if (deleteIdentitySourceInput === undefined || deleteIdentitySourceInput === null) {
        throw new Error("Missing the required parameter 'deleteIdentitySourceInput' when calling deleteIdentitySource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VerifiedPermissions.DeleteIdentitySource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePolicy operation.
     * @callback module:api/DefaultApi~deletePolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes the specified policy from the policy store.</p> <p>This operation is idempotent; if you specify a policy that doesn't exist, the request response returns a successful <code>HTTP 200</code> status code.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeletePolicyInput} deletePolicyInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deletePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deletePolicy(xAmzTarget, deletePolicyInput, opts, callback) {
      opts = opts || {};
      let postBody = deletePolicyInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deletePolicy");
      }
      // verify the required parameter 'deletePolicyInput' is set
      if (deletePolicyInput === undefined || deletePolicyInput === null) {
        throw new Error("Missing the required parameter 'deletePolicyInput' when calling deletePolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VerifiedPermissions.DeletePolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePolicyStore operation.
     * @callback module:api/DefaultApi~deletePolicyStoreCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes the specified policy store.</p> <p>This operation is idempotent. If you specify a policy store that does not exist, the request response will still return a successful HTTP 200 status code.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeletePolicyStoreInput} deletePolicyStoreInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deletePolicyStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deletePolicyStore(xAmzTarget, deletePolicyStoreInput, opts, callback) {
      opts = opts || {};
      let postBody = deletePolicyStoreInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deletePolicyStore");
      }
      // verify the required parameter 'deletePolicyStoreInput' is set
      if (deletePolicyStoreInput === undefined || deletePolicyStoreInput === null) {
        throw new Error("Missing the required parameter 'deletePolicyStoreInput' when calling deletePolicyStore");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VerifiedPermissions.DeletePolicyStore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePolicyTemplate operation.
     * @callback module:api/DefaultApi~deletePolicyTemplateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes the specified policy template from the policy store.</p> <important> <p>This operation also deletes any policies that were created from the specified policy template. Those policies are immediately removed from all future API responses, and are asynchronously deleted from the policy store.</p> </important>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeletePolicyTemplateInput} deletePolicyTemplateInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deletePolicyTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deletePolicyTemplate(xAmzTarget, deletePolicyTemplateInput, opts, callback) {
      opts = opts || {};
      let postBody = deletePolicyTemplateInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deletePolicyTemplate");
      }
      // verify the required parameter 'deletePolicyTemplateInput' is set
      if (deletePolicyTemplateInput === undefined || deletePolicyTemplateInput === null) {
        throw new Error("Missing the required parameter 'deletePolicyTemplateInput' when calling deletePolicyTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VerifiedPermissions.DeletePolicyTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIdentitySource operation.
     * @callback module:api/DefaultApi~getIdentitySourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetIdentitySourceOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the details about the specified identity source.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetIdentitySourceInput} getIdentitySourceInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getIdentitySourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetIdentitySourceOutput}
     */
    getIdentitySource(xAmzTarget, getIdentitySourceInput, opts, callback) {
      opts = opts || {};
      let postBody = getIdentitySourceInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getIdentitySource");
      }
      // verify the required parameter 'getIdentitySourceInput' is set
      if (getIdentitySourceInput === undefined || getIdentitySourceInput === null) {
        throw new Error("Missing the required parameter 'getIdentitySourceInput' when calling getIdentitySource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetIdentitySourceOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VerifiedPermissions.GetIdentitySource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPolicy operation.
     * @callback module:api/DefaultApi~getPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPolicyOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the specified policy.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetPolicyInput} getPolicyInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPolicyOutput}
     */
    getPolicy(xAmzTarget, getPolicyInput, opts, callback) {
      opts = opts || {};
      let postBody = getPolicyInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getPolicy");
      }
      // verify the required parameter 'getPolicyInput' is set
      if (getPolicyInput === undefined || getPolicyInput === null) {
        throw new Error("Missing the required parameter 'getPolicyInput' when calling getPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetPolicyOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VerifiedPermissions.GetPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPolicyStore operation.
     * @callback module:api/DefaultApi~getPolicyStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPolicyStoreOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves details about a policy store.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetPolicyStoreInput} getPolicyStoreInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getPolicyStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPolicyStoreOutput}
     */
    getPolicyStore(xAmzTarget, getPolicyStoreInput, opts, callback) {
      opts = opts || {};
      let postBody = getPolicyStoreInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getPolicyStore");
      }
      // verify the required parameter 'getPolicyStoreInput' is set
      if (getPolicyStoreInput === undefined || getPolicyStoreInput === null) {
        throw new Error("Missing the required parameter 'getPolicyStoreInput' when calling getPolicyStore");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetPolicyStoreOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VerifiedPermissions.GetPolicyStore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPolicyTemplate operation.
     * @callback module:api/DefaultApi~getPolicyTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPolicyTemplateOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the details for the specified policy template in the specified policy store.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetPolicyTemplateInput} getPolicyTemplateInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getPolicyTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPolicyTemplateOutput}
     */
    getPolicyTemplate(xAmzTarget, getPolicyTemplateInput, opts, callback) {
      opts = opts || {};
      let postBody = getPolicyTemplateInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getPolicyTemplate");
      }
      // verify the required parameter 'getPolicyTemplateInput' is set
      if (getPolicyTemplateInput === undefined || getPolicyTemplateInput === null) {
        throw new Error("Missing the required parameter 'getPolicyTemplateInput' when calling getPolicyTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetPolicyTemplateOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VerifiedPermissions.GetPolicyTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSchema operation.
     * @callback module:api/DefaultApi~getSchemaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSchemaOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the details for the specified schema in the specified policy store.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetSchemaInput} getSchemaInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSchemaOutput}
     */
    getSchema(xAmzTarget, getSchemaInput, opts, callback) {
      opts = opts || {};
      let postBody = getSchemaInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getSchema");
      }
      // verify the required parameter 'getSchemaInput' is set
      if (getSchemaInput === undefined || getSchemaInput === null) {
        throw new Error("Missing the required parameter 'getSchemaInput' when calling getSchema");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSchemaOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VerifiedPermissions.GetSchema', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the isAuthorized operation.
     * @callback module:api/DefaultApi~isAuthorizedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IsAuthorizedOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Makes an authorization decision about a service request described in the parameters. The information in the parameters can also define additional context that Verified Permissions can include in the evaluation. The request is evaluated against all matching policies in the specified policy store. The result of the decision is either <code>Allow</code> or <code>Deny</code>, along with a list of the policies that resulted in the decision.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/IsAuthorizedInput} isAuthorizedInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~isAuthorizedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IsAuthorizedOutput}
     */
    isAuthorized(xAmzTarget, isAuthorizedInput, opts, callback) {
      opts = opts || {};
      let postBody = isAuthorizedInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling isAuthorized");
      }
      // verify the required parameter 'isAuthorizedInput' is set
      if (isAuthorizedInput === undefined || isAuthorizedInput === null) {
        throw new Error("Missing the required parameter 'isAuthorizedInput' when calling isAuthorized");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IsAuthorizedOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VerifiedPermissions.IsAuthorized', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the isAuthorizedWithToken operation.
     * @callback module:api/DefaultApi~isAuthorizedWithTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IsAuthorizedWithTokenOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Makes an authorization decision about a service request described in the parameters. The principal in this request comes from an external identity source. The information in the parameters can also define additional context that Verified Permissions can include in the evaluation. The request is evaluated against all matching policies in the specified policy store. The result of the decision is either <code>Allow</code> or <code>Deny</code>, along with a list of the policies that resulted in the decision.</p> <important> <p>If you delete a Amazon Cognito user pool or user, tokens from that deleted pool or that deleted user continue to be usable until they expire.</p> </important>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/IsAuthorizedWithTokenInput} isAuthorizedWithTokenInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~isAuthorizedWithTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IsAuthorizedWithTokenOutput}
     */
    isAuthorizedWithToken(xAmzTarget, isAuthorizedWithTokenInput, opts, callback) {
      opts = opts || {};
      let postBody = isAuthorizedWithTokenInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling isAuthorizedWithToken");
      }
      // verify the required parameter 'isAuthorizedWithTokenInput' is set
      if (isAuthorizedWithTokenInput === undefined || isAuthorizedWithTokenInput === null) {
        throw new Error("Missing the required parameter 'isAuthorizedWithTokenInput' when calling isAuthorizedWithToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IsAuthorizedWithTokenOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VerifiedPermissions.IsAuthorizedWithToken', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listIdentitySources operation.
     * @callback module:api/DefaultApi~listIdentitySourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListIdentitySourcesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a paginated list of all of the identity sources defined in the specified policy store.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListIdentitySourcesInput} listIdentitySourcesInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listIdentitySourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListIdentitySourcesOutput}
     */
    listIdentitySources(xAmzTarget, listIdentitySourcesInput, opts, callback) {
      opts = opts || {};
      let postBody = listIdentitySourcesInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listIdentitySources");
      }
      // verify the required parameter 'listIdentitySourcesInput' is set
      if (listIdentitySourcesInput === undefined || listIdentitySourcesInput === null) {
        throw new Error("Missing the required parameter 'listIdentitySourcesInput' when calling listIdentitySources");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListIdentitySourcesOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VerifiedPermissions.ListIdentitySources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPolicies operation.
     * @callback module:api/DefaultApi~listPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPoliciesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a paginated list of all policies stored in the specified policy store.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListPoliciesInput} listPoliciesInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPoliciesOutput}
     */
    listPolicies(xAmzTarget, listPoliciesInput, opts, callback) {
      opts = opts || {};
      let postBody = listPoliciesInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listPolicies");
      }
      // verify the required parameter 'listPoliciesInput' is set
      if (listPoliciesInput === undefined || listPoliciesInput === null) {
        throw new Error("Missing the required parameter 'listPoliciesInput' when calling listPolicies");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListPoliciesOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VerifiedPermissions.ListPolicies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPolicyStores operation.
     * @callback module:api/DefaultApi~listPolicyStoresCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPolicyStoresOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a paginated list of all policy stores in the calling Amazon Web Services account.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListPolicyStoresInput} listPolicyStoresInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listPolicyStoresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPolicyStoresOutput}
     */
    listPolicyStores(xAmzTarget, listPolicyStoresInput, opts, callback) {
      opts = opts || {};
      let postBody = listPolicyStoresInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listPolicyStores");
      }
      // verify the required parameter 'listPolicyStoresInput' is set
      if (listPolicyStoresInput === undefined || listPolicyStoresInput === null) {
        throw new Error("Missing the required parameter 'listPolicyStoresInput' when calling listPolicyStores");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListPolicyStoresOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VerifiedPermissions.ListPolicyStores', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPolicyTemplates operation.
     * @callback module:api/DefaultApi~listPolicyTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPolicyTemplatesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a paginated list of all policy templates in the specified policy store.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListPolicyTemplatesInput} listPolicyTemplatesInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listPolicyTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPolicyTemplatesOutput}
     */
    listPolicyTemplates(xAmzTarget, listPolicyTemplatesInput, opts, callback) {
      opts = opts || {};
      let postBody = listPolicyTemplatesInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listPolicyTemplates");
      }
      // verify the required parameter 'listPolicyTemplatesInput' is set
      if (listPolicyTemplatesInput === undefined || listPolicyTemplatesInput === null) {
        throw new Error("Missing the required parameter 'listPolicyTemplatesInput' when calling listPolicyTemplates");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListPolicyTemplatesOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VerifiedPermissions.ListPolicyTemplates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSchema operation.
     * @callback module:api/DefaultApi~putSchemaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutSchemaOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates the policy schema in the specified policy store. The schema is used to validate any Cedar policies and policy templates submitted to the policy store. Any changes to the schema validate only policies and templates submitted after the schema change. Existing policies and templates are not re-evaluated against the changed schema. If you later update a policy, then it is evaluated against the new schema at that time.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/PutSchemaInput} putSchemaInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutSchemaOutput}
     */
    putSchema(xAmzTarget, putSchemaInput, opts, callback) {
      opts = opts || {};
      let postBody = putSchemaInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling putSchema");
      }
      // verify the required parameter 'putSchemaInput' is set
      if (putSchemaInput === undefined || putSchemaInput === null) {
        throw new Error("Missing the required parameter 'putSchemaInput' when calling putSchema");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutSchemaOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VerifiedPermissions.PutSchema', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIdentitySource operation.
     * @callback module:api/DefaultApi~updateIdentitySourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateIdentitySourceOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified identity source to use a new identity provider (IdP) source, or to change the mapping of identities from the IdP to a different principal entity type.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateIdentitySourceInput} updateIdentitySourceInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateIdentitySourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateIdentitySourceOutput}
     */
    updateIdentitySource(xAmzTarget, updateIdentitySourceInput, opts, callback) {
      opts = opts || {};
      let postBody = updateIdentitySourceInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateIdentitySource");
      }
      // verify the required parameter 'updateIdentitySourceInput' is set
      if (updateIdentitySourceInput === undefined || updateIdentitySourceInput === null) {
        throw new Error("Missing the required parameter 'updateIdentitySourceInput' when calling updateIdentitySource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateIdentitySourceOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VerifiedPermissions.UpdateIdentitySource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePolicy operation.
     * @callback module:api/DefaultApi~updatePolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdatePolicyOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Modifies a Cedar static policy in the specified policy store. You can change only certain elements of the <a href=\"https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdatePolicyInput.html#amazonverifiedpermissions-UpdatePolicy-request-UpdatePolicyDefinition\">UpdatePolicyDefinition</a> parameter. You can directly update only static policies. To change a template-linked policy, you must update the template instead, using <a href=\"https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdatePolicyTemplate.html\">UpdatePolicyTemplate</a>.</p> <note> <p>If policy validation is enabled in the policy store, then updating a static policy causes Verified Permissions to validate the policy against the schema in the policy store. If the updated static policy doesn't pass validation, the operation fails and the update isn't stored.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdatePolicyInput} updatePolicyInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updatePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdatePolicyOutput}
     */
    updatePolicy(xAmzTarget, updatePolicyInput, opts, callback) {
      opts = opts || {};
      let postBody = updatePolicyInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updatePolicy");
      }
      // verify the required parameter 'updatePolicyInput' is set
      if (updatePolicyInput === undefined || updatePolicyInput === null) {
        throw new Error("Missing the required parameter 'updatePolicyInput' when calling updatePolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdatePolicyOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VerifiedPermissions.UpdatePolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePolicyStore operation.
     * @callback module:api/DefaultApi~updatePolicyStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdatePolicyStoreOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the validation setting for a policy store.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdatePolicyStoreInput} updatePolicyStoreInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updatePolicyStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdatePolicyStoreOutput}
     */
    updatePolicyStore(xAmzTarget, updatePolicyStoreInput, opts, callback) {
      opts = opts || {};
      let postBody = updatePolicyStoreInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updatePolicyStore");
      }
      // verify the required parameter 'updatePolicyStoreInput' is set
      if (updatePolicyStoreInput === undefined || updatePolicyStoreInput === null) {
        throw new Error("Missing the required parameter 'updatePolicyStoreInput' when calling updatePolicyStore");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdatePolicyStoreOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VerifiedPermissions.UpdatePolicyStore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePolicyTemplate operation.
     * @callback module:api/DefaultApi~updatePolicyTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdatePolicyTemplateOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates the specified policy template. You can update only the description and the some elements of the <a href=\"https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdatePolicyTemplate.html#amazonverifiedpermissions-UpdatePolicyTemplate-request-policyBody\">policyBody</a>. </p> <important> <p>Changes you make to the policy template content are immediately reflected in authorization decisions that involve all template-linked policies instantiated from this template.</p> </important>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdatePolicyTemplateInput} updatePolicyTemplateInput 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updatePolicyTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdatePolicyTemplateOutput}
     */
    updatePolicyTemplate(xAmzTarget, updatePolicyTemplateInput, opts, callback) {
      opts = opts || {};
      let postBody = updatePolicyTemplateInput;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updatePolicyTemplate");
      }
      // verify the required parameter 'updatePolicyTemplateInput' is set
      if (updatePolicyTemplateInput === undefined || updatePolicyTemplateInput === null) {
        throw new Error("Missing the required parameter 'updatePolicyTemplateInput' when calling updatePolicyTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdatePolicyTemplateOutput;
      return this.apiClient.callApi(
        '/#X-Amz-Target=VerifiedPermissions.UpdatePolicyTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
