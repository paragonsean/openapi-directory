# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListPolicyTemplatesOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_token: str=None, policy_templates: List=None):
        """ListPolicyTemplatesOutput - a model defined in OpenAPI

        :param next_token: The next_token of this ListPolicyTemplatesOutput.
        :param policy_templates: The policy_templates of this ListPolicyTemplatesOutput.
        """
        self.openapi_types = {
            'next_token': str,
            'policy_templates': List
        }

        self.attribute_map = {
            'next_token': 'nextToken',
            'policy_templates': 'policyTemplates'
        }

        self._next_token = next_token
        self._policy_templates = policy_templates

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListPolicyTemplatesOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListPolicyTemplatesOutput of this ListPolicyTemplatesOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_token(self):
        """Gets the next_token of this ListPolicyTemplatesOutput.


        :return: The next_token of this ListPolicyTemplatesOutput.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListPolicyTemplatesOutput.


        :param next_token: The next_token of this ListPolicyTemplatesOutput.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def policy_templates(self):
        """Gets the policy_templates of this ListPolicyTemplatesOutput.


        :return: The policy_templates of this ListPolicyTemplatesOutput.
        :rtype: List
        """
        return self._policy_templates

    @policy_templates.setter
    def policy_templates(self, policy_templates):
        """Sets the policy_templates of this ListPolicyTemplatesOutput.


        :param policy_templates: The policy_templates of this ListPolicyTemplatesOutput.
        :type policy_templates: List
        """
        if policy_templates is None:
            raise ValueError("Invalid value for `policy_templates`, must not be `None`")

        self._policy_templates = policy_templates
