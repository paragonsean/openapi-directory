# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entity_reference_identifier import EntityReferenceIdentifier
from openapi_server import util


class PolicyFilterPrincipal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, unspecified: bool=None, identifier: EntityReferenceIdentifier=None):
        """PolicyFilterPrincipal - a model defined in OpenAPI

        :param unspecified: The unspecified of this PolicyFilterPrincipal.
        :param identifier: The identifier of this PolicyFilterPrincipal.
        """
        self.openapi_types = {
            'unspecified': bool,
            'identifier': EntityReferenceIdentifier
        }

        self.attribute_map = {
            'unspecified': 'unspecified',
            'identifier': 'identifier'
        }

        self._unspecified = unspecified
        self._identifier = identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicyFilterPrincipal':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PolicyFilter_principal of this PolicyFilterPrincipal.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def unspecified(self):
        """Gets the unspecified of this PolicyFilterPrincipal.


        :return: The unspecified of this PolicyFilterPrincipal.
        :rtype: bool
        """
        return self._unspecified

    @unspecified.setter
    def unspecified(self, unspecified):
        """Sets the unspecified of this PolicyFilterPrincipal.


        :param unspecified: The unspecified of this PolicyFilterPrincipal.
        :type unspecified: bool
        """

        self._unspecified = unspecified

    @property
    def identifier(self):
        """Gets the identifier of this PolicyFilterPrincipal.


        :return: The identifier of this PolicyFilterPrincipal.
        :rtype: EntityReferenceIdentifier
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this PolicyFilterPrincipal.


        :param identifier: The identifier of this PolicyFilterPrincipal.
        :type identifier: EntityReferenceIdentifier
        """

        self._identifier = identifier
