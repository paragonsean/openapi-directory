# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_policy_input_definition import UpdatePolicyInputDefinition
from openapi_server import util


class UpdatePolicyInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, policy_store_id: str=None, policy_id: str=None, definition: UpdatePolicyInputDefinition=None):
        """UpdatePolicyInput - a model defined in OpenAPI

        :param policy_store_id: The policy_store_id of this UpdatePolicyInput.
        :param policy_id: The policy_id of this UpdatePolicyInput.
        :param definition: The definition of this UpdatePolicyInput.
        """
        self.openapi_types = {
            'policy_store_id': str,
            'policy_id': str,
            'definition': UpdatePolicyInputDefinition
        }

        self.attribute_map = {
            'policy_store_id': 'policyStoreId',
            'policy_id': 'policyId',
            'definition': 'definition'
        }

        self._policy_store_id = policy_store_id
        self._policy_id = policy_id
        self._definition = definition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdatePolicyInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdatePolicyInput of this UpdatePolicyInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def policy_store_id(self):
        """Gets the policy_store_id of this UpdatePolicyInput.


        :return: The policy_store_id of this UpdatePolicyInput.
        :rtype: str
        """
        return self._policy_store_id

    @policy_store_id.setter
    def policy_store_id(self, policy_store_id):
        """Sets the policy_store_id of this UpdatePolicyInput.


        :param policy_store_id: The policy_store_id of this UpdatePolicyInput.
        :type policy_store_id: str
        """
        if policy_store_id is None:
            raise ValueError("Invalid value for `policy_store_id`, must not be `None`")

        self._policy_store_id = policy_store_id

    @property
    def policy_id(self):
        """Gets the policy_id of this UpdatePolicyInput.


        :return: The policy_id of this UpdatePolicyInput.
        :rtype: str
        """
        return self._policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        """Sets the policy_id of this UpdatePolicyInput.


        :param policy_id: The policy_id of this UpdatePolicyInput.
        :type policy_id: str
        """
        if policy_id is None:
            raise ValueError("Invalid value for `policy_id`, must not be `None`")

        self._policy_id = policy_id

    @property
    def definition(self):
        """Gets the definition of this UpdatePolicyInput.


        :return: The definition of this UpdatePolicyInput.
        :rtype: UpdatePolicyInputDefinition
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this UpdatePolicyInput.


        :param definition: The definition of this UpdatePolicyInput.
        :type definition: UpdatePolicyInputDefinition
        """
        if definition is None:
            raise ValueError("Invalid value for `definition`, must not be `None`")

        self._definition = definition
