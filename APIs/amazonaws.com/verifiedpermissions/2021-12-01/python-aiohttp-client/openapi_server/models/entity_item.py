# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entity_item_identifier import EntityItemIdentifier
from openapi_server import util


class EntityItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identifier: EntityItemIdentifier=None, attributes: Dict=None, parents: List=None):
        """EntityItem - a model defined in OpenAPI

        :param identifier: The identifier of this EntityItem.
        :param attributes: The attributes of this EntityItem.
        :param parents: The parents of this EntityItem.
        """
        self.openapi_types = {
            'identifier': EntityItemIdentifier,
            'attributes': Dict,
            'parents': List
        }

        self.attribute_map = {
            'identifier': 'identifier',
            'attributes': 'attributes',
            'parents': 'parents'
        }

        self._identifier = identifier
        self._attributes = attributes
        self._parents = parents

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntityItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EntityItem of this EntityItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identifier(self):
        """Gets the identifier of this EntityItem.


        :return: The identifier of this EntityItem.
        :rtype: EntityItemIdentifier
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this EntityItem.


        :param identifier: The identifier of this EntityItem.
        :type identifier: EntityItemIdentifier
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")

        self._identifier = identifier

    @property
    def attributes(self):
        """Gets the attributes of this EntityItem.


        :return: The attributes of this EntityItem.
        :rtype: Dict
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this EntityItem.


        :param attributes: The attributes of this EntityItem.
        :type attributes: Dict
        """

        self._attributes = attributes

    @property
    def parents(self):
        """Gets the parents of this EntityItem.


        :return: The parents of this EntityItem.
        :rtype: List
        """
        return self._parents

    @parents.setter
    def parents(self, parents):
        """Sets the parents of this EntityItem.


        :param parents: The parents of this EntityItem.
        :type parents: List
        """

        self._parents = parents
