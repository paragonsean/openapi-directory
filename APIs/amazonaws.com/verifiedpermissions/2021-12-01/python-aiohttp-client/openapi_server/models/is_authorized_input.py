# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.is_authorized_input_action import IsAuthorizedInputAction
from openapi_server.models.is_authorized_input_context import IsAuthorizedInputContext
from openapi_server.models.is_authorized_input_entities import IsAuthorizedInputEntities
from openapi_server.models.is_authorized_input_principal import IsAuthorizedInputPrincipal
from openapi_server.models.is_authorized_input_resource import IsAuthorizedInputResource
from openapi_server import util


class IsAuthorizedInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, policy_store_id: str=None, principal: IsAuthorizedInputPrincipal=None, action: IsAuthorizedInputAction=None, resource: IsAuthorizedInputResource=None, context: IsAuthorizedInputContext=None, entities: IsAuthorizedInputEntities=None):
        """IsAuthorizedInput - a model defined in OpenAPI

        :param policy_store_id: The policy_store_id of this IsAuthorizedInput.
        :param principal: The principal of this IsAuthorizedInput.
        :param action: The action of this IsAuthorizedInput.
        :param resource: The resource of this IsAuthorizedInput.
        :param context: The context of this IsAuthorizedInput.
        :param entities: The entities of this IsAuthorizedInput.
        """
        self.openapi_types = {
            'policy_store_id': str,
            'principal': IsAuthorizedInputPrincipal,
            'action': IsAuthorizedInputAction,
            'resource': IsAuthorizedInputResource,
            'context': IsAuthorizedInputContext,
            'entities': IsAuthorizedInputEntities
        }

        self.attribute_map = {
            'policy_store_id': 'policyStoreId',
            'principal': 'principal',
            'action': 'action',
            'resource': 'resource',
            'context': 'context',
            'entities': 'entities'
        }

        self._policy_store_id = policy_store_id
        self._principal = principal
        self._action = action
        self._resource = resource
        self._context = context
        self._entities = entities

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IsAuthorizedInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IsAuthorizedInput of this IsAuthorizedInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def policy_store_id(self):
        """Gets the policy_store_id of this IsAuthorizedInput.


        :return: The policy_store_id of this IsAuthorizedInput.
        :rtype: str
        """
        return self._policy_store_id

    @policy_store_id.setter
    def policy_store_id(self, policy_store_id):
        """Sets the policy_store_id of this IsAuthorizedInput.


        :param policy_store_id: The policy_store_id of this IsAuthorizedInput.
        :type policy_store_id: str
        """
        if policy_store_id is None:
            raise ValueError("Invalid value for `policy_store_id`, must not be `None`")

        self._policy_store_id = policy_store_id

    @property
    def principal(self):
        """Gets the principal of this IsAuthorizedInput.


        :return: The principal of this IsAuthorizedInput.
        :rtype: IsAuthorizedInputPrincipal
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this IsAuthorizedInput.


        :param principal: The principal of this IsAuthorizedInput.
        :type principal: IsAuthorizedInputPrincipal
        """

        self._principal = principal

    @property
    def action(self):
        """Gets the action of this IsAuthorizedInput.


        :return: The action of this IsAuthorizedInput.
        :rtype: IsAuthorizedInputAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this IsAuthorizedInput.


        :param action: The action of this IsAuthorizedInput.
        :type action: IsAuthorizedInputAction
        """

        self._action = action

    @property
    def resource(self):
        """Gets the resource of this IsAuthorizedInput.


        :return: The resource of this IsAuthorizedInput.
        :rtype: IsAuthorizedInputResource
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this IsAuthorizedInput.


        :param resource: The resource of this IsAuthorizedInput.
        :type resource: IsAuthorizedInputResource
        """

        self._resource = resource

    @property
    def context(self):
        """Gets the context of this IsAuthorizedInput.


        :return: The context of this IsAuthorizedInput.
        :rtype: IsAuthorizedInputContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this IsAuthorizedInput.


        :param context: The context of this IsAuthorizedInput.
        :type context: IsAuthorizedInputContext
        """

        self._context = context

    @property
    def entities(self):
        """Gets the entities of this IsAuthorizedInput.


        :return: The entities of this IsAuthorizedInput.
        :rtype: IsAuthorizedInputEntities
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this IsAuthorizedInput.


        :param entities: The entities of this IsAuthorizedInput.
        :type entities: IsAuthorizedInputEntities
        """

        self._entities = entities
