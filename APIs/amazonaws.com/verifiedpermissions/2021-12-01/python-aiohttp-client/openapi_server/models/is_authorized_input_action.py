# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IsAuthorizedInputAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_type: str=None, action_id: str=None):
        """IsAuthorizedInputAction - a model defined in OpenAPI

        :param action_type: The action_type of this IsAuthorizedInputAction.
        :param action_id: The action_id of this IsAuthorizedInputAction.
        """
        self.openapi_types = {
            'action_type': str,
            'action_id': str
        }

        self.attribute_map = {
            'action_type': 'actionType',
            'action_id': 'actionId'
        }

        self._action_type = action_type
        self._action_id = action_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IsAuthorizedInputAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IsAuthorizedInput_action of this IsAuthorizedInputAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_type(self):
        """Gets the action_type of this IsAuthorizedInputAction.


        :return: The action_type of this IsAuthorizedInputAction.
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this IsAuthorizedInputAction.


        :param action_type: The action_type of this IsAuthorizedInputAction.
        :type action_type: str
        """
        if action_type is None:
            raise ValueError("Invalid value for `action_type`, must not be `None`")

        self._action_type = action_type

    @property
    def action_id(self):
        """Gets the action_id of this IsAuthorizedInputAction.


        :return: The action_id of this IsAuthorizedInputAction.
        :rtype: str
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id):
        """Sets the action_id of this IsAuthorizedInputAction.


        :param action_id: The action_id of this IsAuthorizedInputAction.
        :type action_id: str
        """
        if action_id is None:
            raise ValueError("Invalid value for `action_id`, must not be `None`")

        self._action_id = action_id
