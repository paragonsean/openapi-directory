# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PolicyItemResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity_type: str=None, entity_id: str=None):
        """PolicyItemResource - a model defined in OpenAPI

        :param entity_type: The entity_type of this PolicyItemResource.
        :param entity_id: The entity_id of this PolicyItemResource.
        """
        self.openapi_types = {
            'entity_type': str,
            'entity_id': str
        }

        self.attribute_map = {
            'entity_type': 'entityType',
            'entity_id': 'entityId'
        }

        self._entity_type = entity_type
        self._entity_id = entity_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicyItemResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PolicyItem_resource of this PolicyItemResource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_type(self):
        """Gets the entity_type of this PolicyItemResource.


        :return: The entity_type of this PolicyItemResource.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this PolicyItemResource.


        :param entity_type: The entity_type of this PolicyItemResource.
        :type entity_type: str
        """
        if entity_type is None:
            raise ValueError("Invalid value for `entity_type`, must not be `None`")

        self._entity_type = entity_type

    @property
    def entity_id(self):
        """Gets the entity_id of this PolicyItemResource.


        :return: The entity_id of this PolicyItemResource.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this PolicyItemResource.


        :param entity_id: The entity_id of this PolicyItemResource.
        :type entity_id: str
        """
        if entity_id is None:
            raise ValueError("Invalid value for `entity_id`, must not be `None`")

        self._entity_id = entity_id
