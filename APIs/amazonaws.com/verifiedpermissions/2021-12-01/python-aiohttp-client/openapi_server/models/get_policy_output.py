# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_policy_output_definition import GetPolicyOutputDefinition
from openapi_server.models.get_policy_output_principal import GetPolicyOutputPrincipal
from openapi_server.models.get_policy_output_resource import GetPolicyOutputResource
from openapi_server.models.policy_type import PolicyType
from openapi_server import util


class GetPolicyOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, policy_store_id: str=None, policy_id: str=None, policy_type: PolicyType=None, principal: GetPolicyOutputPrincipal=None, resource: GetPolicyOutputResource=None, definition: GetPolicyOutputDefinition=None, created_date: datetime=None, last_updated_date: datetime=None):
        """GetPolicyOutput - a model defined in OpenAPI

        :param policy_store_id: The policy_store_id of this GetPolicyOutput.
        :param policy_id: The policy_id of this GetPolicyOutput.
        :param policy_type: The policy_type of this GetPolicyOutput.
        :param principal: The principal of this GetPolicyOutput.
        :param resource: The resource of this GetPolicyOutput.
        :param definition: The definition of this GetPolicyOutput.
        :param created_date: The created_date of this GetPolicyOutput.
        :param last_updated_date: The last_updated_date of this GetPolicyOutput.
        """
        self.openapi_types = {
            'policy_store_id': str,
            'policy_id': str,
            'policy_type': PolicyType,
            'principal': GetPolicyOutputPrincipal,
            'resource': GetPolicyOutputResource,
            'definition': GetPolicyOutputDefinition,
            'created_date': datetime,
            'last_updated_date': datetime
        }

        self.attribute_map = {
            'policy_store_id': 'policyStoreId',
            'policy_id': 'policyId',
            'policy_type': 'policyType',
            'principal': 'principal',
            'resource': 'resource',
            'definition': 'definition',
            'created_date': 'createdDate',
            'last_updated_date': 'lastUpdatedDate'
        }

        self._policy_store_id = policy_store_id
        self._policy_id = policy_id
        self._policy_type = policy_type
        self._principal = principal
        self._resource = resource
        self._definition = definition
        self._created_date = created_date
        self._last_updated_date = last_updated_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetPolicyOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetPolicyOutput of this GetPolicyOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def policy_store_id(self):
        """Gets the policy_store_id of this GetPolicyOutput.


        :return: The policy_store_id of this GetPolicyOutput.
        :rtype: str
        """
        return self._policy_store_id

    @policy_store_id.setter
    def policy_store_id(self, policy_store_id):
        """Sets the policy_store_id of this GetPolicyOutput.


        :param policy_store_id: The policy_store_id of this GetPolicyOutput.
        :type policy_store_id: str
        """
        if policy_store_id is None:
            raise ValueError("Invalid value for `policy_store_id`, must not be `None`")

        self._policy_store_id = policy_store_id

    @property
    def policy_id(self):
        """Gets the policy_id of this GetPolicyOutput.


        :return: The policy_id of this GetPolicyOutput.
        :rtype: str
        """
        return self._policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        """Sets the policy_id of this GetPolicyOutput.


        :param policy_id: The policy_id of this GetPolicyOutput.
        :type policy_id: str
        """
        if policy_id is None:
            raise ValueError("Invalid value for `policy_id`, must not be `None`")

        self._policy_id = policy_id

    @property
    def policy_type(self):
        """Gets the policy_type of this GetPolicyOutput.


        :return: The policy_type of this GetPolicyOutput.
        :rtype: PolicyType
        """
        return self._policy_type

    @policy_type.setter
    def policy_type(self, policy_type):
        """Sets the policy_type of this GetPolicyOutput.


        :param policy_type: The policy_type of this GetPolicyOutput.
        :type policy_type: PolicyType
        """
        if policy_type is None:
            raise ValueError("Invalid value for `policy_type`, must not be `None`")

        self._policy_type = policy_type

    @property
    def principal(self):
        """Gets the principal of this GetPolicyOutput.


        :return: The principal of this GetPolicyOutput.
        :rtype: GetPolicyOutputPrincipal
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this GetPolicyOutput.


        :param principal: The principal of this GetPolicyOutput.
        :type principal: GetPolicyOutputPrincipal
        """

        self._principal = principal

    @property
    def resource(self):
        """Gets the resource of this GetPolicyOutput.


        :return: The resource of this GetPolicyOutput.
        :rtype: GetPolicyOutputResource
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this GetPolicyOutput.


        :param resource: The resource of this GetPolicyOutput.
        :type resource: GetPolicyOutputResource
        """

        self._resource = resource

    @property
    def definition(self):
        """Gets the definition of this GetPolicyOutput.


        :return: The definition of this GetPolicyOutput.
        :rtype: GetPolicyOutputDefinition
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this GetPolicyOutput.


        :param definition: The definition of this GetPolicyOutput.
        :type definition: GetPolicyOutputDefinition
        """
        if definition is None:
            raise ValueError("Invalid value for `definition`, must not be `None`")

        self._definition = definition

    @property
    def created_date(self):
        """Gets the created_date of this GetPolicyOutput.


        :return: The created_date of this GetPolicyOutput.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this GetPolicyOutput.


        :param created_date: The created_date of this GetPolicyOutput.
        :type created_date: datetime
        """
        if created_date is None:
            raise ValueError("Invalid value for `created_date`, must not be `None`")

        self._created_date = created_date

    @property
    def last_updated_date(self):
        """Gets the last_updated_date of this GetPolicyOutput.


        :return: The last_updated_date of this GetPolicyOutput.
        :rtype: datetime
        """
        return self._last_updated_date

    @last_updated_date.setter
    def last_updated_date(self, last_updated_date):
        """Sets the last_updated_date of this GetPolicyOutput.


        :param last_updated_date: The last_updated_date of this GetPolicyOutput.
        :type last_updated_date: datetime
        """
        if last_updated_date is None:
            raise ValueError("Invalid value for `last_updated_date`, must not be `None`")

        self._last_updated_date = last_updated_date
