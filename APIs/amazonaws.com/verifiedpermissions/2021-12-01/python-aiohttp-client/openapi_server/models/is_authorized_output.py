# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.decision import Decision
from openapi_server import util


class IsAuthorizedOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, decision: Decision=None, determining_policies: List=None, errors: List=None):
        """IsAuthorizedOutput - a model defined in OpenAPI

        :param decision: The decision of this IsAuthorizedOutput.
        :param determining_policies: The determining_policies of this IsAuthorizedOutput.
        :param errors: The errors of this IsAuthorizedOutput.
        """
        self.openapi_types = {
            'decision': Decision,
            'determining_policies': List,
            'errors': List
        }

        self.attribute_map = {
            'decision': 'decision',
            'determining_policies': 'determiningPolicies',
            'errors': 'errors'
        }

        self._decision = decision
        self._determining_policies = determining_policies
        self._errors = errors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IsAuthorizedOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IsAuthorizedOutput of this IsAuthorizedOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def decision(self):
        """Gets the decision of this IsAuthorizedOutput.


        :return: The decision of this IsAuthorizedOutput.
        :rtype: Decision
        """
        return self._decision

    @decision.setter
    def decision(self, decision):
        """Sets the decision of this IsAuthorizedOutput.


        :param decision: The decision of this IsAuthorizedOutput.
        :type decision: Decision
        """
        if decision is None:
            raise ValueError("Invalid value for `decision`, must not be `None`")

        self._decision = decision

    @property
    def determining_policies(self):
        """Gets the determining_policies of this IsAuthorizedOutput.


        :return: The determining_policies of this IsAuthorizedOutput.
        :rtype: List
        """
        return self._determining_policies

    @determining_policies.setter
    def determining_policies(self, determining_policies):
        """Sets the determining_policies of this IsAuthorizedOutput.


        :param determining_policies: The determining_policies of this IsAuthorizedOutput.
        :type determining_policies: List
        """
        if determining_policies is None:
            raise ValueError("Invalid value for `determining_policies`, must not be `None`")

        self._determining_policies = determining_policies

    @property
    def errors(self):
        """Gets the errors of this IsAuthorizedOutput.


        :return: The errors of this IsAuthorizedOutput.
        :rtype: List
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this IsAuthorizedOutput.


        :param errors: The errors of this IsAuthorizedOutput.
        :type errors: List
        """
        if errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")

        self._errors = errors
