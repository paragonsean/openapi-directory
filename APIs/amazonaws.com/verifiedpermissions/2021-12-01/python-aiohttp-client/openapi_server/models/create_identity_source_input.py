# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_identity_source_input_configuration import CreateIdentitySourceInputConfiguration
from openapi_server import util


class CreateIdentitySourceInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, policy_store_id: str=None, configuration: CreateIdentitySourceInputConfiguration=None, principal_entity_type: str=None):
        """CreateIdentitySourceInput - a model defined in OpenAPI

        :param client_token: The client_token of this CreateIdentitySourceInput.
        :param policy_store_id: The policy_store_id of this CreateIdentitySourceInput.
        :param configuration: The configuration of this CreateIdentitySourceInput.
        :param principal_entity_type: The principal_entity_type of this CreateIdentitySourceInput.
        """
        self.openapi_types = {
            'client_token': str,
            'policy_store_id': str,
            'configuration': CreateIdentitySourceInputConfiguration,
            'principal_entity_type': str
        }

        self.attribute_map = {
            'client_token': 'clientToken',
            'policy_store_id': 'policyStoreId',
            'configuration': 'configuration',
            'principal_entity_type': 'principalEntityType'
        }

        self._client_token = client_token
        self._policy_store_id = policy_store_id
        self._configuration = configuration
        self._principal_entity_type = principal_entity_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateIdentitySourceInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateIdentitySourceInput of this CreateIdentitySourceInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateIdentitySourceInput.


        :return: The client_token of this CreateIdentitySourceInput.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateIdentitySourceInput.


        :param client_token: The client_token of this CreateIdentitySourceInput.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def policy_store_id(self):
        """Gets the policy_store_id of this CreateIdentitySourceInput.


        :return: The policy_store_id of this CreateIdentitySourceInput.
        :rtype: str
        """
        return self._policy_store_id

    @policy_store_id.setter
    def policy_store_id(self, policy_store_id):
        """Sets the policy_store_id of this CreateIdentitySourceInput.


        :param policy_store_id: The policy_store_id of this CreateIdentitySourceInput.
        :type policy_store_id: str
        """
        if policy_store_id is None:
            raise ValueError("Invalid value for `policy_store_id`, must not be `None`")

        self._policy_store_id = policy_store_id

    @property
    def configuration(self):
        """Gets the configuration of this CreateIdentitySourceInput.


        :return: The configuration of this CreateIdentitySourceInput.
        :rtype: CreateIdentitySourceInputConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this CreateIdentitySourceInput.


        :param configuration: The configuration of this CreateIdentitySourceInput.
        :type configuration: CreateIdentitySourceInputConfiguration
        """
        if configuration is None:
            raise ValueError("Invalid value for `configuration`, must not be `None`")

        self._configuration = configuration

    @property
    def principal_entity_type(self):
        """Gets the principal_entity_type of this CreateIdentitySourceInput.


        :return: The principal_entity_type of this CreateIdentitySourceInput.
        :rtype: str
        """
        return self._principal_entity_type

    @principal_entity_type.setter
    def principal_entity_type(self, principal_entity_type):
        """Sets the principal_entity_type of this CreateIdentitySourceInput.


        :param principal_entity_type: The principal_entity_type of this CreateIdentitySourceInput.
        :type principal_entity_type: str
        """

        self._principal_entity_type = principal_entity_type
