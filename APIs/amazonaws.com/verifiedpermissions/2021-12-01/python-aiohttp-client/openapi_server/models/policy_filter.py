# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.policy_filter_principal import PolicyFilterPrincipal
from openapi_server.models.policy_filter_resource import PolicyFilterResource
from openapi_server.models.policy_type import PolicyType
from openapi_server import util


class PolicyFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, principal: PolicyFilterPrincipal=None, resource: PolicyFilterResource=None, policy_type: PolicyType=None, policy_template_id: str=None):
        """PolicyFilter - a model defined in OpenAPI

        :param principal: The principal of this PolicyFilter.
        :param resource: The resource of this PolicyFilter.
        :param policy_type: The policy_type of this PolicyFilter.
        :param policy_template_id: The policy_template_id of this PolicyFilter.
        """
        self.openapi_types = {
            'principal': PolicyFilterPrincipal,
            'resource': PolicyFilterResource,
            'policy_type': PolicyType,
            'policy_template_id': str
        }

        self.attribute_map = {
            'principal': 'principal',
            'resource': 'resource',
            'policy_type': 'policyType',
            'policy_template_id': 'policyTemplateId'
        }

        self._principal = principal
        self._resource = resource
        self._policy_type = policy_type
        self._policy_template_id = policy_template_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicyFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PolicyFilter of this PolicyFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def principal(self):
        """Gets the principal of this PolicyFilter.


        :return: The principal of this PolicyFilter.
        :rtype: PolicyFilterPrincipal
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this PolicyFilter.


        :param principal: The principal of this PolicyFilter.
        :type principal: PolicyFilterPrincipal
        """

        self._principal = principal

    @property
    def resource(self):
        """Gets the resource of this PolicyFilter.


        :return: The resource of this PolicyFilter.
        :rtype: PolicyFilterResource
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this PolicyFilter.


        :param resource: The resource of this PolicyFilter.
        :type resource: PolicyFilterResource
        """

        self._resource = resource

    @property
    def policy_type(self):
        """Gets the policy_type of this PolicyFilter.


        :return: The policy_type of this PolicyFilter.
        :rtype: PolicyType
        """
        return self._policy_type

    @policy_type.setter
    def policy_type(self, policy_type):
        """Sets the policy_type of this PolicyFilter.


        :param policy_type: The policy_type of this PolicyFilter.
        :type policy_type: PolicyType
        """

        self._policy_type = policy_type

    @property
    def policy_template_id(self):
        """Gets the policy_template_id of this PolicyFilter.


        :return: The policy_template_id of this PolicyFilter.
        :rtype: str
        """
        return self._policy_template_id

    @policy_template_id.setter
    def policy_template_id(self, policy_template_id):
        """Sets the policy_template_id of this PolicyFilter.


        :param policy_template_id: The policy_template_id of this PolicyFilter.
        :type policy_template_id: str
        """

        self._policy_template_id = policy_template_id
