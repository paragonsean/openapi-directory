# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdatePolicyTemplateOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, policy_store_id: str=None, policy_template_id: str=None, created_date: datetime=None, last_updated_date: datetime=None):
        """UpdatePolicyTemplateOutput - a model defined in OpenAPI

        :param policy_store_id: The policy_store_id of this UpdatePolicyTemplateOutput.
        :param policy_template_id: The policy_template_id of this UpdatePolicyTemplateOutput.
        :param created_date: The created_date of this UpdatePolicyTemplateOutput.
        :param last_updated_date: The last_updated_date of this UpdatePolicyTemplateOutput.
        """
        self.openapi_types = {
            'policy_store_id': str,
            'policy_template_id': str,
            'created_date': datetime,
            'last_updated_date': datetime
        }

        self.attribute_map = {
            'policy_store_id': 'policyStoreId',
            'policy_template_id': 'policyTemplateId',
            'created_date': 'createdDate',
            'last_updated_date': 'lastUpdatedDate'
        }

        self._policy_store_id = policy_store_id
        self._policy_template_id = policy_template_id
        self._created_date = created_date
        self._last_updated_date = last_updated_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdatePolicyTemplateOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdatePolicyTemplateOutput of this UpdatePolicyTemplateOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def policy_store_id(self):
        """Gets the policy_store_id of this UpdatePolicyTemplateOutput.


        :return: The policy_store_id of this UpdatePolicyTemplateOutput.
        :rtype: str
        """
        return self._policy_store_id

    @policy_store_id.setter
    def policy_store_id(self, policy_store_id):
        """Sets the policy_store_id of this UpdatePolicyTemplateOutput.


        :param policy_store_id: The policy_store_id of this UpdatePolicyTemplateOutput.
        :type policy_store_id: str
        """
        if policy_store_id is None:
            raise ValueError("Invalid value for `policy_store_id`, must not be `None`")

        self._policy_store_id = policy_store_id

    @property
    def policy_template_id(self):
        """Gets the policy_template_id of this UpdatePolicyTemplateOutput.


        :return: The policy_template_id of this UpdatePolicyTemplateOutput.
        :rtype: str
        """
        return self._policy_template_id

    @policy_template_id.setter
    def policy_template_id(self, policy_template_id):
        """Sets the policy_template_id of this UpdatePolicyTemplateOutput.


        :param policy_template_id: The policy_template_id of this UpdatePolicyTemplateOutput.
        :type policy_template_id: str
        """
        if policy_template_id is None:
            raise ValueError("Invalid value for `policy_template_id`, must not be `None`")

        self._policy_template_id = policy_template_id

    @property
    def created_date(self):
        """Gets the created_date of this UpdatePolicyTemplateOutput.


        :return: The created_date of this UpdatePolicyTemplateOutput.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this UpdatePolicyTemplateOutput.


        :param created_date: The created_date of this UpdatePolicyTemplateOutput.
        :type created_date: datetime
        """
        if created_date is None:
            raise ValueError("Invalid value for `created_date`, must not be `None`")

        self._created_date = created_date

    @property
    def last_updated_date(self):
        """Gets the last_updated_date of this UpdatePolicyTemplateOutput.


        :return: The last_updated_date of this UpdatePolicyTemplateOutput.
        :rtype: datetime
        """
        return self._last_updated_date

    @last_updated_date.setter
    def last_updated_date(self, last_updated_date):
        """Sets the last_updated_date of this UpdatePolicyTemplateOutput.


        :param last_updated_date: The last_updated_date of this UpdatePolicyTemplateOutput.
        :type last_updated_date: datetime
        """
        if last_updated_date is None:
            raise ValueError("Invalid value for `last_updated_date`, must not be `None`")

        self._last_updated_date = last_updated_date
