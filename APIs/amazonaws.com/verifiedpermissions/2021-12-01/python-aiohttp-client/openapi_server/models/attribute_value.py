# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attribute_value_entity_identifier import AttributeValueEntityIdentifier
from openapi_server import util


class AttributeValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, boolean: bool=None, entity_identifier: AttributeValueEntityIdentifier=None, long: int=None, string: str=None, set: List=None, record: Dict=None):
        """AttributeValue - a model defined in OpenAPI

        :param boolean: The boolean of this AttributeValue.
        :param entity_identifier: The entity_identifier of this AttributeValue.
        :param long: The long of this AttributeValue.
        :param string: The string of this AttributeValue.
        :param set: The set of this AttributeValue.
        :param record: The record of this AttributeValue.
        """
        self.openapi_types = {
            'boolean': bool,
            'entity_identifier': AttributeValueEntityIdentifier,
            'long': int,
            'string': str,
            'set': List,
            'record': Dict
        }

        self.attribute_map = {
            'boolean': 'boolean',
            'entity_identifier': 'entityIdentifier',
            'long': 'long',
            'string': 'string',
            'set': 'set',
            'record': 'record'
        }

        self._boolean = boolean
        self._entity_identifier = entity_identifier
        self._long = long
        self._string = string
        self._set = set
        self._record = record

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttributeValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttributeValue of this AttributeValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def boolean(self):
        """Gets the boolean of this AttributeValue.


        :return: The boolean of this AttributeValue.
        :rtype: bool
        """
        return self._boolean

    @boolean.setter
    def boolean(self, boolean):
        """Sets the boolean of this AttributeValue.


        :param boolean: The boolean of this AttributeValue.
        :type boolean: bool
        """

        self._boolean = boolean

    @property
    def entity_identifier(self):
        """Gets the entity_identifier of this AttributeValue.


        :return: The entity_identifier of this AttributeValue.
        :rtype: AttributeValueEntityIdentifier
        """
        return self._entity_identifier

    @entity_identifier.setter
    def entity_identifier(self, entity_identifier):
        """Sets the entity_identifier of this AttributeValue.


        :param entity_identifier: The entity_identifier of this AttributeValue.
        :type entity_identifier: AttributeValueEntityIdentifier
        """

        self._entity_identifier = entity_identifier

    @property
    def long(self):
        """Gets the long of this AttributeValue.


        :return: The long of this AttributeValue.
        :rtype: int
        """
        return self._long

    @long.setter
    def long(self, long):
        """Sets the long of this AttributeValue.


        :param long: The long of this AttributeValue.
        :type long: int
        """

        self._long = long

    @property
    def string(self):
        """Gets the string of this AttributeValue.


        :return: The string of this AttributeValue.
        :rtype: str
        """
        return self._string

    @string.setter
    def string(self, string):
        """Sets the string of this AttributeValue.


        :param string: The string of this AttributeValue.
        :type string: str
        """

        self._string = string

    @property
    def set(self):
        """Gets the set of this AttributeValue.


        :return: The set of this AttributeValue.
        :rtype: List
        """
        return self._set

    @set.setter
    def set(self, set):
        """Sets the set of this AttributeValue.


        :param set: The set of this AttributeValue.
        :type set: List
        """

        self._set = set

    @property
    def record(self):
        """Gets the record of this AttributeValue.


        :return: The record of this AttributeValue.
        :rtype: Dict
        """
        return self._record

    @record.setter
    def record(self, record):
        """Sets the record of this AttributeValue.


        :param record: The record of this AttributeValue.
        :type record: Dict
        """

        self._record = record
