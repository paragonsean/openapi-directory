# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.is_authorized_input_context import IsAuthorizedInputContext
from openapi_server.models.is_authorized_input_entities import IsAuthorizedInputEntities
from openapi_server.models.is_authorized_with_token_input_action import IsAuthorizedWithTokenInputAction
from openapi_server.models.is_authorized_with_token_input_resource import IsAuthorizedWithTokenInputResource
from openapi_server import util


class IsAuthorizedWithTokenInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, policy_store_id: str=None, identity_token: str=None, access_token: str=None, action: IsAuthorizedWithTokenInputAction=None, resource: IsAuthorizedWithTokenInputResource=None, context: IsAuthorizedInputContext=None, entities: IsAuthorizedInputEntities=None):
        """IsAuthorizedWithTokenInput - a model defined in OpenAPI

        :param policy_store_id: The policy_store_id of this IsAuthorizedWithTokenInput.
        :param identity_token: The identity_token of this IsAuthorizedWithTokenInput.
        :param access_token: The access_token of this IsAuthorizedWithTokenInput.
        :param action: The action of this IsAuthorizedWithTokenInput.
        :param resource: The resource of this IsAuthorizedWithTokenInput.
        :param context: The context of this IsAuthorizedWithTokenInput.
        :param entities: The entities of this IsAuthorizedWithTokenInput.
        """
        self.openapi_types = {
            'policy_store_id': str,
            'identity_token': str,
            'access_token': str,
            'action': IsAuthorizedWithTokenInputAction,
            'resource': IsAuthorizedWithTokenInputResource,
            'context': IsAuthorizedInputContext,
            'entities': IsAuthorizedInputEntities
        }

        self.attribute_map = {
            'policy_store_id': 'policyStoreId',
            'identity_token': 'identityToken',
            'access_token': 'accessToken',
            'action': 'action',
            'resource': 'resource',
            'context': 'context',
            'entities': 'entities'
        }

        self._policy_store_id = policy_store_id
        self._identity_token = identity_token
        self._access_token = access_token
        self._action = action
        self._resource = resource
        self._context = context
        self._entities = entities

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IsAuthorizedWithTokenInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IsAuthorizedWithTokenInput of this IsAuthorizedWithTokenInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def policy_store_id(self):
        """Gets the policy_store_id of this IsAuthorizedWithTokenInput.


        :return: The policy_store_id of this IsAuthorizedWithTokenInput.
        :rtype: str
        """
        return self._policy_store_id

    @policy_store_id.setter
    def policy_store_id(self, policy_store_id):
        """Sets the policy_store_id of this IsAuthorizedWithTokenInput.


        :param policy_store_id: The policy_store_id of this IsAuthorizedWithTokenInput.
        :type policy_store_id: str
        """
        if policy_store_id is None:
            raise ValueError("Invalid value for `policy_store_id`, must not be `None`")

        self._policy_store_id = policy_store_id

    @property
    def identity_token(self):
        """Gets the identity_token of this IsAuthorizedWithTokenInput.


        :return: The identity_token of this IsAuthorizedWithTokenInput.
        :rtype: str
        """
        return self._identity_token

    @identity_token.setter
    def identity_token(self, identity_token):
        """Sets the identity_token of this IsAuthorizedWithTokenInput.


        :param identity_token: The identity_token of this IsAuthorizedWithTokenInput.
        :type identity_token: str
        """

        self._identity_token = identity_token

    @property
    def access_token(self):
        """Gets the access_token of this IsAuthorizedWithTokenInput.


        :return: The access_token of this IsAuthorizedWithTokenInput.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this IsAuthorizedWithTokenInput.


        :param access_token: The access_token of this IsAuthorizedWithTokenInput.
        :type access_token: str
        """

        self._access_token = access_token

    @property
    def action(self):
        """Gets the action of this IsAuthorizedWithTokenInput.


        :return: The action of this IsAuthorizedWithTokenInput.
        :rtype: IsAuthorizedWithTokenInputAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this IsAuthorizedWithTokenInput.


        :param action: The action of this IsAuthorizedWithTokenInput.
        :type action: IsAuthorizedWithTokenInputAction
        """

        self._action = action

    @property
    def resource(self):
        """Gets the resource of this IsAuthorizedWithTokenInput.


        :return: The resource of this IsAuthorizedWithTokenInput.
        :rtype: IsAuthorizedWithTokenInputResource
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this IsAuthorizedWithTokenInput.


        :param resource: The resource of this IsAuthorizedWithTokenInput.
        :type resource: IsAuthorizedWithTokenInputResource
        """

        self._resource = resource

    @property
    def context(self):
        """Gets the context of this IsAuthorizedWithTokenInput.


        :return: The context of this IsAuthorizedWithTokenInput.
        :rtype: IsAuthorizedInputContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this IsAuthorizedWithTokenInput.


        :param context: The context of this IsAuthorizedWithTokenInput.
        :type context: IsAuthorizedInputContext
        """

        self._context = context

    @property
    def entities(self):
        """Gets the entities of this IsAuthorizedWithTokenInput.


        :return: The entities of this IsAuthorizedWithTokenInput.
        :rtype: IsAuthorizedInputEntities
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this IsAuthorizedWithTokenInput.


        :param entities: The entities of this IsAuthorizedWithTokenInput.
        :type entities: IsAuthorizedInputEntities
        """

        self._entities = entities
