/*
 * Amazon Verified Permissions
 * <p>Amazon Verified Permissions is a permissions management service from Amazon Web Services. You can use Verified Permissions to manage permissions for your application, and authorize user access based on those permissions. Using Verified Permissions, application developers can grant access based on information about the users, resources, and requested actions. You can also evaluate additional information like group membership, attributes of the resources, and session context, such as time of request and IP addresses. Verified Permissions manages these permissions by letting you create and store authorization policies for your applications, such as consumer-facing web sites and enterprise business systems.</p> <p>Verified Permissions uses Cedar as the policy language to express your permission requirements. Cedar supports both role-based access control (RBAC) and attribute-based access control (ABAC) authorization models.</p> <p>For more information about configuring, administering, and using Amazon Verified Permissions in your applications, see the <a href=\"https://docs.aws.amazon.com/verifiedpermissions/latest/userguide/\">Amazon Verified Permissions User Guide</a>.</p> <p>For more information about the Cedar policy language, see the <a href=\"https://docs.cedarpolicy.com/\">Cedar Policy Language Guide</a>.</p> <important> <p>When you write Cedar policies that reference principals, resources and actions, you can define the unique identifiers used for each of those elements. We strongly recommend that you follow these best practices:</p> <ul> <li> <p> <b>Use values like universally unique identifiers (UUIDs) for all principal and resource identifiers.</b> </p> <p>For example, if user <code>jane</code> leaves the company, and you later let someone else use the name <code>jane</code>, then that new user automatically gets access to everything granted by policies that still reference <code>User::\"jane\"</code>. Cedar can’t distinguish between the new user and the old. This applies to both principal and resource identifiers. Always use identifiers that are guaranteed unique and never reused to ensure that you don’t unintentionally grant access because of the presence of an old identifier in a policy.</p> <p>Where you use a UUID for an entity, we recommend that you follow it with the // comment specifier and the ‘friendly’ name of your entity. This helps to make your policies easier to understand. For example: principal == User::\"a1b2c3d4-e5f6-a1b2-c3d4-EXAMPLE11111\", // alice</p> </li> <li> <p> <b>Do not include personally identifying, confidential, or sensitive information as part of the unique identifier for your principals or resources.</b> These identifiers are included in log entries shared in CloudTrail trails.</p> </li> </ul> </important> <p>Several operations return structures that appear similar, but have different purposes. As new functionality is added to the product, the structure used in a parameter of one operation might need to change in a way that wouldn't make sense for the same parameter in a different operation. To help you understand the purpose of each, the following naming convention is used for the structures:</p> <ul> <li> <p>Parameter type structures that end in <code>Detail</code> are used in <code>Get</code> operations.</p> </li> <li> <p>Parameter type structures that end in <code>Item</code> are used in <code>List</code> operations.</p> </li> <li> <p>Parameter type structures that use neither suffix are used in the mutating (create and update) operations.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2021-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateIdentitySourceInput;
import org.openapitools.client.model.CreateIdentitySourceOutput;
import org.openapitools.client.model.CreatePolicyInput;
import org.openapitools.client.model.CreatePolicyOutput;
import org.openapitools.client.model.CreatePolicyStoreInput;
import org.openapitools.client.model.CreatePolicyStoreOutput;
import org.openapitools.client.model.CreatePolicyTemplateInput;
import org.openapitools.client.model.CreatePolicyTemplateOutput;
import org.openapitools.client.model.DeleteIdentitySourceInput;
import org.openapitools.client.model.DeletePolicyInput;
import org.openapitools.client.model.DeletePolicyStoreInput;
import org.openapitools.client.model.DeletePolicyTemplateInput;
import org.openapitools.client.model.GetIdentitySourceInput;
import org.openapitools.client.model.GetIdentitySourceOutput;
import org.openapitools.client.model.GetPolicyInput;
import org.openapitools.client.model.GetPolicyOutput;
import org.openapitools.client.model.GetPolicyStoreInput;
import org.openapitools.client.model.GetPolicyStoreOutput;
import org.openapitools.client.model.GetPolicyTemplateInput;
import org.openapitools.client.model.GetPolicyTemplateOutput;
import org.openapitools.client.model.GetSchemaInput;
import org.openapitools.client.model.GetSchemaOutput;
import org.openapitools.client.model.IsAuthorizedInput;
import org.openapitools.client.model.IsAuthorizedOutput;
import org.openapitools.client.model.IsAuthorizedWithTokenInput;
import org.openapitools.client.model.IsAuthorizedWithTokenOutput;
import org.openapitools.client.model.ListIdentitySourcesInput;
import org.openapitools.client.model.ListIdentitySourcesOutput;
import org.openapitools.client.model.ListPoliciesInput;
import org.openapitools.client.model.ListPoliciesOutput;
import org.openapitools.client.model.ListPolicyStoresInput;
import org.openapitools.client.model.ListPolicyStoresOutput;
import org.openapitools.client.model.ListPolicyTemplatesInput;
import org.openapitools.client.model.ListPolicyTemplatesOutput;
import org.openapitools.client.model.PutSchemaInput;
import org.openapitools.client.model.PutSchemaOutput;
import org.openapitools.client.model.UpdateIdentitySourceInput;
import org.openapitools.client.model.UpdateIdentitySourceOutput;
import org.openapitools.client.model.UpdatePolicyInput;
import org.openapitools.client.model.UpdatePolicyOutput;
import org.openapitools.client.model.UpdatePolicyStoreInput;
import org.openapitools.client.model.UpdatePolicyStoreOutput;
import org.openapitools.client.model.UpdatePolicyTemplateInput;
import org.openapitools.client.model.UpdatePolicyTemplateOutput;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt;Creates a reference to an Amazon Cognito user pool as an external identity provider (IdP). &lt;/p&gt; &lt;p&gt;After you create an identity source, you can use the identities provided by the IdP as proxies for the principal in authorization queries that use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_IsAuthorizedWithToken.html\&quot;&gt;IsAuthorizedWithToken&lt;/a&gt; operation. These identities take the form of tokens that contain claims about the user, such as IDs, attributes and group memberships. Amazon Cognito provides both identity tokens and access tokens, and Verified Permissions can use either or both. Any combination of identity and access tokens results in the same Cedar principal. Verified Permissions automatically translates the information about the identities into the standard Cedar attributes that can be evaluated by your policies. Because the Amazon Cognito identity and access tokens can contain different information, the tokens you choose to use determine which principal attributes are available to access when evaluating Cedar policies.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you delete a Amazon Cognito user pool or user, tokens from that deleted pool or that deleted user continue to be usable until they expire.&lt;/p&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;To reference a user from this identity source in your Cedar policies, use the following syntax.&lt;/p&gt; &lt;p&gt; &lt;i&gt;IdentityType::\&quot;&amp;lt;CognitoUserPoolIdentifier&amp;gt;|&amp;lt;CognitoClientId&amp;gt;&lt;/i&gt; &lt;/p&gt; &lt;p&gt;Where &lt;code&gt;IdentityType&lt;/code&gt; is the string that you provide to the &lt;code&gt;PrincipalEntityType&lt;/code&gt; parameter for this operation. The &lt;code&gt;CognitoUserPoolId&lt;/code&gt; and &lt;code&gt;CognitoClientId&lt;/code&gt; are defined by the Amazon Cognito user pool.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createIdentitySourceTest() throws ApiException {
        String xAmzTarget = null;
        CreateIdentitySourceInput createIdentitySourceInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateIdentitySourceOutput response = api.createIdentitySource(xAmzTarget, createIdentitySourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a Cedar policy and saves it in the specified policy store. You can create either a static policy or a policy linked to a policy template.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;To create a static policy, provide the Cedar policy text in the &lt;code&gt;StaticPolicy&lt;/code&gt; section of the &lt;code&gt;PolicyDefinition&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To create a policy that is dynamically linked to a policy template, specify the policy template ID and the principal and resource to associate with this policy in the &lt;code&gt;templateLinked&lt;/code&gt; section of the &lt;code&gt;PolicyDefinition&lt;/code&gt;. If the policy template is ever updated, any policies linked to the policy template automatically use the updated template.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;Creating a policy causes it to be validated against the schema in the policy store. If the policy doesn&#39;t pass validation, the operation fails and the policy isn&#39;t stored.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPolicyTest() throws ApiException {
        String xAmzTarget = null;
        CreatePolicyInput createPolicyInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreatePolicyOutput response = api.createPolicy(xAmzTarget, createPolicyInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a policy store. A policy store is a container for policy resources.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Although &lt;a href&#x3D;\&quot;https://docs.cedarpolicy.com/schema.html#namespace\&quot;&gt;Cedar supports multiple namespaces&lt;/a&gt;, Verified Permissions currently supports only one namespace per policy store.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPolicyStoreTest() throws ApiException {
        String xAmzTarget = null;
        CreatePolicyStoreInput createPolicyStoreInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreatePolicyStoreOutput response = api.createPolicyStore(xAmzTarget, createPolicyStoreInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a policy template. A template can use placeholders for the principal and resource. A template must be instantiated into a policy by associating it with specific principals and resources to use for the placeholders. That instantiated policy can then be considered in authorization decisions. The instantiated policy works identically to any other policy, except that it is dynamically linked to the template. If the template changes, then any policies that are linked to that template are immediately updated as well.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPolicyTemplateTest() throws ApiException {
        String xAmzTarget = null;
        CreatePolicyTemplateInput createPolicyTemplateInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreatePolicyTemplateOutput response = api.createPolicyTemplate(xAmzTarget, createPolicyTemplateInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an identity source that references an identity provider (IdP) such as Amazon Cognito. After you delete the identity source, you can no longer use tokens for identities from that identity source to represent principals in authorization queries made using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_IsAuthorizedWithToken.html\&quot;&gt;IsAuthorizedWithToken&lt;/a&gt;. operations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteIdentitySourceTest() throws ApiException {
        String xAmzTarget = null;
        DeleteIdentitySourceInput deleteIdentitySourceInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteIdentitySource(xAmzTarget, deleteIdentitySourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified policy from the policy store.&lt;/p&gt; &lt;p&gt;This operation is idempotent; if you specify a policy that doesn&#39;t exist, the request response returns a successful &lt;code&gt;HTTP 200&lt;/code&gt; status code.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePolicyTest() throws ApiException {
        String xAmzTarget = null;
        DeletePolicyInput deletePolicyInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deletePolicy(xAmzTarget, deletePolicyInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified policy store.&lt;/p&gt; &lt;p&gt;This operation is idempotent. If you specify a policy store that does not exist, the request response will still return a successful HTTP 200 status code.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePolicyStoreTest() throws ApiException {
        String xAmzTarget = null;
        DeletePolicyStoreInput deletePolicyStoreInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deletePolicyStore(xAmzTarget, deletePolicyStoreInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified policy template from the policy store.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This operation also deletes any policies that were created from the specified policy template. Those policies are immediately removed from all future API responses, and are asynchronously deleted from the policy store.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePolicyTemplateTest() throws ApiException {
        String xAmzTarget = null;
        DeletePolicyTemplateInput deletePolicyTemplateInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deletePolicyTemplate(xAmzTarget, deletePolicyTemplateInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the details about the specified identity source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIdentitySourceTest() throws ApiException {
        String xAmzTarget = null;
        GetIdentitySourceInput getIdentitySourceInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetIdentitySourceOutput response = api.getIdentitySource(xAmzTarget, getIdentitySourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about the specified policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPolicyTest() throws ApiException {
        String xAmzTarget = null;
        GetPolicyInput getPolicyInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetPolicyOutput response = api.getPolicy(xAmzTarget, getPolicyInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves details about a policy store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPolicyStoreTest() throws ApiException {
        String xAmzTarget = null;
        GetPolicyStoreInput getPolicyStoreInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetPolicyStoreOutput response = api.getPolicyStore(xAmzTarget, getPolicyStoreInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieve the details for the specified policy template in the specified policy store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPolicyTemplateTest() throws ApiException {
        String xAmzTarget = null;
        GetPolicyTemplateInput getPolicyTemplateInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetPolicyTemplateOutput response = api.getPolicyTemplate(xAmzTarget, getPolicyTemplateInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieve the details for the specified schema in the specified policy store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSchemaTest() throws ApiException {
        String xAmzTarget = null;
        GetSchemaInput getSchemaInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSchemaOutput response = api.getSchema(xAmzTarget, getSchemaInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Makes an authorization decision about a service request described in the parameters. The information in the parameters can also define additional context that Verified Permissions can include in the evaluation. The request is evaluated against all matching policies in the specified policy store. The result of the decision is either &lt;code&gt;Allow&lt;/code&gt; or &lt;code&gt;Deny&lt;/code&gt;, along with a list of the policies that resulted in the decision.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void isAuthorizedTest() throws ApiException {
        String xAmzTarget = null;
        IsAuthorizedInput isAuthorizedInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        IsAuthorizedOutput response = api.isAuthorized(xAmzTarget, isAuthorizedInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Makes an authorization decision about a service request described in the parameters. The principal in this request comes from an external identity source. The information in the parameters can also define additional context that Verified Permissions can include in the evaluation. The request is evaluated against all matching policies in the specified policy store. The result of the decision is either &lt;code&gt;Allow&lt;/code&gt; or &lt;code&gt;Deny&lt;/code&gt;, along with a list of the policies that resulted in the decision.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you delete a Amazon Cognito user pool or user, tokens from that deleted pool or that deleted user continue to be usable until they expire.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void isAuthorizedWithTokenTest() throws ApiException {
        String xAmzTarget = null;
        IsAuthorizedWithTokenInput isAuthorizedWithTokenInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        IsAuthorizedWithTokenOutput response = api.isAuthorizedWithToken(xAmzTarget, isAuthorizedWithTokenInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a paginated list of all of the identity sources defined in the specified policy store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listIdentitySourcesTest() throws ApiException {
        String xAmzTarget = null;
        ListIdentitySourcesInput listIdentitySourcesInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListIdentitySourcesOutput response = api.listIdentitySources(xAmzTarget, listIdentitySourcesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a paginated list of all policies stored in the specified policy store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPoliciesTest() throws ApiException {
        String xAmzTarget = null;
        ListPoliciesInput listPoliciesInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListPoliciesOutput response = api.listPolicies(xAmzTarget, listPoliciesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a paginated list of all policy stores in the calling Amazon Web Services account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPolicyStoresTest() throws ApiException {
        String xAmzTarget = null;
        ListPolicyStoresInput listPolicyStoresInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListPolicyStoresOutput response = api.listPolicyStores(xAmzTarget, listPolicyStoresInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a paginated list of all policy templates in the specified policy store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPolicyTemplatesTest() throws ApiException {
        String xAmzTarget = null;
        ListPolicyTemplatesInput listPolicyTemplatesInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListPolicyTemplatesOutput response = api.listPolicyTemplates(xAmzTarget, listPolicyTemplatesInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Creates or updates the policy schema in the specified policy store. The schema is used to validate any Cedar policies and policy templates submitted to the policy store. Any changes to the schema validate only policies and templates submitted after the schema change. Existing policies and templates are not re-evaluated against the changed schema. If you later update a policy, then it is evaluated against the new schema at that time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putSchemaTest() throws ApiException {
        String xAmzTarget = null;
        PutSchemaInput putSchemaInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutSchemaOutput response = api.putSchema(xAmzTarget, putSchemaInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the specified identity source to use a new identity provider (IdP) source, or to change the mapping of identities from the IdP to a different principal entity type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateIdentitySourceTest() throws ApiException {
        String xAmzTarget = null;
        UpdateIdentitySourceInput updateIdentitySourceInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateIdentitySourceOutput response = api.updateIdentitySource(xAmzTarget, updateIdentitySourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Modifies a Cedar static policy in the specified policy store. You can change only certain elements of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdatePolicyInput.html#amazonverifiedpermissions-UpdatePolicy-request-UpdatePolicyDefinition\&quot;&gt;UpdatePolicyDefinition&lt;/a&gt; parameter. You can directly update only static policies. To change a template-linked policy, you must update the template instead, using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdatePolicyTemplate.html\&quot;&gt;UpdatePolicyTemplate&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If policy validation is enabled in the policy store, then updating a static policy causes Verified Permissions to validate the policy against the schema in the policy store. If the updated static policy doesn&#39;t pass validation, the operation fails and the update isn&#39;t stored.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePolicyTest() throws ApiException {
        String xAmzTarget = null;
        UpdatePolicyInput updatePolicyInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdatePolicyOutput response = api.updatePolicy(xAmzTarget, updatePolicyInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Modifies the validation setting for a policy store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePolicyStoreTest() throws ApiException {
        String xAmzTarget = null;
        UpdatePolicyStoreInput updatePolicyStoreInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdatePolicyStoreOutput response = api.updatePolicyStore(xAmzTarget, updatePolicyStoreInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the specified policy template. You can update only the description and the some elements of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdatePolicyTemplate.html#amazonverifiedpermissions-UpdatePolicyTemplate-request-policyBody\&quot;&gt;policyBody&lt;/a&gt;. &lt;/p&gt; &lt;important&gt; &lt;p&gt;Changes you make to the policy template content are immediately reflected in authorization decisions that involve all template-linked policies instantiated from this template.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePolicyTemplateTest() throws ApiException {
        String xAmzTarget = null;
        UpdatePolicyTemplateInput updatePolicyTemplateInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdatePolicyTemplateOutput response = api.updatePolicyTemplate(xAmzTarget, updatePolicyTemplateInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
