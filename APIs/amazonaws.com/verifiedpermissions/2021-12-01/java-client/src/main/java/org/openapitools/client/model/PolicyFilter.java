/*
 * Amazon Verified Permissions
 * <p>Amazon Verified Permissions is a permissions management service from Amazon Web Services. You can use Verified Permissions to manage permissions for your application, and authorize user access based on those permissions. Using Verified Permissions, application developers can grant access based on information about the users, resources, and requested actions. You can also evaluate additional information like group membership, attributes of the resources, and session context, such as time of request and IP addresses. Verified Permissions manages these permissions by letting you create and store authorization policies for your applications, such as consumer-facing web sites and enterprise business systems.</p> <p>Verified Permissions uses Cedar as the policy language to express your permission requirements. Cedar supports both role-based access control (RBAC) and attribute-based access control (ABAC) authorization models.</p> <p>For more information about configuring, administering, and using Amazon Verified Permissions in your applications, see the <a href=\"https://docs.aws.amazon.com/verifiedpermissions/latest/userguide/\">Amazon Verified Permissions User Guide</a>.</p> <p>For more information about the Cedar policy language, see the <a href=\"https://docs.cedarpolicy.com/\">Cedar Policy Language Guide</a>.</p> <important> <p>When you write Cedar policies that reference principals, resources and actions, you can define the unique identifiers used for each of those elements. We strongly recommend that you follow these best practices:</p> <ul> <li> <p> <b>Use values like universally unique identifiers (UUIDs) for all principal and resource identifiers.</b> </p> <p>For example, if user <code>jane</code> leaves the company, and you later let someone else use the name <code>jane</code>, then that new user automatically gets access to everything granted by policies that still reference <code>User::\"jane\"</code>. Cedar can’t distinguish between the new user and the old. This applies to both principal and resource identifiers. Always use identifiers that are guaranteed unique and never reused to ensure that you don’t unintentionally grant access because of the presence of an old identifier in a policy.</p> <p>Where you use a UUID for an entity, we recommend that you follow it with the // comment specifier and the ‘friendly’ name of your entity. This helps to make your policies easier to understand. For example: principal == User::\"a1b2c3d4-e5f6-a1b2-c3d4-EXAMPLE11111\", // alice</p> </li> <li> <p> <b>Do not include personally identifying, confidential, or sensitive information as part of the unique identifier for your principals or resources.</b> These identifiers are included in log entries shared in CloudTrail trails.</p> </li> </ul> </important> <p>Several operations return structures that appear similar, but have different purposes. As new functionality is added to the product, the structure used in a parameter of one operation might need to change in a way that wouldn't make sense for the same parameter in a different operation. To help you understand the purpose of each, the following naming convention is used for the structures:</p> <ul> <li> <p>Parameter type structures that end in <code>Detail</code> are used in <code>Get</code> operations.</p> </li> <li> <p>Parameter type structures that end in <code>Item</code> are used in <code>List</code> operations.</p> </li> <li> <p>Parameter type structures that use neither suffix are used in the mutating (create and update) operations.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2021-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PolicyFilterPrincipal;
import org.openapitools.client.model.PolicyFilterResource;
import org.openapitools.client.model.PolicyType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Contains information about a filter to refine policies returned in a query.&lt;/p&gt; &lt;p&gt;This data type is used as a response parameter for the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_ListPolicies.html\&quot;&gt;ListPolicies&lt;/a&gt; operation.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:07.574656-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PolicyFilter {
  public static final String SERIALIZED_NAME_PRINCIPAL = "principal";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL)
  private PolicyFilterPrincipal principal;

  public static final String SERIALIZED_NAME_RESOURCE = "resource";
  @SerializedName(SERIALIZED_NAME_RESOURCE)
  private PolicyFilterResource resource;

  public static final String SERIALIZED_NAME_POLICY_TYPE = "policyType";
  @SerializedName(SERIALIZED_NAME_POLICY_TYPE)
  private PolicyType policyType;

  public static final String SERIALIZED_NAME_POLICY_TEMPLATE_ID = "policyTemplateId";
  @SerializedName(SERIALIZED_NAME_POLICY_TEMPLATE_ID)
  private String policyTemplateId;

  public PolicyFilter() {
  }

  public PolicyFilter principal(PolicyFilterPrincipal principal) {
    this.principal = principal;
    return this;
  }

  /**
   * Get principal
   * @return principal
   */
  @javax.annotation.Nullable
  public PolicyFilterPrincipal getPrincipal() {
    return principal;
  }

  public void setPrincipal(PolicyFilterPrincipal principal) {
    this.principal = principal;
  }


  public PolicyFilter resource(PolicyFilterResource resource) {
    this.resource = resource;
    return this;
  }

  /**
   * Get resource
   * @return resource
   */
  @javax.annotation.Nullable
  public PolicyFilterResource getResource() {
    return resource;
  }

  public void setResource(PolicyFilterResource resource) {
    this.resource = resource;
  }


  public PolicyFilter policyType(PolicyType policyType) {
    this.policyType = policyType;
    return this;
  }

  /**
   * Get policyType
   * @return policyType
   */
  @javax.annotation.Nullable
  public PolicyType getPolicyType() {
    return policyType;
  }

  public void setPolicyType(PolicyType policyType) {
    this.policyType = policyType;
  }


  public PolicyFilter policyTemplateId(String policyTemplateId) {
    this.policyTemplateId = policyTemplateId;
    return this;
  }

  /**
   * Get policyTemplateId
   * @return policyTemplateId
   */
  @javax.annotation.Nullable
  public String getPolicyTemplateId() {
    return policyTemplateId;
  }

  public void setPolicyTemplateId(String policyTemplateId) {
    this.policyTemplateId = policyTemplateId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PolicyFilter policyFilter = (PolicyFilter) o;
    return Objects.equals(this.principal, policyFilter.principal) &&
        Objects.equals(this.resource, policyFilter.resource) &&
        Objects.equals(this.policyType, policyFilter.policyType) &&
        Objects.equals(this.policyTemplateId, policyFilter.policyTemplateId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(principal, resource, policyType, policyTemplateId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PolicyFilter {\n");
    sb.append("    principal: ").append(toIndentedString(principal)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("    policyType: ").append(toIndentedString(policyType)).append("\n");
    sb.append("    policyTemplateId: ").append(toIndentedString(policyTemplateId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("principal");
    openapiFields.add("resource");
    openapiFields.add("policyType");
    openapiFields.add("policyTemplateId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PolicyFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PolicyFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PolicyFilter is not found in the empty JSON string", PolicyFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PolicyFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PolicyFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `principal`
      if (jsonObj.get("principal") != null && !jsonObj.get("principal").isJsonNull()) {
        PolicyFilterPrincipal.validateJsonElement(jsonObj.get("principal"));
      }
      // validate the optional field `resource`
      if (jsonObj.get("resource") != null && !jsonObj.get("resource").isJsonNull()) {
        PolicyFilterResource.validateJsonElement(jsonObj.get("resource"));
      }
      // validate the optional field `policyType`
      if (jsonObj.get("policyType") != null && !jsonObj.get("policyType").isJsonNull()) {
        PolicyType.validateJsonElement(jsonObj.get("policyType"));
      }
      // validate the optional field `policyTemplateId`
      if (jsonObj.get("policyTemplateId") != null && !jsonObj.get("policyTemplateId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("policyTemplateId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PolicyFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PolicyFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PolicyFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PolicyFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<PolicyFilter>() {
           @Override
           public void write(JsonWriter out, PolicyFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PolicyFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PolicyFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PolicyFilter
   * @throws IOException if the JSON string is invalid with respect to PolicyFilter
   */
  public static PolicyFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PolicyFilter.class);
  }

  /**
   * Convert an instance of PolicyFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

