/**
 * Amazon Personalize Events
 * Amazon Personalize can consume real-time user event data, such as <i>stream</i> or <i>click</i> data, and use it for model training either alone or combined with historical data. For more information see <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/recording-events.html\">Recording Events</a>.
 *
 * The version of the OpenAPI document: 2018-03-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent::OAIEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent::OAIEvent() {
    this->initializeModel();
}

OAIEvent::~OAIEvent() {}

void OAIEvent::initializeModel() {

    m_event_id_isSet = false;
    m_event_id_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_event_value_isSet = false;
    m_event_value_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_sent_at_isSet = false;
    m_sent_at_isValid = false;

    m_recommendation_id_isSet = false;
    m_recommendation_id_isValid = false;

    m_impression_isSet = false;
    m_impression_isValid = false;

    m_metric_attribution_isSet = false;
    m_metric_attribution_isValid = false;
}

void OAIEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent::fromJsonObject(QJsonObject json) {

    m_event_id_isValid = ::OpenAPI::fromJsonValue(m_event_id, json[QString("eventId")]);
    m_event_id_isSet = !json[QString("eventId")].isNull() && m_event_id_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("eventType")]);
    m_event_type_isSet = !json[QString("eventType")].isNull() && m_event_type_isValid;

    m_event_value_isValid = ::OpenAPI::fromJsonValue(m_event_value, json[QString("eventValue")]);
    m_event_value_isSet = !json[QString("eventValue")].isNull() && m_event_value_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("itemId")]);
    m_item_id_isSet = !json[QString("itemId")].isNull() && m_item_id_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_sent_at_isValid = ::OpenAPI::fromJsonValue(m_sent_at, json[QString("sentAt")]);
    m_sent_at_isSet = !json[QString("sentAt")].isNull() && m_sent_at_isValid;

    m_recommendation_id_isValid = ::OpenAPI::fromJsonValue(m_recommendation_id, json[QString("recommendationId")]);
    m_recommendation_id_isSet = !json[QString("recommendationId")].isNull() && m_recommendation_id_isValid;

    m_impression_isValid = ::OpenAPI::fromJsonValue(m_impression, json[QString("impression")]);
    m_impression_isSet = !json[QString("impression")].isNull() && m_impression_isValid;

    m_metric_attribution_isValid = ::OpenAPI::fromJsonValue(m_metric_attribution, json[QString("metricAttribution")]);
    m_metric_attribution_isSet = !json[QString("metricAttribution")].isNull() && m_metric_attribution_isValid;
}

QString OAIEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_event_id_isSet) {
        obj.insert(QString("eventId"), ::OpenAPI::toJsonValue(m_event_id));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("eventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_event_value_isSet) {
        obj.insert(QString("eventValue"), ::OpenAPI::toJsonValue(m_event_value));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("itemId"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_properties_isSet) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_sent_at_isSet) {
        obj.insert(QString("sentAt"), ::OpenAPI::toJsonValue(m_sent_at));
    }
    if (m_recommendation_id_isSet) {
        obj.insert(QString("recommendationId"), ::OpenAPI::toJsonValue(m_recommendation_id));
    }
    if (m_impression.isSet()) {
        obj.insert(QString("impression"), ::OpenAPI::toJsonValue(m_impression));
    }
    if (m_metric_attribution.isSet()) {
        obj.insert(QString("metricAttribution"), ::OpenAPI::toJsonValue(m_metric_attribution));
    }
    return obj;
}

QString OAIEvent::getEventId() const {
    return m_event_id;
}
void OAIEvent::setEventId(const QString &event_id) {
    m_event_id = event_id;
    m_event_id_isSet = true;
}

bool OAIEvent::is_event_id_Set() const{
    return m_event_id_isSet;
}

bool OAIEvent::is_event_id_Valid() const{
    return m_event_id_isValid;
}

QString OAIEvent::getEventType() const {
    return m_event_type;
}
void OAIEvent::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIEvent::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIEvent::is_event_type_Valid() const{
    return m_event_type_isValid;
}

float OAIEvent::getEventValue() const {
    return m_event_value;
}
void OAIEvent::setEventValue(const float &event_value) {
    m_event_value = event_value;
    m_event_value_isSet = true;
}

bool OAIEvent::is_event_value_Set() const{
    return m_event_value_isSet;
}

bool OAIEvent::is_event_value_Valid() const{
    return m_event_value_isValid;
}

QString OAIEvent::getItemId() const {
    return m_item_id;
}
void OAIEvent::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAIEvent::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAIEvent::is_item_id_Valid() const{
    return m_item_id_isValid;
}

QJsonValue OAIEvent::getProperties() const {
    return m_properties;
}
void OAIEvent::setProperties(const QJsonValue &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIEvent::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIEvent::is_properties_Valid() const{
    return m_properties_isValid;
}

QDateTime OAIEvent::getSentAt() const {
    return m_sent_at;
}
void OAIEvent::setSentAt(const QDateTime &sent_at) {
    m_sent_at = sent_at;
    m_sent_at_isSet = true;
}

bool OAIEvent::is_sent_at_Set() const{
    return m_sent_at_isSet;
}

bool OAIEvent::is_sent_at_Valid() const{
    return m_sent_at_isValid;
}

QString OAIEvent::getRecommendationId() const {
    return m_recommendation_id;
}
void OAIEvent::setRecommendationId(const QString &recommendation_id) {
    m_recommendation_id = recommendation_id;
    m_recommendation_id_isSet = true;
}

bool OAIEvent::is_recommendation_id_Set() const{
    return m_recommendation_id_isSet;
}

bool OAIEvent::is_recommendation_id_Valid() const{
    return m_recommendation_id_isValid;
}

QList OAIEvent::getImpression() const {
    return m_impression;
}
void OAIEvent::setImpression(const QList &impression) {
    m_impression = impression;
    m_impression_isSet = true;
}

bool OAIEvent::is_impression_Set() const{
    return m_impression_isSet;
}

bool OAIEvent::is_impression_Valid() const{
    return m_impression_isValid;
}

OAIEvent_metricAttribution OAIEvent::getMetricAttribution() const {
    return m_metric_attribution;
}
void OAIEvent::setMetricAttribution(const OAIEvent_metricAttribution &metric_attribution) {
    m_metric_attribution = metric_attribution;
    m_metric_attribution_isSet = true;
}

bool OAIEvent::is_metric_attribution_Set() const{
    return m_metric_attribution_isSet;
}

bool OAIEvent::is_metric_attribution_Valid() const{
    return m_metric_attribution_isValid;
}

bool OAIEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_impression.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_attribution.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_event_type_isValid && m_sent_at_isValid && true;
}

} // namespace OpenAPI
