/**
 * Amazon Personalize Events
 * Amazon Personalize can consume real-time user event data, such as <i>stream</i> or <i>click</i> data, and use it for model training either alone or combined with historical data. For more information see <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/recording-events.html\">Recording Events</a>.
 *
 * The version of the OpenAPI document: 2018-03-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutEventsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutEventsRequest::OAIPutEventsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutEventsRequest::OAIPutEventsRequest() {
    this->initializeModel();
}

OAIPutEventsRequest::~OAIPutEventsRequest() {}

void OAIPutEventsRequest::initializeModel() {

    m_tracking_id_isSet = false;
    m_tracking_id_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;

    m_event_list_isSet = false;
    m_event_list_isValid = false;
}

void OAIPutEventsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutEventsRequest::fromJsonObject(QJsonObject json) {

    m_tracking_id_isValid = ::OpenAPI::fromJsonValue(m_tracking_id, json[QString("trackingId")]);
    m_tracking_id_isSet = !json[QString("trackingId")].isNull() && m_tracking_id_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("sessionId")]);
    m_session_id_isSet = !json[QString("sessionId")].isNull() && m_session_id_isValid;

    m_event_list_isValid = ::OpenAPI::fromJsonValue(m_event_list, json[QString("eventList")]);
    m_event_list_isSet = !json[QString("eventList")].isNull() && m_event_list_isValid;
}

QString OAIPutEventsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutEventsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_tracking_id_isSet) {
        obj.insert(QString("trackingId"), ::OpenAPI::toJsonValue(m_tracking_id));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("sessionId"), ::OpenAPI::toJsonValue(m_session_id));
    }
    if (m_event_list.isSet()) {
        obj.insert(QString("eventList"), ::OpenAPI::toJsonValue(m_event_list));
    }
    return obj;
}

QString OAIPutEventsRequest::getTrackingId() const {
    return m_tracking_id;
}
void OAIPutEventsRequest::setTrackingId(const QString &tracking_id) {
    m_tracking_id = tracking_id;
    m_tracking_id_isSet = true;
}

bool OAIPutEventsRequest::is_tracking_id_Set() const{
    return m_tracking_id_isSet;
}

bool OAIPutEventsRequest::is_tracking_id_Valid() const{
    return m_tracking_id_isValid;
}

QString OAIPutEventsRequest::getUserId() const {
    return m_user_id;
}
void OAIPutEventsRequest::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIPutEventsRequest::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIPutEventsRequest::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIPutEventsRequest::getSessionId() const {
    return m_session_id;
}
void OAIPutEventsRequest::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAIPutEventsRequest::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAIPutEventsRequest::is_session_id_Valid() const{
    return m_session_id_isValid;
}

QList OAIPutEventsRequest::getEventList() const {
    return m_event_list;
}
void OAIPutEventsRequest::setEventList(const QList &event_list) {
    m_event_list = event_list;
    m_event_list_isSet = true;
}

bool OAIPutEventsRequest::is_event_list_Set() const{
    return m_event_list_isSet;
}

bool OAIPutEventsRequest::is_event_list_Valid() const{
    return m_event_list_isValid;
}

bool OAIPutEventsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_tracking_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_list.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutEventsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_tracking_id_isValid && m_session_id_isValid && m_event_list_isValid && true;
}

} // namespace OpenAPI
