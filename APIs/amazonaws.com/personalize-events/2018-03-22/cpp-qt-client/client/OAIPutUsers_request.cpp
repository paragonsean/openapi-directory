/**
 * Amazon Personalize Events
 * Amazon Personalize can consume real-time user event data, such as <i>stream</i> or <i>click</i> data, and use it for model training either alone or combined with historical data. For more information see <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/recording-events.html\">Recording Events</a>.
 *
 * The version of the OpenAPI document: 2018-03-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutUsers_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutUsers_request::OAIPutUsers_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutUsers_request::OAIPutUsers_request() {
    this->initializeModel();
}

OAIPutUsers_request::~OAIPutUsers_request() {}

void OAIPutUsers_request::initializeModel() {

    m_dataset_arn_isSet = false;
    m_dataset_arn_isValid = false;

    m_users_isSet = false;
    m_users_isValid = false;
}

void OAIPutUsers_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutUsers_request::fromJsonObject(QJsonObject json) {

    m_dataset_arn_isValid = ::OpenAPI::fromJsonValue(m_dataset_arn, json[QString("datasetArn")]);
    m_dataset_arn_isSet = !json[QString("datasetArn")].isNull() && m_dataset_arn_isValid;

    m_users_isValid = ::OpenAPI::fromJsonValue(m_users, json[QString("users")]);
    m_users_isSet = !json[QString("users")].isNull() && m_users_isValid;
}

QString OAIPutUsers_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutUsers_request::asJsonObject() const {
    QJsonObject obj;
    if (m_dataset_arn_isSet) {
        obj.insert(QString("datasetArn"), ::OpenAPI::toJsonValue(m_dataset_arn));
    }
    if (m_users.size() > 0) {
        obj.insert(QString("users"), ::OpenAPI::toJsonValue(m_users));
    }
    return obj;
}

QString OAIPutUsers_request::getDatasetArn() const {
    return m_dataset_arn;
}
void OAIPutUsers_request::setDatasetArn(const QString &dataset_arn) {
    m_dataset_arn = dataset_arn;
    m_dataset_arn_isSet = true;
}

bool OAIPutUsers_request::is_dataset_arn_Set() const{
    return m_dataset_arn_isSet;
}

bool OAIPutUsers_request::is_dataset_arn_Valid() const{
    return m_dataset_arn_isValid;
}

QList<OAIUser> OAIPutUsers_request::getUsers() const {
    return m_users;
}
void OAIPutUsers_request::setUsers(const QList<OAIUser> &users) {
    m_users = users;
    m_users_isSet = true;
}

bool OAIPutUsers_request::is_users_Set() const{
    return m_users_isSet;
}

bool OAIPutUsers_request::is_users_Valid() const{
    return m_users_isValid;
}

bool OAIPutUsers_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dataset_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutUsers_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dataset_arn_isValid && m_users_isValid && true;
}

} // namespace OpenAPI
