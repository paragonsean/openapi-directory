/**
 * Amazon Personalize Events
 * Amazon Personalize can consume real-time user event data, such as <i>stream</i> or <i>click</i> data, and use it for model training either alone or combined with historical data. For more information see <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/recording-events.html\">Recording Events</a>.
 *
 * The version of the OpenAPI document: 2018-03-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent_metricAttribution.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent_metricAttribution::OAIEvent_metricAttribution(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent_metricAttribution::OAIEvent_metricAttribution() {
    this->initializeModel();
}

OAIEvent_metricAttribution::~OAIEvent_metricAttribution() {}

void OAIEvent_metricAttribution::initializeModel() {

    m_event_attribution_source_isSet = false;
    m_event_attribution_source_isValid = false;
}

void OAIEvent_metricAttribution::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent_metricAttribution::fromJsonObject(QJsonObject json) {

    m_event_attribution_source_isValid = ::OpenAPI::fromJsonValue(m_event_attribution_source, json[QString("eventAttributionSource")]);
    m_event_attribution_source_isSet = !json[QString("eventAttributionSource")].isNull() && m_event_attribution_source_isValid;
}

QString OAIEvent_metricAttribution::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent_metricAttribution::asJsonObject() const {
    QJsonObject obj;
    if (m_event_attribution_source_isSet) {
        obj.insert(QString("eventAttributionSource"), ::OpenAPI::toJsonValue(m_event_attribution_source));
    }
    return obj;
}

QString OAIEvent_metricAttribution::getEventAttributionSource() const {
    return m_event_attribution_source;
}
void OAIEvent_metricAttribution::setEventAttributionSource(const QString &event_attribution_source) {
    m_event_attribution_source = event_attribution_source;
    m_event_attribution_source_isSet = true;
}

bool OAIEvent_metricAttribution::is_event_attribution_source_Set() const{
    return m_event_attribution_source_isSet;
}

bool OAIEvent_metricAttribution::is_event_attribution_source_Valid() const{
    return m_event_attribution_source_isValid;
}

bool OAIEvent_metricAttribution::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_attribution_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent_metricAttribution::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_event_attribution_source_isValid && true;
}

} // namespace OpenAPI
