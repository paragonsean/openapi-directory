# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Item(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, item_id: str=None, properties: object=None):
        """Item - a model defined in OpenAPI

        :param item_id: The item_id of this Item.
        :param properties: The properties of this Item.
        """
        self.openapi_types = {
            'item_id': str,
            'properties': object
        }

        self.attribute_map = {
            'item_id': 'itemId',
            'properties': 'properties'
        }

        self._item_id = item_id
        self._properties = properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Item':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Item of this Item.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def item_id(self):
        """Gets the item_id of this Item.


        :return: The item_id of this Item.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this Item.


        :param item_id: The item_id of this Item.
        :type item_id: str
        """
        if item_id is None:
            raise ValueError("Invalid value for `item_id`, must not be `None`")

        self._item_id = item_id

    @property
    def properties(self):
        """Gets the properties of this Item.

        <p>A string map of item-specific metadata. Each element in the map consists of a key-value pair. For example, <code>{\"numberOfRatings\": \"12\"}</code>.</p> <p>The keys use camel case names that match the fields in the schema for the Items dataset. In the previous example, the <code>numberOfRatings</code> matches the 'NUMBER_OF_RATINGS' field defined in the Items schema. For categorical string data, to include multiple categories for a single item, separate each category with a pipe separator (<code>|</code>). For example, <code>\\\"Horror|Action\\\"</code>.</p>

        :return: The properties of this Item.
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Item.

        <p>A string map of item-specific metadata. Each element in the map consists of a key-value pair. For example, <code>{\"numberOfRatings\": \"12\"}</code>.</p> <p>The keys use camel case names that match the fields in the schema for the Items dataset. In the previous example, the <code>numberOfRatings</code> matches the 'NUMBER_OF_RATINGS' field defined in the Items schema. For categorical string data, to include multiple categories for a single item, separate each category with a pipe separator (<code>|</code>). For example, <code>\\\"Horror|Action\\\"</code>.</p>

        :param properties: The properties of this Item.
        :type properties: object
        """

        self._properties = properties
