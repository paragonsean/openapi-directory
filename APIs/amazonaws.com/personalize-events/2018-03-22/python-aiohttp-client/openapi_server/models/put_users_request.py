# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user import User
import re
from openapi_server import util


class PutUsersRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dataset_arn: str=None, users: List[User]=None):
        """PutUsersRequest - a model defined in OpenAPI

        :param dataset_arn: The dataset_arn of this PutUsersRequest.
        :param users: The users of this PutUsersRequest.
        """
        self.openapi_types = {
            'dataset_arn': str,
            'users': List[User]
        }

        self.attribute_map = {
            'dataset_arn': 'datasetArn',
            'users': 'users'
        }

        self._dataset_arn = dataset_arn
        self._users = users

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutUsersRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutUsers_request of this PutUsersRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataset_arn(self):
        """Gets the dataset_arn of this PutUsersRequest.

        The Amazon Resource Name (ARN) of the Users dataset you are adding the user or users to.

        :return: The dataset_arn of this PutUsersRequest.
        :rtype: str
        """
        return self._dataset_arn

    @dataset_arn.setter
    def dataset_arn(self, dataset_arn):
        """Sets the dataset_arn of this PutUsersRequest.

        The Amazon Resource Name (ARN) of the Users dataset you are adding the user or users to.

        :param dataset_arn: The dataset_arn of this PutUsersRequest.
        :type dataset_arn: str
        """
        if dataset_arn is None:
            raise ValueError("Invalid value for `dataset_arn`, must not be `None`")
        if dataset_arn is not None and len(dataset_arn) > 256:
            raise ValueError("Invalid value for `dataset_arn`, length must be less than or equal to `256`")
        if dataset_arn is not None and not re.search(r'arn:([a-z\d-]+):personalize:.*:.*:.+', dataset_arn):
            raise ValueError("Invalid value for `dataset_arn`, must be a follow pattern or equal to `/arn:([a-z\d-]+):personalize:.*:.*:.+/`")

        self._dataset_arn = dataset_arn

    @property
    def users(self):
        """Gets the users of this PutUsersRequest.

        A list of user data.

        :return: The users of this PutUsersRequest.
        :rtype: List[User]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this PutUsersRequest.

        A list of user data.

        :param users: The users of this PutUsersRequest.
        :type users: List[User]
        """
        if users is None:
            raise ValueError("Invalid value for `users`, must not be `None`")
        if users is not None and len(users) > 10:
            raise ValueError("Invalid value for `users`, number of items must be less than or equal to `10`")
        if users is not None and len(users) < 1:
            raise ValueError("Invalid value for `users`, number of items must be greater than or equal to `1`")

        self._users = users
