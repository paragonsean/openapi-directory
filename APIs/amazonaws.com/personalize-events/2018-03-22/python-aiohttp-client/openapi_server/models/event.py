# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_metric_attribution import EventMetricAttribution
from openapi_server import util


class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_id: str=None, event_type: str=None, event_value: float=None, item_id: str=None, properties: object=None, sent_at: datetime=None, recommendation_id: str=None, impression: List=None, metric_attribution: EventMetricAttribution=None):
        """Event - a model defined in OpenAPI

        :param event_id: The event_id of this Event.
        :param event_type: The event_type of this Event.
        :param event_value: The event_value of this Event.
        :param item_id: The item_id of this Event.
        :param properties: The properties of this Event.
        :param sent_at: The sent_at of this Event.
        :param recommendation_id: The recommendation_id of this Event.
        :param impression: The impression of this Event.
        :param metric_attribution: The metric_attribution of this Event.
        """
        self.openapi_types = {
            'event_id': str,
            'event_type': str,
            'event_value': float,
            'item_id': str,
            'properties': object,
            'sent_at': datetime,
            'recommendation_id': str,
            'impression': List,
            'metric_attribution': EventMetricAttribution
        }

        self.attribute_map = {
            'event_id': 'eventId',
            'event_type': 'eventType',
            'event_value': 'eventValue',
            'item_id': 'itemId',
            'properties': 'properties',
            'sent_at': 'sentAt',
            'recommendation_id': 'recommendationId',
            'impression': 'impression',
            'metric_attribution': 'metricAttribution'
        }

        self._event_id = event_id
        self._event_type = event_type
        self._event_value = event_value
        self._item_id = item_id
        self._properties = properties
        self._sent_at = sent_at
        self._recommendation_id = recommendation_id
        self._impression = impression
        self._metric_attribution = metric_attribution

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event of this Event.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_id(self):
        """Gets the event_id of this Event.


        :return: The event_id of this Event.
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this Event.


        :param event_id: The event_id of this Event.
        :type event_id: str
        """

        self._event_id = event_id

    @property
    def event_type(self):
        """Gets the event_type of this Event.


        :return: The event_type of this Event.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this Event.


        :param event_type: The event_type of this Event.
        :type event_type: str
        """
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")

        self._event_type = event_type

    @property
    def event_value(self):
        """Gets the event_value of this Event.


        :return: The event_value of this Event.
        :rtype: float
        """
        return self._event_value

    @event_value.setter
    def event_value(self, event_value):
        """Sets the event_value of this Event.


        :param event_value: The event_value of this Event.
        :type event_value: float
        """

        self._event_value = event_value

    @property
    def item_id(self):
        """Gets the item_id of this Event.


        :return: The item_id of this Event.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this Event.


        :param item_id: The item_id of this Event.
        :type item_id: str
        """

        self._item_id = item_id

    @property
    def properties(self):
        """Gets the properties of this Event.

        <p>A string map of event-specific data that you might choose to record. For example, if a user rates a movie on your site, other than movie ID (<code>itemId</code>) and rating (<code>eventValue</code>) , you might also send the number of movie ratings made by the user.</p> <p>Each item in the map consists of a key-value pair. For example,</p> <p> <code>{\"numberOfRatings\": \"12\"}</code> </p> <p>The keys use camel case names that match the fields in the Interactions schema. In the above example, the <code>numberOfRatings</code> would match the 'NUMBER_OF_RATINGS' field defined in the Interactions schema.</p>

        :return: The properties of this Event.
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Event.

        <p>A string map of event-specific data that you might choose to record. For example, if a user rates a movie on your site, other than movie ID (<code>itemId</code>) and rating (<code>eventValue</code>) , you might also send the number of movie ratings made by the user.</p> <p>Each item in the map consists of a key-value pair. For example,</p> <p> <code>{\"numberOfRatings\": \"12\"}</code> </p> <p>The keys use camel case names that match the fields in the Interactions schema. In the above example, the <code>numberOfRatings</code> would match the 'NUMBER_OF_RATINGS' field defined in the Interactions schema.</p>

        :param properties: The properties of this Event.
        :type properties: object
        """

        self._properties = properties

    @property
    def sent_at(self):
        """Gets the sent_at of this Event.


        :return: The sent_at of this Event.
        :rtype: datetime
        """
        return self._sent_at

    @sent_at.setter
    def sent_at(self, sent_at):
        """Sets the sent_at of this Event.


        :param sent_at: The sent_at of this Event.
        :type sent_at: datetime
        """
        if sent_at is None:
            raise ValueError("Invalid value for `sent_at`, must not be `None`")

        self._sent_at = sent_at

    @property
    def recommendation_id(self):
        """Gets the recommendation_id of this Event.


        :return: The recommendation_id of this Event.
        :rtype: str
        """
        return self._recommendation_id

    @recommendation_id.setter
    def recommendation_id(self, recommendation_id):
        """Sets the recommendation_id of this Event.


        :param recommendation_id: The recommendation_id of this Event.
        :type recommendation_id: str
        """

        self._recommendation_id = recommendation_id

    @property
    def impression(self):
        """Gets the impression of this Event.


        :return: The impression of this Event.
        :rtype: List
        """
        return self._impression

    @impression.setter
    def impression(self, impression):
        """Sets the impression of this Event.


        :param impression: The impression of this Event.
        :type impression: List
        """

        self._impression = impression

    @property
    def metric_attribution(self):
        """Gets the metric_attribution of this Event.


        :return: The metric_attribution of this Event.
        :rtype: EventMetricAttribution
        """
        return self._metric_attribution

    @metric_attribution.setter
    def metric_attribution(self, metric_attribution):
        """Sets the metric_attribution of this Event.


        :param metric_attribution: The metric_attribution of this Event.
        :type metric_attribution: EventMetricAttribution
        """

        self._metric_attribution = metric_attribution
