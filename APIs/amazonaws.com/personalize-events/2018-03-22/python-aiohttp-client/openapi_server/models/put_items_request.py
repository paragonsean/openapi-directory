# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.item import Item
import re
from openapi_server import util


class PutItemsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dataset_arn: str=None, items: List[Item]=None):
        """PutItemsRequest - a model defined in OpenAPI

        :param dataset_arn: The dataset_arn of this PutItemsRequest.
        :param items: The items of this PutItemsRequest.
        """
        self.openapi_types = {
            'dataset_arn': str,
            'items': List[Item]
        }

        self.attribute_map = {
            'dataset_arn': 'datasetArn',
            'items': 'items'
        }

        self._dataset_arn = dataset_arn
        self._items = items

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutItemsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutItems_request of this PutItemsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataset_arn(self):
        """Gets the dataset_arn of this PutItemsRequest.

        The Amazon Resource Name (ARN) of the Items dataset you are adding the item or items to.

        :return: The dataset_arn of this PutItemsRequest.
        :rtype: str
        """
        return self._dataset_arn

    @dataset_arn.setter
    def dataset_arn(self, dataset_arn):
        """Sets the dataset_arn of this PutItemsRequest.

        The Amazon Resource Name (ARN) of the Items dataset you are adding the item or items to.

        :param dataset_arn: The dataset_arn of this PutItemsRequest.
        :type dataset_arn: str
        """
        if dataset_arn is None:
            raise ValueError("Invalid value for `dataset_arn`, must not be `None`")
        if dataset_arn is not None and len(dataset_arn) > 256:
            raise ValueError("Invalid value for `dataset_arn`, length must be less than or equal to `256`")
        if dataset_arn is not None and not re.search(r'arn:([a-z\d-]+):personalize:.*:.*:.+', dataset_arn):
            raise ValueError("Invalid value for `dataset_arn`, must be a follow pattern or equal to `/arn:([a-z\d-]+):personalize:.*:.*:.+/`")

        self._dataset_arn = dataset_arn

    @property
    def items(self):
        """Gets the items of this PutItemsRequest.

        A list of item data.

        :return: The items of this PutItemsRequest.
        :rtype: List[Item]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this PutItemsRequest.

        A list of item data.

        :param items: The items of this PutItemsRequest.
        :type items: List[Item]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")
        if items is not None and len(items) > 10:
            raise ValueError("Invalid value for `items`, number of items must be less than or equal to `10`")
        if items is not None and len(items) < 1:
            raise ValueError("Invalid value for `items`, number of items must be greater than or equal to `1`")

        self._items = items
