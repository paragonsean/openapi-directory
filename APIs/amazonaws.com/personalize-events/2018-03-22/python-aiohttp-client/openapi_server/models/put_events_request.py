# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event import Event
from openapi_server import util


class PutEventsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tracking_id: str=None, user_id: str=None, session_id: str=None, event_list: List[Event]=None):
        """PutEventsRequest - a model defined in OpenAPI

        :param tracking_id: The tracking_id of this PutEventsRequest.
        :param user_id: The user_id of this PutEventsRequest.
        :param session_id: The session_id of this PutEventsRequest.
        :param event_list: The event_list of this PutEventsRequest.
        """
        self.openapi_types = {
            'tracking_id': str,
            'user_id': str,
            'session_id': str,
            'event_list': List[Event]
        }

        self.attribute_map = {
            'tracking_id': 'trackingId',
            'user_id': 'userId',
            'session_id': 'sessionId',
            'event_list': 'eventList'
        }

        self._tracking_id = tracking_id
        self._user_id = user_id
        self._session_id = session_id
        self._event_list = event_list

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutEventsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutEvents_request of this PutEventsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tracking_id(self):
        """Gets the tracking_id of this PutEventsRequest.

        The tracking ID for the event. The ID is generated by a call to the <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/API_CreateEventTracker.html\">CreateEventTracker</a> API.

        :return: The tracking_id of this PutEventsRequest.
        :rtype: str
        """
        return self._tracking_id

    @tracking_id.setter
    def tracking_id(self, tracking_id):
        """Sets the tracking_id of this PutEventsRequest.

        The tracking ID for the event. The ID is generated by a call to the <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/API_CreateEventTracker.html\">CreateEventTracker</a> API.

        :param tracking_id: The tracking_id of this PutEventsRequest.
        :type tracking_id: str
        """
        if tracking_id is None:
            raise ValueError("Invalid value for `tracking_id`, must not be `None`")
        if tracking_id is not None and len(tracking_id) > 256:
            raise ValueError("Invalid value for `tracking_id`, length must be less than or equal to `256`")
        if tracking_id is not None and len(tracking_id) < 1:
            raise ValueError("Invalid value for `tracking_id`, length must be greater than or equal to `1`")

        self._tracking_id = tracking_id

    @property
    def user_id(self):
        """Gets the user_id of this PutEventsRequest.

        The user associated with the event.

        :return: The user_id of this PutEventsRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this PutEventsRequest.

        The user associated with the event.

        :param user_id: The user_id of this PutEventsRequest.
        :type user_id: str
        """
        if user_id is not None and len(user_id) > 256:
            raise ValueError("Invalid value for `user_id`, length must be less than or equal to `256`")
        if user_id is not None and len(user_id) < 1:
            raise ValueError("Invalid value for `user_id`, length must be greater than or equal to `1`")

        self._user_id = user_id

    @property
    def session_id(self):
        """Gets the session_id of this PutEventsRequest.

        The session ID associated with the user's visit. Your application generates the sessionId when a user first visits your website or uses your application. Amazon Personalize uses the sessionId to associate events with the user before they log in. For more information, see <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/recording-events.html\">Recording Events</a>.

        :return: The session_id of this PutEventsRequest.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this PutEventsRequest.

        The session ID associated with the user's visit. Your application generates the sessionId when a user first visits your website or uses your application. Amazon Personalize uses the sessionId to associate events with the user before they log in. For more information, see <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/recording-events.html\">Recording Events</a>.

        :param session_id: The session_id of this PutEventsRequest.
        :type session_id: str
        """
        if session_id is None:
            raise ValueError("Invalid value for `session_id`, must not be `None`")
        if session_id is not None and len(session_id) > 256:
            raise ValueError("Invalid value for `session_id`, length must be less than or equal to `256`")
        if session_id is not None and len(session_id) < 1:
            raise ValueError("Invalid value for `session_id`, length must be greater than or equal to `1`")

        self._session_id = session_id

    @property
    def event_list(self):
        """Gets the event_list of this PutEventsRequest.

        A list of event data from the session.

        :return: The event_list of this PutEventsRequest.
        :rtype: List[Event]
        """
        return self._event_list

    @event_list.setter
    def event_list(self, event_list):
        """Sets the event_list of this PutEventsRequest.

        A list of event data from the session.

        :param event_list: The event_list of this PutEventsRequest.
        :type event_list: List[Event]
        """
        if event_list is None:
            raise ValueError("Invalid value for `event_list`, must not be `None`")
        if event_list is not None and len(event_list) > 10:
            raise ValueError("Invalid value for `event_list`, number of items must be less than or equal to `10`")
        if event_list is not None and len(event_list) < 1:
            raise ValueError("Invalid value for `event_list`, number of items must be greater than or equal to `1`")

        self._event_list = event_list
