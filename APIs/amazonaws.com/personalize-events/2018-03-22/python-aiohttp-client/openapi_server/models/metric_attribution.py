# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MetricAttribution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_attribution_source: str=None):
        """MetricAttribution - a model defined in OpenAPI

        :param event_attribution_source: The event_attribution_source of this MetricAttribution.
        """
        self.openapi_types = {
            'event_attribution_source': str
        }

        self.attribute_map = {
            'event_attribution_source': 'eventAttributionSource'
        }

        self._event_attribution_source = event_attribution_source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricAttribution':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricAttribution of this MetricAttribution.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_attribution_source(self):
        """Gets the event_attribution_source of this MetricAttribution.


        :return: The event_attribution_source of this MetricAttribution.
        :rtype: str
        """
        return self._event_attribution_source

    @event_attribution_source.setter
    def event_attribution_source(self, event_attribution_source):
        """Sets the event_attribution_source of this MetricAttribution.


        :param event_attribution_source: The event_attribution_source of this MetricAttribution.
        :type event_attribution_source: str
        """
        if event_attribution_source is None:
            raise ValueError("Invalid value for `event_attribution_source`, must not be `None`")

        self._event_attribution_source = event_attribution_source
