/*
 * Amazon Personalize Events
 * Amazon Personalize can consume real-time user event data, such as <i>stream</i> or <i>click</i> data, and use it for model training either alone or combined with historical data. For more information see <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/recording-events.html\">Recording Events</a>.
 *
 * The version of the OpenAPI document: 2018-03-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EventMetricAttribution;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents user interaction event information sent using the &lt;code&gt;PutEvents&lt;/code&gt; API.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:50.884241-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Event {
  public static final String SERIALIZED_NAME_EVENT_ID = "eventId";
  @SerializedName(SERIALIZED_NAME_EVENT_ID)
  private String eventId;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private String eventType;

  public static final String SERIALIZED_NAME_EVENT_VALUE = "eventValue";
  @SerializedName(SERIALIZED_NAME_EVENT_VALUE)
  private Float eventValue;

  public static final String SERIALIZED_NAME_ITEM_ID = "itemId";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  private String itemId;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Object properties = null;

  public static final String SERIALIZED_NAME_SENT_AT = "sentAt";
  @SerializedName(SERIALIZED_NAME_SENT_AT)
  private OffsetDateTime sentAt;

  public static final String SERIALIZED_NAME_RECOMMENDATION_ID = "recommendationId";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION_ID)
  private String recommendationId;

  public static final String SERIALIZED_NAME_IMPRESSION = "impression";
  @SerializedName(SERIALIZED_NAME_IMPRESSION)
  private List impression;

  public static final String SERIALIZED_NAME_METRIC_ATTRIBUTION = "metricAttribution";
  @SerializedName(SERIALIZED_NAME_METRIC_ATTRIBUTION)
  private EventMetricAttribution metricAttribution;

  public Event() {
  }

  public Event eventId(String eventId) {
    this.eventId = eventId;
    return this;
  }

  /**
   * Get eventId
   * @return eventId
   */
  @javax.annotation.Nullable
  public String getEventId() {
    return eventId;
  }

  public void setEventId(String eventId) {
    this.eventId = eventId;
  }


  public Event eventType(String eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * Get eventType
   * @return eventType
   */
  @javax.annotation.Nonnull
  public String getEventType() {
    return eventType;
  }

  public void setEventType(String eventType) {
    this.eventType = eventType;
  }


  public Event eventValue(Float eventValue) {
    this.eventValue = eventValue;
    return this;
  }

  /**
   * Get eventValue
   * @return eventValue
   */
  @javax.annotation.Nullable
  public Float getEventValue() {
    return eventValue;
  }

  public void setEventValue(Float eventValue) {
    this.eventValue = eventValue;
  }


  public Event itemId(String itemId) {
    this.itemId = itemId;
    return this;
  }

  /**
   * Get itemId
   * @return itemId
   */
  @javax.annotation.Nullable
  public String getItemId() {
    return itemId;
  }

  public void setItemId(String itemId) {
    this.itemId = itemId;
  }


  public Event properties(Object properties) {
    this.properties = properties;
    return this;
  }

  /**
   * &lt;p&gt;A string map of event-specific data that you might choose to record. For example, if a user rates a movie on your site, other than movie ID (&lt;code&gt;itemId&lt;/code&gt;) and rating (&lt;code&gt;eventValue&lt;/code&gt;) , you might also send the number of movie ratings made by the user.&lt;/p&gt; &lt;p&gt;Each item in the map consists of a key-value pair. For example,&lt;/p&gt; &lt;p&gt; &lt;code&gt;{\&quot;numberOfRatings\&quot;: \&quot;12\&quot;}&lt;/code&gt; &lt;/p&gt; &lt;p&gt;The keys use camel case names that match the fields in the Interactions schema. In the above example, the &lt;code&gt;numberOfRatings&lt;/code&gt; would match the &#39;NUMBER_OF_RATINGS&#39; field defined in the Interactions schema.&lt;/p&gt;
   * @return properties
   */
  @javax.annotation.Nullable
  public Object getProperties() {
    return properties;
  }

  public void setProperties(Object properties) {
    this.properties = properties;
  }


  public Event sentAt(OffsetDateTime sentAt) {
    this.sentAt = sentAt;
    return this;
  }

  /**
   * Get sentAt
   * @return sentAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getSentAt() {
    return sentAt;
  }

  public void setSentAt(OffsetDateTime sentAt) {
    this.sentAt = sentAt;
  }


  public Event recommendationId(String recommendationId) {
    this.recommendationId = recommendationId;
    return this;
  }

  /**
   * Get recommendationId
   * @return recommendationId
   */
  @javax.annotation.Nullable
  public String getRecommendationId() {
    return recommendationId;
  }

  public void setRecommendationId(String recommendationId) {
    this.recommendationId = recommendationId;
  }


  public Event impression(List impression) {
    this.impression = impression;
    return this;
  }

  /**
   * Get impression
   * @return impression
   */
  @javax.annotation.Nullable
  public List getImpression() {
    return impression;
  }

  public void setImpression(List impression) {
    this.impression = impression;
  }


  public Event metricAttribution(EventMetricAttribution metricAttribution) {
    this.metricAttribution = metricAttribution;
    return this;
  }

  /**
   * Get metricAttribution
   * @return metricAttribution
   */
  @javax.annotation.Nullable
  public EventMetricAttribution getMetricAttribution() {
    return metricAttribution;
  }

  public void setMetricAttribution(EventMetricAttribution metricAttribution) {
    this.metricAttribution = metricAttribution;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Event event = (Event) o;
    return Objects.equals(this.eventId, event.eventId) &&
        Objects.equals(this.eventType, event.eventType) &&
        Objects.equals(this.eventValue, event.eventValue) &&
        Objects.equals(this.itemId, event.itemId) &&
        Objects.equals(this.properties, event.properties) &&
        Objects.equals(this.sentAt, event.sentAt) &&
        Objects.equals(this.recommendationId, event.recommendationId) &&
        Objects.equals(this.impression, event.impression) &&
        Objects.equals(this.metricAttribution, event.metricAttribution);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventId, eventType, eventValue, itemId, properties, sentAt, recommendationId, impression, metricAttribution);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Event {\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    eventValue: ").append(toIndentedString(eventValue)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    sentAt: ").append(toIndentedString(sentAt)).append("\n");
    sb.append("    recommendationId: ").append(toIndentedString(recommendationId)).append("\n");
    sb.append("    impression: ").append(toIndentedString(impression)).append("\n");
    sb.append("    metricAttribution: ").append(toIndentedString(metricAttribution)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eventId");
    openapiFields.add("eventType");
    openapiFields.add("eventValue");
    openapiFields.add("itemId");
    openapiFields.add("properties");
    openapiFields.add("sentAt");
    openapiFields.add("recommendationId");
    openapiFields.add("impression");
    openapiFields.add("metricAttribution");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("eventType");
    openapiRequiredFields.add("sentAt");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Event
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Event.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Event is not found in the empty JSON string", Event.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Event.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Event` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Event.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `eventId`
      if (jsonObj.get("eventId") != null && !jsonObj.get("eventId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("eventId"));
      }
      // validate the required field `eventType`
      String.validateJsonElement(jsonObj.get("eventType"));
      // validate the optional field `eventValue`
      if (jsonObj.get("eventValue") != null && !jsonObj.get("eventValue").isJsonNull()) {
        Float.validateJsonElement(jsonObj.get("eventValue"));
      }
      // validate the optional field `itemId`
      if (jsonObj.get("itemId") != null && !jsonObj.get("itemId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("itemId"));
      }
      // validate the required field `sentAt`
      OffsetDateTime.validateJsonElement(jsonObj.get("sentAt"));
      // validate the optional field `recommendationId`
      if (jsonObj.get("recommendationId") != null && !jsonObj.get("recommendationId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("recommendationId"));
      }
      // validate the optional field `impression`
      if (jsonObj.get("impression") != null && !jsonObj.get("impression").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("impression"));
      }
      // validate the optional field `metricAttribution`
      if (jsonObj.get("metricAttribution") != null && !jsonObj.get("metricAttribution").isJsonNull()) {
        EventMetricAttribution.validateJsonElement(jsonObj.get("metricAttribution"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Event.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Event' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Event> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Event.class));

       return (TypeAdapter<T>) new TypeAdapter<Event>() {
           @Override
           public void write(JsonWriter out, Event value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Event read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Event given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Event
   * @throws IOException if the JSON string is invalid with respect to Event
   */
  public static Event fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Event.class);
  }

  /**
   * Convert an instance of Event to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

