/**
 * Amazon Personalize Events
 * Amazon Personalize can consume real-time user event data, such as <i>stream</i> or <i>click</i> data, and use it for model training either alone or combined with historical data. For more information see <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/recording-events.html\">Recording Events</a>.
 *
 * The version of the OpenAPI document: 2018-03-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Event from './model/Event';
import EventMetricAttribution from './model/EventMetricAttribution';
import Item from './model/Item';
import MetricAttribution from './model/MetricAttribution';
import PutEventsRequest from './model/PutEventsRequest';
import PutItemsRequest from './model/PutItemsRequest';
import PutUsersRequest from './model/PutUsersRequest';
import User from './model/User';
import DefaultApi from './api/DefaultApi';


/**
* Amazon Personalize can consume real-time user event data, such as &lt;i&gt;stream&lt;/i&gt; or &lt;i&gt;click&lt;/i&gt; data, and use it for model training either alone or combined with historical data. For more information see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/personalize/latest/dg/recording-events.html\&quot;&gt;Recording Events&lt;/a&gt;..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var AmazonPersonalizeEvents = require('index'); // See note below*.
* var xxxSvc = new AmazonPersonalizeEvents.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new AmazonPersonalizeEvents.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new AmazonPersonalizeEvents.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new AmazonPersonalizeEvents.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2018-03-22
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Event model constructor.
     * @property {module:model/Event}
     */
    Event,

    /**
     * The EventMetricAttribution model constructor.
     * @property {module:model/EventMetricAttribution}
     */
    EventMetricAttribution,

    /**
     * The Item model constructor.
     * @property {module:model/Item}
     */
    Item,

    /**
     * The MetricAttribution model constructor.
     * @property {module:model/MetricAttribution}
     */
    MetricAttribution,

    /**
     * The PutEventsRequest model constructor.
     * @property {module:model/PutEventsRequest}
     */
    PutEventsRequest,

    /**
     * The PutItemsRequest model constructor.
     * @property {module:model/PutItemsRequest}
     */
    PutItemsRequest,

    /**
     * The PutUsersRequest model constructor.
     * @property {module:model/PutUsersRequest}
     */
    PutUsersRequest,

    /**
     * The User model constructor.
     * @property {module:model/User}
     */
    User,

    /**
    * The DefaultApi service constructor.
    * @property {module:api/DefaultApi}
    */
    DefaultApi
};
