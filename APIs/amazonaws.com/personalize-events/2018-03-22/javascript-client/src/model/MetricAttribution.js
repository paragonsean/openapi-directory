/**
 * Amazon Personalize Events
 * Amazon Personalize can consume real-time user event data, such as <i>stream</i> or <i>click</i> data, and use it for model training either alone or combined with historical data. For more information see <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/recording-events.html\">Recording Events</a>.
 *
 * The version of the OpenAPI document: 2018-03-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MetricAttribution model module.
 * @module model/MetricAttribution
 * @version 2018-03-22
 */
class MetricAttribution {
    /**
     * Constructs a new <code>MetricAttribution</code>.
     * Contains information about a metric attribution associated with an event. For more information about metric attributions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/personalize/latest/dg/measuring-recommendation-impact.html\&quot;&gt;Measuring impact of recommendations&lt;/a&gt;.
     * @alias module:model/MetricAttribution
     * @param eventAttributionSource {String} 
     */
    constructor(eventAttributionSource) { 
        
        MetricAttribution.initialize(this, eventAttributionSource);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, eventAttributionSource) { 
        obj['eventAttributionSource'] = eventAttributionSource;
    }

    /**
     * Constructs a <code>MetricAttribution</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetricAttribution} obj Optional instance to populate.
     * @return {module:model/MetricAttribution} The populated <code>MetricAttribution</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetricAttribution();

            if (data.hasOwnProperty('eventAttributionSource')) {
                obj['eventAttributionSource'] = ApiClient.convertToType(data['eventAttributionSource'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetricAttribution</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetricAttribution</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MetricAttribution.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `eventAttributionSource`
        if (data['eventAttributionSource']) { // data not null
          String.validateJSON(data['eventAttributionSource']);
        }

        return true;
    }


}

MetricAttribution.RequiredProperties = ["eventAttributionSource"];

/**
 * @member {String} eventAttributionSource
 */
MetricAttribution.prototype['eventAttributionSource'] = undefined;






export default MetricAttribution;

