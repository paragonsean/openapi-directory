/**
 * Amazon Personalize Events
 * Amazon Personalize can consume real-time user event data, such as <i>stream</i> or <i>click</i> data, and use it for model training either alone or combined with historical data. For more information see <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/recording-events.html\">Recording Events</a>.
 *
 * The version of the OpenAPI document: 2018-03-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventMetricAttribution from './EventMetricAttribution';

/**
 * The Event model module.
 * @module model/Event
 * @version 2018-03-22
 */
class Event {
    /**
     * Constructs a new <code>Event</code>.
     * Represents user interaction event information sent using the &lt;code&gt;PutEvents&lt;/code&gt; API.
     * @alias module:model/Event
     * @param eventType {String} 
     * @param sentAt {Date} 
     */
    constructor(eventType, sentAt) { 
        
        Event.initialize(this, eventType, sentAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, eventType, sentAt) { 
        obj['eventType'] = eventType;
        obj['sentAt'] = sentAt;
    }

    /**
     * Constructs a <code>Event</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Event} obj Optional instance to populate.
     * @return {module:model/Event} The populated <code>Event</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Event();

            if (data.hasOwnProperty('eventId')) {
                obj['eventId'] = ApiClient.convertToType(data['eventId'], 'String');
            }
            if (data.hasOwnProperty('eventType')) {
                obj['eventType'] = ApiClient.convertToType(data['eventType'], 'String');
            }
            if (data.hasOwnProperty('eventValue')) {
                obj['eventValue'] = ApiClient.convertToType(data['eventValue'], 'Number');
            }
            if (data.hasOwnProperty('itemId')) {
                obj['itemId'] = ApiClient.convertToType(data['itemId'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], Object);
            }
            if (data.hasOwnProperty('sentAt')) {
                obj['sentAt'] = ApiClient.convertToType(data['sentAt'], 'Date');
            }
            if (data.hasOwnProperty('recommendationId')) {
                obj['recommendationId'] = ApiClient.convertToType(data['recommendationId'], 'String');
            }
            if (data.hasOwnProperty('impression')) {
                obj['impression'] = ApiClient.convertToType(data['impression'], Array);
            }
            if (data.hasOwnProperty('metricAttribution')) {
                obj['metricAttribution'] = EventMetricAttribution.constructFromObject(data['metricAttribution']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Event</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Event</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Event.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `eventId`
        if (data['eventId']) { // data not null
          String.validateJSON(data['eventId']);
        }
        // validate the optional field `eventType`
        if (data['eventType']) { // data not null
          String.validateJSON(data['eventType']);
        }
        // validate the optional field `eventValue`
        if (data['eventValue']) { // data not null
          Number.validateJSON(data['eventValue']);
        }
        // validate the optional field `itemId`
        if (data['itemId']) { // data not null
          String.validateJSON(data['itemId']);
        }
        // validate the optional field `sentAt`
        if (data['sentAt']) { // data not null
          Date.validateJSON(data['sentAt']);
        }
        // validate the optional field `recommendationId`
        if (data['recommendationId']) { // data not null
          String.validateJSON(data['recommendationId']);
        }
        // validate the optional field `impression`
        if (data['impression']) { // data not null
          Array.validateJSON(data['impression']);
        }
        // validate the optional field `metricAttribution`
        if (data['metricAttribution']) { // data not null
          EventMetricAttribution.validateJSON(data['metricAttribution']);
        }

        return true;
    }


}

Event.RequiredProperties = ["eventType", "sentAt"];

/**
 * @member {String} eventId
 */
Event.prototype['eventId'] = undefined;

/**
 * @member {String} eventType
 */
Event.prototype['eventType'] = undefined;

/**
 * @member {Number} eventValue
 */
Event.prototype['eventValue'] = undefined;

/**
 * @member {String} itemId
 */
Event.prototype['itemId'] = undefined;

/**
 * <p>A string map of event-specific data that you might choose to record. For example, if a user rates a movie on your site, other than movie ID (<code>itemId</code>) and rating (<code>eventValue</code>) , you might also send the number of movie ratings made by the user.</p> <p>Each item in the map consists of a key-value pair. For example,</p> <p> <code>{\"numberOfRatings\": \"12\"}</code> </p> <p>The keys use camel case names that match the fields in the Interactions schema. In the above example, the <code>numberOfRatings</code> would match the 'NUMBER_OF_RATINGS' field defined in the Interactions schema.</p>
 * @member {Object} properties
 */
Event.prototype['properties'] = undefined;

/**
 * @member {Date} sentAt
 */
Event.prototype['sentAt'] = undefined;

/**
 * @member {String} recommendationId
 */
Event.prototype['recommendationId'] = undefined;

/**
 * @member {Array} impression
 */
Event.prototype['impression'] = undefined;

/**
 * @member {module:model/EventMetricAttribution} metricAttribution
 */
Event.prototype['metricAttribution'] = undefined;






export default Event;

