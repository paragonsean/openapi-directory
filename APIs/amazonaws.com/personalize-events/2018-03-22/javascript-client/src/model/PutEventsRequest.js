/**
 * Amazon Personalize Events
 * Amazon Personalize can consume real-time user event data, such as <i>stream</i> or <i>click</i> data, and use it for model training either alone or combined with historical data. For more information see <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/recording-events.html\">Recording Events</a>.
 *
 * The version of the OpenAPI document: 2018-03-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Event from './Event';

/**
 * The PutEventsRequest model module.
 * @module model/PutEventsRequest
 * @version 2018-03-22
 */
class PutEventsRequest {
    /**
     * Constructs a new <code>PutEventsRequest</code>.
     * @alias module:model/PutEventsRequest
     * @param trackingId {String} The tracking ID for the event. The ID is generated by a call to the <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/API_CreateEventTracker.html\">CreateEventTracker</a> API.
     * @param sessionId {String} The session ID associated with the user's visit. Your application generates the sessionId when a user first visits your website or uses your application. Amazon Personalize uses the sessionId to associate events with the user before they log in. For more information, see <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/recording-events.html\">Recording Events</a>.
     * @param eventList {Array.<module:model/Event>} A list of event data from the session.
     */
    constructor(trackingId, sessionId, eventList) { 
        
        PutEventsRequest.initialize(this, trackingId, sessionId, eventList);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, trackingId, sessionId, eventList) { 
        obj['trackingId'] = trackingId;
        obj['sessionId'] = sessionId;
        obj['eventList'] = eventList;
    }

    /**
     * Constructs a <code>PutEventsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutEventsRequest} obj Optional instance to populate.
     * @return {module:model/PutEventsRequest} The populated <code>PutEventsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutEventsRequest();

            if (data.hasOwnProperty('trackingId')) {
                obj['trackingId'] = ApiClient.convertToType(data['trackingId'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
            if (data.hasOwnProperty('sessionId')) {
                obj['sessionId'] = ApiClient.convertToType(data['sessionId'], 'String');
            }
            if (data.hasOwnProperty('eventList')) {
                obj['eventList'] = ApiClient.convertToType(data['eventList'], [Event]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutEventsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutEventsRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PutEventsRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['trackingId'] && !(typeof data['trackingId'] === 'string' || data['trackingId'] instanceof String)) {
            throw new Error("Expected the field `trackingId` to be a primitive type in the JSON string but got " + data['trackingId']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }
        // ensure the json data is a string
        if (data['sessionId'] && !(typeof data['sessionId'] === 'string' || data['sessionId'] instanceof String)) {
            throw new Error("Expected the field `sessionId` to be a primitive type in the JSON string but got " + data['sessionId']);
        }
        if (data['eventList']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['eventList'])) {
                throw new Error("Expected the field `eventList` to be an array in the JSON data but got " + data['eventList']);
            }
            // validate the optional field `eventList` (array)
            for (const item of data['eventList']) {
                Event.validateJSON(item);
            };
        }

        return true;
    }


}

PutEventsRequest.RequiredProperties = ["trackingId", "sessionId", "eventList"];

/**
 * The tracking ID for the event. The ID is generated by a call to the <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/API_CreateEventTracker.html\">CreateEventTracker</a> API.
 * @member {String} trackingId
 */
PutEventsRequest.prototype['trackingId'] = undefined;

/**
 * The user associated with the event.
 * @member {String} userId
 */
PutEventsRequest.prototype['userId'] = undefined;

/**
 * The session ID associated with the user's visit. Your application generates the sessionId when a user first visits your website or uses your application. Amazon Personalize uses the sessionId to associate events with the user before they log in. For more information, see <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/recording-events.html\">Recording Events</a>.
 * @member {String} sessionId
 */
PutEventsRequest.prototype['sessionId'] = undefined;

/**
 * A list of event data from the session.
 * @member {Array.<module:model/Event>} eventList
 */
PutEventsRequest.prototype['eventList'] = undefined;






export default PutEventsRequest;

