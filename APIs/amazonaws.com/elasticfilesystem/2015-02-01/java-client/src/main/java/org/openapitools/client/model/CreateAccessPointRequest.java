/*
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateAccessPointRequestPosixUser;
import org.openapitools.client.model.CreateAccessPointRequestRootDirectory;
import org.openapitools.client.model.Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAccessPointRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:27.318831-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAccessPointRequest {
  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "ClientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILE_SYSTEM_ID = "FileSystemId";
  @SerializedName(SERIALIZED_NAME_FILE_SYSTEM_ID)
  private String fileSystemId;

  public static final String SERIALIZED_NAME_POSIX_USER = "PosixUser";
  @SerializedName(SERIALIZED_NAME_POSIX_USER)
  private CreateAccessPointRequestPosixUser posixUser;

  public static final String SERIALIZED_NAME_ROOT_DIRECTORY = "RootDirectory";
  @SerializedName(SERIALIZED_NAME_ROOT_DIRECTORY)
  private CreateAccessPointRequestRootDirectory rootDirectory;

  public CreateAccessPointRequest() {
  }

  public CreateAccessPointRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * A string of up to 64 ASCII characters that Amazon EFS uses to ensure idempotent creation.
   * @return clientToken
   */
  @javax.annotation.Nonnull
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public CreateAccessPointRequest tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public CreateAccessPointRequest addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Creates tags associated with the access point. Each tag is a key-value pair, each key must be unique. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\&quot;&gt;Tagging Amazon Web Services resources&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference Guide&lt;/i&gt;.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  public CreateAccessPointRequest fileSystemId(String fileSystemId) {
    this.fileSystemId = fileSystemId;
    return this;
  }

  /**
   * The ID of the EFS file system that the access point provides access to.
   * @return fileSystemId
   */
  @javax.annotation.Nonnull
  public String getFileSystemId() {
    return fileSystemId;
  }

  public void setFileSystemId(String fileSystemId) {
    this.fileSystemId = fileSystemId;
  }


  public CreateAccessPointRequest posixUser(CreateAccessPointRequestPosixUser posixUser) {
    this.posixUser = posixUser;
    return this;
  }

  /**
   * Get posixUser
   * @return posixUser
   */
  @javax.annotation.Nullable
  public CreateAccessPointRequestPosixUser getPosixUser() {
    return posixUser;
  }

  public void setPosixUser(CreateAccessPointRequestPosixUser posixUser) {
    this.posixUser = posixUser;
  }


  public CreateAccessPointRequest rootDirectory(CreateAccessPointRequestRootDirectory rootDirectory) {
    this.rootDirectory = rootDirectory;
    return this;
  }

  /**
   * Get rootDirectory
   * @return rootDirectory
   */
  @javax.annotation.Nullable
  public CreateAccessPointRequestRootDirectory getRootDirectory() {
    return rootDirectory;
  }

  public void setRootDirectory(CreateAccessPointRequestRootDirectory rootDirectory) {
    this.rootDirectory = rootDirectory;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAccessPointRequest createAccessPointRequest = (CreateAccessPointRequest) o;
    return Objects.equals(this.clientToken, createAccessPointRequest.clientToken) &&
        Objects.equals(this.tags, createAccessPointRequest.tags) &&
        Objects.equals(this.fileSystemId, createAccessPointRequest.fileSystemId) &&
        Objects.equals(this.posixUser, createAccessPointRequest.posixUser) &&
        Objects.equals(this.rootDirectory, createAccessPointRequest.rootDirectory);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientToken, tags, fileSystemId, posixUser, rootDirectory);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAccessPointRequest {\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    fileSystemId: ").append(toIndentedString(fileSystemId)).append("\n");
    sb.append("    posixUser: ").append(toIndentedString(posixUser)).append("\n");
    sb.append("    rootDirectory: ").append(toIndentedString(rootDirectory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ClientToken");
    openapiFields.add("Tags");
    openapiFields.add("FileSystemId");
    openapiFields.add("PosixUser");
    openapiFields.add("RootDirectory");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ClientToken");
    openapiRequiredFields.add("FileSystemId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAccessPointRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAccessPointRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAccessPointRequest is not found in the empty JSON string", CreateAccessPointRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAccessPointRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAccessPointRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAccessPointRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ClientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientToken").toString()));
      }
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("Tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Tags` to be an array in the JSON string but got `%s`", jsonObj.get("Tags").toString()));
          }

          // validate the optional field `Tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      if (!jsonObj.get("FileSystemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FileSystemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FileSystemId").toString()));
      }
      // validate the optional field `PosixUser`
      if (jsonObj.get("PosixUser") != null && !jsonObj.get("PosixUser").isJsonNull()) {
        CreateAccessPointRequestPosixUser.validateJsonElement(jsonObj.get("PosixUser"));
      }
      // validate the optional field `RootDirectory`
      if (jsonObj.get("RootDirectory") != null && !jsonObj.get("RootDirectory").isJsonNull()) {
        CreateAccessPointRequestRootDirectory.validateJsonElement(jsonObj.get("RootDirectory"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAccessPointRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAccessPointRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAccessPointRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAccessPointRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAccessPointRequest>() {
           @Override
           public void write(JsonWriter out, CreateAccessPointRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAccessPointRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAccessPointRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAccessPointRequest
   * @throws IOException if the JSON string is invalid with respect to CreateAccessPointRequest
   */
  public static CreateAccessPointRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAccessPointRequest.class);
  }

  /**
   * Convert an instance of CreateAccessPointRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

