/*
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FileSystemDescriptionSizeInBytes;
import org.openapitools.client.model.LifeCycleState;
import org.openapitools.client.model.PerformanceMode;
import org.openapitools.client.model.ThroughputMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A description of the file system.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:27.318831-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FileSystemDescription {
  public static final String SERIALIZED_NAME_OWNER_ID = "OwnerId";
  @SerializedName(SERIALIZED_NAME_OWNER_ID)
  private String ownerId;

  public static final String SERIALIZED_NAME_CREATION_TOKEN = "CreationToken";
  @SerializedName(SERIALIZED_NAME_CREATION_TOKEN)
  private String creationToken;

  public static final String SERIALIZED_NAME_FILE_SYSTEM_ID = "FileSystemId";
  @SerializedName(SERIALIZED_NAME_FILE_SYSTEM_ID)
  private String fileSystemId;

  public static final String SERIALIZED_NAME_FILE_SYSTEM_ARN = "FileSystemArn";
  @SerializedName(SERIALIZED_NAME_FILE_SYSTEM_ARN)
  private String fileSystemArn;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_LIFE_CYCLE_STATE = "LifeCycleState";
  @SerializedName(SERIALIZED_NAME_LIFE_CYCLE_STATE)
  private LifeCycleState lifeCycleState;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBER_OF_MOUNT_TARGETS = "NumberOfMountTargets";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_MOUNT_TARGETS)
  private Integer numberOfMountTargets;

  public static final String SERIALIZED_NAME_SIZE_IN_BYTES = "SizeInBytes";
  @SerializedName(SERIALIZED_NAME_SIZE_IN_BYTES)
  private FileSystemDescriptionSizeInBytes sizeInBytes;

  public static final String SERIALIZED_NAME_PERFORMANCE_MODE = "PerformanceMode";
  @SerializedName(SERIALIZED_NAME_PERFORMANCE_MODE)
  private PerformanceMode performanceMode;

  public static final String SERIALIZED_NAME_ENCRYPTED = "Encrypted";
  @SerializedName(SERIALIZED_NAME_ENCRYPTED)
  private Boolean encrypted;

  public static final String SERIALIZED_NAME_KMS_KEY_ID = "KmsKeyId";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_ID)
  private String kmsKeyId;

  public static final String SERIALIZED_NAME_THROUGHPUT_MODE = "ThroughputMode";
  @SerializedName(SERIALIZED_NAME_THROUGHPUT_MODE)
  private ThroughputMode throughputMode;

  public static final String SERIALIZED_NAME_PROVISIONED_THROUGHPUT_IN_MIBPS = "ProvisionedThroughputInMibps";
  @SerializedName(SERIALIZED_NAME_PROVISIONED_THROUGHPUT_IN_MIBPS)
  private Double provisionedThroughputInMibps;

  public static final String SERIALIZED_NAME_AVAILABILITY_ZONE_NAME = "AvailabilityZoneName";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_ZONE_NAME)
  private String availabilityZoneName;

  public static final String SERIALIZED_NAME_AVAILABILITY_ZONE_ID = "AvailabilityZoneId";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_ZONE_ID)
  private String availabilityZoneId;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public FileSystemDescription() {
  }

  public FileSystemDescription ownerId(String ownerId) {
    this.ownerId = ownerId;
    return this;
  }

  /**
   * Get ownerId
   * @return ownerId
   */
  @javax.annotation.Nonnull
  public String getOwnerId() {
    return ownerId;
  }

  public void setOwnerId(String ownerId) {
    this.ownerId = ownerId;
  }


  public FileSystemDescription creationToken(String creationToken) {
    this.creationToken = creationToken;
    return this;
  }

  /**
   * Get creationToken
   * @return creationToken
   */
  @javax.annotation.Nonnull
  public String getCreationToken() {
    return creationToken;
  }

  public void setCreationToken(String creationToken) {
    this.creationToken = creationToken;
  }


  public FileSystemDescription fileSystemId(String fileSystemId) {
    this.fileSystemId = fileSystemId;
    return this;
  }

  /**
   * Get fileSystemId
   * @return fileSystemId
   */
  @javax.annotation.Nonnull
  public String getFileSystemId() {
    return fileSystemId;
  }

  public void setFileSystemId(String fileSystemId) {
    this.fileSystemId = fileSystemId;
  }


  public FileSystemDescription fileSystemArn(String fileSystemArn) {
    this.fileSystemArn = fileSystemArn;
    return this;
  }

  /**
   * Get fileSystemArn
   * @return fileSystemArn
   */
  @javax.annotation.Nullable
  public String getFileSystemArn() {
    return fileSystemArn;
  }

  public void setFileSystemArn(String fileSystemArn) {
    this.fileSystemArn = fileSystemArn;
  }


  public FileSystemDescription creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public FileSystemDescription lifeCycleState(LifeCycleState lifeCycleState) {
    this.lifeCycleState = lifeCycleState;
    return this;
  }

  /**
   * Get lifeCycleState
   * @return lifeCycleState
   */
  @javax.annotation.Nonnull
  public LifeCycleState getLifeCycleState() {
    return lifeCycleState;
  }

  public void setLifeCycleState(LifeCycleState lifeCycleState) {
    this.lifeCycleState = lifeCycleState;
  }


  public FileSystemDescription name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public FileSystemDescription numberOfMountTargets(Integer numberOfMountTargets) {
    this.numberOfMountTargets = numberOfMountTargets;
    return this;
  }

  /**
   * Get numberOfMountTargets
   * @return numberOfMountTargets
   */
  @javax.annotation.Nonnull
  public Integer getNumberOfMountTargets() {
    return numberOfMountTargets;
  }

  public void setNumberOfMountTargets(Integer numberOfMountTargets) {
    this.numberOfMountTargets = numberOfMountTargets;
  }


  public FileSystemDescription sizeInBytes(FileSystemDescriptionSizeInBytes sizeInBytes) {
    this.sizeInBytes = sizeInBytes;
    return this;
  }

  /**
   * Get sizeInBytes
   * @return sizeInBytes
   */
  @javax.annotation.Nonnull
  public FileSystemDescriptionSizeInBytes getSizeInBytes() {
    return sizeInBytes;
  }

  public void setSizeInBytes(FileSystemDescriptionSizeInBytes sizeInBytes) {
    this.sizeInBytes = sizeInBytes;
  }


  public FileSystemDescription performanceMode(PerformanceMode performanceMode) {
    this.performanceMode = performanceMode;
    return this;
  }

  /**
   * Get performanceMode
   * @return performanceMode
   */
  @javax.annotation.Nonnull
  public PerformanceMode getPerformanceMode() {
    return performanceMode;
  }

  public void setPerformanceMode(PerformanceMode performanceMode) {
    this.performanceMode = performanceMode;
  }


  public FileSystemDescription encrypted(Boolean encrypted) {
    this.encrypted = encrypted;
    return this;
  }

  /**
   * Get encrypted
   * @return encrypted
   */
  @javax.annotation.Nullable
  public Boolean getEncrypted() {
    return encrypted;
  }

  public void setEncrypted(Boolean encrypted) {
    this.encrypted = encrypted;
  }


  public FileSystemDescription kmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
    return this;
  }

  /**
   * Get kmsKeyId
   * @return kmsKeyId
   */
  @javax.annotation.Nullable
  public String getKmsKeyId() {
    return kmsKeyId;
  }

  public void setKmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
  }


  public FileSystemDescription throughputMode(ThroughputMode throughputMode) {
    this.throughputMode = throughputMode;
    return this;
  }

  /**
   * Get throughputMode
   * @return throughputMode
   */
  @javax.annotation.Nullable
  public ThroughputMode getThroughputMode() {
    return throughputMode;
  }

  public void setThroughputMode(ThroughputMode throughputMode) {
    this.throughputMode = throughputMode;
  }


  public FileSystemDescription provisionedThroughputInMibps(Double provisionedThroughputInMibps) {
    this.provisionedThroughputInMibps = provisionedThroughputInMibps;
    return this;
  }

  /**
   * Get provisionedThroughputInMibps
   * @return provisionedThroughputInMibps
   */
  @javax.annotation.Nullable
  public Double getProvisionedThroughputInMibps() {
    return provisionedThroughputInMibps;
  }

  public void setProvisionedThroughputInMibps(Double provisionedThroughputInMibps) {
    this.provisionedThroughputInMibps = provisionedThroughputInMibps;
  }


  public FileSystemDescription availabilityZoneName(String availabilityZoneName) {
    this.availabilityZoneName = availabilityZoneName;
    return this;
  }

  /**
   * Get availabilityZoneName
   * @return availabilityZoneName
   */
  @javax.annotation.Nullable
  public String getAvailabilityZoneName() {
    return availabilityZoneName;
  }

  public void setAvailabilityZoneName(String availabilityZoneName) {
    this.availabilityZoneName = availabilityZoneName;
  }


  public FileSystemDescription availabilityZoneId(String availabilityZoneId) {
    this.availabilityZoneId = availabilityZoneId;
    return this;
  }

  /**
   * Get availabilityZoneId
   * @return availabilityZoneId
   */
  @javax.annotation.Nullable
  public String getAvailabilityZoneId() {
    return availabilityZoneId;
  }

  public void setAvailabilityZoneId(String availabilityZoneId) {
    this.availabilityZoneId = availabilityZoneId;
  }


  public FileSystemDescription tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nonnull
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileSystemDescription fileSystemDescription = (FileSystemDescription) o;
    return Objects.equals(this.ownerId, fileSystemDescription.ownerId) &&
        Objects.equals(this.creationToken, fileSystemDescription.creationToken) &&
        Objects.equals(this.fileSystemId, fileSystemDescription.fileSystemId) &&
        Objects.equals(this.fileSystemArn, fileSystemDescription.fileSystemArn) &&
        Objects.equals(this.creationTime, fileSystemDescription.creationTime) &&
        Objects.equals(this.lifeCycleState, fileSystemDescription.lifeCycleState) &&
        Objects.equals(this.name, fileSystemDescription.name) &&
        Objects.equals(this.numberOfMountTargets, fileSystemDescription.numberOfMountTargets) &&
        Objects.equals(this.sizeInBytes, fileSystemDescription.sizeInBytes) &&
        Objects.equals(this.performanceMode, fileSystemDescription.performanceMode) &&
        Objects.equals(this.encrypted, fileSystemDescription.encrypted) &&
        Objects.equals(this.kmsKeyId, fileSystemDescription.kmsKeyId) &&
        Objects.equals(this.throughputMode, fileSystemDescription.throughputMode) &&
        Objects.equals(this.provisionedThroughputInMibps, fileSystemDescription.provisionedThroughputInMibps) &&
        Objects.equals(this.availabilityZoneName, fileSystemDescription.availabilityZoneName) &&
        Objects.equals(this.availabilityZoneId, fileSystemDescription.availabilityZoneId) &&
        Objects.equals(this.tags, fileSystemDescription.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ownerId, creationToken, fileSystemId, fileSystemArn, creationTime, lifeCycleState, name, numberOfMountTargets, sizeInBytes, performanceMode, encrypted, kmsKeyId, throughputMode, provisionedThroughputInMibps, availabilityZoneName, availabilityZoneId, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileSystemDescription {\n");
    sb.append("    ownerId: ").append(toIndentedString(ownerId)).append("\n");
    sb.append("    creationToken: ").append(toIndentedString(creationToken)).append("\n");
    sb.append("    fileSystemId: ").append(toIndentedString(fileSystemId)).append("\n");
    sb.append("    fileSystemArn: ").append(toIndentedString(fileSystemArn)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    lifeCycleState: ").append(toIndentedString(lifeCycleState)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    numberOfMountTargets: ").append(toIndentedString(numberOfMountTargets)).append("\n");
    sb.append("    sizeInBytes: ").append(toIndentedString(sizeInBytes)).append("\n");
    sb.append("    performanceMode: ").append(toIndentedString(performanceMode)).append("\n");
    sb.append("    encrypted: ").append(toIndentedString(encrypted)).append("\n");
    sb.append("    kmsKeyId: ").append(toIndentedString(kmsKeyId)).append("\n");
    sb.append("    throughputMode: ").append(toIndentedString(throughputMode)).append("\n");
    sb.append("    provisionedThroughputInMibps: ").append(toIndentedString(provisionedThroughputInMibps)).append("\n");
    sb.append("    availabilityZoneName: ").append(toIndentedString(availabilityZoneName)).append("\n");
    sb.append("    availabilityZoneId: ").append(toIndentedString(availabilityZoneId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("OwnerId");
    openapiFields.add("CreationToken");
    openapiFields.add("FileSystemId");
    openapiFields.add("FileSystemArn");
    openapiFields.add("CreationTime");
    openapiFields.add("LifeCycleState");
    openapiFields.add("Name");
    openapiFields.add("NumberOfMountTargets");
    openapiFields.add("SizeInBytes");
    openapiFields.add("PerformanceMode");
    openapiFields.add("Encrypted");
    openapiFields.add("KmsKeyId");
    openapiFields.add("ThroughputMode");
    openapiFields.add("ProvisionedThroughputInMibps");
    openapiFields.add("AvailabilityZoneName");
    openapiFields.add("AvailabilityZoneId");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("OwnerId");
    openapiRequiredFields.add("CreationToken");
    openapiRequiredFields.add("FileSystemId");
    openapiRequiredFields.add("CreationTime");
    openapiRequiredFields.add("LifeCycleState");
    openapiRequiredFields.add("NumberOfMountTargets");
    openapiRequiredFields.add("SizeInBytes");
    openapiRequiredFields.add("PerformanceMode");
    openapiRequiredFields.add("Tags");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FileSystemDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FileSystemDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FileSystemDescription is not found in the empty JSON string", FileSystemDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FileSystemDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FileSystemDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FileSystemDescription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `OwnerId`
      String.validateJsonElement(jsonObj.get("OwnerId"));
      // validate the required field `CreationToken`
      String.validateJsonElement(jsonObj.get("CreationToken"));
      // validate the required field `FileSystemId`
      String.validateJsonElement(jsonObj.get("FileSystemId"));
      // validate the optional field `FileSystemArn`
      if (jsonObj.get("FileSystemArn") != null && !jsonObj.get("FileSystemArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FileSystemArn"));
      }
      // validate the required field `CreationTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      // validate the required field `LifeCycleState`
      LifeCycleState.validateJsonElement(jsonObj.get("LifeCycleState"));
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the required field `NumberOfMountTargets`
      Integer.validateJsonElement(jsonObj.get("NumberOfMountTargets"));
      // validate the required field `SizeInBytes`
      FileSystemDescriptionSizeInBytes.validateJsonElement(jsonObj.get("SizeInBytes"));
      // validate the required field `PerformanceMode`
      PerformanceMode.validateJsonElement(jsonObj.get("PerformanceMode"));
      // validate the optional field `Encrypted`
      if (jsonObj.get("Encrypted") != null && !jsonObj.get("Encrypted").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Encrypted"));
      }
      // validate the optional field `KmsKeyId`
      if (jsonObj.get("KmsKeyId") != null && !jsonObj.get("KmsKeyId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("KmsKeyId"));
      }
      // validate the optional field `ThroughputMode`
      if (jsonObj.get("ThroughputMode") != null && !jsonObj.get("ThroughputMode").isJsonNull()) {
        ThroughputMode.validateJsonElement(jsonObj.get("ThroughputMode"));
      }
      // validate the optional field `ProvisionedThroughputInMibps`
      if (jsonObj.get("ProvisionedThroughputInMibps") != null && !jsonObj.get("ProvisionedThroughputInMibps").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("ProvisionedThroughputInMibps"));
      }
      // validate the optional field `AvailabilityZoneName`
      if (jsonObj.get("AvailabilityZoneName") != null && !jsonObj.get("AvailabilityZoneName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AvailabilityZoneName"));
      }
      // validate the optional field `AvailabilityZoneId`
      if (jsonObj.get("AvailabilityZoneId") != null && !jsonObj.get("AvailabilityZoneId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AvailabilityZoneId"));
      }
      // validate the required field `Tags`
      List.validateJsonElement(jsonObj.get("Tags"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FileSystemDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FileSystemDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FileSystemDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FileSystemDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<FileSystemDescription>() {
           @Override
           public void write(JsonWriter out, FileSystemDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FileSystemDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FileSystemDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FileSystemDescription
   * @throws IOException if the JSON string is invalid with respect to FileSystemDescription
   */
  public static FileSystemDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FileSystemDescription.class);
  }

  /**
   * Convert an instance of FileSystemDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

