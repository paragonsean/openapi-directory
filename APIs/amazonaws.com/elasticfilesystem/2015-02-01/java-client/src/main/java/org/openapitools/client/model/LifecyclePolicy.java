/*
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TransitionToIARules;
import org.openapitools.client.model.TransitionToPrimaryStorageClassRules;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Describes a policy used by EFS lifecycle management and EFS Intelligent-Tiering that specifies when to transition files into and out of the file system&#39;s Infrequent Access (IA) storage class. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/efs/latest/ug/lifecycle-management-efs.html\&quot;&gt;EFS Intelligent‚ÄêTiering and EFS Lifecycle Management&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;When using the &lt;code&gt;put-lifecycle-configuration&lt;/code&gt; CLI command or the &lt;code&gt;PutLifecycleConfiguration&lt;/code&gt; API action, Amazon EFS requires that each &lt;code&gt;LifecyclePolicy&lt;/code&gt; object have only a single transition. This means that in a request body, &lt;code&gt;LifecyclePolicies&lt;/code&gt; must be structured as an array of &lt;code&gt;LifecyclePolicy&lt;/code&gt; objects, one object for each transition, &lt;code&gt;TransitionToIA&lt;/code&gt;, &lt;code&gt;TransitionToPrimaryStorageClass&lt;/code&gt;. For more information, see the request examples in &lt;a&gt;PutLifecycleConfiguration&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:27.318831-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LifecyclePolicy {
  public static final String SERIALIZED_NAME_TRANSITION_TO_I_A = "TransitionToIA";
  @SerializedName(SERIALIZED_NAME_TRANSITION_TO_I_A)
  private TransitionToIARules transitionToIA;

  public static final String SERIALIZED_NAME_TRANSITION_TO_PRIMARY_STORAGE_CLASS = "TransitionToPrimaryStorageClass";
  @SerializedName(SERIALIZED_NAME_TRANSITION_TO_PRIMARY_STORAGE_CLASS)
  private TransitionToPrimaryStorageClassRules transitionToPrimaryStorageClass;

  public LifecyclePolicy() {
  }

  public LifecyclePolicy transitionToIA(TransitionToIARules transitionToIA) {
    this.transitionToIA = transitionToIA;
    return this;
  }

  /**
   * Get transitionToIA
   * @return transitionToIA
   */
  @javax.annotation.Nullable
  public TransitionToIARules getTransitionToIA() {
    return transitionToIA;
  }

  public void setTransitionToIA(TransitionToIARules transitionToIA) {
    this.transitionToIA = transitionToIA;
  }


  public LifecyclePolicy transitionToPrimaryStorageClass(TransitionToPrimaryStorageClassRules transitionToPrimaryStorageClass) {
    this.transitionToPrimaryStorageClass = transitionToPrimaryStorageClass;
    return this;
  }

  /**
   * Get transitionToPrimaryStorageClass
   * @return transitionToPrimaryStorageClass
   */
  @javax.annotation.Nullable
  public TransitionToPrimaryStorageClassRules getTransitionToPrimaryStorageClass() {
    return transitionToPrimaryStorageClass;
  }

  public void setTransitionToPrimaryStorageClass(TransitionToPrimaryStorageClassRules transitionToPrimaryStorageClass) {
    this.transitionToPrimaryStorageClass = transitionToPrimaryStorageClass;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LifecyclePolicy lifecyclePolicy = (LifecyclePolicy) o;
    return Objects.equals(this.transitionToIA, lifecyclePolicy.transitionToIA) &&
        Objects.equals(this.transitionToPrimaryStorageClass, lifecyclePolicy.transitionToPrimaryStorageClass);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transitionToIA, transitionToPrimaryStorageClass);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LifecyclePolicy {\n");
    sb.append("    transitionToIA: ").append(toIndentedString(transitionToIA)).append("\n");
    sb.append("    transitionToPrimaryStorageClass: ").append(toIndentedString(transitionToPrimaryStorageClass)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TransitionToIA");
    openapiFields.add("TransitionToPrimaryStorageClass");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LifecyclePolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LifecyclePolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LifecyclePolicy is not found in the empty JSON string", LifecyclePolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LifecyclePolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LifecyclePolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `TransitionToIA`
      if (jsonObj.get("TransitionToIA") != null && !jsonObj.get("TransitionToIA").isJsonNull()) {
        TransitionToIARules.validateJsonElement(jsonObj.get("TransitionToIA"));
      }
      // validate the optional field `TransitionToPrimaryStorageClass`
      if (jsonObj.get("TransitionToPrimaryStorageClass") != null && !jsonObj.get("TransitionToPrimaryStorageClass").isJsonNull()) {
        TransitionToPrimaryStorageClassRules.validateJsonElement(jsonObj.get("TransitionToPrimaryStorageClass"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LifecyclePolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LifecyclePolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LifecyclePolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LifecyclePolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<LifecyclePolicy>() {
           @Override
           public void write(JsonWriter out, LifecyclePolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LifecyclePolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LifecyclePolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LifecyclePolicy
   * @throws IOException if the JSON string is invalid with respect to LifecyclePolicy
   */
  public static LifecyclePolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LifecyclePolicy.class);
  }

  /**
   * Convert an instance of LifecyclePolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

