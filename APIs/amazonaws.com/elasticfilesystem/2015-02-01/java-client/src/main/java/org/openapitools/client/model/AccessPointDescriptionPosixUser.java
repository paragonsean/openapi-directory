/*
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccessPointDescriptionPosixUser
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:27.318831-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccessPointDescriptionPosixUser {
  public static final String SERIALIZED_NAME_UID = "Uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private Integer uid;

  public static final String SERIALIZED_NAME_GID = "Gid";
  @SerializedName(SERIALIZED_NAME_GID)
  private Integer gid;

  public static final String SERIALIZED_NAME_SECONDARY_GIDS = "SecondaryGids";
  @SerializedName(SERIALIZED_NAME_SECONDARY_GIDS)
  private List secondaryGids;

  public AccessPointDescriptionPosixUser() {
  }

  public AccessPointDescriptionPosixUser uid(Integer uid) {
    this.uid = uid;
    return this;
  }

  /**
   * Get uid
   * @return uid
   */
  @javax.annotation.Nonnull
  public Integer getUid() {
    return uid;
  }

  public void setUid(Integer uid) {
    this.uid = uid;
  }


  public AccessPointDescriptionPosixUser gid(Integer gid) {
    this.gid = gid;
    return this;
  }

  /**
   * Get gid
   * @return gid
   */
  @javax.annotation.Nonnull
  public Integer getGid() {
    return gid;
  }

  public void setGid(Integer gid) {
    this.gid = gid;
  }


  public AccessPointDescriptionPosixUser secondaryGids(List secondaryGids) {
    this.secondaryGids = secondaryGids;
    return this;
  }

  /**
   * Get secondaryGids
   * @return secondaryGids
   */
  @javax.annotation.Nullable
  public List getSecondaryGids() {
    return secondaryGids;
  }

  public void setSecondaryGids(List secondaryGids) {
    this.secondaryGids = secondaryGids;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccessPointDescriptionPosixUser accessPointDescriptionPosixUser = (AccessPointDescriptionPosixUser) o;
    return Objects.equals(this.uid, accessPointDescriptionPosixUser.uid) &&
        Objects.equals(this.gid, accessPointDescriptionPosixUser.gid) &&
        Objects.equals(this.secondaryGids, accessPointDescriptionPosixUser.secondaryGids);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uid, gid, secondaryGids);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccessPointDescriptionPosixUser {\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    gid: ").append(toIndentedString(gid)).append("\n");
    sb.append("    secondaryGids: ").append(toIndentedString(secondaryGids)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Uid");
    openapiFields.add("Gid");
    openapiFields.add("SecondaryGids");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Uid");
    openapiRequiredFields.add("Gid");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccessPointDescriptionPosixUser
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccessPointDescriptionPosixUser.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccessPointDescriptionPosixUser is not found in the empty JSON string", AccessPointDescriptionPosixUser.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccessPointDescriptionPosixUser.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccessPointDescriptionPosixUser` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AccessPointDescriptionPosixUser.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Uid`
      Integer.validateJsonElement(jsonObj.get("Uid"));
      // validate the required field `Gid`
      Integer.validateJsonElement(jsonObj.get("Gid"));
      // validate the optional field `SecondaryGids`
      if (jsonObj.get("SecondaryGids") != null && !jsonObj.get("SecondaryGids").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SecondaryGids"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccessPointDescriptionPosixUser.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccessPointDescriptionPosixUser' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccessPointDescriptionPosixUser> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccessPointDescriptionPosixUser.class));

       return (TypeAdapter<T>) new TypeAdapter<AccessPointDescriptionPosixUser>() {
           @Override
           public void write(JsonWriter out, AccessPointDescriptionPosixUser value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccessPointDescriptionPosixUser read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccessPointDescriptionPosixUser given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccessPointDescriptionPosixUser
   * @throws IOException if the JSON string is invalid with respect to AccessPointDescriptionPosixUser
   */
  public static AccessPointDescriptionPosixUser fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccessPointDescriptionPosixUser.class);
  }

  /**
   * Convert an instance of AccessPointDescriptionPosixUser to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

