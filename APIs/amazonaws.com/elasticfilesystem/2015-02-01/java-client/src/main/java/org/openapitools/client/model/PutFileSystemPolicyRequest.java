/*
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutFileSystemPolicyRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:27.318831-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutFileSystemPolicyRequest {
  public static final String SERIALIZED_NAME_POLICY = "Policy";
  @SerializedName(SERIALIZED_NAME_POLICY)
  private String policy;

  public static final String SERIALIZED_NAME_BYPASS_POLICY_LOCKOUT_SAFETY_CHECK = "BypassPolicyLockoutSafetyCheck";
  @SerializedName(SERIALIZED_NAME_BYPASS_POLICY_LOCKOUT_SAFETY_CHECK)
  private Boolean bypassPolicyLockoutSafetyCheck;

  public PutFileSystemPolicyRequest() {
  }

  public PutFileSystemPolicyRequest policy(String policy) {
    this.policy = policy;
    return this;
  }

  /**
   * The &lt;code&gt;FileSystemPolicy&lt;/code&gt; that you&#39;re creating. Accepts a JSON formatted policy definition. EFS file system policies have a 20,000 character limit. To find out more about the elements that make up a file system policy, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/efs/latest/ug/access-control-overview.html#access-control-manage-access-intro-resource-policies\&quot;&gt;EFS Resource-based Policies&lt;/a&gt;. 
   * @return policy
   */
  @javax.annotation.Nonnull
  public String getPolicy() {
    return policy;
  }

  public void setPolicy(String policy) {
    this.policy = policy;
  }


  public PutFileSystemPolicyRequest bypassPolicyLockoutSafetyCheck(Boolean bypassPolicyLockoutSafetyCheck) {
    this.bypassPolicyLockoutSafetyCheck = bypassPolicyLockoutSafetyCheck;
    return this;
  }

  /**
   * (Optional) A boolean that specifies whether or not to bypass the &lt;code&gt;FileSystemPolicy&lt;/code&gt; lockout safety check. The lockout safety check determines whether the policy in the request will lock out, or prevent, the IAM principal that is making the request from making future &lt;code&gt;PutFileSystemPolicy&lt;/code&gt; requests on this file system. Set &lt;code&gt;BypassPolicyLockoutSafetyCheck&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt; only when you intend to prevent the IAM principal that is making the request from making subsequent &lt;code&gt;PutFileSystemPolicy&lt;/code&gt; requests on this file system. The default value is &lt;code&gt;False&lt;/code&gt;. 
   * @return bypassPolicyLockoutSafetyCheck
   */
  @javax.annotation.Nullable
  public Boolean getBypassPolicyLockoutSafetyCheck() {
    return bypassPolicyLockoutSafetyCheck;
  }

  public void setBypassPolicyLockoutSafetyCheck(Boolean bypassPolicyLockoutSafetyCheck) {
    this.bypassPolicyLockoutSafetyCheck = bypassPolicyLockoutSafetyCheck;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutFileSystemPolicyRequest putFileSystemPolicyRequest = (PutFileSystemPolicyRequest) o;
    return Objects.equals(this.policy, putFileSystemPolicyRequest.policy) &&
        Objects.equals(this.bypassPolicyLockoutSafetyCheck, putFileSystemPolicyRequest.bypassPolicyLockoutSafetyCheck);
  }

  @Override
  public int hashCode() {
    return Objects.hash(policy, bypassPolicyLockoutSafetyCheck);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutFileSystemPolicyRequest {\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    bypassPolicyLockoutSafetyCheck: ").append(toIndentedString(bypassPolicyLockoutSafetyCheck)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Policy");
    openapiFields.add("BypassPolicyLockoutSafetyCheck");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Policy");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutFileSystemPolicyRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutFileSystemPolicyRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutFileSystemPolicyRequest is not found in the empty JSON string", PutFileSystemPolicyRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutFileSystemPolicyRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutFileSystemPolicyRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PutFileSystemPolicyRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Policy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Policy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Policy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutFileSystemPolicyRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutFileSystemPolicyRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutFileSystemPolicyRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutFileSystemPolicyRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutFileSystemPolicyRequest>() {
           @Override
           public void write(JsonWriter out, PutFileSystemPolicyRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutFileSystemPolicyRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutFileSystemPolicyRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutFileSystemPolicyRequest
   * @throws IOException if the JSON string is invalid with respect to PutFileSystemPolicyRequest
   */
  public static PutFileSystemPolicyRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutFileSystemPolicyRequest.class);
  }

  /**
   * Convert an instance of PutFileSystemPolicyRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

