/*
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ResourceIdType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the resource type and its ID preference for the user&#39;s Amazon Web Services account, in the current Amazon Web Services Region.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:27.318831-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResourceIdPreference {
  public static final String SERIALIZED_NAME_RESOURCE_ID_TYPE = "ResourceIdType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID_TYPE)
  private ResourceIdType resourceIdType;

  public static final String SERIALIZED_NAME_RESOURCES = "Resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private List resources;

  public ResourceIdPreference() {
  }

  public ResourceIdPreference resourceIdType(ResourceIdType resourceIdType) {
    this.resourceIdType = resourceIdType;
    return this;
  }

  /**
   * Get resourceIdType
   * @return resourceIdType
   */
  @javax.annotation.Nullable
  public ResourceIdType getResourceIdType() {
    return resourceIdType;
  }

  public void setResourceIdType(ResourceIdType resourceIdType) {
    this.resourceIdType = resourceIdType;
  }


  public ResourceIdPreference resources(List resources) {
    this.resources = resources;
    return this;
  }

  /**
   * Get resources
   * @return resources
   */
  @javax.annotation.Nullable
  public List getResources() {
    return resources;
  }

  public void setResources(List resources) {
    this.resources = resources;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceIdPreference resourceIdPreference = (ResourceIdPreference) o;
    return Objects.equals(this.resourceIdType, resourceIdPreference.resourceIdType) &&
        Objects.equals(this.resources, resourceIdPreference.resources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resourceIdType, resources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceIdPreference {\n");
    sb.append("    resourceIdType: ").append(toIndentedString(resourceIdType)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ResourceIdType");
    openapiFields.add("Resources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResourceIdPreference
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResourceIdPreference.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResourceIdPreference is not found in the empty JSON string", ResourceIdPreference.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResourceIdPreference.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResourceIdPreference` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ResourceIdType`
      if (jsonObj.get("ResourceIdType") != null && !jsonObj.get("ResourceIdType").isJsonNull()) {
        ResourceIdType.validateJsonElement(jsonObj.get("ResourceIdType"));
      }
      // validate the optional field `Resources`
      if (jsonObj.get("Resources") != null && !jsonObj.get("Resources").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Resources"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResourceIdPreference.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResourceIdPreference' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResourceIdPreference> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResourceIdPreference.class));

       return (TypeAdapter<T>) new TypeAdapter<ResourceIdPreference>() {
           @Override
           public void write(JsonWriter out, ResourceIdPreference value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResourceIdPreference read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResourceIdPreference given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResourceIdPreference
   * @throws IOException if the JSON string is invalid with respect to ResourceIdPreference
   */
  public static ResourceIdPreference fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResourceIdPreference.class);
  }

  /**
   * Convert an instance of ResourceIdPreference to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

