/*
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LifecyclePolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutLifecycleConfigurationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:27.318831-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutLifecycleConfigurationRequest {
  public static final String SERIALIZED_NAME_LIFECYCLE_POLICIES = "LifecyclePolicies";
  @SerializedName(SERIALIZED_NAME_LIFECYCLE_POLICIES)
  private List<LifecyclePolicy> lifecyclePolicies = new ArrayList<>();

  public PutLifecycleConfigurationRequest() {
  }

  public PutLifecycleConfigurationRequest lifecyclePolicies(List<LifecyclePolicy> lifecyclePolicies) {
    this.lifecyclePolicies = lifecyclePolicies;
    return this;
  }

  public PutLifecycleConfigurationRequest addLifecyclePoliciesItem(LifecyclePolicy lifecyclePoliciesItem) {
    if (this.lifecyclePolicies == null) {
      this.lifecyclePolicies = new ArrayList<>();
    }
    this.lifecyclePolicies.add(lifecyclePoliciesItem);
    return this;
  }

  /**
   * &lt;p&gt;An array of &lt;code&gt;LifecyclePolicy&lt;/code&gt; objects that define the file system&#39;s &lt;code&gt;LifecycleConfiguration&lt;/code&gt; object. A &lt;code&gt;LifecycleConfiguration&lt;/code&gt; object informs EFS lifecycle management and EFS Intelligent-Tiering of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;When to move files in the file system from primary storage to the IA storage class.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When to move files that are in IA storage to primary storage.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;When using the &lt;code&gt;put-lifecycle-configuration&lt;/code&gt; CLI command or the &lt;code&gt;PutLifecycleConfiguration&lt;/code&gt; API action, Amazon EFS requires that each &lt;code&gt;LifecyclePolicy&lt;/code&gt; object have only a single transition. This means that in a request body, &lt;code&gt;LifecyclePolicies&lt;/code&gt; must be structured as an array of &lt;code&gt;LifecyclePolicy&lt;/code&gt; objects, one object for each transition, &lt;code&gt;TransitionToIA&lt;/code&gt;, &lt;code&gt;TransitionToPrimaryStorageClass&lt;/code&gt;. See the example requests in the following section for more information.&lt;/p&gt; &lt;/note&gt;
   * @return lifecyclePolicies
   */
  @javax.annotation.Nonnull
  public List<LifecyclePolicy> getLifecyclePolicies() {
    return lifecyclePolicies;
  }

  public void setLifecyclePolicies(List<LifecyclePolicy> lifecyclePolicies) {
    this.lifecyclePolicies = lifecyclePolicies;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutLifecycleConfigurationRequest putLifecycleConfigurationRequest = (PutLifecycleConfigurationRequest) o;
    return Objects.equals(this.lifecyclePolicies, putLifecycleConfigurationRequest.lifecyclePolicies);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lifecyclePolicies);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutLifecycleConfigurationRequest {\n");
    sb.append("    lifecyclePolicies: ").append(toIndentedString(lifecyclePolicies)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LifecyclePolicies");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("LifecyclePolicies");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutLifecycleConfigurationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutLifecycleConfigurationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutLifecycleConfigurationRequest is not found in the empty JSON string", PutLifecycleConfigurationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutLifecycleConfigurationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutLifecycleConfigurationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PutLifecycleConfigurationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("LifecyclePolicies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `LifecyclePolicies` to be an array in the JSON string but got `%s`", jsonObj.get("LifecyclePolicies").toString()));
      }

      JsonArray jsonArraylifecyclePolicies = jsonObj.getAsJsonArray("LifecyclePolicies");
      // validate the required field `LifecyclePolicies` (array)
      for (int i = 0; i < jsonArraylifecyclePolicies.size(); i++) {
        LifecyclePolicy.validateJsonElement(jsonArraylifecyclePolicies.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutLifecycleConfigurationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutLifecycleConfigurationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutLifecycleConfigurationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutLifecycleConfigurationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutLifecycleConfigurationRequest>() {
           @Override
           public void write(JsonWriter out, PutLifecycleConfigurationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutLifecycleConfigurationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutLifecycleConfigurationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutLifecycleConfigurationRequest
   * @throws IOException if the JSON string is invalid with respect to PutLifecycleConfigurationRequest
   */
  public static PutLifecycleConfigurationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutLifecycleConfigurationRequest.class);
  }

  /**
   * Convert an instance of PutLifecycleConfigurationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

