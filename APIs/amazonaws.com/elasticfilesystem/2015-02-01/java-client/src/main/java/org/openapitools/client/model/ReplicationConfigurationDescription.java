/*
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReplicationConfigurationDescription
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:27.318831-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReplicationConfigurationDescription {
  public static final String SERIALIZED_NAME_SOURCE_FILE_SYSTEM_ID = "SourceFileSystemId";
  @SerializedName(SERIALIZED_NAME_SOURCE_FILE_SYSTEM_ID)
  private String sourceFileSystemId;

  public static final String SERIALIZED_NAME_SOURCE_FILE_SYSTEM_REGION = "SourceFileSystemRegion";
  @SerializedName(SERIALIZED_NAME_SOURCE_FILE_SYSTEM_REGION)
  private String sourceFileSystemRegion;

  public static final String SERIALIZED_NAME_SOURCE_FILE_SYSTEM_ARN = "SourceFileSystemArn";
  @SerializedName(SERIALIZED_NAME_SOURCE_FILE_SYSTEM_ARN)
  private String sourceFileSystemArn;

  public static final String SERIALIZED_NAME_ORIGINAL_SOURCE_FILE_SYSTEM_ARN = "OriginalSourceFileSystemArn";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_SOURCE_FILE_SYSTEM_ARN)
  private String originalSourceFileSystemArn;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_DESTINATIONS = "Destinations";
  @SerializedName(SERIALIZED_NAME_DESTINATIONS)
  private List destinations;

  public ReplicationConfigurationDescription() {
  }

  public ReplicationConfigurationDescription sourceFileSystemId(String sourceFileSystemId) {
    this.sourceFileSystemId = sourceFileSystemId;
    return this;
  }

  /**
   * Get sourceFileSystemId
   * @return sourceFileSystemId
   */
  @javax.annotation.Nonnull
  public String getSourceFileSystemId() {
    return sourceFileSystemId;
  }

  public void setSourceFileSystemId(String sourceFileSystemId) {
    this.sourceFileSystemId = sourceFileSystemId;
  }


  public ReplicationConfigurationDescription sourceFileSystemRegion(String sourceFileSystemRegion) {
    this.sourceFileSystemRegion = sourceFileSystemRegion;
    return this;
  }

  /**
   * Get sourceFileSystemRegion
   * @return sourceFileSystemRegion
   */
  @javax.annotation.Nonnull
  public String getSourceFileSystemRegion() {
    return sourceFileSystemRegion;
  }

  public void setSourceFileSystemRegion(String sourceFileSystemRegion) {
    this.sourceFileSystemRegion = sourceFileSystemRegion;
  }


  public ReplicationConfigurationDescription sourceFileSystemArn(String sourceFileSystemArn) {
    this.sourceFileSystemArn = sourceFileSystemArn;
    return this;
  }

  /**
   * Get sourceFileSystemArn
   * @return sourceFileSystemArn
   */
  @javax.annotation.Nonnull
  public String getSourceFileSystemArn() {
    return sourceFileSystemArn;
  }

  public void setSourceFileSystemArn(String sourceFileSystemArn) {
    this.sourceFileSystemArn = sourceFileSystemArn;
  }


  public ReplicationConfigurationDescription originalSourceFileSystemArn(String originalSourceFileSystemArn) {
    this.originalSourceFileSystemArn = originalSourceFileSystemArn;
    return this;
  }

  /**
   * Get originalSourceFileSystemArn
   * @return originalSourceFileSystemArn
   */
  @javax.annotation.Nonnull
  public String getOriginalSourceFileSystemArn() {
    return originalSourceFileSystemArn;
  }

  public void setOriginalSourceFileSystemArn(String originalSourceFileSystemArn) {
    this.originalSourceFileSystemArn = originalSourceFileSystemArn;
  }


  public ReplicationConfigurationDescription creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public ReplicationConfigurationDescription destinations(List destinations) {
    this.destinations = destinations;
    return this;
  }

  /**
   * Get destinations
   * @return destinations
   */
  @javax.annotation.Nonnull
  public List getDestinations() {
    return destinations;
  }

  public void setDestinations(List destinations) {
    this.destinations = destinations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplicationConfigurationDescription replicationConfigurationDescription = (ReplicationConfigurationDescription) o;
    return Objects.equals(this.sourceFileSystemId, replicationConfigurationDescription.sourceFileSystemId) &&
        Objects.equals(this.sourceFileSystemRegion, replicationConfigurationDescription.sourceFileSystemRegion) &&
        Objects.equals(this.sourceFileSystemArn, replicationConfigurationDescription.sourceFileSystemArn) &&
        Objects.equals(this.originalSourceFileSystemArn, replicationConfigurationDescription.originalSourceFileSystemArn) &&
        Objects.equals(this.creationTime, replicationConfigurationDescription.creationTime) &&
        Objects.equals(this.destinations, replicationConfigurationDescription.destinations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceFileSystemId, sourceFileSystemRegion, sourceFileSystemArn, originalSourceFileSystemArn, creationTime, destinations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplicationConfigurationDescription {\n");
    sb.append("    sourceFileSystemId: ").append(toIndentedString(sourceFileSystemId)).append("\n");
    sb.append("    sourceFileSystemRegion: ").append(toIndentedString(sourceFileSystemRegion)).append("\n");
    sb.append("    sourceFileSystemArn: ").append(toIndentedString(sourceFileSystemArn)).append("\n");
    sb.append("    originalSourceFileSystemArn: ").append(toIndentedString(originalSourceFileSystemArn)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    destinations: ").append(toIndentedString(destinations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SourceFileSystemId");
    openapiFields.add("SourceFileSystemRegion");
    openapiFields.add("SourceFileSystemArn");
    openapiFields.add("OriginalSourceFileSystemArn");
    openapiFields.add("CreationTime");
    openapiFields.add("Destinations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SourceFileSystemId");
    openapiRequiredFields.add("SourceFileSystemRegion");
    openapiRequiredFields.add("SourceFileSystemArn");
    openapiRequiredFields.add("OriginalSourceFileSystemArn");
    openapiRequiredFields.add("CreationTime");
    openapiRequiredFields.add("Destinations");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReplicationConfigurationDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReplicationConfigurationDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplicationConfigurationDescription is not found in the empty JSON string", ReplicationConfigurationDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReplicationConfigurationDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReplicationConfigurationDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReplicationConfigurationDescription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `SourceFileSystemId`
      String.validateJsonElement(jsonObj.get("SourceFileSystemId"));
      // validate the required field `SourceFileSystemRegion`
      String.validateJsonElement(jsonObj.get("SourceFileSystemRegion"));
      // validate the required field `SourceFileSystemArn`
      String.validateJsonElement(jsonObj.get("SourceFileSystemArn"));
      // validate the required field `OriginalSourceFileSystemArn`
      String.validateJsonElement(jsonObj.get("OriginalSourceFileSystemArn"));
      // validate the required field `CreationTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      // validate the required field `Destinations`
      List.validateJsonElement(jsonObj.get("Destinations"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplicationConfigurationDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplicationConfigurationDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplicationConfigurationDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplicationConfigurationDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplicationConfigurationDescription>() {
           @Override
           public void write(JsonWriter out, ReplicationConfigurationDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplicationConfigurationDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReplicationConfigurationDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReplicationConfigurationDescription
   * @throws IOException if the JSON string is invalid with respect to ReplicationConfigurationDescription
   */
  public static ReplicationConfigurationDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplicationConfigurationDescription.class);
  }

  /**
   * Convert an instance of ReplicationConfigurationDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

