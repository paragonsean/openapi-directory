/*
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Required if the &lt;code&gt;RootDirectory&lt;/code&gt; &amp;gt; &lt;code&gt;Path&lt;/code&gt; specified does not exist. Specifies the POSIX IDs and permissions to apply to the access point&#39;s &lt;code&gt;RootDirectory&lt;/code&gt; &amp;gt; &lt;code&gt;Path&lt;/code&gt;. If the access point root directory does not exist, EFS creates it with these settings when a client connects to the access point. When specifying &lt;code&gt;CreationInfo&lt;/code&gt;, you must include values for all properties. &lt;/p&gt; &lt;p&gt;Amazon EFS creates a root directory only if you have provided the CreationInfo: OwnUid, OwnGID, and permissions for the directory. If you do not provide this information, Amazon EFS does not create the root directory. If the root directory does not exist, attempts to mount using the access point will fail.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you do not provide &lt;code&gt;CreationInfo&lt;/code&gt; and the specified &lt;code&gt;RootDirectory&lt;/code&gt; does not exist, attempts to mount the file system using the access point will fail.&lt;/p&gt; &lt;/important&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:27.318831-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreationInfo {
  public static final String SERIALIZED_NAME_OWNER_UID = "OwnerUid";
  @SerializedName(SERIALIZED_NAME_OWNER_UID)
  private Integer ownerUid;

  public static final String SERIALIZED_NAME_OWNER_GID = "OwnerGid";
  @SerializedName(SERIALIZED_NAME_OWNER_GID)
  private Integer ownerGid;

  public static final String SERIALIZED_NAME_PERMISSIONS = "Permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private String permissions;

  public CreationInfo() {
  }

  public CreationInfo ownerUid(Integer ownerUid) {
    this.ownerUid = ownerUid;
    return this;
  }

  /**
   * Get ownerUid
   * @return ownerUid
   */
  @javax.annotation.Nonnull
  public Integer getOwnerUid() {
    return ownerUid;
  }

  public void setOwnerUid(Integer ownerUid) {
    this.ownerUid = ownerUid;
  }


  public CreationInfo ownerGid(Integer ownerGid) {
    this.ownerGid = ownerGid;
    return this;
  }

  /**
   * Get ownerGid
   * @return ownerGid
   */
  @javax.annotation.Nonnull
  public Integer getOwnerGid() {
    return ownerGid;
  }

  public void setOwnerGid(Integer ownerGid) {
    this.ownerGid = ownerGid;
  }


  public CreationInfo permissions(String permissions) {
    this.permissions = permissions;
    return this;
  }

  /**
   * Get permissions
   * @return permissions
   */
  @javax.annotation.Nonnull
  public String getPermissions() {
    return permissions;
  }

  public void setPermissions(String permissions) {
    this.permissions = permissions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreationInfo creationInfo = (CreationInfo) o;
    return Objects.equals(this.ownerUid, creationInfo.ownerUid) &&
        Objects.equals(this.ownerGid, creationInfo.ownerGid) &&
        Objects.equals(this.permissions, creationInfo.permissions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ownerUid, ownerGid, permissions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreationInfo {\n");
    sb.append("    ownerUid: ").append(toIndentedString(ownerUid)).append("\n");
    sb.append("    ownerGid: ").append(toIndentedString(ownerGid)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("OwnerUid");
    openapiFields.add("OwnerGid");
    openapiFields.add("Permissions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("OwnerUid");
    openapiRequiredFields.add("OwnerGid");
    openapiRequiredFields.add("Permissions");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreationInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreationInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreationInfo is not found in the empty JSON string", CreationInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreationInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreationInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreationInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `OwnerUid`
      Integer.validateJsonElement(jsonObj.get("OwnerUid"));
      // validate the required field `OwnerGid`
      Integer.validateJsonElement(jsonObj.get("OwnerGid"));
      // validate the required field `Permissions`
      String.validateJsonElement(jsonObj.get("Permissions"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreationInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreationInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreationInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreationInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<CreationInfo>() {
           @Override
           public void write(JsonWriter out, CreationInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreationInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreationInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreationInfo
   * @throws IOException if the JSON string is invalid with respect to CreationInfo
   */
  public static CreationInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreationInfo.class);
  }

  /**
   * Convert an instance of CreationInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

