/*
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateFileSystemRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:27.318831-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateFileSystemRequest {
  /**
   * (Optional) Updates the file system&#39;s throughput mode. If you&#39;re not updating your throughput mode, you don&#39;t need to provide this value in your request. If you are changing the &lt;code&gt;ThroughputMode&lt;/code&gt; to &lt;code&gt;provisioned&lt;/code&gt;, you must also set a value for &lt;code&gt;ProvisionedThroughputInMibps&lt;/code&gt;.
   */
  @JsonAdapter(ThroughputModeEnum.Adapter.class)
  public enum ThroughputModeEnum {
    BURSTING("bursting"),
    
    PROVISIONED("provisioned"),
    
    ELASTIC("elastic");

    private String value;

    ThroughputModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ThroughputModeEnum fromValue(String value) {
      for (ThroughputModeEnum b : ThroughputModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ThroughputModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ThroughputModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ThroughputModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ThroughputModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ThroughputModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_THROUGHPUT_MODE = "ThroughputMode";
  @SerializedName(SERIALIZED_NAME_THROUGHPUT_MODE)
  private ThroughputModeEnum throughputMode;

  public static final String SERIALIZED_NAME_PROVISIONED_THROUGHPUT_IN_MIBPS = "ProvisionedThroughputInMibps";
  @SerializedName(SERIALIZED_NAME_PROVISIONED_THROUGHPUT_IN_MIBPS)
  private Double provisionedThroughputInMibps;

  public UpdateFileSystemRequest() {
  }

  public UpdateFileSystemRequest throughputMode(ThroughputModeEnum throughputMode) {
    this.throughputMode = throughputMode;
    return this;
  }

  /**
   * (Optional) Updates the file system&#39;s throughput mode. If you&#39;re not updating your throughput mode, you don&#39;t need to provide this value in your request. If you are changing the &lt;code&gt;ThroughputMode&lt;/code&gt; to &lt;code&gt;provisioned&lt;/code&gt;, you must also set a value for &lt;code&gt;ProvisionedThroughputInMibps&lt;/code&gt;.
   * @return throughputMode
   */
  @javax.annotation.Nullable
  public ThroughputModeEnum getThroughputMode() {
    return throughputMode;
  }

  public void setThroughputMode(ThroughputModeEnum throughputMode) {
    this.throughputMode = throughputMode;
  }


  public UpdateFileSystemRequest provisionedThroughputInMibps(Double provisionedThroughputInMibps) {
    this.provisionedThroughputInMibps = provisionedThroughputInMibps;
    return this;
  }

  /**
   * (Optional) Sets the amount of provisioned throughput, in MiB/s, for the file system. Valid values are 1-1024. If you are changing the throughput mode to provisioned, you must also provide the amount of provisioned throughput. Required if &lt;code&gt;ThroughputMode&lt;/code&gt; is changed to &lt;code&gt;provisioned&lt;/code&gt; on update.
   * minimum: 1
   * @return provisionedThroughputInMibps
   */
  @javax.annotation.Nullable
  public Double getProvisionedThroughputInMibps() {
    return provisionedThroughputInMibps;
  }

  public void setProvisionedThroughputInMibps(Double provisionedThroughputInMibps) {
    this.provisionedThroughputInMibps = provisionedThroughputInMibps;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateFileSystemRequest updateFileSystemRequest = (UpdateFileSystemRequest) o;
    return Objects.equals(this.throughputMode, updateFileSystemRequest.throughputMode) &&
        Objects.equals(this.provisionedThroughputInMibps, updateFileSystemRequest.provisionedThroughputInMibps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(throughputMode, provisionedThroughputInMibps);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateFileSystemRequest {\n");
    sb.append("    throughputMode: ").append(toIndentedString(throughputMode)).append("\n");
    sb.append("    provisionedThroughputInMibps: ").append(toIndentedString(provisionedThroughputInMibps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ThroughputMode");
    openapiFields.add("ProvisionedThroughputInMibps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateFileSystemRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateFileSystemRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateFileSystemRequest is not found in the empty JSON string", UpdateFileSystemRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateFileSystemRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateFileSystemRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ThroughputMode") != null && !jsonObj.get("ThroughputMode").isJsonNull()) && !jsonObj.get("ThroughputMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ThroughputMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ThroughputMode").toString()));
      }
      // validate the optional field `ThroughputMode`
      if (jsonObj.get("ThroughputMode") != null && !jsonObj.get("ThroughputMode").isJsonNull()) {
        ThroughputModeEnum.validateJsonElement(jsonObj.get("ThroughputMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateFileSystemRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateFileSystemRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateFileSystemRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateFileSystemRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateFileSystemRequest>() {
           @Override
           public void write(JsonWriter out, UpdateFileSystemRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateFileSystemRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateFileSystemRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateFileSystemRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateFileSystemRequest
   */
  public static UpdateFileSystemRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateFileSystemRequest.class);
  }

  /**
   * Convert an instance of UpdateFileSystemRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

