/*
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LifeCycleState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides a description of a mount target.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:27.318831-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MountTargetDescription {
  public static final String SERIALIZED_NAME_OWNER_ID = "OwnerId";
  @SerializedName(SERIALIZED_NAME_OWNER_ID)
  private String ownerId;

  public static final String SERIALIZED_NAME_MOUNT_TARGET_ID = "MountTargetId";
  @SerializedName(SERIALIZED_NAME_MOUNT_TARGET_ID)
  private String mountTargetId;

  public static final String SERIALIZED_NAME_FILE_SYSTEM_ID = "FileSystemId";
  @SerializedName(SERIALIZED_NAME_FILE_SYSTEM_ID)
  private String fileSystemId;

  public static final String SERIALIZED_NAME_SUBNET_ID = "SubnetId";
  @SerializedName(SERIALIZED_NAME_SUBNET_ID)
  private String subnetId;

  public static final String SERIALIZED_NAME_LIFE_CYCLE_STATE = "LifeCycleState";
  @SerializedName(SERIALIZED_NAME_LIFE_CYCLE_STATE)
  private LifeCycleState lifeCycleState;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "IpAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_NETWORK_INTERFACE_ID = "NetworkInterfaceId";
  @SerializedName(SERIALIZED_NAME_NETWORK_INTERFACE_ID)
  private String networkInterfaceId;

  public static final String SERIALIZED_NAME_AVAILABILITY_ZONE_ID = "AvailabilityZoneId";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_ZONE_ID)
  private String availabilityZoneId;

  public static final String SERIALIZED_NAME_AVAILABILITY_ZONE_NAME = "AvailabilityZoneName";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_ZONE_NAME)
  private String availabilityZoneName;

  public static final String SERIALIZED_NAME_VPC_ID = "VpcId";
  @SerializedName(SERIALIZED_NAME_VPC_ID)
  private String vpcId;

  public MountTargetDescription() {
  }

  public MountTargetDescription ownerId(String ownerId) {
    this.ownerId = ownerId;
    return this;
  }

  /**
   * Get ownerId
   * @return ownerId
   */
  @javax.annotation.Nullable
  public String getOwnerId() {
    return ownerId;
  }

  public void setOwnerId(String ownerId) {
    this.ownerId = ownerId;
  }


  public MountTargetDescription mountTargetId(String mountTargetId) {
    this.mountTargetId = mountTargetId;
    return this;
  }

  /**
   * Get mountTargetId
   * @return mountTargetId
   */
  @javax.annotation.Nonnull
  public String getMountTargetId() {
    return mountTargetId;
  }

  public void setMountTargetId(String mountTargetId) {
    this.mountTargetId = mountTargetId;
  }


  public MountTargetDescription fileSystemId(String fileSystemId) {
    this.fileSystemId = fileSystemId;
    return this;
  }

  /**
   * Get fileSystemId
   * @return fileSystemId
   */
  @javax.annotation.Nonnull
  public String getFileSystemId() {
    return fileSystemId;
  }

  public void setFileSystemId(String fileSystemId) {
    this.fileSystemId = fileSystemId;
  }


  public MountTargetDescription subnetId(String subnetId) {
    this.subnetId = subnetId;
    return this;
  }

  /**
   * Get subnetId
   * @return subnetId
   */
  @javax.annotation.Nonnull
  public String getSubnetId() {
    return subnetId;
  }

  public void setSubnetId(String subnetId) {
    this.subnetId = subnetId;
  }


  public MountTargetDescription lifeCycleState(LifeCycleState lifeCycleState) {
    this.lifeCycleState = lifeCycleState;
    return this;
  }

  /**
   * Get lifeCycleState
   * @return lifeCycleState
   */
  @javax.annotation.Nonnull
  public LifeCycleState getLifeCycleState() {
    return lifeCycleState;
  }

  public void setLifeCycleState(LifeCycleState lifeCycleState) {
    this.lifeCycleState = lifeCycleState;
  }


  public MountTargetDescription ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * Get ipAddress
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public MountTargetDescription networkInterfaceId(String networkInterfaceId) {
    this.networkInterfaceId = networkInterfaceId;
    return this;
  }

  /**
   * Get networkInterfaceId
   * @return networkInterfaceId
   */
  @javax.annotation.Nullable
  public String getNetworkInterfaceId() {
    return networkInterfaceId;
  }

  public void setNetworkInterfaceId(String networkInterfaceId) {
    this.networkInterfaceId = networkInterfaceId;
  }


  public MountTargetDescription availabilityZoneId(String availabilityZoneId) {
    this.availabilityZoneId = availabilityZoneId;
    return this;
  }

  /**
   * Get availabilityZoneId
   * @return availabilityZoneId
   */
  @javax.annotation.Nullable
  public String getAvailabilityZoneId() {
    return availabilityZoneId;
  }

  public void setAvailabilityZoneId(String availabilityZoneId) {
    this.availabilityZoneId = availabilityZoneId;
  }


  public MountTargetDescription availabilityZoneName(String availabilityZoneName) {
    this.availabilityZoneName = availabilityZoneName;
    return this;
  }

  /**
   * Get availabilityZoneName
   * @return availabilityZoneName
   */
  @javax.annotation.Nullable
  public String getAvailabilityZoneName() {
    return availabilityZoneName;
  }

  public void setAvailabilityZoneName(String availabilityZoneName) {
    this.availabilityZoneName = availabilityZoneName;
  }


  public MountTargetDescription vpcId(String vpcId) {
    this.vpcId = vpcId;
    return this;
  }

  /**
   * Get vpcId
   * @return vpcId
   */
  @javax.annotation.Nullable
  public String getVpcId() {
    return vpcId;
  }

  public void setVpcId(String vpcId) {
    this.vpcId = vpcId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MountTargetDescription mountTargetDescription = (MountTargetDescription) o;
    return Objects.equals(this.ownerId, mountTargetDescription.ownerId) &&
        Objects.equals(this.mountTargetId, mountTargetDescription.mountTargetId) &&
        Objects.equals(this.fileSystemId, mountTargetDescription.fileSystemId) &&
        Objects.equals(this.subnetId, mountTargetDescription.subnetId) &&
        Objects.equals(this.lifeCycleState, mountTargetDescription.lifeCycleState) &&
        Objects.equals(this.ipAddress, mountTargetDescription.ipAddress) &&
        Objects.equals(this.networkInterfaceId, mountTargetDescription.networkInterfaceId) &&
        Objects.equals(this.availabilityZoneId, mountTargetDescription.availabilityZoneId) &&
        Objects.equals(this.availabilityZoneName, mountTargetDescription.availabilityZoneName) &&
        Objects.equals(this.vpcId, mountTargetDescription.vpcId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ownerId, mountTargetId, fileSystemId, subnetId, lifeCycleState, ipAddress, networkInterfaceId, availabilityZoneId, availabilityZoneName, vpcId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MountTargetDescription {\n");
    sb.append("    ownerId: ").append(toIndentedString(ownerId)).append("\n");
    sb.append("    mountTargetId: ").append(toIndentedString(mountTargetId)).append("\n");
    sb.append("    fileSystemId: ").append(toIndentedString(fileSystemId)).append("\n");
    sb.append("    subnetId: ").append(toIndentedString(subnetId)).append("\n");
    sb.append("    lifeCycleState: ").append(toIndentedString(lifeCycleState)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    networkInterfaceId: ").append(toIndentedString(networkInterfaceId)).append("\n");
    sb.append("    availabilityZoneId: ").append(toIndentedString(availabilityZoneId)).append("\n");
    sb.append("    availabilityZoneName: ").append(toIndentedString(availabilityZoneName)).append("\n");
    sb.append("    vpcId: ").append(toIndentedString(vpcId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("OwnerId");
    openapiFields.add("MountTargetId");
    openapiFields.add("FileSystemId");
    openapiFields.add("SubnetId");
    openapiFields.add("LifeCycleState");
    openapiFields.add("IpAddress");
    openapiFields.add("NetworkInterfaceId");
    openapiFields.add("AvailabilityZoneId");
    openapiFields.add("AvailabilityZoneName");
    openapiFields.add("VpcId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("MountTargetId");
    openapiRequiredFields.add("FileSystemId");
    openapiRequiredFields.add("SubnetId");
    openapiRequiredFields.add("LifeCycleState");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MountTargetDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MountTargetDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MountTargetDescription is not found in the empty JSON string", MountTargetDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MountTargetDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MountTargetDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MountTargetDescription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `OwnerId`
      if (jsonObj.get("OwnerId") != null && !jsonObj.get("OwnerId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OwnerId"));
      }
      // validate the required field `MountTargetId`
      String.validateJsonElement(jsonObj.get("MountTargetId"));
      // validate the required field `FileSystemId`
      String.validateJsonElement(jsonObj.get("FileSystemId"));
      // validate the required field `SubnetId`
      String.validateJsonElement(jsonObj.get("SubnetId"));
      // validate the required field `LifeCycleState`
      LifeCycleState.validateJsonElement(jsonObj.get("LifeCycleState"));
      // validate the optional field `IpAddress`
      if (jsonObj.get("IpAddress") != null && !jsonObj.get("IpAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IpAddress"));
      }
      // validate the optional field `NetworkInterfaceId`
      if (jsonObj.get("NetworkInterfaceId") != null && !jsonObj.get("NetworkInterfaceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NetworkInterfaceId"));
      }
      // validate the optional field `AvailabilityZoneId`
      if (jsonObj.get("AvailabilityZoneId") != null && !jsonObj.get("AvailabilityZoneId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AvailabilityZoneId"));
      }
      // validate the optional field `AvailabilityZoneName`
      if (jsonObj.get("AvailabilityZoneName") != null && !jsonObj.get("AvailabilityZoneName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AvailabilityZoneName"));
      }
      // validate the optional field `VpcId`
      if (jsonObj.get("VpcId") != null && !jsonObj.get("VpcId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VpcId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MountTargetDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MountTargetDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MountTargetDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MountTargetDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<MountTargetDescription>() {
           @Override
           public void write(JsonWriter out, MountTargetDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MountTargetDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MountTargetDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MountTargetDescription
   * @throws IOException if the JSON string is invalid with respect to MountTargetDescription
   */
  public static MountTargetDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MountTargetDescription.class);
  }

  /**
   * Convert an instance of MountTargetDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

