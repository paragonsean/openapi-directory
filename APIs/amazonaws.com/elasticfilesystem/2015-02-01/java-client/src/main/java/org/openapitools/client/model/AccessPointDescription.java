/*
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AccessPointDescriptionPosixUser;
import org.openapitools.client.model.AccessPointDescriptionRootDirectory;
import org.openapitools.client.model.LifeCycleState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides a description of an EFS file system access point.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:27.318831-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccessPointDescription {
  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "ClientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_ACCESS_POINT_ID = "AccessPointId";
  @SerializedName(SERIALIZED_NAME_ACCESS_POINT_ID)
  private String accessPointId;

  public static final String SERIALIZED_NAME_ACCESS_POINT_ARN = "AccessPointArn";
  @SerializedName(SERIALIZED_NAME_ACCESS_POINT_ARN)
  private String accessPointArn;

  public static final String SERIALIZED_NAME_FILE_SYSTEM_ID = "FileSystemId";
  @SerializedName(SERIALIZED_NAME_FILE_SYSTEM_ID)
  private String fileSystemId;

  public static final String SERIALIZED_NAME_POSIX_USER = "PosixUser";
  @SerializedName(SERIALIZED_NAME_POSIX_USER)
  private AccessPointDescriptionPosixUser posixUser;

  public static final String SERIALIZED_NAME_ROOT_DIRECTORY = "RootDirectory";
  @SerializedName(SERIALIZED_NAME_ROOT_DIRECTORY)
  private AccessPointDescriptionRootDirectory rootDirectory;

  public static final String SERIALIZED_NAME_OWNER_ID = "OwnerId";
  @SerializedName(SERIALIZED_NAME_OWNER_ID)
  private String ownerId;

  public static final String SERIALIZED_NAME_LIFE_CYCLE_STATE = "LifeCycleState";
  @SerializedName(SERIALIZED_NAME_LIFE_CYCLE_STATE)
  private LifeCycleState lifeCycleState;

  public AccessPointDescription() {
  }

  public AccessPointDescription clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * Get clientToken
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public AccessPointDescription name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AccessPointDescription tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public AccessPointDescription accessPointId(String accessPointId) {
    this.accessPointId = accessPointId;
    return this;
  }

  /**
   * Get accessPointId
   * @return accessPointId
   */
  @javax.annotation.Nullable
  public String getAccessPointId() {
    return accessPointId;
  }

  public void setAccessPointId(String accessPointId) {
    this.accessPointId = accessPointId;
  }


  public AccessPointDescription accessPointArn(String accessPointArn) {
    this.accessPointArn = accessPointArn;
    return this;
  }

  /**
   * Get accessPointArn
   * @return accessPointArn
   */
  @javax.annotation.Nullable
  public String getAccessPointArn() {
    return accessPointArn;
  }

  public void setAccessPointArn(String accessPointArn) {
    this.accessPointArn = accessPointArn;
  }


  public AccessPointDescription fileSystemId(String fileSystemId) {
    this.fileSystemId = fileSystemId;
    return this;
  }

  /**
   * Get fileSystemId
   * @return fileSystemId
   */
  @javax.annotation.Nullable
  public String getFileSystemId() {
    return fileSystemId;
  }

  public void setFileSystemId(String fileSystemId) {
    this.fileSystemId = fileSystemId;
  }


  public AccessPointDescription posixUser(AccessPointDescriptionPosixUser posixUser) {
    this.posixUser = posixUser;
    return this;
  }

  /**
   * Get posixUser
   * @return posixUser
   */
  @javax.annotation.Nullable
  public AccessPointDescriptionPosixUser getPosixUser() {
    return posixUser;
  }

  public void setPosixUser(AccessPointDescriptionPosixUser posixUser) {
    this.posixUser = posixUser;
  }


  public AccessPointDescription rootDirectory(AccessPointDescriptionRootDirectory rootDirectory) {
    this.rootDirectory = rootDirectory;
    return this;
  }

  /**
   * Get rootDirectory
   * @return rootDirectory
   */
  @javax.annotation.Nullable
  public AccessPointDescriptionRootDirectory getRootDirectory() {
    return rootDirectory;
  }

  public void setRootDirectory(AccessPointDescriptionRootDirectory rootDirectory) {
    this.rootDirectory = rootDirectory;
  }


  public AccessPointDescription ownerId(String ownerId) {
    this.ownerId = ownerId;
    return this;
  }

  /**
   * Get ownerId
   * @return ownerId
   */
  @javax.annotation.Nullable
  public String getOwnerId() {
    return ownerId;
  }

  public void setOwnerId(String ownerId) {
    this.ownerId = ownerId;
  }


  public AccessPointDescription lifeCycleState(LifeCycleState lifeCycleState) {
    this.lifeCycleState = lifeCycleState;
    return this;
  }

  /**
   * Get lifeCycleState
   * @return lifeCycleState
   */
  @javax.annotation.Nullable
  public LifeCycleState getLifeCycleState() {
    return lifeCycleState;
  }

  public void setLifeCycleState(LifeCycleState lifeCycleState) {
    this.lifeCycleState = lifeCycleState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccessPointDescription accessPointDescription = (AccessPointDescription) o;
    return Objects.equals(this.clientToken, accessPointDescription.clientToken) &&
        Objects.equals(this.name, accessPointDescription.name) &&
        Objects.equals(this.tags, accessPointDescription.tags) &&
        Objects.equals(this.accessPointId, accessPointDescription.accessPointId) &&
        Objects.equals(this.accessPointArn, accessPointDescription.accessPointArn) &&
        Objects.equals(this.fileSystemId, accessPointDescription.fileSystemId) &&
        Objects.equals(this.posixUser, accessPointDescription.posixUser) &&
        Objects.equals(this.rootDirectory, accessPointDescription.rootDirectory) &&
        Objects.equals(this.ownerId, accessPointDescription.ownerId) &&
        Objects.equals(this.lifeCycleState, accessPointDescription.lifeCycleState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientToken, name, tags, accessPointId, accessPointArn, fileSystemId, posixUser, rootDirectory, ownerId, lifeCycleState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccessPointDescription {\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    accessPointId: ").append(toIndentedString(accessPointId)).append("\n");
    sb.append("    accessPointArn: ").append(toIndentedString(accessPointArn)).append("\n");
    sb.append("    fileSystemId: ").append(toIndentedString(fileSystemId)).append("\n");
    sb.append("    posixUser: ").append(toIndentedString(posixUser)).append("\n");
    sb.append("    rootDirectory: ").append(toIndentedString(rootDirectory)).append("\n");
    sb.append("    ownerId: ").append(toIndentedString(ownerId)).append("\n");
    sb.append("    lifeCycleState: ").append(toIndentedString(lifeCycleState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ClientToken");
    openapiFields.add("Name");
    openapiFields.add("Tags");
    openapiFields.add("AccessPointId");
    openapiFields.add("AccessPointArn");
    openapiFields.add("FileSystemId");
    openapiFields.add("PosixUser");
    openapiFields.add("RootDirectory");
    openapiFields.add("OwnerId");
    openapiFields.add("LifeCycleState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccessPointDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccessPointDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccessPointDescription is not found in the empty JSON string", AccessPointDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccessPointDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccessPointDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ClientToken`
      if (jsonObj.get("ClientToken") != null && !jsonObj.get("ClientToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ClientToken"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `AccessPointId`
      if (jsonObj.get("AccessPointId") != null && !jsonObj.get("AccessPointId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AccessPointId"));
      }
      // validate the optional field `AccessPointArn`
      if (jsonObj.get("AccessPointArn") != null && !jsonObj.get("AccessPointArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AccessPointArn"));
      }
      // validate the optional field `FileSystemId`
      if (jsonObj.get("FileSystemId") != null && !jsonObj.get("FileSystemId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FileSystemId"));
      }
      // validate the optional field `PosixUser`
      if (jsonObj.get("PosixUser") != null && !jsonObj.get("PosixUser").isJsonNull()) {
        AccessPointDescriptionPosixUser.validateJsonElement(jsonObj.get("PosixUser"));
      }
      // validate the optional field `RootDirectory`
      if (jsonObj.get("RootDirectory") != null && !jsonObj.get("RootDirectory").isJsonNull()) {
        AccessPointDescriptionRootDirectory.validateJsonElement(jsonObj.get("RootDirectory"));
      }
      // validate the optional field `OwnerId`
      if (jsonObj.get("OwnerId") != null && !jsonObj.get("OwnerId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OwnerId"));
      }
      // validate the optional field `LifeCycleState`
      if (jsonObj.get("LifeCycleState") != null && !jsonObj.get("LifeCycleState").isJsonNull()) {
        LifeCycleState.validateJsonElement(jsonObj.get("LifeCycleState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccessPointDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccessPointDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccessPointDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccessPointDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<AccessPointDescription>() {
           @Override
           public void write(JsonWriter out, AccessPointDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccessPointDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccessPointDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccessPointDescription
   * @throws IOException if the JSON string is invalid with respect to AccessPointDescription
   */
  public static AccessPointDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccessPointDescription.class);
  }

  /**
   * Convert an instance of AccessPointDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

