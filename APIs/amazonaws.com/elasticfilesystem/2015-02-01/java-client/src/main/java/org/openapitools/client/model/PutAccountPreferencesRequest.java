/*
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutAccountPreferencesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:27.318831-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutAccountPreferencesRequest {
  /**
   * A preference indicating a choice to use 63bit/32bit IDs for all applicable resources.
   */
  @JsonAdapter(ResourceIdTypeEnum.Adapter.class)
  public enum ResourceIdTypeEnum {
    LONG_ID("LONG_ID"),
    
    SHORT_ID("SHORT_ID");

    private String value;

    ResourceIdTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResourceIdTypeEnum fromValue(String value) {
      for (ResourceIdTypeEnum b : ResourceIdTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResourceIdTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResourceIdTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResourceIdTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResourceIdTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResourceIdTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESOURCE_ID_TYPE = "ResourceIdType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID_TYPE)
  private ResourceIdTypeEnum resourceIdType;

  public PutAccountPreferencesRequest() {
  }

  public PutAccountPreferencesRequest resourceIdType(ResourceIdTypeEnum resourceIdType) {
    this.resourceIdType = resourceIdType;
    return this;
  }

  /**
   * A preference indicating a choice to use 63bit/32bit IDs for all applicable resources.
   * @return resourceIdType
   */
  @javax.annotation.Nonnull
  public ResourceIdTypeEnum getResourceIdType() {
    return resourceIdType;
  }

  public void setResourceIdType(ResourceIdTypeEnum resourceIdType) {
    this.resourceIdType = resourceIdType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutAccountPreferencesRequest putAccountPreferencesRequest = (PutAccountPreferencesRequest) o;
    return Objects.equals(this.resourceIdType, putAccountPreferencesRequest.resourceIdType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resourceIdType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutAccountPreferencesRequest {\n");
    sb.append("    resourceIdType: ").append(toIndentedString(resourceIdType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ResourceIdType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ResourceIdType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutAccountPreferencesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutAccountPreferencesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutAccountPreferencesRequest is not found in the empty JSON string", PutAccountPreferencesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutAccountPreferencesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutAccountPreferencesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PutAccountPreferencesRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ResourceIdType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ResourceIdType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ResourceIdType").toString()));
      }
      // validate the required field `ResourceIdType`
      ResourceIdTypeEnum.validateJsonElement(jsonObj.get("ResourceIdType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutAccountPreferencesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutAccountPreferencesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutAccountPreferencesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutAccountPreferencesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutAccountPreferencesRequest>() {
           @Override
           public void write(JsonWriter out, PutAccountPreferencesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutAccountPreferencesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutAccountPreferencesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutAccountPreferencesRequest
   * @throws IOException if the JSON string is invalid with respect to PutAccountPreferencesRequest
   */
  public static PutAccountPreferencesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutAccountPreferencesRequest.class);
  }

  /**
   * Convert an instance of PutAccountPreferencesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

