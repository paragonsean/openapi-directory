# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_access_point_request_posix_user import CreateAccessPointRequestPosixUser
from openapi_server.models.create_access_point_request_root_directory import CreateAccessPointRequestRootDirectory
from openapi_server.models.tag import Tag
import re
from openapi_server import util


class CreateAccessPointRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, tags: List[Tag]=None, file_system_id: str=None, posix_user: CreateAccessPointRequestPosixUser=None, root_directory: CreateAccessPointRequestRootDirectory=None):
        """CreateAccessPointRequest - a model defined in OpenAPI

        :param client_token: The client_token of this CreateAccessPointRequest.
        :param tags: The tags of this CreateAccessPointRequest.
        :param file_system_id: The file_system_id of this CreateAccessPointRequest.
        :param posix_user: The posix_user of this CreateAccessPointRequest.
        :param root_directory: The root_directory of this CreateAccessPointRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'tags': List[Tag],
            'file_system_id': str,
            'posix_user': CreateAccessPointRequestPosixUser,
            'root_directory': CreateAccessPointRequestRootDirectory
        }

        self.attribute_map = {
            'client_token': 'ClientToken',
            'tags': 'Tags',
            'file_system_id': 'FileSystemId',
            'posix_user': 'PosixUser',
            'root_directory': 'RootDirectory'
        }

        self._client_token = client_token
        self._tags = tags
        self._file_system_id = file_system_id
        self._posix_user = posix_user
        self._root_directory = root_directory

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAccessPointRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAccessPoint_request of this CreateAccessPointRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateAccessPointRequest.

        A string of up to 64 ASCII characters that Amazon EFS uses to ensure idempotent creation.

        :return: The client_token of this CreateAccessPointRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateAccessPointRequest.

        A string of up to 64 ASCII characters that Amazon EFS uses to ensure idempotent creation.

        :param client_token: The client_token of this CreateAccessPointRequest.
        :type client_token: str
        """
        if client_token is None:
            raise ValueError("Invalid value for `client_token`, must not be `None`")
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'.+', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/.+/`")

        self._client_token = client_token

    @property
    def tags(self):
        """Gets the tags of this CreateAccessPointRequest.

        Creates tags associated with the access point. Each tag is a key-value pair, each key must be unique. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference Guide</i>.

        :return: The tags of this CreateAccessPointRequest.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateAccessPointRequest.

        Creates tags associated with the access point. Each tag is a key-value pair, each key must be unique. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference Guide</i>.

        :param tags: The tags of this CreateAccessPointRequest.
        :type tags: List[Tag]
        """

        self._tags = tags

    @property
    def file_system_id(self):
        """Gets the file_system_id of this CreateAccessPointRequest.

        The ID of the EFS file system that the access point provides access to.

        :return: The file_system_id of this CreateAccessPointRequest.
        :rtype: str
        """
        return self._file_system_id

    @file_system_id.setter
    def file_system_id(self, file_system_id):
        """Sets the file_system_id of this CreateAccessPointRequest.

        The ID of the EFS file system that the access point provides access to.

        :param file_system_id: The file_system_id of this CreateAccessPointRequest.
        :type file_system_id: str
        """
        if file_system_id is None:
            raise ValueError("Invalid value for `file_system_id`, must not be `None`")
        if file_system_id is not None and len(file_system_id) > 128:
            raise ValueError("Invalid value for `file_system_id`, length must be less than or equal to `128`")
        if file_system_id is not None and not re.search(r'^(arn:aws[-a-z]*:elasticfilesystem:[0-9a-z-:]+:file-system\/fs-[0-9a-f]{8,40}|fs-[0-9a-f]{8,40})$', file_system_id):
            raise ValueError("Invalid value for `file_system_id`, must be a follow pattern or equal to `/^(arn:aws[-a-z]*:elasticfilesystem:[0-9a-z-:]+:file-system\/fs-[0-9a-f]{8,40}|fs-[0-9a-f]{8,40})$/`")

        self._file_system_id = file_system_id

    @property
    def posix_user(self):
        """Gets the posix_user of this CreateAccessPointRequest.


        :return: The posix_user of this CreateAccessPointRequest.
        :rtype: CreateAccessPointRequestPosixUser
        """
        return self._posix_user

    @posix_user.setter
    def posix_user(self, posix_user):
        """Sets the posix_user of this CreateAccessPointRequest.


        :param posix_user: The posix_user of this CreateAccessPointRequest.
        :type posix_user: CreateAccessPointRequestPosixUser
        """

        self._posix_user = posix_user

    @property
    def root_directory(self):
        """Gets the root_directory of this CreateAccessPointRequest.


        :return: The root_directory of this CreateAccessPointRequest.
        :rtype: CreateAccessPointRequestRootDirectory
        """
        return self._root_directory

    @root_directory.setter
    def root_directory(self, root_directory):
        """Sets the root_directory of this CreateAccessPointRequest.


        :param root_directory: The root_directory of this CreateAccessPointRequest.
        :type root_directory: CreateAccessPointRequestRootDirectory
        """

        self._root_directory = root_directory
