# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.lifecycle_policy import LifecyclePolicy
from openapi_server import util


class PutLifecycleConfigurationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lifecycle_policies: List[LifecyclePolicy]=None):
        """PutLifecycleConfigurationRequest - a model defined in OpenAPI

        :param lifecycle_policies: The lifecycle_policies of this PutLifecycleConfigurationRequest.
        """
        self.openapi_types = {
            'lifecycle_policies': List[LifecyclePolicy]
        }

        self.attribute_map = {
            'lifecycle_policies': 'LifecyclePolicies'
        }

        self._lifecycle_policies = lifecycle_policies

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutLifecycleConfigurationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutLifecycleConfiguration_request of this PutLifecycleConfigurationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lifecycle_policies(self):
        """Gets the lifecycle_policies of this PutLifecycleConfigurationRequest.

        <p>An array of <code>LifecyclePolicy</code> objects that define the file system's <code>LifecycleConfiguration</code> object. A <code>LifecycleConfiguration</code> object informs EFS lifecycle management and EFS Intelligent-Tiering of the following:</p> <ul> <li> <p>When to move files in the file system from primary storage to the IA storage class.</p> </li> <li> <p>When to move files that are in IA storage to primary storage.</p> </li> </ul> <note> <p>When using the <code>put-lifecycle-configuration</code> CLI command or the <code>PutLifecycleConfiguration</code> API action, Amazon EFS requires that each <code>LifecyclePolicy</code> object have only a single transition. This means that in a request body, <code>LifecyclePolicies</code> must be structured as an array of <code>LifecyclePolicy</code> objects, one object for each transition, <code>TransitionToIA</code>, <code>TransitionToPrimaryStorageClass</code>. See the example requests in the following section for more information.</p> </note>

        :return: The lifecycle_policies of this PutLifecycleConfigurationRequest.
        :rtype: List[LifecyclePolicy]
        """
        return self._lifecycle_policies

    @lifecycle_policies.setter
    def lifecycle_policies(self, lifecycle_policies):
        """Sets the lifecycle_policies of this PutLifecycleConfigurationRequest.

        <p>An array of <code>LifecyclePolicy</code> objects that define the file system's <code>LifecycleConfiguration</code> object. A <code>LifecycleConfiguration</code> object informs EFS lifecycle management and EFS Intelligent-Tiering of the following:</p> <ul> <li> <p>When to move files in the file system from primary storage to the IA storage class.</p> </li> <li> <p>When to move files that are in IA storage to primary storage.</p> </li> </ul> <note> <p>When using the <code>put-lifecycle-configuration</code> CLI command or the <code>PutLifecycleConfiguration</code> API action, Amazon EFS requires that each <code>LifecyclePolicy</code> object have only a single transition. This means that in a request body, <code>LifecyclePolicies</code> must be structured as an array of <code>LifecyclePolicy</code> objects, one object for each transition, <code>TransitionToIA</code>, <code>TransitionToPrimaryStorageClass</code>. See the example requests in the following section for more information.</p> </note>

        :param lifecycle_policies: The lifecycle_policies of this PutLifecycleConfigurationRequest.
        :type lifecycle_policies: List[LifecyclePolicy]
        """
        if lifecycle_policies is None:
            raise ValueError("Invalid value for `lifecycle_policies`, must not be `None`")
        if lifecycle_policies is not None and len(lifecycle_policies) > 2:
            raise ValueError("Invalid value for `lifecycle_policies`, number of items must be less than or equal to `2`")

        self._lifecycle_policies = lifecycle_policies
