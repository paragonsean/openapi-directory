# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destination_to_create import DestinationToCreate
from openapi_server import util


class CreateReplicationConfigurationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destinations: List[DestinationToCreate]=None):
        """CreateReplicationConfigurationRequest - a model defined in OpenAPI

        :param destinations: The destinations of this CreateReplicationConfigurationRequest.
        """
        self.openapi_types = {
            'destinations': List[DestinationToCreate]
        }

        self.attribute_map = {
            'destinations': 'Destinations'
        }

        self._destinations = destinations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateReplicationConfigurationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateReplicationConfiguration_request of this CreateReplicationConfigurationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destinations(self):
        """Gets the destinations of this CreateReplicationConfigurationRequest.

        An array of destination configuration objects. Only one destination configuration object is supported.

        :return: The destinations of this CreateReplicationConfigurationRequest.
        :rtype: List[DestinationToCreate]
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this CreateReplicationConfigurationRequest.

        An array of destination configuration objects. Only one destination configuration object is supported.

        :param destinations: The destinations of this CreateReplicationConfigurationRequest.
        :type destinations: List[DestinationToCreate]
        """
        if destinations is None:
            raise ValueError("Invalid value for `destinations`, must not be `None`")

        self._destinations = destinations
