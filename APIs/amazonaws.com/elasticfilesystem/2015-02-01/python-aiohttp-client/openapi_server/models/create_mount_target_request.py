# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateMountTargetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_system_id: str=None, subnet_id: str=None, ip_address: str=None, security_groups: List[str]=None):
        """CreateMountTargetRequest - a model defined in OpenAPI

        :param file_system_id: The file_system_id of this CreateMountTargetRequest.
        :param subnet_id: The subnet_id of this CreateMountTargetRequest.
        :param ip_address: The ip_address of this CreateMountTargetRequest.
        :param security_groups: The security_groups of this CreateMountTargetRequest.
        """
        self.openapi_types = {
            'file_system_id': str,
            'subnet_id': str,
            'ip_address': str,
            'security_groups': List[str]
        }

        self.attribute_map = {
            'file_system_id': 'FileSystemId',
            'subnet_id': 'SubnetId',
            'ip_address': 'IpAddress',
            'security_groups': 'SecurityGroups'
        }

        self._file_system_id = file_system_id
        self._subnet_id = subnet_id
        self._ip_address = ip_address
        self._security_groups = security_groups

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateMountTargetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateMountTarget_request of this CreateMountTargetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_system_id(self):
        """Gets the file_system_id of this CreateMountTargetRequest.

        The ID of the file system for which to create the mount target.

        :return: The file_system_id of this CreateMountTargetRequest.
        :rtype: str
        """
        return self._file_system_id

    @file_system_id.setter
    def file_system_id(self, file_system_id):
        """Sets the file_system_id of this CreateMountTargetRequest.

        The ID of the file system for which to create the mount target.

        :param file_system_id: The file_system_id of this CreateMountTargetRequest.
        :type file_system_id: str
        """
        if file_system_id is None:
            raise ValueError("Invalid value for `file_system_id`, must not be `None`")
        if file_system_id is not None and len(file_system_id) > 128:
            raise ValueError("Invalid value for `file_system_id`, length must be less than or equal to `128`")
        if file_system_id is not None and not re.search(r'^(arn:aws[-a-z]*:elasticfilesystem:[0-9a-z-:]+:file-system\/fs-[0-9a-f]{8,40}|fs-[0-9a-f]{8,40})$', file_system_id):
            raise ValueError("Invalid value for `file_system_id`, must be a follow pattern or equal to `/^(arn:aws[-a-z]*:elasticfilesystem:[0-9a-z-:]+:file-system\/fs-[0-9a-f]{8,40}|fs-[0-9a-f]{8,40})$/`")

        self._file_system_id = file_system_id

    @property
    def subnet_id(self):
        """Gets the subnet_id of this CreateMountTargetRequest.

        The ID of the subnet to add the mount target in. For file systems that use One Zone storage classes, use the subnet that is associated with the file system's Availability Zone.

        :return: The subnet_id of this CreateMountTargetRequest.
        :rtype: str
        """
        return self._subnet_id

    @subnet_id.setter
    def subnet_id(self, subnet_id):
        """Sets the subnet_id of this CreateMountTargetRequest.

        The ID of the subnet to add the mount target in. For file systems that use One Zone storage classes, use the subnet that is associated with the file system's Availability Zone.

        :param subnet_id: The subnet_id of this CreateMountTargetRequest.
        :type subnet_id: str
        """
        if subnet_id is None:
            raise ValueError("Invalid value for `subnet_id`, must not be `None`")
        if subnet_id is not None and len(subnet_id) > 47:
            raise ValueError("Invalid value for `subnet_id`, length must be less than or equal to `47`")
        if subnet_id is not None and len(subnet_id) < 15:
            raise ValueError("Invalid value for `subnet_id`, length must be greater than or equal to `15`")
        if subnet_id is not None and not re.search(r'^subnet-[0-9a-f]{8,40}$', subnet_id):
            raise ValueError("Invalid value for `subnet_id`, must be a follow pattern or equal to `/^subnet-[0-9a-f]{8,40}$/`")

        self._subnet_id = subnet_id

    @property
    def ip_address(self):
        """Gets the ip_address of this CreateMountTargetRequest.

        Valid IPv4 address within the address range of the specified subnet.

        :return: The ip_address of this CreateMountTargetRequest.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this CreateMountTargetRequest.

        Valid IPv4 address within the address range of the specified subnet.

        :param ip_address: The ip_address of this CreateMountTargetRequest.
        :type ip_address: str
        """
        if ip_address is not None and len(ip_address) > 15:
            raise ValueError("Invalid value for `ip_address`, length must be less than or equal to `15`")
        if ip_address is not None and len(ip_address) < 7:
            raise ValueError("Invalid value for `ip_address`, length must be greater than or equal to `7`")
        if ip_address is not None and not re.search(r'^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$', ip_address):
            raise ValueError("Invalid value for `ip_address`, must be a follow pattern or equal to `/^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$/`")

        self._ip_address = ip_address

    @property
    def security_groups(self):
        """Gets the security_groups of this CreateMountTargetRequest.

        Up to five VPC security group IDs, of the form <code>sg-xxxxxxxx</code>. These must be for the same VPC as subnet specified.

        :return: The security_groups of this CreateMountTargetRequest.
        :rtype: List[str]
        """
        return self._security_groups

    @security_groups.setter
    def security_groups(self, security_groups):
        """Sets the security_groups of this CreateMountTargetRequest.

        Up to five VPC security group IDs, of the form <code>sg-xxxxxxxx</code>. These must be for the same VPC as subnet specified.

        :param security_groups: The security_groups of this CreateMountTargetRequest.
        :type security_groups: List[str]
        """
        if security_groups is not None and len(security_groups) > 100:
            raise ValueError("Invalid value for `security_groups`, number of items must be less than or equal to `100`")

        self._security_groups = security_groups
