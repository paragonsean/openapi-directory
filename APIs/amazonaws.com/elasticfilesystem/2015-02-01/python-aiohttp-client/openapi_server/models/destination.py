# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.replication_status import ReplicationStatus
from openapi_server import util


class Destination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status: ReplicationStatus=None, file_system_id: str=None, region: str=None, last_replicated_timestamp: datetime=None):
        """Destination - a model defined in OpenAPI

        :param status: The status of this Destination.
        :param file_system_id: The file_system_id of this Destination.
        :param region: The region of this Destination.
        :param last_replicated_timestamp: The last_replicated_timestamp of this Destination.
        """
        self.openapi_types = {
            'status': ReplicationStatus,
            'file_system_id': str,
            'region': str,
            'last_replicated_timestamp': datetime
        }

        self.attribute_map = {
            'status': 'Status',
            'file_system_id': 'FileSystemId',
            'region': 'Region',
            'last_replicated_timestamp': 'LastReplicatedTimestamp'
        }

        self._status = status
        self._file_system_id = file_system_id
        self._region = region
        self._last_replicated_timestamp = last_replicated_timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Destination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destination of this Destination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this Destination.


        :return: The status of this Destination.
        :rtype: ReplicationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Destination.


        :param status: The status of this Destination.
        :type status: ReplicationStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def file_system_id(self):
        """Gets the file_system_id of this Destination.


        :return: The file_system_id of this Destination.
        :rtype: str
        """
        return self._file_system_id

    @file_system_id.setter
    def file_system_id(self, file_system_id):
        """Sets the file_system_id of this Destination.


        :param file_system_id: The file_system_id of this Destination.
        :type file_system_id: str
        """
        if file_system_id is None:
            raise ValueError("Invalid value for `file_system_id`, must not be `None`")

        self._file_system_id = file_system_id

    @property
    def region(self):
        """Gets the region of this Destination.


        :return: The region of this Destination.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Destination.


        :param region: The region of this Destination.
        :type region: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")

        self._region = region

    @property
    def last_replicated_timestamp(self):
        """Gets the last_replicated_timestamp of this Destination.


        :return: The last_replicated_timestamp of this Destination.
        :rtype: datetime
        """
        return self._last_replicated_timestamp

    @last_replicated_timestamp.setter
    def last_replicated_timestamp(self, last_replicated_timestamp):
        """Sets the last_replicated_timestamp of this Destination.


        :param last_replicated_timestamp: The last_replicated_timestamp of this Destination.
        :type last_replicated_timestamp: datetime
        """

        self._last_replicated_timestamp = last_replicated_timestamp
