# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.file_system_description_size_in_bytes import FileSystemDescriptionSizeInBytes
from openapi_server.models.life_cycle_state import LifeCycleState
from openapi_server.models.performance_mode import PerformanceMode
from openapi_server.models.throughput_mode import ThroughputMode
from openapi_server import util


class FileSystemDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, owner_id: str=None, creation_token: str=None, file_system_id: str=None, file_system_arn: str=None, creation_time: datetime=None, life_cycle_state: LifeCycleState=None, name: str=None, number_of_mount_targets: int=None, size_in_bytes: FileSystemDescriptionSizeInBytes=None, performance_mode: PerformanceMode=None, encrypted: bool=None, kms_key_id: str=None, throughput_mode: ThroughputMode=None, provisioned_throughput_in_mibps: float=None, availability_zone_name: str=None, availability_zone_id: str=None, tags: List=None):
        """FileSystemDescription - a model defined in OpenAPI

        :param owner_id: The owner_id of this FileSystemDescription.
        :param creation_token: The creation_token of this FileSystemDescription.
        :param file_system_id: The file_system_id of this FileSystemDescription.
        :param file_system_arn: The file_system_arn of this FileSystemDescription.
        :param creation_time: The creation_time of this FileSystemDescription.
        :param life_cycle_state: The life_cycle_state of this FileSystemDescription.
        :param name: The name of this FileSystemDescription.
        :param number_of_mount_targets: The number_of_mount_targets of this FileSystemDescription.
        :param size_in_bytes: The size_in_bytes of this FileSystemDescription.
        :param performance_mode: The performance_mode of this FileSystemDescription.
        :param encrypted: The encrypted of this FileSystemDescription.
        :param kms_key_id: The kms_key_id of this FileSystemDescription.
        :param throughput_mode: The throughput_mode of this FileSystemDescription.
        :param provisioned_throughput_in_mibps: The provisioned_throughput_in_mibps of this FileSystemDescription.
        :param availability_zone_name: The availability_zone_name of this FileSystemDescription.
        :param availability_zone_id: The availability_zone_id of this FileSystemDescription.
        :param tags: The tags of this FileSystemDescription.
        """
        self.openapi_types = {
            'owner_id': str,
            'creation_token': str,
            'file_system_id': str,
            'file_system_arn': str,
            'creation_time': datetime,
            'life_cycle_state': LifeCycleState,
            'name': str,
            'number_of_mount_targets': int,
            'size_in_bytes': FileSystemDescriptionSizeInBytes,
            'performance_mode': PerformanceMode,
            'encrypted': bool,
            'kms_key_id': str,
            'throughput_mode': ThroughputMode,
            'provisioned_throughput_in_mibps': float,
            'availability_zone_name': str,
            'availability_zone_id': str,
            'tags': List
        }

        self.attribute_map = {
            'owner_id': 'OwnerId',
            'creation_token': 'CreationToken',
            'file_system_id': 'FileSystemId',
            'file_system_arn': 'FileSystemArn',
            'creation_time': 'CreationTime',
            'life_cycle_state': 'LifeCycleState',
            'name': 'Name',
            'number_of_mount_targets': 'NumberOfMountTargets',
            'size_in_bytes': 'SizeInBytes',
            'performance_mode': 'PerformanceMode',
            'encrypted': 'Encrypted',
            'kms_key_id': 'KmsKeyId',
            'throughput_mode': 'ThroughputMode',
            'provisioned_throughput_in_mibps': 'ProvisionedThroughputInMibps',
            'availability_zone_name': 'AvailabilityZoneName',
            'availability_zone_id': 'AvailabilityZoneId',
            'tags': 'Tags'
        }

        self._owner_id = owner_id
        self._creation_token = creation_token
        self._file_system_id = file_system_id
        self._file_system_arn = file_system_arn
        self._creation_time = creation_time
        self._life_cycle_state = life_cycle_state
        self._name = name
        self._number_of_mount_targets = number_of_mount_targets
        self._size_in_bytes = size_in_bytes
        self._performance_mode = performance_mode
        self._encrypted = encrypted
        self._kms_key_id = kms_key_id
        self._throughput_mode = throughput_mode
        self._provisioned_throughput_in_mibps = provisioned_throughput_in_mibps
        self._availability_zone_name = availability_zone_name
        self._availability_zone_id = availability_zone_id
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FileSystemDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FileSystemDescription of this FileSystemDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def owner_id(self):
        """Gets the owner_id of this FileSystemDescription.


        :return: The owner_id of this FileSystemDescription.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this FileSystemDescription.


        :param owner_id: The owner_id of this FileSystemDescription.
        :type owner_id: str
        """
        if owner_id is None:
            raise ValueError("Invalid value for `owner_id`, must not be `None`")

        self._owner_id = owner_id

    @property
    def creation_token(self):
        """Gets the creation_token of this FileSystemDescription.


        :return: The creation_token of this FileSystemDescription.
        :rtype: str
        """
        return self._creation_token

    @creation_token.setter
    def creation_token(self, creation_token):
        """Sets the creation_token of this FileSystemDescription.


        :param creation_token: The creation_token of this FileSystemDescription.
        :type creation_token: str
        """
        if creation_token is None:
            raise ValueError("Invalid value for `creation_token`, must not be `None`")

        self._creation_token = creation_token

    @property
    def file_system_id(self):
        """Gets the file_system_id of this FileSystemDescription.


        :return: The file_system_id of this FileSystemDescription.
        :rtype: str
        """
        return self._file_system_id

    @file_system_id.setter
    def file_system_id(self, file_system_id):
        """Sets the file_system_id of this FileSystemDescription.


        :param file_system_id: The file_system_id of this FileSystemDescription.
        :type file_system_id: str
        """
        if file_system_id is None:
            raise ValueError("Invalid value for `file_system_id`, must not be `None`")

        self._file_system_id = file_system_id

    @property
    def file_system_arn(self):
        """Gets the file_system_arn of this FileSystemDescription.


        :return: The file_system_arn of this FileSystemDescription.
        :rtype: str
        """
        return self._file_system_arn

    @file_system_arn.setter
    def file_system_arn(self, file_system_arn):
        """Sets the file_system_arn of this FileSystemDescription.


        :param file_system_arn: The file_system_arn of this FileSystemDescription.
        :type file_system_arn: str
        """

        self._file_system_arn = file_system_arn

    @property
    def creation_time(self):
        """Gets the creation_time of this FileSystemDescription.


        :return: The creation_time of this FileSystemDescription.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this FileSystemDescription.


        :param creation_time: The creation_time of this FileSystemDescription.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def life_cycle_state(self):
        """Gets the life_cycle_state of this FileSystemDescription.


        :return: The life_cycle_state of this FileSystemDescription.
        :rtype: LifeCycleState
        """
        return self._life_cycle_state

    @life_cycle_state.setter
    def life_cycle_state(self, life_cycle_state):
        """Sets the life_cycle_state of this FileSystemDescription.


        :param life_cycle_state: The life_cycle_state of this FileSystemDescription.
        :type life_cycle_state: LifeCycleState
        """
        if life_cycle_state is None:
            raise ValueError("Invalid value for `life_cycle_state`, must not be `None`")

        self._life_cycle_state = life_cycle_state

    @property
    def name(self):
        """Gets the name of this FileSystemDescription.


        :return: The name of this FileSystemDescription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FileSystemDescription.


        :param name: The name of this FileSystemDescription.
        :type name: str
        """

        self._name = name

    @property
    def number_of_mount_targets(self):
        """Gets the number_of_mount_targets of this FileSystemDescription.


        :return: The number_of_mount_targets of this FileSystemDescription.
        :rtype: int
        """
        return self._number_of_mount_targets

    @number_of_mount_targets.setter
    def number_of_mount_targets(self, number_of_mount_targets):
        """Sets the number_of_mount_targets of this FileSystemDescription.


        :param number_of_mount_targets: The number_of_mount_targets of this FileSystemDescription.
        :type number_of_mount_targets: int
        """
        if number_of_mount_targets is None:
            raise ValueError("Invalid value for `number_of_mount_targets`, must not be `None`")

        self._number_of_mount_targets = number_of_mount_targets

    @property
    def size_in_bytes(self):
        """Gets the size_in_bytes of this FileSystemDescription.


        :return: The size_in_bytes of this FileSystemDescription.
        :rtype: FileSystemDescriptionSizeInBytes
        """
        return self._size_in_bytes

    @size_in_bytes.setter
    def size_in_bytes(self, size_in_bytes):
        """Sets the size_in_bytes of this FileSystemDescription.


        :param size_in_bytes: The size_in_bytes of this FileSystemDescription.
        :type size_in_bytes: FileSystemDescriptionSizeInBytes
        """
        if size_in_bytes is None:
            raise ValueError("Invalid value for `size_in_bytes`, must not be `None`")

        self._size_in_bytes = size_in_bytes

    @property
    def performance_mode(self):
        """Gets the performance_mode of this FileSystemDescription.


        :return: The performance_mode of this FileSystemDescription.
        :rtype: PerformanceMode
        """
        return self._performance_mode

    @performance_mode.setter
    def performance_mode(self, performance_mode):
        """Sets the performance_mode of this FileSystemDescription.


        :param performance_mode: The performance_mode of this FileSystemDescription.
        :type performance_mode: PerformanceMode
        """
        if performance_mode is None:
            raise ValueError("Invalid value for `performance_mode`, must not be `None`")

        self._performance_mode = performance_mode

    @property
    def encrypted(self):
        """Gets the encrypted of this FileSystemDescription.


        :return: The encrypted of this FileSystemDescription.
        :rtype: bool
        """
        return self._encrypted

    @encrypted.setter
    def encrypted(self, encrypted):
        """Sets the encrypted of this FileSystemDescription.


        :param encrypted: The encrypted of this FileSystemDescription.
        :type encrypted: bool
        """

        self._encrypted = encrypted

    @property
    def kms_key_id(self):
        """Gets the kms_key_id of this FileSystemDescription.


        :return: The kms_key_id of this FileSystemDescription.
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id):
        """Sets the kms_key_id of this FileSystemDescription.


        :param kms_key_id: The kms_key_id of this FileSystemDescription.
        :type kms_key_id: str
        """

        self._kms_key_id = kms_key_id

    @property
    def throughput_mode(self):
        """Gets the throughput_mode of this FileSystemDescription.


        :return: The throughput_mode of this FileSystemDescription.
        :rtype: ThroughputMode
        """
        return self._throughput_mode

    @throughput_mode.setter
    def throughput_mode(self, throughput_mode):
        """Sets the throughput_mode of this FileSystemDescription.


        :param throughput_mode: The throughput_mode of this FileSystemDescription.
        :type throughput_mode: ThroughputMode
        """

        self._throughput_mode = throughput_mode

    @property
    def provisioned_throughput_in_mibps(self):
        """Gets the provisioned_throughput_in_mibps of this FileSystemDescription.


        :return: The provisioned_throughput_in_mibps of this FileSystemDescription.
        :rtype: float
        """
        return self._provisioned_throughput_in_mibps

    @provisioned_throughput_in_mibps.setter
    def provisioned_throughput_in_mibps(self, provisioned_throughput_in_mibps):
        """Sets the provisioned_throughput_in_mibps of this FileSystemDescription.


        :param provisioned_throughput_in_mibps: The provisioned_throughput_in_mibps of this FileSystemDescription.
        :type provisioned_throughput_in_mibps: float
        """

        self._provisioned_throughput_in_mibps = provisioned_throughput_in_mibps

    @property
    def availability_zone_name(self):
        """Gets the availability_zone_name of this FileSystemDescription.


        :return: The availability_zone_name of this FileSystemDescription.
        :rtype: str
        """
        return self._availability_zone_name

    @availability_zone_name.setter
    def availability_zone_name(self, availability_zone_name):
        """Sets the availability_zone_name of this FileSystemDescription.


        :param availability_zone_name: The availability_zone_name of this FileSystemDescription.
        :type availability_zone_name: str
        """

        self._availability_zone_name = availability_zone_name

    @property
    def availability_zone_id(self):
        """Gets the availability_zone_id of this FileSystemDescription.


        :return: The availability_zone_id of this FileSystemDescription.
        :rtype: str
        """
        return self._availability_zone_id

    @availability_zone_id.setter
    def availability_zone_id(self, availability_zone_id):
        """Sets the availability_zone_id of this FileSystemDescription.


        :param availability_zone_id: The availability_zone_id of this FileSystemDescription.
        :type availability_zone_id: str
        """

        self._availability_zone_id = availability_zone_id

    @property
    def tags(self):
        """Gets the tags of this FileSystemDescription.


        :return: The tags of this FileSystemDescription.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this FileSystemDescription.


        :param tags: The tags of this FileSystemDescription.
        :type tags: List
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")

        self._tags = tags
