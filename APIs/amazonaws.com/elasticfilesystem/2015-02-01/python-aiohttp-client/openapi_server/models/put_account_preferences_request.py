# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutAccountPreferencesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_id_type: str=None):
        """PutAccountPreferencesRequest - a model defined in OpenAPI

        :param resource_id_type: The resource_id_type of this PutAccountPreferencesRequest.
        """
        self.openapi_types = {
            'resource_id_type': str
        }

        self.attribute_map = {
            'resource_id_type': 'ResourceIdType'
        }

        self._resource_id_type = resource_id_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutAccountPreferencesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutAccountPreferences_request of this PutAccountPreferencesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_id_type(self):
        """Gets the resource_id_type of this PutAccountPreferencesRequest.

        A preference indicating a choice to use 63bit/32bit IDs for all applicable resources.

        :return: The resource_id_type of this PutAccountPreferencesRequest.
        :rtype: str
        """
        return self._resource_id_type

    @resource_id_type.setter
    def resource_id_type(self, resource_id_type):
        """Sets the resource_id_type of this PutAccountPreferencesRequest.

        A preference indicating a choice to use 63bit/32bit IDs for all applicable resources.

        :param resource_id_type: The resource_id_type of this PutAccountPreferencesRequest.
        :type resource_id_type: str
        """
        allowed_values = ["LONG_ID", "SHORT_ID"]  # noqa: E501
        if resource_id_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_id_type` ({0}), must be one of {1}"
                .format(resource_id_type, allowed_values)
            )

        self._resource_id_type = resource_id_type
