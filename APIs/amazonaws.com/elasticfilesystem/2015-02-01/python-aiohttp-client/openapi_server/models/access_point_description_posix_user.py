# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccessPointDescriptionPosixUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, uid: int=None, gid: int=None, secondary_gids: List=None):
        """AccessPointDescriptionPosixUser - a model defined in OpenAPI

        :param uid: The uid of this AccessPointDescriptionPosixUser.
        :param gid: The gid of this AccessPointDescriptionPosixUser.
        :param secondary_gids: The secondary_gids of this AccessPointDescriptionPosixUser.
        """
        self.openapi_types = {
            'uid': int,
            'gid': int,
            'secondary_gids': List
        }

        self.attribute_map = {
            'uid': 'Uid',
            'gid': 'Gid',
            'secondary_gids': 'SecondaryGids'
        }

        self._uid = uid
        self._gid = gid
        self._secondary_gids = secondary_gids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccessPointDescriptionPosixUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccessPointDescription_PosixUser of this AccessPointDescriptionPosixUser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uid(self):
        """Gets the uid of this AccessPointDescriptionPosixUser.


        :return: The uid of this AccessPointDescriptionPosixUser.
        :rtype: int
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this AccessPointDescriptionPosixUser.


        :param uid: The uid of this AccessPointDescriptionPosixUser.
        :type uid: int
        """
        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")

        self._uid = uid

    @property
    def gid(self):
        """Gets the gid of this AccessPointDescriptionPosixUser.


        :return: The gid of this AccessPointDescriptionPosixUser.
        :rtype: int
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this AccessPointDescriptionPosixUser.


        :param gid: The gid of this AccessPointDescriptionPosixUser.
        :type gid: int
        """
        if gid is None:
            raise ValueError("Invalid value for `gid`, must not be `None`")

        self._gid = gid

    @property
    def secondary_gids(self):
        """Gets the secondary_gids of this AccessPointDescriptionPosixUser.


        :return: The secondary_gids of this AccessPointDescriptionPosixUser.
        :rtype: List
        """
        return self._secondary_gids

    @secondary_gids.setter
    def secondary_gids(self, secondary_gids):
        """Sets the secondary_gids of this AccessPointDescriptionPosixUser.


        :param secondary_gids: The secondary_gids of this AccessPointDescriptionPosixUser.
        :type secondary_gids: List
        """

        self._secondary_gids = secondary_gids
