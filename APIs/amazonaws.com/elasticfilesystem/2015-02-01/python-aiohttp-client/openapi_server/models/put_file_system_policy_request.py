# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class PutFileSystemPolicyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, policy: str=None, bypass_policy_lockout_safety_check: bool=None):
        """PutFileSystemPolicyRequest - a model defined in OpenAPI

        :param policy: The policy of this PutFileSystemPolicyRequest.
        :param bypass_policy_lockout_safety_check: The bypass_policy_lockout_safety_check of this PutFileSystemPolicyRequest.
        """
        self.openapi_types = {
            'policy': str,
            'bypass_policy_lockout_safety_check': bool
        }

        self.attribute_map = {
            'policy': 'Policy',
            'bypass_policy_lockout_safety_check': 'BypassPolicyLockoutSafetyCheck'
        }

        self._policy = policy
        self._bypass_policy_lockout_safety_check = bypass_policy_lockout_safety_check

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutFileSystemPolicyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutFileSystemPolicy_request of this PutFileSystemPolicyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def policy(self):
        """Gets the policy of this PutFileSystemPolicyRequest.

        The <code>FileSystemPolicy</code> that you're creating. Accepts a JSON formatted policy definition. EFS file system policies have a 20,000 character limit. To find out more about the elements that make up a file system policy, see <a href=\"https://docs.aws.amazon.com/efs/latest/ug/access-control-overview.html#access-control-manage-access-intro-resource-policies\">EFS Resource-based Policies</a>. 

        :return: The policy of this PutFileSystemPolicyRequest.
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this PutFileSystemPolicyRequest.

        The <code>FileSystemPolicy</code> that you're creating. Accepts a JSON formatted policy definition. EFS file system policies have a 20,000 character limit. To find out more about the elements that make up a file system policy, see <a href=\"https://docs.aws.amazon.com/efs/latest/ug/access-control-overview.html#access-control-manage-access-intro-resource-policies\">EFS Resource-based Policies</a>. 

        :param policy: The policy of this PutFileSystemPolicyRequest.
        :type policy: str
        """
        if policy is None:
            raise ValueError("Invalid value for `policy`, must not be `None`")
        if policy is not None and len(policy) > 20000:
            raise ValueError("Invalid value for `policy`, length must be less than or equal to `20000`")
        if policy is not None and len(policy) < 1:
            raise ValueError("Invalid value for `policy`, length must be greater than or equal to `1`")
        if policy is not None and not re.search(r'[\s\S]+', policy):
            raise ValueError("Invalid value for `policy`, must be a follow pattern or equal to `/[\s\S]+/`")

        self._policy = policy

    @property
    def bypass_policy_lockout_safety_check(self):
        """Gets the bypass_policy_lockout_safety_check of this PutFileSystemPolicyRequest.

        (Optional) A boolean that specifies whether or not to bypass the <code>FileSystemPolicy</code> lockout safety check. The lockout safety check determines whether the policy in the request will lock out, or prevent, the IAM principal that is making the request from making future <code>PutFileSystemPolicy</code> requests on this file system. Set <code>BypassPolicyLockoutSafetyCheck</code> to <code>True</code> only when you intend to prevent the IAM principal that is making the request from making subsequent <code>PutFileSystemPolicy</code> requests on this file system. The default value is <code>False</code>. 

        :return: The bypass_policy_lockout_safety_check of this PutFileSystemPolicyRequest.
        :rtype: bool
        """
        return self._bypass_policy_lockout_safety_check

    @bypass_policy_lockout_safety_check.setter
    def bypass_policy_lockout_safety_check(self, bypass_policy_lockout_safety_check):
        """Sets the bypass_policy_lockout_safety_check of this PutFileSystemPolicyRequest.

        (Optional) A boolean that specifies whether or not to bypass the <code>FileSystemPolicy</code> lockout safety check. The lockout safety check determines whether the policy in the request will lock out, or prevent, the IAM principal that is making the request from making future <code>PutFileSystemPolicy</code> requests on this file system. Set <code>BypassPolicyLockoutSafetyCheck</code> to <code>True</code> only when you intend to prevent the IAM principal that is making the request from making subsequent <code>PutFileSystemPolicy</code> requests on this file system. The default value is <code>False</code>. 

        :param bypass_policy_lockout_safety_check: The bypass_policy_lockout_safety_check of this PutFileSystemPolicyRequest.
        :type bypass_policy_lockout_safety_check: bool
        """

        self._bypass_policy_lockout_safety_check = bypass_policy_lockout_safety_check
