/**
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMountTargetDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMountTargetDescription::OAIMountTargetDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMountTargetDescription::OAIMountTargetDescription() {
    this->initializeModel();
}

OAIMountTargetDescription::~OAIMountTargetDescription() {}

void OAIMountTargetDescription::initializeModel() {

    m_owner_id_isSet = false;
    m_owner_id_isValid = false;

    m_mount_target_id_isSet = false;
    m_mount_target_id_isValid = false;

    m_file_system_id_isSet = false;
    m_file_system_id_isValid = false;

    m_subnet_id_isSet = false;
    m_subnet_id_isValid = false;

    m_life_cycle_state_isSet = false;
    m_life_cycle_state_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_network_interface_id_isSet = false;
    m_network_interface_id_isValid = false;

    m_availability_zone_id_isSet = false;
    m_availability_zone_id_isValid = false;

    m_availability_zone_name_isSet = false;
    m_availability_zone_name_isValid = false;

    m_vpc_id_isSet = false;
    m_vpc_id_isValid = false;
}

void OAIMountTargetDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMountTargetDescription::fromJsonObject(QJsonObject json) {

    m_owner_id_isValid = ::OpenAPI::fromJsonValue(m_owner_id, json[QString("OwnerId")]);
    m_owner_id_isSet = !json[QString("OwnerId")].isNull() && m_owner_id_isValid;

    m_mount_target_id_isValid = ::OpenAPI::fromJsonValue(m_mount_target_id, json[QString("MountTargetId")]);
    m_mount_target_id_isSet = !json[QString("MountTargetId")].isNull() && m_mount_target_id_isValid;

    m_file_system_id_isValid = ::OpenAPI::fromJsonValue(m_file_system_id, json[QString("FileSystemId")]);
    m_file_system_id_isSet = !json[QString("FileSystemId")].isNull() && m_file_system_id_isValid;

    m_subnet_id_isValid = ::OpenAPI::fromJsonValue(m_subnet_id, json[QString("SubnetId")]);
    m_subnet_id_isSet = !json[QString("SubnetId")].isNull() && m_subnet_id_isValid;

    m_life_cycle_state_isValid = ::OpenAPI::fromJsonValue(m_life_cycle_state, json[QString("LifeCycleState")]);
    m_life_cycle_state_isSet = !json[QString("LifeCycleState")].isNull() && m_life_cycle_state_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("IpAddress")]);
    m_ip_address_isSet = !json[QString("IpAddress")].isNull() && m_ip_address_isValid;

    m_network_interface_id_isValid = ::OpenAPI::fromJsonValue(m_network_interface_id, json[QString("NetworkInterfaceId")]);
    m_network_interface_id_isSet = !json[QString("NetworkInterfaceId")].isNull() && m_network_interface_id_isValid;

    m_availability_zone_id_isValid = ::OpenAPI::fromJsonValue(m_availability_zone_id, json[QString("AvailabilityZoneId")]);
    m_availability_zone_id_isSet = !json[QString("AvailabilityZoneId")].isNull() && m_availability_zone_id_isValid;

    m_availability_zone_name_isValid = ::OpenAPI::fromJsonValue(m_availability_zone_name, json[QString("AvailabilityZoneName")]);
    m_availability_zone_name_isSet = !json[QString("AvailabilityZoneName")].isNull() && m_availability_zone_name_isValid;

    m_vpc_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_id, json[QString("VpcId")]);
    m_vpc_id_isSet = !json[QString("VpcId")].isNull() && m_vpc_id_isValid;
}

QString OAIMountTargetDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMountTargetDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_owner_id_isSet) {
        obj.insert(QString("OwnerId"), ::OpenAPI::toJsonValue(m_owner_id));
    }
    if (m_mount_target_id_isSet) {
        obj.insert(QString("MountTargetId"), ::OpenAPI::toJsonValue(m_mount_target_id));
    }
    if (m_file_system_id_isSet) {
        obj.insert(QString("FileSystemId"), ::OpenAPI::toJsonValue(m_file_system_id));
    }
    if (m_subnet_id_isSet) {
        obj.insert(QString("SubnetId"), ::OpenAPI::toJsonValue(m_subnet_id));
    }
    if (m_life_cycle_state.isSet()) {
        obj.insert(QString("LifeCycleState"), ::OpenAPI::toJsonValue(m_life_cycle_state));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("IpAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_network_interface_id_isSet) {
        obj.insert(QString("NetworkInterfaceId"), ::OpenAPI::toJsonValue(m_network_interface_id));
    }
    if (m_availability_zone_id_isSet) {
        obj.insert(QString("AvailabilityZoneId"), ::OpenAPI::toJsonValue(m_availability_zone_id));
    }
    if (m_availability_zone_name_isSet) {
        obj.insert(QString("AvailabilityZoneName"), ::OpenAPI::toJsonValue(m_availability_zone_name));
    }
    if (m_vpc_id_isSet) {
        obj.insert(QString("VpcId"), ::OpenAPI::toJsonValue(m_vpc_id));
    }
    return obj;
}

QString OAIMountTargetDescription::getOwnerId() const {
    return m_owner_id;
}
void OAIMountTargetDescription::setOwnerId(const QString &owner_id) {
    m_owner_id = owner_id;
    m_owner_id_isSet = true;
}

bool OAIMountTargetDescription::is_owner_id_Set() const{
    return m_owner_id_isSet;
}

bool OAIMountTargetDescription::is_owner_id_Valid() const{
    return m_owner_id_isValid;
}

QString OAIMountTargetDescription::getMountTargetId() const {
    return m_mount_target_id;
}
void OAIMountTargetDescription::setMountTargetId(const QString &mount_target_id) {
    m_mount_target_id = mount_target_id;
    m_mount_target_id_isSet = true;
}

bool OAIMountTargetDescription::is_mount_target_id_Set() const{
    return m_mount_target_id_isSet;
}

bool OAIMountTargetDescription::is_mount_target_id_Valid() const{
    return m_mount_target_id_isValid;
}

QString OAIMountTargetDescription::getFileSystemId() const {
    return m_file_system_id;
}
void OAIMountTargetDescription::setFileSystemId(const QString &file_system_id) {
    m_file_system_id = file_system_id;
    m_file_system_id_isSet = true;
}

bool OAIMountTargetDescription::is_file_system_id_Set() const{
    return m_file_system_id_isSet;
}

bool OAIMountTargetDescription::is_file_system_id_Valid() const{
    return m_file_system_id_isValid;
}

QString OAIMountTargetDescription::getSubnetId() const {
    return m_subnet_id;
}
void OAIMountTargetDescription::setSubnetId(const QString &subnet_id) {
    m_subnet_id = subnet_id;
    m_subnet_id_isSet = true;
}

bool OAIMountTargetDescription::is_subnet_id_Set() const{
    return m_subnet_id_isSet;
}

bool OAIMountTargetDescription::is_subnet_id_Valid() const{
    return m_subnet_id_isValid;
}

OAILifeCycleState OAIMountTargetDescription::getLifeCycleState() const {
    return m_life_cycle_state;
}
void OAIMountTargetDescription::setLifeCycleState(const OAILifeCycleState &life_cycle_state) {
    m_life_cycle_state = life_cycle_state;
    m_life_cycle_state_isSet = true;
}

bool OAIMountTargetDescription::is_life_cycle_state_Set() const{
    return m_life_cycle_state_isSet;
}

bool OAIMountTargetDescription::is_life_cycle_state_Valid() const{
    return m_life_cycle_state_isValid;
}

QString OAIMountTargetDescription::getIpAddress() const {
    return m_ip_address;
}
void OAIMountTargetDescription::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIMountTargetDescription::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIMountTargetDescription::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAIMountTargetDescription::getNetworkInterfaceId() const {
    return m_network_interface_id;
}
void OAIMountTargetDescription::setNetworkInterfaceId(const QString &network_interface_id) {
    m_network_interface_id = network_interface_id;
    m_network_interface_id_isSet = true;
}

bool OAIMountTargetDescription::is_network_interface_id_Set() const{
    return m_network_interface_id_isSet;
}

bool OAIMountTargetDescription::is_network_interface_id_Valid() const{
    return m_network_interface_id_isValid;
}

QString OAIMountTargetDescription::getAvailabilityZoneId() const {
    return m_availability_zone_id;
}
void OAIMountTargetDescription::setAvailabilityZoneId(const QString &availability_zone_id) {
    m_availability_zone_id = availability_zone_id;
    m_availability_zone_id_isSet = true;
}

bool OAIMountTargetDescription::is_availability_zone_id_Set() const{
    return m_availability_zone_id_isSet;
}

bool OAIMountTargetDescription::is_availability_zone_id_Valid() const{
    return m_availability_zone_id_isValid;
}

QString OAIMountTargetDescription::getAvailabilityZoneName() const {
    return m_availability_zone_name;
}
void OAIMountTargetDescription::setAvailabilityZoneName(const QString &availability_zone_name) {
    m_availability_zone_name = availability_zone_name;
    m_availability_zone_name_isSet = true;
}

bool OAIMountTargetDescription::is_availability_zone_name_Set() const{
    return m_availability_zone_name_isSet;
}

bool OAIMountTargetDescription::is_availability_zone_name_Valid() const{
    return m_availability_zone_name_isValid;
}

QString OAIMountTargetDescription::getVpcId() const {
    return m_vpc_id;
}
void OAIMountTargetDescription::setVpcId(const QString &vpc_id) {
    m_vpc_id = vpc_id;
    m_vpc_id_isSet = true;
}

bool OAIMountTargetDescription::is_vpc_id_Set() const{
    return m_vpc_id_isSet;
}

bool OAIMountTargetDescription::is_vpc_id_Valid() const{
    return m_vpc_id_isValid;
}

bool OAIMountTargetDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_owner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mount_target_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_life_cycle_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_interface_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zone_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zone_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMountTargetDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_mount_target_id_isValid && m_file_system_id_isValid && m_subnet_id_isValid && m_life_cycle_state_isValid && true;
}

} // namespace OpenAPI
