/**
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAccessPointDescription.h
 *
 * Provides a description of an EFS file system access point.
 */

#ifndef OAIAccessPointDescription_H
#define OAIAccessPointDescription_H

#include <QJsonObject>

#include "OAIAccessPointDescription_PosixUser.h"
#include "OAIAccessPointDescription_RootDirectory.h"
#include "OAILifeCycleState.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAccessPointDescription_PosixUser;
class OAIAccessPointDescription_RootDirectory;

class OAIAccessPointDescription : public OAIObject {
public:
    OAIAccessPointDescription();
    OAIAccessPointDescription(QString json);
    ~OAIAccessPointDescription() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getClientToken() const;
    void setClientToken(const QString &client_token);
    bool is_client_token_Set() const;
    bool is_client_token_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getAccessPointId() const;
    void setAccessPointId(const QString &access_point_id);
    bool is_access_point_id_Set() const;
    bool is_access_point_id_Valid() const;

    QString getAccessPointArn() const;
    void setAccessPointArn(const QString &access_point_arn);
    bool is_access_point_arn_Set() const;
    bool is_access_point_arn_Valid() const;

    QString getFileSystemId() const;
    void setFileSystemId(const QString &file_system_id);
    bool is_file_system_id_Set() const;
    bool is_file_system_id_Valid() const;

    OAIAccessPointDescription_PosixUser getPosixUser() const;
    void setPosixUser(const OAIAccessPointDescription_PosixUser &posix_user);
    bool is_posix_user_Set() const;
    bool is_posix_user_Valid() const;

    OAIAccessPointDescription_RootDirectory getRootDirectory() const;
    void setRootDirectory(const OAIAccessPointDescription_RootDirectory &root_directory);
    bool is_root_directory_Set() const;
    bool is_root_directory_Valid() const;

    QString getOwnerId() const;
    void setOwnerId(const QString &owner_id);
    bool is_owner_id_Set() const;
    bool is_owner_id_Valid() const;

    OAILifeCycleState getLifeCycleState() const;
    void setLifeCycleState(const OAILifeCycleState &life_cycle_state);
    bool is_life_cycle_state_Set() const;
    bool is_life_cycle_state_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_client_token;
    bool m_client_token_isSet;
    bool m_client_token_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_access_point_id;
    bool m_access_point_id_isSet;
    bool m_access_point_id_isValid;

    QString m_access_point_arn;
    bool m_access_point_arn_isSet;
    bool m_access_point_arn_isValid;

    QString m_file_system_id;
    bool m_file_system_id_isSet;
    bool m_file_system_id_isValid;

    OAIAccessPointDescription_PosixUser m_posix_user;
    bool m_posix_user_isSet;
    bool m_posix_user_isValid;

    OAIAccessPointDescription_RootDirectory m_root_directory;
    bool m_root_directory_isSet;
    bool m_root_directory_isValid;

    QString m_owner_id;
    bool m_owner_id_isSet;
    bool m_owner_id_isValid;

    OAILifeCycleState m_life_cycle_state;
    bool m_life_cycle_state_isSet;
    bool m_life_cycle_state_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAccessPointDescription)

#endif // OAIAccessPointDescription_H
