/**
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateReplicationConfiguration_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateReplicationConfiguration_request::OAICreateReplicationConfiguration_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateReplicationConfiguration_request::OAICreateReplicationConfiguration_request() {
    this->initializeModel();
}

OAICreateReplicationConfiguration_request::~OAICreateReplicationConfiguration_request() {}

void OAICreateReplicationConfiguration_request::initializeModel() {

    m_destinations_isSet = false;
    m_destinations_isValid = false;
}

void OAICreateReplicationConfiguration_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateReplicationConfiguration_request::fromJsonObject(QJsonObject json) {

    m_destinations_isValid = ::OpenAPI::fromJsonValue(m_destinations, json[QString("Destinations")]);
    m_destinations_isSet = !json[QString("Destinations")].isNull() && m_destinations_isValid;
}

QString OAICreateReplicationConfiguration_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateReplicationConfiguration_request::asJsonObject() const {
    QJsonObject obj;
    if (m_destinations.size() > 0) {
        obj.insert(QString("Destinations"), ::OpenAPI::toJsonValue(m_destinations));
    }
    return obj;
}

QList<OAIDestinationToCreate> OAICreateReplicationConfiguration_request::getDestinations() const {
    return m_destinations;
}
void OAICreateReplicationConfiguration_request::setDestinations(const QList<OAIDestinationToCreate> &destinations) {
    m_destinations = destinations;
    m_destinations_isSet = true;
}

bool OAICreateReplicationConfiguration_request::is_destinations_Set() const{
    return m_destinations_isSet;
}

bool OAICreateReplicationConfiguration_request::is_destinations_Valid() const{
    return m_destinations_isValid;
}

bool OAICreateReplicationConfiguration_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destinations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateReplicationConfiguration_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_destinations_isValid && true;
}

} // namespace OpenAPI
