/**
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceIdPreference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceIdPreference::OAIResourceIdPreference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceIdPreference::OAIResourceIdPreference() {
    this->initializeModel();
}

OAIResourceIdPreference::~OAIResourceIdPreference() {}

void OAIResourceIdPreference::initializeModel() {

    m_resource_id_type_isSet = false;
    m_resource_id_type_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;
}

void OAIResourceIdPreference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceIdPreference::fromJsonObject(QJsonObject json) {

    m_resource_id_type_isValid = ::OpenAPI::fromJsonValue(m_resource_id_type, json[QString("ResourceIdType")]);
    m_resource_id_type_isSet = !json[QString("ResourceIdType")].isNull() && m_resource_id_type_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("Resources")]);
    m_resources_isSet = !json[QString("Resources")].isNull() && m_resources_isValid;
}

QString OAIResourceIdPreference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceIdPreference::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_id_type.isSet()) {
        obj.insert(QString("ResourceIdType"), ::OpenAPI::toJsonValue(m_resource_id_type));
    }
    if (m_resources.isSet()) {
        obj.insert(QString("Resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    return obj;
}

OAIResourceIdType OAIResourceIdPreference::getResourceIdType() const {
    return m_resource_id_type;
}
void OAIResourceIdPreference::setResourceIdType(const OAIResourceIdType &resource_id_type) {
    m_resource_id_type = resource_id_type;
    m_resource_id_type_isSet = true;
}

bool OAIResourceIdPreference::is_resource_id_type_Set() const{
    return m_resource_id_type_isSet;
}

bool OAIResourceIdPreference::is_resource_id_type_Valid() const{
    return m_resource_id_type_isValid;
}

QList OAIResourceIdPreference::getResources() const {
    return m_resources;
}
void OAIResourceIdPreference::setResources(const QList &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIResourceIdPreference::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIResourceIdPreference::is_resources_Valid() const{
    return m_resources_isValid;
}

bool OAIResourceIdPreference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_id_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceIdPreference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
