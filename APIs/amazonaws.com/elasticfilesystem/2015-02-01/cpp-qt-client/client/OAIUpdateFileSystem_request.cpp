/**
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateFileSystem_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateFileSystem_request::OAIUpdateFileSystem_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateFileSystem_request::OAIUpdateFileSystem_request() {
    this->initializeModel();
}

OAIUpdateFileSystem_request::~OAIUpdateFileSystem_request() {}

void OAIUpdateFileSystem_request::initializeModel() {

    m_throughput_mode_isSet = false;
    m_throughput_mode_isValid = false;

    m_provisioned_throughput_in_mibps_isSet = false;
    m_provisioned_throughput_in_mibps_isValid = false;
}

void OAIUpdateFileSystem_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateFileSystem_request::fromJsonObject(QJsonObject json) {

    m_throughput_mode_isValid = ::OpenAPI::fromJsonValue(m_throughput_mode, json[QString("ThroughputMode")]);
    m_throughput_mode_isSet = !json[QString("ThroughputMode")].isNull() && m_throughput_mode_isValid;

    m_provisioned_throughput_in_mibps_isValid = ::OpenAPI::fromJsonValue(m_provisioned_throughput_in_mibps, json[QString("ProvisionedThroughputInMibps")]);
    m_provisioned_throughput_in_mibps_isSet = !json[QString("ProvisionedThroughputInMibps")].isNull() && m_provisioned_throughput_in_mibps_isValid;
}

QString OAIUpdateFileSystem_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateFileSystem_request::asJsonObject() const {
    QJsonObject obj;
    if (m_throughput_mode_isSet) {
        obj.insert(QString("ThroughputMode"), ::OpenAPI::toJsonValue(m_throughput_mode));
    }
    if (m_provisioned_throughput_in_mibps_isSet) {
        obj.insert(QString("ProvisionedThroughputInMibps"), ::OpenAPI::toJsonValue(m_provisioned_throughput_in_mibps));
    }
    return obj;
}

QString OAIUpdateFileSystem_request::getThroughputMode() const {
    return m_throughput_mode;
}
void OAIUpdateFileSystem_request::setThroughputMode(const QString &throughput_mode) {
    m_throughput_mode = throughput_mode;
    m_throughput_mode_isSet = true;
}

bool OAIUpdateFileSystem_request::is_throughput_mode_Set() const{
    return m_throughput_mode_isSet;
}

bool OAIUpdateFileSystem_request::is_throughput_mode_Valid() const{
    return m_throughput_mode_isValid;
}

double OAIUpdateFileSystem_request::getProvisionedThroughputInMibps() const {
    return m_provisioned_throughput_in_mibps;
}
void OAIUpdateFileSystem_request::setProvisionedThroughputInMibps(const double &provisioned_throughput_in_mibps) {
    m_provisioned_throughput_in_mibps = provisioned_throughput_in_mibps;
    m_provisioned_throughput_in_mibps_isSet = true;
}

bool OAIUpdateFileSystem_request::is_provisioned_throughput_in_mibps_Set() const{
    return m_provisioned_throughput_in_mibps_isSet;
}

bool OAIUpdateFileSystem_request::is_provisioned_throughput_in_mibps_Valid() const{
    return m_provisioned_throughput_in_mibps_isValid;
}

bool OAIUpdateFileSystem_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_throughput_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_throughput_in_mibps_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateFileSystem_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
