/**
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileSystemSize.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFileSystemSize::OAIFileSystemSize(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFileSystemSize::OAIFileSystemSize() {
    this->initializeModel();
}

OAIFileSystemSize::~OAIFileSystemSize() {}

void OAIFileSystemSize::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_value_in_ia_isSet = false;
    m_value_in_ia_isValid = false;

    m_value_in_standard_isSet = false;
    m_value_in_standard_isValid = false;
}

void OAIFileSystemSize::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFileSystemSize::fromJsonObject(QJsonObject json) {

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("Timestamp")]);
    m_timestamp_isSet = !json[QString("Timestamp")].isNull() && m_timestamp_isValid;

    m_value_in_ia_isValid = ::OpenAPI::fromJsonValue(m_value_in_ia, json[QString("ValueInIA")]);
    m_value_in_ia_isSet = !json[QString("ValueInIA")].isNull() && m_value_in_ia_isValid;

    m_value_in_standard_isValid = ::OpenAPI::fromJsonValue(m_value_in_standard, json[QString("ValueInStandard")]);
    m_value_in_standard_isSet = !json[QString("ValueInStandard")].isNull() && m_value_in_standard_isValid;
}

QString OAIFileSystemSize::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFileSystemSize::asJsonObject() const {
    QJsonObject obj;
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("Timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_value_in_ia_isSet) {
        obj.insert(QString("ValueInIA"), ::OpenAPI::toJsonValue(m_value_in_ia));
    }
    if (m_value_in_standard_isSet) {
        obj.insert(QString("ValueInStandard"), ::OpenAPI::toJsonValue(m_value_in_standard));
    }
    return obj;
}

qint32 OAIFileSystemSize::getValue() const {
    return m_value;
}
void OAIFileSystemSize::setValue(const qint32 &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIFileSystemSize::is_value_Set() const{
    return m_value_isSet;
}

bool OAIFileSystemSize::is_value_Valid() const{
    return m_value_isValid;
}

QDateTime OAIFileSystemSize::getTimestamp() const {
    return m_timestamp;
}
void OAIFileSystemSize::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIFileSystemSize::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIFileSystemSize::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

qint32 OAIFileSystemSize::getValueInIa() const {
    return m_value_in_ia;
}
void OAIFileSystemSize::setValueInIa(const qint32 &value_in_ia) {
    m_value_in_ia = value_in_ia;
    m_value_in_ia_isSet = true;
}

bool OAIFileSystemSize::is_value_in_ia_Set() const{
    return m_value_in_ia_isSet;
}

bool OAIFileSystemSize::is_value_in_ia_Valid() const{
    return m_value_in_ia_isValid;
}

qint32 OAIFileSystemSize::getValueInStandard() const {
    return m_value_in_standard;
}
void OAIFileSystemSize::setValueInStandard(const qint32 &value_in_standard) {
    m_value_in_standard = value_in_standard;
    m_value_in_standard_isSet = true;
}

bool OAIFileSystemSize::is_value_in_standard_Set() const{
    return m_value_in_standard_isSet;
}

bool OAIFileSystemSize::is_value_in_standard_Valid() const{
    return m_value_in_standard_isValid;
}

bool OAIFileSystemSize::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_in_ia_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_in_standard_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFileSystemSize::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid && true;
}

} // namespace OpenAPI
