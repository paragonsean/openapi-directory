/**
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackupPolicyDescription_BackupPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackupPolicyDescription_BackupPolicy::OAIBackupPolicyDescription_BackupPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackupPolicyDescription_BackupPolicy::OAIBackupPolicyDescription_BackupPolicy() {
    this->initializeModel();
}

OAIBackupPolicyDescription_BackupPolicy::~OAIBackupPolicyDescription_BackupPolicy() {}

void OAIBackupPolicyDescription_BackupPolicy::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIBackupPolicyDescription_BackupPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackupPolicyDescription_BackupPolicy::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIBackupPolicyDescription_BackupPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackupPolicyDescription_BackupPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIStatus OAIBackupPolicyDescription_BackupPolicy::getStatus() const {
    return m_status;
}
void OAIBackupPolicyDescription_BackupPolicy::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBackupPolicyDescription_BackupPolicy::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBackupPolicyDescription_BackupPolicy::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIBackupPolicyDescription_BackupPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackupPolicyDescription_BackupPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_isValid && true;
}

} // namespace OpenAPI
