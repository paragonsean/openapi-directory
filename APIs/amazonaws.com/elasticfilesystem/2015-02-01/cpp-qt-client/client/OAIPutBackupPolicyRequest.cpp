/**
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutBackupPolicyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutBackupPolicyRequest::OAIPutBackupPolicyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutBackupPolicyRequest::OAIPutBackupPolicyRequest() {
    this->initializeModel();
}

OAIPutBackupPolicyRequest::~OAIPutBackupPolicyRequest() {}

void OAIPutBackupPolicyRequest::initializeModel() {

    m_backup_policy_isSet = false;
    m_backup_policy_isValid = false;
}

void OAIPutBackupPolicyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutBackupPolicyRequest::fromJsonObject(QJsonObject json) {

    m_backup_policy_isValid = ::OpenAPI::fromJsonValue(m_backup_policy, json[QString("BackupPolicy")]);
    m_backup_policy_isSet = !json[QString("BackupPolicy")].isNull() && m_backup_policy_isValid;
}

QString OAIPutBackupPolicyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutBackupPolicyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_policy.isSet()) {
        obj.insert(QString("BackupPolicy"), ::OpenAPI::toJsonValue(m_backup_policy));
    }
    return obj;
}

OAIPutBackupPolicyRequest_BackupPolicy OAIPutBackupPolicyRequest::getBackupPolicy() const {
    return m_backup_policy;
}
void OAIPutBackupPolicyRequest::setBackupPolicy(const OAIPutBackupPolicyRequest_BackupPolicy &backup_policy) {
    m_backup_policy = backup_policy;
    m_backup_policy_isSet = true;
}

bool OAIPutBackupPolicyRequest::is_backup_policy_Set() const{
    return m_backup_policy_isSet;
}

bool OAIPutBackupPolicyRequest::is_backup_policy_Valid() const{
    return m_backup_policy_isValid;
}

bool OAIPutBackupPolicyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutBackupPolicyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_backup_policy_isValid && true;
}

} // namespace OpenAPI
