/**
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAccessPoint_request_RootDirectory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAccessPoint_request_RootDirectory::OAICreateAccessPoint_request_RootDirectory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAccessPoint_request_RootDirectory::OAICreateAccessPoint_request_RootDirectory() {
    this->initializeModel();
}

OAICreateAccessPoint_request_RootDirectory::~OAICreateAccessPoint_request_RootDirectory() {}

void OAICreateAccessPoint_request_RootDirectory::initializeModel() {

    m_path_isSet = false;
    m_path_isValid = false;

    m_creation_info_isSet = false;
    m_creation_info_isValid = false;
}

void OAICreateAccessPoint_request_RootDirectory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAccessPoint_request_RootDirectory::fromJsonObject(QJsonObject json) {

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("Path")]);
    m_path_isSet = !json[QString("Path")].isNull() && m_path_isValid;

    m_creation_info_isValid = ::OpenAPI::fromJsonValue(m_creation_info, json[QString("CreationInfo")]);
    m_creation_info_isSet = !json[QString("CreationInfo")].isNull() && m_creation_info_isValid;
}

QString OAICreateAccessPoint_request_RootDirectory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAccessPoint_request_RootDirectory::asJsonObject() const {
    QJsonObject obj;
    if (m_path_isSet) {
        obj.insert(QString("Path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_creation_info.isSet()) {
        obj.insert(QString("CreationInfo"), ::OpenAPI::toJsonValue(m_creation_info));
    }
    return obj;
}

QString OAICreateAccessPoint_request_RootDirectory::getPath() const {
    return m_path;
}
void OAICreateAccessPoint_request_RootDirectory::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAICreateAccessPoint_request_RootDirectory::is_path_Set() const{
    return m_path_isSet;
}

bool OAICreateAccessPoint_request_RootDirectory::is_path_Valid() const{
    return m_path_isValid;
}

OAICreateAccessPoint_request_RootDirectory_CreationInfo OAICreateAccessPoint_request_RootDirectory::getCreationInfo() const {
    return m_creation_info;
}
void OAICreateAccessPoint_request_RootDirectory::setCreationInfo(const OAICreateAccessPoint_request_RootDirectory_CreationInfo &creation_info) {
    m_creation_info = creation_info;
    m_creation_info_isSet = true;
}

bool OAICreateAccessPoint_request_RootDirectory::is_creation_info_Set() const{
    return m_creation_info_isSet;
}

bool OAICreateAccessPoint_request_RootDirectory::is_creation_info_Valid() const{
    return m_creation_info_isValid;
}

bool OAICreateAccessPoint_request_RootDirectory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAccessPoint_request_RootDirectory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
