/**
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAccessPoint_request_RootDirectory_CreationInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAccessPoint_request_RootDirectory_CreationInfo::OAICreateAccessPoint_request_RootDirectory_CreationInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAccessPoint_request_RootDirectory_CreationInfo::OAICreateAccessPoint_request_RootDirectory_CreationInfo() {
    this->initializeModel();
}

OAICreateAccessPoint_request_RootDirectory_CreationInfo::~OAICreateAccessPoint_request_RootDirectory_CreationInfo() {}

void OAICreateAccessPoint_request_RootDirectory_CreationInfo::initializeModel() {

    m_owner_uid_isSet = false;
    m_owner_uid_isValid = false;

    m_owner_gid_isSet = false;
    m_owner_gid_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;
}

void OAICreateAccessPoint_request_RootDirectory_CreationInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAccessPoint_request_RootDirectory_CreationInfo::fromJsonObject(QJsonObject json) {

    m_owner_uid_isValid = ::OpenAPI::fromJsonValue(m_owner_uid, json[QString("OwnerUid")]);
    m_owner_uid_isSet = !json[QString("OwnerUid")].isNull() && m_owner_uid_isValid;

    m_owner_gid_isValid = ::OpenAPI::fromJsonValue(m_owner_gid, json[QString("OwnerGid")]);
    m_owner_gid_isSet = !json[QString("OwnerGid")].isNull() && m_owner_gid_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("Permissions")]);
    m_permissions_isSet = !json[QString("Permissions")].isNull() && m_permissions_isValid;
}

QString OAICreateAccessPoint_request_RootDirectory_CreationInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAccessPoint_request_RootDirectory_CreationInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_owner_uid_isSet) {
        obj.insert(QString("OwnerUid"), ::OpenAPI::toJsonValue(m_owner_uid));
    }
    if (m_owner_gid_isSet) {
        obj.insert(QString("OwnerGid"), ::OpenAPI::toJsonValue(m_owner_gid));
    }
    if (m_permissions_isSet) {
        obj.insert(QString("Permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    return obj;
}

qint32 OAICreateAccessPoint_request_RootDirectory_CreationInfo::getOwnerUid() const {
    return m_owner_uid;
}
void OAICreateAccessPoint_request_RootDirectory_CreationInfo::setOwnerUid(const qint32 &owner_uid) {
    m_owner_uid = owner_uid;
    m_owner_uid_isSet = true;
}

bool OAICreateAccessPoint_request_RootDirectory_CreationInfo::is_owner_uid_Set() const{
    return m_owner_uid_isSet;
}

bool OAICreateAccessPoint_request_RootDirectory_CreationInfo::is_owner_uid_Valid() const{
    return m_owner_uid_isValid;
}

qint32 OAICreateAccessPoint_request_RootDirectory_CreationInfo::getOwnerGid() const {
    return m_owner_gid;
}
void OAICreateAccessPoint_request_RootDirectory_CreationInfo::setOwnerGid(const qint32 &owner_gid) {
    m_owner_gid = owner_gid;
    m_owner_gid_isSet = true;
}

bool OAICreateAccessPoint_request_RootDirectory_CreationInfo::is_owner_gid_Set() const{
    return m_owner_gid_isSet;
}

bool OAICreateAccessPoint_request_RootDirectory_CreationInfo::is_owner_gid_Valid() const{
    return m_owner_gid_isValid;
}

QString OAICreateAccessPoint_request_RootDirectory_CreationInfo::getPermissions() const {
    return m_permissions;
}
void OAICreateAccessPoint_request_RootDirectory_CreationInfo::setPermissions(const QString &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAICreateAccessPoint_request_RootDirectory_CreationInfo::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAICreateAccessPoint_request_RootDirectory_CreationInfo::is_permissions_Valid() const{
    return m_permissions_isValid;
}

bool OAICreateAccessPoint_request_RootDirectory_CreationInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_owner_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_gid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAccessPoint_request_RootDirectory_CreationInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_owner_uid_isValid && m_owner_gid_isValid && m_permissions_isValid && true;
}

} // namespace OpenAPI
