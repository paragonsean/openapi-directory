/**
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreationInfo.h
 *
 * &lt;p&gt;Required if the &lt;code&gt;RootDirectory&lt;/code&gt; &amp;gt; &lt;code&gt;Path&lt;/code&gt; specified does not exist. Specifies the POSIX IDs and permissions to apply to the access point&#39;s &lt;code&gt;RootDirectory&lt;/code&gt; &amp;gt; &lt;code&gt;Path&lt;/code&gt;. If the access point root directory does not exist, EFS creates it with these settings when a client connects to the access point. When specifying &lt;code&gt;CreationInfo&lt;/code&gt;, you must include values for all properties. &lt;/p&gt; &lt;p&gt;Amazon EFS creates a root directory only if you have provided the CreationInfo: OwnUid, OwnGID, and permissions for the directory. If you do not provide this information, Amazon EFS does not create the root directory. If the root directory does not exist, attempts to mount using the access point will fail.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you do not provide &lt;code&gt;CreationInfo&lt;/code&gt; and the specified &lt;code&gt;RootDirectory&lt;/code&gt; does not exist, attempts to mount the file system using the access point will fail.&lt;/p&gt; &lt;/important&gt;
 */

#ifndef OAICreationInfo_H
#define OAICreationInfo_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreationInfo : public OAIObject {
public:
    OAICreationInfo();
    OAICreationInfo(QString json);
    ~OAICreationInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getOwnerUid() const;
    void setOwnerUid(const qint32 &owner_uid);
    bool is_owner_uid_Set() const;
    bool is_owner_uid_Valid() const;

    qint32 getOwnerGid() const;
    void setOwnerGid(const qint32 &owner_gid);
    bool is_owner_gid_Set() const;
    bool is_owner_gid_Valid() const;

    QString getPermissions() const;
    void setPermissions(const QString &permissions);
    bool is_permissions_Set() const;
    bool is_permissions_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_owner_uid;
    bool m_owner_uid_isSet;
    bool m_owner_uid_isValid;

    qint32 m_owner_gid;
    bool m_owner_gid_isSet;
    bool m_owner_gid_isValid;

    QString m_permissions;
    bool m_permissions_isSet;
    bool m_permissions_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreationInfo)

#endif // OAICreationInfo_H
