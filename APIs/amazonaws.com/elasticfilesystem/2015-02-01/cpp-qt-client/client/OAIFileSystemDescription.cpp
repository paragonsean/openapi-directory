/**
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileSystemDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFileSystemDescription::OAIFileSystemDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFileSystemDescription::OAIFileSystemDescription() {
    this->initializeModel();
}

OAIFileSystemDescription::~OAIFileSystemDescription() {}

void OAIFileSystemDescription::initializeModel() {

    m_owner_id_isSet = false;
    m_owner_id_isValid = false;

    m_creation_token_isSet = false;
    m_creation_token_isValid = false;

    m_file_system_id_isSet = false;
    m_file_system_id_isValid = false;

    m_file_system_arn_isSet = false;
    m_file_system_arn_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_life_cycle_state_isSet = false;
    m_life_cycle_state_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_of_mount_targets_isSet = false;
    m_number_of_mount_targets_isValid = false;

    m_size_in_bytes_isSet = false;
    m_size_in_bytes_isValid = false;

    m_performance_mode_isSet = false;
    m_performance_mode_isValid = false;

    m_encrypted_isSet = false;
    m_encrypted_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_throughput_mode_isSet = false;
    m_throughput_mode_isValid = false;

    m_provisioned_throughput_in_mibps_isSet = false;
    m_provisioned_throughput_in_mibps_isValid = false;

    m_availability_zone_name_isSet = false;
    m_availability_zone_name_isValid = false;

    m_availability_zone_id_isSet = false;
    m_availability_zone_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIFileSystemDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFileSystemDescription::fromJsonObject(QJsonObject json) {

    m_owner_id_isValid = ::OpenAPI::fromJsonValue(m_owner_id, json[QString("OwnerId")]);
    m_owner_id_isSet = !json[QString("OwnerId")].isNull() && m_owner_id_isValid;

    m_creation_token_isValid = ::OpenAPI::fromJsonValue(m_creation_token, json[QString("CreationToken")]);
    m_creation_token_isSet = !json[QString("CreationToken")].isNull() && m_creation_token_isValid;

    m_file_system_id_isValid = ::OpenAPI::fromJsonValue(m_file_system_id, json[QString("FileSystemId")]);
    m_file_system_id_isSet = !json[QString("FileSystemId")].isNull() && m_file_system_id_isValid;

    m_file_system_arn_isValid = ::OpenAPI::fromJsonValue(m_file_system_arn, json[QString("FileSystemArn")]);
    m_file_system_arn_isSet = !json[QString("FileSystemArn")].isNull() && m_file_system_arn_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_life_cycle_state_isValid = ::OpenAPI::fromJsonValue(m_life_cycle_state, json[QString("LifeCycleState")]);
    m_life_cycle_state_isSet = !json[QString("LifeCycleState")].isNull() && m_life_cycle_state_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_number_of_mount_targets_isValid = ::OpenAPI::fromJsonValue(m_number_of_mount_targets, json[QString("NumberOfMountTargets")]);
    m_number_of_mount_targets_isSet = !json[QString("NumberOfMountTargets")].isNull() && m_number_of_mount_targets_isValid;

    m_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_size_in_bytes, json[QString("SizeInBytes")]);
    m_size_in_bytes_isSet = !json[QString("SizeInBytes")].isNull() && m_size_in_bytes_isValid;

    m_performance_mode_isValid = ::OpenAPI::fromJsonValue(m_performance_mode, json[QString("PerformanceMode")]);
    m_performance_mode_isSet = !json[QString("PerformanceMode")].isNull() && m_performance_mode_isValid;

    m_encrypted_isValid = ::OpenAPI::fromJsonValue(m_encrypted, json[QString("Encrypted")]);
    m_encrypted_isSet = !json[QString("Encrypted")].isNull() && m_encrypted_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_throughput_mode_isValid = ::OpenAPI::fromJsonValue(m_throughput_mode, json[QString("ThroughputMode")]);
    m_throughput_mode_isSet = !json[QString("ThroughputMode")].isNull() && m_throughput_mode_isValid;

    m_provisioned_throughput_in_mibps_isValid = ::OpenAPI::fromJsonValue(m_provisioned_throughput_in_mibps, json[QString("ProvisionedThroughputInMibps")]);
    m_provisioned_throughput_in_mibps_isSet = !json[QString("ProvisionedThroughputInMibps")].isNull() && m_provisioned_throughput_in_mibps_isValid;

    m_availability_zone_name_isValid = ::OpenAPI::fromJsonValue(m_availability_zone_name, json[QString("AvailabilityZoneName")]);
    m_availability_zone_name_isSet = !json[QString("AvailabilityZoneName")].isNull() && m_availability_zone_name_isValid;

    m_availability_zone_id_isValid = ::OpenAPI::fromJsonValue(m_availability_zone_id, json[QString("AvailabilityZoneId")]);
    m_availability_zone_id_isSet = !json[QString("AvailabilityZoneId")].isNull() && m_availability_zone_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIFileSystemDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFileSystemDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_owner_id_isSet) {
        obj.insert(QString("OwnerId"), ::OpenAPI::toJsonValue(m_owner_id));
    }
    if (m_creation_token_isSet) {
        obj.insert(QString("CreationToken"), ::OpenAPI::toJsonValue(m_creation_token));
    }
    if (m_file_system_id_isSet) {
        obj.insert(QString("FileSystemId"), ::OpenAPI::toJsonValue(m_file_system_id));
    }
    if (m_file_system_arn_isSet) {
        obj.insert(QString("FileSystemArn"), ::OpenAPI::toJsonValue(m_file_system_arn));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_life_cycle_state.isSet()) {
        obj.insert(QString("LifeCycleState"), ::OpenAPI::toJsonValue(m_life_cycle_state));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_of_mount_targets_isSet) {
        obj.insert(QString("NumberOfMountTargets"), ::OpenAPI::toJsonValue(m_number_of_mount_targets));
    }
    if (m_size_in_bytes.isSet()) {
        obj.insert(QString("SizeInBytes"), ::OpenAPI::toJsonValue(m_size_in_bytes));
    }
    if (m_performance_mode.isSet()) {
        obj.insert(QString("PerformanceMode"), ::OpenAPI::toJsonValue(m_performance_mode));
    }
    if (m_encrypted_isSet) {
        obj.insert(QString("Encrypted"), ::OpenAPI::toJsonValue(m_encrypted));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_throughput_mode.isSet()) {
        obj.insert(QString("ThroughputMode"), ::OpenAPI::toJsonValue(m_throughput_mode));
    }
    if (m_provisioned_throughput_in_mibps_isSet) {
        obj.insert(QString("ProvisionedThroughputInMibps"), ::OpenAPI::toJsonValue(m_provisioned_throughput_in_mibps));
    }
    if (m_availability_zone_name_isSet) {
        obj.insert(QString("AvailabilityZoneName"), ::OpenAPI::toJsonValue(m_availability_zone_name));
    }
    if (m_availability_zone_id_isSet) {
        obj.insert(QString("AvailabilityZoneId"), ::OpenAPI::toJsonValue(m_availability_zone_id));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIFileSystemDescription::getOwnerId() const {
    return m_owner_id;
}
void OAIFileSystemDescription::setOwnerId(const QString &owner_id) {
    m_owner_id = owner_id;
    m_owner_id_isSet = true;
}

bool OAIFileSystemDescription::is_owner_id_Set() const{
    return m_owner_id_isSet;
}

bool OAIFileSystemDescription::is_owner_id_Valid() const{
    return m_owner_id_isValid;
}

QString OAIFileSystemDescription::getCreationToken() const {
    return m_creation_token;
}
void OAIFileSystemDescription::setCreationToken(const QString &creation_token) {
    m_creation_token = creation_token;
    m_creation_token_isSet = true;
}

bool OAIFileSystemDescription::is_creation_token_Set() const{
    return m_creation_token_isSet;
}

bool OAIFileSystemDescription::is_creation_token_Valid() const{
    return m_creation_token_isValid;
}

QString OAIFileSystemDescription::getFileSystemId() const {
    return m_file_system_id;
}
void OAIFileSystemDescription::setFileSystemId(const QString &file_system_id) {
    m_file_system_id = file_system_id;
    m_file_system_id_isSet = true;
}

bool OAIFileSystemDescription::is_file_system_id_Set() const{
    return m_file_system_id_isSet;
}

bool OAIFileSystemDescription::is_file_system_id_Valid() const{
    return m_file_system_id_isValid;
}

QString OAIFileSystemDescription::getFileSystemArn() const {
    return m_file_system_arn;
}
void OAIFileSystemDescription::setFileSystemArn(const QString &file_system_arn) {
    m_file_system_arn = file_system_arn;
    m_file_system_arn_isSet = true;
}

bool OAIFileSystemDescription::is_file_system_arn_Set() const{
    return m_file_system_arn_isSet;
}

bool OAIFileSystemDescription::is_file_system_arn_Valid() const{
    return m_file_system_arn_isValid;
}

QDateTime OAIFileSystemDescription::getCreationTime() const {
    return m_creation_time;
}
void OAIFileSystemDescription::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIFileSystemDescription::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIFileSystemDescription::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

OAILifeCycleState OAIFileSystemDescription::getLifeCycleState() const {
    return m_life_cycle_state;
}
void OAIFileSystemDescription::setLifeCycleState(const OAILifeCycleState &life_cycle_state) {
    m_life_cycle_state = life_cycle_state;
    m_life_cycle_state_isSet = true;
}

bool OAIFileSystemDescription::is_life_cycle_state_Set() const{
    return m_life_cycle_state_isSet;
}

bool OAIFileSystemDescription::is_life_cycle_state_Valid() const{
    return m_life_cycle_state_isValid;
}

QString OAIFileSystemDescription::getName() const {
    return m_name;
}
void OAIFileSystemDescription::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFileSystemDescription::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFileSystemDescription::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIFileSystemDescription::getNumberOfMountTargets() const {
    return m_number_of_mount_targets;
}
void OAIFileSystemDescription::setNumberOfMountTargets(const qint32 &number_of_mount_targets) {
    m_number_of_mount_targets = number_of_mount_targets;
    m_number_of_mount_targets_isSet = true;
}

bool OAIFileSystemDescription::is_number_of_mount_targets_Set() const{
    return m_number_of_mount_targets_isSet;
}

bool OAIFileSystemDescription::is_number_of_mount_targets_Valid() const{
    return m_number_of_mount_targets_isValid;
}

OAIFileSystemDescription_SizeInBytes OAIFileSystemDescription::getSizeInBytes() const {
    return m_size_in_bytes;
}
void OAIFileSystemDescription::setSizeInBytes(const OAIFileSystemDescription_SizeInBytes &size_in_bytes) {
    m_size_in_bytes = size_in_bytes;
    m_size_in_bytes_isSet = true;
}

bool OAIFileSystemDescription::is_size_in_bytes_Set() const{
    return m_size_in_bytes_isSet;
}

bool OAIFileSystemDescription::is_size_in_bytes_Valid() const{
    return m_size_in_bytes_isValid;
}

OAIPerformanceMode OAIFileSystemDescription::getPerformanceMode() const {
    return m_performance_mode;
}
void OAIFileSystemDescription::setPerformanceMode(const OAIPerformanceMode &performance_mode) {
    m_performance_mode = performance_mode;
    m_performance_mode_isSet = true;
}

bool OAIFileSystemDescription::is_performance_mode_Set() const{
    return m_performance_mode_isSet;
}

bool OAIFileSystemDescription::is_performance_mode_Valid() const{
    return m_performance_mode_isValid;
}

bool OAIFileSystemDescription::getEncrypted() const {
    return m_encrypted;
}
void OAIFileSystemDescription::setEncrypted(const bool &encrypted) {
    m_encrypted = encrypted;
    m_encrypted_isSet = true;
}

bool OAIFileSystemDescription::is_encrypted_Set() const{
    return m_encrypted_isSet;
}

bool OAIFileSystemDescription::is_encrypted_Valid() const{
    return m_encrypted_isValid;
}

QString OAIFileSystemDescription::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAIFileSystemDescription::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAIFileSystemDescription::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAIFileSystemDescription::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

OAIThroughputMode OAIFileSystemDescription::getThroughputMode() const {
    return m_throughput_mode;
}
void OAIFileSystemDescription::setThroughputMode(const OAIThroughputMode &throughput_mode) {
    m_throughput_mode = throughput_mode;
    m_throughput_mode_isSet = true;
}

bool OAIFileSystemDescription::is_throughput_mode_Set() const{
    return m_throughput_mode_isSet;
}

bool OAIFileSystemDescription::is_throughput_mode_Valid() const{
    return m_throughput_mode_isValid;
}

double OAIFileSystemDescription::getProvisionedThroughputInMibps() const {
    return m_provisioned_throughput_in_mibps;
}
void OAIFileSystemDescription::setProvisionedThroughputInMibps(const double &provisioned_throughput_in_mibps) {
    m_provisioned_throughput_in_mibps = provisioned_throughput_in_mibps;
    m_provisioned_throughput_in_mibps_isSet = true;
}

bool OAIFileSystemDescription::is_provisioned_throughput_in_mibps_Set() const{
    return m_provisioned_throughput_in_mibps_isSet;
}

bool OAIFileSystemDescription::is_provisioned_throughput_in_mibps_Valid() const{
    return m_provisioned_throughput_in_mibps_isValid;
}

QString OAIFileSystemDescription::getAvailabilityZoneName() const {
    return m_availability_zone_name;
}
void OAIFileSystemDescription::setAvailabilityZoneName(const QString &availability_zone_name) {
    m_availability_zone_name = availability_zone_name;
    m_availability_zone_name_isSet = true;
}

bool OAIFileSystemDescription::is_availability_zone_name_Set() const{
    return m_availability_zone_name_isSet;
}

bool OAIFileSystemDescription::is_availability_zone_name_Valid() const{
    return m_availability_zone_name_isValid;
}

QString OAIFileSystemDescription::getAvailabilityZoneId() const {
    return m_availability_zone_id;
}
void OAIFileSystemDescription::setAvailabilityZoneId(const QString &availability_zone_id) {
    m_availability_zone_id = availability_zone_id;
    m_availability_zone_id_isSet = true;
}

bool OAIFileSystemDescription::is_availability_zone_id_Set() const{
    return m_availability_zone_id_isSet;
}

bool OAIFileSystemDescription::is_availability_zone_id_Valid() const{
    return m_availability_zone_id_isValid;
}

QList OAIFileSystemDescription::getTags() const {
    return m_tags;
}
void OAIFileSystemDescription::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIFileSystemDescription::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIFileSystemDescription::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIFileSystemDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_owner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_system_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_life_cycle_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_mount_targets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_in_bytes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_performance_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_throughput_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_throughput_in_mibps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zone_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zone_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFileSystemDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_owner_id_isValid && m_creation_token_isValid && m_file_system_id_isValid && m_creation_time_isValid && m_life_cycle_state_isValid && m_number_of_mount_targets_isValid && m_size_in_bytes_isValid && m_performance_mode_isValid && m_tags_isValid && true;
}

} // namespace OpenAPI
