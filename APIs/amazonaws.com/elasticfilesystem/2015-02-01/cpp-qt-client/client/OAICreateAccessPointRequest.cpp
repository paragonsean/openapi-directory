/**
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAccessPointRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAccessPointRequest::OAICreateAccessPointRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAccessPointRequest::OAICreateAccessPointRequest() {
    this->initializeModel();
}

OAICreateAccessPointRequest::~OAICreateAccessPointRequest() {}

void OAICreateAccessPointRequest::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_file_system_id_isSet = false;
    m_file_system_id_isValid = false;

    m_posix_user_isSet = false;
    m_posix_user_isValid = false;

    m_root_directory_isSet = false;
    m_root_directory_isValid = false;
}

void OAICreateAccessPointRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAccessPointRequest::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_file_system_id_isValid = ::OpenAPI::fromJsonValue(m_file_system_id, json[QString("FileSystemId")]);
    m_file_system_id_isSet = !json[QString("FileSystemId")].isNull() && m_file_system_id_isValid;

    m_posix_user_isValid = ::OpenAPI::fromJsonValue(m_posix_user, json[QString("PosixUser")]);
    m_posix_user_isSet = !json[QString("PosixUser")].isNull() && m_posix_user_isValid;

    m_root_directory_isValid = ::OpenAPI::fromJsonValue(m_root_directory, json[QString("RootDirectory")]);
    m_root_directory_isSet = !json[QString("RootDirectory")].isNull() && m_root_directory_isValid;
}

QString OAICreateAccessPointRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAccessPointRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_file_system_id_isSet) {
        obj.insert(QString("FileSystemId"), ::OpenAPI::toJsonValue(m_file_system_id));
    }
    if (m_posix_user.isSet()) {
        obj.insert(QString("PosixUser"), ::OpenAPI::toJsonValue(m_posix_user));
    }
    if (m_root_directory.isSet()) {
        obj.insert(QString("RootDirectory"), ::OpenAPI::toJsonValue(m_root_directory));
    }
    return obj;
}

QString OAICreateAccessPointRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateAccessPointRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateAccessPointRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateAccessPointRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QList OAICreateAccessPointRequest::getTags() const {
    return m_tags;
}
void OAICreateAccessPointRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateAccessPointRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateAccessPointRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateAccessPointRequest::getFileSystemId() const {
    return m_file_system_id;
}
void OAICreateAccessPointRequest::setFileSystemId(const QString &file_system_id) {
    m_file_system_id = file_system_id;
    m_file_system_id_isSet = true;
}

bool OAICreateAccessPointRequest::is_file_system_id_Set() const{
    return m_file_system_id_isSet;
}

bool OAICreateAccessPointRequest::is_file_system_id_Valid() const{
    return m_file_system_id_isValid;
}

OAICreateAccessPointRequest_PosixUser OAICreateAccessPointRequest::getPosixUser() const {
    return m_posix_user;
}
void OAICreateAccessPointRequest::setPosixUser(const OAICreateAccessPointRequest_PosixUser &posix_user) {
    m_posix_user = posix_user;
    m_posix_user_isSet = true;
}

bool OAICreateAccessPointRequest::is_posix_user_Set() const{
    return m_posix_user_isSet;
}

bool OAICreateAccessPointRequest::is_posix_user_Valid() const{
    return m_posix_user_isValid;
}

OAICreateAccessPointRequest_RootDirectory OAICreateAccessPointRequest::getRootDirectory() const {
    return m_root_directory;
}
void OAICreateAccessPointRequest::setRootDirectory(const OAICreateAccessPointRequest_RootDirectory &root_directory) {
    m_root_directory = root_directory;
    m_root_directory_isSet = true;
}

bool OAICreateAccessPointRequest::is_root_directory_Set() const{
    return m_root_directory_isSet;
}

bool OAICreateAccessPointRequest::is_root_directory_Valid() const{
    return m_root_directory_isValid;
}

bool OAICreateAccessPointRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_posix_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_directory.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAccessPointRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_client_token_isValid && m_file_system_id_isValid && true;
}

} // namespace OpenAPI
