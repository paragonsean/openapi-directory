/**
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutAccountPreferencesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutAccountPreferencesResponse::OAIPutAccountPreferencesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutAccountPreferencesResponse::OAIPutAccountPreferencesResponse() {
    this->initializeModel();
}

OAIPutAccountPreferencesResponse::~OAIPutAccountPreferencesResponse() {}

void OAIPutAccountPreferencesResponse::initializeModel() {

    m_resource_id_preference_isSet = false;
    m_resource_id_preference_isValid = false;
}

void OAIPutAccountPreferencesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutAccountPreferencesResponse::fromJsonObject(QJsonObject json) {

    m_resource_id_preference_isValid = ::OpenAPI::fromJsonValue(m_resource_id_preference, json[QString("ResourceIdPreference")]);
    m_resource_id_preference_isSet = !json[QString("ResourceIdPreference")].isNull() && m_resource_id_preference_isValid;
}

QString OAIPutAccountPreferencesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutAccountPreferencesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_id_preference.isSet()) {
        obj.insert(QString("ResourceIdPreference"), ::OpenAPI::toJsonValue(m_resource_id_preference));
    }
    return obj;
}

OAIResourceIdPreference OAIPutAccountPreferencesResponse::getResourceIdPreference() const {
    return m_resource_id_preference;
}
void OAIPutAccountPreferencesResponse::setResourceIdPreference(const OAIResourceIdPreference &resource_id_preference) {
    m_resource_id_preference = resource_id_preference;
    m_resource_id_preference_isSet = true;
}

bool OAIPutAccountPreferencesResponse::is_resource_id_preference_Set() const{
    return m_resource_id_preference_isSet;
}

bool OAIPutAccountPreferencesResponse::is_resource_id_preference_Valid() const{
    return m_resource_id_preference_isValid;
}

bool OAIPutAccountPreferencesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_id_preference.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutAccountPreferencesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
