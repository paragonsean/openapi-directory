/**
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutFileSystemPolicy_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutFileSystemPolicy_request::OAIPutFileSystemPolicy_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutFileSystemPolicy_request::OAIPutFileSystemPolicy_request() {
    this->initializeModel();
}

OAIPutFileSystemPolicy_request::~OAIPutFileSystemPolicy_request() {}

void OAIPutFileSystemPolicy_request::initializeModel() {

    m_policy_isSet = false;
    m_policy_isValid = false;

    m_bypass_policy_lockout_safety_check_isSet = false;
    m_bypass_policy_lockout_safety_check_isValid = false;
}

void OAIPutFileSystemPolicy_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutFileSystemPolicy_request::fromJsonObject(QJsonObject json) {

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("Policy")]);
    m_policy_isSet = !json[QString("Policy")].isNull() && m_policy_isValid;

    m_bypass_policy_lockout_safety_check_isValid = ::OpenAPI::fromJsonValue(m_bypass_policy_lockout_safety_check, json[QString("BypassPolicyLockoutSafetyCheck")]);
    m_bypass_policy_lockout_safety_check_isSet = !json[QString("BypassPolicyLockoutSafetyCheck")].isNull() && m_bypass_policy_lockout_safety_check_isValid;
}

QString OAIPutFileSystemPolicy_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutFileSystemPolicy_request::asJsonObject() const {
    QJsonObject obj;
    if (m_policy_isSet) {
        obj.insert(QString("Policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    if (m_bypass_policy_lockout_safety_check_isSet) {
        obj.insert(QString("BypassPolicyLockoutSafetyCheck"), ::OpenAPI::toJsonValue(m_bypass_policy_lockout_safety_check));
    }
    return obj;
}

QString OAIPutFileSystemPolicy_request::getPolicy() const {
    return m_policy;
}
void OAIPutFileSystemPolicy_request::setPolicy(const QString &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIPutFileSystemPolicy_request::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIPutFileSystemPolicy_request::is_policy_Valid() const{
    return m_policy_isValid;
}

bool OAIPutFileSystemPolicy_request::isBypassPolicyLockoutSafetyCheck() const {
    return m_bypass_policy_lockout_safety_check;
}
void OAIPutFileSystemPolicy_request::setBypassPolicyLockoutSafetyCheck(const bool &bypass_policy_lockout_safety_check) {
    m_bypass_policy_lockout_safety_check = bypass_policy_lockout_safety_check;
    m_bypass_policy_lockout_safety_check_isSet = true;
}

bool OAIPutFileSystemPolicy_request::is_bypass_policy_lockout_safety_check_Set() const{
    return m_bypass_policy_lockout_safety_check_isSet;
}

bool OAIPutFileSystemPolicy_request::is_bypass_policy_lockout_safety_check_Valid() const{
    return m_bypass_policy_lockout_safety_check_isValid;
}

bool OAIPutFileSystemPolicy_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bypass_policy_lockout_safety_check_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutFileSystemPolicy_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_policy_isValid && true;
}

} // namespace OpenAPI
