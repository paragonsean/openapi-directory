/**
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILifecyclePolicy.h
 *
 * &lt;p&gt;Describes a policy used by EFS lifecycle management and EFS Intelligent-Tiering that specifies when to transition files into and out of the file system&#39;s Infrequent Access (IA) storage class. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/efs/latest/ug/lifecycle-management-efs.html\&quot;&gt;EFS Intelligent‚ÄêTiering and EFS Lifecycle Management&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;When using the &lt;code&gt;put-lifecycle-configuration&lt;/code&gt; CLI command or the &lt;code&gt;PutLifecycleConfiguration&lt;/code&gt; API action, Amazon EFS requires that each &lt;code&gt;LifecyclePolicy&lt;/code&gt; object have only a single transition. This means that in a request body, &lt;code&gt;LifecyclePolicies&lt;/code&gt; must be structured as an array of &lt;code&gt;LifecyclePolicy&lt;/code&gt; objects, one object for each transition, &lt;code&gt;TransitionToIA&lt;/code&gt;, &lt;code&gt;TransitionToPrimaryStorageClass&lt;/code&gt;. For more information, see the request examples in &lt;a&gt;PutLifecycleConfiguration&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
 */

#ifndef OAILifecyclePolicy_H
#define OAILifecyclePolicy_H

#include <QJsonObject>

#include "OAITransitionToIARules.h"
#include "OAITransitionToPrimaryStorageClassRules.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAILifecyclePolicy : public OAIObject {
public:
    OAILifecyclePolicy();
    OAILifecyclePolicy(QString json);
    ~OAILifecyclePolicy() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAITransitionToIARules getTransitionToIa() const;
    void setTransitionToIa(const OAITransitionToIARules &transition_to_ia);
    bool is_transition_to_ia_Set() const;
    bool is_transition_to_ia_Valid() const;

    OAITransitionToPrimaryStorageClassRules getTransitionToPrimaryStorageClass() const;
    void setTransitionToPrimaryStorageClass(const OAITransitionToPrimaryStorageClassRules &transition_to_primary_storage_class);
    bool is_transition_to_primary_storage_class_Set() const;
    bool is_transition_to_primary_storage_class_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAITransitionToIARules m_transition_to_ia;
    bool m_transition_to_ia_isSet;
    bool m_transition_to_ia_isValid;

    OAITransitionToPrimaryStorageClassRules m_transition_to_primary_storage_class;
    bool m_transition_to_primary_storage_class_isSet;
    bool m_transition_to_primary_storage_class_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILifecyclePolicy)

#endif // OAILifecyclePolicy_H
