/**
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackupPolicyDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackupPolicyDescription::OAIBackupPolicyDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackupPolicyDescription::OAIBackupPolicyDescription() {
    this->initializeModel();
}

OAIBackupPolicyDescription::~OAIBackupPolicyDescription() {}

void OAIBackupPolicyDescription::initializeModel() {

    m_backup_policy_isSet = false;
    m_backup_policy_isValid = false;
}

void OAIBackupPolicyDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackupPolicyDescription::fromJsonObject(QJsonObject json) {

    m_backup_policy_isValid = ::OpenAPI::fromJsonValue(m_backup_policy, json[QString("BackupPolicy")]);
    m_backup_policy_isSet = !json[QString("BackupPolicy")].isNull() && m_backup_policy_isValid;
}

QString OAIBackupPolicyDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackupPolicyDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_policy.isSet()) {
        obj.insert(QString("BackupPolicy"), ::OpenAPI::toJsonValue(m_backup_policy));
    }
    return obj;
}

OAIBackupPolicyDescription_BackupPolicy OAIBackupPolicyDescription::getBackupPolicy() const {
    return m_backup_policy;
}
void OAIBackupPolicyDescription::setBackupPolicy(const OAIBackupPolicyDescription_BackupPolicy &backup_policy) {
    m_backup_policy = backup_policy;
    m_backup_policy_isSet = true;
}

bool OAIBackupPolicyDescription::is_backup_policy_Set() const{
    return m_backup_policy_isSet;
}

bool OAIBackupPolicyDescription::is_backup_policy_Valid() const{
    return m_backup_policy_isValid;
}

bool OAIBackupPolicyDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackupPolicyDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
