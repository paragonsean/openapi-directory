/**
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeTagsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeTagsResponse::OAIDescribeTagsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeTagsResponse::OAIDescribeTagsResponse() {
    this->initializeModel();
}

OAIDescribeTagsResponse::~OAIDescribeTagsResponse() {}

void OAIDescribeTagsResponse::initializeModel() {

    m_marker_isSet = false;
    m_marker_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_next_marker_isSet = false;
    m_next_marker_isValid = false;
}

void OAIDescribeTagsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeTagsResponse::fromJsonObject(QJsonObject json) {

    m_marker_isValid = ::OpenAPI::fromJsonValue(m_marker, json[QString("Marker")]);
    m_marker_isSet = !json[QString("Marker")].isNull() && m_marker_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_next_marker_isValid = ::OpenAPI::fromJsonValue(m_next_marker, json[QString("NextMarker")]);
    m_next_marker_isSet = !json[QString("NextMarker")].isNull() && m_next_marker_isValid;
}

QString OAIDescribeTagsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeTagsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_marker_isSet) {
        obj.insert(QString("Marker"), ::OpenAPI::toJsonValue(m_marker));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_next_marker_isSet) {
        obj.insert(QString("NextMarker"), ::OpenAPI::toJsonValue(m_next_marker));
    }
    return obj;
}

QString OAIDescribeTagsResponse::getMarker() const {
    return m_marker;
}
void OAIDescribeTagsResponse::setMarker(const QString &marker) {
    m_marker = marker;
    m_marker_isSet = true;
}

bool OAIDescribeTagsResponse::is_marker_Set() const{
    return m_marker_isSet;
}

bool OAIDescribeTagsResponse::is_marker_Valid() const{
    return m_marker_isValid;
}

QList OAIDescribeTagsResponse::getTags() const {
    return m_tags;
}
void OAIDescribeTagsResponse::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDescribeTagsResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDescribeTagsResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIDescribeTagsResponse::getNextMarker() const {
    return m_next_marker;
}
void OAIDescribeTagsResponse::setNextMarker(const QString &next_marker) {
    m_next_marker = next_marker;
    m_next_marker_isSet = true;
}

bool OAIDescribeTagsResponse::is_next_marker_Set() const{
    return m_next_marker_isSet;
}

bool OAIDescribeTagsResponse::is_next_marker_Valid() const{
    return m_next_marker_isValid;
}

bool OAIDescribeTagsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_marker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_marker_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeTagsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_tags_isValid && true;
}

} // namespace OpenAPI
