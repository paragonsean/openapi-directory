/**
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestinationToCreate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestinationToCreate::OAIDestinationToCreate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestinationToCreate::OAIDestinationToCreate() {
    this->initializeModel();
}

OAIDestinationToCreate::~OAIDestinationToCreate() {}

void OAIDestinationToCreate::initializeModel() {

    m_region_isSet = false;
    m_region_isValid = false;

    m_availability_zone_name_isSet = false;
    m_availability_zone_name_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;
}

void OAIDestinationToCreate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestinationToCreate::fromJsonObject(QJsonObject json) {

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("Region")]);
    m_region_isSet = !json[QString("Region")].isNull() && m_region_isValid;

    m_availability_zone_name_isValid = ::OpenAPI::fromJsonValue(m_availability_zone_name, json[QString("AvailabilityZoneName")]);
    m_availability_zone_name_isSet = !json[QString("AvailabilityZoneName")].isNull() && m_availability_zone_name_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;
}

QString OAIDestinationToCreate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestinationToCreate::asJsonObject() const {
    QJsonObject obj;
    if (m_region_isSet) {
        obj.insert(QString("Region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_availability_zone_name_isSet) {
        obj.insert(QString("AvailabilityZoneName"), ::OpenAPI::toJsonValue(m_availability_zone_name));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    return obj;
}

QString OAIDestinationToCreate::getRegion() const {
    return m_region;
}
void OAIDestinationToCreate::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIDestinationToCreate::is_region_Set() const{
    return m_region_isSet;
}

bool OAIDestinationToCreate::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIDestinationToCreate::getAvailabilityZoneName() const {
    return m_availability_zone_name;
}
void OAIDestinationToCreate::setAvailabilityZoneName(const QString &availability_zone_name) {
    m_availability_zone_name = availability_zone_name;
    m_availability_zone_name_isSet = true;
}

bool OAIDestinationToCreate::is_availability_zone_name_Set() const{
    return m_availability_zone_name_isSet;
}

bool OAIDestinationToCreate::is_availability_zone_name_Valid() const{
    return m_availability_zone_name_isValid;
}

QString OAIDestinationToCreate::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAIDestinationToCreate::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAIDestinationToCreate::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAIDestinationToCreate::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

bool OAIDestinationToCreate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zone_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestinationToCreate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
