/**
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateMountTargetRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateMountTargetRequest::OAICreateMountTargetRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateMountTargetRequest::OAICreateMountTargetRequest() {
    this->initializeModel();
}

OAICreateMountTargetRequest::~OAICreateMountTargetRequest() {}

void OAICreateMountTargetRequest::initializeModel() {

    m_file_system_id_isSet = false;
    m_file_system_id_isValid = false;

    m_subnet_id_isSet = false;
    m_subnet_id_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_security_groups_isSet = false;
    m_security_groups_isValid = false;
}

void OAICreateMountTargetRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateMountTargetRequest::fromJsonObject(QJsonObject json) {

    m_file_system_id_isValid = ::OpenAPI::fromJsonValue(m_file_system_id, json[QString("FileSystemId")]);
    m_file_system_id_isSet = !json[QString("FileSystemId")].isNull() && m_file_system_id_isValid;

    m_subnet_id_isValid = ::OpenAPI::fromJsonValue(m_subnet_id, json[QString("SubnetId")]);
    m_subnet_id_isSet = !json[QString("SubnetId")].isNull() && m_subnet_id_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("IpAddress")]);
    m_ip_address_isSet = !json[QString("IpAddress")].isNull() && m_ip_address_isValid;

    m_security_groups_isValid = ::OpenAPI::fromJsonValue(m_security_groups, json[QString("SecurityGroups")]);
    m_security_groups_isSet = !json[QString("SecurityGroups")].isNull() && m_security_groups_isValid;
}

QString OAICreateMountTargetRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateMountTargetRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_file_system_id_isSet) {
        obj.insert(QString("FileSystemId"), ::OpenAPI::toJsonValue(m_file_system_id));
    }
    if (m_subnet_id_isSet) {
        obj.insert(QString("SubnetId"), ::OpenAPI::toJsonValue(m_subnet_id));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("IpAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_security_groups.isSet()) {
        obj.insert(QString("SecurityGroups"), ::OpenAPI::toJsonValue(m_security_groups));
    }
    return obj;
}

QString OAICreateMountTargetRequest::getFileSystemId() const {
    return m_file_system_id;
}
void OAICreateMountTargetRequest::setFileSystemId(const QString &file_system_id) {
    m_file_system_id = file_system_id;
    m_file_system_id_isSet = true;
}

bool OAICreateMountTargetRequest::is_file_system_id_Set() const{
    return m_file_system_id_isSet;
}

bool OAICreateMountTargetRequest::is_file_system_id_Valid() const{
    return m_file_system_id_isValid;
}

QString OAICreateMountTargetRequest::getSubnetId() const {
    return m_subnet_id;
}
void OAICreateMountTargetRequest::setSubnetId(const QString &subnet_id) {
    m_subnet_id = subnet_id;
    m_subnet_id_isSet = true;
}

bool OAICreateMountTargetRequest::is_subnet_id_Set() const{
    return m_subnet_id_isSet;
}

bool OAICreateMountTargetRequest::is_subnet_id_Valid() const{
    return m_subnet_id_isValid;
}

QString OAICreateMountTargetRequest::getIpAddress() const {
    return m_ip_address;
}
void OAICreateMountTargetRequest::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAICreateMountTargetRequest::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAICreateMountTargetRequest::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QList OAICreateMountTargetRequest::getSecurityGroups() const {
    return m_security_groups;
}
void OAICreateMountTargetRequest::setSecurityGroups(const QList &security_groups) {
    m_security_groups = security_groups;
    m_security_groups_isSet = true;
}

bool OAICreateMountTargetRequest::is_security_groups_Set() const{
    return m_security_groups_isSet;
}

bool OAICreateMountTargetRequest::is_security_groups_Valid() const{
    return m_security_groups_isValid;
}

bool OAICreateMountTargetRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateMountTargetRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_system_id_isValid && m_subnet_id_isValid && true;
}

} // namespace OpenAPI
