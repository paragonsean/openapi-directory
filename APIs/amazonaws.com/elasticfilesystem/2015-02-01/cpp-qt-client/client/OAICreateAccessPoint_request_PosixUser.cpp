/**
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAccessPoint_request_PosixUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAccessPoint_request_PosixUser::OAICreateAccessPoint_request_PosixUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAccessPoint_request_PosixUser::OAICreateAccessPoint_request_PosixUser() {
    this->initializeModel();
}

OAICreateAccessPoint_request_PosixUser::~OAICreateAccessPoint_request_PosixUser() {}

void OAICreateAccessPoint_request_PosixUser::initializeModel() {

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_gid_isSet = false;
    m_gid_isValid = false;

    m_secondary_gids_isSet = false;
    m_secondary_gids_isValid = false;
}

void OAICreateAccessPoint_request_PosixUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAccessPoint_request_PosixUser::fromJsonObject(QJsonObject json) {

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("Uid")]);
    m_uid_isSet = !json[QString("Uid")].isNull() && m_uid_isValid;

    m_gid_isValid = ::OpenAPI::fromJsonValue(m_gid, json[QString("Gid")]);
    m_gid_isSet = !json[QString("Gid")].isNull() && m_gid_isValid;

    m_secondary_gids_isValid = ::OpenAPI::fromJsonValue(m_secondary_gids, json[QString("SecondaryGids")]);
    m_secondary_gids_isSet = !json[QString("SecondaryGids")].isNull() && m_secondary_gids_isValid;
}

QString OAICreateAccessPoint_request_PosixUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAccessPoint_request_PosixUser::asJsonObject() const {
    QJsonObject obj;
    if (m_uid_isSet) {
        obj.insert(QString("Uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_gid_isSet) {
        obj.insert(QString("Gid"), ::OpenAPI::toJsonValue(m_gid));
    }
    if (m_secondary_gids.isSet()) {
        obj.insert(QString("SecondaryGids"), ::OpenAPI::toJsonValue(m_secondary_gids));
    }
    return obj;
}

qint32 OAICreateAccessPoint_request_PosixUser::getUid() const {
    return m_uid;
}
void OAICreateAccessPoint_request_PosixUser::setUid(const qint32 &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAICreateAccessPoint_request_PosixUser::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAICreateAccessPoint_request_PosixUser::is_uid_Valid() const{
    return m_uid_isValid;
}

qint32 OAICreateAccessPoint_request_PosixUser::getGid() const {
    return m_gid;
}
void OAICreateAccessPoint_request_PosixUser::setGid(const qint32 &gid) {
    m_gid = gid;
    m_gid_isSet = true;
}

bool OAICreateAccessPoint_request_PosixUser::is_gid_Set() const{
    return m_gid_isSet;
}

bool OAICreateAccessPoint_request_PosixUser::is_gid_Valid() const{
    return m_gid_isValid;
}

QList OAICreateAccessPoint_request_PosixUser::getSecondaryGids() const {
    return m_secondary_gids;
}
void OAICreateAccessPoint_request_PosixUser::setSecondaryGids(const QList &secondary_gids) {
    m_secondary_gids = secondary_gids;
    m_secondary_gids_isSet = true;
}

bool OAICreateAccessPoint_request_PosixUser::is_secondary_gids_Set() const{
    return m_secondary_gids_isSet;
}

bool OAICreateAccessPoint_request_PosixUser::is_secondary_gids_Valid() const{
    return m_secondary_gids_isValid;
}

bool OAICreateAccessPoint_request_PosixUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_gids.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAccessPoint_request_PosixUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
