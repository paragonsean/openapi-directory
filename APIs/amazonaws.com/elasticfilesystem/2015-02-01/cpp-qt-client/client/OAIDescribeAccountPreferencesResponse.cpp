/**
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAccountPreferencesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAccountPreferencesResponse::OAIDescribeAccountPreferencesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAccountPreferencesResponse::OAIDescribeAccountPreferencesResponse() {
    this->initializeModel();
}

OAIDescribeAccountPreferencesResponse::~OAIDescribeAccountPreferencesResponse() {}

void OAIDescribeAccountPreferencesResponse::initializeModel() {

    m_resource_id_preference_isSet = false;
    m_resource_id_preference_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIDescribeAccountPreferencesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAccountPreferencesResponse::fromJsonObject(QJsonObject json) {

    m_resource_id_preference_isValid = ::OpenAPI::fromJsonValue(m_resource_id_preference, json[QString("ResourceIdPreference")]);
    m_resource_id_preference_isSet = !json[QString("ResourceIdPreference")].isNull() && m_resource_id_preference_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIDescribeAccountPreferencesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAccountPreferencesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_id_preference.isSet()) {
        obj.insert(QString("ResourceIdPreference"), ::OpenAPI::toJsonValue(m_resource_id_preference));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

OAIDescribeAccountPreferencesResponse_ResourceIdPreference OAIDescribeAccountPreferencesResponse::getResourceIdPreference() const {
    return m_resource_id_preference;
}
void OAIDescribeAccountPreferencesResponse::setResourceIdPreference(const OAIDescribeAccountPreferencesResponse_ResourceIdPreference &resource_id_preference) {
    m_resource_id_preference = resource_id_preference;
    m_resource_id_preference_isSet = true;
}

bool OAIDescribeAccountPreferencesResponse::is_resource_id_preference_Set() const{
    return m_resource_id_preference_isSet;
}

bool OAIDescribeAccountPreferencesResponse::is_resource_id_preference_Valid() const{
    return m_resource_id_preference_isValid;
}

QString OAIDescribeAccountPreferencesResponse::getNextToken() const {
    return m_next_token;
}
void OAIDescribeAccountPreferencesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeAccountPreferencesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeAccountPreferencesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIDescribeAccountPreferencesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_id_preference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAccountPreferencesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
