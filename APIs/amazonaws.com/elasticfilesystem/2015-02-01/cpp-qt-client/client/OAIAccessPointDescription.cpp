/**
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessPointDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessPointDescription::OAIAccessPointDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessPointDescription::OAIAccessPointDescription() {
    this->initializeModel();
}

OAIAccessPointDescription::~OAIAccessPointDescription() {}

void OAIAccessPointDescription::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_access_point_id_isSet = false;
    m_access_point_id_isValid = false;

    m_access_point_arn_isSet = false;
    m_access_point_arn_isValid = false;

    m_file_system_id_isSet = false;
    m_file_system_id_isValid = false;

    m_posix_user_isSet = false;
    m_posix_user_isValid = false;

    m_root_directory_isSet = false;
    m_root_directory_isValid = false;

    m_owner_id_isSet = false;
    m_owner_id_isValid = false;

    m_life_cycle_state_isSet = false;
    m_life_cycle_state_isValid = false;
}

void OAIAccessPointDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessPointDescription::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_access_point_id_isValid = ::OpenAPI::fromJsonValue(m_access_point_id, json[QString("AccessPointId")]);
    m_access_point_id_isSet = !json[QString("AccessPointId")].isNull() && m_access_point_id_isValid;

    m_access_point_arn_isValid = ::OpenAPI::fromJsonValue(m_access_point_arn, json[QString("AccessPointArn")]);
    m_access_point_arn_isSet = !json[QString("AccessPointArn")].isNull() && m_access_point_arn_isValid;

    m_file_system_id_isValid = ::OpenAPI::fromJsonValue(m_file_system_id, json[QString("FileSystemId")]);
    m_file_system_id_isSet = !json[QString("FileSystemId")].isNull() && m_file_system_id_isValid;

    m_posix_user_isValid = ::OpenAPI::fromJsonValue(m_posix_user, json[QString("PosixUser")]);
    m_posix_user_isSet = !json[QString("PosixUser")].isNull() && m_posix_user_isValid;

    m_root_directory_isValid = ::OpenAPI::fromJsonValue(m_root_directory, json[QString("RootDirectory")]);
    m_root_directory_isSet = !json[QString("RootDirectory")].isNull() && m_root_directory_isValid;

    m_owner_id_isValid = ::OpenAPI::fromJsonValue(m_owner_id, json[QString("OwnerId")]);
    m_owner_id_isSet = !json[QString("OwnerId")].isNull() && m_owner_id_isValid;

    m_life_cycle_state_isValid = ::OpenAPI::fromJsonValue(m_life_cycle_state, json[QString("LifeCycleState")]);
    m_life_cycle_state_isSet = !json[QString("LifeCycleState")].isNull() && m_life_cycle_state_isValid;
}

QString OAIAccessPointDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessPointDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_access_point_id_isSet) {
        obj.insert(QString("AccessPointId"), ::OpenAPI::toJsonValue(m_access_point_id));
    }
    if (m_access_point_arn_isSet) {
        obj.insert(QString("AccessPointArn"), ::OpenAPI::toJsonValue(m_access_point_arn));
    }
    if (m_file_system_id_isSet) {
        obj.insert(QString("FileSystemId"), ::OpenAPI::toJsonValue(m_file_system_id));
    }
    if (m_posix_user.isSet()) {
        obj.insert(QString("PosixUser"), ::OpenAPI::toJsonValue(m_posix_user));
    }
    if (m_root_directory.isSet()) {
        obj.insert(QString("RootDirectory"), ::OpenAPI::toJsonValue(m_root_directory));
    }
    if (m_owner_id_isSet) {
        obj.insert(QString("OwnerId"), ::OpenAPI::toJsonValue(m_owner_id));
    }
    if (m_life_cycle_state.isSet()) {
        obj.insert(QString("LifeCycleState"), ::OpenAPI::toJsonValue(m_life_cycle_state));
    }
    return obj;
}

QString OAIAccessPointDescription::getClientToken() const {
    return m_client_token;
}
void OAIAccessPointDescription::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIAccessPointDescription::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIAccessPointDescription::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAIAccessPointDescription::getName() const {
    return m_name;
}
void OAIAccessPointDescription::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAccessPointDescription::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAccessPointDescription::is_name_Valid() const{
    return m_name_isValid;
}

QList OAIAccessPointDescription::getTags() const {
    return m_tags;
}
void OAIAccessPointDescription::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIAccessPointDescription::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIAccessPointDescription::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIAccessPointDescription::getAccessPointId() const {
    return m_access_point_id;
}
void OAIAccessPointDescription::setAccessPointId(const QString &access_point_id) {
    m_access_point_id = access_point_id;
    m_access_point_id_isSet = true;
}

bool OAIAccessPointDescription::is_access_point_id_Set() const{
    return m_access_point_id_isSet;
}

bool OAIAccessPointDescription::is_access_point_id_Valid() const{
    return m_access_point_id_isValid;
}

QString OAIAccessPointDescription::getAccessPointArn() const {
    return m_access_point_arn;
}
void OAIAccessPointDescription::setAccessPointArn(const QString &access_point_arn) {
    m_access_point_arn = access_point_arn;
    m_access_point_arn_isSet = true;
}

bool OAIAccessPointDescription::is_access_point_arn_Set() const{
    return m_access_point_arn_isSet;
}

bool OAIAccessPointDescription::is_access_point_arn_Valid() const{
    return m_access_point_arn_isValid;
}

QString OAIAccessPointDescription::getFileSystemId() const {
    return m_file_system_id;
}
void OAIAccessPointDescription::setFileSystemId(const QString &file_system_id) {
    m_file_system_id = file_system_id;
    m_file_system_id_isSet = true;
}

bool OAIAccessPointDescription::is_file_system_id_Set() const{
    return m_file_system_id_isSet;
}

bool OAIAccessPointDescription::is_file_system_id_Valid() const{
    return m_file_system_id_isValid;
}

OAIAccessPointDescription_PosixUser OAIAccessPointDescription::getPosixUser() const {
    return m_posix_user;
}
void OAIAccessPointDescription::setPosixUser(const OAIAccessPointDescription_PosixUser &posix_user) {
    m_posix_user = posix_user;
    m_posix_user_isSet = true;
}

bool OAIAccessPointDescription::is_posix_user_Set() const{
    return m_posix_user_isSet;
}

bool OAIAccessPointDescription::is_posix_user_Valid() const{
    return m_posix_user_isValid;
}

OAIAccessPointDescription_RootDirectory OAIAccessPointDescription::getRootDirectory() const {
    return m_root_directory;
}
void OAIAccessPointDescription::setRootDirectory(const OAIAccessPointDescription_RootDirectory &root_directory) {
    m_root_directory = root_directory;
    m_root_directory_isSet = true;
}

bool OAIAccessPointDescription::is_root_directory_Set() const{
    return m_root_directory_isSet;
}

bool OAIAccessPointDescription::is_root_directory_Valid() const{
    return m_root_directory_isValid;
}

QString OAIAccessPointDescription::getOwnerId() const {
    return m_owner_id;
}
void OAIAccessPointDescription::setOwnerId(const QString &owner_id) {
    m_owner_id = owner_id;
    m_owner_id_isSet = true;
}

bool OAIAccessPointDescription::is_owner_id_Set() const{
    return m_owner_id_isSet;
}

bool OAIAccessPointDescription::is_owner_id_Valid() const{
    return m_owner_id_isValid;
}

OAILifeCycleState OAIAccessPointDescription::getLifeCycleState() const {
    return m_life_cycle_state;
}
void OAIAccessPointDescription::setLifeCycleState(const OAILifeCycleState &life_cycle_state) {
    m_life_cycle_state = life_cycle_state;
    m_life_cycle_state_isSet = true;
}

bool OAIAccessPointDescription::is_life_cycle_state_Set() const{
    return m_life_cycle_state_isSet;
}

bool OAIAccessPointDescription::is_life_cycle_state_Valid() const{
    return m_life_cycle_state_isValid;
}

bool OAIAccessPointDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_point_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_point_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_posix_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_directory.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_life_cycle_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessPointDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
