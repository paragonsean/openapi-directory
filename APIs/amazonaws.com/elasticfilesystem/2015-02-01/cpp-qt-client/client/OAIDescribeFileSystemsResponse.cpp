/**
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeFileSystemsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeFileSystemsResponse::OAIDescribeFileSystemsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeFileSystemsResponse::OAIDescribeFileSystemsResponse() {
    this->initializeModel();
}

OAIDescribeFileSystemsResponse::~OAIDescribeFileSystemsResponse() {}

void OAIDescribeFileSystemsResponse::initializeModel() {

    m_marker_isSet = false;
    m_marker_isValid = false;

    m_file_systems_isSet = false;
    m_file_systems_isValid = false;

    m_next_marker_isSet = false;
    m_next_marker_isValid = false;
}

void OAIDescribeFileSystemsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeFileSystemsResponse::fromJsonObject(QJsonObject json) {

    m_marker_isValid = ::OpenAPI::fromJsonValue(m_marker, json[QString("Marker")]);
    m_marker_isSet = !json[QString("Marker")].isNull() && m_marker_isValid;

    m_file_systems_isValid = ::OpenAPI::fromJsonValue(m_file_systems, json[QString("FileSystems")]);
    m_file_systems_isSet = !json[QString("FileSystems")].isNull() && m_file_systems_isValid;

    m_next_marker_isValid = ::OpenAPI::fromJsonValue(m_next_marker, json[QString("NextMarker")]);
    m_next_marker_isSet = !json[QString("NextMarker")].isNull() && m_next_marker_isValid;
}

QString OAIDescribeFileSystemsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeFileSystemsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_marker_isSet) {
        obj.insert(QString("Marker"), ::OpenAPI::toJsonValue(m_marker));
    }
    if (m_file_systems.isSet()) {
        obj.insert(QString("FileSystems"), ::OpenAPI::toJsonValue(m_file_systems));
    }
    if (m_next_marker_isSet) {
        obj.insert(QString("NextMarker"), ::OpenAPI::toJsonValue(m_next_marker));
    }
    return obj;
}

QString OAIDescribeFileSystemsResponse::getMarker() const {
    return m_marker;
}
void OAIDescribeFileSystemsResponse::setMarker(const QString &marker) {
    m_marker = marker;
    m_marker_isSet = true;
}

bool OAIDescribeFileSystemsResponse::is_marker_Set() const{
    return m_marker_isSet;
}

bool OAIDescribeFileSystemsResponse::is_marker_Valid() const{
    return m_marker_isValid;
}

QList OAIDescribeFileSystemsResponse::getFileSystems() const {
    return m_file_systems;
}
void OAIDescribeFileSystemsResponse::setFileSystems(const QList &file_systems) {
    m_file_systems = file_systems;
    m_file_systems_isSet = true;
}

bool OAIDescribeFileSystemsResponse::is_file_systems_Set() const{
    return m_file_systems_isSet;
}

bool OAIDescribeFileSystemsResponse::is_file_systems_Valid() const{
    return m_file_systems_isValid;
}

QString OAIDescribeFileSystemsResponse::getNextMarker() const {
    return m_next_marker;
}
void OAIDescribeFileSystemsResponse::setNextMarker(const QString &next_marker) {
    m_next_marker = next_marker;
    m_next_marker_isSet = true;
}

bool OAIDescribeFileSystemsResponse::is_next_marker_Set() const{
    return m_next_marker_isSet;
}

bool OAIDescribeFileSystemsResponse::is_next_marker_Valid() const{
    return m_next_marker_isValid;
}

bool OAIDescribeFileSystemsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_marker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_systems.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_marker_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeFileSystemsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
