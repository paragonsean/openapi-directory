/**
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILifecyclePolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILifecyclePolicy::OAILifecyclePolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILifecyclePolicy::OAILifecyclePolicy() {
    this->initializeModel();
}

OAILifecyclePolicy::~OAILifecyclePolicy() {}

void OAILifecyclePolicy::initializeModel() {

    m_transition_to_ia_isSet = false;
    m_transition_to_ia_isValid = false;

    m_transition_to_primary_storage_class_isSet = false;
    m_transition_to_primary_storage_class_isValid = false;
}

void OAILifecyclePolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILifecyclePolicy::fromJsonObject(QJsonObject json) {

    m_transition_to_ia_isValid = ::OpenAPI::fromJsonValue(m_transition_to_ia, json[QString("TransitionToIA")]);
    m_transition_to_ia_isSet = !json[QString("TransitionToIA")].isNull() && m_transition_to_ia_isValid;

    m_transition_to_primary_storage_class_isValid = ::OpenAPI::fromJsonValue(m_transition_to_primary_storage_class, json[QString("TransitionToPrimaryStorageClass")]);
    m_transition_to_primary_storage_class_isSet = !json[QString("TransitionToPrimaryStorageClass")].isNull() && m_transition_to_primary_storage_class_isValid;
}

QString OAILifecyclePolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILifecyclePolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_transition_to_ia.isSet()) {
        obj.insert(QString("TransitionToIA"), ::OpenAPI::toJsonValue(m_transition_to_ia));
    }
    if (m_transition_to_primary_storage_class.isSet()) {
        obj.insert(QString("TransitionToPrimaryStorageClass"), ::OpenAPI::toJsonValue(m_transition_to_primary_storage_class));
    }
    return obj;
}

OAITransitionToIARules OAILifecyclePolicy::getTransitionToIa() const {
    return m_transition_to_ia;
}
void OAILifecyclePolicy::setTransitionToIa(const OAITransitionToIARules &transition_to_ia) {
    m_transition_to_ia = transition_to_ia;
    m_transition_to_ia_isSet = true;
}

bool OAILifecyclePolicy::is_transition_to_ia_Set() const{
    return m_transition_to_ia_isSet;
}

bool OAILifecyclePolicy::is_transition_to_ia_Valid() const{
    return m_transition_to_ia_isValid;
}

OAITransitionToPrimaryStorageClassRules OAILifecyclePolicy::getTransitionToPrimaryStorageClass() const {
    return m_transition_to_primary_storage_class;
}
void OAILifecyclePolicy::setTransitionToPrimaryStorageClass(const OAITransitionToPrimaryStorageClassRules &transition_to_primary_storage_class) {
    m_transition_to_primary_storage_class = transition_to_primary_storage_class;
    m_transition_to_primary_storage_class_isSet = true;
}

bool OAILifecyclePolicy::is_transition_to_primary_storage_class_Set() const{
    return m_transition_to_primary_storage_class_isSet;
}

bool OAILifecyclePolicy::is_transition_to_primary_storage_class_Valid() const{
    return m_transition_to_primary_storage_class_isValid;
}

bool OAILifecyclePolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_transition_to_ia.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transition_to_primary_storage_class.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILifecyclePolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
