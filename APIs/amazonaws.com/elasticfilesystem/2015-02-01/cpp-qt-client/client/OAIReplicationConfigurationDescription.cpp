/**
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReplicationConfigurationDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReplicationConfigurationDescription::OAIReplicationConfigurationDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReplicationConfigurationDescription::OAIReplicationConfigurationDescription() {
    this->initializeModel();
}

OAIReplicationConfigurationDescription::~OAIReplicationConfigurationDescription() {}

void OAIReplicationConfigurationDescription::initializeModel() {

    m_source_file_system_id_isSet = false;
    m_source_file_system_id_isValid = false;

    m_source_file_system_region_isSet = false;
    m_source_file_system_region_isValid = false;

    m_source_file_system_arn_isSet = false;
    m_source_file_system_arn_isValid = false;

    m_original_source_file_system_arn_isSet = false;
    m_original_source_file_system_arn_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_destinations_isSet = false;
    m_destinations_isValid = false;
}

void OAIReplicationConfigurationDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReplicationConfigurationDescription::fromJsonObject(QJsonObject json) {

    m_source_file_system_id_isValid = ::OpenAPI::fromJsonValue(m_source_file_system_id, json[QString("SourceFileSystemId")]);
    m_source_file_system_id_isSet = !json[QString("SourceFileSystemId")].isNull() && m_source_file_system_id_isValid;

    m_source_file_system_region_isValid = ::OpenAPI::fromJsonValue(m_source_file_system_region, json[QString("SourceFileSystemRegion")]);
    m_source_file_system_region_isSet = !json[QString("SourceFileSystemRegion")].isNull() && m_source_file_system_region_isValid;

    m_source_file_system_arn_isValid = ::OpenAPI::fromJsonValue(m_source_file_system_arn, json[QString("SourceFileSystemArn")]);
    m_source_file_system_arn_isSet = !json[QString("SourceFileSystemArn")].isNull() && m_source_file_system_arn_isValid;

    m_original_source_file_system_arn_isValid = ::OpenAPI::fromJsonValue(m_original_source_file_system_arn, json[QString("OriginalSourceFileSystemArn")]);
    m_original_source_file_system_arn_isSet = !json[QString("OriginalSourceFileSystemArn")].isNull() && m_original_source_file_system_arn_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_destinations_isValid = ::OpenAPI::fromJsonValue(m_destinations, json[QString("Destinations")]);
    m_destinations_isSet = !json[QString("Destinations")].isNull() && m_destinations_isValid;
}

QString OAIReplicationConfigurationDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReplicationConfigurationDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_source_file_system_id_isSet) {
        obj.insert(QString("SourceFileSystemId"), ::OpenAPI::toJsonValue(m_source_file_system_id));
    }
    if (m_source_file_system_region_isSet) {
        obj.insert(QString("SourceFileSystemRegion"), ::OpenAPI::toJsonValue(m_source_file_system_region));
    }
    if (m_source_file_system_arn_isSet) {
        obj.insert(QString("SourceFileSystemArn"), ::OpenAPI::toJsonValue(m_source_file_system_arn));
    }
    if (m_original_source_file_system_arn_isSet) {
        obj.insert(QString("OriginalSourceFileSystemArn"), ::OpenAPI::toJsonValue(m_original_source_file_system_arn));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_destinations.isSet()) {
        obj.insert(QString("Destinations"), ::OpenAPI::toJsonValue(m_destinations));
    }
    return obj;
}

QString OAIReplicationConfigurationDescription::getSourceFileSystemId() const {
    return m_source_file_system_id;
}
void OAIReplicationConfigurationDescription::setSourceFileSystemId(const QString &source_file_system_id) {
    m_source_file_system_id = source_file_system_id;
    m_source_file_system_id_isSet = true;
}

bool OAIReplicationConfigurationDescription::is_source_file_system_id_Set() const{
    return m_source_file_system_id_isSet;
}

bool OAIReplicationConfigurationDescription::is_source_file_system_id_Valid() const{
    return m_source_file_system_id_isValid;
}

QString OAIReplicationConfigurationDescription::getSourceFileSystemRegion() const {
    return m_source_file_system_region;
}
void OAIReplicationConfigurationDescription::setSourceFileSystemRegion(const QString &source_file_system_region) {
    m_source_file_system_region = source_file_system_region;
    m_source_file_system_region_isSet = true;
}

bool OAIReplicationConfigurationDescription::is_source_file_system_region_Set() const{
    return m_source_file_system_region_isSet;
}

bool OAIReplicationConfigurationDescription::is_source_file_system_region_Valid() const{
    return m_source_file_system_region_isValid;
}

QString OAIReplicationConfigurationDescription::getSourceFileSystemArn() const {
    return m_source_file_system_arn;
}
void OAIReplicationConfigurationDescription::setSourceFileSystemArn(const QString &source_file_system_arn) {
    m_source_file_system_arn = source_file_system_arn;
    m_source_file_system_arn_isSet = true;
}

bool OAIReplicationConfigurationDescription::is_source_file_system_arn_Set() const{
    return m_source_file_system_arn_isSet;
}

bool OAIReplicationConfigurationDescription::is_source_file_system_arn_Valid() const{
    return m_source_file_system_arn_isValid;
}

QString OAIReplicationConfigurationDescription::getOriginalSourceFileSystemArn() const {
    return m_original_source_file_system_arn;
}
void OAIReplicationConfigurationDescription::setOriginalSourceFileSystemArn(const QString &original_source_file_system_arn) {
    m_original_source_file_system_arn = original_source_file_system_arn;
    m_original_source_file_system_arn_isSet = true;
}

bool OAIReplicationConfigurationDescription::is_original_source_file_system_arn_Set() const{
    return m_original_source_file_system_arn_isSet;
}

bool OAIReplicationConfigurationDescription::is_original_source_file_system_arn_Valid() const{
    return m_original_source_file_system_arn_isValid;
}

QDateTime OAIReplicationConfigurationDescription::getCreationTime() const {
    return m_creation_time;
}
void OAIReplicationConfigurationDescription::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIReplicationConfigurationDescription::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIReplicationConfigurationDescription::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QList OAIReplicationConfigurationDescription::getDestinations() const {
    return m_destinations;
}
void OAIReplicationConfigurationDescription::setDestinations(const QList &destinations) {
    m_destinations = destinations;
    m_destinations_isSet = true;
}

bool OAIReplicationConfigurationDescription::is_destinations_Set() const{
    return m_destinations_isSet;
}

bool OAIReplicationConfigurationDescription::is_destinations_Valid() const{
    return m_destinations_isValid;
}

bool OAIReplicationConfigurationDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_file_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_file_system_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_file_system_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_source_file_system_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destinations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReplicationConfigurationDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_file_system_id_isValid && m_source_file_system_region_isValid && m_source_file_system_arn_isValid && m_original_source_file_system_arn_isValid && m_creation_time_isValid && m_destinations_isValid && true;
}

} // namespace OpenAPI
