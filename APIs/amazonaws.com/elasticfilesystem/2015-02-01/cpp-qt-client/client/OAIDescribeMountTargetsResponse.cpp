/**
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeMountTargetsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeMountTargetsResponse::OAIDescribeMountTargetsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeMountTargetsResponse::OAIDescribeMountTargetsResponse() {
    this->initializeModel();
}

OAIDescribeMountTargetsResponse::~OAIDescribeMountTargetsResponse() {}

void OAIDescribeMountTargetsResponse::initializeModel() {

    m_marker_isSet = false;
    m_marker_isValid = false;

    m_mount_targets_isSet = false;
    m_mount_targets_isValid = false;

    m_next_marker_isSet = false;
    m_next_marker_isValid = false;
}

void OAIDescribeMountTargetsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeMountTargetsResponse::fromJsonObject(QJsonObject json) {

    m_marker_isValid = ::OpenAPI::fromJsonValue(m_marker, json[QString("Marker")]);
    m_marker_isSet = !json[QString("Marker")].isNull() && m_marker_isValid;

    m_mount_targets_isValid = ::OpenAPI::fromJsonValue(m_mount_targets, json[QString("MountTargets")]);
    m_mount_targets_isSet = !json[QString("MountTargets")].isNull() && m_mount_targets_isValid;

    m_next_marker_isValid = ::OpenAPI::fromJsonValue(m_next_marker, json[QString("NextMarker")]);
    m_next_marker_isSet = !json[QString("NextMarker")].isNull() && m_next_marker_isValid;
}

QString OAIDescribeMountTargetsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeMountTargetsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_marker_isSet) {
        obj.insert(QString("Marker"), ::OpenAPI::toJsonValue(m_marker));
    }
    if (m_mount_targets.isSet()) {
        obj.insert(QString("MountTargets"), ::OpenAPI::toJsonValue(m_mount_targets));
    }
    if (m_next_marker_isSet) {
        obj.insert(QString("NextMarker"), ::OpenAPI::toJsonValue(m_next_marker));
    }
    return obj;
}

QString OAIDescribeMountTargetsResponse::getMarker() const {
    return m_marker;
}
void OAIDescribeMountTargetsResponse::setMarker(const QString &marker) {
    m_marker = marker;
    m_marker_isSet = true;
}

bool OAIDescribeMountTargetsResponse::is_marker_Set() const{
    return m_marker_isSet;
}

bool OAIDescribeMountTargetsResponse::is_marker_Valid() const{
    return m_marker_isValid;
}

QList OAIDescribeMountTargetsResponse::getMountTargets() const {
    return m_mount_targets;
}
void OAIDescribeMountTargetsResponse::setMountTargets(const QList &mount_targets) {
    m_mount_targets = mount_targets;
    m_mount_targets_isSet = true;
}

bool OAIDescribeMountTargetsResponse::is_mount_targets_Set() const{
    return m_mount_targets_isSet;
}

bool OAIDescribeMountTargetsResponse::is_mount_targets_Valid() const{
    return m_mount_targets_isValid;
}

QString OAIDescribeMountTargetsResponse::getNextMarker() const {
    return m_next_marker;
}
void OAIDescribeMountTargetsResponse::setNextMarker(const QString &next_marker) {
    m_next_marker = next_marker;
    m_next_marker_isSet = true;
}

bool OAIDescribeMountTargetsResponse::is_next_marker_Set() const{
    return m_next_marker_isSet;
}

bool OAIDescribeMountTargetsResponse::is_next_marker_Valid() const{
    return m_next_marker_isValid;
}

bool OAIDescribeMountTargetsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_marker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mount_targets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_marker_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeMountTargetsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
