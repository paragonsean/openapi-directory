/**
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileSystemPolicyDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFileSystemPolicyDescription::OAIFileSystemPolicyDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFileSystemPolicyDescription::OAIFileSystemPolicyDescription() {
    this->initializeModel();
}

OAIFileSystemPolicyDescription::~OAIFileSystemPolicyDescription() {}

void OAIFileSystemPolicyDescription::initializeModel() {

    m_file_system_id_isSet = false;
    m_file_system_id_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;
}

void OAIFileSystemPolicyDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFileSystemPolicyDescription::fromJsonObject(QJsonObject json) {

    m_file_system_id_isValid = ::OpenAPI::fromJsonValue(m_file_system_id, json[QString("FileSystemId")]);
    m_file_system_id_isSet = !json[QString("FileSystemId")].isNull() && m_file_system_id_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("Policy")]);
    m_policy_isSet = !json[QString("Policy")].isNull() && m_policy_isValid;
}

QString OAIFileSystemPolicyDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFileSystemPolicyDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_file_system_id_isSet) {
        obj.insert(QString("FileSystemId"), ::OpenAPI::toJsonValue(m_file_system_id));
    }
    if (m_policy_isSet) {
        obj.insert(QString("Policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    return obj;
}

QString OAIFileSystemPolicyDescription::getFileSystemId() const {
    return m_file_system_id;
}
void OAIFileSystemPolicyDescription::setFileSystemId(const QString &file_system_id) {
    m_file_system_id = file_system_id;
    m_file_system_id_isSet = true;
}

bool OAIFileSystemPolicyDescription::is_file_system_id_Set() const{
    return m_file_system_id_isSet;
}

bool OAIFileSystemPolicyDescription::is_file_system_id_Valid() const{
    return m_file_system_id_isValid;
}

QString OAIFileSystemPolicyDescription::getPolicy() const {
    return m_policy;
}
void OAIFileSystemPolicyDescription::setPolicy(const QString &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIFileSystemPolicyDescription::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIFileSystemPolicyDescription::is_policy_Valid() const{
    return m_policy_isValid;
}

bool OAIFileSystemPolicyDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFileSystemPolicyDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
