/**
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateAccessPoint_request.h
 *
 * 
 */

#ifndef OAICreateAccessPoint_request_H
#define OAICreateAccessPoint_request_H

#include <QJsonObject>

#include "OAICreateAccessPoint_request_PosixUser.h"
#include "OAICreateAccessPoint_request_RootDirectory.h"
#include "OAITag.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITag;
class OAICreateAccessPoint_request_PosixUser;
class OAICreateAccessPoint_request_RootDirectory;

class OAICreateAccessPoint_request : public OAIObject {
public:
    OAICreateAccessPoint_request();
    OAICreateAccessPoint_request(QString json);
    ~OAICreateAccessPoint_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getClientToken() const;
    void setClientToken(const QString &client_token);
    bool is_client_token_Set() const;
    bool is_client_token_Valid() const;

    QList<OAITag> getTags() const;
    void setTags(const QList<OAITag> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getFileSystemId() const;
    void setFileSystemId(const QString &file_system_id);
    bool is_file_system_id_Set() const;
    bool is_file_system_id_Valid() const;

    OAICreateAccessPoint_request_PosixUser getPosixUser() const;
    void setPosixUser(const OAICreateAccessPoint_request_PosixUser &posix_user);
    bool is_posix_user_Set() const;
    bool is_posix_user_Valid() const;

    OAICreateAccessPoint_request_RootDirectory getRootDirectory() const;
    void setRootDirectory(const OAICreateAccessPoint_request_RootDirectory &root_directory);
    bool is_root_directory_Set() const;
    bool is_root_directory_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_client_token;
    bool m_client_token_isSet;
    bool m_client_token_isValid;

    QList<OAITag> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_file_system_id;
    bool m_file_system_id_isSet;
    bool m_file_system_id_isValid;

    OAICreateAccessPoint_request_PosixUser m_posix_user;
    bool m_posix_user_isSet;
    bool m_posix_user_isValid;

    OAICreateAccessPoint_request_RootDirectory m_root_directory;
    bool m_root_directory_isSet;
    bool m_root_directory_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateAccessPoint_request)

#endif // OAICreateAccessPoint_request_H
