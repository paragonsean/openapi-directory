/**
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPerformanceMode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPerformanceMode::OAIPerformanceMode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPerformanceMode::OAIPerformanceMode() {
    this->initializeModel();
}

OAIPerformanceMode::~OAIPerformanceMode() {}

void OAIPerformanceMode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPerformanceMode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPerformanceMode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("generalPurpose", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPerformanceMode::GENERALPURPOSE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("maxIO", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPerformanceMode::MAXIO;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPerformanceMode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPerformanceMode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPerformanceMode::GENERALPURPOSE:
            val = "generalPurpose";
            break;
        case eOAIPerformanceMode::MAXIO:
            val = "maxIO";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPerformanceMode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPerformanceMode::eOAIPerformanceMode OAIPerformanceMode::getValue() const {
    return m_value;
}

void OAIPerformanceMode::setValue(const OAIPerformanceMode::eOAIPerformanceMode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPerformanceMode::isSet() const {
    
    return m_value_isSet;
}

bool OAIPerformanceMode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
