/**
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFileSystemDescription.h
 *
 * A description of the file system.
 */

#ifndef OAIFileSystemDescription_H
#define OAIFileSystemDescription_H

#include <QJsonObject>

#include "OAIFileSystemDescription_SizeInBytes.h"
#include "OAILifeCycleState.h"
#include "OAIPerformanceMode.h"
#include "OAIThroughputMode.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIFileSystemDescription_SizeInBytes;

class OAIFileSystemDescription : public OAIObject {
public:
    OAIFileSystemDescription();
    OAIFileSystemDescription(QString json);
    ~OAIFileSystemDescription() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getOwnerId() const;
    void setOwnerId(const QString &owner_id);
    bool is_owner_id_Set() const;
    bool is_owner_id_Valid() const;

    QString getCreationToken() const;
    void setCreationToken(const QString &creation_token);
    bool is_creation_token_Set() const;
    bool is_creation_token_Valid() const;

    QString getFileSystemId() const;
    void setFileSystemId(const QString &file_system_id);
    bool is_file_system_id_Set() const;
    bool is_file_system_id_Valid() const;

    QString getFileSystemArn() const;
    void setFileSystemArn(const QString &file_system_arn);
    bool is_file_system_arn_Set() const;
    bool is_file_system_arn_Valid() const;

    QDateTime getCreationTime() const;
    void setCreationTime(const QDateTime &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    OAILifeCycleState getLifeCycleState() const;
    void setLifeCycleState(const OAILifeCycleState &life_cycle_state);
    bool is_life_cycle_state_Set() const;
    bool is_life_cycle_state_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getNumberOfMountTargets() const;
    void setNumberOfMountTargets(const qint32 &number_of_mount_targets);
    bool is_number_of_mount_targets_Set() const;
    bool is_number_of_mount_targets_Valid() const;

    OAIFileSystemDescription_SizeInBytes getSizeInBytes() const;
    void setSizeInBytes(const OAIFileSystemDescription_SizeInBytes &size_in_bytes);
    bool is_size_in_bytes_Set() const;
    bool is_size_in_bytes_Valid() const;

    OAIPerformanceMode getPerformanceMode() const;
    void setPerformanceMode(const OAIPerformanceMode &performance_mode);
    bool is_performance_mode_Set() const;
    bool is_performance_mode_Valid() const;

    bool getEncrypted() const;
    void setEncrypted(const bool &encrypted);
    bool is_encrypted_Set() const;
    bool is_encrypted_Valid() const;

    QString getKmsKeyId() const;
    void setKmsKeyId(const QString &kms_key_id);
    bool is_kms_key_id_Set() const;
    bool is_kms_key_id_Valid() const;

    OAIThroughputMode getThroughputMode() const;
    void setThroughputMode(const OAIThroughputMode &throughput_mode);
    bool is_throughput_mode_Set() const;
    bool is_throughput_mode_Valid() const;

    double getProvisionedThroughputInMibps() const;
    void setProvisionedThroughputInMibps(const double &provisioned_throughput_in_mibps);
    bool is_provisioned_throughput_in_mibps_Set() const;
    bool is_provisioned_throughput_in_mibps_Valid() const;

    QString getAvailabilityZoneName() const;
    void setAvailabilityZoneName(const QString &availability_zone_name);
    bool is_availability_zone_name_Set() const;
    bool is_availability_zone_name_Valid() const;

    QString getAvailabilityZoneId() const;
    void setAvailabilityZoneId(const QString &availability_zone_id);
    bool is_availability_zone_id_Set() const;
    bool is_availability_zone_id_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_owner_id;
    bool m_owner_id_isSet;
    bool m_owner_id_isValid;

    QString m_creation_token;
    bool m_creation_token_isSet;
    bool m_creation_token_isValid;

    QString m_file_system_id;
    bool m_file_system_id_isSet;
    bool m_file_system_id_isValid;

    QString m_file_system_arn;
    bool m_file_system_arn_isSet;
    bool m_file_system_arn_isValid;

    QDateTime m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;

    OAILifeCycleState m_life_cycle_state;
    bool m_life_cycle_state_isSet;
    bool m_life_cycle_state_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_number_of_mount_targets;
    bool m_number_of_mount_targets_isSet;
    bool m_number_of_mount_targets_isValid;

    OAIFileSystemDescription_SizeInBytes m_size_in_bytes;
    bool m_size_in_bytes_isSet;
    bool m_size_in_bytes_isValid;

    OAIPerformanceMode m_performance_mode;
    bool m_performance_mode_isSet;
    bool m_performance_mode_isValid;

    bool m_encrypted;
    bool m_encrypted_isSet;
    bool m_encrypted_isValid;

    QString m_kms_key_id;
    bool m_kms_key_id_isSet;
    bool m_kms_key_id_isValid;

    OAIThroughputMode m_throughput_mode;
    bool m_throughput_mode_isSet;
    bool m_throughput_mode_isValid;

    double m_provisioned_throughput_in_mibps;
    bool m_provisioned_throughput_in_mibps_isSet;
    bool m_provisioned_throughput_in_mibps_isValid;

    QString m_availability_zone_name;
    bool m_availability_zone_name_isSet;
    bool m_availability_zone_name_isValid;

    QString m_availability_zone_id;
    bool m_availability_zone_id_isSet;
    bool m_availability_zone_id_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFileSystemDescription)

#endif // OAIFileSystemDescription_H
