/**
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestination::OAIDestination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestination::OAIDestination() {
    this->initializeModel();
}

OAIDestination::~OAIDestination() {}

void OAIDestination::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_file_system_id_isSet = false;
    m_file_system_id_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_last_replicated_timestamp_isSet = false;
    m_last_replicated_timestamp_isValid = false;
}

void OAIDestination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestination::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_file_system_id_isValid = ::OpenAPI::fromJsonValue(m_file_system_id, json[QString("FileSystemId")]);
    m_file_system_id_isSet = !json[QString("FileSystemId")].isNull() && m_file_system_id_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("Region")]);
    m_region_isSet = !json[QString("Region")].isNull() && m_region_isValid;

    m_last_replicated_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_replicated_timestamp, json[QString("LastReplicatedTimestamp")]);
    m_last_replicated_timestamp_isSet = !json[QString("LastReplicatedTimestamp")].isNull() && m_last_replicated_timestamp_isValid;
}

QString OAIDestination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestination::asJsonObject() const {
    QJsonObject obj;
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_file_system_id_isSet) {
        obj.insert(QString("FileSystemId"), ::OpenAPI::toJsonValue(m_file_system_id));
    }
    if (m_region_isSet) {
        obj.insert(QString("Region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_last_replicated_timestamp_isSet) {
        obj.insert(QString("LastReplicatedTimestamp"), ::OpenAPI::toJsonValue(m_last_replicated_timestamp));
    }
    return obj;
}

OAIReplicationStatus OAIDestination::getStatus() const {
    return m_status;
}
void OAIDestination::setStatus(const OAIReplicationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDestination::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDestination::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDestination::getFileSystemId() const {
    return m_file_system_id;
}
void OAIDestination::setFileSystemId(const QString &file_system_id) {
    m_file_system_id = file_system_id;
    m_file_system_id_isSet = true;
}

bool OAIDestination::is_file_system_id_Set() const{
    return m_file_system_id_isSet;
}

bool OAIDestination::is_file_system_id_Valid() const{
    return m_file_system_id_isValid;
}

QString OAIDestination::getRegion() const {
    return m_region;
}
void OAIDestination::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIDestination::is_region_Set() const{
    return m_region_isSet;
}

bool OAIDestination::is_region_Valid() const{
    return m_region_isValid;
}

QDateTime OAIDestination::getLastReplicatedTimestamp() const {
    return m_last_replicated_timestamp;
}
void OAIDestination::setLastReplicatedTimestamp(const QDateTime &last_replicated_timestamp) {
    m_last_replicated_timestamp = last_replicated_timestamp;
    m_last_replicated_timestamp_isSet = true;
}

bool OAIDestination::is_last_replicated_timestamp_Set() const{
    return m_last_replicated_timestamp_isSet;
}

bool OAIDestination::is_last_replicated_timestamp_Valid() const{
    return m_last_replicated_timestamp_isValid;
}

bool OAIDestination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_replicated_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestination::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_isValid && m_file_system_id_isValid && m_region_isValid && true;
}

} // namespace OpenAPI
