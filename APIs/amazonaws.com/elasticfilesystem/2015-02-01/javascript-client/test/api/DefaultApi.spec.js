/**
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonElasticFileSystem);
  }
}(this, function(expect, AmazonElasticFileSystem) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonElasticFileSystem.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('createAccessPoint', function() {
      it('should call createAccessPoint successfully', function(done) {
        //uncomment below and update the code to test createAccessPoint
        //instance.createAccessPoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createFileSystem', function() {
      it('should call createFileSystem successfully', function(done) {
        //uncomment below and update the code to test createFileSystem
        //instance.createFileSystem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createMountTarget', function() {
      it('should call createMountTarget successfully', function(done) {
        //uncomment below and update the code to test createMountTarget
        //instance.createMountTarget(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createReplicationConfiguration', function() {
      it('should call createReplicationConfiguration successfully', function(done) {
        //uncomment below and update the code to test createReplicationConfiguration
        //instance.createReplicationConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTags', function() {
      it('should call createTags successfully', function(done) {
        //uncomment below and update the code to test createTags
        //instance.createTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAccessPoint', function() {
      it('should call deleteAccessPoint successfully', function(done) {
        //uncomment below and update the code to test deleteAccessPoint
        //instance.deleteAccessPoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFileSystem', function() {
      it('should call deleteFileSystem successfully', function(done) {
        //uncomment below and update the code to test deleteFileSystem
        //instance.deleteFileSystem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFileSystemPolicy', function() {
      it('should call deleteFileSystemPolicy successfully', function(done) {
        //uncomment below and update the code to test deleteFileSystemPolicy
        //instance.deleteFileSystemPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteMountTarget', function() {
      it('should call deleteMountTarget successfully', function(done) {
        //uncomment below and update the code to test deleteMountTarget
        //instance.deleteMountTarget(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteReplicationConfiguration', function() {
      it('should call deleteReplicationConfiguration successfully', function(done) {
        //uncomment below and update the code to test deleteReplicationConfiguration
        //instance.deleteReplicationConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTags', function() {
      it('should call deleteTags successfully', function(done) {
        //uncomment below and update the code to test deleteTags
        //instance.deleteTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeAccessPoints', function() {
      it('should call describeAccessPoints successfully', function(done) {
        //uncomment below and update the code to test describeAccessPoints
        //instance.describeAccessPoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeAccountPreferences', function() {
      it('should call describeAccountPreferences successfully', function(done) {
        //uncomment below and update the code to test describeAccountPreferences
        //instance.describeAccountPreferences(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeBackupPolicy', function() {
      it('should call describeBackupPolicy successfully', function(done) {
        //uncomment below and update the code to test describeBackupPolicy
        //instance.describeBackupPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeFileSystemPolicy', function() {
      it('should call describeFileSystemPolicy successfully', function(done) {
        //uncomment below and update the code to test describeFileSystemPolicy
        //instance.describeFileSystemPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeFileSystems', function() {
      it('should call describeFileSystems successfully', function(done) {
        //uncomment below and update the code to test describeFileSystems
        //instance.describeFileSystems(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeLifecycleConfiguration', function() {
      it('should call describeLifecycleConfiguration successfully', function(done) {
        //uncomment below and update the code to test describeLifecycleConfiguration
        //instance.describeLifecycleConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeMountTargetSecurityGroups', function() {
      it('should call describeMountTargetSecurityGroups successfully', function(done) {
        //uncomment below and update the code to test describeMountTargetSecurityGroups
        //instance.describeMountTargetSecurityGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeMountTargets', function() {
      it('should call describeMountTargets successfully', function(done) {
        //uncomment below and update the code to test describeMountTargets
        //instance.describeMountTargets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeReplicationConfigurations', function() {
      it('should call describeReplicationConfigurations successfully', function(done) {
        //uncomment below and update the code to test describeReplicationConfigurations
        //instance.describeReplicationConfigurations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeTags', function() {
      it('should call describeTags successfully', function(done) {
        //uncomment below and update the code to test describeTags
        //instance.describeTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modifyMountTargetSecurityGroups', function() {
      it('should call modifyMountTargetSecurityGroups successfully', function(done) {
        //uncomment below and update the code to test modifyMountTargetSecurityGroups
        //instance.modifyMountTargetSecurityGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putAccountPreferences', function() {
      it('should call putAccountPreferences successfully', function(done) {
        //uncomment below and update the code to test putAccountPreferences
        //instance.putAccountPreferences(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putBackupPolicy', function() {
      it('should call putBackupPolicy successfully', function(done) {
        //uncomment below and update the code to test putBackupPolicy
        //instance.putBackupPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putFileSystemPolicy', function() {
      it('should call putFileSystemPolicy successfully', function(done) {
        //uncomment below and update the code to test putFileSystemPolicy
        //instance.putFileSystemPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putLifecycleConfiguration', function() {
      it('should call putLifecycleConfiguration successfully', function(done) {
        //uncomment below and update the code to test putLifecycleConfiguration
        //instance.putLifecycleConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFileSystem', function() {
      it('should call updateFileSystem successfully', function(done) {
        //uncomment below and update the code to test updateFileSystem
        //instance.updateFileSystem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
