/**
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LifecyclePolicy from './LifecyclePolicy';

/**
 * The PutLifecycleConfigurationRequest model module.
 * @module model/PutLifecycleConfigurationRequest
 * @version 2015-02-01
 */
class PutLifecycleConfigurationRequest {
    /**
     * Constructs a new <code>PutLifecycleConfigurationRequest</code>.
     * @alias module:model/PutLifecycleConfigurationRequest
     * @param lifecyclePolicies {Array.<module:model/LifecyclePolicy>} <p>An array of <code>LifecyclePolicy</code> objects that define the file system's <code>LifecycleConfiguration</code> object. A <code>LifecycleConfiguration</code> object informs EFS lifecycle management and EFS Intelligent-Tiering of the following:</p> <ul> <li> <p>When to move files in the file system from primary storage to the IA storage class.</p> </li> <li> <p>When to move files that are in IA storage to primary storage.</p> </li> </ul> <note> <p>When using the <code>put-lifecycle-configuration</code> CLI command or the <code>PutLifecycleConfiguration</code> API action, Amazon EFS requires that each <code>LifecyclePolicy</code> object have only a single transition. This means that in a request body, <code>LifecyclePolicies</code> must be structured as an array of <code>LifecyclePolicy</code> objects, one object for each transition, <code>TransitionToIA</code>, <code>TransitionToPrimaryStorageClass</code>. See the example requests in the following section for more information.</p> </note>
     */
    constructor(lifecyclePolicies) { 
        
        PutLifecycleConfigurationRequest.initialize(this, lifecyclePolicies);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, lifecyclePolicies) { 
        obj['LifecyclePolicies'] = lifecyclePolicies;
    }

    /**
     * Constructs a <code>PutLifecycleConfigurationRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutLifecycleConfigurationRequest} obj Optional instance to populate.
     * @return {module:model/PutLifecycleConfigurationRequest} The populated <code>PutLifecycleConfigurationRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutLifecycleConfigurationRequest();

            if (data.hasOwnProperty('LifecyclePolicies')) {
                obj['LifecyclePolicies'] = ApiClient.convertToType(data['LifecyclePolicies'], [LifecyclePolicy]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutLifecycleConfigurationRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutLifecycleConfigurationRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PutLifecycleConfigurationRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['LifecyclePolicies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['LifecyclePolicies'])) {
                throw new Error("Expected the field `LifecyclePolicies` to be an array in the JSON data but got " + data['LifecyclePolicies']);
            }
            // validate the optional field `LifecyclePolicies` (array)
            for (const item of data['LifecyclePolicies']) {
                LifecyclePolicy.validateJSON(item);
            };
        }

        return true;
    }


}

PutLifecycleConfigurationRequest.RequiredProperties = ["LifecyclePolicies"];

/**
 * <p>An array of <code>LifecyclePolicy</code> objects that define the file system's <code>LifecycleConfiguration</code> object. A <code>LifecycleConfiguration</code> object informs EFS lifecycle management and EFS Intelligent-Tiering of the following:</p> <ul> <li> <p>When to move files in the file system from primary storage to the IA storage class.</p> </li> <li> <p>When to move files that are in IA storage to primary storage.</p> </li> </ul> <note> <p>When using the <code>put-lifecycle-configuration</code> CLI command or the <code>PutLifecycleConfiguration</code> API action, Amazon EFS requires that each <code>LifecyclePolicy</code> object have only a single transition. This means that in a request body, <code>LifecyclePolicies</code> must be structured as an array of <code>LifecyclePolicy</code> objects, one object for each transition, <code>TransitionToIA</code>, <code>TransitionToPrimaryStorageClass</code>. See the example requests in the following section for more information.</p> </note>
 * @member {Array.<module:model/LifecyclePolicy>} LifecyclePolicies
 */
PutLifecycleConfigurationRequest.prototype['LifecyclePolicies'] = undefined;






export default PutLifecycleConfigurationRequest;

