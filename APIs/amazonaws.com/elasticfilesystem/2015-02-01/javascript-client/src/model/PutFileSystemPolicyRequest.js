/**
 * Amazon Elastic File System
 * <fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 Linux and Mac instances in the Amazon Web Services Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so that your applications have the storage they need, when they need it. For more information, see the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/api-reference.html\">Amazon Elastic File System API Reference</a> and the <a href=\"https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html\">Amazon Elastic File System User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PutFileSystemPolicyRequest model module.
 * @module model/PutFileSystemPolicyRequest
 * @version 2015-02-01
 */
class PutFileSystemPolicyRequest {
    /**
     * Constructs a new <code>PutFileSystemPolicyRequest</code>.
     * @alias module:model/PutFileSystemPolicyRequest
     * @param policy {String} The <code>FileSystemPolicy</code> that you're creating. Accepts a JSON formatted policy definition. EFS file system policies have a 20,000 character limit. To find out more about the elements that make up a file system policy, see <a href=\"https://docs.aws.amazon.com/efs/latest/ug/access-control-overview.html#access-control-manage-access-intro-resource-policies\">EFS Resource-based Policies</a>. 
     */
    constructor(policy) { 
        
        PutFileSystemPolicyRequest.initialize(this, policy);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, policy) { 
        obj['Policy'] = policy;
    }

    /**
     * Constructs a <code>PutFileSystemPolicyRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutFileSystemPolicyRequest} obj Optional instance to populate.
     * @return {module:model/PutFileSystemPolicyRequest} The populated <code>PutFileSystemPolicyRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutFileSystemPolicyRequest();

            if (data.hasOwnProperty('Policy')) {
                obj['Policy'] = ApiClient.convertToType(data['Policy'], 'String');
            }
            if (data.hasOwnProperty('BypassPolicyLockoutSafetyCheck')) {
                obj['BypassPolicyLockoutSafetyCheck'] = ApiClient.convertToType(data['BypassPolicyLockoutSafetyCheck'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutFileSystemPolicyRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutFileSystemPolicyRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PutFileSystemPolicyRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Policy'] && !(typeof data['Policy'] === 'string' || data['Policy'] instanceof String)) {
            throw new Error("Expected the field `Policy` to be a primitive type in the JSON string but got " + data['Policy']);
        }

        return true;
    }


}

PutFileSystemPolicyRequest.RequiredProperties = ["Policy"];

/**
 * The <code>FileSystemPolicy</code> that you're creating. Accepts a JSON formatted policy definition. EFS file system policies have a 20,000 character limit. To find out more about the elements that make up a file system policy, see <a href=\"https://docs.aws.amazon.com/efs/latest/ug/access-control-overview.html#access-control-manage-access-intro-resource-policies\">EFS Resource-based Policies</a>. 
 * @member {String} Policy
 */
PutFileSystemPolicyRequest.prototype['Policy'] = undefined;

/**
 * (Optional) A boolean that specifies whether or not to bypass the <code>FileSystemPolicy</code> lockout safety check. The lockout safety check determines whether the policy in the request will lock out, or prevent, the IAM principal that is making the request from making future <code>PutFileSystemPolicy</code> requests on this file system. Set <code>BypassPolicyLockoutSafetyCheck</code> to <code>True</code> only when you intend to prevent the IAM principal that is making the request from making subsequent <code>PutFileSystemPolicy</code> requests on this file system. The default value is <code>False</code>. 
 * @member {Boolean} BypassPolicyLockoutSafetyCheck
 */
PutFileSystemPolicyRequest.prototype['BypassPolicyLockoutSafetyCheck'] = undefined;






export default PutFileSystemPolicyRequest;

