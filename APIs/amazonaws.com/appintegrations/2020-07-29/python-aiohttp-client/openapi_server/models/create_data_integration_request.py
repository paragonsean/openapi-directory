# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_data_integration_request_file_configuration import CreateDataIntegrationRequestFileConfiguration
from openapi_server.models.create_data_integration_request_schedule_config import CreateDataIntegrationRequestScheduleConfig
import re
from openapi_server import util


class CreateDataIntegrationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, kms_key: str=None, source_uri: str=None, schedule_config: CreateDataIntegrationRequestScheduleConfig=None, tags: Dict[str, str]=None, client_token: str=None, file_configuration: CreateDataIntegrationRequestFileConfiguration=None, object_configuration: Dict[str, Dict[str, List[str]]]=None):
        """CreateDataIntegrationRequest - a model defined in OpenAPI

        :param name: The name of this CreateDataIntegrationRequest.
        :param description: The description of this CreateDataIntegrationRequest.
        :param kms_key: The kms_key of this CreateDataIntegrationRequest.
        :param source_uri: The source_uri of this CreateDataIntegrationRequest.
        :param schedule_config: The schedule_config of this CreateDataIntegrationRequest.
        :param tags: The tags of this CreateDataIntegrationRequest.
        :param client_token: The client_token of this CreateDataIntegrationRequest.
        :param file_configuration: The file_configuration of this CreateDataIntegrationRequest.
        :param object_configuration: The object_configuration of this CreateDataIntegrationRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'kms_key': str,
            'source_uri': str,
            'schedule_config': CreateDataIntegrationRequestScheduleConfig,
            'tags': Dict[str, str],
            'client_token': str,
            'file_configuration': CreateDataIntegrationRequestFileConfiguration,
            'object_configuration': Dict[str, Dict[str, List[str]]]
        }

        self.attribute_map = {
            'name': 'Name',
            'description': 'Description',
            'kms_key': 'KmsKey',
            'source_uri': 'SourceURI',
            'schedule_config': 'ScheduleConfig',
            'tags': 'Tags',
            'client_token': 'ClientToken',
            'file_configuration': 'FileConfiguration',
            'object_configuration': 'ObjectConfiguration'
        }

        self._name = name
        self._description = description
        self._kms_key = kms_key
        self._source_uri = source_uri
        self._schedule_config = schedule_config
        self._tags = tags
        self._client_token = client_token
        self._file_configuration = file_configuration
        self._object_configuration = object_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDataIntegrationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDataIntegration_request of this CreateDataIntegrationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateDataIntegrationRequest.

        The name of the DataIntegration.

        :return: The name of this CreateDataIntegrationRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateDataIntegrationRequest.

        The name of the DataIntegration.

        :param name: The name of this CreateDataIntegrationRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'^[a-zA-Z0-9\/\._\-]+$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z0-9\/\._\-]+$/`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateDataIntegrationRequest.

        A description of the DataIntegration.

        :return: The description of this CreateDataIntegrationRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateDataIntegrationRequest.

        A description of the DataIntegration.

        :param description: The description of this CreateDataIntegrationRequest.
        :type description: str
        """
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")
        if description is not None and not re.search(r'.*', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/.*/`")

        self._description = description

    @property
    def kms_key(self):
        """Gets the kms_key of this CreateDataIntegrationRequest.

        The KMS key for the DataIntegration.

        :return: The kms_key of this CreateDataIntegrationRequest.
        :rtype: str
        """
        return self._kms_key

    @kms_key.setter
    def kms_key(self, kms_key):
        """Sets the kms_key of this CreateDataIntegrationRequest.

        The KMS key for the DataIntegration.

        :param kms_key: The kms_key of this CreateDataIntegrationRequest.
        :type kms_key: str
        """
        if kms_key is None:
            raise ValueError("Invalid value for `kms_key`, must not be `None`")
        if kms_key is not None and len(kms_key) > 255:
            raise ValueError("Invalid value for `kms_key`, length must be less than or equal to `255`")
        if kms_key is not None and len(kms_key) < 1:
            raise ValueError("Invalid value for `kms_key`, length must be greater than or equal to `1`")
        if kms_key is not None and not re.search(r'.*\S.*', kms_key):
            raise ValueError("Invalid value for `kms_key`, must be a follow pattern or equal to `/.*\S.*/`")

        self._kms_key = kms_key

    @property
    def source_uri(self):
        """Gets the source_uri of this CreateDataIntegrationRequest.

        The URI of the data source.

        :return: The source_uri of this CreateDataIntegrationRequest.
        :rtype: str
        """
        return self._source_uri

    @source_uri.setter
    def source_uri(self, source_uri):
        """Sets the source_uri of this CreateDataIntegrationRequest.

        The URI of the data source.

        :param source_uri: The source_uri of this CreateDataIntegrationRequest.
        :type source_uri: str
        """
        if source_uri is None:
            raise ValueError("Invalid value for `source_uri`, must not be `None`")
        if source_uri is not None and len(source_uri) > 1000:
            raise ValueError("Invalid value for `source_uri`, length must be less than or equal to `1000`")
        if source_uri is not None and len(source_uri) < 1:
            raise ValueError("Invalid value for `source_uri`, length must be greater than or equal to `1`")
        if source_uri is not None and not re.search(r'^(\w+\:\/\/[\w.-]+[\w\/!@#+=.-]+$)|(\w+\:\/\/[\w.-]+[\w\/!@#+=.-]+[\w\/!@#+=.-]+[\w\/!@#+=.,-]+$)', source_uri):
            raise ValueError("Invalid value for `source_uri`, must be a follow pattern or equal to `/^(\w+\:\/\/[\w.-]+[\w\/!@#+=.-]+$)|(\w+\:\/\/[\w.-]+[\w\/!@#+=.-]+[\w\/!@#+=.-]+[\w\/!@#+=.,-]+$)/`")

        self._source_uri = source_uri

    @property
    def schedule_config(self):
        """Gets the schedule_config of this CreateDataIntegrationRequest.


        :return: The schedule_config of this CreateDataIntegrationRequest.
        :rtype: CreateDataIntegrationRequestScheduleConfig
        """
        return self._schedule_config

    @schedule_config.setter
    def schedule_config(self, schedule_config):
        """Sets the schedule_config of this CreateDataIntegrationRequest.


        :param schedule_config: The schedule_config of this CreateDataIntegrationRequest.
        :type schedule_config: CreateDataIntegrationRequestScheduleConfig
        """
        if schedule_config is None:
            raise ValueError("Invalid value for `schedule_config`, must not be `None`")

        self._schedule_config = schedule_config

    @property
    def tags(self):
        """Gets the tags of this CreateDataIntegrationRequest.

        The tags used to organize, track, or control access for this resource. For example, { \"tags\": {\"key1\":\"value1\", \"key2\":\"value2\"} }.

        :return: The tags of this CreateDataIntegrationRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateDataIntegrationRequest.

        The tags used to organize, track, or control access for this resource. For example, { \"tags\": {\"key1\":\"value1\", \"key2\":\"value2\"} }.

        :param tags: The tags of this CreateDataIntegrationRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags

    @property
    def client_token(self):
        """Gets the client_token of this CreateDataIntegrationRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href=\"https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\">Making retries safe with idempotent APIs</a>.

        :return: The client_token of this CreateDataIntegrationRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateDataIntegrationRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href=\"https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\">Making retries safe with idempotent APIs</a>.

        :param client_token: The client_token of this CreateDataIntegrationRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 2048:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `2048`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'.*', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/.*/`")

        self._client_token = client_token

    @property
    def file_configuration(self):
        """Gets the file_configuration of this CreateDataIntegrationRequest.


        :return: The file_configuration of this CreateDataIntegrationRequest.
        :rtype: CreateDataIntegrationRequestFileConfiguration
        """
        return self._file_configuration

    @file_configuration.setter
    def file_configuration(self, file_configuration):
        """Sets the file_configuration of this CreateDataIntegrationRequest.


        :param file_configuration: The file_configuration of this CreateDataIntegrationRequest.
        :type file_configuration: CreateDataIntegrationRequestFileConfiguration
        """

        self._file_configuration = file_configuration

    @property
    def object_configuration(self):
        """Gets the object_configuration of this CreateDataIntegrationRequest.

        The configuration for what data should be pulled from the source.

        :return: The object_configuration of this CreateDataIntegrationRequest.
        :rtype: Dict[str, Dict[str, List[str]]]
        """
        return self._object_configuration

    @object_configuration.setter
    def object_configuration(self, object_configuration):
        """Sets the object_configuration of this CreateDataIntegrationRequest.

        The configuration for what data should be pulled from the source.

        :param object_configuration: The object_configuration of this CreateDataIntegrationRequest.
        :type object_configuration: Dict[str, Dict[str, List[str]]]
        """

        self._object_configuration = object_configuration
