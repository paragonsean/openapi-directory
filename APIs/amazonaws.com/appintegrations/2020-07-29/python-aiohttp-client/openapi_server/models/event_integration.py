# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_integration_event_filter import EventIntegrationEventFilter
from openapi_server import util


class EventIntegration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_integration_arn: str=None, name: str=None, description: str=None, event_filter: EventIntegrationEventFilter=None, event_bridge_bus: str=None, tags: Dict=None):
        """EventIntegration - a model defined in OpenAPI

        :param event_integration_arn: The event_integration_arn of this EventIntegration.
        :param name: The name of this EventIntegration.
        :param description: The description of this EventIntegration.
        :param event_filter: The event_filter of this EventIntegration.
        :param event_bridge_bus: The event_bridge_bus of this EventIntegration.
        :param tags: The tags of this EventIntegration.
        """
        self.openapi_types = {
            'event_integration_arn': str,
            'name': str,
            'description': str,
            'event_filter': EventIntegrationEventFilter,
            'event_bridge_bus': str,
            'tags': Dict
        }

        self.attribute_map = {
            'event_integration_arn': 'EventIntegrationArn',
            'name': 'Name',
            'description': 'Description',
            'event_filter': 'EventFilter',
            'event_bridge_bus': 'EventBridgeBus',
            'tags': 'Tags'
        }

        self._event_integration_arn = event_integration_arn
        self._name = name
        self._description = description
        self._event_filter = event_filter
        self._event_bridge_bus = event_bridge_bus
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventIntegration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventIntegration of this EventIntegration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_integration_arn(self):
        """Gets the event_integration_arn of this EventIntegration.


        :return: The event_integration_arn of this EventIntegration.
        :rtype: str
        """
        return self._event_integration_arn

    @event_integration_arn.setter
    def event_integration_arn(self, event_integration_arn):
        """Sets the event_integration_arn of this EventIntegration.


        :param event_integration_arn: The event_integration_arn of this EventIntegration.
        :type event_integration_arn: str
        """

        self._event_integration_arn = event_integration_arn

    @property
    def name(self):
        """Gets the name of this EventIntegration.


        :return: The name of this EventIntegration.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EventIntegration.


        :param name: The name of this EventIntegration.
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this EventIntegration.


        :return: The description of this EventIntegration.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EventIntegration.


        :param description: The description of this EventIntegration.
        :type description: str
        """

        self._description = description

    @property
    def event_filter(self):
        """Gets the event_filter of this EventIntegration.


        :return: The event_filter of this EventIntegration.
        :rtype: EventIntegrationEventFilter
        """
        return self._event_filter

    @event_filter.setter
    def event_filter(self, event_filter):
        """Sets the event_filter of this EventIntegration.


        :param event_filter: The event_filter of this EventIntegration.
        :type event_filter: EventIntegrationEventFilter
        """

        self._event_filter = event_filter

    @property
    def event_bridge_bus(self):
        """Gets the event_bridge_bus of this EventIntegration.


        :return: The event_bridge_bus of this EventIntegration.
        :rtype: str
        """
        return self._event_bridge_bus

    @event_bridge_bus.setter
    def event_bridge_bus(self, event_bridge_bus):
        """Sets the event_bridge_bus of this EventIntegration.


        :param event_bridge_bus: The event_bridge_bus of this EventIntegration.
        :type event_bridge_bus: str
        """

        self._event_bridge_bus = event_bridge_bus

    @property
    def tags(self):
        """Gets the tags of this EventIntegration.


        :return: The tags of this EventIntegration.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this EventIntegration.


        :param tags: The tags of this EventIntegration.
        :type tags: Dict
        """

        self._tags = tags
