# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventIntegrationAssociation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_integration_association_arn: str=None, event_integration_association_id: str=None, event_integration_name: str=None, client_id: str=None, event_bridge_rule_name: str=None, client_association_metadata: Dict=None):
        """EventIntegrationAssociation - a model defined in OpenAPI

        :param event_integration_association_arn: The event_integration_association_arn of this EventIntegrationAssociation.
        :param event_integration_association_id: The event_integration_association_id of this EventIntegrationAssociation.
        :param event_integration_name: The event_integration_name of this EventIntegrationAssociation.
        :param client_id: The client_id of this EventIntegrationAssociation.
        :param event_bridge_rule_name: The event_bridge_rule_name of this EventIntegrationAssociation.
        :param client_association_metadata: The client_association_metadata of this EventIntegrationAssociation.
        """
        self.openapi_types = {
            'event_integration_association_arn': str,
            'event_integration_association_id': str,
            'event_integration_name': str,
            'client_id': str,
            'event_bridge_rule_name': str,
            'client_association_metadata': Dict
        }

        self.attribute_map = {
            'event_integration_association_arn': 'EventIntegrationAssociationArn',
            'event_integration_association_id': 'EventIntegrationAssociationId',
            'event_integration_name': 'EventIntegrationName',
            'client_id': 'ClientId',
            'event_bridge_rule_name': 'EventBridgeRuleName',
            'client_association_metadata': 'ClientAssociationMetadata'
        }

        self._event_integration_association_arn = event_integration_association_arn
        self._event_integration_association_id = event_integration_association_id
        self._event_integration_name = event_integration_name
        self._client_id = client_id
        self._event_bridge_rule_name = event_bridge_rule_name
        self._client_association_metadata = client_association_metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventIntegrationAssociation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventIntegrationAssociation of this EventIntegrationAssociation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_integration_association_arn(self):
        """Gets the event_integration_association_arn of this EventIntegrationAssociation.


        :return: The event_integration_association_arn of this EventIntegrationAssociation.
        :rtype: str
        """
        return self._event_integration_association_arn

    @event_integration_association_arn.setter
    def event_integration_association_arn(self, event_integration_association_arn):
        """Sets the event_integration_association_arn of this EventIntegrationAssociation.


        :param event_integration_association_arn: The event_integration_association_arn of this EventIntegrationAssociation.
        :type event_integration_association_arn: str
        """

        self._event_integration_association_arn = event_integration_association_arn

    @property
    def event_integration_association_id(self):
        """Gets the event_integration_association_id of this EventIntegrationAssociation.


        :return: The event_integration_association_id of this EventIntegrationAssociation.
        :rtype: str
        """
        return self._event_integration_association_id

    @event_integration_association_id.setter
    def event_integration_association_id(self, event_integration_association_id):
        """Sets the event_integration_association_id of this EventIntegrationAssociation.


        :param event_integration_association_id: The event_integration_association_id of this EventIntegrationAssociation.
        :type event_integration_association_id: str
        """

        self._event_integration_association_id = event_integration_association_id

    @property
    def event_integration_name(self):
        """Gets the event_integration_name of this EventIntegrationAssociation.


        :return: The event_integration_name of this EventIntegrationAssociation.
        :rtype: str
        """
        return self._event_integration_name

    @event_integration_name.setter
    def event_integration_name(self, event_integration_name):
        """Sets the event_integration_name of this EventIntegrationAssociation.


        :param event_integration_name: The event_integration_name of this EventIntegrationAssociation.
        :type event_integration_name: str
        """

        self._event_integration_name = event_integration_name

    @property
    def client_id(self):
        """Gets the client_id of this EventIntegrationAssociation.


        :return: The client_id of this EventIntegrationAssociation.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this EventIntegrationAssociation.


        :param client_id: The client_id of this EventIntegrationAssociation.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def event_bridge_rule_name(self):
        """Gets the event_bridge_rule_name of this EventIntegrationAssociation.


        :return: The event_bridge_rule_name of this EventIntegrationAssociation.
        :rtype: str
        """
        return self._event_bridge_rule_name

    @event_bridge_rule_name.setter
    def event_bridge_rule_name(self, event_bridge_rule_name):
        """Sets the event_bridge_rule_name of this EventIntegrationAssociation.


        :param event_bridge_rule_name: The event_bridge_rule_name of this EventIntegrationAssociation.
        :type event_bridge_rule_name: str
        """

        self._event_bridge_rule_name = event_bridge_rule_name

    @property
    def client_association_metadata(self):
        """Gets the client_association_metadata of this EventIntegrationAssociation.


        :return: The client_association_metadata of this EventIntegrationAssociation.
        :rtype: Dict
        """
        return self._client_association_metadata

    @client_association_metadata.setter
    def client_association_metadata(self, client_association_metadata):
        """Sets the client_association_metadata of this EventIntegrationAssociation.


        :param client_association_metadata: The client_association_metadata of this EventIntegrationAssociation.
        :type client_association_metadata: Dict
        """

        self._client_association_metadata = client_association_metadata
