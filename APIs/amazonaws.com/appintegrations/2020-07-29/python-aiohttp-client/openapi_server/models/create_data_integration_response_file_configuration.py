# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateDataIntegrationResponseFileConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, folders: List=None, filters: Dict=None):
        """CreateDataIntegrationResponseFileConfiguration - a model defined in OpenAPI

        :param folders: The folders of this CreateDataIntegrationResponseFileConfiguration.
        :param filters: The filters of this CreateDataIntegrationResponseFileConfiguration.
        """
        self.openapi_types = {
            'folders': List,
            'filters': Dict
        }

        self.attribute_map = {
            'folders': 'Folders',
            'filters': 'Filters'
        }

        self._folders = folders
        self._filters = filters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDataIntegrationResponseFileConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDataIntegrationResponse_FileConfiguration of this CreateDataIntegrationResponseFileConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def folders(self):
        """Gets the folders of this CreateDataIntegrationResponseFileConfiguration.


        :return: The folders of this CreateDataIntegrationResponseFileConfiguration.
        :rtype: List
        """
        return self._folders

    @folders.setter
    def folders(self, folders):
        """Sets the folders of this CreateDataIntegrationResponseFileConfiguration.


        :param folders: The folders of this CreateDataIntegrationResponseFileConfiguration.
        :type folders: List
        """
        if folders is None:
            raise ValueError("Invalid value for `folders`, must not be `None`")

        self._folders = folders

    @property
    def filters(self):
        """Gets the filters of this CreateDataIntegrationResponseFileConfiguration.


        :return: The filters of this CreateDataIntegrationResponseFileConfiguration.
        :rtype: Dict
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this CreateDataIntegrationResponseFileConfiguration.


        :param filters: The filters of this CreateDataIntegrationResponseFileConfiguration.
        :type filters: Dict
        """

        self._filters = filters
