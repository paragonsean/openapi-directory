/**
 * Amazon AppIntegrations Service
 * <p>The Amazon AppIntegrations service enables you to configure and reuse connections to external applications.</p> <p>For information about how you can use external applications with Amazon Connect, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/crm.html\">Set up pre-built integrations</a> and <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-wisdom.html\">Deliver information to agents using Amazon Connect Wisdom</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-07-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventIntegrationAssociation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventIntegrationAssociation::OAIEventIntegrationAssociation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventIntegrationAssociation::OAIEventIntegrationAssociation() {
    this->initializeModel();
}

OAIEventIntegrationAssociation::~OAIEventIntegrationAssociation() {}

void OAIEventIntegrationAssociation::initializeModel() {

    m_event_integration_association_arn_isSet = false;
    m_event_integration_association_arn_isValid = false;

    m_event_integration_association_id_isSet = false;
    m_event_integration_association_id_isValid = false;

    m_event_integration_name_isSet = false;
    m_event_integration_name_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_event_bridge_rule_name_isSet = false;
    m_event_bridge_rule_name_isValid = false;

    m_client_association_metadata_isSet = false;
    m_client_association_metadata_isValid = false;
}

void OAIEventIntegrationAssociation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventIntegrationAssociation::fromJsonObject(QJsonObject json) {

    m_event_integration_association_arn_isValid = ::OpenAPI::fromJsonValue(m_event_integration_association_arn, json[QString("EventIntegrationAssociationArn")]);
    m_event_integration_association_arn_isSet = !json[QString("EventIntegrationAssociationArn")].isNull() && m_event_integration_association_arn_isValid;

    m_event_integration_association_id_isValid = ::OpenAPI::fromJsonValue(m_event_integration_association_id, json[QString("EventIntegrationAssociationId")]);
    m_event_integration_association_id_isSet = !json[QString("EventIntegrationAssociationId")].isNull() && m_event_integration_association_id_isValid;

    m_event_integration_name_isValid = ::OpenAPI::fromJsonValue(m_event_integration_name, json[QString("EventIntegrationName")]);
    m_event_integration_name_isSet = !json[QString("EventIntegrationName")].isNull() && m_event_integration_name_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("ClientId")]);
    m_client_id_isSet = !json[QString("ClientId")].isNull() && m_client_id_isValid;

    m_event_bridge_rule_name_isValid = ::OpenAPI::fromJsonValue(m_event_bridge_rule_name, json[QString("EventBridgeRuleName")]);
    m_event_bridge_rule_name_isSet = !json[QString("EventBridgeRuleName")].isNull() && m_event_bridge_rule_name_isValid;

    m_client_association_metadata_isValid = ::OpenAPI::fromJsonValue(m_client_association_metadata, json[QString("ClientAssociationMetadata")]);
    m_client_association_metadata_isSet = !json[QString("ClientAssociationMetadata")].isNull() && m_client_association_metadata_isValid;
}

QString OAIEventIntegrationAssociation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventIntegrationAssociation::asJsonObject() const {
    QJsonObject obj;
    if (m_event_integration_association_arn_isSet) {
        obj.insert(QString("EventIntegrationAssociationArn"), ::OpenAPI::toJsonValue(m_event_integration_association_arn));
    }
    if (m_event_integration_association_id_isSet) {
        obj.insert(QString("EventIntegrationAssociationId"), ::OpenAPI::toJsonValue(m_event_integration_association_id));
    }
    if (m_event_integration_name_isSet) {
        obj.insert(QString("EventIntegrationName"), ::OpenAPI::toJsonValue(m_event_integration_name));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("ClientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_event_bridge_rule_name_isSet) {
        obj.insert(QString("EventBridgeRuleName"), ::OpenAPI::toJsonValue(m_event_bridge_rule_name));
    }
    if (m_client_association_metadata.isSet()) {
        obj.insert(QString("ClientAssociationMetadata"), ::OpenAPI::toJsonValue(m_client_association_metadata));
    }
    return obj;
}

QString OAIEventIntegrationAssociation::getEventIntegrationAssociationArn() const {
    return m_event_integration_association_arn;
}
void OAIEventIntegrationAssociation::setEventIntegrationAssociationArn(const QString &event_integration_association_arn) {
    m_event_integration_association_arn = event_integration_association_arn;
    m_event_integration_association_arn_isSet = true;
}

bool OAIEventIntegrationAssociation::is_event_integration_association_arn_Set() const{
    return m_event_integration_association_arn_isSet;
}

bool OAIEventIntegrationAssociation::is_event_integration_association_arn_Valid() const{
    return m_event_integration_association_arn_isValid;
}

QString OAIEventIntegrationAssociation::getEventIntegrationAssociationId() const {
    return m_event_integration_association_id;
}
void OAIEventIntegrationAssociation::setEventIntegrationAssociationId(const QString &event_integration_association_id) {
    m_event_integration_association_id = event_integration_association_id;
    m_event_integration_association_id_isSet = true;
}

bool OAIEventIntegrationAssociation::is_event_integration_association_id_Set() const{
    return m_event_integration_association_id_isSet;
}

bool OAIEventIntegrationAssociation::is_event_integration_association_id_Valid() const{
    return m_event_integration_association_id_isValid;
}

QString OAIEventIntegrationAssociation::getEventIntegrationName() const {
    return m_event_integration_name;
}
void OAIEventIntegrationAssociation::setEventIntegrationName(const QString &event_integration_name) {
    m_event_integration_name = event_integration_name;
    m_event_integration_name_isSet = true;
}

bool OAIEventIntegrationAssociation::is_event_integration_name_Set() const{
    return m_event_integration_name_isSet;
}

bool OAIEventIntegrationAssociation::is_event_integration_name_Valid() const{
    return m_event_integration_name_isValid;
}

QString OAIEventIntegrationAssociation::getClientId() const {
    return m_client_id;
}
void OAIEventIntegrationAssociation::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIEventIntegrationAssociation::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIEventIntegrationAssociation::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIEventIntegrationAssociation::getEventBridgeRuleName() const {
    return m_event_bridge_rule_name;
}
void OAIEventIntegrationAssociation::setEventBridgeRuleName(const QString &event_bridge_rule_name) {
    m_event_bridge_rule_name = event_bridge_rule_name;
    m_event_bridge_rule_name_isSet = true;
}

bool OAIEventIntegrationAssociation::is_event_bridge_rule_name_Set() const{
    return m_event_bridge_rule_name_isSet;
}

bool OAIEventIntegrationAssociation::is_event_bridge_rule_name_Valid() const{
    return m_event_bridge_rule_name_isValid;
}

QMap OAIEventIntegrationAssociation::getClientAssociationMetadata() const {
    return m_client_association_metadata;
}
void OAIEventIntegrationAssociation::setClientAssociationMetadata(const QMap &client_association_metadata) {
    m_client_association_metadata = client_association_metadata;
    m_client_association_metadata_isSet = true;
}

bool OAIEventIntegrationAssociation::is_client_association_metadata_Set() const{
    return m_client_association_metadata_isSet;
}

bool OAIEventIntegrationAssociation::is_client_association_metadata_Valid() const{
    return m_client_association_metadata_isValid;
}

bool OAIEventIntegrationAssociation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_integration_association_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_integration_association_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_integration_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_bridge_rule_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_association_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventIntegrationAssociation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
