/**
 * Amazon AppIntegrations Service
 * <p>The Amazon AppIntegrations service enables you to configure and reuse connections to external applications.</p> <p>For information about how you can use external applications with Amazon Connect, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/crm.html\">Set up pre-built integrations</a> and <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-wisdom.html\">Deliver information to agents using Amazon Connect Wisdom</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-07-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDataIntegration_request_FileConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDataIntegration_request_FileConfiguration::OAICreateDataIntegration_request_FileConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDataIntegration_request_FileConfiguration::OAICreateDataIntegration_request_FileConfiguration() {
    this->initializeModel();
}

OAICreateDataIntegration_request_FileConfiguration::~OAICreateDataIntegration_request_FileConfiguration() {}

void OAICreateDataIntegration_request_FileConfiguration::initializeModel() {

    m_folders_isSet = false;
    m_folders_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;
}

void OAICreateDataIntegration_request_FileConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDataIntegration_request_FileConfiguration::fromJsonObject(QJsonObject json) {

    m_folders_isValid = ::OpenAPI::fromJsonValue(m_folders, json[QString("Folders")]);
    m_folders_isSet = !json[QString("Folders")].isNull() && m_folders_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("Filters")]);
    m_filters_isSet = !json[QString("Filters")].isNull() && m_filters_isValid;
}

QString OAICreateDataIntegration_request_FileConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDataIntegration_request_FileConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_folders.isSet()) {
        obj.insert(QString("Folders"), ::OpenAPI::toJsonValue(m_folders));
    }
    if (m_filters.isSet()) {
        obj.insert(QString("Filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    return obj;
}

QList OAICreateDataIntegration_request_FileConfiguration::getFolders() const {
    return m_folders;
}
void OAICreateDataIntegration_request_FileConfiguration::setFolders(const QList &folders) {
    m_folders = folders;
    m_folders_isSet = true;
}

bool OAICreateDataIntegration_request_FileConfiguration::is_folders_Set() const{
    return m_folders_isSet;
}

bool OAICreateDataIntegration_request_FileConfiguration::is_folders_Valid() const{
    return m_folders_isValid;
}

QMap OAICreateDataIntegration_request_FileConfiguration::getFilters() const {
    return m_filters;
}
void OAICreateDataIntegration_request_FileConfiguration::setFilters(const QMap &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAICreateDataIntegration_request_FileConfiguration::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAICreateDataIntegration_request_FileConfiguration::is_filters_Valid() const{
    return m_filters_isValid;
}

bool OAICreateDataIntegration_request_FileConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_folders.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDataIntegration_request_FileConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
