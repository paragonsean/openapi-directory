/**
 * Amazon AppIntegrations Service
 * <p>The Amazon AppIntegrations service enables you to configure and reuse connections to external applications.</p> <p>For information about how you can use external applications with Amazon Connect, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/crm.html\">Set up pre-built integrations</a> and <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-wisdom.html\">Deliver information to agents using Amazon Connect Wisdom</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-07-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduleConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduleConfiguration::OAIScheduleConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduleConfiguration::OAIScheduleConfiguration() {
    this->initializeModel();
}

OAIScheduleConfiguration::~OAIScheduleConfiguration() {}

void OAIScheduleConfiguration::initializeModel() {

    m_first_execution_from_isSet = false;
    m_first_execution_from_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_schedule_expression_isSet = false;
    m_schedule_expression_isValid = false;
}

void OAIScheduleConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduleConfiguration::fromJsonObject(QJsonObject json) {

    m_first_execution_from_isValid = ::OpenAPI::fromJsonValue(m_first_execution_from, json[QString("FirstExecutionFrom")]);
    m_first_execution_from_isSet = !json[QString("FirstExecutionFrom")].isNull() && m_first_execution_from_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("Object")]);
    m_object_isSet = !json[QString("Object")].isNull() && m_object_isValid;

    m_schedule_expression_isValid = ::OpenAPI::fromJsonValue(m_schedule_expression, json[QString("ScheduleExpression")]);
    m_schedule_expression_isSet = !json[QString("ScheduleExpression")].isNull() && m_schedule_expression_isValid;
}

QString OAIScheduleConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduleConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_first_execution_from_isSet) {
        obj.insert(QString("FirstExecutionFrom"), ::OpenAPI::toJsonValue(m_first_execution_from));
    }
    if (m_object_isSet) {
        obj.insert(QString("Object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_schedule_expression_isSet) {
        obj.insert(QString("ScheduleExpression"), ::OpenAPI::toJsonValue(m_schedule_expression));
    }
    return obj;
}

QString OAIScheduleConfiguration::getFirstExecutionFrom() const {
    return m_first_execution_from;
}
void OAIScheduleConfiguration::setFirstExecutionFrom(const QString &first_execution_from) {
    m_first_execution_from = first_execution_from;
    m_first_execution_from_isSet = true;
}

bool OAIScheduleConfiguration::is_first_execution_from_Set() const{
    return m_first_execution_from_isSet;
}

bool OAIScheduleConfiguration::is_first_execution_from_Valid() const{
    return m_first_execution_from_isValid;
}

QString OAIScheduleConfiguration::getObject() const {
    return m_object;
}
void OAIScheduleConfiguration::setObject(const QString &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIScheduleConfiguration::is_object_Set() const{
    return m_object_isSet;
}

bool OAIScheduleConfiguration::is_object_Valid() const{
    return m_object_isValid;
}

QString OAIScheduleConfiguration::getScheduleExpression() const {
    return m_schedule_expression;
}
void OAIScheduleConfiguration::setScheduleExpression(const QString &schedule_expression) {
    m_schedule_expression = schedule_expression;
    m_schedule_expression_isSet = true;
}

bool OAIScheduleConfiguration::is_schedule_expression_Set() const{
    return m_schedule_expression_isSet;
}

bool OAIScheduleConfiguration::is_schedule_expression_Valid() const{
    return m_schedule_expression_isValid;
}

bool OAIScheduleConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_first_execution_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_expression_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduleConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_schedule_expression_isValid && true;
}

} // namespace OpenAPI
