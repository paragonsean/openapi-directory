/**
 * Amazon AppIntegrations Service
 * <p>The Amazon AppIntegrations service enables you to configure and reuse connections to external applications.</p> <p>For information about how you can use external applications with Amazon Connect, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/crm.html\">Set up pre-built integrations</a> and <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-wisdom.html\">Deliver information to agents using Amazon Connect Wisdom</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-07-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataIntegrationAssociationSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataIntegrationAssociationSummary::OAIDataIntegrationAssociationSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataIntegrationAssociationSummary::OAIDataIntegrationAssociationSummary() {
    this->initializeModel();
}

OAIDataIntegrationAssociationSummary::~OAIDataIntegrationAssociationSummary() {}

void OAIDataIntegrationAssociationSummary::initializeModel() {

    m_data_integration_association_arn_isSet = false;
    m_data_integration_association_arn_isValid = false;

    m_data_integration_arn_isSet = false;
    m_data_integration_arn_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;
}

void OAIDataIntegrationAssociationSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataIntegrationAssociationSummary::fromJsonObject(QJsonObject json) {

    m_data_integration_association_arn_isValid = ::OpenAPI::fromJsonValue(m_data_integration_association_arn, json[QString("DataIntegrationAssociationArn")]);
    m_data_integration_association_arn_isSet = !json[QString("DataIntegrationAssociationArn")].isNull() && m_data_integration_association_arn_isValid;

    m_data_integration_arn_isValid = ::OpenAPI::fromJsonValue(m_data_integration_arn, json[QString("DataIntegrationArn")]);
    m_data_integration_arn_isSet = !json[QString("DataIntegrationArn")].isNull() && m_data_integration_arn_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("ClientId")]);
    m_client_id_isSet = !json[QString("ClientId")].isNull() && m_client_id_isValid;
}

QString OAIDataIntegrationAssociationSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataIntegrationAssociationSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_data_integration_association_arn_isSet) {
        obj.insert(QString("DataIntegrationAssociationArn"), ::OpenAPI::toJsonValue(m_data_integration_association_arn));
    }
    if (m_data_integration_arn_isSet) {
        obj.insert(QString("DataIntegrationArn"), ::OpenAPI::toJsonValue(m_data_integration_arn));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("ClientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    return obj;
}

QString OAIDataIntegrationAssociationSummary::getDataIntegrationAssociationArn() const {
    return m_data_integration_association_arn;
}
void OAIDataIntegrationAssociationSummary::setDataIntegrationAssociationArn(const QString &data_integration_association_arn) {
    m_data_integration_association_arn = data_integration_association_arn;
    m_data_integration_association_arn_isSet = true;
}

bool OAIDataIntegrationAssociationSummary::is_data_integration_association_arn_Set() const{
    return m_data_integration_association_arn_isSet;
}

bool OAIDataIntegrationAssociationSummary::is_data_integration_association_arn_Valid() const{
    return m_data_integration_association_arn_isValid;
}

QString OAIDataIntegrationAssociationSummary::getDataIntegrationArn() const {
    return m_data_integration_arn;
}
void OAIDataIntegrationAssociationSummary::setDataIntegrationArn(const QString &data_integration_arn) {
    m_data_integration_arn = data_integration_arn;
    m_data_integration_arn_isSet = true;
}

bool OAIDataIntegrationAssociationSummary::is_data_integration_arn_Set() const{
    return m_data_integration_arn_isSet;
}

bool OAIDataIntegrationAssociationSummary::is_data_integration_arn_Valid() const{
    return m_data_integration_arn_isValid;
}

QString OAIDataIntegrationAssociationSummary::getClientId() const {
    return m_client_id;
}
void OAIDataIntegrationAssociationSummary::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIDataIntegrationAssociationSummary::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIDataIntegrationAssociationSummary::is_client_id_Valid() const{
    return m_client_id_isValid;
}

bool OAIDataIntegrationAssociationSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_integration_association_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_integration_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataIntegrationAssociationSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
