/**
 * Amazon AppIntegrations Service
 * <p>The Amazon AppIntegrations service enables you to configure and reuse connections to external applications.</p> <p>For information about how you can use external applications with Amazon Connect, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/crm.html\">Set up pre-built integrations</a> and <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-wisdom.html\">Deliver information to agents using Amazon Connect Wisdom</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-07-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataIntegrationSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataIntegrationSummary::OAIDataIntegrationSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataIntegrationSummary::OAIDataIntegrationSummary() {
    this->initializeModel();
}

OAIDataIntegrationSummary::~OAIDataIntegrationSummary() {}

void OAIDataIntegrationSummary::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_source_uri_isSet = false;
    m_source_uri_isValid = false;
}

void OAIDataIntegrationSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataIntegrationSummary::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_source_uri_isValid = ::OpenAPI::fromJsonValue(m_source_uri, json[QString("SourceURI")]);
    m_source_uri_isSet = !json[QString("SourceURI")].isNull() && m_source_uri_isValid;
}

QString OAIDataIntegrationSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataIntegrationSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_source_uri_isSet) {
        obj.insert(QString("SourceURI"), ::OpenAPI::toJsonValue(m_source_uri));
    }
    return obj;
}

QString OAIDataIntegrationSummary::getArn() const {
    return m_arn;
}
void OAIDataIntegrationSummary::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDataIntegrationSummary::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDataIntegrationSummary::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDataIntegrationSummary::getName() const {
    return m_name;
}
void OAIDataIntegrationSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDataIntegrationSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDataIntegrationSummary::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDataIntegrationSummary::getSourceUri() const {
    return m_source_uri;
}
void OAIDataIntegrationSummary::setSourceUri(const QString &source_uri) {
    m_source_uri = source_uri;
    m_source_uri_isSet = true;
}

bool OAIDataIntegrationSummary::is_source_uri_Set() const{
    return m_source_uri_isSet;
}

bool OAIDataIntegrationSummary::is_source_uri_Valid() const{
    return m_source_uri_isValid;
}

bool OAIDataIntegrationSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataIntegrationSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
