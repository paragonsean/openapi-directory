/**
 * Amazon AppIntegrations Service
 * <p>The Amazon AppIntegrations service enables you to configure and reuse connections to external applications.</p> <p>For information about how you can use external applications with Amazon Connect, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/crm.html\">Set up pre-built integrations</a> and <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-wisdom.html\">Deliver information to agents using Amazon Connect Wisdom</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2020-07-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDataIntegrationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDataIntegrationRequest::OAICreateDataIntegrationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDataIntegrationRequest::OAICreateDataIntegrationRequest() {
    this->initializeModel();
}

OAICreateDataIntegrationRequest::~OAICreateDataIntegrationRequest() {}

void OAICreateDataIntegrationRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_kms_key_isSet = false;
    m_kms_key_isValid = false;

    m_source_uri_isSet = false;
    m_source_uri_isValid = false;

    m_schedule_config_isSet = false;
    m_schedule_config_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_file_configuration_isSet = false;
    m_file_configuration_isValid = false;

    m_object_configuration_isSet = false;
    m_object_configuration_isValid = false;
}

void OAICreateDataIntegrationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDataIntegrationRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_kms_key_isValid = ::OpenAPI::fromJsonValue(m_kms_key, json[QString("KmsKey")]);
    m_kms_key_isSet = !json[QString("KmsKey")].isNull() && m_kms_key_isValid;

    m_source_uri_isValid = ::OpenAPI::fromJsonValue(m_source_uri, json[QString("SourceURI")]);
    m_source_uri_isSet = !json[QString("SourceURI")].isNull() && m_source_uri_isValid;

    m_schedule_config_isValid = ::OpenAPI::fromJsonValue(m_schedule_config, json[QString("ScheduleConfig")]);
    m_schedule_config_isSet = !json[QString("ScheduleConfig")].isNull() && m_schedule_config_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_file_configuration_isValid = ::OpenAPI::fromJsonValue(m_file_configuration, json[QString("FileConfiguration")]);
    m_file_configuration_isSet = !json[QString("FileConfiguration")].isNull() && m_file_configuration_isValid;

    m_object_configuration_isValid = ::OpenAPI::fromJsonValue(m_object_configuration, json[QString("ObjectConfiguration")]);
    m_object_configuration_isSet = !json[QString("ObjectConfiguration")].isNull() && m_object_configuration_isValid;
}

QString OAICreateDataIntegrationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDataIntegrationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_kms_key_isSet) {
        obj.insert(QString("KmsKey"), ::OpenAPI::toJsonValue(m_kms_key));
    }
    if (m_source_uri_isSet) {
        obj.insert(QString("SourceURI"), ::OpenAPI::toJsonValue(m_source_uri));
    }
    if (m_schedule_config.isSet()) {
        obj.insert(QString("ScheduleConfig"), ::OpenAPI::toJsonValue(m_schedule_config));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_file_configuration.isSet()) {
        obj.insert(QString("FileConfiguration"), ::OpenAPI::toJsonValue(m_file_configuration));
    }
    if (m_object_configuration.isSet()) {
        obj.insert(QString("ObjectConfiguration"), ::OpenAPI::toJsonValue(m_object_configuration));
    }
    return obj;
}

QString OAICreateDataIntegrationRequest::getName() const {
    return m_name;
}
void OAICreateDataIntegrationRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateDataIntegrationRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateDataIntegrationRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateDataIntegrationRequest::getDescription() const {
    return m_description;
}
void OAICreateDataIntegrationRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateDataIntegrationRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateDataIntegrationRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateDataIntegrationRequest::getKmsKey() const {
    return m_kms_key;
}
void OAICreateDataIntegrationRequest::setKmsKey(const QString &kms_key) {
    m_kms_key = kms_key;
    m_kms_key_isSet = true;
}

bool OAICreateDataIntegrationRequest::is_kms_key_Set() const{
    return m_kms_key_isSet;
}

bool OAICreateDataIntegrationRequest::is_kms_key_Valid() const{
    return m_kms_key_isValid;
}

QString OAICreateDataIntegrationRequest::getSourceUri() const {
    return m_source_uri;
}
void OAICreateDataIntegrationRequest::setSourceUri(const QString &source_uri) {
    m_source_uri = source_uri;
    m_source_uri_isSet = true;
}

bool OAICreateDataIntegrationRequest::is_source_uri_Set() const{
    return m_source_uri_isSet;
}

bool OAICreateDataIntegrationRequest::is_source_uri_Valid() const{
    return m_source_uri_isValid;
}

OAICreateDataIntegrationResponse_ScheduleConfiguration OAICreateDataIntegrationRequest::getScheduleConfig() const {
    return m_schedule_config;
}
void OAICreateDataIntegrationRequest::setScheduleConfig(const OAICreateDataIntegrationResponse_ScheduleConfiguration &schedule_config) {
    m_schedule_config = schedule_config;
    m_schedule_config_isSet = true;
}

bool OAICreateDataIntegrationRequest::is_schedule_config_Set() const{
    return m_schedule_config_isSet;
}

bool OAICreateDataIntegrationRequest::is_schedule_config_Valid() const{
    return m_schedule_config_isValid;
}

QMap OAICreateDataIntegrationRequest::getTags() const {
    return m_tags;
}
void OAICreateDataIntegrationRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateDataIntegrationRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateDataIntegrationRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateDataIntegrationRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateDataIntegrationRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateDataIntegrationRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateDataIntegrationRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

OAICreateDataIntegrationResponse_FileConfiguration OAICreateDataIntegrationRequest::getFileConfiguration() const {
    return m_file_configuration;
}
void OAICreateDataIntegrationRequest::setFileConfiguration(const OAICreateDataIntegrationResponse_FileConfiguration &file_configuration) {
    m_file_configuration = file_configuration;
    m_file_configuration_isSet = true;
}

bool OAICreateDataIntegrationRequest::is_file_configuration_Set() const{
    return m_file_configuration_isSet;
}

bool OAICreateDataIntegrationRequest::is_file_configuration_Valid() const{
    return m_file_configuration_isValid;
}

QMap OAICreateDataIntegrationRequest::getObjectConfiguration() const {
    return m_object_configuration;
}
void OAICreateDataIntegrationRequest::setObjectConfiguration(const QMap &object_configuration) {
    m_object_configuration = object_configuration;
    m_object_configuration_isSet = true;
}

bool OAICreateDataIntegrationRequest::is_object_configuration_Set() const{
    return m_object_configuration_isSet;
}

bool OAICreateDataIntegrationRequest::is_object_configuration_Valid() const{
    return m_object_configuration_isValid;
}

bool OAICreateDataIntegrationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDataIntegrationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_kms_key_isValid && m_source_uri_isValid && m_schedule_config_isValid && true;
}

} // namespace OpenAPI
