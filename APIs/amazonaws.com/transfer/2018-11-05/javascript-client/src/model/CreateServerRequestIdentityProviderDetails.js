/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IdentityProviderDetails from './IdentityProviderDetails';
import SftpAuthenticationMethods from './SftpAuthenticationMethods';

/**
 * The CreateServerRequestIdentityProviderDetails model module.
 * @module model/CreateServerRequestIdentityProviderDetails
 * @version 2018-11-05
 */
class CreateServerRequestIdentityProviderDetails {
    /**
     * Constructs a new <code>CreateServerRequestIdentityProviderDetails</code>.
     * @alias module:model/CreateServerRequestIdentityProviderDetails
     * @implements module:model/IdentityProviderDetails
     */
    constructor() { 
        IdentityProviderDetails.initialize(this);
        CreateServerRequestIdentityProviderDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreateServerRequestIdentityProviderDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateServerRequestIdentityProviderDetails} obj Optional instance to populate.
     * @return {module:model/CreateServerRequestIdentityProviderDetails} The populated <code>CreateServerRequestIdentityProviderDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateServerRequestIdentityProviderDetails();
            IdentityProviderDetails.constructFromObject(data, obj);

            if (data.hasOwnProperty('Url')) {
                obj['Url'] = ApiClient.convertToType(data['Url'], 'String');
            }
            if (data.hasOwnProperty('InvocationRole')) {
                obj['InvocationRole'] = ApiClient.convertToType(data['InvocationRole'], 'String');
            }
            if (data.hasOwnProperty('DirectoryId')) {
                obj['DirectoryId'] = ApiClient.convertToType(data['DirectoryId'], 'String');
            }
            if (data.hasOwnProperty('Function')) {
                obj['Function'] = ApiClient.convertToType(data['Function'], 'String');
            }
            if (data.hasOwnProperty('SftpAuthenticationMethods')) {
                obj['SftpAuthenticationMethods'] = ApiClient.convertToType(data['SftpAuthenticationMethods'], SftpAuthenticationMethods);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateServerRequestIdentityProviderDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateServerRequestIdentityProviderDetails</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Url`
        if (data['Url']) { // data not null
          String.validateJSON(data['Url']);
        }
        // validate the optional field `InvocationRole`
        if (data['InvocationRole']) { // data not null
          String.validateJSON(data['InvocationRole']);
        }
        // validate the optional field `DirectoryId`
        if (data['DirectoryId']) { // data not null
          String.validateJSON(data['DirectoryId']);
        }
        // validate the optional field `Function`
        if (data['Function']) { // data not null
          String.validateJSON(data['Function']);
        }
        // validate the optional field `SftpAuthenticationMethods`
        if (data['SftpAuthenticationMethods']) { // data not null
          SftpAuthenticationMethods.validateJSON(data['SftpAuthenticationMethods']);
        }

        return true;
    }


}



/**
 * @member {String} Url
 */
CreateServerRequestIdentityProviderDetails.prototype['Url'] = undefined;

/**
 * @member {String} InvocationRole
 */
CreateServerRequestIdentityProviderDetails.prototype['InvocationRole'] = undefined;

/**
 * @member {String} DirectoryId
 */
CreateServerRequestIdentityProviderDetails.prototype['DirectoryId'] = undefined;

/**
 * @member {String} Function
 */
CreateServerRequestIdentityProviderDetails.prototype['Function'] = undefined;

/**
 * @member {module:model/SftpAuthenticationMethods} SftpAuthenticationMethods
 */
CreateServerRequestIdentityProviderDetails.prototype['SftpAuthenticationMethods'] = undefined;


// Implement IdentityProviderDetails interface:
/**
 * @member {String} Url
 */
IdentityProviderDetails.prototype['Url'] = undefined;
/**
 * @member {String} InvocationRole
 */
IdentityProviderDetails.prototype['InvocationRole'] = undefined;
/**
 * @member {String} DirectoryId
 */
IdentityProviderDetails.prototype['DirectoryId'] = undefined;
/**
 * @member {String} Function
 */
IdentityProviderDetails.prototype['Function'] = undefined;
/**
 * @member {module:model/SftpAuthenticationMethods} SftpAuthenticationMethods
 */
IdentityProviderDetails.prototype['SftpAuthenticationMethods'] = undefined;




export default CreateServerRequestIdentityProviderDetails;

