/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateAccessRequest from '../model/CreateAccessRequest';
import CreateAccessResponse from '../model/CreateAccessResponse';
import CreateAgreementRequest from '../model/CreateAgreementRequest';
import CreateAgreementResponse from '../model/CreateAgreementResponse';
import CreateConnectorRequest from '../model/CreateConnectorRequest';
import CreateConnectorResponse from '../model/CreateConnectorResponse';
import CreateProfileRequest from '../model/CreateProfileRequest';
import CreateProfileResponse from '../model/CreateProfileResponse';
import CreateServerRequest from '../model/CreateServerRequest';
import CreateServerResponse from '../model/CreateServerResponse';
import CreateUserRequest from '../model/CreateUserRequest';
import CreateUserResponse from '../model/CreateUserResponse';
import CreateWorkflowRequest from '../model/CreateWorkflowRequest';
import CreateWorkflowResponse from '../model/CreateWorkflowResponse';
import DeleteAccessRequest from '../model/DeleteAccessRequest';
import DeleteAgreementRequest from '../model/DeleteAgreementRequest';
import DeleteCertificateRequest from '../model/DeleteCertificateRequest';
import DeleteConnectorRequest from '../model/DeleteConnectorRequest';
import DeleteHostKeyRequest from '../model/DeleteHostKeyRequest';
import DeleteProfileRequest from '../model/DeleteProfileRequest';
import DeleteServerRequest from '../model/DeleteServerRequest';
import DeleteSshPublicKeyRequest from '../model/DeleteSshPublicKeyRequest';
import DeleteUserRequest from '../model/DeleteUserRequest';
import DeleteWorkflowRequest from '../model/DeleteWorkflowRequest';
import DescribeAccessRequest from '../model/DescribeAccessRequest';
import DescribeAccessResponse from '../model/DescribeAccessResponse';
import DescribeAgreementRequest from '../model/DescribeAgreementRequest';
import DescribeAgreementResponse from '../model/DescribeAgreementResponse';
import DescribeCertificateRequest from '../model/DescribeCertificateRequest';
import DescribeCertificateResponse from '../model/DescribeCertificateResponse';
import DescribeConnectorRequest from '../model/DescribeConnectorRequest';
import DescribeConnectorResponse from '../model/DescribeConnectorResponse';
import DescribeExecutionRequest from '../model/DescribeExecutionRequest';
import DescribeExecutionResponse from '../model/DescribeExecutionResponse';
import DescribeHostKeyRequest from '../model/DescribeHostKeyRequest';
import DescribeHostKeyResponse from '../model/DescribeHostKeyResponse';
import DescribeProfileRequest from '../model/DescribeProfileRequest';
import DescribeProfileResponse from '../model/DescribeProfileResponse';
import DescribeSecurityPolicyRequest from '../model/DescribeSecurityPolicyRequest';
import DescribeSecurityPolicyResponse from '../model/DescribeSecurityPolicyResponse';
import DescribeServerRequest from '../model/DescribeServerRequest';
import DescribeServerResponse from '../model/DescribeServerResponse';
import DescribeUserRequest from '../model/DescribeUserRequest';
import DescribeUserResponse from '../model/DescribeUserResponse';
import DescribeWorkflowRequest from '../model/DescribeWorkflowRequest';
import DescribeWorkflowResponse from '../model/DescribeWorkflowResponse';
import ImportCertificateRequest from '../model/ImportCertificateRequest';
import ImportCertificateResponse from '../model/ImportCertificateResponse';
import ImportHostKeyRequest from '../model/ImportHostKeyRequest';
import ImportHostKeyResponse from '../model/ImportHostKeyResponse';
import ImportSshPublicKeyRequest from '../model/ImportSshPublicKeyRequest';
import ImportSshPublicKeyResponse from '../model/ImportSshPublicKeyResponse';
import ListAccessesRequest from '../model/ListAccessesRequest';
import ListAccessesResponse from '../model/ListAccessesResponse';
import ListAgreementsRequest from '../model/ListAgreementsRequest';
import ListAgreementsResponse from '../model/ListAgreementsResponse';
import ListCertificatesRequest from '../model/ListCertificatesRequest';
import ListCertificatesResponse from '../model/ListCertificatesResponse';
import ListConnectorsRequest from '../model/ListConnectorsRequest';
import ListConnectorsResponse from '../model/ListConnectorsResponse';
import ListExecutionsRequest from '../model/ListExecutionsRequest';
import ListExecutionsResponse from '../model/ListExecutionsResponse';
import ListHostKeysRequest from '../model/ListHostKeysRequest';
import ListHostKeysResponse from '../model/ListHostKeysResponse';
import ListProfilesRequest from '../model/ListProfilesRequest';
import ListProfilesResponse from '../model/ListProfilesResponse';
import ListSecurityPoliciesRequest from '../model/ListSecurityPoliciesRequest';
import ListSecurityPoliciesResponse from '../model/ListSecurityPoliciesResponse';
import ListServersRequest from '../model/ListServersRequest';
import ListServersResponse from '../model/ListServersResponse';
import ListTagsForResourceRequest from '../model/ListTagsForResourceRequest';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import ListUsersRequest from '../model/ListUsersRequest';
import ListUsersResponse from '../model/ListUsersResponse';
import ListWorkflowsRequest from '../model/ListWorkflowsRequest';
import ListWorkflowsResponse from '../model/ListWorkflowsResponse';
import SendWorkflowStepStateRequest from '../model/SendWorkflowStepStateRequest';
import StartFileTransferRequest from '../model/StartFileTransferRequest';
import StartFileTransferResponse from '../model/StartFileTransferResponse';
import StartServerRequest from '../model/StartServerRequest';
import StopServerRequest from '../model/StopServerRequest';
import TagResourceRequest from '../model/TagResourceRequest';
import TestConnectionRequest from '../model/TestConnectionRequest';
import TestConnectionResponse from '../model/TestConnectionResponse';
import TestIdentityProviderRequest from '../model/TestIdentityProviderRequest';
import TestIdentityProviderResponse from '../model/TestIdentityProviderResponse';
import UntagResourceRequest from '../model/UntagResourceRequest';
import UpdateAccessRequest from '../model/UpdateAccessRequest';
import UpdateAccessResponse from '../model/UpdateAccessResponse';
import UpdateAgreementRequest from '../model/UpdateAgreementRequest';
import UpdateAgreementResponse from '../model/UpdateAgreementResponse';
import UpdateCertificateRequest from '../model/UpdateCertificateRequest';
import UpdateCertificateResponse from '../model/UpdateCertificateResponse';
import UpdateConnectorRequest from '../model/UpdateConnectorRequest';
import UpdateConnectorResponse from '../model/UpdateConnectorResponse';
import UpdateHostKeyRequest from '../model/UpdateHostKeyRequest';
import UpdateHostKeyResponse from '../model/UpdateHostKeyResponse';
import UpdateProfileRequest from '../model/UpdateProfileRequest';
import UpdateProfileResponse from '../model/UpdateProfileResponse';
import UpdateServerRequest from '../model/UpdateServerRequest';
import UpdateServerResponse from '../model/UpdateServerResponse';
import UpdateUserRequest from '../model/UpdateUserRequest';
import UpdateUserResponse from '../model/UpdateUserResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2018-11-05
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAccess operation.
     * @callback module:api/DefaultApi~createAccessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Used by administrators to choose which groups in the directory should have access to upload and download files over the enabled protocols using Transfer Family. For example, a Microsoft Active Directory might contain 50,000 users, but only a small fraction might need the ability to transfer files to the server. An administrator can use <code>CreateAccess</code> to limit the access to the correct set of users who need this ability.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateAccessRequest} createAccessRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAccessResponse}
     */
    createAccess(xAmzTarget, createAccessRequest, opts, callback) {
      opts = opts || {};
      let postBody = createAccessRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createAccess");
      }
      // verify the required parameter 'createAccessRequest' is set
      if (createAccessRequest === undefined || createAccessRequest === null) {
        throw new Error("Missing the required parameter 'createAccessRequest' when calling createAccess");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAccessResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.CreateAccess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAgreement operation.
     * @callback module:api/DefaultApi~createAgreementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAgreementResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an agreement. An agreement is a bilateral trading partner agreement, or partnership, between an Transfer Family server and an AS2 process. The agreement defines the file and message transfer relationship between the server and the AS2 process. To define an agreement, Transfer Family combines a server, local profile, partner profile, certificate, and other attributes.</p> <p>The partner is identified with the <code>PartnerProfileId</code>, and the AS2 process is identified with the <code>LocalProfileId</code>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateAgreementRequest} createAgreementRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAgreementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAgreementResponse}
     */
    createAgreement(xAmzTarget, createAgreementRequest, opts, callback) {
      opts = opts || {};
      let postBody = createAgreementRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createAgreement");
      }
      // verify the required parameter 'createAgreementRequest' is set
      if (createAgreementRequest === undefined || createAgreementRequest === null) {
        throw new Error("Missing the required parameter 'createAgreementRequest' when calling createAgreement");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAgreementResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.CreateAgreement', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createConnector operation.
     * @callback module:api/DefaultApi~createConnectorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateConnectorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates the connector, which captures the parameters for an outbound connection for the AS2 or SFTP protocol. The connector is required for sending files to an externally hosted AS2 or SFTP server. For more details about AS2 connectors, see <a href=\"https://docs.aws.amazon.com/transfer/latest/userguide/create-b2b-server.html#configure-as2-connector\">Create AS2 connectors</a>.</p> <note> <p>You must specify exactly one configuration object: either for AS2 (<code>As2Config</code>) or SFTP (<code>SftpConfig</code>).</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateConnectorRequest} createConnectorRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createConnectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateConnectorResponse}
     */
    createConnector(xAmzTarget, createConnectorRequest, opts, callback) {
      opts = opts || {};
      let postBody = createConnectorRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createConnector");
      }
      // verify the required parameter 'createConnectorRequest' is set
      if (createConnectorRequest === undefined || createConnectorRequest === null) {
        throw new Error("Missing the required parameter 'createConnectorRequest' when calling createConnector");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateConnectorResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.CreateConnector', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProfile operation.
     * @callback module:api/DefaultApi~createProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the local or partner profile to use for AS2 transfers.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateProfileRequest} createProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateProfileResponse}
     */
    createProfile(xAmzTarget, createProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = createProfileRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createProfile");
      }
      // verify the required parameter 'createProfileRequest' is set
      if (createProfileRequest === undefined || createProfileRequest === null) {
        throw new Error("Missing the required parameter 'createProfileRequest' when calling createProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateProfileResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.CreateProfile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createServer operation.
     * @callback module:api/DefaultApi~createServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateServerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Instantiates an auto-scaling virtual server based on the selected file transfer protocol in Amazon Web Services. When you make updates to your file transfer protocol-enabled server or when you work with users, use the service-generated <code>ServerId</code> property that is assigned to the newly created server.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateServerRequest} createServerRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateServerResponse}
     */
    createServer(xAmzTarget, createServerRequest, opts, callback) {
      opts = opts || {};
      let postBody = createServerRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createServer");
      }
      // verify the required parameter 'createServerRequest' is set
      if (createServerRequest === undefined || createServerRequest === null) {
        throw new Error("Missing the required parameter 'createServerRequest' when calling createServer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateServerResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.CreateServer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createUser operation.
     * @callback module:api/DefaultApi~createUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a user and associates them with an existing file transfer protocol-enabled server. You can only create and associate users with servers that have the <code>IdentityProviderType</code> set to <code>SERVICE_MANAGED</code>. Using parameters for <code>CreateUser</code>, you can specify the user name, set the home directory, store the user's public key, and assign the user's Identity and Access Management (IAM) role. You can also optionally add a session policy, and assign metadata with tags that can be used to group and search for users.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateUserRequest} createUserRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateUserResponse}
     */
    createUser(xAmzTarget, createUserRequest, opts, callback) {
      opts = opts || {};
      let postBody = createUserRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createUser");
      }
      // verify the required parameter 'createUserRequest' is set
      if (createUserRequest === undefined || createUserRequest === null) {
        throw new Error("Missing the required parameter 'createUserRequest' when calling createUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateUserResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.CreateUser', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createWorkflow operation.
     * @callback module:api/DefaultApi~createWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateWorkflowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Allows you to create a workflow with specified steps and step details the workflow invokes after file transfer completes. After creating a workflow, you can associate the workflow created with any transfer servers by specifying the <code>workflow-details</code> field in <code>CreateServer</code> and <code>UpdateServer</code> operations. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateWorkflowRequest} createWorkflowRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateWorkflowResponse}
     */
    createWorkflow(xAmzTarget, createWorkflowRequest, opts, callback) {
      opts = opts || {};
      let postBody = createWorkflowRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createWorkflow");
      }
      // verify the required parameter 'createWorkflowRequest' is set
      if (createWorkflowRequest === undefined || createWorkflowRequest === null) {
        throw new Error("Missing the required parameter 'createWorkflowRequest' when calling createWorkflow");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateWorkflowResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.CreateWorkflow', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAccess operation.
     * @callback module:api/DefaultApi~deleteAccessCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows you to delete the access specified in the <code>ServerID</code> and <code>ExternalID</code> parameters.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteAccessRequest} deleteAccessRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAccessCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAccess(xAmzTarget, deleteAccessRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteAccessRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteAccess");
      }
      // verify the required parameter 'deleteAccessRequest' is set
      if (deleteAccessRequest === undefined || deleteAccessRequest === null) {
        throw new Error("Missing the required parameter 'deleteAccessRequest' when calling deleteAccess");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.DeleteAccess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAgreement operation.
     * @callback module:api/DefaultApi~deleteAgreementCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the agreement that's specified in the provided <code>AgreementId</code>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteAgreementRequest} deleteAgreementRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAgreementCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAgreement(xAmzTarget, deleteAgreementRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteAgreementRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteAgreement");
      }
      // verify the required parameter 'deleteAgreementRequest' is set
      if (deleteAgreementRequest === undefined || deleteAgreementRequest === null) {
        throw new Error("Missing the required parameter 'deleteAgreementRequest' when calling deleteAgreement");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.DeleteAgreement', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCertificate operation.
     * @callback module:api/DefaultApi~deleteCertificateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the certificate that's specified in the <code>CertificateId</code> parameter.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteCertificateRequest} deleteCertificateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCertificate(xAmzTarget, deleteCertificateRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteCertificateRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteCertificate");
      }
      // verify the required parameter 'deleteCertificateRequest' is set
      if (deleteCertificateRequest === undefined || deleteCertificateRequest === null) {
        throw new Error("Missing the required parameter 'deleteCertificateRequest' when calling deleteCertificate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.DeleteCertificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteConnector operation.
     * @callback module:api/DefaultApi~deleteConnectorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the connector that's specified in the provided <code>ConnectorId</code>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteConnectorRequest} deleteConnectorRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteConnectorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteConnector(xAmzTarget, deleteConnectorRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteConnectorRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteConnector");
      }
      // verify the required parameter 'deleteConnectorRequest' is set
      if (deleteConnectorRequest === undefined || deleteConnectorRequest === null) {
        throw new Error("Missing the required parameter 'deleteConnectorRequest' when calling deleteConnector");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.DeleteConnector', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteHostKey operation.
     * @callback module:api/DefaultApi~deleteHostKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the host key that's specified in the <code>HostKeyId</code> parameter.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteHostKeyRequest} deleteHostKeyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteHostKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteHostKey(xAmzTarget, deleteHostKeyRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteHostKeyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteHostKey");
      }
      // verify the required parameter 'deleteHostKeyRequest' is set
      if (deleteHostKeyRequest === undefined || deleteHostKeyRequest === null) {
        throw new Error("Missing the required parameter 'deleteHostKeyRequest' when calling deleteHostKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.DeleteHostKey', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProfile operation.
     * @callback module:api/DefaultApi~deleteProfileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the profile that's specified in the <code>ProfileId</code> parameter.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteProfileRequest} deleteProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteProfileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProfile(xAmzTarget, deleteProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteProfileRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteProfile");
      }
      // verify the required parameter 'deleteProfileRequest' is set
      if (deleteProfileRequest === undefined || deleteProfileRequest === null) {
        throw new Error("Missing the required parameter 'deleteProfileRequest' when calling deleteProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.DeleteProfile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteServer operation.
     * @callback module:api/DefaultApi~deleteServerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes the file transfer protocol-enabled server that you specify.</p> <p>No response returns from this operation.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteServerRequest} deleteServerRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteServerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteServer(xAmzTarget, deleteServerRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteServerRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteServer");
      }
      // verify the required parameter 'deleteServerRequest' is set
      if (deleteServerRequest === undefined || deleteServerRequest === null) {
        throw new Error("Missing the required parameter 'deleteServerRequest' when calling deleteServer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.DeleteServer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSshPublicKey operation.
     * @callback module:api/DefaultApi~deleteSshPublicKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a user's Secure Shell (SSH) public key.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteSshPublicKeyRequest} deleteSshPublicKeyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteSshPublicKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSshPublicKey(xAmzTarget, deleteSshPublicKeyRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteSshPublicKeyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteSshPublicKey");
      }
      // verify the required parameter 'deleteSshPublicKeyRequest' is set
      if (deleteSshPublicKeyRequest === undefined || deleteSshPublicKeyRequest === null) {
        throw new Error("Missing the required parameter 'deleteSshPublicKeyRequest' when calling deleteSshPublicKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.DeleteSshPublicKey', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback module:api/DefaultApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes the user belonging to a file transfer protocol-enabled server you specify.</p> <p>No response returns from this operation.</p> <note> <p>When you delete a user from a server, the user's information is lost.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteUserRequest} deleteUserRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUser(xAmzTarget, deleteUserRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteUserRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteUser");
      }
      // verify the required parameter 'deleteUserRequest' is set
      if (deleteUserRequest === undefined || deleteUserRequest === null) {
        throw new Error("Missing the required parameter 'deleteUserRequest' when calling deleteUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.DeleteUser', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWorkflow operation.
     * @callback module:api/DefaultApi~deleteWorkflowCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified workflow.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteWorkflowRequest} deleteWorkflowRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteWorkflow(xAmzTarget, deleteWorkflowRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteWorkflowRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteWorkflow");
      }
      // verify the required parameter 'deleteWorkflowRequest' is set
      if (deleteWorkflowRequest === undefined || deleteWorkflowRequest === null) {
        throw new Error("Missing the required parameter 'deleteWorkflowRequest' when calling deleteWorkflow");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.DeleteWorkflow', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAccess operation.
     * @callback module:api/DefaultApi~describeAccessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Describes the access that is assigned to the specific file transfer protocol-enabled server, as identified by its <code>ServerId</code> property and its <code>ExternalId</code>.</p> <p>The response from this call returns the properties of the access that is associated with the <code>ServerId</code> value that was specified.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeAccessRequest} describeAccessRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeAccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAccessResponse}
     */
    describeAccess(xAmzTarget, describeAccessRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeAccessRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeAccess");
      }
      // verify the required parameter 'describeAccessRequest' is set
      if (describeAccessRequest === undefined || describeAccessRequest === null) {
        throw new Error("Missing the required parameter 'describeAccessRequest' when calling describeAccess");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeAccessResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.DescribeAccess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAgreement operation.
     * @callback module:api/DefaultApi~describeAgreementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAgreementResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the agreement that's identified by the <code>AgreementId</code>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeAgreementRequest} describeAgreementRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeAgreementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAgreementResponse}
     */
    describeAgreement(xAmzTarget, describeAgreementRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeAgreementRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeAgreement");
      }
      // verify the required parameter 'describeAgreementRequest' is set
      if (describeAgreementRequest === undefined || describeAgreementRequest === null) {
        throw new Error("Missing the required parameter 'describeAgreementRequest' when calling describeAgreement");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeAgreementResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.DescribeAgreement', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeCertificate operation.
     * @callback module:api/DefaultApi~describeCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeCertificateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the certificate that's identified by the <code>CertificateId</code>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeCertificateRequest} describeCertificateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeCertificateResponse}
     */
    describeCertificate(xAmzTarget, describeCertificateRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeCertificateRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeCertificate");
      }
      // verify the required parameter 'describeCertificateRequest' is set
      if (describeCertificateRequest === undefined || describeCertificateRequest === null) {
        throw new Error("Missing the required parameter 'describeCertificateRequest' when calling describeCertificate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeCertificateResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.DescribeCertificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeConnector operation.
     * @callback module:api/DefaultApi~describeConnectorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeConnectorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the connector that's identified by the <code>ConnectorId.</code> 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeConnectorRequest} describeConnectorRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeConnectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeConnectorResponse}
     */
    describeConnector(xAmzTarget, describeConnectorRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeConnectorRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeConnector");
      }
      // verify the required parameter 'describeConnectorRequest' is set
      if (describeConnectorRequest === undefined || describeConnectorRequest === null) {
        throw new Error("Missing the required parameter 'describeConnectorRequest' when calling describeConnector");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeConnectorResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.DescribeConnector', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeExecution operation.
     * @callback module:api/DefaultApi~describeExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeExecutionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>You can use <code>DescribeExecution</code> to check the details of the execution of the specified workflow.</p> <note> <p>This API call only returns details for in-progress workflows.</p> <p> If you provide an ID for an execution that is not in progress, or if the execution doesn't match the specified workflow ID, you receive a <code>ResourceNotFound</code> exception.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeExecutionRequest} describeExecutionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeExecutionResponse}
     */
    describeExecution(xAmzTarget, describeExecutionRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeExecutionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeExecution");
      }
      // verify the required parameter 'describeExecutionRequest' is set
      if (describeExecutionRequest === undefined || describeExecutionRequest === null) {
        throw new Error("Missing the required parameter 'describeExecutionRequest' when calling describeExecution");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeExecutionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.DescribeExecution', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeHostKey operation.
     * @callback module:api/DefaultApi~describeHostKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeHostKeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the details of the host key that's specified by the <code>HostKeyId</code> and <code>ServerId</code>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeHostKeyRequest} describeHostKeyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeHostKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeHostKeyResponse}
     */
    describeHostKey(xAmzTarget, describeHostKeyRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeHostKeyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeHostKey");
      }
      // verify the required parameter 'describeHostKeyRequest' is set
      if (describeHostKeyRequest === undefined || describeHostKeyRequest === null) {
        throw new Error("Missing the required parameter 'describeHostKeyRequest' when calling describeHostKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeHostKeyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.DescribeHostKey', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeProfile operation.
     * @callback module:api/DefaultApi~describeProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the details of the profile that's specified by the <code>ProfileId</code>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeProfileRequest} describeProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeProfileResponse}
     */
    describeProfile(xAmzTarget, describeProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeProfileRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeProfile");
      }
      // verify the required parameter 'describeProfileRequest' is set
      if (describeProfileRequest === undefined || describeProfileRequest === null) {
        throw new Error("Missing the required parameter 'describeProfileRequest' when calling describeProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeProfileResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.DescribeProfile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeSecurityPolicy operation.
     * @callback module:api/DefaultApi~describeSecurityPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeSecurityPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the security policy that is attached to your file transfer protocol-enabled server. The response contains a description of the security policy's properties. For more information about security policies, see <a href=\"https://docs.aws.amazon.com/transfer/latest/userguide/security-policies.html\">Working with security policies</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeSecurityPolicyRequest} describeSecurityPolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeSecurityPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeSecurityPolicyResponse}
     */
    describeSecurityPolicy(xAmzTarget, describeSecurityPolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeSecurityPolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeSecurityPolicy");
      }
      // verify the required parameter 'describeSecurityPolicyRequest' is set
      if (describeSecurityPolicyRequest === undefined || describeSecurityPolicyRequest === null) {
        throw new Error("Missing the required parameter 'describeSecurityPolicyRequest' when calling describeSecurityPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeSecurityPolicyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.DescribeSecurityPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeServer operation.
     * @callback module:api/DefaultApi~describeServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeServerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Describes a file transfer protocol-enabled server that you specify by passing the <code>ServerId</code> parameter.</p> <p>The response contains a description of a server's properties. When you set <code>EndpointType</code> to VPC, the response will contain the <code>EndpointDetails</code>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeServerRequest} describeServerRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeServerResponse}
     */
    describeServer(xAmzTarget, describeServerRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeServerRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeServer");
      }
      // verify the required parameter 'describeServerRequest' is set
      if (describeServerRequest === undefined || describeServerRequest === null) {
        throw new Error("Missing the required parameter 'describeServerRequest' when calling describeServer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeServerResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.DescribeServer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeUser operation.
     * @callback module:api/DefaultApi~describeUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Describes the user assigned to the specific file transfer protocol-enabled server, as identified by its <code>ServerId</code> property.</p> <p>The response from this call returns the properties of the user associated with the <code>ServerId</code> value that was specified.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeUserRequest} describeUserRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeUserResponse}
     */
    describeUser(xAmzTarget, describeUserRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeUserRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeUser");
      }
      // verify the required parameter 'describeUserRequest' is set
      if (describeUserRequest === undefined || describeUserRequest === null) {
        throw new Error("Missing the required parameter 'describeUserRequest' when calling describeUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeUserResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.DescribeUser', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeWorkflow operation.
     * @callback module:api/DefaultApi~describeWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeWorkflowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the specified workflow.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeWorkflowRequest} describeWorkflowRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeWorkflowResponse}
     */
    describeWorkflow(xAmzTarget, describeWorkflowRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeWorkflowRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeWorkflow");
      }
      // verify the required parameter 'describeWorkflowRequest' is set
      if (describeWorkflowRequest === undefined || describeWorkflowRequest === null) {
        throw new Error("Missing the required parameter 'describeWorkflowRequest' when calling describeWorkflow");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeWorkflowResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.DescribeWorkflow', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importCertificate operation.
     * @callback module:api/DefaultApi~importCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportCertificateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Imports the signing and encryption certificates that you need to create local (AS2) profiles and partner profiles.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ImportCertificateRequest} importCertificateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~importCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportCertificateResponse}
     */
    importCertificate(xAmzTarget, importCertificateRequest, opts, callback) {
      opts = opts || {};
      let postBody = importCertificateRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling importCertificate");
      }
      // verify the required parameter 'importCertificateRequest' is set
      if (importCertificateRequest === undefined || importCertificateRequest === null) {
        throw new Error("Missing the required parameter 'importCertificateRequest' when calling importCertificate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImportCertificateResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.ImportCertificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importHostKey operation.
     * @callback module:api/DefaultApi~importHostKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportHostKeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a host key to the server that's specified by the <code>ServerId</code> parameter.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ImportHostKeyRequest} importHostKeyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~importHostKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportHostKeyResponse}
     */
    importHostKey(xAmzTarget, importHostKeyRequest, opts, callback) {
      opts = opts || {};
      let postBody = importHostKeyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling importHostKey");
      }
      // verify the required parameter 'importHostKeyRequest' is set
      if (importHostKeyRequest === undefined || importHostKeyRequest === null) {
        throw new Error("Missing the required parameter 'importHostKeyRequest' when calling importHostKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImportHostKeyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.ImportHostKey', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importSshPublicKey operation.
     * @callback module:api/DefaultApi~importSshPublicKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportSshPublicKeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Adds a Secure Shell (SSH) public key to a Transfer Family user identified by a <code>UserName</code> value assigned to the specific file transfer protocol-enabled server, identified by <code>ServerId</code>.</p> <p>The response returns the <code>UserName</code> value, the <code>ServerId</code> value, and the name of the <code>SshPublicKeyId</code>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ImportSshPublicKeyRequest} importSshPublicKeyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~importSshPublicKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportSshPublicKeyResponse}
     */
    importSshPublicKey(xAmzTarget, importSshPublicKeyRequest, opts, callback) {
      opts = opts || {};
      let postBody = importSshPublicKeyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling importSshPublicKey");
      }
      // verify the required parameter 'importSshPublicKeyRequest' is set
      if (importSshPublicKeyRequest === undefined || importSshPublicKeyRequest === null) {
        throw new Error("Missing the required parameter 'importSshPublicKeyRequest' when calling importSshPublicKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImportSshPublicKeyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.ImportSshPublicKey', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAccesses operation.
     * @callback module:api/DefaultApi~listAccessesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAccessesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the details for all the accesses you have on your server.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListAccessesRequest} listAccessesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listAccessesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAccessesResponse}
     */
    listAccesses(xAmzTarget, listAccessesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listAccessesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listAccesses");
      }
      // verify the required parameter 'listAccessesRequest' is set
      if (listAccessesRequest === undefined || listAccessesRequest === null) {
        throw new Error("Missing the required parameter 'listAccessesRequest' when calling listAccesses");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAccessesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.ListAccesses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAgreements operation.
     * @callback module:api/DefaultApi~listAgreementsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAgreementsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of the agreements for the server that's identified by the <code>ServerId</code> that you supply. If you want to limit the results to a certain number, supply a value for the <code>MaxResults</code> parameter. If you ran the command previously and received a value for <code>NextToken</code>, you can supply that value to continue listing agreements from where you left off.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListAgreementsRequest} listAgreementsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listAgreementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAgreementsResponse}
     */
    listAgreements(xAmzTarget, listAgreementsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listAgreementsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listAgreements");
      }
      // verify the required parameter 'listAgreementsRequest' is set
      if (listAgreementsRequest === undefined || listAgreementsRequest === null) {
        throw new Error("Missing the required parameter 'listAgreementsRequest' when calling listAgreements");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAgreementsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.ListAgreements', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCertificates operation.
     * @callback module:api/DefaultApi~listCertificatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCertificatesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of the current certificates that have been imported into Transfer Family. If you want to limit the results to a certain number, supply a value for the <code>MaxResults</code> parameter. If you ran the command previously and received a value for the <code>NextToken</code> parameter, you can supply that value to continue listing certificates from where you left off.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListCertificatesRequest} listCertificatesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listCertificatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCertificatesResponse}
     */
    listCertificates(xAmzTarget, listCertificatesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listCertificatesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listCertificates");
      }
      // verify the required parameter 'listCertificatesRequest' is set
      if (listCertificatesRequest === undefined || listCertificatesRequest === null) {
        throw new Error("Missing the required parameter 'listCertificatesRequest' when calling listCertificates");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListCertificatesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.ListCertificates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listConnectors operation.
     * @callback module:api/DefaultApi~listConnectorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListConnectorsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the connectors for the specified Region.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListConnectorsRequest} listConnectorsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listConnectorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListConnectorsResponse}
     */
    listConnectors(xAmzTarget, listConnectorsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listConnectorsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listConnectors");
      }
      // verify the required parameter 'listConnectorsRequest' is set
      if (listConnectorsRequest === undefined || listConnectorsRequest === null) {
        throw new Error("Missing the required parameter 'listConnectorsRequest' when calling listConnectors");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListConnectorsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.ListConnectors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listExecutions operation.
     * @callback module:api/DefaultApi~listExecutionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListExecutionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists all in-progress executions for the specified workflow.</p> <note> <p>If the specified workflow ID cannot be found, <code>ListExecutions</code> returns a <code>ResourceNotFound</code> exception.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListExecutionsRequest} listExecutionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listExecutionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListExecutionsResponse}
     */
    listExecutions(xAmzTarget, listExecutionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listExecutionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listExecutions");
      }
      // verify the required parameter 'listExecutionsRequest' is set
      if (listExecutionsRequest === undefined || listExecutionsRequest === null) {
        throw new Error("Missing the required parameter 'listExecutionsRequest' when calling listExecutions");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListExecutionsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.ListExecutions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listHostKeys operation.
     * @callback module:api/DefaultApi~listHostKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListHostKeysResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of host keys for the server that's specified by the <code>ServerId</code> parameter.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListHostKeysRequest} listHostKeysRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listHostKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListHostKeysResponse}
     */
    listHostKeys(xAmzTarget, listHostKeysRequest, opts, callback) {
      opts = opts || {};
      let postBody = listHostKeysRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listHostKeys");
      }
      // verify the required parameter 'listHostKeysRequest' is set
      if (listHostKeysRequest === undefined || listHostKeysRequest === null) {
        throw new Error("Missing the required parameter 'listHostKeysRequest' when calling listHostKeys");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListHostKeysResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.ListHostKeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProfiles operation.
     * @callback module:api/DefaultApi~listProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListProfilesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of the profiles for your system. If you want to limit the results to a certain number, supply a value for the <code>MaxResults</code> parameter. If you ran the command previously and received a value for <code>NextToken</code>, you can supply that value to continue listing profiles from where you left off.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListProfilesRequest} listProfilesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListProfilesResponse}
     */
    listProfiles(xAmzTarget, listProfilesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listProfilesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listProfiles");
      }
      // verify the required parameter 'listProfilesRequest' is set
      if (listProfilesRequest === undefined || listProfilesRequest === null) {
        throw new Error("Missing the required parameter 'listProfilesRequest' when calling listProfiles");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListProfilesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.ListProfiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSecurityPolicies operation.
     * @callback module:api/DefaultApi~listSecurityPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSecurityPoliciesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the security policies that are attached to your file transfer protocol-enabled servers.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListSecurityPoliciesRequest} listSecurityPoliciesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listSecurityPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSecurityPoliciesResponse}
     */
    listSecurityPolicies(xAmzTarget, listSecurityPoliciesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listSecurityPoliciesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listSecurityPolicies");
      }
      // verify the required parameter 'listSecurityPoliciesRequest' is set
      if (listSecurityPoliciesRequest === undefined || listSecurityPoliciesRequest === null) {
        throw new Error("Missing the required parameter 'listSecurityPoliciesRequest' when calling listSecurityPolicies");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListSecurityPoliciesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.ListSecurityPolicies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listServers operation.
     * @callback module:api/DefaultApi~listServersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListServersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the file transfer protocol-enabled servers that are associated with your Amazon Web Services account.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListServersRequest} listServersRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listServersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListServersResponse}
     */
    listServers(xAmzTarget, listServersRequest, opts, callback) {
      opts = opts || {};
      let postBody = listServersRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listServers");
      }
      // verify the required parameter 'listServersRequest' is set
      if (listServersRequest === undefined || listServersRequest === null) {
        throw new Error("Missing the required parameter 'listServersRequest' when calling listServers");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListServersResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.ListServers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all of the tags associated with the Amazon Resource Name (ARN) that you specify. The resource can be a user, server, or role.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTagsForResourceRequest} listTagsForResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(xAmzTarget, listTagsForResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTagsForResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTagsForResource");
      }
      // verify the required parameter 'listTagsForResourceRequest' is set
      if (listTagsForResourceRequest === undefined || listTagsForResourceRequest === null) {
        throw new Error("Missing the required parameter 'listTagsForResourceRequest' when calling listTagsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.ListTagsForResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUsers operation.
     * @callback module:api/DefaultApi~listUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListUsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the users for a file transfer protocol-enabled server that you specify by passing the <code>ServerId</code> parameter.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListUsersRequest} listUsersRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListUsersResponse}
     */
    listUsers(xAmzTarget, listUsersRequest, opts, callback) {
      opts = opts || {};
      let postBody = listUsersRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listUsers");
      }
      // verify the required parameter 'listUsersRequest' is set
      if (listUsersRequest === undefined || listUsersRequest === null) {
        throw new Error("Missing the required parameter 'listUsersRequest' when calling listUsers");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListUsersResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.ListUsers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listWorkflows operation.
     * @callback module:api/DefaultApi~listWorkflowsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListWorkflowsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all workflows associated with your Amazon Web Services account for your current region.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListWorkflowsRequest} listWorkflowsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listWorkflowsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListWorkflowsResponse}
     */
    listWorkflows(xAmzTarget, listWorkflowsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listWorkflowsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listWorkflows");
      }
      // verify the required parameter 'listWorkflowsRequest' is set
      if (listWorkflowsRequest === undefined || listWorkflowsRequest === null) {
        throw new Error("Missing the required parameter 'listWorkflowsRequest' when calling listWorkflows");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListWorkflowsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.ListWorkflows', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendWorkflowStepState operation.
     * @callback module:api/DefaultApi~sendWorkflowStepStateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Sends a callback for asynchronous custom steps.</p> <p> The <code>ExecutionId</code>, <code>WorkflowId</code>, and <code>Token</code> are passed to the target resource during execution of a custom step of a workflow. You must include those with their callback as well as providing a status. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/SendWorkflowStepStateRequest} sendWorkflowStepStateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~sendWorkflowStepStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sendWorkflowStepState(xAmzTarget, sendWorkflowStepStateRequest, opts, callback) {
      opts = opts || {};
      let postBody = sendWorkflowStepStateRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling sendWorkflowStepState");
      }
      // verify the required parameter 'sendWorkflowStepStateRequest' is set
      if (sendWorkflowStepStateRequest === undefined || sendWorkflowStepStateRequest === null) {
        throw new Error("Missing the required parameter 'sendWorkflowStepStateRequest' when calling sendWorkflowStepState");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.SendWorkflowStepState', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startFileTransfer operation.
     * @callback module:api/DefaultApi~startFileTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartFileTransferResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Begins a file transfer between local Amazon Web Services storage and a remote AS2 or SFTP server.</p> <ul> <li> <p>For an AS2 connector, you specify the <code>ConnectorId</code> and one or more <code>SendFilePaths</code> to identify the files you want to transfer.</p> </li> <li> <p>For an SFTP connector, the file transfer can be either outbound or inbound. In both cases, you specify the <code>ConnectorId</code>. Depending on the direction of the transfer, you also specify the following items:</p> <ul> <li> <p>If you are transferring file from a partner's SFTP server to a Transfer Family server, you specify one or more <code>RetreiveFilePaths</code> to identify the files you want to transfer, and a <code>LocalDirectoryPath</code> to specify the destination folder.</p> </li> <li> <p>If you are transferring file to a partner's SFTP server from Amazon Web Services storage, you specify one or more <code>SendFilePaths</code> to identify the files you want to transfer, and a <code>RemoteDirectoryPath</code> to specify the destination folder.</p> </li> </ul> </li> </ul>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartFileTransferRequest} startFileTransferRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startFileTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartFileTransferResponse}
     */
    startFileTransfer(xAmzTarget, startFileTransferRequest, opts, callback) {
      opts = opts || {};
      let postBody = startFileTransferRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startFileTransfer");
      }
      // verify the required parameter 'startFileTransferRequest' is set
      if (startFileTransferRequest === undefined || startFileTransferRequest === null) {
        throw new Error("Missing the required parameter 'startFileTransferRequest' when calling startFileTransfer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartFileTransferResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.StartFileTransfer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startServer operation.
     * @callback module:api/DefaultApi~startServerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Changes the state of a file transfer protocol-enabled server from <code>OFFLINE</code> to <code>ONLINE</code>. It has no impact on a server that is already <code>ONLINE</code>. An <code>ONLINE</code> server can accept and process file transfer jobs.</p> <p>The state of <code>STARTING</code> indicates that the server is in an intermediate state, either not fully able to respond, or not fully online. The values of <code>START_FAILED</code> can indicate an error condition.</p> <p>No response is returned from this call.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartServerRequest} startServerRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startServerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    startServer(xAmzTarget, startServerRequest, opts, callback) {
      opts = opts || {};
      let postBody = startServerRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startServer");
      }
      // verify the required parameter 'startServerRequest' is set
      if (startServerRequest === undefined || startServerRequest === null) {
        throw new Error("Missing the required parameter 'startServerRequest' when calling startServer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.StartServer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopServer operation.
     * @callback module:api/DefaultApi~stopServerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Changes the state of a file transfer protocol-enabled server from <code>ONLINE</code> to <code>OFFLINE</code>. An <code>OFFLINE</code> server cannot accept and process file transfer jobs. Information tied to your server, such as server and user properties, are not affected by stopping your server.</p> <note> <p>Stopping the server does not reduce or impact your file transfer protocol endpoint billing; you must delete the server to stop being billed.</p> </note> <p>The state of <code>STOPPING</code> indicates that the server is in an intermediate state, either not fully able to respond, or not fully offline. The values of <code>STOP_FAILED</code> can indicate an error condition.</p> <p>No response is returned from this call.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopServerRequest} stopServerRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopServerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stopServer(xAmzTarget, stopServerRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopServerRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopServer");
      }
      // verify the required parameter 'stopServerRequest' is set
      if (stopServerRequest === undefined || stopServerRequest === null) {
        throw new Error("Missing the required parameter 'stopServerRequest' when calling stopServer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.StopServer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Attaches a key-value pair to a resource, as identified by its Amazon Resource Name (ARN). Resources are users, servers, roles, and other entities.</p> <p>There is no response returned from this call.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tagResource(xAmzTarget, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.TagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testConnection operation.
     * @callback module:api/DefaultApi~testConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestConnectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tests whether your SFTP connector is set up successfully. We highly recommend that you call this operation to test your ability to transfer files between a Transfer Family server and a trading partner's SFTP server.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/TestConnectionRequest} testConnectionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~testConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestConnectionResponse}
     */
    testConnection(xAmzTarget, testConnectionRequest, opts, callback) {
      opts = opts || {};
      let postBody = testConnectionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling testConnection");
      }
      // verify the required parameter 'testConnectionRequest' is set
      if (testConnectionRequest === undefined || testConnectionRequest === null) {
        throw new Error("Missing the required parameter 'testConnectionRequest' when calling testConnection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TestConnectionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.TestConnection', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testIdentityProvider operation.
     * @callback module:api/DefaultApi~testIdentityProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestIdentityProviderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>If the <code>IdentityProviderType</code> of a file transfer protocol-enabled server is <code>AWS_DIRECTORY_SERVICE</code> or <code>API_Gateway</code>, tests whether your identity provider is set up successfully. We highly recommend that you call this operation to test your authentication method as soon as you create your server. By doing so, you can troubleshoot issues with the identity provider integration to ensure that your users can successfully use the service.</p> <p> The <code>ServerId</code> and <code>UserName</code> parameters are required. The <code>ServerProtocol</code>, <code>SourceIp</code>, and <code>UserPassword</code> are all optional. </p> <p>Note the following:</p> <ul> <li> <p> You cannot use <code>TestIdentityProvider</code> if the <code>IdentityProviderType</code> of your server is <code>SERVICE_MANAGED</code>.</p> </li> <li> <p> <code>TestIdentityProvider</code> does not work with keys: it only accepts passwords.</p> </li> <li> <p> <code>TestIdentityProvider</code> can test the password operation for a custom Identity Provider that handles keys and passwords.</p> </li> <li> <p> If you provide any incorrect values for any parameters, the <code>Response</code> field is empty. </p> </li> <li> <p> If you provide a server ID for a server that uses service-managed users, you get an error: </p> <p> <code> An error occurred (InvalidRequestException) when calling the TestIdentityProvider operation: s-<i>server-ID</i> not configured for external auth </code> </p> </li> <li> <p> If you enter a Server ID for the <code>--server-id</code> parameter that does not identify an actual Transfer server, you receive the following error: </p> <p> <code>An error occurred (ResourceNotFoundException) when calling the TestIdentityProvider operation: Unknown server</code>. </p> <p>It is possible your sever is in a different region. You can specify a region by adding the following: <code>--region region-code</code>, such as <code>--region us-east-2</code> to specify a server in <b>US East (Ohio)</b>.</p> </li> </ul>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/TestIdentityProviderRequest} testIdentityProviderRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~testIdentityProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestIdentityProviderResponse}
     */
    testIdentityProvider(xAmzTarget, testIdentityProviderRequest, opts, callback) {
      opts = opts || {};
      let postBody = testIdentityProviderRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling testIdentityProvider");
      }
      // verify the required parameter 'testIdentityProviderRequest' is set
      if (testIdentityProviderRequest === undefined || testIdentityProviderRequest === null) {
        throw new Error("Missing the required parameter 'testIdentityProviderRequest' when calling testIdentityProvider");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TestIdentityProviderResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.TestIdentityProvider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Detaches a key-value pair from a resource, as identified by its Amazon Resource Name (ARN). Resources are users, servers, roles, and other entities.</p> <p>No response is returned from this call.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UntagResourceRequest} untagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    untagResource(xAmzTarget, untagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = untagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling untagResource");
      }
      // verify the required parameter 'untagResourceRequest' is set
      if (untagResourceRequest === undefined || untagResourceRequest === null) {
        throw new Error("Missing the required parameter 'untagResourceRequest' when calling untagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.UntagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccess operation.
     * @callback module:api/DefaultApi~updateAccessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateAccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows you to update parameters for the access specified in the <code>ServerID</code> and <code>ExternalID</code> parameters.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateAccessRequest} updateAccessRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateAccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateAccessResponse}
     */
    updateAccess(xAmzTarget, updateAccessRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateAccessRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateAccess");
      }
      // verify the required parameter 'updateAccessRequest' is set
      if (updateAccessRequest === undefined || updateAccessRequest === null) {
        throw new Error("Missing the required parameter 'updateAccessRequest' when calling updateAccess");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAccessResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.UpdateAccess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAgreement operation.
     * @callback module:api/DefaultApi~updateAgreementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateAgreementResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates some of the parameters for an existing agreement. Provide the <code>AgreementId</code> and the <code>ServerId</code> for the agreement that you want to update, along with the new values for the parameters to update.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateAgreementRequest} updateAgreementRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateAgreementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateAgreementResponse}
     */
    updateAgreement(xAmzTarget, updateAgreementRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateAgreementRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateAgreement");
      }
      // verify the required parameter 'updateAgreementRequest' is set
      if (updateAgreementRequest === undefined || updateAgreementRequest === null) {
        throw new Error("Missing the required parameter 'updateAgreementRequest' when calling updateAgreement");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAgreementResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.UpdateAgreement', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCertificate operation.
     * @callback module:api/DefaultApi~updateCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateCertificateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the active and inactive dates for a certificate.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateCertificateRequest} updateCertificateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateCertificateResponse}
     */
    updateCertificate(xAmzTarget, updateCertificateRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateCertificateRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateCertificate");
      }
      // verify the required parameter 'updateCertificateRequest' is set
      if (updateCertificateRequest === undefined || updateCertificateRequest === null) {
        throw new Error("Missing the required parameter 'updateCertificateRequest' when calling updateCertificate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateCertificateResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.UpdateCertificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConnector operation.
     * @callback module:api/DefaultApi~updateConnectorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateConnectorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates some of the parameters for an existing connector. Provide the <code>ConnectorId</code> for the connector that you want to update, along with the new values for the parameters to update.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateConnectorRequest} updateConnectorRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateConnectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateConnectorResponse}
     */
    updateConnector(xAmzTarget, updateConnectorRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateConnectorRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateConnector");
      }
      // verify the required parameter 'updateConnectorRequest' is set
      if (updateConnectorRequest === undefined || updateConnectorRequest === null) {
        throw new Error("Missing the required parameter 'updateConnectorRequest' when calling updateConnector");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateConnectorResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.UpdateConnector', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateHostKey operation.
     * @callback module:api/DefaultApi~updateHostKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateHostKeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the description for the host key that's specified by the <code>ServerId</code> and <code>HostKeyId</code> parameters.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateHostKeyRequest} updateHostKeyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateHostKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateHostKeyResponse}
     */
    updateHostKey(xAmzTarget, updateHostKeyRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateHostKeyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateHostKey");
      }
      // verify the required parameter 'updateHostKeyRequest' is set
      if (updateHostKeyRequest === undefined || updateHostKeyRequest === null) {
        throw new Error("Missing the required parameter 'updateHostKeyRequest' when calling updateHostKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateHostKeyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.UpdateHostKey', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProfile operation.
     * @callback module:api/DefaultApi~updateProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates some of the parameters for an existing profile. Provide the <code>ProfileId</code> for the profile that you want to update, along with the new values for the parameters to update.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateProfileRequest} updateProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateProfileResponse}
     */
    updateProfile(xAmzTarget, updateProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateProfileRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateProfile");
      }
      // verify the required parameter 'updateProfileRequest' is set
      if (updateProfileRequest === undefined || updateProfileRequest === null) {
        throw new Error("Missing the required parameter 'updateProfileRequest' when calling updateProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateProfileResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.UpdateProfile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateServer operation.
     * @callback module:api/DefaultApi~updateServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateServerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates the file transfer protocol-enabled server's properties after that server has been created.</p> <p>The <code>UpdateServer</code> call returns the <code>ServerId</code> of the server you updated.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateServerRequest} updateServerRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateServerResponse}
     */
    updateServer(xAmzTarget, updateServerRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateServerRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateServer");
      }
      // verify the required parameter 'updateServerRequest' is set
      if (updateServerRequest === undefined || updateServerRequest === null) {
        throw new Error("Missing the required parameter 'updateServerRequest' when calling updateServer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateServerResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.UpdateServer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUser operation.
     * @callback module:api/DefaultApi~updateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Assigns new properties to a user. Parameters you pass modify any or all of the following: the home directory, role, and policy for the <code>UserName</code> and <code>ServerId</code> you specify.</p> <p>The response returns the <code>ServerId</code> and the <code>UserName</code> for the updated user.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateUserRequest} updateUserRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateUserResponse}
     */
    updateUser(xAmzTarget, updateUserRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateUserRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateUser");
      }
      // verify the required parameter 'updateUserRequest' is set
      if (updateUserRequest === undefined || updateUserRequest === null) {
        throw new Error("Missing the required parameter 'updateUserRequest' when calling updateUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateUserResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=TransferService.UpdateUser', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
