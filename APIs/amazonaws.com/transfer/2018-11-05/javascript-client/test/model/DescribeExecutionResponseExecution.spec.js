/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsTransferFamily);
  }
}(this, function(expect, AwsTransferFamily) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsTransferFamily.DescribeExecutionResponseExecution();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DescribeExecutionResponseExecution', function() {
    it('should create an instance of DescribeExecutionResponseExecution', function() {
      // uncomment below and update the code to test DescribeExecutionResponseExecution
      //var instance = new AwsTransferFamily.DescribeExecutionResponseExecution();
      //expect(instance).to.be.a(AwsTransferFamily.DescribeExecutionResponseExecution);
    });

    it('should have the property executionId (base name: "ExecutionId")', function() {
      // uncomment below and update the code to test the property executionId
      //var instance = new AwsTransferFamily.DescribeExecutionResponseExecution();
      //expect(instance).to.be();
    });

    it('should have the property initialFileLocation (base name: "InitialFileLocation")', function() {
      // uncomment below and update the code to test the property initialFileLocation
      //var instance = new AwsTransferFamily.DescribeExecutionResponseExecution();
      //expect(instance).to.be();
    });

    it('should have the property serviceMetadata (base name: "ServiceMetadata")', function() {
      // uncomment below and update the code to test the property serviceMetadata
      //var instance = new AwsTransferFamily.DescribeExecutionResponseExecution();
      //expect(instance).to.be();
    });

    it('should have the property executionRole (base name: "ExecutionRole")', function() {
      // uncomment below and update the code to test the property executionRole
      //var instance = new AwsTransferFamily.DescribeExecutionResponseExecution();
      //expect(instance).to.be();
    });

    it('should have the property loggingConfiguration (base name: "LoggingConfiguration")', function() {
      // uncomment below and update the code to test the property loggingConfiguration
      //var instance = new AwsTransferFamily.DescribeExecutionResponseExecution();
      //expect(instance).to.be();
    });

    it('should have the property posixProfile (base name: "PosixProfile")', function() {
      // uncomment below and update the code to test the property posixProfile
      //var instance = new AwsTransferFamily.DescribeExecutionResponseExecution();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "Status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new AwsTransferFamily.DescribeExecutionResponseExecution();
      //expect(instance).to.be();
    });

    it('should have the property results (base name: "Results")', function() {
      // uncomment below and update the code to test the property results
      //var instance = new AwsTransferFamily.DescribeExecutionResponseExecution();
      //expect(instance).to.be();
    });

  });

}));
