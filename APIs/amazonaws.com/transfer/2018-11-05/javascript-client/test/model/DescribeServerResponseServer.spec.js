/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsTransferFamily);
  }
}(this, function(expect, AwsTransferFamily) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsTransferFamily.DescribeServerResponseServer();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DescribeServerResponseServer', function() {
    it('should create an instance of DescribeServerResponseServer', function() {
      // uncomment below and update the code to test DescribeServerResponseServer
      //var instance = new AwsTransferFamily.DescribeServerResponseServer();
      //expect(instance).to.be.a(AwsTransferFamily.DescribeServerResponseServer);
    });

    it('should have the property arn (base name: "Arn")', function() {
      // uncomment below and update the code to test the property arn
      //var instance = new AwsTransferFamily.DescribeServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property certificate (base name: "Certificate")', function() {
      // uncomment below and update the code to test the property certificate
      //var instance = new AwsTransferFamily.DescribeServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property protocolDetails (base name: "ProtocolDetails")', function() {
      // uncomment below and update the code to test the property protocolDetails
      //var instance = new AwsTransferFamily.DescribeServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property domain (base name: "Domain")', function() {
      // uncomment below and update the code to test the property domain
      //var instance = new AwsTransferFamily.DescribeServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property endpointDetails (base name: "EndpointDetails")', function() {
      // uncomment below and update the code to test the property endpointDetails
      //var instance = new AwsTransferFamily.DescribeServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property endpointType (base name: "EndpointType")', function() {
      // uncomment below and update the code to test the property endpointType
      //var instance = new AwsTransferFamily.DescribeServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property hostKeyFingerprint (base name: "HostKeyFingerprint")', function() {
      // uncomment below and update the code to test the property hostKeyFingerprint
      //var instance = new AwsTransferFamily.DescribeServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property identityProviderDetails (base name: "IdentityProviderDetails")', function() {
      // uncomment below and update the code to test the property identityProviderDetails
      //var instance = new AwsTransferFamily.DescribeServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property identityProviderType (base name: "IdentityProviderType")', function() {
      // uncomment below and update the code to test the property identityProviderType
      //var instance = new AwsTransferFamily.DescribeServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property loggingRole (base name: "LoggingRole")', function() {
      // uncomment below and update the code to test the property loggingRole
      //var instance = new AwsTransferFamily.DescribeServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property postAuthenticationLoginBanner (base name: "PostAuthenticationLoginBanner")', function() {
      // uncomment below and update the code to test the property postAuthenticationLoginBanner
      //var instance = new AwsTransferFamily.DescribeServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property preAuthenticationLoginBanner (base name: "PreAuthenticationLoginBanner")', function() {
      // uncomment below and update the code to test the property preAuthenticationLoginBanner
      //var instance = new AwsTransferFamily.DescribeServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property protocols (base name: "Protocols")', function() {
      // uncomment below and update the code to test the property protocols
      //var instance = new AwsTransferFamily.DescribeServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property securityPolicyName (base name: "SecurityPolicyName")', function() {
      // uncomment below and update the code to test the property securityPolicyName
      //var instance = new AwsTransferFamily.DescribeServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property serverId (base name: "ServerId")', function() {
      // uncomment below and update the code to test the property serverId
      //var instance = new AwsTransferFamily.DescribeServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "State")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new AwsTransferFamily.DescribeServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "Tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new AwsTransferFamily.DescribeServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property userCount (base name: "UserCount")', function() {
      // uncomment below and update the code to test the property userCount
      //var instance = new AwsTransferFamily.DescribeServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property workflowDetails (base name: "WorkflowDetails")', function() {
      // uncomment below and update the code to test the property workflowDetails
      //var instance = new AwsTransferFamily.DescribeServerResponseServer();
      //expect(instance).to.be();
    });

    it('should have the property structuredLogDestinations (base name: "StructuredLogDestinations")', function() {
      // uncomment below and update the code to test the property structuredLogDestinations
      //var instance = new AwsTransferFamily.DescribeServerResponseServer();
      //expect(instance).to.be();
    });

  });

}));
