/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsTransferFamily);
  }
}(this, function(expect, AwsTransferFamily) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsTransferFamily.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('createAccess', function() {
      it('should call createAccess successfully', function(done) {
        //uncomment below and update the code to test createAccess
        //instance.createAccess(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAgreement', function() {
      it('should call createAgreement successfully', function(done) {
        //uncomment below and update the code to test createAgreement
        //instance.createAgreement(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createConnector', function() {
      it('should call createConnector successfully', function(done) {
        //uncomment below and update the code to test createConnector
        //instance.createConnector(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createProfile', function() {
      it('should call createProfile successfully', function(done) {
        //uncomment below and update the code to test createProfile
        //instance.createProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createServer', function() {
      it('should call createServer successfully', function(done) {
        //uncomment below and update the code to test createServer
        //instance.createServer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createUser', function() {
      it('should call createUser successfully', function(done) {
        //uncomment below and update the code to test createUser
        //instance.createUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createWorkflow', function() {
      it('should call createWorkflow successfully', function(done) {
        //uncomment below and update the code to test createWorkflow
        //instance.createWorkflow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAccess', function() {
      it('should call deleteAccess successfully', function(done) {
        //uncomment below and update the code to test deleteAccess
        //instance.deleteAccess(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAgreement', function() {
      it('should call deleteAgreement successfully', function(done) {
        //uncomment below and update the code to test deleteAgreement
        //instance.deleteAgreement(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCertificate', function() {
      it('should call deleteCertificate successfully', function(done) {
        //uncomment below and update the code to test deleteCertificate
        //instance.deleteCertificate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteConnector', function() {
      it('should call deleteConnector successfully', function(done) {
        //uncomment below and update the code to test deleteConnector
        //instance.deleteConnector(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteHostKey', function() {
      it('should call deleteHostKey successfully', function(done) {
        //uncomment below and update the code to test deleteHostKey
        //instance.deleteHostKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteProfile', function() {
      it('should call deleteProfile successfully', function(done) {
        //uncomment below and update the code to test deleteProfile
        //instance.deleteProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteServer', function() {
      it('should call deleteServer successfully', function(done) {
        //uncomment below and update the code to test deleteServer
        //instance.deleteServer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSshPublicKey', function() {
      it('should call deleteSshPublicKey successfully', function(done) {
        //uncomment below and update the code to test deleteSshPublicKey
        //instance.deleteSshPublicKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteUser', function() {
      it('should call deleteUser successfully', function(done) {
        //uncomment below and update the code to test deleteUser
        //instance.deleteUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteWorkflow', function() {
      it('should call deleteWorkflow successfully', function(done) {
        //uncomment below and update the code to test deleteWorkflow
        //instance.deleteWorkflow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeAccess', function() {
      it('should call describeAccess successfully', function(done) {
        //uncomment below and update the code to test describeAccess
        //instance.describeAccess(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeAgreement', function() {
      it('should call describeAgreement successfully', function(done) {
        //uncomment below and update the code to test describeAgreement
        //instance.describeAgreement(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeCertificate', function() {
      it('should call describeCertificate successfully', function(done) {
        //uncomment below and update the code to test describeCertificate
        //instance.describeCertificate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeConnector', function() {
      it('should call describeConnector successfully', function(done) {
        //uncomment below and update the code to test describeConnector
        //instance.describeConnector(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeExecution', function() {
      it('should call describeExecution successfully', function(done) {
        //uncomment below and update the code to test describeExecution
        //instance.describeExecution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeHostKey', function() {
      it('should call describeHostKey successfully', function(done) {
        //uncomment below and update the code to test describeHostKey
        //instance.describeHostKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeProfile', function() {
      it('should call describeProfile successfully', function(done) {
        //uncomment below and update the code to test describeProfile
        //instance.describeProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeSecurityPolicy', function() {
      it('should call describeSecurityPolicy successfully', function(done) {
        //uncomment below and update the code to test describeSecurityPolicy
        //instance.describeSecurityPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeServer', function() {
      it('should call describeServer successfully', function(done) {
        //uncomment below and update the code to test describeServer
        //instance.describeServer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeUser', function() {
      it('should call describeUser successfully', function(done) {
        //uncomment below and update the code to test describeUser
        //instance.describeUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeWorkflow', function() {
      it('should call describeWorkflow successfully', function(done) {
        //uncomment below and update the code to test describeWorkflow
        //instance.describeWorkflow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('importCertificate', function() {
      it('should call importCertificate successfully', function(done) {
        //uncomment below and update the code to test importCertificate
        //instance.importCertificate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('importHostKey', function() {
      it('should call importHostKey successfully', function(done) {
        //uncomment below and update the code to test importHostKey
        //instance.importHostKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('importSshPublicKey', function() {
      it('should call importSshPublicKey successfully', function(done) {
        //uncomment below and update the code to test importSshPublicKey
        //instance.importSshPublicKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAccesses', function() {
      it('should call listAccesses successfully', function(done) {
        //uncomment below and update the code to test listAccesses
        //instance.listAccesses(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAgreements', function() {
      it('should call listAgreements successfully', function(done) {
        //uncomment below and update the code to test listAgreements
        //instance.listAgreements(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCertificates', function() {
      it('should call listCertificates successfully', function(done) {
        //uncomment below and update the code to test listCertificates
        //instance.listCertificates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listConnectors', function() {
      it('should call listConnectors successfully', function(done) {
        //uncomment below and update the code to test listConnectors
        //instance.listConnectors(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listExecutions', function() {
      it('should call listExecutions successfully', function(done) {
        //uncomment below and update the code to test listExecutions
        //instance.listExecutions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listHostKeys', function() {
      it('should call listHostKeys successfully', function(done) {
        //uncomment below and update the code to test listHostKeys
        //instance.listHostKeys(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listProfiles', function() {
      it('should call listProfiles successfully', function(done) {
        //uncomment below and update the code to test listProfiles
        //instance.listProfiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSecurityPolicies', function() {
      it('should call listSecurityPolicies successfully', function(done) {
        //uncomment below and update the code to test listSecurityPolicies
        //instance.listSecurityPolicies(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listServers', function() {
      it('should call listServers successfully', function(done) {
        //uncomment below and update the code to test listServers
        //instance.listServers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listUsers', function() {
      it('should call listUsers successfully', function(done) {
        //uncomment below and update the code to test listUsers
        //instance.listUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listWorkflows', function() {
      it('should call listWorkflows successfully', function(done) {
        //uncomment below and update the code to test listWorkflows
        //instance.listWorkflows(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendWorkflowStepState', function() {
      it('should call sendWorkflowStepState successfully', function(done) {
        //uncomment below and update the code to test sendWorkflowStepState
        //instance.sendWorkflowStepState(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startFileTransfer', function() {
      it('should call startFileTransfer successfully', function(done) {
        //uncomment below and update the code to test startFileTransfer
        //instance.startFileTransfer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startServer', function() {
      it('should call startServer successfully', function(done) {
        //uncomment below and update the code to test startServer
        //instance.startServer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopServer', function() {
      it('should call stopServer successfully', function(done) {
        //uncomment below and update the code to test stopServer
        //instance.stopServer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('testConnection', function() {
      it('should call testConnection successfully', function(done) {
        //uncomment below and update the code to test testConnection
        //instance.testConnection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('testIdentityProvider', function() {
      it('should call testIdentityProvider successfully', function(done) {
        //uncomment below and update the code to test testIdentityProvider
        //instance.testIdentityProvider(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAccess', function() {
      it('should call updateAccess successfully', function(done) {
        //uncomment below and update the code to test updateAccess
        //instance.updateAccess(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAgreement', function() {
      it('should call updateAgreement successfully', function(done) {
        //uncomment below and update the code to test updateAgreement
        //instance.updateAgreement(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCertificate', function() {
      it('should call updateCertificate successfully', function(done) {
        //uncomment below and update the code to test updateCertificate
        //instance.updateCertificate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateConnector', function() {
      it('should call updateConnector successfully', function(done) {
        //uncomment below and update the code to test updateConnector
        //instance.updateConnector(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateHostKey', function() {
      it('should call updateHostKey successfully', function(done) {
        //uncomment below and update the code to test updateHostKey
        //instance.updateHostKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateProfile', function() {
      it('should call updateProfile successfully', function(done) {
        //uncomment below and update the code to test updateProfile
        //instance.updateProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateServer', function() {
      it('should call updateServer successfully', function(done) {
        //uncomment below and update the code to test updateServer
        //instance.updateServer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateUser', function() {
      it('should call updateUser successfully', function(done) {
        //uncomment below and update the code to test updateUser
        //instance.updateUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
