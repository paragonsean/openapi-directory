/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateConnectorResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateConnectorResponse::OAICreateConnectorResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateConnectorResponse::OAICreateConnectorResponse() {
    this->initializeModel();
}

OAICreateConnectorResponse::~OAICreateConnectorResponse() {}

void OAICreateConnectorResponse::initializeModel() {

    m_connector_id_isSet = false;
    m_connector_id_isValid = false;
}

void OAICreateConnectorResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateConnectorResponse::fromJsonObject(QJsonObject json) {

    m_connector_id_isValid = ::OpenAPI::fromJsonValue(m_connector_id, json[QString("ConnectorId")]);
    m_connector_id_isSet = !json[QString("ConnectorId")].isNull() && m_connector_id_isValid;
}

QString OAICreateConnectorResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateConnectorResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_connector_id_isSet) {
        obj.insert(QString("ConnectorId"), ::OpenAPI::toJsonValue(m_connector_id));
    }
    return obj;
}

QString OAICreateConnectorResponse::getConnectorId() const {
    return m_connector_id;
}
void OAICreateConnectorResponse::setConnectorId(const QString &connector_id) {
    m_connector_id = connector_id;
    m_connector_id_isSet = true;
}

bool OAICreateConnectorResponse::is_connector_id_Set() const{
    return m_connector_id_isSet;
}

bool OAICreateConnectorResponse::is_connector_id_Valid() const{
    return m_connector_id_isValid;
}

bool OAICreateConnectorResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connector_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateConnectorResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_connector_id_isValid && true;
}

} // namespace OpenAPI
