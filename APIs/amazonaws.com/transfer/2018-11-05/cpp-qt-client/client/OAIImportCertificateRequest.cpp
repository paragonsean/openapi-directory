/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportCertificateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportCertificateRequest::OAIImportCertificateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportCertificateRequest::OAIImportCertificateRequest() {
    this->initializeModel();
}

OAIImportCertificateRequest::~OAIImportCertificateRequest() {}

void OAIImportCertificateRequest::initializeModel() {

    m_usage_isSet = false;
    m_usage_isValid = false;

    m_certificate_isSet = false;
    m_certificate_isValid = false;

    m_certificate_chain_isSet = false;
    m_certificate_chain_isValid = false;

    m_private_key_isSet = false;
    m_private_key_isValid = false;

    m_active_date_isSet = false;
    m_active_date_isValid = false;

    m_inactive_date_isSet = false;
    m_inactive_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIImportCertificateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportCertificateRequest::fromJsonObject(QJsonObject json) {

    m_usage_isValid = ::OpenAPI::fromJsonValue(m_usage, json[QString("Usage")]);
    m_usage_isSet = !json[QString("Usage")].isNull() && m_usage_isValid;

    m_certificate_isValid = ::OpenAPI::fromJsonValue(m_certificate, json[QString("Certificate")]);
    m_certificate_isSet = !json[QString("Certificate")].isNull() && m_certificate_isValid;

    m_certificate_chain_isValid = ::OpenAPI::fromJsonValue(m_certificate_chain, json[QString("CertificateChain")]);
    m_certificate_chain_isSet = !json[QString("CertificateChain")].isNull() && m_certificate_chain_isValid;

    m_private_key_isValid = ::OpenAPI::fromJsonValue(m_private_key, json[QString("PrivateKey")]);
    m_private_key_isSet = !json[QString("PrivateKey")].isNull() && m_private_key_isValid;

    m_active_date_isValid = ::OpenAPI::fromJsonValue(m_active_date, json[QString("ActiveDate")]);
    m_active_date_isSet = !json[QString("ActiveDate")].isNull() && m_active_date_isValid;

    m_inactive_date_isValid = ::OpenAPI::fromJsonValue(m_inactive_date, json[QString("InactiveDate")]);
    m_inactive_date_isSet = !json[QString("InactiveDate")].isNull() && m_inactive_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIImportCertificateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportCertificateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_usage.isSet()) {
        obj.insert(QString("Usage"), ::OpenAPI::toJsonValue(m_usage));
    }
    if (m_certificate_isSet) {
        obj.insert(QString("Certificate"), ::OpenAPI::toJsonValue(m_certificate));
    }
    if (m_certificate_chain_isSet) {
        obj.insert(QString("CertificateChain"), ::OpenAPI::toJsonValue(m_certificate_chain));
    }
    if (m_private_key_isSet) {
        obj.insert(QString("PrivateKey"), ::OpenAPI::toJsonValue(m_private_key));
    }
    if (m_active_date_isSet) {
        obj.insert(QString("ActiveDate"), ::OpenAPI::toJsonValue(m_active_date));
    }
    if (m_inactive_date_isSet) {
        obj.insert(QString("InactiveDate"), ::OpenAPI::toJsonValue(m_inactive_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAICertificateUsageType OAIImportCertificateRequest::getUsage() const {
    return m_usage;
}
void OAIImportCertificateRequest::setUsage(const OAICertificateUsageType &usage) {
    m_usage = usage;
    m_usage_isSet = true;
}

bool OAIImportCertificateRequest::is_usage_Set() const{
    return m_usage_isSet;
}

bool OAIImportCertificateRequest::is_usage_Valid() const{
    return m_usage_isValid;
}

QString OAIImportCertificateRequest::getCertificate() const {
    return m_certificate;
}
void OAIImportCertificateRequest::setCertificate(const QString &certificate) {
    m_certificate = certificate;
    m_certificate_isSet = true;
}

bool OAIImportCertificateRequest::is_certificate_Set() const{
    return m_certificate_isSet;
}

bool OAIImportCertificateRequest::is_certificate_Valid() const{
    return m_certificate_isValid;
}

QString OAIImportCertificateRequest::getCertificateChain() const {
    return m_certificate_chain;
}
void OAIImportCertificateRequest::setCertificateChain(const QString &certificate_chain) {
    m_certificate_chain = certificate_chain;
    m_certificate_chain_isSet = true;
}

bool OAIImportCertificateRequest::is_certificate_chain_Set() const{
    return m_certificate_chain_isSet;
}

bool OAIImportCertificateRequest::is_certificate_chain_Valid() const{
    return m_certificate_chain_isValid;
}

QString OAIImportCertificateRequest::getPrivateKey() const {
    return m_private_key;
}
void OAIImportCertificateRequest::setPrivateKey(const QString &private_key) {
    m_private_key = private_key;
    m_private_key_isSet = true;
}

bool OAIImportCertificateRequest::is_private_key_Set() const{
    return m_private_key_isSet;
}

bool OAIImportCertificateRequest::is_private_key_Valid() const{
    return m_private_key_isValid;
}

QDateTime OAIImportCertificateRequest::getActiveDate() const {
    return m_active_date;
}
void OAIImportCertificateRequest::setActiveDate(const QDateTime &active_date) {
    m_active_date = active_date;
    m_active_date_isSet = true;
}

bool OAIImportCertificateRequest::is_active_date_Set() const{
    return m_active_date_isSet;
}

bool OAIImportCertificateRequest::is_active_date_Valid() const{
    return m_active_date_isValid;
}

QDateTime OAIImportCertificateRequest::getInactiveDate() const {
    return m_inactive_date;
}
void OAIImportCertificateRequest::setInactiveDate(const QDateTime &inactive_date) {
    m_inactive_date = inactive_date;
    m_inactive_date_isSet = true;
}

bool OAIImportCertificateRequest::is_inactive_date_Set() const{
    return m_inactive_date_isSet;
}

bool OAIImportCertificateRequest::is_inactive_date_Valid() const{
    return m_inactive_date_isValid;
}

QString OAIImportCertificateRequest::getDescription() const {
    return m_description;
}
void OAIImportCertificateRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIImportCertificateRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIImportCertificateRequest::is_description_Valid() const{
    return m_description_isValid;
}

QList OAIImportCertificateRequest::getTags() const {
    return m_tags;
}
void OAIImportCertificateRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIImportCertificateRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIImportCertificateRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIImportCertificateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_chain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inactive_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportCertificateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_usage_isValid && m_certificate_isValid && true;
}

} // namespace OpenAPI
