/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeSecurityPolicyResponse_SecurityPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeSecurityPolicyResponse_SecurityPolicy::OAIDescribeSecurityPolicyResponse_SecurityPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeSecurityPolicyResponse_SecurityPolicy::OAIDescribeSecurityPolicyResponse_SecurityPolicy() {
    this->initializeModel();
}

OAIDescribeSecurityPolicyResponse_SecurityPolicy::~OAIDescribeSecurityPolicyResponse_SecurityPolicy() {}

void OAIDescribeSecurityPolicyResponse_SecurityPolicy::initializeModel() {

    m_fips_isSet = false;
    m_fips_isValid = false;

    m_security_policy_name_isSet = false;
    m_security_policy_name_isValid = false;

    m_ssh_ciphers_isSet = false;
    m_ssh_ciphers_isValid = false;

    m_ssh_kexs_isSet = false;
    m_ssh_kexs_isValid = false;

    m_ssh_macs_isSet = false;
    m_ssh_macs_isValid = false;

    m_tls_ciphers_isSet = false;
    m_tls_ciphers_isValid = false;
}

void OAIDescribeSecurityPolicyResponse_SecurityPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeSecurityPolicyResponse_SecurityPolicy::fromJsonObject(QJsonObject json) {

    m_fips_isValid = ::OpenAPI::fromJsonValue(m_fips, json[QString("Fips")]);
    m_fips_isSet = !json[QString("Fips")].isNull() && m_fips_isValid;

    m_security_policy_name_isValid = ::OpenAPI::fromJsonValue(m_security_policy_name, json[QString("SecurityPolicyName")]);
    m_security_policy_name_isSet = !json[QString("SecurityPolicyName")].isNull() && m_security_policy_name_isValid;

    m_ssh_ciphers_isValid = ::OpenAPI::fromJsonValue(m_ssh_ciphers, json[QString("SshCiphers")]);
    m_ssh_ciphers_isSet = !json[QString("SshCiphers")].isNull() && m_ssh_ciphers_isValid;

    m_ssh_kexs_isValid = ::OpenAPI::fromJsonValue(m_ssh_kexs, json[QString("SshKexs")]);
    m_ssh_kexs_isSet = !json[QString("SshKexs")].isNull() && m_ssh_kexs_isValid;

    m_ssh_macs_isValid = ::OpenAPI::fromJsonValue(m_ssh_macs, json[QString("SshMacs")]);
    m_ssh_macs_isSet = !json[QString("SshMacs")].isNull() && m_ssh_macs_isValid;

    m_tls_ciphers_isValid = ::OpenAPI::fromJsonValue(m_tls_ciphers, json[QString("TlsCiphers")]);
    m_tls_ciphers_isSet = !json[QString("TlsCiphers")].isNull() && m_tls_ciphers_isValid;
}

QString OAIDescribeSecurityPolicyResponse_SecurityPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeSecurityPolicyResponse_SecurityPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_fips_isSet) {
        obj.insert(QString("Fips"), ::OpenAPI::toJsonValue(m_fips));
    }
    if (m_security_policy_name_isSet) {
        obj.insert(QString("SecurityPolicyName"), ::OpenAPI::toJsonValue(m_security_policy_name));
    }
    if (m_ssh_ciphers.isSet()) {
        obj.insert(QString("SshCiphers"), ::OpenAPI::toJsonValue(m_ssh_ciphers));
    }
    if (m_ssh_kexs.isSet()) {
        obj.insert(QString("SshKexs"), ::OpenAPI::toJsonValue(m_ssh_kexs));
    }
    if (m_ssh_macs.isSet()) {
        obj.insert(QString("SshMacs"), ::OpenAPI::toJsonValue(m_ssh_macs));
    }
    if (m_tls_ciphers.isSet()) {
        obj.insert(QString("TlsCiphers"), ::OpenAPI::toJsonValue(m_tls_ciphers));
    }
    return obj;
}

bool OAIDescribeSecurityPolicyResponse_SecurityPolicy::getFips() const {
    return m_fips;
}
void OAIDescribeSecurityPolicyResponse_SecurityPolicy::setFips(const bool &fips) {
    m_fips = fips;
    m_fips_isSet = true;
}

bool OAIDescribeSecurityPolicyResponse_SecurityPolicy::is_fips_Set() const{
    return m_fips_isSet;
}

bool OAIDescribeSecurityPolicyResponse_SecurityPolicy::is_fips_Valid() const{
    return m_fips_isValid;
}

QString OAIDescribeSecurityPolicyResponse_SecurityPolicy::getSecurityPolicyName() const {
    return m_security_policy_name;
}
void OAIDescribeSecurityPolicyResponse_SecurityPolicy::setSecurityPolicyName(const QString &security_policy_name) {
    m_security_policy_name = security_policy_name;
    m_security_policy_name_isSet = true;
}

bool OAIDescribeSecurityPolicyResponse_SecurityPolicy::is_security_policy_name_Set() const{
    return m_security_policy_name_isSet;
}

bool OAIDescribeSecurityPolicyResponse_SecurityPolicy::is_security_policy_name_Valid() const{
    return m_security_policy_name_isValid;
}

QList OAIDescribeSecurityPolicyResponse_SecurityPolicy::getSshCiphers() const {
    return m_ssh_ciphers;
}
void OAIDescribeSecurityPolicyResponse_SecurityPolicy::setSshCiphers(const QList &ssh_ciphers) {
    m_ssh_ciphers = ssh_ciphers;
    m_ssh_ciphers_isSet = true;
}

bool OAIDescribeSecurityPolicyResponse_SecurityPolicy::is_ssh_ciphers_Set() const{
    return m_ssh_ciphers_isSet;
}

bool OAIDescribeSecurityPolicyResponse_SecurityPolicy::is_ssh_ciphers_Valid() const{
    return m_ssh_ciphers_isValid;
}

QList OAIDescribeSecurityPolicyResponse_SecurityPolicy::getSshKexs() const {
    return m_ssh_kexs;
}
void OAIDescribeSecurityPolicyResponse_SecurityPolicy::setSshKexs(const QList &ssh_kexs) {
    m_ssh_kexs = ssh_kexs;
    m_ssh_kexs_isSet = true;
}

bool OAIDescribeSecurityPolicyResponse_SecurityPolicy::is_ssh_kexs_Set() const{
    return m_ssh_kexs_isSet;
}

bool OAIDescribeSecurityPolicyResponse_SecurityPolicy::is_ssh_kexs_Valid() const{
    return m_ssh_kexs_isValid;
}

QList OAIDescribeSecurityPolicyResponse_SecurityPolicy::getSshMacs() const {
    return m_ssh_macs;
}
void OAIDescribeSecurityPolicyResponse_SecurityPolicy::setSshMacs(const QList &ssh_macs) {
    m_ssh_macs = ssh_macs;
    m_ssh_macs_isSet = true;
}

bool OAIDescribeSecurityPolicyResponse_SecurityPolicy::is_ssh_macs_Set() const{
    return m_ssh_macs_isSet;
}

bool OAIDescribeSecurityPolicyResponse_SecurityPolicy::is_ssh_macs_Valid() const{
    return m_ssh_macs_isValid;
}

QList OAIDescribeSecurityPolicyResponse_SecurityPolicy::getTlsCiphers() const {
    return m_tls_ciphers;
}
void OAIDescribeSecurityPolicyResponse_SecurityPolicy::setTlsCiphers(const QList &tls_ciphers) {
    m_tls_ciphers = tls_ciphers;
    m_tls_ciphers_isSet = true;
}

bool OAIDescribeSecurityPolicyResponse_SecurityPolicy::is_tls_ciphers_Set() const{
    return m_tls_ciphers_isSet;
}

bool OAIDescribeSecurityPolicyResponse_SecurityPolicy::is_tls_ciphers_Valid() const{
    return m_tls_ciphers_isValid;
}

bool OAIDescribeSecurityPolicyResponse_SecurityPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fips_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_policy_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssh_ciphers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssh_kexs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssh_macs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tls_ciphers.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeSecurityPolicyResponse_SecurityPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_security_policy_name_isValid && true;
}

} // namespace OpenAPI
