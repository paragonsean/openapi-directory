/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListedUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListedUser::OAIListedUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListedUser::OAIListedUser() {
    this->initializeModel();
}

OAIListedUser::~OAIListedUser() {}

void OAIListedUser::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_home_directory_isSet = false;
    m_home_directory_isValid = false;

    m_home_directory_type_isSet = false;
    m_home_directory_type_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_ssh_public_key_count_isSet = false;
    m_ssh_public_key_count_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;
}

void OAIListedUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListedUser::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_home_directory_isValid = ::OpenAPI::fromJsonValue(m_home_directory, json[QString("HomeDirectory")]);
    m_home_directory_isSet = !json[QString("HomeDirectory")].isNull() && m_home_directory_isValid;

    m_home_directory_type_isValid = ::OpenAPI::fromJsonValue(m_home_directory_type, json[QString("HomeDirectoryType")]);
    m_home_directory_type_isSet = !json[QString("HomeDirectoryType")].isNull() && m_home_directory_type_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("Role")]);
    m_role_isSet = !json[QString("Role")].isNull() && m_role_isValid;

    m_ssh_public_key_count_isValid = ::OpenAPI::fromJsonValue(m_ssh_public_key_count, json[QString("SshPublicKeyCount")]);
    m_ssh_public_key_count_isSet = !json[QString("SshPublicKeyCount")].isNull() && m_ssh_public_key_count_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("UserName")]);
    m_user_name_isSet = !json[QString("UserName")].isNull() && m_user_name_isValid;
}

QString OAIListedUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListedUser::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_home_directory_isSet) {
        obj.insert(QString("HomeDirectory"), ::OpenAPI::toJsonValue(m_home_directory));
    }
    if (m_home_directory_type.isSet()) {
        obj.insert(QString("HomeDirectoryType"), ::OpenAPI::toJsonValue(m_home_directory_type));
    }
    if (m_role_isSet) {
        obj.insert(QString("Role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_ssh_public_key_count_isSet) {
        obj.insert(QString("SshPublicKeyCount"), ::OpenAPI::toJsonValue(m_ssh_public_key_count));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("UserName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    return obj;
}

QString OAIListedUser::getArn() const {
    return m_arn;
}
void OAIListedUser::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIListedUser::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIListedUser::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIListedUser::getHomeDirectory() const {
    return m_home_directory;
}
void OAIListedUser::setHomeDirectory(const QString &home_directory) {
    m_home_directory = home_directory;
    m_home_directory_isSet = true;
}

bool OAIListedUser::is_home_directory_Set() const{
    return m_home_directory_isSet;
}

bool OAIListedUser::is_home_directory_Valid() const{
    return m_home_directory_isValid;
}

OAIHomeDirectoryType OAIListedUser::getHomeDirectoryType() const {
    return m_home_directory_type;
}
void OAIListedUser::setHomeDirectoryType(const OAIHomeDirectoryType &home_directory_type) {
    m_home_directory_type = home_directory_type;
    m_home_directory_type_isSet = true;
}

bool OAIListedUser::is_home_directory_type_Set() const{
    return m_home_directory_type_isSet;
}

bool OAIListedUser::is_home_directory_type_Valid() const{
    return m_home_directory_type_isValid;
}

QString OAIListedUser::getRole() const {
    return m_role;
}
void OAIListedUser::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIListedUser::is_role_Set() const{
    return m_role_isSet;
}

bool OAIListedUser::is_role_Valid() const{
    return m_role_isValid;
}

qint32 OAIListedUser::getSshPublicKeyCount() const {
    return m_ssh_public_key_count;
}
void OAIListedUser::setSshPublicKeyCount(const qint32 &ssh_public_key_count) {
    m_ssh_public_key_count = ssh_public_key_count;
    m_ssh_public_key_count_isSet = true;
}

bool OAIListedUser::is_ssh_public_key_count_Set() const{
    return m_ssh_public_key_count_isSet;
}

bool OAIListedUser::is_ssh_public_key_count_Valid() const{
    return m_ssh_public_key_count_isValid;
}

QString OAIListedUser::getUserName() const {
    return m_user_name;
}
void OAIListedUser::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIListedUser::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIListedUser::is_user_name_Valid() const{
    return m_user_name_isValid;
}

bool OAIListedUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_directory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_directory_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssh_public_key_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListedUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && true;
}

} // namespace OpenAPI
