/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIListedServer.h
 *
 * Returns properties of a file transfer protocol-enabled server that was specified.
 */

#ifndef OAIListedServer_H
#define OAIListedServer_H

#include <QJsonObject>

#include "OAIDomain.h"
#include "OAIEndpointType.h"
#include "OAIIdentityProviderType.h"
#include "OAIState.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIListedServer : public OAIObject {
public:
    OAIListedServer();
    OAIListedServer(QString json);
    ~OAIListedServer() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    OAIDomain getDomain() const;
    void setDomain(const OAIDomain &domain);
    bool is_domain_Set() const;
    bool is_domain_Valid() const;

    OAIIdentityProviderType getIdentityProviderType() const;
    void setIdentityProviderType(const OAIIdentityProviderType &identity_provider_type);
    bool is_identity_provider_type_Set() const;
    bool is_identity_provider_type_Valid() const;

    OAIEndpointType getEndpointType() const;
    void setEndpointType(const OAIEndpointType &endpoint_type);
    bool is_endpoint_type_Set() const;
    bool is_endpoint_type_Valid() const;

    QString getLoggingRole() const;
    void setLoggingRole(const QString &logging_role);
    bool is_logging_role_Set() const;
    bool is_logging_role_Valid() const;

    QString getServerId() const;
    void setServerId(const QString &server_id);
    bool is_server_id_Set() const;
    bool is_server_id_Valid() const;

    OAIState getState() const;
    void setState(const OAIState &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    qint32 getUserCount() const;
    void setUserCount(const qint32 &user_count);
    bool is_user_count_Set() const;
    bool is_user_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    OAIDomain m_domain;
    bool m_domain_isSet;
    bool m_domain_isValid;

    OAIIdentityProviderType m_identity_provider_type;
    bool m_identity_provider_type_isSet;
    bool m_identity_provider_type_isValid;

    OAIEndpointType m_endpoint_type;
    bool m_endpoint_type_isSet;
    bool m_endpoint_type_isValid;

    QString m_logging_role;
    bool m_logging_role_isSet;
    bool m_logging_role_isValid;

    QString m_server_id;
    bool m_server_id_isSet;
    bool m_server_id_isValid;

    OAIState m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    qint32 m_user_count;
    bool m_user_count_isSet;
    bool m_user_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIListedServer)

#endif // OAIListedServer_H
