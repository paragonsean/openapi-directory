/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflowStep_CopyStepDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflowStep_CopyStepDetails::OAIWorkflowStep_CopyStepDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflowStep_CopyStepDetails::OAIWorkflowStep_CopyStepDetails() {
    this->initializeModel();
}

OAIWorkflowStep_CopyStepDetails::~OAIWorkflowStep_CopyStepDetails() {}

void OAIWorkflowStep_CopyStepDetails::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_destination_file_location_isSet = false;
    m_destination_file_location_isValid = false;

    m_overwrite_existing_isSet = false;
    m_overwrite_existing_isValid = false;

    m_source_file_location_isSet = false;
    m_source_file_location_isValid = false;
}

void OAIWorkflowStep_CopyStepDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflowStep_CopyStepDetails::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_destination_file_location_isValid = ::OpenAPI::fromJsonValue(m_destination_file_location, json[QString("DestinationFileLocation")]);
    m_destination_file_location_isSet = !json[QString("DestinationFileLocation")].isNull() && m_destination_file_location_isValid;

    m_overwrite_existing_isValid = ::OpenAPI::fromJsonValue(m_overwrite_existing, json[QString("OverwriteExisting")]);
    m_overwrite_existing_isSet = !json[QString("OverwriteExisting")].isNull() && m_overwrite_existing_isValid;

    m_source_file_location_isValid = ::OpenAPI::fromJsonValue(m_source_file_location, json[QString("SourceFileLocation")]);
    m_source_file_location_isSet = !json[QString("SourceFileLocation")].isNull() && m_source_file_location_isValid;
}

QString OAIWorkflowStep_CopyStepDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflowStep_CopyStepDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_destination_file_location.isSet()) {
        obj.insert(QString("DestinationFileLocation"), ::OpenAPI::toJsonValue(m_destination_file_location));
    }
    if (m_overwrite_existing.isSet()) {
        obj.insert(QString("OverwriteExisting"), ::OpenAPI::toJsonValue(m_overwrite_existing));
    }
    if (m_source_file_location_isSet) {
        obj.insert(QString("SourceFileLocation"), ::OpenAPI::toJsonValue(m_source_file_location));
    }
    return obj;
}

QString OAIWorkflowStep_CopyStepDetails::getName() const {
    return m_name;
}
void OAIWorkflowStep_CopyStepDetails::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWorkflowStep_CopyStepDetails::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWorkflowStep_CopyStepDetails::is_name_Valid() const{
    return m_name_isValid;
}

OAICopyStepDetails_DestinationFileLocation OAIWorkflowStep_CopyStepDetails::getDestinationFileLocation() const {
    return m_destination_file_location;
}
void OAIWorkflowStep_CopyStepDetails::setDestinationFileLocation(const OAICopyStepDetails_DestinationFileLocation &destination_file_location) {
    m_destination_file_location = destination_file_location;
    m_destination_file_location_isSet = true;
}

bool OAIWorkflowStep_CopyStepDetails::is_destination_file_location_Set() const{
    return m_destination_file_location_isSet;
}

bool OAIWorkflowStep_CopyStepDetails::is_destination_file_location_Valid() const{
    return m_destination_file_location_isValid;
}

OAIOverwriteExisting OAIWorkflowStep_CopyStepDetails::getOverwriteExisting() const {
    return m_overwrite_existing;
}
void OAIWorkflowStep_CopyStepDetails::setOverwriteExisting(const OAIOverwriteExisting &overwrite_existing) {
    m_overwrite_existing = overwrite_existing;
    m_overwrite_existing_isSet = true;
}

bool OAIWorkflowStep_CopyStepDetails::is_overwrite_existing_Set() const{
    return m_overwrite_existing_isSet;
}

bool OAIWorkflowStep_CopyStepDetails::is_overwrite_existing_Valid() const{
    return m_overwrite_existing_isValid;
}

QString OAIWorkflowStep_CopyStepDetails::getSourceFileLocation() const {
    return m_source_file_location;
}
void OAIWorkflowStep_CopyStepDetails::setSourceFileLocation(const QString &source_file_location) {
    m_source_file_location = source_file_location;
    m_source_file_location_isSet = true;
}

bool OAIWorkflowStep_CopyStepDetails::is_source_file_location_Set() const{
    return m_source_file_location_isSet;
}

bool OAIWorkflowStep_CopyStepDetails::is_source_file_location_Valid() const{
    return m_source_file_location_isValid;
}

bool OAIWorkflowStep_CopyStepDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_file_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_overwrite_existing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_file_location_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflowStep_CopyStepDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
