/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribedCertificate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribedCertificate::OAIDescribedCertificate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribedCertificate::OAIDescribedCertificate() {
    this->initializeModel();
}

OAIDescribedCertificate::~OAIDescribedCertificate() {}

void OAIDescribedCertificate::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_certificate_id_isSet = false;
    m_certificate_id_isValid = false;

    m_usage_isSet = false;
    m_usage_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_certificate_isSet = false;
    m_certificate_isValid = false;

    m_certificate_chain_isSet = false;
    m_certificate_chain_isValid = false;

    m_active_date_isSet = false;
    m_active_date_isValid = false;

    m_inactive_date_isSet = false;
    m_inactive_date_isValid = false;

    m_serial_isSet = false;
    m_serial_isValid = false;

    m_not_before_date_isSet = false;
    m_not_before_date_isValid = false;

    m_not_after_date_isSet = false;
    m_not_after_date_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIDescribedCertificate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribedCertificate::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_certificate_id_isValid = ::OpenAPI::fromJsonValue(m_certificate_id, json[QString("CertificateId")]);
    m_certificate_id_isSet = !json[QString("CertificateId")].isNull() && m_certificate_id_isValid;

    m_usage_isValid = ::OpenAPI::fromJsonValue(m_usage, json[QString("Usage")]);
    m_usage_isSet = !json[QString("Usage")].isNull() && m_usage_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_certificate_isValid = ::OpenAPI::fromJsonValue(m_certificate, json[QString("Certificate")]);
    m_certificate_isSet = !json[QString("Certificate")].isNull() && m_certificate_isValid;

    m_certificate_chain_isValid = ::OpenAPI::fromJsonValue(m_certificate_chain, json[QString("CertificateChain")]);
    m_certificate_chain_isSet = !json[QString("CertificateChain")].isNull() && m_certificate_chain_isValid;

    m_active_date_isValid = ::OpenAPI::fromJsonValue(m_active_date, json[QString("ActiveDate")]);
    m_active_date_isSet = !json[QString("ActiveDate")].isNull() && m_active_date_isValid;

    m_inactive_date_isValid = ::OpenAPI::fromJsonValue(m_inactive_date, json[QString("InactiveDate")]);
    m_inactive_date_isSet = !json[QString("InactiveDate")].isNull() && m_inactive_date_isValid;

    m_serial_isValid = ::OpenAPI::fromJsonValue(m_serial, json[QString("Serial")]);
    m_serial_isSet = !json[QString("Serial")].isNull() && m_serial_isValid;

    m_not_before_date_isValid = ::OpenAPI::fromJsonValue(m_not_before_date, json[QString("NotBeforeDate")]);
    m_not_before_date_isSet = !json[QString("NotBeforeDate")].isNull() && m_not_before_date_isValid;

    m_not_after_date_isValid = ::OpenAPI::fromJsonValue(m_not_after_date, json[QString("NotAfterDate")]);
    m_not_after_date_isSet = !json[QString("NotAfterDate")].isNull() && m_not_after_date_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIDescribedCertificate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribedCertificate::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_certificate_id_isSet) {
        obj.insert(QString("CertificateId"), ::OpenAPI::toJsonValue(m_certificate_id));
    }
    if (m_usage.isSet()) {
        obj.insert(QString("Usage"), ::OpenAPI::toJsonValue(m_usage));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_certificate_isSet) {
        obj.insert(QString("Certificate"), ::OpenAPI::toJsonValue(m_certificate));
    }
    if (m_certificate_chain_isSet) {
        obj.insert(QString("CertificateChain"), ::OpenAPI::toJsonValue(m_certificate_chain));
    }
    if (m_active_date_isSet) {
        obj.insert(QString("ActiveDate"), ::OpenAPI::toJsonValue(m_active_date));
    }
    if (m_inactive_date_isSet) {
        obj.insert(QString("InactiveDate"), ::OpenAPI::toJsonValue(m_inactive_date));
    }
    if (m_serial_isSet) {
        obj.insert(QString("Serial"), ::OpenAPI::toJsonValue(m_serial));
    }
    if (m_not_before_date_isSet) {
        obj.insert(QString("NotBeforeDate"), ::OpenAPI::toJsonValue(m_not_before_date));
    }
    if (m_not_after_date_isSet) {
        obj.insert(QString("NotAfterDate"), ::OpenAPI::toJsonValue(m_not_after_date));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIDescribedCertificate::getArn() const {
    return m_arn;
}
void OAIDescribedCertificate::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDescribedCertificate::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDescribedCertificate::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDescribedCertificate::getCertificateId() const {
    return m_certificate_id;
}
void OAIDescribedCertificate::setCertificateId(const QString &certificate_id) {
    m_certificate_id = certificate_id;
    m_certificate_id_isSet = true;
}

bool OAIDescribedCertificate::is_certificate_id_Set() const{
    return m_certificate_id_isSet;
}

bool OAIDescribedCertificate::is_certificate_id_Valid() const{
    return m_certificate_id_isValid;
}

OAICertificateUsageType OAIDescribedCertificate::getUsage() const {
    return m_usage;
}
void OAIDescribedCertificate::setUsage(const OAICertificateUsageType &usage) {
    m_usage = usage;
    m_usage_isSet = true;
}

bool OAIDescribedCertificate::is_usage_Set() const{
    return m_usage_isSet;
}

bool OAIDescribedCertificate::is_usage_Valid() const{
    return m_usage_isValid;
}

OAICertificateStatusType OAIDescribedCertificate::getStatus() const {
    return m_status;
}
void OAIDescribedCertificate::setStatus(const OAICertificateStatusType &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribedCertificate::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribedCertificate::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDescribedCertificate::getCertificate() const {
    return m_certificate;
}
void OAIDescribedCertificate::setCertificate(const QString &certificate) {
    m_certificate = certificate;
    m_certificate_isSet = true;
}

bool OAIDescribedCertificate::is_certificate_Set() const{
    return m_certificate_isSet;
}

bool OAIDescribedCertificate::is_certificate_Valid() const{
    return m_certificate_isValid;
}

QString OAIDescribedCertificate::getCertificateChain() const {
    return m_certificate_chain;
}
void OAIDescribedCertificate::setCertificateChain(const QString &certificate_chain) {
    m_certificate_chain = certificate_chain;
    m_certificate_chain_isSet = true;
}

bool OAIDescribedCertificate::is_certificate_chain_Set() const{
    return m_certificate_chain_isSet;
}

bool OAIDescribedCertificate::is_certificate_chain_Valid() const{
    return m_certificate_chain_isValid;
}

QDateTime OAIDescribedCertificate::getActiveDate() const {
    return m_active_date;
}
void OAIDescribedCertificate::setActiveDate(const QDateTime &active_date) {
    m_active_date = active_date;
    m_active_date_isSet = true;
}

bool OAIDescribedCertificate::is_active_date_Set() const{
    return m_active_date_isSet;
}

bool OAIDescribedCertificate::is_active_date_Valid() const{
    return m_active_date_isValid;
}

QDateTime OAIDescribedCertificate::getInactiveDate() const {
    return m_inactive_date;
}
void OAIDescribedCertificate::setInactiveDate(const QDateTime &inactive_date) {
    m_inactive_date = inactive_date;
    m_inactive_date_isSet = true;
}

bool OAIDescribedCertificate::is_inactive_date_Set() const{
    return m_inactive_date_isSet;
}

bool OAIDescribedCertificate::is_inactive_date_Valid() const{
    return m_inactive_date_isValid;
}

QString OAIDescribedCertificate::getSerial() const {
    return m_serial;
}
void OAIDescribedCertificate::setSerial(const QString &serial) {
    m_serial = serial;
    m_serial_isSet = true;
}

bool OAIDescribedCertificate::is_serial_Set() const{
    return m_serial_isSet;
}

bool OAIDescribedCertificate::is_serial_Valid() const{
    return m_serial_isValid;
}

QDateTime OAIDescribedCertificate::getNotBeforeDate() const {
    return m_not_before_date;
}
void OAIDescribedCertificate::setNotBeforeDate(const QDateTime &not_before_date) {
    m_not_before_date = not_before_date;
    m_not_before_date_isSet = true;
}

bool OAIDescribedCertificate::is_not_before_date_Set() const{
    return m_not_before_date_isSet;
}

bool OAIDescribedCertificate::is_not_before_date_Valid() const{
    return m_not_before_date_isValid;
}

QDateTime OAIDescribedCertificate::getNotAfterDate() const {
    return m_not_after_date;
}
void OAIDescribedCertificate::setNotAfterDate(const QDateTime &not_after_date) {
    m_not_after_date = not_after_date;
    m_not_after_date_isSet = true;
}

bool OAIDescribedCertificate::is_not_after_date_Set() const{
    return m_not_after_date_isSet;
}

bool OAIDescribedCertificate::is_not_after_date_Valid() const{
    return m_not_after_date_isValid;
}

OAICertificateType OAIDescribedCertificate::getType() const {
    return m_type;
}
void OAIDescribedCertificate::setType(const OAICertificateType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDescribedCertificate::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDescribedCertificate::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIDescribedCertificate::getDescription() const {
    return m_description;
}
void OAIDescribedCertificate::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDescribedCertificate::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDescribedCertificate::is_description_Valid() const{
    return m_description_isValid;
}

QList OAIDescribedCertificate::getTags() const {
    return m_tags;
}
void OAIDescribedCertificate::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDescribedCertificate::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDescribedCertificate::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIDescribedCertificate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_chain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inactive_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_before_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_after_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribedCertificate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && true;
}

} // namespace OpenAPI
