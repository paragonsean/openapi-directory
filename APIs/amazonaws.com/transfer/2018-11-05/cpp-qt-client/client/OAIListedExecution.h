/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIListedExecution.h
 *
 * Returns properties of the execution that is specified.
 */

#ifndef OAIListedExecution_H
#define OAIListedExecution_H

#include <QJsonObject>

#include "OAIDescribedExecution_InitialFileLocation.h"
#include "OAIDescribedExecution_ServiceMetadata.h"
#include "OAIExecutionStatus.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDescribedExecution_InitialFileLocation;
class OAIDescribedExecution_ServiceMetadata;

class OAIListedExecution : public OAIObject {
public:
    OAIListedExecution();
    OAIListedExecution(QString json);
    ~OAIListedExecution() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getExecutionId() const;
    void setExecutionId(const QString &execution_id);
    bool is_execution_id_Set() const;
    bool is_execution_id_Valid() const;

    OAIDescribedExecution_InitialFileLocation getInitialFileLocation() const;
    void setInitialFileLocation(const OAIDescribedExecution_InitialFileLocation &initial_file_location);
    bool is_initial_file_location_Set() const;
    bool is_initial_file_location_Valid() const;

    OAIDescribedExecution_ServiceMetadata getServiceMetadata() const;
    void setServiceMetadata(const OAIDescribedExecution_ServiceMetadata &service_metadata);
    bool is_service_metadata_Set() const;
    bool is_service_metadata_Valid() const;

    OAIExecutionStatus getStatus() const;
    void setStatus(const OAIExecutionStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_execution_id;
    bool m_execution_id_isSet;
    bool m_execution_id_isValid;

    OAIDescribedExecution_InitialFileLocation m_initial_file_location;
    bool m_initial_file_location_isSet;
    bool m_initial_file_location_isValid;

    OAIDescribedExecution_ServiceMetadata m_service_metadata;
    bool m_service_metadata_isSet;
    bool m_service_metadata_isValid;

    OAIExecutionStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIListedExecution)

#endif // OAIListedExecution_H
