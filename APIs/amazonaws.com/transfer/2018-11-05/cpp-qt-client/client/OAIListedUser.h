/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIListedUser.h
 *
 * Returns properties of the user that you specify.
 */

#ifndef OAIListedUser_H
#define OAIListedUser_H

#include <QJsonObject>

#include "OAIHomeDirectoryType.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIListedUser : public OAIObject {
public:
    OAIListedUser();
    OAIListedUser(QString json);
    ~OAIListedUser() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QString getHomeDirectory() const;
    void setHomeDirectory(const QString &home_directory);
    bool is_home_directory_Set() const;
    bool is_home_directory_Valid() const;

    OAIHomeDirectoryType getHomeDirectoryType() const;
    void setHomeDirectoryType(const OAIHomeDirectoryType &home_directory_type);
    bool is_home_directory_type_Set() const;
    bool is_home_directory_type_Valid() const;

    QString getRole() const;
    void setRole(const QString &role);
    bool is_role_Set() const;
    bool is_role_Valid() const;

    qint32 getSshPublicKeyCount() const;
    void setSshPublicKeyCount(const qint32 &ssh_public_key_count);
    bool is_ssh_public_key_count_Set() const;
    bool is_ssh_public_key_count_Valid() const;

    QString getUserName() const;
    void setUserName(const QString &user_name);
    bool is_user_name_Set() const;
    bool is_user_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QString m_home_directory;
    bool m_home_directory_isSet;
    bool m_home_directory_isValid;

    OAIHomeDirectoryType m_home_directory_type;
    bool m_home_directory_type_isSet;
    bool m_home_directory_type_isValid;

    QString m_role;
    bool m_role_isSet;
    bool m_role_isValid;

    qint32 m_ssh_public_key_count;
    bool m_ssh_public_key_count_isSet;
    bool m_ssh_public_key_count_isValid;

    QString m_user_name;
    bool m_user_name_isSet;
    bool m_user_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIListedUser)

#endif // OAIListedUser_H
