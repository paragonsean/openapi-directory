/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProtocolDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProtocolDetails::OAIProtocolDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProtocolDetails::OAIProtocolDetails() {
    this->initializeModel();
}

OAIProtocolDetails::~OAIProtocolDetails() {}

void OAIProtocolDetails::initializeModel() {

    m_passive_ip_isSet = false;
    m_passive_ip_isValid = false;

    m_tls_session_resumption_mode_isSet = false;
    m_tls_session_resumption_mode_isValid = false;

    m_set_stat_option_isSet = false;
    m_set_stat_option_isValid = false;

    m_as2_transports_isSet = false;
    m_as2_transports_isValid = false;
}

void OAIProtocolDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProtocolDetails::fromJsonObject(QJsonObject json) {

    m_passive_ip_isValid = ::OpenAPI::fromJsonValue(m_passive_ip, json[QString("PassiveIp")]);
    m_passive_ip_isSet = !json[QString("PassiveIp")].isNull() && m_passive_ip_isValid;

    m_tls_session_resumption_mode_isValid = ::OpenAPI::fromJsonValue(m_tls_session_resumption_mode, json[QString("TlsSessionResumptionMode")]);
    m_tls_session_resumption_mode_isSet = !json[QString("TlsSessionResumptionMode")].isNull() && m_tls_session_resumption_mode_isValid;

    m_set_stat_option_isValid = ::OpenAPI::fromJsonValue(m_set_stat_option, json[QString("SetStatOption")]);
    m_set_stat_option_isSet = !json[QString("SetStatOption")].isNull() && m_set_stat_option_isValid;

    m_as2_transports_isValid = ::OpenAPI::fromJsonValue(m_as2_transports, json[QString("As2Transports")]);
    m_as2_transports_isSet = !json[QString("As2Transports")].isNull() && m_as2_transports_isValid;
}

QString OAIProtocolDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProtocolDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_passive_ip_isSet) {
        obj.insert(QString("PassiveIp"), ::OpenAPI::toJsonValue(m_passive_ip));
    }
    if (m_tls_session_resumption_mode.isSet()) {
        obj.insert(QString("TlsSessionResumptionMode"), ::OpenAPI::toJsonValue(m_tls_session_resumption_mode));
    }
    if (m_set_stat_option.isSet()) {
        obj.insert(QString("SetStatOption"), ::OpenAPI::toJsonValue(m_set_stat_option));
    }
    if (m_as2_transports.isSet()) {
        obj.insert(QString("As2Transports"), ::OpenAPI::toJsonValue(m_as2_transports));
    }
    return obj;
}

QString OAIProtocolDetails::getPassiveIp() const {
    return m_passive_ip;
}
void OAIProtocolDetails::setPassiveIp(const QString &passive_ip) {
    m_passive_ip = passive_ip;
    m_passive_ip_isSet = true;
}

bool OAIProtocolDetails::is_passive_ip_Set() const{
    return m_passive_ip_isSet;
}

bool OAIProtocolDetails::is_passive_ip_Valid() const{
    return m_passive_ip_isValid;
}

OAITlsSessionResumptionMode OAIProtocolDetails::getTlsSessionResumptionMode() const {
    return m_tls_session_resumption_mode;
}
void OAIProtocolDetails::setTlsSessionResumptionMode(const OAITlsSessionResumptionMode &tls_session_resumption_mode) {
    m_tls_session_resumption_mode = tls_session_resumption_mode;
    m_tls_session_resumption_mode_isSet = true;
}

bool OAIProtocolDetails::is_tls_session_resumption_mode_Set() const{
    return m_tls_session_resumption_mode_isSet;
}

bool OAIProtocolDetails::is_tls_session_resumption_mode_Valid() const{
    return m_tls_session_resumption_mode_isValid;
}

OAISetStatOption OAIProtocolDetails::getSetStatOption() const {
    return m_set_stat_option;
}
void OAIProtocolDetails::setSetStatOption(const OAISetStatOption &set_stat_option) {
    m_set_stat_option = set_stat_option;
    m_set_stat_option_isSet = true;
}

bool OAIProtocolDetails::is_set_stat_option_Set() const{
    return m_set_stat_option_isSet;
}

bool OAIProtocolDetails::is_set_stat_option_Valid() const{
    return m_set_stat_option_isValid;
}

QList OAIProtocolDetails::getAs2Transports() const {
    return m_as2_transports;
}
void OAIProtocolDetails::setAs2Transports(const QList &as2_transports) {
    m_as2_transports = as2_transports;
    m_as2_transports_isSet = true;
}

bool OAIProtocolDetails::is_as2_transports_Set() const{
    return m_as2_transports_isSet;
}

bool OAIProtocolDetails::is_as2_transports_Valid() const{
    return m_as2_transports_isValid;
}

bool OAIProtocolDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_passive_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tls_session_resumption_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_set_stat_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_as2_transports.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProtocolDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
