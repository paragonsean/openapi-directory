/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeUserResponse_User.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeUserResponse_User::OAIDescribeUserResponse_User(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeUserResponse_User::OAIDescribeUserResponse_User() {
    this->initializeModel();
}

OAIDescribeUserResponse_User::~OAIDescribeUserResponse_User() {}

void OAIDescribeUserResponse_User::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_home_directory_isSet = false;
    m_home_directory_isValid = false;

    m_home_directory_mappings_isSet = false;
    m_home_directory_mappings_isValid = false;

    m_home_directory_type_isSet = false;
    m_home_directory_type_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;

    m_posix_profile_isSet = false;
    m_posix_profile_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_ssh_public_keys_isSet = false;
    m_ssh_public_keys_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;
}

void OAIDescribeUserResponse_User::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeUserResponse_User::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_home_directory_isValid = ::OpenAPI::fromJsonValue(m_home_directory, json[QString("HomeDirectory")]);
    m_home_directory_isSet = !json[QString("HomeDirectory")].isNull() && m_home_directory_isValid;

    m_home_directory_mappings_isValid = ::OpenAPI::fromJsonValue(m_home_directory_mappings, json[QString("HomeDirectoryMappings")]);
    m_home_directory_mappings_isSet = !json[QString("HomeDirectoryMappings")].isNull() && m_home_directory_mappings_isValid;

    m_home_directory_type_isValid = ::OpenAPI::fromJsonValue(m_home_directory_type, json[QString("HomeDirectoryType")]);
    m_home_directory_type_isSet = !json[QString("HomeDirectoryType")].isNull() && m_home_directory_type_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("Policy")]);
    m_policy_isSet = !json[QString("Policy")].isNull() && m_policy_isValid;

    m_posix_profile_isValid = ::OpenAPI::fromJsonValue(m_posix_profile, json[QString("PosixProfile")]);
    m_posix_profile_isSet = !json[QString("PosixProfile")].isNull() && m_posix_profile_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("Role")]);
    m_role_isSet = !json[QString("Role")].isNull() && m_role_isValid;

    m_ssh_public_keys_isValid = ::OpenAPI::fromJsonValue(m_ssh_public_keys, json[QString("SshPublicKeys")]);
    m_ssh_public_keys_isSet = !json[QString("SshPublicKeys")].isNull() && m_ssh_public_keys_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("UserName")]);
    m_user_name_isSet = !json[QString("UserName")].isNull() && m_user_name_isValid;
}

QString OAIDescribeUserResponse_User::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeUserResponse_User::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_home_directory_isSet) {
        obj.insert(QString("HomeDirectory"), ::OpenAPI::toJsonValue(m_home_directory));
    }
    if (m_home_directory_mappings.isSet()) {
        obj.insert(QString("HomeDirectoryMappings"), ::OpenAPI::toJsonValue(m_home_directory_mappings));
    }
    if (m_home_directory_type.isSet()) {
        obj.insert(QString("HomeDirectoryType"), ::OpenAPI::toJsonValue(m_home_directory_type));
    }
    if (m_policy_isSet) {
        obj.insert(QString("Policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    if (m_posix_profile.isSet()) {
        obj.insert(QString("PosixProfile"), ::OpenAPI::toJsonValue(m_posix_profile));
    }
    if (m_role_isSet) {
        obj.insert(QString("Role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_ssh_public_keys.isSet()) {
        obj.insert(QString("SshPublicKeys"), ::OpenAPI::toJsonValue(m_ssh_public_keys));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("UserName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    return obj;
}

QString OAIDescribeUserResponse_User::getArn() const {
    return m_arn;
}
void OAIDescribeUserResponse_User::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDescribeUserResponse_User::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDescribeUserResponse_User::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDescribeUserResponse_User::getHomeDirectory() const {
    return m_home_directory;
}
void OAIDescribeUserResponse_User::setHomeDirectory(const QString &home_directory) {
    m_home_directory = home_directory;
    m_home_directory_isSet = true;
}

bool OAIDescribeUserResponse_User::is_home_directory_Set() const{
    return m_home_directory_isSet;
}

bool OAIDescribeUserResponse_User::is_home_directory_Valid() const{
    return m_home_directory_isValid;
}

QList OAIDescribeUserResponse_User::getHomeDirectoryMappings() const {
    return m_home_directory_mappings;
}
void OAIDescribeUserResponse_User::setHomeDirectoryMappings(const QList &home_directory_mappings) {
    m_home_directory_mappings = home_directory_mappings;
    m_home_directory_mappings_isSet = true;
}

bool OAIDescribeUserResponse_User::is_home_directory_mappings_Set() const{
    return m_home_directory_mappings_isSet;
}

bool OAIDescribeUserResponse_User::is_home_directory_mappings_Valid() const{
    return m_home_directory_mappings_isValid;
}

OAIHomeDirectoryType OAIDescribeUserResponse_User::getHomeDirectoryType() const {
    return m_home_directory_type;
}
void OAIDescribeUserResponse_User::setHomeDirectoryType(const OAIHomeDirectoryType &home_directory_type) {
    m_home_directory_type = home_directory_type;
    m_home_directory_type_isSet = true;
}

bool OAIDescribeUserResponse_User::is_home_directory_type_Set() const{
    return m_home_directory_type_isSet;
}

bool OAIDescribeUserResponse_User::is_home_directory_type_Valid() const{
    return m_home_directory_type_isValid;
}

QString OAIDescribeUserResponse_User::getPolicy() const {
    return m_policy;
}
void OAIDescribeUserResponse_User::setPolicy(const QString &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIDescribeUserResponse_User::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIDescribeUserResponse_User::is_policy_Valid() const{
    return m_policy_isValid;
}

OAIDescribedUser_PosixProfile OAIDescribeUserResponse_User::getPosixProfile() const {
    return m_posix_profile;
}
void OAIDescribeUserResponse_User::setPosixProfile(const OAIDescribedUser_PosixProfile &posix_profile) {
    m_posix_profile = posix_profile;
    m_posix_profile_isSet = true;
}

bool OAIDescribeUserResponse_User::is_posix_profile_Set() const{
    return m_posix_profile_isSet;
}

bool OAIDescribeUserResponse_User::is_posix_profile_Valid() const{
    return m_posix_profile_isValid;
}

QString OAIDescribeUserResponse_User::getRole() const {
    return m_role;
}
void OAIDescribeUserResponse_User::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIDescribeUserResponse_User::is_role_Set() const{
    return m_role_isSet;
}

bool OAIDescribeUserResponse_User::is_role_Valid() const{
    return m_role_isValid;
}

QList OAIDescribeUserResponse_User::getSshPublicKeys() const {
    return m_ssh_public_keys;
}
void OAIDescribeUserResponse_User::setSshPublicKeys(const QList &ssh_public_keys) {
    m_ssh_public_keys = ssh_public_keys;
    m_ssh_public_keys_isSet = true;
}

bool OAIDescribeUserResponse_User::is_ssh_public_keys_Set() const{
    return m_ssh_public_keys_isSet;
}

bool OAIDescribeUserResponse_User::is_ssh_public_keys_Valid() const{
    return m_ssh_public_keys_isValid;
}

QList OAIDescribeUserResponse_User::getTags() const {
    return m_tags;
}
void OAIDescribeUserResponse_User::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDescribeUserResponse_User::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDescribeUserResponse_User::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIDescribeUserResponse_User::getUserName() const {
    return m_user_name;
}
void OAIDescribeUserResponse_User::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIDescribeUserResponse_User::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIDescribeUserResponse_User::is_user_name_Valid() const{
    return m_user_name_isValid;
}

bool OAIDescribeUserResponse_User::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_directory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_directory_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_directory_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_posix_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssh_public_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeUserResponse_User::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && true;
}

} // namespace OpenAPI
