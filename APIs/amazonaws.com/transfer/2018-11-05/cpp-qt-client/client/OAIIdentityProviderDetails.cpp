/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentityProviderDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentityProviderDetails::OAIIdentityProviderDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentityProviderDetails::OAIIdentityProviderDetails() {
    this->initializeModel();
}

OAIIdentityProviderDetails::~OAIIdentityProviderDetails() {}

void OAIIdentityProviderDetails::initializeModel() {

    m_url_isSet = false;
    m_url_isValid = false;

    m_invocation_role_isSet = false;
    m_invocation_role_isValid = false;

    m_directory_id_isSet = false;
    m_directory_id_isValid = false;

    m_function_isSet = false;
    m_function_isValid = false;

    m_sftp_authentication_methods_isSet = false;
    m_sftp_authentication_methods_isValid = false;
}

void OAIIdentityProviderDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentityProviderDetails::fromJsonObject(QJsonObject json) {

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("Url")]);
    m_url_isSet = !json[QString("Url")].isNull() && m_url_isValid;

    m_invocation_role_isValid = ::OpenAPI::fromJsonValue(m_invocation_role, json[QString("InvocationRole")]);
    m_invocation_role_isSet = !json[QString("InvocationRole")].isNull() && m_invocation_role_isValid;

    m_directory_id_isValid = ::OpenAPI::fromJsonValue(m_directory_id, json[QString("DirectoryId")]);
    m_directory_id_isSet = !json[QString("DirectoryId")].isNull() && m_directory_id_isValid;

    m_function_isValid = ::OpenAPI::fromJsonValue(m_function, json[QString("Function")]);
    m_function_isSet = !json[QString("Function")].isNull() && m_function_isValid;

    m_sftp_authentication_methods_isValid = ::OpenAPI::fromJsonValue(m_sftp_authentication_methods, json[QString("SftpAuthenticationMethods")]);
    m_sftp_authentication_methods_isSet = !json[QString("SftpAuthenticationMethods")].isNull() && m_sftp_authentication_methods_isValid;
}

QString OAIIdentityProviderDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentityProviderDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_url_isSet) {
        obj.insert(QString("Url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_invocation_role_isSet) {
        obj.insert(QString("InvocationRole"), ::OpenAPI::toJsonValue(m_invocation_role));
    }
    if (m_directory_id_isSet) {
        obj.insert(QString("DirectoryId"), ::OpenAPI::toJsonValue(m_directory_id));
    }
    if (m_function_isSet) {
        obj.insert(QString("Function"), ::OpenAPI::toJsonValue(m_function));
    }
    if (m_sftp_authentication_methods.isSet()) {
        obj.insert(QString("SftpAuthenticationMethods"), ::OpenAPI::toJsonValue(m_sftp_authentication_methods));
    }
    return obj;
}

QString OAIIdentityProviderDetails::getUrl() const {
    return m_url;
}
void OAIIdentityProviderDetails::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIIdentityProviderDetails::is_url_Set() const{
    return m_url_isSet;
}

bool OAIIdentityProviderDetails::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIIdentityProviderDetails::getInvocationRole() const {
    return m_invocation_role;
}
void OAIIdentityProviderDetails::setInvocationRole(const QString &invocation_role) {
    m_invocation_role = invocation_role;
    m_invocation_role_isSet = true;
}

bool OAIIdentityProviderDetails::is_invocation_role_Set() const{
    return m_invocation_role_isSet;
}

bool OAIIdentityProviderDetails::is_invocation_role_Valid() const{
    return m_invocation_role_isValid;
}

QString OAIIdentityProviderDetails::getDirectoryId() const {
    return m_directory_id;
}
void OAIIdentityProviderDetails::setDirectoryId(const QString &directory_id) {
    m_directory_id = directory_id;
    m_directory_id_isSet = true;
}

bool OAIIdentityProviderDetails::is_directory_id_Set() const{
    return m_directory_id_isSet;
}

bool OAIIdentityProviderDetails::is_directory_id_Valid() const{
    return m_directory_id_isValid;
}

QString OAIIdentityProviderDetails::getFunction() const {
    return m_function;
}
void OAIIdentityProviderDetails::setFunction(const QString &function) {
    m_function = function;
    m_function_isSet = true;
}

bool OAIIdentityProviderDetails::is_function_Set() const{
    return m_function_isSet;
}

bool OAIIdentityProviderDetails::is_function_Valid() const{
    return m_function_isValid;
}

OAISftpAuthenticationMethods OAIIdentityProviderDetails::getSftpAuthenticationMethods() const {
    return m_sftp_authentication_methods;
}
void OAIIdentityProviderDetails::setSftpAuthenticationMethods(const OAISftpAuthenticationMethods &sftp_authentication_methods) {
    m_sftp_authentication_methods = sftp_authentication_methods;
    m_sftp_authentication_methods_isSet = true;
}

bool OAIIdentityProviderDetails::is_sftp_authentication_methods_Set() const{
    return m_sftp_authentication_methods_isSet;
}

bool OAIIdentityProviderDetails::is_sftp_authentication_methods_Valid() const{
    return m_sftp_authentication_methods_isValid;
}

bool OAIIdentityProviderDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invocation_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_directory_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sftp_authentication_methods.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentityProviderDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
