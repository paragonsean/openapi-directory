/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListedExecution.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListedExecution::OAIListedExecution(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListedExecution::OAIListedExecution() {
    this->initializeModel();
}

OAIListedExecution::~OAIListedExecution() {}

void OAIListedExecution::initializeModel() {

    m_execution_id_isSet = false;
    m_execution_id_isValid = false;

    m_initial_file_location_isSet = false;
    m_initial_file_location_isValid = false;

    m_service_metadata_isSet = false;
    m_service_metadata_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIListedExecution::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListedExecution::fromJsonObject(QJsonObject json) {

    m_execution_id_isValid = ::OpenAPI::fromJsonValue(m_execution_id, json[QString("ExecutionId")]);
    m_execution_id_isSet = !json[QString("ExecutionId")].isNull() && m_execution_id_isValid;

    m_initial_file_location_isValid = ::OpenAPI::fromJsonValue(m_initial_file_location, json[QString("InitialFileLocation")]);
    m_initial_file_location_isSet = !json[QString("InitialFileLocation")].isNull() && m_initial_file_location_isValid;

    m_service_metadata_isValid = ::OpenAPI::fromJsonValue(m_service_metadata, json[QString("ServiceMetadata")]);
    m_service_metadata_isSet = !json[QString("ServiceMetadata")].isNull() && m_service_metadata_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIListedExecution::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListedExecution::asJsonObject() const {
    QJsonObject obj;
    if (m_execution_id_isSet) {
        obj.insert(QString("ExecutionId"), ::OpenAPI::toJsonValue(m_execution_id));
    }
    if (m_initial_file_location.isSet()) {
        obj.insert(QString("InitialFileLocation"), ::OpenAPI::toJsonValue(m_initial_file_location));
    }
    if (m_service_metadata.isSet()) {
        obj.insert(QString("ServiceMetadata"), ::OpenAPI::toJsonValue(m_service_metadata));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIListedExecution::getExecutionId() const {
    return m_execution_id;
}
void OAIListedExecution::setExecutionId(const QString &execution_id) {
    m_execution_id = execution_id;
    m_execution_id_isSet = true;
}

bool OAIListedExecution::is_execution_id_Set() const{
    return m_execution_id_isSet;
}

bool OAIListedExecution::is_execution_id_Valid() const{
    return m_execution_id_isValid;
}

OAIDescribedExecution_InitialFileLocation OAIListedExecution::getInitialFileLocation() const {
    return m_initial_file_location;
}
void OAIListedExecution::setInitialFileLocation(const OAIDescribedExecution_InitialFileLocation &initial_file_location) {
    m_initial_file_location = initial_file_location;
    m_initial_file_location_isSet = true;
}

bool OAIListedExecution::is_initial_file_location_Set() const{
    return m_initial_file_location_isSet;
}

bool OAIListedExecution::is_initial_file_location_Valid() const{
    return m_initial_file_location_isValid;
}

OAIDescribedExecution_ServiceMetadata OAIListedExecution::getServiceMetadata() const {
    return m_service_metadata;
}
void OAIListedExecution::setServiceMetadata(const OAIDescribedExecution_ServiceMetadata &service_metadata) {
    m_service_metadata = service_metadata;
    m_service_metadata_isSet = true;
}

bool OAIListedExecution::is_service_metadata_Set() const{
    return m_service_metadata_isSet;
}

bool OAIListedExecution::is_service_metadata_Valid() const{
    return m_service_metadata_isValid;
}

OAIExecutionStatus OAIListedExecution::getStatus() const {
    return m_status;
}
void OAIListedExecution::setStatus(const OAIExecutionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIListedExecution::is_status_Set() const{
    return m_status_isSet;
}

bool OAIListedExecution::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIListedExecution::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_execution_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_file_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListedExecution::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
