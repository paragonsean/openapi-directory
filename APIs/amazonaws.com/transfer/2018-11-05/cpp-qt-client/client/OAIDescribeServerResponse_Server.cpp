/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeServerResponse_Server.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeServerResponse_Server::OAIDescribeServerResponse_Server(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeServerResponse_Server::OAIDescribeServerResponse_Server() {
    this->initializeModel();
}

OAIDescribeServerResponse_Server::~OAIDescribeServerResponse_Server() {}

void OAIDescribeServerResponse_Server::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_certificate_isSet = false;
    m_certificate_isValid = false;

    m_protocol_details_isSet = false;
    m_protocol_details_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_endpoint_details_isSet = false;
    m_endpoint_details_isValid = false;

    m_endpoint_type_isSet = false;
    m_endpoint_type_isValid = false;

    m_host_key_fingerprint_isSet = false;
    m_host_key_fingerprint_isValid = false;

    m_identity_provider_details_isSet = false;
    m_identity_provider_details_isValid = false;

    m_identity_provider_type_isSet = false;
    m_identity_provider_type_isValid = false;

    m_logging_role_isSet = false;
    m_logging_role_isValid = false;

    m_post_authentication_login_banner_isSet = false;
    m_post_authentication_login_banner_isValid = false;

    m_pre_authentication_login_banner_isSet = false;
    m_pre_authentication_login_banner_isValid = false;

    m_protocols_isSet = false;
    m_protocols_isValid = false;

    m_security_policy_name_isSet = false;
    m_security_policy_name_isValid = false;

    m_server_id_isSet = false;
    m_server_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_user_count_isSet = false;
    m_user_count_isValid = false;

    m_workflow_details_isSet = false;
    m_workflow_details_isValid = false;

    m_structured_log_destinations_isSet = false;
    m_structured_log_destinations_isValid = false;
}

void OAIDescribeServerResponse_Server::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeServerResponse_Server::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_certificate_isValid = ::OpenAPI::fromJsonValue(m_certificate, json[QString("Certificate")]);
    m_certificate_isSet = !json[QString("Certificate")].isNull() && m_certificate_isValid;

    m_protocol_details_isValid = ::OpenAPI::fromJsonValue(m_protocol_details, json[QString("ProtocolDetails")]);
    m_protocol_details_isSet = !json[QString("ProtocolDetails")].isNull() && m_protocol_details_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("Domain")]);
    m_domain_isSet = !json[QString("Domain")].isNull() && m_domain_isValid;

    m_endpoint_details_isValid = ::OpenAPI::fromJsonValue(m_endpoint_details, json[QString("EndpointDetails")]);
    m_endpoint_details_isSet = !json[QString("EndpointDetails")].isNull() && m_endpoint_details_isValid;

    m_endpoint_type_isValid = ::OpenAPI::fromJsonValue(m_endpoint_type, json[QString("EndpointType")]);
    m_endpoint_type_isSet = !json[QString("EndpointType")].isNull() && m_endpoint_type_isValid;

    m_host_key_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_host_key_fingerprint, json[QString("HostKeyFingerprint")]);
    m_host_key_fingerprint_isSet = !json[QString("HostKeyFingerprint")].isNull() && m_host_key_fingerprint_isValid;

    m_identity_provider_details_isValid = ::OpenAPI::fromJsonValue(m_identity_provider_details, json[QString("IdentityProviderDetails")]);
    m_identity_provider_details_isSet = !json[QString("IdentityProviderDetails")].isNull() && m_identity_provider_details_isValid;

    m_identity_provider_type_isValid = ::OpenAPI::fromJsonValue(m_identity_provider_type, json[QString("IdentityProviderType")]);
    m_identity_provider_type_isSet = !json[QString("IdentityProviderType")].isNull() && m_identity_provider_type_isValid;

    m_logging_role_isValid = ::OpenAPI::fromJsonValue(m_logging_role, json[QString("LoggingRole")]);
    m_logging_role_isSet = !json[QString("LoggingRole")].isNull() && m_logging_role_isValid;

    m_post_authentication_login_banner_isValid = ::OpenAPI::fromJsonValue(m_post_authentication_login_banner, json[QString("PostAuthenticationLoginBanner")]);
    m_post_authentication_login_banner_isSet = !json[QString("PostAuthenticationLoginBanner")].isNull() && m_post_authentication_login_banner_isValid;

    m_pre_authentication_login_banner_isValid = ::OpenAPI::fromJsonValue(m_pre_authentication_login_banner, json[QString("PreAuthenticationLoginBanner")]);
    m_pre_authentication_login_banner_isSet = !json[QString("PreAuthenticationLoginBanner")].isNull() && m_pre_authentication_login_banner_isValid;

    m_protocols_isValid = ::OpenAPI::fromJsonValue(m_protocols, json[QString("Protocols")]);
    m_protocols_isSet = !json[QString("Protocols")].isNull() && m_protocols_isValid;

    m_security_policy_name_isValid = ::OpenAPI::fromJsonValue(m_security_policy_name, json[QString("SecurityPolicyName")]);
    m_security_policy_name_isSet = !json[QString("SecurityPolicyName")].isNull() && m_security_policy_name_isValid;

    m_server_id_isValid = ::OpenAPI::fromJsonValue(m_server_id, json[QString("ServerId")]);
    m_server_id_isSet = !json[QString("ServerId")].isNull() && m_server_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_user_count_isValid = ::OpenAPI::fromJsonValue(m_user_count, json[QString("UserCount")]);
    m_user_count_isSet = !json[QString("UserCount")].isNull() && m_user_count_isValid;

    m_workflow_details_isValid = ::OpenAPI::fromJsonValue(m_workflow_details, json[QString("WorkflowDetails")]);
    m_workflow_details_isSet = !json[QString("WorkflowDetails")].isNull() && m_workflow_details_isValid;

    m_structured_log_destinations_isValid = ::OpenAPI::fromJsonValue(m_structured_log_destinations, json[QString("StructuredLogDestinations")]);
    m_structured_log_destinations_isSet = !json[QString("StructuredLogDestinations")].isNull() && m_structured_log_destinations_isValid;
}

QString OAIDescribeServerResponse_Server::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeServerResponse_Server::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_certificate_isSet) {
        obj.insert(QString("Certificate"), ::OpenAPI::toJsonValue(m_certificate));
    }
    if (m_protocol_details.isSet()) {
        obj.insert(QString("ProtocolDetails"), ::OpenAPI::toJsonValue(m_protocol_details));
    }
    if (m_domain.isSet()) {
        obj.insert(QString("Domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_endpoint_details.isSet()) {
        obj.insert(QString("EndpointDetails"), ::OpenAPI::toJsonValue(m_endpoint_details));
    }
    if (m_endpoint_type.isSet()) {
        obj.insert(QString("EndpointType"), ::OpenAPI::toJsonValue(m_endpoint_type));
    }
    if (m_host_key_fingerprint_isSet) {
        obj.insert(QString("HostKeyFingerprint"), ::OpenAPI::toJsonValue(m_host_key_fingerprint));
    }
    if (m_identity_provider_details.isSet()) {
        obj.insert(QString("IdentityProviderDetails"), ::OpenAPI::toJsonValue(m_identity_provider_details));
    }
    if (m_identity_provider_type.isSet()) {
        obj.insert(QString("IdentityProviderType"), ::OpenAPI::toJsonValue(m_identity_provider_type));
    }
    if (m_logging_role_isSet) {
        obj.insert(QString("LoggingRole"), ::OpenAPI::toJsonValue(m_logging_role));
    }
    if (m_post_authentication_login_banner_isSet) {
        obj.insert(QString("PostAuthenticationLoginBanner"), ::OpenAPI::toJsonValue(m_post_authentication_login_banner));
    }
    if (m_pre_authentication_login_banner_isSet) {
        obj.insert(QString("PreAuthenticationLoginBanner"), ::OpenAPI::toJsonValue(m_pre_authentication_login_banner));
    }
    if (m_protocols.isSet()) {
        obj.insert(QString("Protocols"), ::OpenAPI::toJsonValue(m_protocols));
    }
    if (m_security_policy_name_isSet) {
        obj.insert(QString("SecurityPolicyName"), ::OpenAPI::toJsonValue(m_security_policy_name));
    }
    if (m_server_id_isSet) {
        obj.insert(QString("ServerId"), ::OpenAPI::toJsonValue(m_server_id));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_user_count_isSet) {
        obj.insert(QString("UserCount"), ::OpenAPI::toJsonValue(m_user_count));
    }
    if (m_workflow_details.isSet()) {
        obj.insert(QString("WorkflowDetails"), ::OpenAPI::toJsonValue(m_workflow_details));
    }
    if (m_structured_log_destinations.isSet()) {
        obj.insert(QString("StructuredLogDestinations"), ::OpenAPI::toJsonValue(m_structured_log_destinations));
    }
    return obj;
}

QString OAIDescribeServerResponse_Server::getArn() const {
    return m_arn;
}
void OAIDescribeServerResponse_Server::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDescribeServerResponse_Server::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDescribeServerResponse_Server::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDescribeServerResponse_Server::getCertificate() const {
    return m_certificate;
}
void OAIDescribeServerResponse_Server::setCertificate(const QString &certificate) {
    m_certificate = certificate;
    m_certificate_isSet = true;
}

bool OAIDescribeServerResponse_Server::is_certificate_Set() const{
    return m_certificate_isSet;
}

bool OAIDescribeServerResponse_Server::is_certificate_Valid() const{
    return m_certificate_isValid;
}

OAICreateServerRequest_ProtocolDetails OAIDescribeServerResponse_Server::getProtocolDetails() const {
    return m_protocol_details;
}
void OAIDescribeServerResponse_Server::setProtocolDetails(const OAICreateServerRequest_ProtocolDetails &protocol_details) {
    m_protocol_details = protocol_details;
    m_protocol_details_isSet = true;
}

bool OAIDescribeServerResponse_Server::is_protocol_details_Set() const{
    return m_protocol_details_isSet;
}

bool OAIDescribeServerResponse_Server::is_protocol_details_Valid() const{
    return m_protocol_details_isValid;
}

OAIDomain OAIDescribeServerResponse_Server::getDomain() const {
    return m_domain;
}
void OAIDescribeServerResponse_Server::setDomain(const OAIDomain &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIDescribeServerResponse_Server::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIDescribeServerResponse_Server::is_domain_Valid() const{
    return m_domain_isValid;
}

OAICreateServerRequest_EndpointDetails OAIDescribeServerResponse_Server::getEndpointDetails() const {
    return m_endpoint_details;
}
void OAIDescribeServerResponse_Server::setEndpointDetails(const OAICreateServerRequest_EndpointDetails &endpoint_details) {
    m_endpoint_details = endpoint_details;
    m_endpoint_details_isSet = true;
}

bool OAIDescribeServerResponse_Server::is_endpoint_details_Set() const{
    return m_endpoint_details_isSet;
}

bool OAIDescribeServerResponse_Server::is_endpoint_details_Valid() const{
    return m_endpoint_details_isValid;
}

OAIEndpointType OAIDescribeServerResponse_Server::getEndpointType() const {
    return m_endpoint_type;
}
void OAIDescribeServerResponse_Server::setEndpointType(const OAIEndpointType &endpoint_type) {
    m_endpoint_type = endpoint_type;
    m_endpoint_type_isSet = true;
}

bool OAIDescribeServerResponse_Server::is_endpoint_type_Set() const{
    return m_endpoint_type_isSet;
}

bool OAIDescribeServerResponse_Server::is_endpoint_type_Valid() const{
    return m_endpoint_type_isValid;
}

QString OAIDescribeServerResponse_Server::getHostKeyFingerprint() const {
    return m_host_key_fingerprint;
}
void OAIDescribeServerResponse_Server::setHostKeyFingerprint(const QString &host_key_fingerprint) {
    m_host_key_fingerprint = host_key_fingerprint;
    m_host_key_fingerprint_isSet = true;
}

bool OAIDescribeServerResponse_Server::is_host_key_fingerprint_Set() const{
    return m_host_key_fingerprint_isSet;
}

bool OAIDescribeServerResponse_Server::is_host_key_fingerprint_Valid() const{
    return m_host_key_fingerprint_isValid;
}

OAIDescribedServer_IdentityProviderDetails OAIDescribeServerResponse_Server::getIdentityProviderDetails() const {
    return m_identity_provider_details;
}
void OAIDescribeServerResponse_Server::setIdentityProviderDetails(const OAIDescribedServer_IdentityProviderDetails &identity_provider_details) {
    m_identity_provider_details = identity_provider_details;
    m_identity_provider_details_isSet = true;
}

bool OAIDescribeServerResponse_Server::is_identity_provider_details_Set() const{
    return m_identity_provider_details_isSet;
}

bool OAIDescribeServerResponse_Server::is_identity_provider_details_Valid() const{
    return m_identity_provider_details_isValid;
}

OAIIdentityProviderType OAIDescribeServerResponse_Server::getIdentityProviderType() const {
    return m_identity_provider_type;
}
void OAIDescribeServerResponse_Server::setIdentityProviderType(const OAIIdentityProviderType &identity_provider_type) {
    m_identity_provider_type = identity_provider_type;
    m_identity_provider_type_isSet = true;
}

bool OAIDescribeServerResponse_Server::is_identity_provider_type_Set() const{
    return m_identity_provider_type_isSet;
}

bool OAIDescribeServerResponse_Server::is_identity_provider_type_Valid() const{
    return m_identity_provider_type_isValid;
}

QString OAIDescribeServerResponse_Server::getLoggingRole() const {
    return m_logging_role;
}
void OAIDescribeServerResponse_Server::setLoggingRole(const QString &logging_role) {
    m_logging_role = logging_role;
    m_logging_role_isSet = true;
}

bool OAIDescribeServerResponse_Server::is_logging_role_Set() const{
    return m_logging_role_isSet;
}

bool OAIDescribeServerResponse_Server::is_logging_role_Valid() const{
    return m_logging_role_isValid;
}

QString OAIDescribeServerResponse_Server::getPostAuthenticationLoginBanner() const {
    return m_post_authentication_login_banner;
}
void OAIDescribeServerResponse_Server::setPostAuthenticationLoginBanner(const QString &post_authentication_login_banner) {
    m_post_authentication_login_banner = post_authentication_login_banner;
    m_post_authentication_login_banner_isSet = true;
}

bool OAIDescribeServerResponse_Server::is_post_authentication_login_banner_Set() const{
    return m_post_authentication_login_banner_isSet;
}

bool OAIDescribeServerResponse_Server::is_post_authentication_login_banner_Valid() const{
    return m_post_authentication_login_banner_isValid;
}

QString OAIDescribeServerResponse_Server::getPreAuthenticationLoginBanner() const {
    return m_pre_authentication_login_banner;
}
void OAIDescribeServerResponse_Server::setPreAuthenticationLoginBanner(const QString &pre_authentication_login_banner) {
    m_pre_authentication_login_banner = pre_authentication_login_banner;
    m_pre_authentication_login_banner_isSet = true;
}

bool OAIDescribeServerResponse_Server::is_pre_authentication_login_banner_Set() const{
    return m_pre_authentication_login_banner_isSet;
}

bool OAIDescribeServerResponse_Server::is_pre_authentication_login_banner_Valid() const{
    return m_pre_authentication_login_banner_isValid;
}

QList OAIDescribeServerResponse_Server::getProtocols() const {
    return m_protocols;
}
void OAIDescribeServerResponse_Server::setProtocols(const QList &protocols) {
    m_protocols = protocols;
    m_protocols_isSet = true;
}

bool OAIDescribeServerResponse_Server::is_protocols_Set() const{
    return m_protocols_isSet;
}

bool OAIDescribeServerResponse_Server::is_protocols_Valid() const{
    return m_protocols_isValid;
}

QString OAIDescribeServerResponse_Server::getSecurityPolicyName() const {
    return m_security_policy_name;
}
void OAIDescribeServerResponse_Server::setSecurityPolicyName(const QString &security_policy_name) {
    m_security_policy_name = security_policy_name;
    m_security_policy_name_isSet = true;
}

bool OAIDescribeServerResponse_Server::is_security_policy_name_Set() const{
    return m_security_policy_name_isSet;
}

bool OAIDescribeServerResponse_Server::is_security_policy_name_Valid() const{
    return m_security_policy_name_isValid;
}

QString OAIDescribeServerResponse_Server::getServerId() const {
    return m_server_id;
}
void OAIDescribeServerResponse_Server::setServerId(const QString &server_id) {
    m_server_id = server_id;
    m_server_id_isSet = true;
}

bool OAIDescribeServerResponse_Server::is_server_id_Set() const{
    return m_server_id_isSet;
}

bool OAIDescribeServerResponse_Server::is_server_id_Valid() const{
    return m_server_id_isValid;
}

OAIState OAIDescribeServerResponse_Server::getState() const {
    return m_state;
}
void OAIDescribeServerResponse_Server::setState(const OAIState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDescribeServerResponse_Server::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDescribeServerResponse_Server::is_state_Valid() const{
    return m_state_isValid;
}

QList OAIDescribeServerResponse_Server::getTags() const {
    return m_tags;
}
void OAIDescribeServerResponse_Server::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDescribeServerResponse_Server::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDescribeServerResponse_Server::is_tags_Valid() const{
    return m_tags_isValid;
}

qint32 OAIDescribeServerResponse_Server::getUserCount() const {
    return m_user_count;
}
void OAIDescribeServerResponse_Server::setUserCount(const qint32 &user_count) {
    m_user_count = user_count;
    m_user_count_isSet = true;
}

bool OAIDescribeServerResponse_Server::is_user_count_Set() const{
    return m_user_count_isSet;
}

bool OAIDescribeServerResponse_Server::is_user_count_Valid() const{
    return m_user_count_isValid;
}

OAICreateServerRequest_WorkflowDetails OAIDescribeServerResponse_Server::getWorkflowDetails() const {
    return m_workflow_details;
}
void OAIDescribeServerResponse_Server::setWorkflowDetails(const OAICreateServerRequest_WorkflowDetails &workflow_details) {
    m_workflow_details = workflow_details;
    m_workflow_details_isSet = true;
}

bool OAIDescribeServerResponse_Server::is_workflow_details_Set() const{
    return m_workflow_details_isSet;
}

bool OAIDescribeServerResponse_Server::is_workflow_details_Valid() const{
    return m_workflow_details_isValid;
}

QList OAIDescribeServerResponse_Server::getStructuredLogDestinations() const {
    return m_structured_log_destinations;
}
void OAIDescribeServerResponse_Server::setStructuredLogDestinations(const QList &structured_log_destinations) {
    m_structured_log_destinations = structured_log_destinations;
    m_structured_log_destinations_isSet = true;
}

bool OAIDescribeServerResponse_Server::is_structured_log_destinations_Set() const{
    return m_structured_log_destinations_isSet;
}

bool OAIDescribeServerResponse_Server::is_structured_log_destinations_Valid() const{
    return m_structured_log_destinations_isValid;
}

bool OAIDescribeServerResponse_Server::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_key_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_provider_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_provider_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_authentication_login_banner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_authentication_login_banner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocols.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_policy_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_structured_log_destinations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeServerResponse_Server::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && true;
}

} // namespace OpenAPI
