/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListedCertificate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListedCertificate::OAIListedCertificate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListedCertificate::OAIListedCertificate() {
    this->initializeModel();
}

OAIListedCertificate::~OAIListedCertificate() {}

void OAIListedCertificate::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_certificate_id_isSet = false;
    m_certificate_id_isValid = false;

    m_usage_isSet = false;
    m_usage_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_active_date_isSet = false;
    m_active_date_isValid = false;

    m_inactive_date_isSet = false;
    m_inactive_date_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;
}

void OAIListedCertificate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListedCertificate::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_certificate_id_isValid = ::OpenAPI::fromJsonValue(m_certificate_id, json[QString("CertificateId")]);
    m_certificate_id_isSet = !json[QString("CertificateId")].isNull() && m_certificate_id_isValid;

    m_usage_isValid = ::OpenAPI::fromJsonValue(m_usage, json[QString("Usage")]);
    m_usage_isSet = !json[QString("Usage")].isNull() && m_usage_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_active_date_isValid = ::OpenAPI::fromJsonValue(m_active_date, json[QString("ActiveDate")]);
    m_active_date_isSet = !json[QString("ActiveDate")].isNull() && m_active_date_isValid;

    m_inactive_date_isValid = ::OpenAPI::fromJsonValue(m_inactive_date, json[QString("InactiveDate")]);
    m_inactive_date_isSet = !json[QString("InactiveDate")].isNull() && m_inactive_date_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;
}

QString OAIListedCertificate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListedCertificate::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_certificate_id_isSet) {
        obj.insert(QString("CertificateId"), ::OpenAPI::toJsonValue(m_certificate_id));
    }
    if (m_usage.isSet()) {
        obj.insert(QString("Usage"), ::OpenAPI::toJsonValue(m_usage));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_active_date_isSet) {
        obj.insert(QString("ActiveDate"), ::OpenAPI::toJsonValue(m_active_date));
    }
    if (m_inactive_date_isSet) {
        obj.insert(QString("InactiveDate"), ::OpenAPI::toJsonValue(m_inactive_date));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    return obj;
}

QString OAIListedCertificate::getArn() const {
    return m_arn;
}
void OAIListedCertificate::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIListedCertificate::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIListedCertificate::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIListedCertificate::getCertificateId() const {
    return m_certificate_id;
}
void OAIListedCertificate::setCertificateId(const QString &certificate_id) {
    m_certificate_id = certificate_id;
    m_certificate_id_isSet = true;
}

bool OAIListedCertificate::is_certificate_id_Set() const{
    return m_certificate_id_isSet;
}

bool OAIListedCertificate::is_certificate_id_Valid() const{
    return m_certificate_id_isValid;
}

OAICertificateUsageType OAIListedCertificate::getUsage() const {
    return m_usage;
}
void OAIListedCertificate::setUsage(const OAICertificateUsageType &usage) {
    m_usage = usage;
    m_usage_isSet = true;
}

bool OAIListedCertificate::is_usage_Set() const{
    return m_usage_isSet;
}

bool OAIListedCertificate::is_usage_Valid() const{
    return m_usage_isValid;
}

OAICertificateStatusType OAIListedCertificate::getStatus() const {
    return m_status;
}
void OAIListedCertificate::setStatus(const OAICertificateStatusType &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIListedCertificate::is_status_Set() const{
    return m_status_isSet;
}

bool OAIListedCertificate::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIListedCertificate::getActiveDate() const {
    return m_active_date;
}
void OAIListedCertificate::setActiveDate(const QDateTime &active_date) {
    m_active_date = active_date;
    m_active_date_isSet = true;
}

bool OAIListedCertificate::is_active_date_Set() const{
    return m_active_date_isSet;
}

bool OAIListedCertificate::is_active_date_Valid() const{
    return m_active_date_isValid;
}

QDateTime OAIListedCertificate::getInactiveDate() const {
    return m_inactive_date;
}
void OAIListedCertificate::setInactiveDate(const QDateTime &inactive_date) {
    m_inactive_date = inactive_date;
    m_inactive_date_isSet = true;
}

bool OAIListedCertificate::is_inactive_date_Set() const{
    return m_inactive_date_isSet;
}

bool OAIListedCertificate::is_inactive_date_Valid() const{
    return m_inactive_date_isValid;
}

OAICertificateType OAIListedCertificate::getType() const {
    return m_type;
}
void OAIListedCertificate::setType(const OAICertificateType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIListedCertificate::is_type_Set() const{
    return m_type_isSet;
}

bool OAIListedCertificate::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIListedCertificate::getDescription() const {
    return m_description;
}
void OAIListedCertificate::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIListedCertificate::is_description_Set() const{
    return m_description_isSet;
}

bool OAIListedCertificate::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIListedCertificate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inactive_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListedCertificate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
