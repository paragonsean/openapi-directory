/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListedHostKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListedHostKey::OAIListedHostKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListedHostKey::OAIListedHostKey() {
    this->initializeModel();
}

OAIListedHostKey::~OAIListedHostKey() {}

void OAIListedHostKey::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_host_key_id_isSet = false;
    m_host_key_id_isValid = false;

    m_fingerprint_isSet = false;
    m_fingerprint_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_date_imported_isSet = false;
    m_date_imported_isValid = false;
}

void OAIListedHostKey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListedHostKey::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_host_key_id_isValid = ::OpenAPI::fromJsonValue(m_host_key_id, json[QString("HostKeyId")]);
    m_host_key_id_isSet = !json[QString("HostKeyId")].isNull() && m_host_key_id_isValid;

    m_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_fingerprint, json[QString("Fingerprint")]);
    m_fingerprint_isSet = !json[QString("Fingerprint")].isNull() && m_fingerprint_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_date_imported_isValid = ::OpenAPI::fromJsonValue(m_date_imported, json[QString("DateImported")]);
    m_date_imported_isSet = !json[QString("DateImported")].isNull() && m_date_imported_isValid;
}

QString OAIListedHostKey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListedHostKey::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_host_key_id_isSet) {
        obj.insert(QString("HostKeyId"), ::OpenAPI::toJsonValue(m_host_key_id));
    }
    if (m_fingerprint_isSet) {
        obj.insert(QString("Fingerprint"), ::OpenAPI::toJsonValue(m_fingerprint));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_date_imported_isSet) {
        obj.insert(QString("DateImported"), ::OpenAPI::toJsonValue(m_date_imported));
    }
    return obj;
}

QString OAIListedHostKey::getArn() const {
    return m_arn;
}
void OAIListedHostKey::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIListedHostKey::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIListedHostKey::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIListedHostKey::getHostKeyId() const {
    return m_host_key_id;
}
void OAIListedHostKey::setHostKeyId(const QString &host_key_id) {
    m_host_key_id = host_key_id;
    m_host_key_id_isSet = true;
}

bool OAIListedHostKey::is_host_key_id_Set() const{
    return m_host_key_id_isSet;
}

bool OAIListedHostKey::is_host_key_id_Valid() const{
    return m_host_key_id_isValid;
}

QString OAIListedHostKey::getFingerprint() const {
    return m_fingerprint;
}
void OAIListedHostKey::setFingerprint(const QString &fingerprint) {
    m_fingerprint = fingerprint;
    m_fingerprint_isSet = true;
}

bool OAIListedHostKey::is_fingerprint_Set() const{
    return m_fingerprint_isSet;
}

bool OAIListedHostKey::is_fingerprint_Valid() const{
    return m_fingerprint_isValid;
}

QString OAIListedHostKey::getDescription() const {
    return m_description;
}
void OAIListedHostKey::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIListedHostKey::is_description_Set() const{
    return m_description_isSet;
}

bool OAIListedHostKey::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIListedHostKey::getType() const {
    return m_type;
}
void OAIListedHostKey::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIListedHostKey::is_type_Set() const{
    return m_type_isSet;
}

bool OAIListedHostKey::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIListedHostKey::getDateImported() const {
    return m_date_imported;
}
void OAIListedHostKey::setDateImported(const QDateTime &date_imported) {
    m_date_imported = date_imported;
    m_date_imported_isSet = true;
}

bool OAIListedHostKey::is_date_imported_Set() const{
    return m_date_imported_isSet;
}

bool OAIListedHostKey::is_date_imported_Valid() const{
    return m_date_imported_isValid;
}

bool OAIListedHostKey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_imported_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListedHostKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && true;
}

} // namespace OpenAPI
