/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflowStep_TagStepDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflowStep_TagStepDetails::OAIWorkflowStep_TagStepDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflowStep_TagStepDetails::OAIWorkflowStep_TagStepDetails() {
    this->initializeModel();
}

OAIWorkflowStep_TagStepDetails::~OAIWorkflowStep_TagStepDetails() {}

void OAIWorkflowStep_TagStepDetails::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_source_file_location_isSet = false;
    m_source_file_location_isValid = false;
}

void OAIWorkflowStep_TagStepDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflowStep_TagStepDetails::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_source_file_location_isValid = ::OpenAPI::fromJsonValue(m_source_file_location, json[QString("SourceFileLocation")]);
    m_source_file_location_isSet = !json[QString("SourceFileLocation")].isNull() && m_source_file_location_isValid;
}

QString OAIWorkflowStep_TagStepDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflowStep_TagStepDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_source_file_location_isSet) {
        obj.insert(QString("SourceFileLocation"), ::OpenAPI::toJsonValue(m_source_file_location));
    }
    return obj;
}

QString OAIWorkflowStep_TagStepDetails::getName() const {
    return m_name;
}
void OAIWorkflowStep_TagStepDetails::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWorkflowStep_TagStepDetails::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWorkflowStep_TagStepDetails::is_name_Valid() const{
    return m_name_isValid;
}

QList OAIWorkflowStep_TagStepDetails::getTags() const {
    return m_tags;
}
void OAIWorkflowStep_TagStepDetails::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIWorkflowStep_TagStepDetails::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIWorkflowStep_TagStepDetails::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIWorkflowStep_TagStepDetails::getSourceFileLocation() const {
    return m_source_file_location;
}
void OAIWorkflowStep_TagStepDetails::setSourceFileLocation(const QString &source_file_location) {
    m_source_file_location = source_file_location;
    m_source_file_location_isSet = true;
}

bool OAIWorkflowStep_TagStepDetails::is_source_file_location_Set() const{
    return m_source_file_location_isSet;
}

bool OAIWorkflowStep_TagStepDetails::is_source_file_location_Valid() const{
    return m_source_file_location_isValid;
}

bool OAIWorkflowStep_TagStepDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_file_location_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflowStep_TagStepDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
