/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateAccessRequest.h
 *
 * 
 */

#ifndef OAICreateAccessRequest_H
#define OAICreateAccessRequest_H

#include <QJsonObject>

#include "OAIHomeDirectoryType.h"
#include "OAIPosixProfile.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPosixProfile;

class OAICreateAccessRequest : public OAIObject {
public:
    OAICreateAccessRequest();
    OAICreateAccessRequest(QString json);
    ~OAICreateAccessRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getHomeDirectory() const;
    void setHomeDirectory(const QString &home_directory);
    bool is_home_directory_Set() const;
    bool is_home_directory_Valid() const;

    OAIHomeDirectoryType getHomeDirectoryType() const;
    void setHomeDirectoryType(const OAIHomeDirectoryType &home_directory_type);
    bool is_home_directory_type_Set() const;
    bool is_home_directory_type_Valid() const;

    QList getHomeDirectoryMappings() const;
    void setHomeDirectoryMappings(const QList &home_directory_mappings);
    bool is_home_directory_mappings_Set() const;
    bool is_home_directory_mappings_Valid() const;

    QString getPolicy() const;
    void setPolicy(const QString &policy);
    bool is_policy_Set() const;
    bool is_policy_Valid() const;

    OAIPosixProfile getPosixProfile() const;
    void setPosixProfile(const OAIPosixProfile &posix_profile);
    bool is_posix_profile_Set() const;
    bool is_posix_profile_Valid() const;

    QString getRole() const;
    void setRole(const QString &role);
    bool is_role_Set() const;
    bool is_role_Valid() const;

    QString getServerId() const;
    void setServerId(const QString &server_id);
    bool is_server_id_Set() const;
    bool is_server_id_Valid() const;

    QString getExternalId() const;
    void setExternalId(const QString &external_id);
    bool is_external_id_Set() const;
    bool is_external_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_home_directory;
    bool m_home_directory_isSet;
    bool m_home_directory_isValid;

    OAIHomeDirectoryType m_home_directory_type;
    bool m_home_directory_type_isSet;
    bool m_home_directory_type_isValid;

    QList m_home_directory_mappings;
    bool m_home_directory_mappings_isSet;
    bool m_home_directory_mappings_isValid;

    QString m_policy;
    bool m_policy_isSet;
    bool m_policy_isValid;

    OAIPosixProfile m_posix_profile;
    bool m_posix_profile_isSet;
    bool m_posix_profile_isValid;

    QString m_role;
    bool m_role_isSet;
    bool m_role_isValid;

    QString m_server_id;
    bool m_server_id_isSet;
    bool m_server_id_isValid;

    QString m_external_id;
    bool m_external_id_isSet;
    bool m_external_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateAccessRequest)

#endif // OAICreateAccessRequest_H
