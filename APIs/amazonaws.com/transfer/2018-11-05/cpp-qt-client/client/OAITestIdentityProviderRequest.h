/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITestIdentityProviderRequest.h
 *
 * 
 */

#ifndef OAITestIdentityProviderRequest_H
#define OAITestIdentityProviderRequest_H

#include <QJsonObject>

#include "OAIProtocol.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITestIdentityProviderRequest : public OAIObject {
public:
    OAITestIdentityProviderRequest();
    OAITestIdentityProviderRequest(QString json);
    ~OAITestIdentityProviderRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getServerId() const;
    void setServerId(const QString &server_id);
    bool is_server_id_Set() const;
    bool is_server_id_Valid() const;

    OAIProtocol getServerProtocol() const;
    void setServerProtocol(const OAIProtocol &server_protocol);
    bool is_server_protocol_Set() const;
    bool is_server_protocol_Valid() const;

    QString getSourceIp() const;
    void setSourceIp(const QString &source_ip);
    bool is_source_ip_Set() const;
    bool is_source_ip_Valid() const;

    QString getUserName() const;
    void setUserName(const QString &user_name);
    bool is_user_name_Set() const;
    bool is_user_name_Valid() const;

    QString getUserPassword() const;
    void setUserPassword(const QString &user_password);
    bool is_user_password_Set() const;
    bool is_user_password_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_server_id;
    bool m_server_id_isSet;
    bool m_server_id_isValid;

    OAIProtocol m_server_protocol;
    bool m_server_protocol_isSet;
    bool m_server_protocol_isValid;

    QString m_source_ip;
    bool m_source_ip_isSet;
    bool m_source_ip_isValid;

    QString m_user_name;
    bool m_user_name_isSet;
    bool m_user_name_isValid;

    QString m_user_password;
    bool m_user_password_isSet;
    bool m_user_password_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITestIdentityProviderRequest)

#endif // OAITestIdentityProviderRequest_H
