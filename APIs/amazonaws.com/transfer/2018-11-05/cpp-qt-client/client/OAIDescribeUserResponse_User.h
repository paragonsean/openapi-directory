/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeUserResponse_User.h
 *
 * 
 */

#ifndef OAIDescribeUserResponse_User_H
#define OAIDescribeUserResponse_User_H

#include <QJsonObject>

#include "OAIDescribedUser_PosixProfile.h"
#include "OAIHomeDirectoryType.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDescribedUser_PosixProfile;

class OAIDescribeUserResponse_User : public OAIObject {
public:
    OAIDescribeUserResponse_User();
    OAIDescribeUserResponse_User(QString json);
    ~OAIDescribeUserResponse_User() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QString getHomeDirectory() const;
    void setHomeDirectory(const QString &home_directory);
    bool is_home_directory_Set() const;
    bool is_home_directory_Valid() const;

    QList getHomeDirectoryMappings() const;
    void setHomeDirectoryMappings(const QList &home_directory_mappings);
    bool is_home_directory_mappings_Set() const;
    bool is_home_directory_mappings_Valid() const;

    OAIHomeDirectoryType getHomeDirectoryType() const;
    void setHomeDirectoryType(const OAIHomeDirectoryType &home_directory_type);
    bool is_home_directory_type_Set() const;
    bool is_home_directory_type_Valid() const;

    QString getPolicy() const;
    void setPolicy(const QString &policy);
    bool is_policy_Set() const;
    bool is_policy_Valid() const;

    OAIDescribedUser_PosixProfile getPosixProfile() const;
    void setPosixProfile(const OAIDescribedUser_PosixProfile &posix_profile);
    bool is_posix_profile_Set() const;
    bool is_posix_profile_Valid() const;

    QString getRole() const;
    void setRole(const QString &role);
    bool is_role_Set() const;
    bool is_role_Valid() const;

    QList getSshPublicKeys() const;
    void setSshPublicKeys(const QList &ssh_public_keys);
    bool is_ssh_public_keys_Set() const;
    bool is_ssh_public_keys_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getUserName() const;
    void setUserName(const QString &user_name);
    bool is_user_name_Set() const;
    bool is_user_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QString m_home_directory;
    bool m_home_directory_isSet;
    bool m_home_directory_isValid;

    QList m_home_directory_mappings;
    bool m_home_directory_mappings_isSet;
    bool m_home_directory_mappings_isValid;

    OAIHomeDirectoryType m_home_directory_type;
    bool m_home_directory_type_isSet;
    bool m_home_directory_type_isValid;

    QString m_policy;
    bool m_policy_isSet;
    bool m_policy_isValid;

    OAIDescribedUser_PosixProfile m_posix_profile;
    bool m_posix_profile_isSet;
    bool m_posix_profile_isValid;

    QString m_role;
    bool m_role_isSet;
    bool m_role_isValid;

    QList m_ssh_public_keys;
    bool m_ssh_public_keys_isSet;
    bool m_ssh_public_keys_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_user_name;
    bool m_user_name_isSet;
    bool m_user_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeUserResponse_User)

#endif // OAIDescribeUserResponse_User_H
