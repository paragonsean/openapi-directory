/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeConnectorResponse_Connector.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeConnectorResponse_Connector::OAIDescribeConnectorResponse_Connector(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeConnectorResponse_Connector::OAIDescribeConnectorResponse_Connector() {
    this->initializeModel();
}

OAIDescribeConnectorResponse_Connector::~OAIDescribeConnectorResponse_Connector() {}

void OAIDescribeConnectorResponse_Connector::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_connector_id_isSet = false;
    m_connector_id_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_as2_config_isSet = false;
    m_as2_config_isValid = false;

    m_access_role_isSet = false;
    m_access_role_isValid = false;

    m_logging_role_isSet = false;
    m_logging_role_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_sftp_config_isSet = false;
    m_sftp_config_isValid = false;
}

void OAIDescribeConnectorResponse_Connector::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeConnectorResponse_Connector::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_connector_id_isValid = ::OpenAPI::fromJsonValue(m_connector_id, json[QString("ConnectorId")]);
    m_connector_id_isSet = !json[QString("ConnectorId")].isNull() && m_connector_id_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("Url")]);
    m_url_isSet = !json[QString("Url")].isNull() && m_url_isValid;

    m_as2_config_isValid = ::OpenAPI::fromJsonValue(m_as2_config, json[QString("As2Config")]);
    m_as2_config_isSet = !json[QString("As2Config")].isNull() && m_as2_config_isValid;

    m_access_role_isValid = ::OpenAPI::fromJsonValue(m_access_role, json[QString("AccessRole")]);
    m_access_role_isSet = !json[QString("AccessRole")].isNull() && m_access_role_isValid;

    m_logging_role_isValid = ::OpenAPI::fromJsonValue(m_logging_role, json[QString("LoggingRole")]);
    m_logging_role_isSet = !json[QString("LoggingRole")].isNull() && m_logging_role_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_sftp_config_isValid = ::OpenAPI::fromJsonValue(m_sftp_config, json[QString("SftpConfig")]);
    m_sftp_config_isSet = !json[QString("SftpConfig")].isNull() && m_sftp_config_isValid;
}

QString OAIDescribeConnectorResponse_Connector::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeConnectorResponse_Connector::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_connector_id_isSet) {
        obj.insert(QString("ConnectorId"), ::OpenAPI::toJsonValue(m_connector_id));
    }
    if (m_url_isSet) {
        obj.insert(QString("Url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_as2_config.isSet()) {
        obj.insert(QString("As2Config"), ::OpenAPI::toJsonValue(m_as2_config));
    }
    if (m_access_role_isSet) {
        obj.insert(QString("AccessRole"), ::OpenAPI::toJsonValue(m_access_role));
    }
    if (m_logging_role_isSet) {
        obj.insert(QString("LoggingRole"), ::OpenAPI::toJsonValue(m_logging_role));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_sftp_config.isSet()) {
        obj.insert(QString("SftpConfig"), ::OpenAPI::toJsonValue(m_sftp_config));
    }
    return obj;
}

QString OAIDescribeConnectorResponse_Connector::getArn() const {
    return m_arn;
}
void OAIDescribeConnectorResponse_Connector::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDescribeConnectorResponse_Connector::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDescribeConnectorResponse_Connector::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDescribeConnectorResponse_Connector::getConnectorId() const {
    return m_connector_id;
}
void OAIDescribeConnectorResponse_Connector::setConnectorId(const QString &connector_id) {
    m_connector_id = connector_id;
    m_connector_id_isSet = true;
}

bool OAIDescribeConnectorResponse_Connector::is_connector_id_Set() const{
    return m_connector_id_isSet;
}

bool OAIDescribeConnectorResponse_Connector::is_connector_id_Valid() const{
    return m_connector_id_isValid;
}

QString OAIDescribeConnectorResponse_Connector::getUrl() const {
    return m_url;
}
void OAIDescribeConnectorResponse_Connector::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIDescribeConnectorResponse_Connector::is_url_Set() const{
    return m_url_isSet;
}

bool OAIDescribeConnectorResponse_Connector::is_url_Valid() const{
    return m_url_isValid;
}

OAICreateConnectorRequest_As2Config OAIDescribeConnectorResponse_Connector::getAs2Config() const {
    return m_as2_config;
}
void OAIDescribeConnectorResponse_Connector::setAs2Config(const OAICreateConnectorRequest_As2Config &as2_config) {
    m_as2_config = as2_config;
    m_as2_config_isSet = true;
}

bool OAIDescribeConnectorResponse_Connector::is_as2_config_Set() const{
    return m_as2_config_isSet;
}

bool OAIDescribeConnectorResponse_Connector::is_as2_config_Valid() const{
    return m_as2_config_isValid;
}

QString OAIDescribeConnectorResponse_Connector::getAccessRole() const {
    return m_access_role;
}
void OAIDescribeConnectorResponse_Connector::setAccessRole(const QString &access_role) {
    m_access_role = access_role;
    m_access_role_isSet = true;
}

bool OAIDescribeConnectorResponse_Connector::is_access_role_Set() const{
    return m_access_role_isSet;
}

bool OAIDescribeConnectorResponse_Connector::is_access_role_Valid() const{
    return m_access_role_isValid;
}

QString OAIDescribeConnectorResponse_Connector::getLoggingRole() const {
    return m_logging_role;
}
void OAIDescribeConnectorResponse_Connector::setLoggingRole(const QString &logging_role) {
    m_logging_role = logging_role;
    m_logging_role_isSet = true;
}

bool OAIDescribeConnectorResponse_Connector::is_logging_role_Set() const{
    return m_logging_role_isSet;
}

bool OAIDescribeConnectorResponse_Connector::is_logging_role_Valid() const{
    return m_logging_role_isValid;
}

QList OAIDescribeConnectorResponse_Connector::getTags() const {
    return m_tags;
}
void OAIDescribeConnectorResponse_Connector::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDescribeConnectorResponse_Connector::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDescribeConnectorResponse_Connector::is_tags_Valid() const{
    return m_tags_isValid;
}

OAICreateConnectorRequest_SftpConfig OAIDescribeConnectorResponse_Connector::getSftpConfig() const {
    return m_sftp_config;
}
void OAIDescribeConnectorResponse_Connector::setSftpConfig(const OAICreateConnectorRequest_SftpConfig &sftp_config) {
    m_sftp_config = sftp_config;
    m_sftp_config_isSet = true;
}

bool OAIDescribeConnectorResponse_Connector::is_sftp_config_Set() const{
    return m_sftp_config_isSet;
}

bool OAIDescribeConnectorResponse_Connector::is_sftp_config_Valid() const{
    return m_sftp_config_isValid;
}

bool OAIDescribeConnectorResponse_Connector::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_as2_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sftp_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeConnectorResponse_Connector::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && true;
}

} // namespace OpenAPI
