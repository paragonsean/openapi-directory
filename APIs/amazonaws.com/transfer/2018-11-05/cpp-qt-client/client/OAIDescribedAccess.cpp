/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribedAccess.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribedAccess::OAIDescribedAccess(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribedAccess::OAIDescribedAccess() {
    this->initializeModel();
}

OAIDescribedAccess::~OAIDescribedAccess() {}

void OAIDescribedAccess::initializeModel() {

    m_home_directory_isSet = false;
    m_home_directory_isValid = false;

    m_home_directory_mappings_isSet = false;
    m_home_directory_mappings_isValid = false;

    m_home_directory_type_isSet = false;
    m_home_directory_type_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;

    m_posix_profile_isSet = false;
    m_posix_profile_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_external_id_isSet = false;
    m_external_id_isValid = false;
}

void OAIDescribedAccess::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribedAccess::fromJsonObject(QJsonObject json) {

    m_home_directory_isValid = ::OpenAPI::fromJsonValue(m_home_directory, json[QString("HomeDirectory")]);
    m_home_directory_isSet = !json[QString("HomeDirectory")].isNull() && m_home_directory_isValid;

    m_home_directory_mappings_isValid = ::OpenAPI::fromJsonValue(m_home_directory_mappings, json[QString("HomeDirectoryMappings")]);
    m_home_directory_mappings_isSet = !json[QString("HomeDirectoryMappings")].isNull() && m_home_directory_mappings_isValid;

    m_home_directory_type_isValid = ::OpenAPI::fromJsonValue(m_home_directory_type, json[QString("HomeDirectoryType")]);
    m_home_directory_type_isSet = !json[QString("HomeDirectoryType")].isNull() && m_home_directory_type_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("Policy")]);
    m_policy_isSet = !json[QString("Policy")].isNull() && m_policy_isValid;

    m_posix_profile_isValid = ::OpenAPI::fromJsonValue(m_posix_profile, json[QString("PosixProfile")]);
    m_posix_profile_isSet = !json[QString("PosixProfile")].isNull() && m_posix_profile_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("Role")]);
    m_role_isSet = !json[QString("Role")].isNull() && m_role_isValid;

    m_external_id_isValid = ::OpenAPI::fromJsonValue(m_external_id, json[QString("ExternalId")]);
    m_external_id_isSet = !json[QString("ExternalId")].isNull() && m_external_id_isValid;
}

QString OAIDescribedAccess::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribedAccess::asJsonObject() const {
    QJsonObject obj;
    if (m_home_directory_isSet) {
        obj.insert(QString("HomeDirectory"), ::OpenAPI::toJsonValue(m_home_directory));
    }
    if (m_home_directory_mappings.isSet()) {
        obj.insert(QString("HomeDirectoryMappings"), ::OpenAPI::toJsonValue(m_home_directory_mappings));
    }
    if (m_home_directory_type.isSet()) {
        obj.insert(QString("HomeDirectoryType"), ::OpenAPI::toJsonValue(m_home_directory_type));
    }
    if (m_policy_isSet) {
        obj.insert(QString("Policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    if (m_posix_profile.isSet()) {
        obj.insert(QString("PosixProfile"), ::OpenAPI::toJsonValue(m_posix_profile));
    }
    if (m_role_isSet) {
        obj.insert(QString("Role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_external_id_isSet) {
        obj.insert(QString("ExternalId"), ::OpenAPI::toJsonValue(m_external_id));
    }
    return obj;
}

QString OAIDescribedAccess::getHomeDirectory() const {
    return m_home_directory;
}
void OAIDescribedAccess::setHomeDirectory(const QString &home_directory) {
    m_home_directory = home_directory;
    m_home_directory_isSet = true;
}

bool OAIDescribedAccess::is_home_directory_Set() const{
    return m_home_directory_isSet;
}

bool OAIDescribedAccess::is_home_directory_Valid() const{
    return m_home_directory_isValid;
}

QList OAIDescribedAccess::getHomeDirectoryMappings() const {
    return m_home_directory_mappings;
}
void OAIDescribedAccess::setHomeDirectoryMappings(const QList &home_directory_mappings) {
    m_home_directory_mappings = home_directory_mappings;
    m_home_directory_mappings_isSet = true;
}

bool OAIDescribedAccess::is_home_directory_mappings_Set() const{
    return m_home_directory_mappings_isSet;
}

bool OAIDescribedAccess::is_home_directory_mappings_Valid() const{
    return m_home_directory_mappings_isValid;
}

OAIHomeDirectoryType OAIDescribedAccess::getHomeDirectoryType() const {
    return m_home_directory_type;
}
void OAIDescribedAccess::setHomeDirectoryType(const OAIHomeDirectoryType &home_directory_type) {
    m_home_directory_type = home_directory_type;
    m_home_directory_type_isSet = true;
}

bool OAIDescribedAccess::is_home_directory_type_Set() const{
    return m_home_directory_type_isSet;
}

bool OAIDescribedAccess::is_home_directory_type_Valid() const{
    return m_home_directory_type_isValid;
}

QString OAIDescribedAccess::getPolicy() const {
    return m_policy;
}
void OAIDescribedAccess::setPolicy(const QString &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIDescribedAccess::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIDescribedAccess::is_policy_Valid() const{
    return m_policy_isValid;
}

OAIPosixProfile OAIDescribedAccess::getPosixProfile() const {
    return m_posix_profile;
}
void OAIDescribedAccess::setPosixProfile(const OAIPosixProfile &posix_profile) {
    m_posix_profile = posix_profile;
    m_posix_profile_isSet = true;
}

bool OAIDescribedAccess::is_posix_profile_Set() const{
    return m_posix_profile_isSet;
}

bool OAIDescribedAccess::is_posix_profile_Valid() const{
    return m_posix_profile_isValid;
}

QString OAIDescribedAccess::getRole() const {
    return m_role;
}
void OAIDescribedAccess::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIDescribedAccess::is_role_Set() const{
    return m_role_isSet;
}

bool OAIDescribedAccess::is_role_Valid() const{
    return m_role_isValid;
}

QString OAIDescribedAccess::getExternalId() const {
    return m_external_id;
}
void OAIDescribedAccess::setExternalId(const QString &external_id) {
    m_external_id = external_id;
    m_external_id_isSet = true;
}

bool OAIDescribedAccess::is_external_id_Set() const{
    return m_external_id_isSet;
}

bool OAIDescribedAccess::is_external_id_Valid() const{
    return m_external_id_isValid;
}

bool OAIDescribedAccess::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_home_directory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_directory_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_directory_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_posix_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribedAccess::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
