/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateCertificateRequest.h
 *
 * 
 */

#ifndef OAIUpdateCertificateRequest_H
#define OAIUpdateCertificateRequest_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUpdateCertificateRequest : public OAIObject {
public:
    OAIUpdateCertificateRequest();
    OAIUpdateCertificateRequest(QString json);
    ~OAIUpdateCertificateRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCertificateId() const;
    void setCertificateId(const QString &certificate_id);
    bool is_certificate_id_Set() const;
    bool is_certificate_id_Valid() const;

    QDateTime getActiveDate() const;
    void setActiveDate(const QDateTime &active_date);
    bool is_active_date_Set() const;
    bool is_active_date_Valid() const;

    QDateTime getInactiveDate() const;
    void setInactiveDate(const QDateTime &inactive_date);
    bool is_inactive_date_Set() const;
    bool is_inactive_date_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_certificate_id;
    bool m_certificate_id_isSet;
    bool m_certificate_id_isValid;

    QDateTime m_active_date;
    bool m_active_date_isSet;
    bool m_active_date_isValid;

    QDateTime m_inactive_date;
    bool m_inactive_date_isSet;
    bool m_inactive_date_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateCertificateRequest)

#endif // OAIUpdateCertificateRequest_H
