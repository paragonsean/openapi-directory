/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateAccessRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateAccessRequest::OAIUpdateAccessRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateAccessRequest::OAIUpdateAccessRequest() {
    this->initializeModel();
}

OAIUpdateAccessRequest::~OAIUpdateAccessRequest() {}

void OAIUpdateAccessRequest::initializeModel() {

    m_home_directory_isSet = false;
    m_home_directory_isValid = false;

    m_home_directory_type_isSet = false;
    m_home_directory_type_isValid = false;

    m_home_directory_mappings_isSet = false;
    m_home_directory_mappings_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;

    m_posix_profile_isSet = false;
    m_posix_profile_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_server_id_isSet = false;
    m_server_id_isValid = false;

    m_external_id_isSet = false;
    m_external_id_isValid = false;
}

void OAIUpdateAccessRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateAccessRequest::fromJsonObject(QJsonObject json) {

    m_home_directory_isValid = ::OpenAPI::fromJsonValue(m_home_directory, json[QString("HomeDirectory")]);
    m_home_directory_isSet = !json[QString("HomeDirectory")].isNull() && m_home_directory_isValid;

    m_home_directory_type_isValid = ::OpenAPI::fromJsonValue(m_home_directory_type, json[QString("HomeDirectoryType")]);
    m_home_directory_type_isSet = !json[QString("HomeDirectoryType")].isNull() && m_home_directory_type_isValid;

    m_home_directory_mappings_isValid = ::OpenAPI::fromJsonValue(m_home_directory_mappings, json[QString("HomeDirectoryMappings")]);
    m_home_directory_mappings_isSet = !json[QString("HomeDirectoryMappings")].isNull() && m_home_directory_mappings_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("Policy")]);
    m_policy_isSet = !json[QString("Policy")].isNull() && m_policy_isValid;

    m_posix_profile_isValid = ::OpenAPI::fromJsonValue(m_posix_profile, json[QString("PosixProfile")]);
    m_posix_profile_isSet = !json[QString("PosixProfile")].isNull() && m_posix_profile_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("Role")]);
    m_role_isSet = !json[QString("Role")].isNull() && m_role_isValid;

    m_server_id_isValid = ::OpenAPI::fromJsonValue(m_server_id, json[QString("ServerId")]);
    m_server_id_isSet = !json[QString("ServerId")].isNull() && m_server_id_isValid;

    m_external_id_isValid = ::OpenAPI::fromJsonValue(m_external_id, json[QString("ExternalId")]);
    m_external_id_isSet = !json[QString("ExternalId")].isNull() && m_external_id_isValid;
}

QString OAIUpdateAccessRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateAccessRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_home_directory_isSet) {
        obj.insert(QString("HomeDirectory"), ::OpenAPI::toJsonValue(m_home_directory));
    }
    if (m_home_directory_type.isSet()) {
        obj.insert(QString("HomeDirectoryType"), ::OpenAPI::toJsonValue(m_home_directory_type));
    }
    if (m_home_directory_mappings.isSet()) {
        obj.insert(QString("HomeDirectoryMappings"), ::OpenAPI::toJsonValue(m_home_directory_mappings));
    }
    if (m_policy_isSet) {
        obj.insert(QString("Policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    if (m_posix_profile.isSet()) {
        obj.insert(QString("PosixProfile"), ::OpenAPI::toJsonValue(m_posix_profile));
    }
    if (m_role_isSet) {
        obj.insert(QString("Role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_server_id_isSet) {
        obj.insert(QString("ServerId"), ::OpenAPI::toJsonValue(m_server_id));
    }
    if (m_external_id_isSet) {
        obj.insert(QString("ExternalId"), ::OpenAPI::toJsonValue(m_external_id));
    }
    return obj;
}

QString OAIUpdateAccessRequest::getHomeDirectory() const {
    return m_home_directory;
}
void OAIUpdateAccessRequest::setHomeDirectory(const QString &home_directory) {
    m_home_directory = home_directory;
    m_home_directory_isSet = true;
}

bool OAIUpdateAccessRequest::is_home_directory_Set() const{
    return m_home_directory_isSet;
}

bool OAIUpdateAccessRequest::is_home_directory_Valid() const{
    return m_home_directory_isValid;
}

OAIHomeDirectoryType OAIUpdateAccessRequest::getHomeDirectoryType() const {
    return m_home_directory_type;
}
void OAIUpdateAccessRequest::setHomeDirectoryType(const OAIHomeDirectoryType &home_directory_type) {
    m_home_directory_type = home_directory_type;
    m_home_directory_type_isSet = true;
}

bool OAIUpdateAccessRequest::is_home_directory_type_Set() const{
    return m_home_directory_type_isSet;
}

bool OAIUpdateAccessRequest::is_home_directory_type_Valid() const{
    return m_home_directory_type_isValid;
}

QList OAIUpdateAccessRequest::getHomeDirectoryMappings() const {
    return m_home_directory_mappings;
}
void OAIUpdateAccessRequest::setHomeDirectoryMappings(const QList &home_directory_mappings) {
    m_home_directory_mappings = home_directory_mappings;
    m_home_directory_mappings_isSet = true;
}

bool OAIUpdateAccessRequest::is_home_directory_mappings_Set() const{
    return m_home_directory_mappings_isSet;
}

bool OAIUpdateAccessRequest::is_home_directory_mappings_Valid() const{
    return m_home_directory_mappings_isValid;
}

QString OAIUpdateAccessRequest::getPolicy() const {
    return m_policy;
}
void OAIUpdateAccessRequest::setPolicy(const QString &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIUpdateAccessRequest::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIUpdateAccessRequest::is_policy_Valid() const{
    return m_policy_isValid;
}

OAIPosixProfile OAIUpdateAccessRequest::getPosixProfile() const {
    return m_posix_profile;
}
void OAIUpdateAccessRequest::setPosixProfile(const OAIPosixProfile &posix_profile) {
    m_posix_profile = posix_profile;
    m_posix_profile_isSet = true;
}

bool OAIUpdateAccessRequest::is_posix_profile_Set() const{
    return m_posix_profile_isSet;
}

bool OAIUpdateAccessRequest::is_posix_profile_Valid() const{
    return m_posix_profile_isValid;
}

QString OAIUpdateAccessRequest::getRole() const {
    return m_role;
}
void OAIUpdateAccessRequest::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIUpdateAccessRequest::is_role_Set() const{
    return m_role_isSet;
}

bool OAIUpdateAccessRequest::is_role_Valid() const{
    return m_role_isValid;
}

QString OAIUpdateAccessRequest::getServerId() const {
    return m_server_id;
}
void OAIUpdateAccessRequest::setServerId(const QString &server_id) {
    m_server_id = server_id;
    m_server_id_isSet = true;
}

bool OAIUpdateAccessRequest::is_server_id_Set() const{
    return m_server_id_isSet;
}

bool OAIUpdateAccessRequest::is_server_id_Valid() const{
    return m_server_id_isValid;
}

QString OAIUpdateAccessRequest::getExternalId() const {
    return m_external_id;
}
void OAIUpdateAccessRequest::setExternalId(const QString &external_id) {
    m_external_id = external_id;
    m_external_id_isSet = true;
}

bool OAIUpdateAccessRequest::is_external_id_Set() const{
    return m_external_id_isSet;
}

bool OAIUpdateAccessRequest::is_external_id_Valid() const{
    return m_external_id_isValid;
}

bool OAIUpdateAccessRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_home_directory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_directory_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_directory_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_posix_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateAccessRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_server_id_isValid && m_external_id_isValid && true;
}

} // namespace OpenAPI
