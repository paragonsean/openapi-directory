/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndpointDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndpointDetails::OAIEndpointDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndpointDetails::OAIEndpointDetails() {
    this->initializeModel();
}

OAIEndpointDetails::~OAIEndpointDetails() {}

void OAIEndpointDetails::initializeModel() {

    m_address_allocation_ids_isSet = false;
    m_address_allocation_ids_isValid = false;

    m_subnet_ids_isSet = false;
    m_subnet_ids_isValid = false;

    m_vpc_endpoint_id_isSet = false;
    m_vpc_endpoint_id_isValid = false;

    m_vpc_id_isSet = false;
    m_vpc_id_isValid = false;

    m_security_group_ids_isSet = false;
    m_security_group_ids_isValid = false;
}

void OAIEndpointDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndpointDetails::fromJsonObject(QJsonObject json) {

    m_address_allocation_ids_isValid = ::OpenAPI::fromJsonValue(m_address_allocation_ids, json[QString("AddressAllocationIds")]);
    m_address_allocation_ids_isSet = !json[QString("AddressAllocationIds")].isNull() && m_address_allocation_ids_isValid;

    m_subnet_ids_isValid = ::OpenAPI::fromJsonValue(m_subnet_ids, json[QString("SubnetIds")]);
    m_subnet_ids_isSet = !json[QString("SubnetIds")].isNull() && m_subnet_ids_isValid;

    m_vpc_endpoint_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_endpoint_id, json[QString("VpcEndpointId")]);
    m_vpc_endpoint_id_isSet = !json[QString("VpcEndpointId")].isNull() && m_vpc_endpoint_id_isValid;

    m_vpc_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_id, json[QString("VpcId")]);
    m_vpc_id_isSet = !json[QString("VpcId")].isNull() && m_vpc_id_isValid;

    m_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_security_group_ids, json[QString("SecurityGroupIds")]);
    m_security_group_ids_isSet = !json[QString("SecurityGroupIds")].isNull() && m_security_group_ids_isValid;
}

QString OAIEndpointDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndpointDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_address_allocation_ids.isSet()) {
        obj.insert(QString("AddressAllocationIds"), ::OpenAPI::toJsonValue(m_address_allocation_ids));
    }
    if (m_subnet_ids.isSet()) {
        obj.insert(QString("SubnetIds"), ::OpenAPI::toJsonValue(m_subnet_ids));
    }
    if (m_vpc_endpoint_id_isSet) {
        obj.insert(QString("VpcEndpointId"), ::OpenAPI::toJsonValue(m_vpc_endpoint_id));
    }
    if (m_vpc_id_isSet) {
        obj.insert(QString("VpcId"), ::OpenAPI::toJsonValue(m_vpc_id));
    }
    if (m_security_group_ids.isSet()) {
        obj.insert(QString("SecurityGroupIds"), ::OpenAPI::toJsonValue(m_security_group_ids));
    }
    return obj;
}

QList OAIEndpointDetails::getAddressAllocationIds() const {
    return m_address_allocation_ids;
}
void OAIEndpointDetails::setAddressAllocationIds(const QList &address_allocation_ids) {
    m_address_allocation_ids = address_allocation_ids;
    m_address_allocation_ids_isSet = true;
}

bool OAIEndpointDetails::is_address_allocation_ids_Set() const{
    return m_address_allocation_ids_isSet;
}

bool OAIEndpointDetails::is_address_allocation_ids_Valid() const{
    return m_address_allocation_ids_isValid;
}

QList OAIEndpointDetails::getSubnetIds() const {
    return m_subnet_ids;
}
void OAIEndpointDetails::setSubnetIds(const QList &subnet_ids) {
    m_subnet_ids = subnet_ids;
    m_subnet_ids_isSet = true;
}

bool OAIEndpointDetails::is_subnet_ids_Set() const{
    return m_subnet_ids_isSet;
}

bool OAIEndpointDetails::is_subnet_ids_Valid() const{
    return m_subnet_ids_isValid;
}

QString OAIEndpointDetails::getVpcEndpointId() const {
    return m_vpc_endpoint_id;
}
void OAIEndpointDetails::setVpcEndpointId(const QString &vpc_endpoint_id) {
    m_vpc_endpoint_id = vpc_endpoint_id;
    m_vpc_endpoint_id_isSet = true;
}

bool OAIEndpointDetails::is_vpc_endpoint_id_Set() const{
    return m_vpc_endpoint_id_isSet;
}

bool OAIEndpointDetails::is_vpc_endpoint_id_Valid() const{
    return m_vpc_endpoint_id_isValid;
}

QString OAIEndpointDetails::getVpcId() const {
    return m_vpc_id;
}
void OAIEndpointDetails::setVpcId(const QString &vpc_id) {
    m_vpc_id = vpc_id;
    m_vpc_id_isSet = true;
}

bool OAIEndpointDetails::is_vpc_id_Set() const{
    return m_vpc_id_isSet;
}

bool OAIEndpointDetails::is_vpc_id_Valid() const{
    return m_vpc_id_isValid;
}

QList OAIEndpointDetails::getSecurityGroupIds() const {
    return m_security_group_ids;
}
void OAIEndpointDetails::setSecurityGroupIds(const QList &security_group_ids) {
    m_security_group_ids = security_group_ids;
    m_security_group_ids_isSet = true;
}

bool OAIEndpointDetails::is_security_group_ids_Set() const{
    return m_security_group_ids_isSet;
}

bool OAIEndpointDetails::is_security_group_ids_Valid() const{
    return m_security_group_ids_isValid;
}

bool OAIEndpointDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_allocation_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_endpoint_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndpointDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
