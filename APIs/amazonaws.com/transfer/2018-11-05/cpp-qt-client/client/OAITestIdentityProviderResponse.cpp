/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestIdentityProviderResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestIdentityProviderResponse::OAITestIdentityProviderResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestIdentityProviderResponse::OAITestIdentityProviderResponse() {
    this->initializeModel();
}

OAITestIdentityProviderResponse::~OAITestIdentityProviderResponse() {}

void OAITestIdentityProviderResponse::initializeModel() {

    m_response_isSet = false;
    m_response_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAITestIdentityProviderResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestIdentityProviderResponse::fromJsonObject(QJsonObject json) {

    m_response_isValid = ::OpenAPI::fromJsonValue(m_response, json[QString("Response")]);
    m_response_isSet = !json[QString("Response")].isNull() && m_response_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("StatusCode")]);
    m_status_code_isSet = !json[QString("StatusCode")].isNull() && m_status_code_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("Url")]);
    m_url_isSet = !json[QString("Url")].isNull() && m_url_isValid;
}

QString OAITestIdentityProviderResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestIdentityProviderResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_response_isSet) {
        obj.insert(QString("Response"), ::OpenAPI::toJsonValue(m_response));
    }
    if (m_status_code_isSet) {
        obj.insert(QString("StatusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_url_isSet) {
        obj.insert(QString("Url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAITestIdentityProviderResponse::getResponse() const {
    return m_response;
}
void OAITestIdentityProviderResponse::setResponse(const QString &response) {
    m_response = response;
    m_response_isSet = true;
}

bool OAITestIdentityProviderResponse::is_response_Set() const{
    return m_response_isSet;
}

bool OAITestIdentityProviderResponse::is_response_Valid() const{
    return m_response_isValid;
}

qint32 OAITestIdentityProviderResponse::getStatusCode() const {
    return m_status_code;
}
void OAITestIdentityProviderResponse::setStatusCode(const qint32 &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAITestIdentityProviderResponse::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAITestIdentityProviderResponse::is_status_code_Valid() const{
    return m_status_code_isValid;
}

QString OAITestIdentityProviderResponse::getMessage() const {
    return m_message;
}
void OAITestIdentityProviderResponse::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAITestIdentityProviderResponse::is_message_Set() const{
    return m_message_isSet;
}

bool OAITestIdentityProviderResponse::is_message_Valid() const{
    return m_message_isValid;
}

QString OAITestIdentityProviderResponse::getUrl() const {
    return m_url;
}
void OAITestIdentityProviderResponse::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAITestIdentityProviderResponse::is_url_Set() const{
    return m_url_isSet;
}

bool OAITestIdentityProviderResponse::is_url_Valid() const{
    return m_url_isValid;
}

bool OAITestIdentityProviderResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestIdentityProviderResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_code_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
