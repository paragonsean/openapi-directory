/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIIdentityProviderDetails.h
 *
 * Returns information related to the type of user authentication that is in use for a file transfer protocol-enabled server&#39;s users. A server can have only one method of authentication.
 */

#ifndef OAIIdentityProviderDetails_H
#define OAIIdentityProviderDetails_H

#include <QJsonObject>

#include "OAISftpAuthenticationMethods.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIIdentityProviderDetails : public OAIObject {
public:
    OAIIdentityProviderDetails();
    OAIIdentityProviderDetails(QString json);
    ~OAIIdentityProviderDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    QString getInvocationRole() const;
    void setInvocationRole(const QString &invocation_role);
    bool is_invocation_role_Set() const;
    bool is_invocation_role_Valid() const;

    QString getDirectoryId() const;
    void setDirectoryId(const QString &directory_id);
    bool is_directory_id_Set() const;
    bool is_directory_id_Valid() const;

    QString getFunction() const;
    void setFunction(const QString &function);
    bool is_function_Set() const;
    bool is_function_Valid() const;

    OAISftpAuthenticationMethods getSftpAuthenticationMethods() const;
    void setSftpAuthenticationMethods(const OAISftpAuthenticationMethods &sftp_authentication_methods);
    bool is_sftp_authentication_methods_Set() const;
    bool is_sftp_authentication_methods_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    QString m_invocation_role;
    bool m_invocation_role_isSet;
    bool m_invocation_role_isValid;

    QString m_directory_id;
    bool m_directory_id_isSet;
    bool m_directory_id_isValid;

    QString m_function;
    bool m_function_isSet;
    bool m_function_isValid;

    OAISftpAuthenticationMethods m_sftp_authentication_methods;
    bool m_sftp_authentication_methods_isSet;
    bool m_sftp_authentication_methods_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIIdentityProviderDetails)

#endif // OAIIdentityProviderDetails_H
