/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateConnectorRequest.h
 *
 * 
 */

#ifndef OAIUpdateConnectorRequest_H
#define OAIUpdateConnectorRequest_H

#include <QJsonObject>

#include "OAICreateConnectorRequest_As2Config.h"
#include "OAICreateConnectorRequest_SftpConfig.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateConnectorRequest_As2Config;
class OAICreateConnectorRequest_SftpConfig;

class OAIUpdateConnectorRequest : public OAIObject {
public:
    OAIUpdateConnectorRequest();
    OAIUpdateConnectorRequest(QString json);
    ~OAIUpdateConnectorRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getConnectorId() const;
    void setConnectorId(const QString &connector_id);
    bool is_connector_id_Set() const;
    bool is_connector_id_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    OAICreateConnectorRequest_As2Config getAs2Config() const;
    void setAs2Config(const OAICreateConnectorRequest_As2Config &as2_config);
    bool is_as2_config_Set() const;
    bool is_as2_config_Valid() const;

    QString getAccessRole() const;
    void setAccessRole(const QString &access_role);
    bool is_access_role_Set() const;
    bool is_access_role_Valid() const;

    QString getLoggingRole() const;
    void setLoggingRole(const QString &logging_role);
    bool is_logging_role_Set() const;
    bool is_logging_role_Valid() const;

    OAICreateConnectorRequest_SftpConfig getSftpConfig() const;
    void setSftpConfig(const OAICreateConnectorRequest_SftpConfig &sftp_config);
    bool is_sftp_config_Set() const;
    bool is_sftp_config_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_connector_id;
    bool m_connector_id_isSet;
    bool m_connector_id_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    OAICreateConnectorRequest_As2Config m_as2_config;
    bool m_as2_config_isSet;
    bool m_as2_config_isValid;

    QString m_access_role;
    bool m_access_role_isSet;
    bool m_access_role_isValid;

    QString m_logging_role;
    bool m_logging_role_isSet;
    bool m_logging_role_isValid;

    OAICreateConnectorRequest_SftpConfig m_sftp_config;
    bool m_sftp_config_isSet;
    bool m_sftp_config_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateConnectorRequest)

#endif // OAIUpdateConnectorRequest_H
