/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateAgreementRequest.h
 *
 * 
 */

#ifndef OAICreateAgreementRequest_H
#define OAICreateAgreementRequest_H

#include <QJsonObject>

#include "OAIAgreementStatusType.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateAgreementRequest : public OAIObject {
public:
    OAICreateAgreementRequest();
    OAICreateAgreementRequest(QString json);
    ~OAICreateAgreementRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getServerId() const;
    void setServerId(const QString &server_id);
    bool is_server_id_Set() const;
    bool is_server_id_Valid() const;

    QString getLocalProfileId() const;
    void setLocalProfileId(const QString &local_profile_id);
    bool is_local_profile_id_Set() const;
    bool is_local_profile_id_Valid() const;

    QString getPartnerProfileId() const;
    void setPartnerProfileId(const QString &partner_profile_id);
    bool is_partner_profile_id_Set() const;
    bool is_partner_profile_id_Valid() const;

    QString getBaseDirectory() const;
    void setBaseDirectory(const QString &base_directory);
    bool is_base_directory_Set() const;
    bool is_base_directory_Valid() const;

    QString getAccessRole() const;
    void setAccessRole(const QString &access_role);
    bool is_access_role_Set() const;
    bool is_access_role_Valid() const;

    OAIAgreementStatusType getStatus() const;
    void setStatus(const OAIAgreementStatusType &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_server_id;
    bool m_server_id_isSet;
    bool m_server_id_isValid;

    QString m_local_profile_id;
    bool m_local_profile_id_isSet;
    bool m_local_profile_id_isValid;

    QString m_partner_profile_id;
    bool m_partner_profile_id_isSet;
    bool m_partner_profile_id_isValid;

    QString m_base_directory;
    bool m_base_directory_isSet;
    bool m_base_directory_isValid;

    QString m_access_role;
    bool m_access_role_isSet;
    bool m_access_role_isValid;

    OAIAgreementStatusType m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateAgreementRequest)

#endif // OAICreateAgreementRequest_H
