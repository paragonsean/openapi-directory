/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartFileTransferRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartFileTransferRequest::OAIStartFileTransferRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartFileTransferRequest::OAIStartFileTransferRequest() {
    this->initializeModel();
}

OAIStartFileTransferRequest::~OAIStartFileTransferRequest() {}

void OAIStartFileTransferRequest::initializeModel() {

    m_connector_id_isSet = false;
    m_connector_id_isValid = false;

    m_send_file_paths_isSet = false;
    m_send_file_paths_isValid = false;

    m_retrieve_file_paths_isSet = false;
    m_retrieve_file_paths_isValid = false;

    m_local_directory_path_isSet = false;
    m_local_directory_path_isValid = false;

    m_remote_directory_path_isSet = false;
    m_remote_directory_path_isValid = false;
}

void OAIStartFileTransferRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartFileTransferRequest::fromJsonObject(QJsonObject json) {

    m_connector_id_isValid = ::OpenAPI::fromJsonValue(m_connector_id, json[QString("ConnectorId")]);
    m_connector_id_isSet = !json[QString("ConnectorId")].isNull() && m_connector_id_isValid;

    m_send_file_paths_isValid = ::OpenAPI::fromJsonValue(m_send_file_paths, json[QString("SendFilePaths")]);
    m_send_file_paths_isSet = !json[QString("SendFilePaths")].isNull() && m_send_file_paths_isValid;

    m_retrieve_file_paths_isValid = ::OpenAPI::fromJsonValue(m_retrieve_file_paths, json[QString("RetrieveFilePaths")]);
    m_retrieve_file_paths_isSet = !json[QString("RetrieveFilePaths")].isNull() && m_retrieve_file_paths_isValid;

    m_local_directory_path_isValid = ::OpenAPI::fromJsonValue(m_local_directory_path, json[QString("LocalDirectoryPath")]);
    m_local_directory_path_isSet = !json[QString("LocalDirectoryPath")].isNull() && m_local_directory_path_isValid;

    m_remote_directory_path_isValid = ::OpenAPI::fromJsonValue(m_remote_directory_path, json[QString("RemoteDirectoryPath")]);
    m_remote_directory_path_isSet = !json[QString("RemoteDirectoryPath")].isNull() && m_remote_directory_path_isValid;
}

QString OAIStartFileTransferRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartFileTransferRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_connector_id_isSet) {
        obj.insert(QString("ConnectorId"), ::OpenAPI::toJsonValue(m_connector_id));
    }
    if (m_send_file_paths.isSet()) {
        obj.insert(QString("SendFilePaths"), ::OpenAPI::toJsonValue(m_send_file_paths));
    }
    if (m_retrieve_file_paths.isSet()) {
        obj.insert(QString("RetrieveFilePaths"), ::OpenAPI::toJsonValue(m_retrieve_file_paths));
    }
    if (m_local_directory_path_isSet) {
        obj.insert(QString("LocalDirectoryPath"), ::OpenAPI::toJsonValue(m_local_directory_path));
    }
    if (m_remote_directory_path_isSet) {
        obj.insert(QString("RemoteDirectoryPath"), ::OpenAPI::toJsonValue(m_remote_directory_path));
    }
    return obj;
}

QString OAIStartFileTransferRequest::getConnectorId() const {
    return m_connector_id;
}
void OAIStartFileTransferRequest::setConnectorId(const QString &connector_id) {
    m_connector_id = connector_id;
    m_connector_id_isSet = true;
}

bool OAIStartFileTransferRequest::is_connector_id_Set() const{
    return m_connector_id_isSet;
}

bool OAIStartFileTransferRequest::is_connector_id_Valid() const{
    return m_connector_id_isValid;
}

QList OAIStartFileTransferRequest::getSendFilePaths() const {
    return m_send_file_paths;
}
void OAIStartFileTransferRequest::setSendFilePaths(const QList &send_file_paths) {
    m_send_file_paths = send_file_paths;
    m_send_file_paths_isSet = true;
}

bool OAIStartFileTransferRequest::is_send_file_paths_Set() const{
    return m_send_file_paths_isSet;
}

bool OAIStartFileTransferRequest::is_send_file_paths_Valid() const{
    return m_send_file_paths_isValid;
}

QList OAIStartFileTransferRequest::getRetrieveFilePaths() const {
    return m_retrieve_file_paths;
}
void OAIStartFileTransferRequest::setRetrieveFilePaths(const QList &retrieve_file_paths) {
    m_retrieve_file_paths = retrieve_file_paths;
    m_retrieve_file_paths_isSet = true;
}

bool OAIStartFileTransferRequest::is_retrieve_file_paths_Set() const{
    return m_retrieve_file_paths_isSet;
}

bool OAIStartFileTransferRequest::is_retrieve_file_paths_Valid() const{
    return m_retrieve_file_paths_isValid;
}

QString OAIStartFileTransferRequest::getLocalDirectoryPath() const {
    return m_local_directory_path;
}
void OAIStartFileTransferRequest::setLocalDirectoryPath(const QString &local_directory_path) {
    m_local_directory_path = local_directory_path;
    m_local_directory_path_isSet = true;
}

bool OAIStartFileTransferRequest::is_local_directory_path_Set() const{
    return m_local_directory_path_isSet;
}

bool OAIStartFileTransferRequest::is_local_directory_path_Valid() const{
    return m_local_directory_path_isValid;
}

QString OAIStartFileTransferRequest::getRemoteDirectoryPath() const {
    return m_remote_directory_path;
}
void OAIStartFileTransferRequest::setRemoteDirectoryPath(const QString &remote_directory_path) {
    m_remote_directory_path = remote_directory_path;
    m_remote_directory_path_isSet = true;
}

bool OAIStartFileTransferRequest::is_remote_directory_path_Set() const{
    return m_remote_directory_path_isSet;
}

bool OAIStartFileTransferRequest::is_remote_directory_path_Valid() const{
    return m_remote_directory_path_isValid;
}

bool OAIStartFileTransferRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connector_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_file_paths.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retrieve_file_paths.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_directory_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_directory_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartFileTransferRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_connector_id_isValid && true;
}

} // namespace OpenAPI
