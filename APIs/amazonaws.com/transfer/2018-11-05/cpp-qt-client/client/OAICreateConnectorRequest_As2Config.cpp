/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateConnectorRequest_As2Config.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateConnectorRequest_As2Config::OAICreateConnectorRequest_As2Config(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateConnectorRequest_As2Config::OAICreateConnectorRequest_As2Config() {
    this->initializeModel();
}

OAICreateConnectorRequest_As2Config::~OAICreateConnectorRequest_As2Config() {}

void OAICreateConnectorRequest_As2Config::initializeModel() {

    m_local_profile_id_isSet = false;
    m_local_profile_id_isValid = false;

    m_partner_profile_id_isSet = false;
    m_partner_profile_id_isValid = false;

    m_message_subject_isSet = false;
    m_message_subject_isValid = false;

    m_compression_isSet = false;
    m_compression_isValid = false;

    m_encryption_algorithm_isSet = false;
    m_encryption_algorithm_isValid = false;

    m_signing_algorithm_isSet = false;
    m_signing_algorithm_isValid = false;

    m_mdn_signing_algorithm_isSet = false;
    m_mdn_signing_algorithm_isValid = false;

    m_mdn_response_isSet = false;
    m_mdn_response_isValid = false;

    m_basic_auth_secret_id_isSet = false;
    m_basic_auth_secret_id_isValid = false;
}

void OAICreateConnectorRequest_As2Config::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateConnectorRequest_As2Config::fromJsonObject(QJsonObject json) {

    m_local_profile_id_isValid = ::OpenAPI::fromJsonValue(m_local_profile_id, json[QString("LocalProfileId")]);
    m_local_profile_id_isSet = !json[QString("LocalProfileId")].isNull() && m_local_profile_id_isValid;

    m_partner_profile_id_isValid = ::OpenAPI::fromJsonValue(m_partner_profile_id, json[QString("PartnerProfileId")]);
    m_partner_profile_id_isSet = !json[QString("PartnerProfileId")].isNull() && m_partner_profile_id_isValid;

    m_message_subject_isValid = ::OpenAPI::fromJsonValue(m_message_subject, json[QString("MessageSubject")]);
    m_message_subject_isSet = !json[QString("MessageSubject")].isNull() && m_message_subject_isValid;

    m_compression_isValid = ::OpenAPI::fromJsonValue(m_compression, json[QString("Compression")]);
    m_compression_isSet = !json[QString("Compression")].isNull() && m_compression_isValid;

    m_encryption_algorithm_isValid = ::OpenAPI::fromJsonValue(m_encryption_algorithm, json[QString("EncryptionAlgorithm")]);
    m_encryption_algorithm_isSet = !json[QString("EncryptionAlgorithm")].isNull() && m_encryption_algorithm_isValid;

    m_signing_algorithm_isValid = ::OpenAPI::fromJsonValue(m_signing_algorithm, json[QString("SigningAlgorithm")]);
    m_signing_algorithm_isSet = !json[QString("SigningAlgorithm")].isNull() && m_signing_algorithm_isValid;

    m_mdn_signing_algorithm_isValid = ::OpenAPI::fromJsonValue(m_mdn_signing_algorithm, json[QString("MdnSigningAlgorithm")]);
    m_mdn_signing_algorithm_isSet = !json[QString("MdnSigningAlgorithm")].isNull() && m_mdn_signing_algorithm_isValid;

    m_mdn_response_isValid = ::OpenAPI::fromJsonValue(m_mdn_response, json[QString("MdnResponse")]);
    m_mdn_response_isSet = !json[QString("MdnResponse")].isNull() && m_mdn_response_isValid;

    m_basic_auth_secret_id_isValid = ::OpenAPI::fromJsonValue(m_basic_auth_secret_id, json[QString("BasicAuthSecretId")]);
    m_basic_auth_secret_id_isSet = !json[QString("BasicAuthSecretId")].isNull() && m_basic_auth_secret_id_isValid;
}

QString OAICreateConnectorRequest_As2Config::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateConnectorRequest_As2Config::asJsonObject() const {
    QJsonObject obj;
    if (m_local_profile_id_isSet) {
        obj.insert(QString("LocalProfileId"), ::OpenAPI::toJsonValue(m_local_profile_id));
    }
    if (m_partner_profile_id_isSet) {
        obj.insert(QString("PartnerProfileId"), ::OpenAPI::toJsonValue(m_partner_profile_id));
    }
    if (m_message_subject_isSet) {
        obj.insert(QString("MessageSubject"), ::OpenAPI::toJsonValue(m_message_subject));
    }
    if (m_compression.isSet()) {
        obj.insert(QString("Compression"), ::OpenAPI::toJsonValue(m_compression));
    }
    if (m_encryption_algorithm.isSet()) {
        obj.insert(QString("EncryptionAlgorithm"), ::OpenAPI::toJsonValue(m_encryption_algorithm));
    }
    if (m_signing_algorithm.isSet()) {
        obj.insert(QString("SigningAlgorithm"), ::OpenAPI::toJsonValue(m_signing_algorithm));
    }
    if (m_mdn_signing_algorithm.isSet()) {
        obj.insert(QString("MdnSigningAlgorithm"), ::OpenAPI::toJsonValue(m_mdn_signing_algorithm));
    }
    if (m_mdn_response.isSet()) {
        obj.insert(QString("MdnResponse"), ::OpenAPI::toJsonValue(m_mdn_response));
    }
    if (m_basic_auth_secret_id_isSet) {
        obj.insert(QString("BasicAuthSecretId"), ::OpenAPI::toJsonValue(m_basic_auth_secret_id));
    }
    return obj;
}

QString OAICreateConnectorRequest_As2Config::getLocalProfileId() const {
    return m_local_profile_id;
}
void OAICreateConnectorRequest_As2Config::setLocalProfileId(const QString &local_profile_id) {
    m_local_profile_id = local_profile_id;
    m_local_profile_id_isSet = true;
}

bool OAICreateConnectorRequest_As2Config::is_local_profile_id_Set() const{
    return m_local_profile_id_isSet;
}

bool OAICreateConnectorRequest_As2Config::is_local_profile_id_Valid() const{
    return m_local_profile_id_isValid;
}

QString OAICreateConnectorRequest_As2Config::getPartnerProfileId() const {
    return m_partner_profile_id;
}
void OAICreateConnectorRequest_As2Config::setPartnerProfileId(const QString &partner_profile_id) {
    m_partner_profile_id = partner_profile_id;
    m_partner_profile_id_isSet = true;
}

bool OAICreateConnectorRequest_As2Config::is_partner_profile_id_Set() const{
    return m_partner_profile_id_isSet;
}

bool OAICreateConnectorRequest_As2Config::is_partner_profile_id_Valid() const{
    return m_partner_profile_id_isValid;
}

QString OAICreateConnectorRequest_As2Config::getMessageSubject() const {
    return m_message_subject;
}
void OAICreateConnectorRequest_As2Config::setMessageSubject(const QString &message_subject) {
    m_message_subject = message_subject;
    m_message_subject_isSet = true;
}

bool OAICreateConnectorRequest_As2Config::is_message_subject_Set() const{
    return m_message_subject_isSet;
}

bool OAICreateConnectorRequest_As2Config::is_message_subject_Valid() const{
    return m_message_subject_isValid;
}

OAICompressionEnum OAICreateConnectorRequest_As2Config::getCompression() const {
    return m_compression;
}
void OAICreateConnectorRequest_As2Config::setCompression(const OAICompressionEnum &compression) {
    m_compression = compression;
    m_compression_isSet = true;
}

bool OAICreateConnectorRequest_As2Config::is_compression_Set() const{
    return m_compression_isSet;
}

bool OAICreateConnectorRequest_As2Config::is_compression_Valid() const{
    return m_compression_isValid;
}

OAIEncryptionAlg OAICreateConnectorRequest_As2Config::getEncryptionAlgorithm() const {
    return m_encryption_algorithm;
}
void OAICreateConnectorRequest_As2Config::setEncryptionAlgorithm(const OAIEncryptionAlg &encryption_algorithm) {
    m_encryption_algorithm = encryption_algorithm;
    m_encryption_algorithm_isSet = true;
}

bool OAICreateConnectorRequest_As2Config::is_encryption_algorithm_Set() const{
    return m_encryption_algorithm_isSet;
}

bool OAICreateConnectorRequest_As2Config::is_encryption_algorithm_Valid() const{
    return m_encryption_algorithm_isValid;
}

OAISigningAlg OAICreateConnectorRequest_As2Config::getSigningAlgorithm() const {
    return m_signing_algorithm;
}
void OAICreateConnectorRequest_As2Config::setSigningAlgorithm(const OAISigningAlg &signing_algorithm) {
    m_signing_algorithm = signing_algorithm;
    m_signing_algorithm_isSet = true;
}

bool OAICreateConnectorRequest_As2Config::is_signing_algorithm_Set() const{
    return m_signing_algorithm_isSet;
}

bool OAICreateConnectorRequest_As2Config::is_signing_algorithm_Valid() const{
    return m_signing_algorithm_isValid;
}

OAIMdnSigningAlg OAICreateConnectorRequest_As2Config::getMdnSigningAlgorithm() const {
    return m_mdn_signing_algorithm;
}
void OAICreateConnectorRequest_As2Config::setMdnSigningAlgorithm(const OAIMdnSigningAlg &mdn_signing_algorithm) {
    m_mdn_signing_algorithm = mdn_signing_algorithm;
    m_mdn_signing_algorithm_isSet = true;
}

bool OAICreateConnectorRequest_As2Config::is_mdn_signing_algorithm_Set() const{
    return m_mdn_signing_algorithm_isSet;
}

bool OAICreateConnectorRequest_As2Config::is_mdn_signing_algorithm_Valid() const{
    return m_mdn_signing_algorithm_isValid;
}

OAIMdnResponse OAICreateConnectorRequest_As2Config::getMdnResponse() const {
    return m_mdn_response;
}
void OAICreateConnectorRequest_As2Config::setMdnResponse(const OAIMdnResponse &mdn_response) {
    m_mdn_response = mdn_response;
    m_mdn_response_isSet = true;
}

bool OAICreateConnectorRequest_As2Config::is_mdn_response_Set() const{
    return m_mdn_response_isSet;
}

bool OAICreateConnectorRequest_As2Config::is_mdn_response_Valid() const{
    return m_mdn_response_isValid;
}

QString OAICreateConnectorRequest_As2Config::getBasicAuthSecretId() const {
    return m_basic_auth_secret_id;
}
void OAICreateConnectorRequest_As2Config::setBasicAuthSecretId(const QString &basic_auth_secret_id) {
    m_basic_auth_secret_id = basic_auth_secret_id;
    m_basic_auth_secret_id_isSet = true;
}

bool OAICreateConnectorRequest_As2Config::is_basic_auth_secret_id_Set() const{
    return m_basic_auth_secret_id_isSet;
}

bool OAICreateConnectorRequest_As2Config::is_basic_auth_secret_id_Valid() const{
    return m_basic_auth_secret_id_isValid;
}

bool OAICreateConnectorRequest_As2Config::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_local_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compression.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_algorithm.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_signing_algorithm.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mdn_signing_algorithm.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mdn_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_basic_auth_secret_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateConnectorRequest_As2Config::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
