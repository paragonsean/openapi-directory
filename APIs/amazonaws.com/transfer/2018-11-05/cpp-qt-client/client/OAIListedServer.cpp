/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListedServer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListedServer::OAIListedServer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListedServer::OAIListedServer() {
    this->initializeModel();
}

OAIListedServer::~OAIListedServer() {}

void OAIListedServer::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_identity_provider_type_isSet = false;
    m_identity_provider_type_isValid = false;

    m_endpoint_type_isSet = false;
    m_endpoint_type_isValid = false;

    m_logging_role_isSet = false;
    m_logging_role_isValid = false;

    m_server_id_isSet = false;
    m_server_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_user_count_isSet = false;
    m_user_count_isValid = false;
}

void OAIListedServer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListedServer::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("Domain")]);
    m_domain_isSet = !json[QString("Domain")].isNull() && m_domain_isValid;

    m_identity_provider_type_isValid = ::OpenAPI::fromJsonValue(m_identity_provider_type, json[QString("IdentityProviderType")]);
    m_identity_provider_type_isSet = !json[QString("IdentityProviderType")].isNull() && m_identity_provider_type_isValid;

    m_endpoint_type_isValid = ::OpenAPI::fromJsonValue(m_endpoint_type, json[QString("EndpointType")]);
    m_endpoint_type_isSet = !json[QString("EndpointType")].isNull() && m_endpoint_type_isValid;

    m_logging_role_isValid = ::OpenAPI::fromJsonValue(m_logging_role, json[QString("LoggingRole")]);
    m_logging_role_isSet = !json[QString("LoggingRole")].isNull() && m_logging_role_isValid;

    m_server_id_isValid = ::OpenAPI::fromJsonValue(m_server_id, json[QString("ServerId")]);
    m_server_id_isSet = !json[QString("ServerId")].isNull() && m_server_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_user_count_isValid = ::OpenAPI::fromJsonValue(m_user_count, json[QString("UserCount")]);
    m_user_count_isSet = !json[QString("UserCount")].isNull() && m_user_count_isValid;
}

QString OAIListedServer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListedServer::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_domain.isSet()) {
        obj.insert(QString("Domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_identity_provider_type.isSet()) {
        obj.insert(QString("IdentityProviderType"), ::OpenAPI::toJsonValue(m_identity_provider_type));
    }
    if (m_endpoint_type.isSet()) {
        obj.insert(QString("EndpointType"), ::OpenAPI::toJsonValue(m_endpoint_type));
    }
    if (m_logging_role_isSet) {
        obj.insert(QString("LoggingRole"), ::OpenAPI::toJsonValue(m_logging_role));
    }
    if (m_server_id_isSet) {
        obj.insert(QString("ServerId"), ::OpenAPI::toJsonValue(m_server_id));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_user_count_isSet) {
        obj.insert(QString("UserCount"), ::OpenAPI::toJsonValue(m_user_count));
    }
    return obj;
}

QString OAIListedServer::getArn() const {
    return m_arn;
}
void OAIListedServer::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIListedServer::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIListedServer::is_arn_Valid() const{
    return m_arn_isValid;
}

OAIDomain OAIListedServer::getDomain() const {
    return m_domain;
}
void OAIListedServer::setDomain(const OAIDomain &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIListedServer::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIListedServer::is_domain_Valid() const{
    return m_domain_isValid;
}

OAIIdentityProviderType OAIListedServer::getIdentityProviderType() const {
    return m_identity_provider_type;
}
void OAIListedServer::setIdentityProviderType(const OAIIdentityProviderType &identity_provider_type) {
    m_identity_provider_type = identity_provider_type;
    m_identity_provider_type_isSet = true;
}

bool OAIListedServer::is_identity_provider_type_Set() const{
    return m_identity_provider_type_isSet;
}

bool OAIListedServer::is_identity_provider_type_Valid() const{
    return m_identity_provider_type_isValid;
}

OAIEndpointType OAIListedServer::getEndpointType() const {
    return m_endpoint_type;
}
void OAIListedServer::setEndpointType(const OAIEndpointType &endpoint_type) {
    m_endpoint_type = endpoint_type;
    m_endpoint_type_isSet = true;
}

bool OAIListedServer::is_endpoint_type_Set() const{
    return m_endpoint_type_isSet;
}

bool OAIListedServer::is_endpoint_type_Valid() const{
    return m_endpoint_type_isValid;
}

QString OAIListedServer::getLoggingRole() const {
    return m_logging_role;
}
void OAIListedServer::setLoggingRole(const QString &logging_role) {
    m_logging_role = logging_role;
    m_logging_role_isSet = true;
}

bool OAIListedServer::is_logging_role_Set() const{
    return m_logging_role_isSet;
}

bool OAIListedServer::is_logging_role_Valid() const{
    return m_logging_role_isValid;
}

QString OAIListedServer::getServerId() const {
    return m_server_id;
}
void OAIListedServer::setServerId(const QString &server_id) {
    m_server_id = server_id;
    m_server_id_isSet = true;
}

bool OAIListedServer::is_server_id_Set() const{
    return m_server_id_isSet;
}

bool OAIListedServer::is_server_id_Valid() const{
    return m_server_id_isValid;
}

OAIState OAIListedServer::getState() const {
    return m_state;
}
void OAIListedServer::setState(const OAIState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIListedServer::is_state_Set() const{
    return m_state_isSet;
}

bool OAIListedServer::is_state_Valid() const{
    return m_state_isValid;
}

qint32 OAIListedServer::getUserCount() const {
    return m_user_count;
}
void OAIListedServer::setUserCount(const qint32 &user_count) {
    m_user_count = user_count;
    m_user_count_isSet = true;
}

bool OAIListedServer::is_user_count_Set() const{
    return m_user_count_isSet;
}

bool OAIListedServer::is_user_count_Valid() const{
    return m_user_count_isValid;
}

bool OAIListedServer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_provider_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListedServer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && true;
}

} // namespace OpenAPI
