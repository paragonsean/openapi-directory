/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestIdentityProviderRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestIdentityProviderRequest::OAITestIdentityProviderRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestIdentityProviderRequest::OAITestIdentityProviderRequest() {
    this->initializeModel();
}

OAITestIdentityProviderRequest::~OAITestIdentityProviderRequest() {}

void OAITestIdentityProviderRequest::initializeModel() {

    m_server_id_isSet = false;
    m_server_id_isValid = false;

    m_server_protocol_isSet = false;
    m_server_protocol_isValid = false;

    m_source_ip_isSet = false;
    m_source_ip_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;

    m_user_password_isSet = false;
    m_user_password_isValid = false;
}

void OAITestIdentityProviderRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestIdentityProviderRequest::fromJsonObject(QJsonObject json) {

    m_server_id_isValid = ::OpenAPI::fromJsonValue(m_server_id, json[QString("ServerId")]);
    m_server_id_isSet = !json[QString("ServerId")].isNull() && m_server_id_isValid;

    m_server_protocol_isValid = ::OpenAPI::fromJsonValue(m_server_protocol, json[QString("ServerProtocol")]);
    m_server_protocol_isSet = !json[QString("ServerProtocol")].isNull() && m_server_protocol_isValid;

    m_source_ip_isValid = ::OpenAPI::fromJsonValue(m_source_ip, json[QString("SourceIp")]);
    m_source_ip_isSet = !json[QString("SourceIp")].isNull() && m_source_ip_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("UserName")]);
    m_user_name_isSet = !json[QString("UserName")].isNull() && m_user_name_isValid;

    m_user_password_isValid = ::OpenAPI::fromJsonValue(m_user_password, json[QString("UserPassword")]);
    m_user_password_isSet = !json[QString("UserPassword")].isNull() && m_user_password_isValid;
}

QString OAITestIdentityProviderRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestIdentityProviderRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_server_id_isSet) {
        obj.insert(QString("ServerId"), ::OpenAPI::toJsonValue(m_server_id));
    }
    if (m_server_protocol.isSet()) {
        obj.insert(QString("ServerProtocol"), ::OpenAPI::toJsonValue(m_server_protocol));
    }
    if (m_source_ip_isSet) {
        obj.insert(QString("SourceIp"), ::OpenAPI::toJsonValue(m_source_ip));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("UserName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    if (m_user_password_isSet) {
        obj.insert(QString("UserPassword"), ::OpenAPI::toJsonValue(m_user_password));
    }
    return obj;
}

QString OAITestIdentityProviderRequest::getServerId() const {
    return m_server_id;
}
void OAITestIdentityProviderRequest::setServerId(const QString &server_id) {
    m_server_id = server_id;
    m_server_id_isSet = true;
}

bool OAITestIdentityProviderRequest::is_server_id_Set() const{
    return m_server_id_isSet;
}

bool OAITestIdentityProviderRequest::is_server_id_Valid() const{
    return m_server_id_isValid;
}

OAIProtocol OAITestIdentityProviderRequest::getServerProtocol() const {
    return m_server_protocol;
}
void OAITestIdentityProviderRequest::setServerProtocol(const OAIProtocol &server_protocol) {
    m_server_protocol = server_protocol;
    m_server_protocol_isSet = true;
}

bool OAITestIdentityProviderRequest::is_server_protocol_Set() const{
    return m_server_protocol_isSet;
}

bool OAITestIdentityProviderRequest::is_server_protocol_Valid() const{
    return m_server_protocol_isValid;
}

QString OAITestIdentityProviderRequest::getSourceIp() const {
    return m_source_ip;
}
void OAITestIdentityProviderRequest::setSourceIp(const QString &source_ip) {
    m_source_ip = source_ip;
    m_source_ip_isSet = true;
}

bool OAITestIdentityProviderRequest::is_source_ip_Set() const{
    return m_source_ip_isSet;
}

bool OAITestIdentityProviderRequest::is_source_ip_Valid() const{
    return m_source_ip_isValid;
}

QString OAITestIdentityProviderRequest::getUserName() const {
    return m_user_name;
}
void OAITestIdentityProviderRequest::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAITestIdentityProviderRequest::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAITestIdentityProviderRequest::is_user_name_Valid() const{
    return m_user_name_isValid;
}

QString OAITestIdentityProviderRequest::getUserPassword() const {
    return m_user_password;
}
void OAITestIdentityProviderRequest::setUserPassword(const QString &user_password) {
    m_user_password = user_password;
    m_user_password_isSet = true;
}

bool OAITestIdentityProviderRequest::is_user_password_Set() const{
    return m_user_password_isSet;
}

bool OAITestIdentityProviderRequest::is_user_password_Valid() const{
    return m_user_password_isValid;
}

bool OAITestIdentityProviderRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_protocol.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_password_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestIdentityProviderRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_server_id_isValid && m_user_name_isValid && true;
}

} // namespace OpenAPI
