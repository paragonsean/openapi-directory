/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeCertificateResponse_Certificate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeCertificateResponse_Certificate::OAIDescribeCertificateResponse_Certificate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeCertificateResponse_Certificate::OAIDescribeCertificateResponse_Certificate() {
    this->initializeModel();
}

OAIDescribeCertificateResponse_Certificate::~OAIDescribeCertificateResponse_Certificate() {}

void OAIDescribeCertificateResponse_Certificate::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_certificate_id_isSet = false;
    m_certificate_id_isValid = false;

    m_usage_isSet = false;
    m_usage_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_certificate_isSet = false;
    m_certificate_isValid = false;

    m_certificate_chain_isSet = false;
    m_certificate_chain_isValid = false;

    m_active_date_isSet = false;
    m_active_date_isValid = false;

    m_inactive_date_isSet = false;
    m_inactive_date_isValid = false;

    m_serial_isSet = false;
    m_serial_isValid = false;

    m_not_before_date_isSet = false;
    m_not_before_date_isValid = false;

    m_not_after_date_isSet = false;
    m_not_after_date_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIDescribeCertificateResponse_Certificate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeCertificateResponse_Certificate::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_certificate_id_isValid = ::OpenAPI::fromJsonValue(m_certificate_id, json[QString("CertificateId")]);
    m_certificate_id_isSet = !json[QString("CertificateId")].isNull() && m_certificate_id_isValid;

    m_usage_isValid = ::OpenAPI::fromJsonValue(m_usage, json[QString("Usage")]);
    m_usage_isSet = !json[QString("Usage")].isNull() && m_usage_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_certificate_isValid = ::OpenAPI::fromJsonValue(m_certificate, json[QString("Certificate")]);
    m_certificate_isSet = !json[QString("Certificate")].isNull() && m_certificate_isValid;

    m_certificate_chain_isValid = ::OpenAPI::fromJsonValue(m_certificate_chain, json[QString("CertificateChain")]);
    m_certificate_chain_isSet = !json[QString("CertificateChain")].isNull() && m_certificate_chain_isValid;

    m_active_date_isValid = ::OpenAPI::fromJsonValue(m_active_date, json[QString("ActiveDate")]);
    m_active_date_isSet = !json[QString("ActiveDate")].isNull() && m_active_date_isValid;

    m_inactive_date_isValid = ::OpenAPI::fromJsonValue(m_inactive_date, json[QString("InactiveDate")]);
    m_inactive_date_isSet = !json[QString("InactiveDate")].isNull() && m_inactive_date_isValid;

    m_serial_isValid = ::OpenAPI::fromJsonValue(m_serial, json[QString("Serial")]);
    m_serial_isSet = !json[QString("Serial")].isNull() && m_serial_isValid;

    m_not_before_date_isValid = ::OpenAPI::fromJsonValue(m_not_before_date, json[QString("NotBeforeDate")]);
    m_not_before_date_isSet = !json[QString("NotBeforeDate")].isNull() && m_not_before_date_isValid;

    m_not_after_date_isValid = ::OpenAPI::fromJsonValue(m_not_after_date, json[QString("NotAfterDate")]);
    m_not_after_date_isSet = !json[QString("NotAfterDate")].isNull() && m_not_after_date_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIDescribeCertificateResponse_Certificate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeCertificateResponse_Certificate::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_certificate_id_isSet) {
        obj.insert(QString("CertificateId"), ::OpenAPI::toJsonValue(m_certificate_id));
    }
    if (m_usage.isSet()) {
        obj.insert(QString("Usage"), ::OpenAPI::toJsonValue(m_usage));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_certificate_isSet) {
        obj.insert(QString("Certificate"), ::OpenAPI::toJsonValue(m_certificate));
    }
    if (m_certificate_chain_isSet) {
        obj.insert(QString("CertificateChain"), ::OpenAPI::toJsonValue(m_certificate_chain));
    }
    if (m_active_date_isSet) {
        obj.insert(QString("ActiveDate"), ::OpenAPI::toJsonValue(m_active_date));
    }
    if (m_inactive_date_isSet) {
        obj.insert(QString("InactiveDate"), ::OpenAPI::toJsonValue(m_inactive_date));
    }
    if (m_serial_isSet) {
        obj.insert(QString("Serial"), ::OpenAPI::toJsonValue(m_serial));
    }
    if (m_not_before_date_isSet) {
        obj.insert(QString("NotBeforeDate"), ::OpenAPI::toJsonValue(m_not_before_date));
    }
    if (m_not_after_date_isSet) {
        obj.insert(QString("NotAfterDate"), ::OpenAPI::toJsonValue(m_not_after_date));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIDescribeCertificateResponse_Certificate::getArn() const {
    return m_arn;
}
void OAIDescribeCertificateResponse_Certificate::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDescribeCertificateResponse_Certificate::getCertificateId() const {
    return m_certificate_id;
}
void OAIDescribeCertificateResponse_Certificate::setCertificateId(const QString &certificate_id) {
    m_certificate_id = certificate_id;
    m_certificate_id_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_certificate_id_Set() const{
    return m_certificate_id_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_certificate_id_Valid() const{
    return m_certificate_id_isValid;
}

OAICertificateUsageType OAIDescribeCertificateResponse_Certificate::getUsage() const {
    return m_usage;
}
void OAIDescribeCertificateResponse_Certificate::setUsage(const OAICertificateUsageType &usage) {
    m_usage = usage;
    m_usage_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_usage_Set() const{
    return m_usage_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_usage_Valid() const{
    return m_usage_isValid;
}

OAICertificateStatusType OAIDescribeCertificateResponse_Certificate::getStatus() const {
    return m_status;
}
void OAIDescribeCertificateResponse_Certificate::setStatus(const OAICertificateStatusType &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDescribeCertificateResponse_Certificate::getCertificate() const {
    return m_certificate;
}
void OAIDescribeCertificateResponse_Certificate::setCertificate(const QString &certificate) {
    m_certificate = certificate;
    m_certificate_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_certificate_Set() const{
    return m_certificate_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_certificate_Valid() const{
    return m_certificate_isValid;
}

QString OAIDescribeCertificateResponse_Certificate::getCertificateChain() const {
    return m_certificate_chain;
}
void OAIDescribeCertificateResponse_Certificate::setCertificateChain(const QString &certificate_chain) {
    m_certificate_chain = certificate_chain;
    m_certificate_chain_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_certificate_chain_Set() const{
    return m_certificate_chain_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_certificate_chain_Valid() const{
    return m_certificate_chain_isValid;
}

QDateTime OAIDescribeCertificateResponse_Certificate::getActiveDate() const {
    return m_active_date;
}
void OAIDescribeCertificateResponse_Certificate::setActiveDate(const QDateTime &active_date) {
    m_active_date = active_date;
    m_active_date_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_active_date_Set() const{
    return m_active_date_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_active_date_Valid() const{
    return m_active_date_isValid;
}

QDateTime OAIDescribeCertificateResponse_Certificate::getInactiveDate() const {
    return m_inactive_date;
}
void OAIDescribeCertificateResponse_Certificate::setInactiveDate(const QDateTime &inactive_date) {
    m_inactive_date = inactive_date;
    m_inactive_date_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_inactive_date_Set() const{
    return m_inactive_date_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_inactive_date_Valid() const{
    return m_inactive_date_isValid;
}

QString OAIDescribeCertificateResponse_Certificate::getSerial() const {
    return m_serial;
}
void OAIDescribeCertificateResponse_Certificate::setSerial(const QString &serial) {
    m_serial = serial;
    m_serial_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_serial_Set() const{
    return m_serial_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_serial_Valid() const{
    return m_serial_isValid;
}

QDateTime OAIDescribeCertificateResponse_Certificate::getNotBeforeDate() const {
    return m_not_before_date;
}
void OAIDescribeCertificateResponse_Certificate::setNotBeforeDate(const QDateTime &not_before_date) {
    m_not_before_date = not_before_date;
    m_not_before_date_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_not_before_date_Set() const{
    return m_not_before_date_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_not_before_date_Valid() const{
    return m_not_before_date_isValid;
}

QDateTime OAIDescribeCertificateResponse_Certificate::getNotAfterDate() const {
    return m_not_after_date;
}
void OAIDescribeCertificateResponse_Certificate::setNotAfterDate(const QDateTime &not_after_date) {
    m_not_after_date = not_after_date;
    m_not_after_date_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_not_after_date_Set() const{
    return m_not_after_date_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_not_after_date_Valid() const{
    return m_not_after_date_isValid;
}

OAICertificateType OAIDescribeCertificateResponse_Certificate::getType() const {
    return m_type;
}
void OAIDescribeCertificateResponse_Certificate::setType(const OAICertificateType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIDescribeCertificateResponse_Certificate::getDescription() const {
    return m_description;
}
void OAIDescribeCertificateResponse_Certificate::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_description_Valid() const{
    return m_description_isValid;
}

QList OAIDescribeCertificateResponse_Certificate::getTags() const {
    return m_tags;
}
void OAIDescribeCertificateResponse_Certificate::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDescribeCertificateResponse_Certificate::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDescribeCertificateResponse_Certificate::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIDescribeCertificateResponse_Certificate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_chain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inactive_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_before_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_after_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeCertificateResponse_Certificate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && true;
}

} // namespace OpenAPI
