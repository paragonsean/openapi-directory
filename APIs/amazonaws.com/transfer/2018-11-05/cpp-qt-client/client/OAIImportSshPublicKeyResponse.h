/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIImportSshPublicKeyResponse.h
 *
 * Identifies the user, the server they belong to, and the identifier of the SSH public key associated with that user. A user can have more than one key on each server that they are associated with.
 */

#ifndef OAIImportSshPublicKeyResponse_H
#define OAIImportSshPublicKeyResponse_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIImportSshPublicKeyResponse : public OAIObject {
public:
    OAIImportSshPublicKeyResponse();
    OAIImportSshPublicKeyResponse(QString json);
    ~OAIImportSshPublicKeyResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getServerId() const;
    void setServerId(const QString &server_id);
    bool is_server_id_Set() const;
    bool is_server_id_Valid() const;

    QString getSshPublicKeyId() const;
    void setSshPublicKeyId(const QString &ssh_public_key_id);
    bool is_ssh_public_key_id_Set() const;
    bool is_ssh_public_key_id_Valid() const;

    QString getUserName() const;
    void setUserName(const QString &user_name);
    bool is_user_name_Set() const;
    bool is_user_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_server_id;
    bool m_server_id_isSet;
    bool m_server_id_isValid;

    QString m_ssh_public_key_id;
    bool m_ssh_public_key_id_isSet;
    bool m_ssh_public_key_id_isValid;

    QString m_user_name;
    bool m_user_name_isSet;
    bool m_user_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIImportSshPublicKeyResponse)

#endif // OAIImportSshPublicKeyResponse_H
