/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPosixProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPosixProfile::OAIPosixProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPosixProfile::OAIPosixProfile() {
    this->initializeModel();
}

OAIPosixProfile::~OAIPosixProfile() {}

void OAIPosixProfile::initializeModel() {

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_gid_isSet = false;
    m_gid_isValid = false;

    m_secondary_gids_isSet = false;
    m_secondary_gids_isValid = false;
}

void OAIPosixProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPosixProfile::fromJsonObject(QJsonObject json) {

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("Uid")]);
    m_uid_isSet = !json[QString("Uid")].isNull() && m_uid_isValid;

    m_gid_isValid = ::OpenAPI::fromJsonValue(m_gid, json[QString("Gid")]);
    m_gid_isSet = !json[QString("Gid")].isNull() && m_gid_isValid;

    m_secondary_gids_isValid = ::OpenAPI::fromJsonValue(m_secondary_gids, json[QString("SecondaryGids")]);
    m_secondary_gids_isSet = !json[QString("SecondaryGids")].isNull() && m_secondary_gids_isValid;
}

QString OAIPosixProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPosixProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_uid_isSet) {
        obj.insert(QString("Uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_gid_isSet) {
        obj.insert(QString("Gid"), ::OpenAPI::toJsonValue(m_gid));
    }
    if (m_secondary_gids.isSet()) {
        obj.insert(QString("SecondaryGids"), ::OpenAPI::toJsonValue(m_secondary_gids));
    }
    return obj;
}

qint32 OAIPosixProfile::getUid() const {
    return m_uid;
}
void OAIPosixProfile::setUid(const qint32 &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIPosixProfile::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIPosixProfile::is_uid_Valid() const{
    return m_uid_isValid;
}

qint32 OAIPosixProfile::getGid() const {
    return m_gid;
}
void OAIPosixProfile::setGid(const qint32 &gid) {
    m_gid = gid;
    m_gid_isSet = true;
}

bool OAIPosixProfile::is_gid_Set() const{
    return m_gid_isSet;
}

bool OAIPosixProfile::is_gid_Valid() const{
    return m_gid_isValid;
}

QList OAIPosixProfile::getSecondaryGids() const {
    return m_secondary_gids;
}
void OAIPosixProfile::setSecondaryGids(const QList &secondary_gids) {
    m_secondary_gids = secondary_gids;
    m_secondary_gids_isSet = true;
}

bool OAIPosixProfile::is_secondary_gids_Set() const{
    return m_secondary_gids_isSet;
}

bool OAIPosixProfile::is_secondary_gids_Valid() const{
    return m_secondary_gids_isValid;
}

bool OAIPosixProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_gids.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPosixProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_uid_isValid && m_gid_isValid && true;
}

} // namespace OpenAPI
