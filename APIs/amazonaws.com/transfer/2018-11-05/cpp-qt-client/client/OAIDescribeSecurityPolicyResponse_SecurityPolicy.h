/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeSecurityPolicyResponse_SecurityPolicy.h
 *
 * 
 */

#ifndef OAIDescribeSecurityPolicyResponse_SecurityPolicy_H
#define OAIDescribeSecurityPolicyResponse_SecurityPolicy_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDescribeSecurityPolicyResponse_SecurityPolicy : public OAIObject {
public:
    OAIDescribeSecurityPolicyResponse_SecurityPolicy();
    OAIDescribeSecurityPolicyResponse_SecurityPolicy(QString json);
    ~OAIDescribeSecurityPolicyResponse_SecurityPolicy() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool getFips() const;
    void setFips(const bool &fips);
    bool is_fips_Set() const;
    bool is_fips_Valid() const;

    QString getSecurityPolicyName() const;
    void setSecurityPolicyName(const QString &security_policy_name);
    bool is_security_policy_name_Set() const;
    bool is_security_policy_name_Valid() const;

    QList getSshCiphers() const;
    void setSshCiphers(const QList &ssh_ciphers);
    bool is_ssh_ciphers_Set() const;
    bool is_ssh_ciphers_Valid() const;

    QList getSshKexs() const;
    void setSshKexs(const QList &ssh_kexs);
    bool is_ssh_kexs_Set() const;
    bool is_ssh_kexs_Valid() const;

    QList getSshMacs() const;
    void setSshMacs(const QList &ssh_macs);
    bool is_ssh_macs_Set() const;
    bool is_ssh_macs_Valid() const;

    QList getTlsCiphers() const;
    void setTlsCiphers(const QList &tls_ciphers);
    bool is_tls_ciphers_Set() const;
    bool is_tls_ciphers_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_fips;
    bool m_fips_isSet;
    bool m_fips_isValid;

    QString m_security_policy_name;
    bool m_security_policy_name_isSet;
    bool m_security_policy_name_isValid;

    QList m_ssh_ciphers;
    bool m_ssh_ciphers_isSet;
    bool m_ssh_ciphers_isValid;

    QList m_ssh_kexs;
    bool m_ssh_kexs_isSet;
    bool m_ssh_kexs_isValid;

    QList m_ssh_macs;
    bool m_ssh_macs_isSet;
    bool m_ssh_macs_isValid;

    QList m_tls_ciphers;
    bool m_tls_ciphers_isSet;
    bool m_tls_ciphers_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeSecurityPolicyResponse_SecurityPolicy)

#endif // OAIDescribeSecurityPolicyResponse_SecurityPolicy_H
