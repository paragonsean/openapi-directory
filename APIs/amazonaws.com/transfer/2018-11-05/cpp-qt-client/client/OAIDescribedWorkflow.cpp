/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribedWorkflow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribedWorkflow::OAIDescribedWorkflow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribedWorkflow::OAIDescribedWorkflow() {
    this->initializeModel();
}

OAIDescribedWorkflow::~OAIDescribedWorkflow() {}

void OAIDescribedWorkflow::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_steps_isSet = false;
    m_steps_isValid = false;

    m_on_exception_steps_isSet = false;
    m_on_exception_steps_isValid = false;

    m_workflow_id_isSet = false;
    m_workflow_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIDescribedWorkflow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribedWorkflow::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_steps_isValid = ::OpenAPI::fromJsonValue(m_steps, json[QString("Steps")]);
    m_steps_isSet = !json[QString("Steps")].isNull() && m_steps_isValid;

    m_on_exception_steps_isValid = ::OpenAPI::fromJsonValue(m_on_exception_steps, json[QString("OnExceptionSteps")]);
    m_on_exception_steps_isSet = !json[QString("OnExceptionSteps")].isNull() && m_on_exception_steps_isValid;

    m_workflow_id_isValid = ::OpenAPI::fromJsonValue(m_workflow_id, json[QString("WorkflowId")]);
    m_workflow_id_isSet = !json[QString("WorkflowId")].isNull() && m_workflow_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIDescribedWorkflow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribedWorkflow::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_steps.isSet()) {
        obj.insert(QString("Steps"), ::OpenAPI::toJsonValue(m_steps));
    }
    if (m_on_exception_steps.isSet()) {
        obj.insert(QString("OnExceptionSteps"), ::OpenAPI::toJsonValue(m_on_exception_steps));
    }
    if (m_workflow_id_isSet) {
        obj.insert(QString("WorkflowId"), ::OpenAPI::toJsonValue(m_workflow_id));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIDescribedWorkflow::getArn() const {
    return m_arn;
}
void OAIDescribedWorkflow::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDescribedWorkflow::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDescribedWorkflow::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDescribedWorkflow::getDescription() const {
    return m_description;
}
void OAIDescribedWorkflow::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDescribedWorkflow::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDescribedWorkflow::is_description_Valid() const{
    return m_description_isValid;
}

QList OAIDescribedWorkflow::getSteps() const {
    return m_steps;
}
void OAIDescribedWorkflow::setSteps(const QList &steps) {
    m_steps = steps;
    m_steps_isSet = true;
}

bool OAIDescribedWorkflow::is_steps_Set() const{
    return m_steps_isSet;
}

bool OAIDescribedWorkflow::is_steps_Valid() const{
    return m_steps_isValid;
}

QList OAIDescribedWorkflow::getOnExceptionSteps() const {
    return m_on_exception_steps;
}
void OAIDescribedWorkflow::setOnExceptionSteps(const QList &on_exception_steps) {
    m_on_exception_steps = on_exception_steps;
    m_on_exception_steps_isSet = true;
}

bool OAIDescribedWorkflow::is_on_exception_steps_Set() const{
    return m_on_exception_steps_isSet;
}

bool OAIDescribedWorkflow::is_on_exception_steps_Valid() const{
    return m_on_exception_steps_isValid;
}

QString OAIDescribedWorkflow::getWorkflowId() const {
    return m_workflow_id;
}
void OAIDescribedWorkflow::setWorkflowId(const QString &workflow_id) {
    m_workflow_id = workflow_id;
    m_workflow_id_isSet = true;
}

bool OAIDescribedWorkflow::is_workflow_id_Set() const{
    return m_workflow_id_isSet;
}

bool OAIDescribedWorkflow::is_workflow_id_Valid() const{
    return m_workflow_id_isValid;
}

QList OAIDescribedWorkflow::getTags() const {
    return m_tags;
}
void OAIDescribedWorkflow::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDescribedWorkflow::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDescribedWorkflow::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIDescribedWorkflow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_steps.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_exception_steps.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribedWorkflow::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && true;
}

} // namespace OpenAPI
