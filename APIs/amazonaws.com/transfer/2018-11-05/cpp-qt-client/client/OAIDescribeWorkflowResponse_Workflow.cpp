/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeWorkflowResponse_Workflow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeWorkflowResponse_Workflow::OAIDescribeWorkflowResponse_Workflow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeWorkflowResponse_Workflow::OAIDescribeWorkflowResponse_Workflow() {
    this->initializeModel();
}

OAIDescribeWorkflowResponse_Workflow::~OAIDescribeWorkflowResponse_Workflow() {}

void OAIDescribeWorkflowResponse_Workflow::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_steps_isSet = false;
    m_steps_isValid = false;

    m_on_exception_steps_isSet = false;
    m_on_exception_steps_isValid = false;

    m_workflow_id_isSet = false;
    m_workflow_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIDescribeWorkflowResponse_Workflow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeWorkflowResponse_Workflow::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_steps_isValid = ::OpenAPI::fromJsonValue(m_steps, json[QString("Steps")]);
    m_steps_isSet = !json[QString("Steps")].isNull() && m_steps_isValid;

    m_on_exception_steps_isValid = ::OpenAPI::fromJsonValue(m_on_exception_steps, json[QString("OnExceptionSteps")]);
    m_on_exception_steps_isSet = !json[QString("OnExceptionSteps")].isNull() && m_on_exception_steps_isValid;

    m_workflow_id_isValid = ::OpenAPI::fromJsonValue(m_workflow_id, json[QString("WorkflowId")]);
    m_workflow_id_isSet = !json[QString("WorkflowId")].isNull() && m_workflow_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIDescribeWorkflowResponse_Workflow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeWorkflowResponse_Workflow::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_steps.isSet()) {
        obj.insert(QString("Steps"), ::OpenAPI::toJsonValue(m_steps));
    }
    if (m_on_exception_steps.isSet()) {
        obj.insert(QString("OnExceptionSteps"), ::OpenAPI::toJsonValue(m_on_exception_steps));
    }
    if (m_workflow_id_isSet) {
        obj.insert(QString("WorkflowId"), ::OpenAPI::toJsonValue(m_workflow_id));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIDescribeWorkflowResponse_Workflow::getArn() const {
    return m_arn;
}
void OAIDescribeWorkflowResponse_Workflow::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDescribeWorkflowResponse_Workflow::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDescribeWorkflowResponse_Workflow::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDescribeWorkflowResponse_Workflow::getDescription() const {
    return m_description;
}
void OAIDescribeWorkflowResponse_Workflow::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDescribeWorkflowResponse_Workflow::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDescribeWorkflowResponse_Workflow::is_description_Valid() const{
    return m_description_isValid;
}

QList OAIDescribeWorkflowResponse_Workflow::getSteps() const {
    return m_steps;
}
void OAIDescribeWorkflowResponse_Workflow::setSteps(const QList &steps) {
    m_steps = steps;
    m_steps_isSet = true;
}

bool OAIDescribeWorkflowResponse_Workflow::is_steps_Set() const{
    return m_steps_isSet;
}

bool OAIDescribeWorkflowResponse_Workflow::is_steps_Valid() const{
    return m_steps_isValid;
}

QList OAIDescribeWorkflowResponse_Workflow::getOnExceptionSteps() const {
    return m_on_exception_steps;
}
void OAIDescribeWorkflowResponse_Workflow::setOnExceptionSteps(const QList &on_exception_steps) {
    m_on_exception_steps = on_exception_steps;
    m_on_exception_steps_isSet = true;
}

bool OAIDescribeWorkflowResponse_Workflow::is_on_exception_steps_Set() const{
    return m_on_exception_steps_isSet;
}

bool OAIDescribeWorkflowResponse_Workflow::is_on_exception_steps_Valid() const{
    return m_on_exception_steps_isValid;
}

QString OAIDescribeWorkflowResponse_Workflow::getWorkflowId() const {
    return m_workflow_id;
}
void OAIDescribeWorkflowResponse_Workflow::setWorkflowId(const QString &workflow_id) {
    m_workflow_id = workflow_id;
    m_workflow_id_isSet = true;
}

bool OAIDescribeWorkflowResponse_Workflow::is_workflow_id_Set() const{
    return m_workflow_id_isSet;
}

bool OAIDescribeWorkflowResponse_Workflow::is_workflow_id_Valid() const{
    return m_workflow_id_isValid;
}

QList OAIDescribeWorkflowResponse_Workflow::getTags() const {
    return m_tags;
}
void OAIDescribeWorkflowResponse_Workflow::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDescribeWorkflowResponse_Workflow::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDescribeWorkflowResponse_Workflow::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIDescribeWorkflowResponse_Workflow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_steps.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_exception_steps.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeWorkflowResponse_Workflow::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && true;
}

} // namespace OpenAPI
