/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeHostKeyResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeHostKeyResponse::OAIDescribeHostKeyResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeHostKeyResponse::OAIDescribeHostKeyResponse() {
    this->initializeModel();
}

OAIDescribeHostKeyResponse::~OAIDescribeHostKeyResponse() {}

void OAIDescribeHostKeyResponse::initializeModel() {

    m_host_key_isSet = false;
    m_host_key_isValid = false;
}

void OAIDescribeHostKeyResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeHostKeyResponse::fromJsonObject(QJsonObject json) {

    m_host_key_isValid = ::OpenAPI::fromJsonValue(m_host_key, json[QString("HostKey")]);
    m_host_key_isSet = !json[QString("HostKey")].isNull() && m_host_key_isValid;
}

QString OAIDescribeHostKeyResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeHostKeyResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_host_key.isSet()) {
        obj.insert(QString("HostKey"), ::OpenAPI::toJsonValue(m_host_key));
    }
    return obj;
}

OAIDescribeHostKeyResponse_HostKey OAIDescribeHostKeyResponse::getHostKey() const {
    return m_host_key;
}
void OAIDescribeHostKeyResponse::setHostKey(const OAIDescribeHostKeyResponse_HostKey &host_key) {
    m_host_key = host_key;
    m_host_key_isSet = true;
}

bool OAIDescribeHostKeyResponse::is_host_key_Set() const{
    return m_host_key_isSet;
}

bool OAIDescribeHostKeyResponse::is_host_key_Valid() const{
    return m_host_key_isValid;
}

bool OAIDescribeHostKeyResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_host_key.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeHostKeyResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_host_key_isValid && true;
}

} // namespace OpenAPI
