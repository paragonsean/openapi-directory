/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribedAgreement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribedAgreement::OAIDescribedAgreement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribedAgreement::OAIDescribedAgreement() {
    this->initializeModel();
}

OAIDescribedAgreement::~OAIDescribedAgreement() {}

void OAIDescribedAgreement::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_agreement_id_isSet = false;
    m_agreement_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_server_id_isSet = false;
    m_server_id_isValid = false;

    m_local_profile_id_isSet = false;
    m_local_profile_id_isValid = false;

    m_partner_profile_id_isSet = false;
    m_partner_profile_id_isValid = false;

    m_base_directory_isSet = false;
    m_base_directory_isValid = false;

    m_access_role_isSet = false;
    m_access_role_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIDescribedAgreement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribedAgreement::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_agreement_id_isValid = ::OpenAPI::fromJsonValue(m_agreement_id, json[QString("AgreementId")]);
    m_agreement_id_isSet = !json[QString("AgreementId")].isNull() && m_agreement_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_server_id_isValid = ::OpenAPI::fromJsonValue(m_server_id, json[QString("ServerId")]);
    m_server_id_isSet = !json[QString("ServerId")].isNull() && m_server_id_isValid;

    m_local_profile_id_isValid = ::OpenAPI::fromJsonValue(m_local_profile_id, json[QString("LocalProfileId")]);
    m_local_profile_id_isSet = !json[QString("LocalProfileId")].isNull() && m_local_profile_id_isValid;

    m_partner_profile_id_isValid = ::OpenAPI::fromJsonValue(m_partner_profile_id, json[QString("PartnerProfileId")]);
    m_partner_profile_id_isSet = !json[QString("PartnerProfileId")].isNull() && m_partner_profile_id_isValid;

    m_base_directory_isValid = ::OpenAPI::fromJsonValue(m_base_directory, json[QString("BaseDirectory")]);
    m_base_directory_isSet = !json[QString("BaseDirectory")].isNull() && m_base_directory_isValid;

    m_access_role_isValid = ::OpenAPI::fromJsonValue(m_access_role, json[QString("AccessRole")]);
    m_access_role_isSet = !json[QString("AccessRole")].isNull() && m_access_role_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIDescribedAgreement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribedAgreement::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_agreement_id_isSet) {
        obj.insert(QString("AgreementId"), ::OpenAPI::toJsonValue(m_agreement_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_server_id_isSet) {
        obj.insert(QString("ServerId"), ::OpenAPI::toJsonValue(m_server_id));
    }
    if (m_local_profile_id_isSet) {
        obj.insert(QString("LocalProfileId"), ::OpenAPI::toJsonValue(m_local_profile_id));
    }
    if (m_partner_profile_id_isSet) {
        obj.insert(QString("PartnerProfileId"), ::OpenAPI::toJsonValue(m_partner_profile_id));
    }
    if (m_base_directory_isSet) {
        obj.insert(QString("BaseDirectory"), ::OpenAPI::toJsonValue(m_base_directory));
    }
    if (m_access_role_isSet) {
        obj.insert(QString("AccessRole"), ::OpenAPI::toJsonValue(m_access_role));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIDescribedAgreement::getArn() const {
    return m_arn;
}
void OAIDescribedAgreement::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDescribedAgreement::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDescribedAgreement::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDescribedAgreement::getAgreementId() const {
    return m_agreement_id;
}
void OAIDescribedAgreement::setAgreementId(const QString &agreement_id) {
    m_agreement_id = agreement_id;
    m_agreement_id_isSet = true;
}

bool OAIDescribedAgreement::is_agreement_id_Set() const{
    return m_agreement_id_isSet;
}

bool OAIDescribedAgreement::is_agreement_id_Valid() const{
    return m_agreement_id_isValid;
}

QString OAIDescribedAgreement::getDescription() const {
    return m_description;
}
void OAIDescribedAgreement::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDescribedAgreement::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDescribedAgreement::is_description_Valid() const{
    return m_description_isValid;
}

OAIAgreementStatusType OAIDescribedAgreement::getStatus() const {
    return m_status;
}
void OAIDescribedAgreement::setStatus(const OAIAgreementStatusType &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribedAgreement::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribedAgreement::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDescribedAgreement::getServerId() const {
    return m_server_id;
}
void OAIDescribedAgreement::setServerId(const QString &server_id) {
    m_server_id = server_id;
    m_server_id_isSet = true;
}

bool OAIDescribedAgreement::is_server_id_Set() const{
    return m_server_id_isSet;
}

bool OAIDescribedAgreement::is_server_id_Valid() const{
    return m_server_id_isValid;
}

QString OAIDescribedAgreement::getLocalProfileId() const {
    return m_local_profile_id;
}
void OAIDescribedAgreement::setLocalProfileId(const QString &local_profile_id) {
    m_local_profile_id = local_profile_id;
    m_local_profile_id_isSet = true;
}

bool OAIDescribedAgreement::is_local_profile_id_Set() const{
    return m_local_profile_id_isSet;
}

bool OAIDescribedAgreement::is_local_profile_id_Valid() const{
    return m_local_profile_id_isValid;
}

QString OAIDescribedAgreement::getPartnerProfileId() const {
    return m_partner_profile_id;
}
void OAIDescribedAgreement::setPartnerProfileId(const QString &partner_profile_id) {
    m_partner_profile_id = partner_profile_id;
    m_partner_profile_id_isSet = true;
}

bool OAIDescribedAgreement::is_partner_profile_id_Set() const{
    return m_partner_profile_id_isSet;
}

bool OAIDescribedAgreement::is_partner_profile_id_Valid() const{
    return m_partner_profile_id_isValid;
}

QString OAIDescribedAgreement::getBaseDirectory() const {
    return m_base_directory;
}
void OAIDescribedAgreement::setBaseDirectory(const QString &base_directory) {
    m_base_directory = base_directory;
    m_base_directory_isSet = true;
}

bool OAIDescribedAgreement::is_base_directory_Set() const{
    return m_base_directory_isSet;
}

bool OAIDescribedAgreement::is_base_directory_Valid() const{
    return m_base_directory_isValid;
}

QString OAIDescribedAgreement::getAccessRole() const {
    return m_access_role;
}
void OAIDescribedAgreement::setAccessRole(const QString &access_role) {
    m_access_role = access_role;
    m_access_role_isSet = true;
}

bool OAIDescribedAgreement::is_access_role_Set() const{
    return m_access_role_isSet;
}

bool OAIDescribedAgreement::is_access_role_Valid() const{
    return m_access_role_isValid;
}

QList OAIDescribedAgreement::getTags() const {
    return m_tags;
}
void OAIDescribedAgreement::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDescribedAgreement::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDescribedAgreement::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIDescribedAgreement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agreement_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_directory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribedAgreement::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && true;
}

} // namespace OpenAPI
