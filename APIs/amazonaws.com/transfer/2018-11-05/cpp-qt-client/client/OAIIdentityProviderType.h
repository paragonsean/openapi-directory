/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIIdentityProviderType.h
 *
 * &lt;p&gt;The mode of authentication for a server. The default value is &lt;code&gt;SERVICE_MANAGED&lt;/code&gt;, which allows you to store and access user credentials within the Transfer Family service.&lt;/p&gt; &lt;p&gt;Use &lt;code&gt;AWS_DIRECTORY_SERVICE&lt;/code&gt; to provide access to Active Directory groups in Directory Service for Microsoft Active Directory or Microsoft Active Directory in your on-premises environment or in Amazon Web Services using AD Connector. This option also requires you to provide a Directory ID by using the &lt;code&gt;IdentityProviderDetails&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;API_GATEWAY&lt;/code&gt; value to integrate with an identity provider of your choosing. The &lt;code&gt;API_GATEWAY&lt;/code&gt; setting requires you to provide an Amazon API Gateway endpoint URL to call for authentication by using the &lt;code&gt;IdentityProviderDetails&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;AWS_LAMBDA&lt;/code&gt; value to directly use an Lambda function as your identity provider. If you choose this value, you must specify the ARN for the Lambda function in the &lt;code&gt;Function&lt;/code&gt; parameter for the &lt;code&gt;IdentityProviderDetails&lt;/code&gt; data type.&lt;/p&gt;
 */

#ifndef OAIIdentityProviderType_H
#define OAIIdentityProviderType_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIIdentityProviderType : public OAIEnum {
public:
    OAIIdentityProviderType();
    OAIIdentityProviderType(QString json);
    ~OAIIdentityProviderType() override;

    QString asJson() const override;
    QJsonValue asJsonValue() const override;
    void fromJsonValue(QJsonValue json) override;
    void fromJson(QString jsonString) override;

    enum class eOAIIdentityProviderType {
        INVALID_VALUE_OPENAPI_GENERATED = 0,
        SERVICE_MANAGED, 
        API_GATEWAY, 
        AWS_DIRECTORY_SERVICE, 
        AWS_LAMBDA
    };
    OAIIdentityProviderType::eOAIIdentityProviderType getValue() const;
    void setValue(const OAIIdentityProviderType::eOAIIdentityProviderType& value);
    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    eOAIIdentityProviderType m_value;
    bool m_value_isSet;
    bool m_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIIdentityProviderType)

#endif // OAIIdentityProviderType_H
