/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListedAccess.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListedAccess::OAIListedAccess(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListedAccess::OAIListedAccess() {
    this->initializeModel();
}

OAIListedAccess::~OAIListedAccess() {}

void OAIListedAccess::initializeModel() {

    m_home_directory_isSet = false;
    m_home_directory_isValid = false;

    m_home_directory_type_isSet = false;
    m_home_directory_type_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_external_id_isSet = false;
    m_external_id_isValid = false;
}

void OAIListedAccess::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListedAccess::fromJsonObject(QJsonObject json) {

    m_home_directory_isValid = ::OpenAPI::fromJsonValue(m_home_directory, json[QString("HomeDirectory")]);
    m_home_directory_isSet = !json[QString("HomeDirectory")].isNull() && m_home_directory_isValid;

    m_home_directory_type_isValid = ::OpenAPI::fromJsonValue(m_home_directory_type, json[QString("HomeDirectoryType")]);
    m_home_directory_type_isSet = !json[QString("HomeDirectoryType")].isNull() && m_home_directory_type_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("Role")]);
    m_role_isSet = !json[QString("Role")].isNull() && m_role_isValid;

    m_external_id_isValid = ::OpenAPI::fromJsonValue(m_external_id, json[QString("ExternalId")]);
    m_external_id_isSet = !json[QString("ExternalId")].isNull() && m_external_id_isValid;
}

QString OAIListedAccess::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListedAccess::asJsonObject() const {
    QJsonObject obj;
    if (m_home_directory_isSet) {
        obj.insert(QString("HomeDirectory"), ::OpenAPI::toJsonValue(m_home_directory));
    }
    if (m_home_directory_type.isSet()) {
        obj.insert(QString("HomeDirectoryType"), ::OpenAPI::toJsonValue(m_home_directory_type));
    }
    if (m_role_isSet) {
        obj.insert(QString("Role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_external_id_isSet) {
        obj.insert(QString("ExternalId"), ::OpenAPI::toJsonValue(m_external_id));
    }
    return obj;
}

QString OAIListedAccess::getHomeDirectory() const {
    return m_home_directory;
}
void OAIListedAccess::setHomeDirectory(const QString &home_directory) {
    m_home_directory = home_directory;
    m_home_directory_isSet = true;
}

bool OAIListedAccess::is_home_directory_Set() const{
    return m_home_directory_isSet;
}

bool OAIListedAccess::is_home_directory_Valid() const{
    return m_home_directory_isValid;
}

OAIHomeDirectoryType OAIListedAccess::getHomeDirectoryType() const {
    return m_home_directory_type;
}
void OAIListedAccess::setHomeDirectoryType(const OAIHomeDirectoryType &home_directory_type) {
    m_home_directory_type = home_directory_type;
    m_home_directory_type_isSet = true;
}

bool OAIListedAccess::is_home_directory_type_Set() const{
    return m_home_directory_type_isSet;
}

bool OAIListedAccess::is_home_directory_type_Valid() const{
    return m_home_directory_type_isValid;
}

QString OAIListedAccess::getRole() const {
    return m_role;
}
void OAIListedAccess::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIListedAccess::is_role_Set() const{
    return m_role_isSet;
}

bool OAIListedAccess::is_role_Valid() const{
    return m_role_isValid;
}

QString OAIListedAccess::getExternalId() const {
    return m_external_id;
}
void OAIListedAccess::setExternalId(const QString &external_id) {
    m_external_id = external_id;
    m_external_id_isSet = true;
}

bool OAIListedAccess::is_external_id_Set() const{
    return m_external_id_isSet;
}

bool OAIListedAccess::is_external_id_Valid() const{
    return m_external_id_isValid;
}

bool OAIListedAccess::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_home_directory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_directory_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListedAccess::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
