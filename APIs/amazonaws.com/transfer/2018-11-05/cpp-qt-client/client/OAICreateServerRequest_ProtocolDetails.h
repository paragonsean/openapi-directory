/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateServerRequest_ProtocolDetails.h
 *
 * 
 */

#ifndef OAICreateServerRequest_ProtocolDetails_H
#define OAICreateServerRequest_ProtocolDetails_H

#include <QJsonObject>

#include "OAISetStatOption.h"
#include "OAITlsSessionResumptionMode.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateServerRequest_ProtocolDetails : public OAIObject {
public:
    OAICreateServerRequest_ProtocolDetails();
    OAICreateServerRequest_ProtocolDetails(QString json);
    ~OAICreateServerRequest_ProtocolDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getPassiveIp() const;
    void setPassiveIp(const QString &passive_ip);
    bool is_passive_ip_Set() const;
    bool is_passive_ip_Valid() const;

    OAITlsSessionResumptionMode getTlsSessionResumptionMode() const;
    void setTlsSessionResumptionMode(const OAITlsSessionResumptionMode &tls_session_resumption_mode);
    bool is_tls_session_resumption_mode_Set() const;
    bool is_tls_session_resumption_mode_Valid() const;

    OAISetStatOption getSetStatOption() const;
    void setSetStatOption(const OAISetStatOption &set_stat_option);
    bool is_set_stat_option_Set() const;
    bool is_set_stat_option_Valid() const;

    QList getAs2Transports() const;
    void setAs2Transports(const QList &as2_transports);
    bool is_as2_transports_Set() const;
    bool is_as2_transports_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_passive_ip;
    bool m_passive_ip_isSet;
    bool m_passive_ip_isValid;

    OAITlsSessionResumptionMode m_tls_session_resumption_mode;
    bool m_tls_session_resumption_mode_isSet;
    bool m_tls_session_resumption_mode_isValid;

    OAISetStatOption m_set_stat_option;
    bool m_set_stat_option_isSet;
    bool m_set_stat_option_isValid;

    QList m_as2_transports;
    bool m_as2_transports_isSet;
    bool m_as2_transports_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateServerRequest_ProtocolDetails)

#endif // OAICreateServerRequest_ProtocolDetails_H
