/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListHostKeysRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListHostKeysRequest::OAIListHostKeysRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListHostKeysRequest::OAIListHostKeysRequest() {
    this->initializeModel();
}

OAIListHostKeysRequest::~OAIListHostKeysRequest() {}

void OAIListHostKeysRequest::initializeModel() {

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_server_id_isSet = false;
    m_server_id_isValid = false;
}

void OAIListHostKeysRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListHostKeysRequest::fromJsonObject(QJsonObject json) {

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_server_id_isValid = ::OpenAPI::fromJsonValue(m_server_id, json[QString("ServerId")]);
    m_server_id_isSet = !json[QString("ServerId")].isNull() && m_server_id_isValid;
}

QString OAIListHostKeysRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListHostKeysRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_server_id_isSet) {
        obj.insert(QString("ServerId"), ::OpenAPI::toJsonValue(m_server_id));
    }
    return obj;
}

qint32 OAIListHostKeysRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListHostKeysRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListHostKeysRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListHostKeysRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListHostKeysRequest::getNextToken() const {
    return m_next_token;
}
void OAIListHostKeysRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListHostKeysRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListHostKeysRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QString OAIListHostKeysRequest::getServerId() const {
    return m_server_id;
}
void OAIListHostKeysRequest::setServerId(const QString &server_id) {
    m_server_id = server_id;
    m_server_id_isSet = true;
}

bool OAIListHostKeysRequest::is_server_id_Set() const{
    return m_server_id_isSet;
}

bool OAIListHostKeysRequest::is_server_id_Valid() const{
    return m_server_id_isValid;
}

bool OAIListHostKeysRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListHostKeysRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_server_id_isValid && true;
}

} // namespace OpenAPI
