/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateConnectorRequest_As2Config.h
 *
 * 
 */

#ifndef OAICreateConnectorRequest_As2Config_H
#define OAICreateConnectorRequest_As2Config_H

#include <QJsonObject>

#include "OAICompressionEnum.h"
#include "OAIEncryptionAlg.h"
#include "OAIMdnResponse.h"
#include "OAIMdnSigningAlg.h"
#include "OAISigningAlg.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateConnectorRequest_As2Config : public OAIObject {
public:
    OAICreateConnectorRequest_As2Config();
    OAICreateConnectorRequest_As2Config(QString json);
    ~OAICreateConnectorRequest_As2Config() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getLocalProfileId() const;
    void setLocalProfileId(const QString &local_profile_id);
    bool is_local_profile_id_Set() const;
    bool is_local_profile_id_Valid() const;

    QString getPartnerProfileId() const;
    void setPartnerProfileId(const QString &partner_profile_id);
    bool is_partner_profile_id_Set() const;
    bool is_partner_profile_id_Valid() const;

    QString getMessageSubject() const;
    void setMessageSubject(const QString &message_subject);
    bool is_message_subject_Set() const;
    bool is_message_subject_Valid() const;

    OAICompressionEnum getCompression() const;
    void setCompression(const OAICompressionEnum &compression);
    bool is_compression_Set() const;
    bool is_compression_Valid() const;

    OAIEncryptionAlg getEncryptionAlgorithm() const;
    void setEncryptionAlgorithm(const OAIEncryptionAlg &encryption_algorithm);
    bool is_encryption_algorithm_Set() const;
    bool is_encryption_algorithm_Valid() const;

    OAISigningAlg getSigningAlgorithm() const;
    void setSigningAlgorithm(const OAISigningAlg &signing_algorithm);
    bool is_signing_algorithm_Set() const;
    bool is_signing_algorithm_Valid() const;

    OAIMdnSigningAlg getMdnSigningAlgorithm() const;
    void setMdnSigningAlgorithm(const OAIMdnSigningAlg &mdn_signing_algorithm);
    bool is_mdn_signing_algorithm_Set() const;
    bool is_mdn_signing_algorithm_Valid() const;

    OAIMdnResponse getMdnResponse() const;
    void setMdnResponse(const OAIMdnResponse &mdn_response);
    bool is_mdn_response_Set() const;
    bool is_mdn_response_Valid() const;

    QString getBasicAuthSecretId() const;
    void setBasicAuthSecretId(const QString &basic_auth_secret_id);
    bool is_basic_auth_secret_id_Set() const;
    bool is_basic_auth_secret_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_local_profile_id;
    bool m_local_profile_id_isSet;
    bool m_local_profile_id_isValid;

    QString m_partner_profile_id;
    bool m_partner_profile_id_isSet;
    bool m_partner_profile_id_isValid;

    QString m_message_subject;
    bool m_message_subject_isSet;
    bool m_message_subject_isValid;

    OAICompressionEnum m_compression;
    bool m_compression_isSet;
    bool m_compression_isValid;

    OAIEncryptionAlg m_encryption_algorithm;
    bool m_encryption_algorithm_isSet;
    bool m_encryption_algorithm_isValid;

    OAISigningAlg m_signing_algorithm;
    bool m_signing_algorithm_isSet;
    bool m_signing_algorithm_isValid;

    OAIMdnSigningAlg m_mdn_signing_algorithm;
    bool m_mdn_signing_algorithm_isSet;
    bool m_mdn_signing_algorithm_isValid;

    OAIMdnResponse m_mdn_response;
    bool m_mdn_response_isSet;
    bool m_mdn_response_isValid;

    QString m_basic_auth_secret_id;
    bool m_basic_auth_secret_id_isSet;
    bool m_basic_auth_secret_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateConnectorRequest_As2Config)

#endif // OAICreateConnectorRequest_As2Config_H
