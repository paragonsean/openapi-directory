/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribedUser_PosixProfile.h
 *
 * 
 */

#ifndef OAIDescribedUser_PosixProfile_H
#define OAIDescribedUser_PosixProfile_H

#include <QJsonObject>

#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDescribedUser_PosixProfile : public OAIObject {
public:
    OAIDescribedUser_PosixProfile();
    OAIDescribedUser_PosixProfile(QString json);
    ~OAIDescribedUser_PosixProfile() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getUid() const;
    void setUid(const qint32 &uid);
    bool is_uid_Set() const;
    bool is_uid_Valid() const;

    qint32 getGid() const;
    void setGid(const qint32 &gid);
    bool is_gid_Set() const;
    bool is_gid_Valid() const;

    QList getSecondaryGids() const;
    void setSecondaryGids(const QList &secondary_gids);
    bool is_secondary_gids_Set() const;
    bool is_secondary_gids_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_uid;
    bool m_uid_isSet;
    bool m_uid_isValid;

    qint32 m_gid;
    bool m_gid_isSet;
    bool m_gid_isValid;

    QList m_secondary_gids;
    bool m_secondary_gids_isSet;
    bool m_secondary_gids_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribedUser_PosixProfile)

#endif // OAIDescribedUser_PosixProfile_H
