/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateServerRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateServerRequest::OAIUpdateServerRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateServerRequest::OAIUpdateServerRequest() {
    this->initializeModel();
}

OAIUpdateServerRequest::~OAIUpdateServerRequest() {}

void OAIUpdateServerRequest::initializeModel() {

    m_certificate_isSet = false;
    m_certificate_isValid = false;

    m_protocol_details_isSet = false;
    m_protocol_details_isValid = false;

    m_endpoint_details_isSet = false;
    m_endpoint_details_isValid = false;

    m_endpoint_type_isSet = false;
    m_endpoint_type_isValid = false;

    m_host_key_isSet = false;
    m_host_key_isValid = false;

    m_identity_provider_details_isSet = false;
    m_identity_provider_details_isValid = false;

    m_logging_role_isSet = false;
    m_logging_role_isValid = false;

    m_post_authentication_login_banner_isSet = false;
    m_post_authentication_login_banner_isValid = false;

    m_pre_authentication_login_banner_isSet = false;
    m_pre_authentication_login_banner_isValid = false;

    m_protocols_isSet = false;
    m_protocols_isValid = false;

    m_security_policy_name_isSet = false;
    m_security_policy_name_isValid = false;

    m_server_id_isSet = false;
    m_server_id_isValid = false;

    m_workflow_details_isSet = false;
    m_workflow_details_isValid = false;

    m_structured_log_destinations_isSet = false;
    m_structured_log_destinations_isValid = false;
}

void OAIUpdateServerRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateServerRequest::fromJsonObject(QJsonObject json) {

    m_certificate_isValid = ::OpenAPI::fromJsonValue(m_certificate, json[QString("Certificate")]);
    m_certificate_isSet = !json[QString("Certificate")].isNull() && m_certificate_isValid;

    m_protocol_details_isValid = ::OpenAPI::fromJsonValue(m_protocol_details, json[QString("ProtocolDetails")]);
    m_protocol_details_isSet = !json[QString("ProtocolDetails")].isNull() && m_protocol_details_isValid;

    m_endpoint_details_isValid = ::OpenAPI::fromJsonValue(m_endpoint_details, json[QString("EndpointDetails")]);
    m_endpoint_details_isSet = !json[QString("EndpointDetails")].isNull() && m_endpoint_details_isValid;

    m_endpoint_type_isValid = ::OpenAPI::fromJsonValue(m_endpoint_type, json[QString("EndpointType")]);
    m_endpoint_type_isSet = !json[QString("EndpointType")].isNull() && m_endpoint_type_isValid;

    m_host_key_isValid = ::OpenAPI::fromJsonValue(m_host_key, json[QString("HostKey")]);
    m_host_key_isSet = !json[QString("HostKey")].isNull() && m_host_key_isValid;

    m_identity_provider_details_isValid = ::OpenAPI::fromJsonValue(m_identity_provider_details, json[QString("IdentityProviderDetails")]);
    m_identity_provider_details_isSet = !json[QString("IdentityProviderDetails")].isNull() && m_identity_provider_details_isValid;

    m_logging_role_isValid = ::OpenAPI::fromJsonValue(m_logging_role, json[QString("LoggingRole")]);
    m_logging_role_isSet = !json[QString("LoggingRole")].isNull() && m_logging_role_isValid;

    m_post_authentication_login_banner_isValid = ::OpenAPI::fromJsonValue(m_post_authentication_login_banner, json[QString("PostAuthenticationLoginBanner")]);
    m_post_authentication_login_banner_isSet = !json[QString("PostAuthenticationLoginBanner")].isNull() && m_post_authentication_login_banner_isValid;

    m_pre_authentication_login_banner_isValid = ::OpenAPI::fromJsonValue(m_pre_authentication_login_banner, json[QString("PreAuthenticationLoginBanner")]);
    m_pre_authentication_login_banner_isSet = !json[QString("PreAuthenticationLoginBanner")].isNull() && m_pre_authentication_login_banner_isValid;

    m_protocols_isValid = ::OpenAPI::fromJsonValue(m_protocols, json[QString("Protocols")]);
    m_protocols_isSet = !json[QString("Protocols")].isNull() && m_protocols_isValid;

    m_security_policy_name_isValid = ::OpenAPI::fromJsonValue(m_security_policy_name, json[QString("SecurityPolicyName")]);
    m_security_policy_name_isSet = !json[QString("SecurityPolicyName")].isNull() && m_security_policy_name_isValid;

    m_server_id_isValid = ::OpenAPI::fromJsonValue(m_server_id, json[QString("ServerId")]);
    m_server_id_isSet = !json[QString("ServerId")].isNull() && m_server_id_isValid;

    m_workflow_details_isValid = ::OpenAPI::fromJsonValue(m_workflow_details, json[QString("WorkflowDetails")]);
    m_workflow_details_isSet = !json[QString("WorkflowDetails")].isNull() && m_workflow_details_isValid;

    m_structured_log_destinations_isValid = ::OpenAPI::fromJsonValue(m_structured_log_destinations, json[QString("StructuredLogDestinations")]);
    m_structured_log_destinations_isSet = !json[QString("StructuredLogDestinations")].isNull() && m_structured_log_destinations_isValid;
}

QString OAIUpdateServerRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateServerRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_isSet) {
        obj.insert(QString("Certificate"), ::OpenAPI::toJsonValue(m_certificate));
    }
    if (m_protocol_details.isSet()) {
        obj.insert(QString("ProtocolDetails"), ::OpenAPI::toJsonValue(m_protocol_details));
    }
    if (m_endpoint_details.isSet()) {
        obj.insert(QString("EndpointDetails"), ::OpenAPI::toJsonValue(m_endpoint_details));
    }
    if (m_endpoint_type.isSet()) {
        obj.insert(QString("EndpointType"), ::OpenAPI::toJsonValue(m_endpoint_type));
    }
    if (m_host_key_isSet) {
        obj.insert(QString("HostKey"), ::OpenAPI::toJsonValue(m_host_key));
    }
    if (m_identity_provider_details.isSet()) {
        obj.insert(QString("IdentityProviderDetails"), ::OpenAPI::toJsonValue(m_identity_provider_details));
    }
    if (m_logging_role_isSet) {
        obj.insert(QString("LoggingRole"), ::OpenAPI::toJsonValue(m_logging_role));
    }
    if (m_post_authentication_login_banner_isSet) {
        obj.insert(QString("PostAuthenticationLoginBanner"), ::OpenAPI::toJsonValue(m_post_authentication_login_banner));
    }
    if (m_pre_authentication_login_banner_isSet) {
        obj.insert(QString("PreAuthenticationLoginBanner"), ::OpenAPI::toJsonValue(m_pre_authentication_login_banner));
    }
    if (m_protocols.isSet()) {
        obj.insert(QString("Protocols"), ::OpenAPI::toJsonValue(m_protocols));
    }
    if (m_security_policy_name_isSet) {
        obj.insert(QString("SecurityPolicyName"), ::OpenAPI::toJsonValue(m_security_policy_name));
    }
    if (m_server_id_isSet) {
        obj.insert(QString("ServerId"), ::OpenAPI::toJsonValue(m_server_id));
    }
    if (m_workflow_details.isSet()) {
        obj.insert(QString("WorkflowDetails"), ::OpenAPI::toJsonValue(m_workflow_details));
    }
    if (m_structured_log_destinations.isSet()) {
        obj.insert(QString("StructuredLogDestinations"), ::OpenAPI::toJsonValue(m_structured_log_destinations));
    }
    return obj;
}

QString OAIUpdateServerRequest::getCertificate() const {
    return m_certificate;
}
void OAIUpdateServerRequest::setCertificate(const QString &certificate) {
    m_certificate = certificate;
    m_certificate_isSet = true;
}

bool OAIUpdateServerRequest::is_certificate_Set() const{
    return m_certificate_isSet;
}

bool OAIUpdateServerRequest::is_certificate_Valid() const{
    return m_certificate_isValid;
}

OAICreateServerRequest_ProtocolDetails OAIUpdateServerRequest::getProtocolDetails() const {
    return m_protocol_details;
}
void OAIUpdateServerRequest::setProtocolDetails(const OAICreateServerRequest_ProtocolDetails &protocol_details) {
    m_protocol_details = protocol_details;
    m_protocol_details_isSet = true;
}

bool OAIUpdateServerRequest::is_protocol_details_Set() const{
    return m_protocol_details_isSet;
}

bool OAIUpdateServerRequest::is_protocol_details_Valid() const{
    return m_protocol_details_isValid;
}

OAICreateServerRequest_EndpointDetails OAIUpdateServerRequest::getEndpointDetails() const {
    return m_endpoint_details;
}
void OAIUpdateServerRequest::setEndpointDetails(const OAICreateServerRequest_EndpointDetails &endpoint_details) {
    m_endpoint_details = endpoint_details;
    m_endpoint_details_isSet = true;
}

bool OAIUpdateServerRequest::is_endpoint_details_Set() const{
    return m_endpoint_details_isSet;
}

bool OAIUpdateServerRequest::is_endpoint_details_Valid() const{
    return m_endpoint_details_isValid;
}

OAIEndpointType OAIUpdateServerRequest::getEndpointType() const {
    return m_endpoint_type;
}
void OAIUpdateServerRequest::setEndpointType(const OAIEndpointType &endpoint_type) {
    m_endpoint_type = endpoint_type;
    m_endpoint_type_isSet = true;
}

bool OAIUpdateServerRequest::is_endpoint_type_Set() const{
    return m_endpoint_type_isSet;
}

bool OAIUpdateServerRequest::is_endpoint_type_Valid() const{
    return m_endpoint_type_isValid;
}

QString OAIUpdateServerRequest::getHostKey() const {
    return m_host_key;
}
void OAIUpdateServerRequest::setHostKey(const QString &host_key) {
    m_host_key = host_key;
    m_host_key_isSet = true;
}

bool OAIUpdateServerRequest::is_host_key_Set() const{
    return m_host_key_isSet;
}

bool OAIUpdateServerRequest::is_host_key_Valid() const{
    return m_host_key_isValid;
}

OAIUpdateServerRequest_IdentityProviderDetails OAIUpdateServerRequest::getIdentityProviderDetails() const {
    return m_identity_provider_details;
}
void OAIUpdateServerRequest::setIdentityProviderDetails(const OAIUpdateServerRequest_IdentityProviderDetails &identity_provider_details) {
    m_identity_provider_details = identity_provider_details;
    m_identity_provider_details_isSet = true;
}

bool OAIUpdateServerRequest::is_identity_provider_details_Set() const{
    return m_identity_provider_details_isSet;
}

bool OAIUpdateServerRequest::is_identity_provider_details_Valid() const{
    return m_identity_provider_details_isValid;
}

QString OAIUpdateServerRequest::getLoggingRole() const {
    return m_logging_role;
}
void OAIUpdateServerRequest::setLoggingRole(const QString &logging_role) {
    m_logging_role = logging_role;
    m_logging_role_isSet = true;
}

bool OAIUpdateServerRequest::is_logging_role_Set() const{
    return m_logging_role_isSet;
}

bool OAIUpdateServerRequest::is_logging_role_Valid() const{
    return m_logging_role_isValid;
}

QString OAIUpdateServerRequest::getPostAuthenticationLoginBanner() const {
    return m_post_authentication_login_banner;
}
void OAIUpdateServerRequest::setPostAuthenticationLoginBanner(const QString &post_authentication_login_banner) {
    m_post_authentication_login_banner = post_authentication_login_banner;
    m_post_authentication_login_banner_isSet = true;
}

bool OAIUpdateServerRequest::is_post_authentication_login_banner_Set() const{
    return m_post_authentication_login_banner_isSet;
}

bool OAIUpdateServerRequest::is_post_authentication_login_banner_Valid() const{
    return m_post_authentication_login_banner_isValid;
}

QString OAIUpdateServerRequest::getPreAuthenticationLoginBanner() const {
    return m_pre_authentication_login_banner;
}
void OAIUpdateServerRequest::setPreAuthenticationLoginBanner(const QString &pre_authentication_login_banner) {
    m_pre_authentication_login_banner = pre_authentication_login_banner;
    m_pre_authentication_login_banner_isSet = true;
}

bool OAIUpdateServerRequest::is_pre_authentication_login_banner_Set() const{
    return m_pre_authentication_login_banner_isSet;
}

bool OAIUpdateServerRequest::is_pre_authentication_login_banner_Valid() const{
    return m_pre_authentication_login_banner_isValid;
}

QList OAIUpdateServerRequest::getProtocols() const {
    return m_protocols;
}
void OAIUpdateServerRequest::setProtocols(const QList &protocols) {
    m_protocols = protocols;
    m_protocols_isSet = true;
}

bool OAIUpdateServerRequest::is_protocols_Set() const{
    return m_protocols_isSet;
}

bool OAIUpdateServerRequest::is_protocols_Valid() const{
    return m_protocols_isValid;
}

QString OAIUpdateServerRequest::getSecurityPolicyName() const {
    return m_security_policy_name;
}
void OAIUpdateServerRequest::setSecurityPolicyName(const QString &security_policy_name) {
    m_security_policy_name = security_policy_name;
    m_security_policy_name_isSet = true;
}

bool OAIUpdateServerRequest::is_security_policy_name_Set() const{
    return m_security_policy_name_isSet;
}

bool OAIUpdateServerRequest::is_security_policy_name_Valid() const{
    return m_security_policy_name_isValid;
}

QString OAIUpdateServerRequest::getServerId() const {
    return m_server_id;
}
void OAIUpdateServerRequest::setServerId(const QString &server_id) {
    m_server_id = server_id;
    m_server_id_isSet = true;
}

bool OAIUpdateServerRequest::is_server_id_Set() const{
    return m_server_id_isSet;
}

bool OAIUpdateServerRequest::is_server_id_Valid() const{
    return m_server_id_isValid;
}

OAIUpdateServerRequest_WorkflowDetails OAIUpdateServerRequest::getWorkflowDetails() const {
    return m_workflow_details;
}
void OAIUpdateServerRequest::setWorkflowDetails(const OAIUpdateServerRequest_WorkflowDetails &workflow_details) {
    m_workflow_details = workflow_details;
    m_workflow_details_isSet = true;
}

bool OAIUpdateServerRequest::is_workflow_details_Set() const{
    return m_workflow_details_isSet;
}

bool OAIUpdateServerRequest::is_workflow_details_Valid() const{
    return m_workflow_details_isValid;
}

QList OAIUpdateServerRequest::getStructuredLogDestinations() const {
    return m_structured_log_destinations;
}
void OAIUpdateServerRequest::setStructuredLogDestinations(const QList &structured_log_destinations) {
    m_structured_log_destinations = structured_log_destinations;
    m_structured_log_destinations_isSet = true;
}

bool OAIUpdateServerRequest::is_structured_log_destinations_Set() const{
    return m_structured_log_destinations_isSet;
}

bool OAIUpdateServerRequest::is_structured_log_destinations_Valid() const{
    return m_structured_log_destinations_isValid;
}

bool OAIUpdateServerRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_provider_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_authentication_login_banner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_authentication_login_banner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocols.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_policy_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_structured_log_destinations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateServerRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_server_id_isValid && true;
}

} // namespace OpenAPI
