/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIS3InputFileLocation.h
 *
 * &lt;p&gt;Specifies the customer input Amazon S3 file location. If it is used inside &lt;code&gt;copyStepDetails.DestinationFileLocation&lt;/code&gt;, it should be the S3 copy destination.&lt;/p&gt; &lt;p&gt; You need to provide the bucket and key. The key can represent either a path or a file. This is determined by whether or not you end the key value with the forward slash (/) character. If the final character is \&quot;/\&quot;, then your file is copied to the folder, and its name does not change. If, rather, the final character is alphanumeric, your uploaded file is renamed to the path value. In this case, if a file with that name already exists, it is overwritten. &lt;/p&gt; &lt;p&gt;For example, if your path is &lt;code&gt;shared-files/bob/&lt;/code&gt;, your uploaded files are copied to the &lt;code&gt;shared-files/bob/&lt;/code&gt;, folder. If your path is &lt;code&gt;shared-files/today&lt;/code&gt;, each uploaded file is copied to the &lt;code&gt;shared-files&lt;/code&gt; folder and named &lt;code&gt;today&lt;/code&gt;: each upload overwrites the previous version of the &lt;i&gt;bob&lt;/i&gt; file.&lt;/p&gt;
 */

#ifndef OAIS3InputFileLocation_H
#define OAIS3InputFileLocation_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIS3InputFileLocation : public OAIObject {
public:
    OAIS3InputFileLocation();
    OAIS3InputFileLocation(QString json);
    ~OAIS3InputFileLocation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBucket() const;
    void setBucket(const QString &bucket);
    bool is_bucket_Set() const;
    bool is_bucket_Valid() const;

    QString getKey() const;
    void setKey(const QString &key);
    bool is_key_Set() const;
    bool is_key_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_bucket;
    bool m_bucket_isSet;
    bool m_bucket_isValid;

    QString m_key;
    bool m_key_isSet;
    bool m_key_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIS3InputFileLocation)

#endif // OAIS3InputFileLocation_H
