/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateServerRequest_EndpointDetails.h
 *
 * 
 */

#ifndef OAICreateServerRequest_EndpointDetails_H
#define OAICreateServerRequest_EndpointDetails_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateServerRequest_EndpointDetails : public OAIObject {
public:
    OAICreateServerRequest_EndpointDetails();
    OAICreateServerRequest_EndpointDetails(QString json);
    ~OAICreateServerRequest_EndpointDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getAddressAllocationIds() const;
    void setAddressAllocationIds(const QList &address_allocation_ids);
    bool is_address_allocation_ids_Set() const;
    bool is_address_allocation_ids_Valid() const;

    QList getSubnetIds() const;
    void setSubnetIds(const QList &subnet_ids);
    bool is_subnet_ids_Set() const;
    bool is_subnet_ids_Valid() const;

    QString getVpcEndpointId() const;
    void setVpcEndpointId(const QString &vpc_endpoint_id);
    bool is_vpc_endpoint_id_Set() const;
    bool is_vpc_endpoint_id_Valid() const;

    QString getVpcId() const;
    void setVpcId(const QString &vpc_id);
    bool is_vpc_id_Set() const;
    bool is_vpc_id_Valid() const;

    QList getSecurityGroupIds() const;
    void setSecurityGroupIds(const QList &security_group_ids);
    bool is_security_group_ids_Set() const;
    bool is_security_group_ids_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_address_allocation_ids;
    bool m_address_allocation_ids_isSet;
    bool m_address_allocation_ids_isValid;

    QList m_subnet_ids;
    bool m_subnet_ids_isSet;
    bool m_subnet_ids_isValid;

    QString m_vpc_endpoint_id;
    bool m_vpc_endpoint_id_isSet;
    bool m_vpc_endpoint_id_isValid;

    QString m_vpc_id;
    bool m_vpc_id_isSet;
    bool m_vpc_id_isValid;

    QList m_security_group_ids;
    bool m_security_group_ids_isSet;
    bool m_security_group_ids_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateServerRequest_EndpointDetails)

#endif // OAICreateServerRequest_EndpointDetails_H
