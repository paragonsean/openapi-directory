/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExecutionStepResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExecutionStepResult::OAIExecutionStepResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExecutionStepResult::OAIExecutionStepResult() {
    this->initializeModel();
}

OAIExecutionStepResult::~OAIExecutionStepResult() {}

void OAIExecutionStepResult::initializeModel() {

    m_step_type_isSet = false;
    m_step_type_isValid = false;

    m_outputs_isSet = false;
    m_outputs_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;
}

void OAIExecutionStepResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExecutionStepResult::fromJsonObject(QJsonObject json) {

    m_step_type_isValid = ::OpenAPI::fromJsonValue(m_step_type, json[QString("StepType")]);
    m_step_type_isSet = !json[QString("StepType")].isNull() && m_step_type_isValid;

    m_outputs_isValid = ::OpenAPI::fromJsonValue(m_outputs, json[QString("Outputs")]);
    m_outputs_isSet = !json[QString("Outputs")].isNull() && m_outputs_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("Error")]);
    m_error_isSet = !json[QString("Error")].isNull() && m_error_isValid;
}

QString OAIExecutionStepResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExecutionStepResult::asJsonObject() const {
    QJsonObject obj;
    if (m_step_type.isSet()) {
        obj.insert(QString("StepType"), ::OpenAPI::toJsonValue(m_step_type));
    }
    if (m_outputs_isSet) {
        obj.insert(QString("Outputs"), ::OpenAPI::toJsonValue(m_outputs));
    }
    if (m_error.isSet()) {
        obj.insert(QString("Error"), ::OpenAPI::toJsonValue(m_error));
    }
    return obj;
}

OAIWorkflowStepType OAIExecutionStepResult::getStepType() const {
    return m_step_type;
}
void OAIExecutionStepResult::setStepType(const OAIWorkflowStepType &step_type) {
    m_step_type = step_type;
    m_step_type_isSet = true;
}

bool OAIExecutionStepResult::is_step_type_Set() const{
    return m_step_type_isSet;
}

bool OAIExecutionStepResult::is_step_type_Valid() const{
    return m_step_type_isValid;
}

QString OAIExecutionStepResult::getOutputs() const {
    return m_outputs;
}
void OAIExecutionStepResult::setOutputs(const QString &outputs) {
    m_outputs = outputs;
    m_outputs_isSet = true;
}

bool OAIExecutionStepResult::is_outputs_Set() const{
    return m_outputs_isSet;
}

bool OAIExecutionStepResult::is_outputs_Valid() const{
    return m_outputs_isValid;
}

OAIExecutionStepResult_Error OAIExecutionStepResult::getError() const {
    return m_error;
}
void OAIExecutionStepResult::setError(const OAIExecutionStepResult_Error &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIExecutionStepResult::is_error_Set() const{
    return m_error_isSet;
}

bool OAIExecutionStepResult::is_error_Valid() const{
    return m_error_isValid;
}

bool OAIExecutionStepResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_step_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_outputs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExecutionStepResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
