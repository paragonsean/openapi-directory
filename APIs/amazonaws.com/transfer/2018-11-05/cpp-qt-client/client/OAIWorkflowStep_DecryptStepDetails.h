/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWorkflowStep_DecryptStepDetails.h
 *
 * 
 */

#ifndef OAIWorkflowStep_DecryptStepDetails_H
#define OAIWorkflowStep_DecryptStepDetails_H

#include <QJsonObject>

#include "OAIDecryptStepDetails_DestinationFileLocation.h"
#include "OAIEncryptionType.h"
#include "OAIOverwriteExisting.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDecryptStepDetails_DestinationFileLocation;

class OAIWorkflowStep_DecryptStepDetails : public OAIObject {
public:
    OAIWorkflowStep_DecryptStepDetails();
    OAIWorkflowStep_DecryptStepDetails(QString json);
    ~OAIWorkflowStep_DecryptStepDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIEncryptionType getType() const;
    void setType(const OAIEncryptionType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getSourceFileLocation() const;
    void setSourceFileLocation(const QString &source_file_location);
    bool is_source_file_location_Set() const;
    bool is_source_file_location_Valid() const;

    OAIOverwriteExisting getOverwriteExisting() const;
    void setOverwriteExisting(const OAIOverwriteExisting &overwrite_existing);
    bool is_overwrite_existing_Set() const;
    bool is_overwrite_existing_Valid() const;

    OAIDecryptStepDetails_DestinationFileLocation getDestinationFileLocation() const;
    void setDestinationFileLocation(const OAIDecryptStepDetails_DestinationFileLocation &destination_file_location);
    bool is_destination_file_location_Set() const;
    bool is_destination_file_location_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIEncryptionType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_source_file_location;
    bool m_source_file_location_isSet;
    bool m_source_file_location_isValid;

    OAIOverwriteExisting m_overwrite_existing;
    bool m_overwrite_existing_isSet;
    bool m_overwrite_existing_isValid;

    OAIDecryptStepDetails_DestinationFileLocation m_destination_file_location;
    bool m_destination_file_location_isSet;
    bool m_destination_file_location_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWorkflowStep_DecryptStepDetails)

#endif // OAIWorkflowStep_DecryptStepDetails_H
