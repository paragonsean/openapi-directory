/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeServerResponse_Server.h
 *
 * 
 */

#ifndef OAIDescribeServerResponse_Server_H
#define OAIDescribeServerResponse_Server_H

#include <QJsonObject>

#include "OAICreateServerRequest_EndpointDetails.h"
#include "OAICreateServerRequest_ProtocolDetails.h"
#include "OAICreateServerRequest_WorkflowDetails.h"
#include "OAIDescribedServer_IdentityProviderDetails.h"
#include "OAIDomain.h"
#include "OAIEndpointType.h"
#include "OAIIdentityProviderType.h"
#include "OAIState.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateServerRequest_ProtocolDetails;
class OAICreateServerRequest_EndpointDetails;
class OAIDescribedServer_IdentityProviderDetails;
class OAICreateServerRequest_WorkflowDetails;

class OAIDescribeServerResponse_Server : public OAIObject {
public:
    OAIDescribeServerResponse_Server();
    OAIDescribeServerResponse_Server(QString json);
    ~OAIDescribeServerResponse_Server() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QString getCertificate() const;
    void setCertificate(const QString &certificate);
    bool is_certificate_Set() const;
    bool is_certificate_Valid() const;

    OAICreateServerRequest_ProtocolDetails getProtocolDetails() const;
    void setProtocolDetails(const OAICreateServerRequest_ProtocolDetails &protocol_details);
    bool is_protocol_details_Set() const;
    bool is_protocol_details_Valid() const;

    OAIDomain getDomain() const;
    void setDomain(const OAIDomain &domain);
    bool is_domain_Set() const;
    bool is_domain_Valid() const;

    OAICreateServerRequest_EndpointDetails getEndpointDetails() const;
    void setEndpointDetails(const OAICreateServerRequest_EndpointDetails &endpoint_details);
    bool is_endpoint_details_Set() const;
    bool is_endpoint_details_Valid() const;

    OAIEndpointType getEndpointType() const;
    void setEndpointType(const OAIEndpointType &endpoint_type);
    bool is_endpoint_type_Set() const;
    bool is_endpoint_type_Valid() const;

    QString getHostKeyFingerprint() const;
    void setHostKeyFingerprint(const QString &host_key_fingerprint);
    bool is_host_key_fingerprint_Set() const;
    bool is_host_key_fingerprint_Valid() const;

    OAIDescribedServer_IdentityProviderDetails getIdentityProviderDetails() const;
    void setIdentityProviderDetails(const OAIDescribedServer_IdentityProviderDetails &identity_provider_details);
    bool is_identity_provider_details_Set() const;
    bool is_identity_provider_details_Valid() const;

    OAIIdentityProviderType getIdentityProviderType() const;
    void setIdentityProviderType(const OAIIdentityProviderType &identity_provider_type);
    bool is_identity_provider_type_Set() const;
    bool is_identity_provider_type_Valid() const;

    QString getLoggingRole() const;
    void setLoggingRole(const QString &logging_role);
    bool is_logging_role_Set() const;
    bool is_logging_role_Valid() const;

    QString getPostAuthenticationLoginBanner() const;
    void setPostAuthenticationLoginBanner(const QString &post_authentication_login_banner);
    bool is_post_authentication_login_banner_Set() const;
    bool is_post_authentication_login_banner_Valid() const;

    QString getPreAuthenticationLoginBanner() const;
    void setPreAuthenticationLoginBanner(const QString &pre_authentication_login_banner);
    bool is_pre_authentication_login_banner_Set() const;
    bool is_pre_authentication_login_banner_Valid() const;

    QList getProtocols() const;
    void setProtocols(const QList &protocols);
    bool is_protocols_Set() const;
    bool is_protocols_Valid() const;

    QString getSecurityPolicyName() const;
    void setSecurityPolicyName(const QString &security_policy_name);
    bool is_security_policy_name_Set() const;
    bool is_security_policy_name_Valid() const;

    QString getServerId() const;
    void setServerId(const QString &server_id);
    bool is_server_id_Set() const;
    bool is_server_id_Valid() const;

    OAIState getState() const;
    void setState(const OAIState &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    qint32 getUserCount() const;
    void setUserCount(const qint32 &user_count);
    bool is_user_count_Set() const;
    bool is_user_count_Valid() const;

    OAICreateServerRequest_WorkflowDetails getWorkflowDetails() const;
    void setWorkflowDetails(const OAICreateServerRequest_WorkflowDetails &workflow_details);
    bool is_workflow_details_Set() const;
    bool is_workflow_details_Valid() const;

    QList getStructuredLogDestinations() const;
    void setStructuredLogDestinations(const QList &structured_log_destinations);
    bool is_structured_log_destinations_Set() const;
    bool is_structured_log_destinations_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QString m_certificate;
    bool m_certificate_isSet;
    bool m_certificate_isValid;

    OAICreateServerRequest_ProtocolDetails m_protocol_details;
    bool m_protocol_details_isSet;
    bool m_protocol_details_isValid;

    OAIDomain m_domain;
    bool m_domain_isSet;
    bool m_domain_isValid;

    OAICreateServerRequest_EndpointDetails m_endpoint_details;
    bool m_endpoint_details_isSet;
    bool m_endpoint_details_isValid;

    OAIEndpointType m_endpoint_type;
    bool m_endpoint_type_isSet;
    bool m_endpoint_type_isValid;

    QString m_host_key_fingerprint;
    bool m_host_key_fingerprint_isSet;
    bool m_host_key_fingerprint_isValid;

    OAIDescribedServer_IdentityProviderDetails m_identity_provider_details;
    bool m_identity_provider_details_isSet;
    bool m_identity_provider_details_isValid;

    OAIIdentityProviderType m_identity_provider_type;
    bool m_identity_provider_type_isSet;
    bool m_identity_provider_type_isValid;

    QString m_logging_role;
    bool m_logging_role_isSet;
    bool m_logging_role_isValid;

    QString m_post_authentication_login_banner;
    bool m_post_authentication_login_banner_isSet;
    bool m_post_authentication_login_banner_isValid;

    QString m_pre_authentication_login_banner;
    bool m_pre_authentication_login_banner_isSet;
    bool m_pre_authentication_login_banner_isValid;

    QList m_protocols;
    bool m_protocols_isSet;
    bool m_protocols_isValid;

    QString m_security_policy_name;
    bool m_security_policy_name_isSet;
    bool m_security_policy_name_isValid;

    QString m_server_id;
    bool m_server_id_isSet;
    bool m_server_id_isValid;

    OAIState m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    qint32 m_user_count;
    bool m_user_count_isSet;
    bool m_user_count_isValid;

    OAICreateServerRequest_WorkflowDetails m_workflow_details;
    bool m_workflow_details_isSet;
    bool m_workflow_details_isValid;

    QList m_structured_log_destinations;
    bool m_structured_log_destinations_isSet;
    bool m_structured_log_destinations_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeServerResponse_Server)

#endif // OAIDescribeServerResponse_Server_H
