/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStartFileTransferRequest.h
 *
 * 
 */

#ifndef OAIStartFileTransferRequest_H
#define OAIStartFileTransferRequest_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIStartFileTransferRequest : public OAIObject {
public:
    OAIStartFileTransferRequest();
    OAIStartFileTransferRequest(QString json);
    ~OAIStartFileTransferRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getConnectorId() const;
    void setConnectorId(const QString &connector_id);
    bool is_connector_id_Set() const;
    bool is_connector_id_Valid() const;

    QList getSendFilePaths() const;
    void setSendFilePaths(const QList &send_file_paths);
    bool is_send_file_paths_Set() const;
    bool is_send_file_paths_Valid() const;

    QList getRetrieveFilePaths() const;
    void setRetrieveFilePaths(const QList &retrieve_file_paths);
    bool is_retrieve_file_paths_Set() const;
    bool is_retrieve_file_paths_Valid() const;

    QString getLocalDirectoryPath() const;
    void setLocalDirectoryPath(const QString &local_directory_path);
    bool is_local_directory_path_Set() const;
    bool is_local_directory_path_Valid() const;

    QString getRemoteDirectoryPath() const;
    void setRemoteDirectoryPath(const QString &remote_directory_path);
    bool is_remote_directory_path_Set() const;
    bool is_remote_directory_path_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_connector_id;
    bool m_connector_id_isSet;
    bool m_connector_id_isValid;

    QList m_send_file_paths;
    bool m_send_file_paths_isSet;
    bool m_send_file_paths_isValid;

    QList m_retrieve_file_paths;
    bool m_retrieve_file_paths_isSet;
    bool m_retrieve_file_paths_isValid;

    QString m_local_directory_path;
    bool m_local_directory_path_isSet;
    bool m_local_directory_path_isValid;

    QString m_remote_directory_path;
    bool m_remote_directory_path_isSet;
    bool m_remote_directory_path_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStartFileTransferRequest)

#endif // OAIStartFileTransferRequest_H
