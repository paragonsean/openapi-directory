/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileLocation_S3FileLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFileLocation_S3FileLocation::OAIFileLocation_S3FileLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFileLocation_S3FileLocation::OAIFileLocation_S3FileLocation() {
    this->initializeModel();
}

OAIFileLocation_S3FileLocation::~OAIFileLocation_S3FileLocation() {}

void OAIFileLocation_S3FileLocation::initializeModel() {

    m_bucket_isSet = false;
    m_bucket_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_version_id_isSet = false;
    m_version_id_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;
}

void OAIFileLocation_S3FileLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFileLocation_S3FileLocation::fromJsonObject(QJsonObject json) {

    m_bucket_isValid = ::OpenAPI::fromJsonValue(m_bucket, json[QString("Bucket")]);
    m_bucket_isSet = !json[QString("Bucket")].isNull() && m_bucket_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("Key")]);
    m_key_isSet = !json[QString("Key")].isNull() && m_key_isValid;

    m_version_id_isValid = ::OpenAPI::fromJsonValue(m_version_id, json[QString("VersionId")]);
    m_version_id_isSet = !json[QString("VersionId")].isNull() && m_version_id_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("Etag")]);
    m_etag_isSet = !json[QString("Etag")].isNull() && m_etag_isValid;
}

QString OAIFileLocation_S3FileLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFileLocation_S3FileLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_isSet) {
        obj.insert(QString("Bucket"), ::OpenAPI::toJsonValue(m_bucket));
    }
    if (m_key_isSet) {
        obj.insert(QString("Key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_version_id_isSet) {
        obj.insert(QString("VersionId"), ::OpenAPI::toJsonValue(m_version_id));
    }
    if (m_etag_isSet) {
        obj.insert(QString("Etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    return obj;
}

QString OAIFileLocation_S3FileLocation::getBucket() const {
    return m_bucket;
}
void OAIFileLocation_S3FileLocation::setBucket(const QString &bucket) {
    m_bucket = bucket;
    m_bucket_isSet = true;
}

bool OAIFileLocation_S3FileLocation::is_bucket_Set() const{
    return m_bucket_isSet;
}

bool OAIFileLocation_S3FileLocation::is_bucket_Valid() const{
    return m_bucket_isValid;
}

QString OAIFileLocation_S3FileLocation::getKey() const {
    return m_key;
}
void OAIFileLocation_S3FileLocation::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIFileLocation_S3FileLocation::is_key_Set() const{
    return m_key_isSet;
}

bool OAIFileLocation_S3FileLocation::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIFileLocation_S3FileLocation::getVersionId() const {
    return m_version_id;
}
void OAIFileLocation_S3FileLocation::setVersionId(const QString &version_id) {
    m_version_id = version_id;
    m_version_id_isSet = true;
}

bool OAIFileLocation_S3FileLocation::is_version_id_Set() const{
    return m_version_id_isSet;
}

bool OAIFileLocation_S3FileLocation::is_version_id_Valid() const{
    return m_version_id_isValid;
}

QString OAIFileLocation_S3FileLocation::getEtag() const {
    return m_etag;
}
void OAIFileLocation_S3FileLocation::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIFileLocation_S3FileLocation::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIFileLocation_S3FileLocation::is_etag_Valid() const{
    return m_etag_isValid;
}

bool OAIFileLocation_S3FileLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFileLocation_S3FileLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
