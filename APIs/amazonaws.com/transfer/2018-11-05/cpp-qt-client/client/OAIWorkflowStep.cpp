/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflowStep.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflowStep::OAIWorkflowStep(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflowStep::OAIWorkflowStep() {
    this->initializeModel();
}

OAIWorkflowStep::~OAIWorkflowStep() {}

void OAIWorkflowStep::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_copy_step_details_isSet = false;
    m_copy_step_details_isValid = false;

    m_custom_step_details_isSet = false;
    m_custom_step_details_isValid = false;

    m_delete_step_details_isSet = false;
    m_delete_step_details_isValid = false;

    m_tag_step_details_isSet = false;
    m_tag_step_details_isValid = false;

    m_decrypt_step_details_isSet = false;
    m_decrypt_step_details_isValid = false;
}

void OAIWorkflowStep::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflowStep::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_copy_step_details_isValid = ::OpenAPI::fromJsonValue(m_copy_step_details, json[QString("CopyStepDetails")]);
    m_copy_step_details_isSet = !json[QString("CopyStepDetails")].isNull() && m_copy_step_details_isValid;

    m_custom_step_details_isValid = ::OpenAPI::fromJsonValue(m_custom_step_details, json[QString("CustomStepDetails")]);
    m_custom_step_details_isSet = !json[QString("CustomStepDetails")].isNull() && m_custom_step_details_isValid;

    m_delete_step_details_isValid = ::OpenAPI::fromJsonValue(m_delete_step_details, json[QString("DeleteStepDetails")]);
    m_delete_step_details_isSet = !json[QString("DeleteStepDetails")].isNull() && m_delete_step_details_isValid;

    m_tag_step_details_isValid = ::OpenAPI::fromJsonValue(m_tag_step_details, json[QString("TagStepDetails")]);
    m_tag_step_details_isSet = !json[QString("TagStepDetails")].isNull() && m_tag_step_details_isValid;

    m_decrypt_step_details_isValid = ::OpenAPI::fromJsonValue(m_decrypt_step_details, json[QString("DecryptStepDetails")]);
    m_decrypt_step_details_isSet = !json[QString("DecryptStepDetails")].isNull() && m_decrypt_step_details_isValid;
}

QString OAIWorkflowStep::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflowStep::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_copy_step_details.isSet()) {
        obj.insert(QString("CopyStepDetails"), ::OpenAPI::toJsonValue(m_copy_step_details));
    }
    if (m_custom_step_details.isSet()) {
        obj.insert(QString("CustomStepDetails"), ::OpenAPI::toJsonValue(m_custom_step_details));
    }
    if (m_delete_step_details.isSet()) {
        obj.insert(QString("DeleteStepDetails"), ::OpenAPI::toJsonValue(m_delete_step_details));
    }
    if (m_tag_step_details.isSet()) {
        obj.insert(QString("TagStepDetails"), ::OpenAPI::toJsonValue(m_tag_step_details));
    }
    if (m_decrypt_step_details.isSet()) {
        obj.insert(QString("DecryptStepDetails"), ::OpenAPI::toJsonValue(m_decrypt_step_details));
    }
    return obj;
}

OAIWorkflowStepType OAIWorkflowStep::getType() const {
    return m_type;
}
void OAIWorkflowStep::setType(const OAIWorkflowStepType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIWorkflowStep::is_type_Set() const{
    return m_type_isSet;
}

bool OAIWorkflowStep::is_type_Valid() const{
    return m_type_isValid;
}

OAIWorkflowStep_CopyStepDetails OAIWorkflowStep::getCopyStepDetails() const {
    return m_copy_step_details;
}
void OAIWorkflowStep::setCopyStepDetails(const OAIWorkflowStep_CopyStepDetails &copy_step_details) {
    m_copy_step_details = copy_step_details;
    m_copy_step_details_isSet = true;
}

bool OAIWorkflowStep::is_copy_step_details_Set() const{
    return m_copy_step_details_isSet;
}

bool OAIWorkflowStep::is_copy_step_details_Valid() const{
    return m_copy_step_details_isValid;
}

OAIWorkflowStep_CustomStepDetails OAIWorkflowStep::getCustomStepDetails() const {
    return m_custom_step_details;
}
void OAIWorkflowStep::setCustomStepDetails(const OAIWorkflowStep_CustomStepDetails &custom_step_details) {
    m_custom_step_details = custom_step_details;
    m_custom_step_details_isSet = true;
}

bool OAIWorkflowStep::is_custom_step_details_Set() const{
    return m_custom_step_details_isSet;
}

bool OAIWorkflowStep::is_custom_step_details_Valid() const{
    return m_custom_step_details_isValid;
}

OAIWorkflowStep_DeleteStepDetails OAIWorkflowStep::getDeleteStepDetails() const {
    return m_delete_step_details;
}
void OAIWorkflowStep::setDeleteStepDetails(const OAIWorkflowStep_DeleteStepDetails &delete_step_details) {
    m_delete_step_details = delete_step_details;
    m_delete_step_details_isSet = true;
}

bool OAIWorkflowStep::is_delete_step_details_Set() const{
    return m_delete_step_details_isSet;
}

bool OAIWorkflowStep::is_delete_step_details_Valid() const{
    return m_delete_step_details_isValid;
}

OAIWorkflowStep_TagStepDetails OAIWorkflowStep::getTagStepDetails() const {
    return m_tag_step_details;
}
void OAIWorkflowStep::setTagStepDetails(const OAIWorkflowStep_TagStepDetails &tag_step_details) {
    m_tag_step_details = tag_step_details;
    m_tag_step_details_isSet = true;
}

bool OAIWorkflowStep::is_tag_step_details_Set() const{
    return m_tag_step_details_isSet;
}

bool OAIWorkflowStep::is_tag_step_details_Valid() const{
    return m_tag_step_details_isValid;
}

OAIWorkflowStep_DecryptStepDetails OAIWorkflowStep::getDecryptStepDetails() const {
    return m_decrypt_step_details;
}
void OAIWorkflowStep::setDecryptStepDetails(const OAIWorkflowStep_DecryptStepDetails &decrypt_step_details) {
    m_decrypt_step_details = decrypt_step_details;
    m_decrypt_step_details_isSet = true;
}

bool OAIWorkflowStep::is_decrypt_step_details_Set() const{
    return m_decrypt_step_details_isSet;
}

bool OAIWorkflowStep::is_decrypt_step_details_Valid() const{
    return m_decrypt_step_details_isValid;
}

bool OAIWorkflowStep::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_step_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_step_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_step_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_step_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_decrypt_step_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflowStep::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
