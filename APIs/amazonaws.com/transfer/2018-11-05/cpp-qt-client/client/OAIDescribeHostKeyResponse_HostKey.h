/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeHostKeyResponse_HostKey.h
 *
 * 
 */

#ifndef OAIDescribeHostKeyResponse_HostKey_H
#define OAIDescribeHostKeyResponse_HostKey_H

#include <QJsonObject>

#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDescribeHostKeyResponse_HostKey : public OAIObject {
public:
    OAIDescribeHostKeyResponse_HostKey();
    OAIDescribeHostKeyResponse_HostKey(QString json);
    ~OAIDescribeHostKeyResponse_HostKey() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QString getHostKeyId() const;
    void setHostKeyId(const QString &host_key_id);
    bool is_host_key_id_Set() const;
    bool is_host_key_id_Valid() const;

    QString getHostKeyFingerprint() const;
    void setHostKeyFingerprint(const QString &host_key_fingerprint);
    bool is_host_key_fingerprint_Set() const;
    bool is_host_key_fingerprint_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QDateTime getDateImported() const;
    void setDateImported(const QDateTime &date_imported);
    bool is_date_imported_Set() const;
    bool is_date_imported_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QString m_host_key_id;
    bool m_host_key_id_isSet;
    bool m_host_key_id_isValid;

    QString m_host_key_fingerprint;
    bool m_host_key_fingerprint_isSet;
    bool m_host_key_fingerprint_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QDateTime m_date_imported;
    bool m_date_imported_isSet;
    bool m_date_imported_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeHostKeyResponse_HostKey)

#endif // OAIDescribeHostKeyResponse_HostKey_H
