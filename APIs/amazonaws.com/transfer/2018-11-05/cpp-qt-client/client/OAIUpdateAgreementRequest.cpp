/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateAgreementRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateAgreementRequest::OAIUpdateAgreementRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateAgreementRequest::OAIUpdateAgreementRequest() {
    this->initializeModel();
}

OAIUpdateAgreementRequest::~OAIUpdateAgreementRequest() {}

void OAIUpdateAgreementRequest::initializeModel() {

    m_agreement_id_isSet = false;
    m_agreement_id_isValid = false;

    m_server_id_isSet = false;
    m_server_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_local_profile_id_isSet = false;
    m_local_profile_id_isValid = false;

    m_partner_profile_id_isSet = false;
    m_partner_profile_id_isValid = false;

    m_base_directory_isSet = false;
    m_base_directory_isValid = false;

    m_access_role_isSet = false;
    m_access_role_isValid = false;
}

void OAIUpdateAgreementRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateAgreementRequest::fromJsonObject(QJsonObject json) {

    m_agreement_id_isValid = ::OpenAPI::fromJsonValue(m_agreement_id, json[QString("AgreementId")]);
    m_agreement_id_isSet = !json[QString("AgreementId")].isNull() && m_agreement_id_isValid;

    m_server_id_isValid = ::OpenAPI::fromJsonValue(m_server_id, json[QString("ServerId")]);
    m_server_id_isSet = !json[QString("ServerId")].isNull() && m_server_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_local_profile_id_isValid = ::OpenAPI::fromJsonValue(m_local_profile_id, json[QString("LocalProfileId")]);
    m_local_profile_id_isSet = !json[QString("LocalProfileId")].isNull() && m_local_profile_id_isValid;

    m_partner_profile_id_isValid = ::OpenAPI::fromJsonValue(m_partner_profile_id, json[QString("PartnerProfileId")]);
    m_partner_profile_id_isSet = !json[QString("PartnerProfileId")].isNull() && m_partner_profile_id_isValid;

    m_base_directory_isValid = ::OpenAPI::fromJsonValue(m_base_directory, json[QString("BaseDirectory")]);
    m_base_directory_isSet = !json[QString("BaseDirectory")].isNull() && m_base_directory_isValid;

    m_access_role_isValid = ::OpenAPI::fromJsonValue(m_access_role, json[QString("AccessRole")]);
    m_access_role_isSet = !json[QString("AccessRole")].isNull() && m_access_role_isValid;
}

QString OAIUpdateAgreementRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateAgreementRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_agreement_id_isSet) {
        obj.insert(QString("AgreementId"), ::OpenAPI::toJsonValue(m_agreement_id));
    }
    if (m_server_id_isSet) {
        obj.insert(QString("ServerId"), ::OpenAPI::toJsonValue(m_server_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_local_profile_id_isSet) {
        obj.insert(QString("LocalProfileId"), ::OpenAPI::toJsonValue(m_local_profile_id));
    }
    if (m_partner_profile_id_isSet) {
        obj.insert(QString("PartnerProfileId"), ::OpenAPI::toJsonValue(m_partner_profile_id));
    }
    if (m_base_directory_isSet) {
        obj.insert(QString("BaseDirectory"), ::OpenAPI::toJsonValue(m_base_directory));
    }
    if (m_access_role_isSet) {
        obj.insert(QString("AccessRole"), ::OpenAPI::toJsonValue(m_access_role));
    }
    return obj;
}

QString OAIUpdateAgreementRequest::getAgreementId() const {
    return m_agreement_id;
}
void OAIUpdateAgreementRequest::setAgreementId(const QString &agreement_id) {
    m_agreement_id = agreement_id;
    m_agreement_id_isSet = true;
}

bool OAIUpdateAgreementRequest::is_agreement_id_Set() const{
    return m_agreement_id_isSet;
}

bool OAIUpdateAgreementRequest::is_agreement_id_Valid() const{
    return m_agreement_id_isValid;
}

QString OAIUpdateAgreementRequest::getServerId() const {
    return m_server_id;
}
void OAIUpdateAgreementRequest::setServerId(const QString &server_id) {
    m_server_id = server_id;
    m_server_id_isSet = true;
}

bool OAIUpdateAgreementRequest::is_server_id_Set() const{
    return m_server_id_isSet;
}

bool OAIUpdateAgreementRequest::is_server_id_Valid() const{
    return m_server_id_isValid;
}

QString OAIUpdateAgreementRequest::getDescription() const {
    return m_description;
}
void OAIUpdateAgreementRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateAgreementRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateAgreementRequest::is_description_Valid() const{
    return m_description_isValid;
}

OAIAgreementStatusType OAIUpdateAgreementRequest::getStatus() const {
    return m_status;
}
void OAIUpdateAgreementRequest::setStatus(const OAIAgreementStatusType &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUpdateAgreementRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUpdateAgreementRequest::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIUpdateAgreementRequest::getLocalProfileId() const {
    return m_local_profile_id;
}
void OAIUpdateAgreementRequest::setLocalProfileId(const QString &local_profile_id) {
    m_local_profile_id = local_profile_id;
    m_local_profile_id_isSet = true;
}

bool OAIUpdateAgreementRequest::is_local_profile_id_Set() const{
    return m_local_profile_id_isSet;
}

bool OAIUpdateAgreementRequest::is_local_profile_id_Valid() const{
    return m_local_profile_id_isValid;
}

QString OAIUpdateAgreementRequest::getPartnerProfileId() const {
    return m_partner_profile_id;
}
void OAIUpdateAgreementRequest::setPartnerProfileId(const QString &partner_profile_id) {
    m_partner_profile_id = partner_profile_id;
    m_partner_profile_id_isSet = true;
}

bool OAIUpdateAgreementRequest::is_partner_profile_id_Set() const{
    return m_partner_profile_id_isSet;
}

bool OAIUpdateAgreementRequest::is_partner_profile_id_Valid() const{
    return m_partner_profile_id_isValid;
}

QString OAIUpdateAgreementRequest::getBaseDirectory() const {
    return m_base_directory;
}
void OAIUpdateAgreementRequest::setBaseDirectory(const QString &base_directory) {
    m_base_directory = base_directory;
    m_base_directory_isSet = true;
}

bool OAIUpdateAgreementRequest::is_base_directory_Set() const{
    return m_base_directory_isSet;
}

bool OAIUpdateAgreementRequest::is_base_directory_Valid() const{
    return m_base_directory_isValid;
}

QString OAIUpdateAgreementRequest::getAccessRole() const {
    return m_access_role;
}
void OAIUpdateAgreementRequest::setAccessRole(const QString &access_role) {
    m_access_role = access_role;
    m_access_role_isSet = true;
}

bool OAIUpdateAgreementRequest::is_access_role_Set() const{
    return m_access_role_isSet;
}

bool OAIUpdateAgreementRequest::is_access_role_Valid() const{
    return m_access_role_isValid;
}

bool OAIUpdateAgreementRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agreement_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_directory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_role_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateAgreementRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_agreement_id_isValid && m_server_id_isValid && true;
}

} // namespace OpenAPI
