/**
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribedExecution.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribedExecution::OAIDescribedExecution(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribedExecution::OAIDescribedExecution() {
    this->initializeModel();
}

OAIDescribedExecution::~OAIDescribedExecution() {}

void OAIDescribedExecution::initializeModel() {

    m_execution_id_isSet = false;
    m_execution_id_isValid = false;

    m_initial_file_location_isSet = false;
    m_initial_file_location_isValid = false;

    m_service_metadata_isSet = false;
    m_service_metadata_isValid = false;

    m_execution_role_isSet = false;
    m_execution_role_isValid = false;

    m_logging_configuration_isSet = false;
    m_logging_configuration_isValid = false;

    m_posix_profile_isSet = false;
    m_posix_profile_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;
}

void OAIDescribedExecution::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribedExecution::fromJsonObject(QJsonObject json) {

    m_execution_id_isValid = ::OpenAPI::fromJsonValue(m_execution_id, json[QString("ExecutionId")]);
    m_execution_id_isSet = !json[QString("ExecutionId")].isNull() && m_execution_id_isValid;

    m_initial_file_location_isValid = ::OpenAPI::fromJsonValue(m_initial_file_location, json[QString("InitialFileLocation")]);
    m_initial_file_location_isSet = !json[QString("InitialFileLocation")].isNull() && m_initial_file_location_isValid;

    m_service_metadata_isValid = ::OpenAPI::fromJsonValue(m_service_metadata, json[QString("ServiceMetadata")]);
    m_service_metadata_isSet = !json[QString("ServiceMetadata")].isNull() && m_service_metadata_isValid;

    m_execution_role_isValid = ::OpenAPI::fromJsonValue(m_execution_role, json[QString("ExecutionRole")]);
    m_execution_role_isSet = !json[QString("ExecutionRole")].isNull() && m_execution_role_isValid;

    m_logging_configuration_isValid = ::OpenAPI::fromJsonValue(m_logging_configuration, json[QString("LoggingConfiguration")]);
    m_logging_configuration_isSet = !json[QString("LoggingConfiguration")].isNull() && m_logging_configuration_isValid;

    m_posix_profile_isValid = ::OpenAPI::fromJsonValue(m_posix_profile, json[QString("PosixProfile")]);
    m_posix_profile_isSet = !json[QString("PosixProfile")].isNull() && m_posix_profile_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("Results")]);
    m_results_isSet = !json[QString("Results")].isNull() && m_results_isValid;
}

QString OAIDescribedExecution::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribedExecution::asJsonObject() const {
    QJsonObject obj;
    if (m_execution_id_isSet) {
        obj.insert(QString("ExecutionId"), ::OpenAPI::toJsonValue(m_execution_id));
    }
    if (m_initial_file_location.isSet()) {
        obj.insert(QString("InitialFileLocation"), ::OpenAPI::toJsonValue(m_initial_file_location));
    }
    if (m_service_metadata.isSet()) {
        obj.insert(QString("ServiceMetadata"), ::OpenAPI::toJsonValue(m_service_metadata));
    }
    if (m_execution_role_isSet) {
        obj.insert(QString("ExecutionRole"), ::OpenAPI::toJsonValue(m_execution_role));
    }
    if (m_logging_configuration.isSet()) {
        obj.insert(QString("LoggingConfiguration"), ::OpenAPI::toJsonValue(m_logging_configuration));
    }
    if (m_posix_profile.isSet()) {
        obj.insert(QString("PosixProfile"), ::OpenAPI::toJsonValue(m_posix_profile));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_results.isSet()) {
        obj.insert(QString("Results"), ::OpenAPI::toJsonValue(m_results));
    }
    return obj;
}

QString OAIDescribedExecution::getExecutionId() const {
    return m_execution_id;
}
void OAIDescribedExecution::setExecutionId(const QString &execution_id) {
    m_execution_id = execution_id;
    m_execution_id_isSet = true;
}

bool OAIDescribedExecution::is_execution_id_Set() const{
    return m_execution_id_isSet;
}

bool OAIDescribedExecution::is_execution_id_Valid() const{
    return m_execution_id_isValid;
}

OAIDescribedExecution_InitialFileLocation OAIDescribedExecution::getInitialFileLocation() const {
    return m_initial_file_location;
}
void OAIDescribedExecution::setInitialFileLocation(const OAIDescribedExecution_InitialFileLocation &initial_file_location) {
    m_initial_file_location = initial_file_location;
    m_initial_file_location_isSet = true;
}

bool OAIDescribedExecution::is_initial_file_location_Set() const{
    return m_initial_file_location_isSet;
}

bool OAIDescribedExecution::is_initial_file_location_Valid() const{
    return m_initial_file_location_isValid;
}

OAIDescribedExecution_ServiceMetadata OAIDescribedExecution::getServiceMetadata() const {
    return m_service_metadata;
}
void OAIDescribedExecution::setServiceMetadata(const OAIDescribedExecution_ServiceMetadata &service_metadata) {
    m_service_metadata = service_metadata;
    m_service_metadata_isSet = true;
}

bool OAIDescribedExecution::is_service_metadata_Set() const{
    return m_service_metadata_isSet;
}

bool OAIDescribedExecution::is_service_metadata_Valid() const{
    return m_service_metadata_isValid;
}

QString OAIDescribedExecution::getExecutionRole() const {
    return m_execution_role;
}
void OAIDescribedExecution::setExecutionRole(const QString &execution_role) {
    m_execution_role = execution_role;
    m_execution_role_isSet = true;
}

bool OAIDescribedExecution::is_execution_role_Set() const{
    return m_execution_role_isSet;
}

bool OAIDescribedExecution::is_execution_role_Valid() const{
    return m_execution_role_isValid;
}

OAIDescribedExecution_LoggingConfiguration OAIDescribedExecution::getLoggingConfiguration() const {
    return m_logging_configuration;
}
void OAIDescribedExecution::setLoggingConfiguration(const OAIDescribedExecution_LoggingConfiguration &logging_configuration) {
    m_logging_configuration = logging_configuration;
    m_logging_configuration_isSet = true;
}

bool OAIDescribedExecution::is_logging_configuration_Set() const{
    return m_logging_configuration_isSet;
}

bool OAIDescribedExecution::is_logging_configuration_Valid() const{
    return m_logging_configuration_isValid;
}

OAIPosixProfile OAIDescribedExecution::getPosixProfile() const {
    return m_posix_profile;
}
void OAIDescribedExecution::setPosixProfile(const OAIPosixProfile &posix_profile) {
    m_posix_profile = posix_profile;
    m_posix_profile_isSet = true;
}

bool OAIDescribedExecution::is_posix_profile_Set() const{
    return m_posix_profile_isSet;
}

bool OAIDescribedExecution::is_posix_profile_Valid() const{
    return m_posix_profile_isValid;
}

OAIExecutionStatus OAIDescribedExecution::getStatus() const {
    return m_status;
}
void OAIDescribedExecution::setStatus(const OAIExecutionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribedExecution::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribedExecution::is_status_Valid() const{
    return m_status_isValid;
}

OAIDescribedExecution_Results OAIDescribedExecution::getResults() const {
    return m_results;
}
void OAIDescribedExecution::setResults(const OAIDescribedExecution_Results &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAIDescribedExecution::is_results_Set() const{
    return m_results_isSet;
}

bool OAIDescribedExecution::is_results_Valid() const{
    return m_results_isValid;
}

bool OAIDescribedExecution::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_execution_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_file_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_posix_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribedExecution::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
