/*
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateAccessRequest;
import org.openapitools.client.model.CreateAccessResponse;
import org.openapitools.client.model.CreateAgreementRequest;
import org.openapitools.client.model.CreateAgreementResponse;
import org.openapitools.client.model.CreateConnectorRequest;
import org.openapitools.client.model.CreateConnectorResponse;
import org.openapitools.client.model.CreateProfileRequest;
import org.openapitools.client.model.CreateProfileResponse;
import org.openapitools.client.model.CreateServerRequest;
import org.openapitools.client.model.CreateServerResponse;
import org.openapitools.client.model.CreateUserRequest;
import org.openapitools.client.model.CreateUserResponse;
import org.openapitools.client.model.CreateWorkflowRequest;
import org.openapitools.client.model.CreateWorkflowResponse;
import org.openapitools.client.model.DeleteAccessRequest;
import org.openapitools.client.model.DeleteAgreementRequest;
import org.openapitools.client.model.DeleteCertificateRequest;
import org.openapitools.client.model.DeleteConnectorRequest;
import org.openapitools.client.model.DeleteHostKeyRequest;
import org.openapitools.client.model.DeleteProfileRequest;
import org.openapitools.client.model.DeleteServerRequest;
import org.openapitools.client.model.DeleteSshPublicKeyRequest;
import org.openapitools.client.model.DeleteUserRequest;
import org.openapitools.client.model.DeleteWorkflowRequest;
import org.openapitools.client.model.DescribeAccessRequest;
import org.openapitools.client.model.DescribeAccessResponse;
import org.openapitools.client.model.DescribeAgreementRequest;
import org.openapitools.client.model.DescribeAgreementResponse;
import org.openapitools.client.model.DescribeCertificateRequest;
import org.openapitools.client.model.DescribeCertificateResponse;
import org.openapitools.client.model.DescribeConnectorRequest;
import org.openapitools.client.model.DescribeConnectorResponse;
import org.openapitools.client.model.DescribeExecutionRequest;
import org.openapitools.client.model.DescribeExecutionResponse;
import org.openapitools.client.model.DescribeHostKeyRequest;
import org.openapitools.client.model.DescribeHostKeyResponse;
import org.openapitools.client.model.DescribeProfileRequest;
import org.openapitools.client.model.DescribeProfileResponse;
import org.openapitools.client.model.DescribeSecurityPolicyRequest;
import org.openapitools.client.model.DescribeSecurityPolicyResponse;
import org.openapitools.client.model.DescribeServerRequest;
import org.openapitools.client.model.DescribeServerResponse;
import org.openapitools.client.model.DescribeUserRequest;
import org.openapitools.client.model.DescribeUserResponse;
import org.openapitools.client.model.DescribeWorkflowRequest;
import org.openapitools.client.model.DescribeWorkflowResponse;
import org.openapitools.client.model.ImportCertificateRequest;
import org.openapitools.client.model.ImportCertificateResponse;
import org.openapitools.client.model.ImportHostKeyRequest;
import org.openapitools.client.model.ImportHostKeyResponse;
import org.openapitools.client.model.ImportSshPublicKeyRequest;
import org.openapitools.client.model.ImportSshPublicKeyResponse;
import org.openapitools.client.model.ListAccessesRequest;
import org.openapitools.client.model.ListAccessesResponse;
import org.openapitools.client.model.ListAgreementsRequest;
import org.openapitools.client.model.ListAgreementsResponse;
import org.openapitools.client.model.ListCertificatesRequest;
import org.openapitools.client.model.ListCertificatesResponse;
import org.openapitools.client.model.ListConnectorsRequest;
import org.openapitools.client.model.ListConnectorsResponse;
import org.openapitools.client.model.ListExecutionsRequest;
import org.openapitools.client.model.ListExecutionsResponse;
import org.openapitools.client.model.ListHostKeysRequest;
import org.openapitools.client.model.ListHostKeysResponse;
import org.openapitools.client.model.ListProfilesRequest;
import org.openapitools.client.model.ListProfilesResponse;
import org.openapitools.client.model.ListSecurityPoliciesRequest;
import org.openapitools.client.model.ListSecurityPoliciesResponse;
import org.openapitools.client.model.ListServersRequest;
import org.openapitools.client.model.ListServersResponse;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ListUsersRequest;
import org.openapitools.client.model.ListUsersResponse;
import org.openapitools.client.model.ListWorkflowsRequest;
import org.openapitools.client.model.ListWorkflowsResponse;
import org.openapitools.client.model.SendWorkflowStepStateRequest;
import org.openapitools.client.model.StartFileTransferRequest;
import org.openapitools.client.model.StartFileTransferResponse;
import org.openapitools.client.model.StartServerRequest;
import org.openapitools.client.model.StopServerRequest;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.TestConnectionRequest;
import org.openapitools.client.model.TestConnectionResponse;
import org.openapitools.client.model.TestIdentityProviderRequest;
import org.openapitools.client.model.TestIdentityProviderResponse;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateAccessRequest;
import org.openapitools.client.model.UpdateAccessResponse;
import org.openapitools.client.model.UpdateAgreementRequest;
import org.openapitools.client.model.UpdateAgreementResponse;
import org.openapitools.client.model.UpdateCertificateRequest;
import org.openapitools.client.model.UpdateCertificateResponse;
import org.openapitools.client.model.UpdateConnectorRequest;
import org.openapitools.client.model.UpdateConnectorResponse;
import org.openapitools.client.model.UpdateHostKeyRequest;
import org.openapitools.client.model.UpdateHostKeyResponse;
import org.openapitools.client.model.UpdateProfileRequest;
import org.openapitools.client.model.UpdateProfileResponse;
import org.openapitools.client.model.UpdateServerRequest;
import org.openapitools.client.model.UpdateServerResponse;
import org.openapitools.client.model.UpdateUserRequest;
import org.openapitools.client.model.UpdateUserResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Used by administrators to choose which groups in the directory should have access to upload and download files over the enabled protocols using Transfer Family. For example, a Microsoft Active Directory might contain 50,000 users, but only a small fraction might need the ability to transfer files to the server. An administrator can use &lt;code&gt;CreateAccess&lt;/code&gt; to limit the access to the correct set of users who need this ability.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAccessTest() throws ApiException {
        String xAmzTarget = null;
        CreateAccessRequest createAccessRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAccessResponse response = api.createAccess(xAmzTarget, createAccessRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an agreement. An agreement is a bilateral trading partner agreement, or partnership, between an Transfer Family server and an AS2 process. The agreement defines the file and message transfer relationship between the server and the AS2 process. To define an agreement, Transfer Family combines a server, local profile, partner profile, certificate, and other attributes.&lt;/p&gt; &lt;p&gt;The partner is identified with the &lt;code&gt;PartnerProfileId&lt;/code&gt;, and the AS2 process is identified with the &lt;code&gt;LocalProfileId&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAgreementTest() throws ApiException {
        String xAmzTarget = null;
        CreateAgreementRequest createAgreementRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAgreementResponse response = api.createAgreement(xAmzTarget, createAgreementRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates the connector, which captures the parameters for an outbound connection for the AS2 or SFTP protocol. The connector is required for sending files to an externally hosted AS2 or SFTP server. For more details about AS2 connectors, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/transfer/latest/userguide/create-b2b-server.html#configure-as2-connector\&quot;&gt;Create AS2 connectors&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You must specify exactly one configuration object: either for AS2 (&lt;code&gt;As2Config&lt;/code&gt;) or SFTP (&lt;code&gt;SftpConfig&lt;/code&gt;).&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createConnectorTest() throws ApiException {
        String xAmzTarget = null;
        CreateConnectorRequest createConnectorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateConnectorResponse response = api.createConnector(xAmzTarget, createConnectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates the local or partner profile to use for AS2 transfers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProfileTest() throws ApiException {
        String xAmzTarget = null;
        CreateProfileRequest createProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateProfileResponse response = api.createProfile(xAmzTarget, createProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Instantiates an auto-scaling virtual server based on the selected file transfer protocol in Amazon Web Services. When you make updates to your file transfer protocol-enabled server or when you work with users, use the service-generated &lt;code&gt;ServerId&lt;/code&gt; property that is assigned to the newly created server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createServerTest() throws ApiException {
        String xAmzTarget = null;
        CreateServerRequest createServerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateServerResponse response = api.createServer(xAmzTarget, createServerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a user and associates them with an existing file transfer protocol-enabled server. You can only create and associate users with servers that have the &lt;code&gt;IdentityProviderType&lt;/code&gt; set to &lt;code&gt;SERVICE_MANAGED&lt;/code&gt;. Using parameters for &lt;code&gt;CreateUser&lt;/code&gt;, you can specify the user name, set the home directory, store the user&#39;s public key, and assign the user&#39;s Identity and Access Management (IAM) role. You can also optionally add a session policy, and assign metadata with tags that can be used to group and search for users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        String xAmzTarget = null;
        CreateUserRequest createUserRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateUserResponse response = api.createUser(xAmzTarget, createUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Allows you to create a workflow with specified steps and step details the workflow invokes after file transfer completes. After creating a workflow, you can associate the workflow created with any transfer servers by specifying the &lt;code&gt;workflow-details&lt;/code&gt; field in &lt;code&gt;CreateServer&lt;/code&gt; and &lt;code&gt;UpdateServer&lt;/code&gt; operations. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWorkflowTest() throws ApiException {
        String xAmzTarget = null;
        CreateWorkflowRequest createWorkflowRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateWorkflowResponse response = api.createWorkflow(xAmzTarget, createWorkflowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Allows you to delete the access specified in the &lt;code&gt;ServerID&lt;/code&gt; and &lt;code&gt;ExternalID&lt;/code&gt; parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAccessTest() throws ApiException {
        String xAmzTarget = null;
        DeleteAccessRequest deleteAccessRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteAccess(xAmzTarget, deleteAccessRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Delete the agreement that&#39;s specified in the provided &lt;code&gt;AgreementId&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAgreementTest() throws ApiException {
        String xAmzTarget = null;
        DeleteAgreementRequest deleteAgreementRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteAgreement(xAmzTarget, deleteAgreementRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the certificate that&#39;s specified in the &lt;code&gt;CertificateId&lt;/code&gt; parameter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCertificateTest() throws ApiException {
        String xAmzTarget = null;
        DeleteCertificateRequest deleteCertificateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteCertificate(xAmzTarget, deleteCertificateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the connector that&#39;s specified in the provided &lt;code&gt;ConnectorId&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteConnectorTest() throws ApiException {
        String xAmzTarget = null;
        DeleteConnectorRequest deleteConnectorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteConnector(xAmzTarget, deleteConnectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the host key that&#39;s specified in the &lt;code&gt;HostKeyId&lt;/code&gt; parameter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteHostKeyTest() throws ApiException {
        String xAmzTarget = null;
        DeleteHostKeyRequest deleteHostKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteHostKey(xAmzTarget, deleteHostKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the profile that&#39;s specified in the &lt;code&gt;ProfileId&lt;/code&gt; parameter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProfileTest() throws ApiException {
        String xAmzTarget = null;
        DeleteProfileRequest deleteProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteProfile(xAmzTarget, deleteProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the file transfer protocol-enabled server that you specify.&lt;/p&gt; &lt;p&gt;No response returns from this operation.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteServerTest() throws ApiException {
        String xAmzTarget = null;
        DeleteServerRequest deleteServerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteServer(xAmzTarget, deleteServerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a user&#39;s Secure Shell (SSH) public key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSshPublicKeyTest() throws ApiException {
        String xAmzTarget = null;
        DeleteSshPublicKeyRequest deleteSshPublicKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteSshPublicKey(xAmzTarget, deleteSshPublicKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the user belonging to a file transfer protocol-enabled server you specify.&lt;/p&gt; &lt;p&gt;No response returns from this operation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;When you delete a user from a server, the user&#39;s information is lost.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String xAmzTarget = null;
        DeleteUserRequest deleteUserRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteUser(xAmzTarget, deleteUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWorkflowTest() throws ApiException {
        String xAmzTarget = null;
        DeleteWorkflowRequest deleteWorkflowRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteWorkflow(xAmzTarget, deleteWorkflowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Describes the access that is assigned to the specific file transfer protocol-enabled server, as identified by its &lt;code&gt;ServerId&lt;/code&gt; property and its &lt;code&gt;ExternalId&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The response from this call returns the properties of the access that is associated with the &lt;code&gt;ServerId&lt;/code&gt; value that was specified.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeAccessTest() throws ApiException {
        String xAmzTarget = null;
        DescribeAccessRequest describeAccessRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAccessResponse response = api.describeAccess(xAmzTarget, describeAccessRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the agreement that&#39;s identified by the &lt;code&gt;AgreementId&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeAgreementTest() throws ApiException {
        String xAmzTarget = null;
        DescribeAgreementRequest describeAgreementRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAgreementResponse response = api.describeAgreement(xAmzTarget, describeAgreementRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the certificate that&#39;s identified by the &lt;code&gt;CertificateId&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeCertificateTest() throws ApiException {
        String xAmzTarget = null;
        DescribeCertificateRequest describeCertificateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeCertificateResponse response = api.describeCertificate(xAmzTarget, describeCertificateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the connector that&#39;s identified by the &lt;code&gt;ConnectorId.&lt;/code&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeConnectorTest() throws ApiException {
        String xAmzTarget = null;
        DescribeConnectorRequest describeConnectorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeConnectorResponse response = api.describeConnector(xAmzTarget, describeConnectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;You can use &lt;code&gt;DescribeExecution&lt;/code&gt; to check the details of the execution of the specified workflow.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This API call only returns details for in-progress workflows.&lt;/p&gt; &lt;p&gt; If you provide an ID for an execution that is not in progress, or if the execution doesn&#39;t match the specified workflow ID, you receive a &lt;code&gt;ResourceNotFound&lt;/code&gt; exception.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeExecutionTest() throws ApiException {
        String xAmzTarget = null;
        DescribeExecutionRequest describeExecutionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeExecutionResponse response = api.describeExecution(xAmzTarget, describeExecutionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the details of the host key that&#39;s specified by the &lt;code&gt;HostKeyId&lt;/code&gt; and &lt;code&gt;ServerId&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeHostKeyTest() throws ApiException {
        String xAmzTarget = null;
        DescribeHostKeyRequest describeHostKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeHostKeyResponse response = api.describeHostKey(xAmzTarget, describeHostKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the details of the profile that&#39;s specified by the &lt;code&gt;ProfileId&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeProfileTest() throws ApiException {
        String xAmzTarget = null;
        DescribeProfileRequest describeProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeProfileResponse response = api.describeProfile(xAmzTarget, describeProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the security policy that is attached to your file transfer protocol-enabled server. The response contains a description of the security policy&#39;s properties. For more information about security policies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/transfer/latest/userguide/security-policies.html\&quot;&gt;Working with security policies&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeSecurityPolicyTest() throws ApiException {
        String xAmzTarget = null;
        DescribeSecurityPolicyRequest describeSecurityPolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeSecurityPolicyResponse response = api.describeSecurityPolicy(xAmzTarget, describeSecurityPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Describes a file transfer protocol-enabled server that you specify by passing the &lt;code&gt;ServerId&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;The response contains a description of a server&#39;s properties. When you set &lt;code&gt;EndpointType&lt;/code&gt; to VPC, the response will contain the &lt;code&gt;EndpointDetails&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeServerTest() throws ApiException {
        String xAmzTarget = null;
        DescribeServerRequest describeServerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeServerResponse response = api.describeServer(xAmzTarget, describeServerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Describes the user assigned to the specific file transfer protocol-enabled server, as identified by its &lt;code&gt;ServerId&lt;/code&gt; property.&lt;/p&gt; &lt;p&gt;The response from this call returns the properties of the user associated with the &lt;code&gt;ServerId&lt;/code&gt; value that was specified.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeUserTest() throws ApiException {
        String xAmzTarget = null;
        DescribeUserRequest describeUserRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeUserResponse response = api.describeUser(xAmzTarget, describeUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the specified workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeWorkflowTest() throws ApiException {
        String xAmzTarget = null;
        DescribeWorkflowRequest describeWorkflowRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeWorkflowResponse response = api.describeWorkflow(xAmzTarget, describeWorkflowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Imports the signing and encryption certificates that you need to create local (AS2) profiles and partner profiles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importCertificateTest() throws ApiException {
        String xAmzTarget = null;
        ImportCertificateRequest importCertificateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ImportCertificateResponse response = api.importCertificate(xAmzTarget, importCertificateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds a host key to the server that&#39;s specified by the &lt;code&gt;ServerId&lt;/code&gt; parameter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importHostKeyTest() throws ApiException {
        String xAmzTarget = null;
        ImportHostKeyRequest importHostKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ImportHostKeyResponse response = api.importHostKey(xAmzTarget, importHostKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds a Secure Shell (SSH) public key to a Transfer Family user identified by a &lt;code&gt;UserName&lt;/code&gt; value assigned to the specific file transfer protocol-enabled server, identified by &lt;code&gt;ServerId&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The response returns the &lt;code&gt;UserName&lt;/code&gt; value, the &lt;code&gt;ServerId&lt;/code&gt; value, and the name of the &lt;code&gt;SshPublicKeyId&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importSshPublicKeyTest() throws ApiException {
        String xAmzTarget = null;
        ImportSshPublicKeyRequest importSshPublicKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ImportSshPublicKeyResponse response = api.importSshPublicKey(xAmzTarget, importSshPublicKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists the details for all the accesses you have on your server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAccessesTest() throws ApiException {
        String xAmzTarget = null;
        ListAccessesRequest listAccessesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListAccessesResponse response = api.listAccesses(xAmzTarget, listAccessesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of the agreements for the server that&#39;s identified by the &lt;code&gt;ServerId&lt;/code&gt; that you supply. If you want to limit the results to a certain number, supply a value for the &lt;code&gt;MaxResults&lt;/code&gt; parameter. If you ran the command previously and received a value for &lt;code&gt;NextToken&lt;/code&gt;, you can supply that value to continue listing agreements from where you left off.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAgreementsTest() throws ApiException {
        String xAmzTarget = null;
        ListAgreementsRequest listAgreementsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListAgreementsResponse response = api.listAgreements(xAmzTarget, listAgreementsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of the current certificates that have been imported into Transfer Family. If you want to limit the results to a certain number, supply a value for the &lt;code&gt;MaxResults&lt;/code&gt; parameter. If you ran the command previously and received a value for the &lt;code&gt;NextToken&lt;/code&gt; parameter, you can supply that value to continue listing certificates from where you left off.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCertificatesTest() throws ApiException {
        String xAmzTarget = null;
        ListCertificatesRequest listCertificatesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListCertificatesResponse response = api.listCertificates(xAmzTarget, listCertificatesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the connectors for the specified Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConnectorsTest() throws ApiException {
        String xAmzTarget = null;
        ListConnectorsRequest listConnectorsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListConnectorsResponse response = api.listConnectors(xAmzTarget, listConnectorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists all in-progress executions for the specified workflow.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If the specified workflow ID cannot be found, &lt;code&gt;ListExecutions&lt;/code&gt; returns a &lt;code&gt;ResourceNotFound&lt;/code&gt; exception.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listExecutionsTest() throws ApiException {
        String xAmzTarget = null;
        ListExecutionsRequest listExecutionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListExecutionsResponse response = api.listExecutions(xAmzTarget, listExecutionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of host keys for the server that&#39;s specified by the &lt;code&gt;ServerId&lt;/code&gt; parameter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listHostKeysTest() throws ApiException {
        String xAmzTarget = null;
        ListHostKeysRequest listHostKeysRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListHostKeysResponse response = api.listHostKeys(xAmzTarget, listHostKeysRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a list of the profiles for your system. If you want to limit the results to a certain number, supply a value for the &lt;code&gt;MaxResults&lt;/code&gt; parameter. If you ran the command previously and received a value for &lt;code&gt;NextToken&lt;/code&gt;, you can supply that value to continue listing profiles from where you left off.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProfilesTest() throws ApiException {
        String xAmzTarget = null;
        ListProfilesRequest listProfilesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListProfilesResponse response = api.listProfiles(xAmzTarget, listProfilesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the security policies that are attached to your file transfer protocol-enabled servers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSecurityPoliciesTest() throws ApiException {
        String xAmzTarget = null;
        ListSecurityPoliciesRequest listSecurityPoliciesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListSecurityPoliciesResponse response = api.listSecurityPolicies(xAmzTarget, listSecurityPoliciesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the file transfer protocol-enabled servers that are associated with your Amazon Web Services account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listServersTest() throws ApiException {
        String xAmzTarget = null;
        ListServersRequest listServersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListServersResponse response = api.listServers(xAmzTarget, listServersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all of the tags associated with the Amazon Resource Name (ARN) that you specify. The resource can be a user, server, or role.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String xAmzTarget = null;
        ListTagsForResourceRequest listTagsForResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListTagsForResourceResponse response = api.listTagsForResource(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the users for a file transfer protocol-enabled server that you specify by passing the &lt;code&gt;ServerId&lt;/code&gt; parameter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUsersTest() throws ApiException {
        String xAmzTarget = null;
        ListUsersRequest listUsersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListUsersResponse response = api.listUsers(xAmzTarget, listUsersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all workflows associated with your Amazon Web Services account for your current region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listWorkflowsTest() throws ApiException {
        String xAmzTarget = null;
        ListWorkflowsRequest listWorkflowsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListWorkflowsResponse response = api.listWorkflows(xAmzTarget, listWorkflowsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Sends a callback for asynchronous custom steps.&lt;/p&gt; &lt;p&gt; The &lt;code&gt;ExecutionId&lt;/code&gt;, &lt;code&gt;WorkflowId&lt;/code&gt;, and &lt;code&gt;Token&lt;/code&gt; are passed to the target resource during execution of a custom step of a workflow. You must include those with their callback as well as providing a status. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendWorkflowStepStateTest() throws ApiException {
        String xAmzTarget = null;
        SendWorkflowStepStateRequest sendWorkflowStepStateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.sendWorkflowStepState(xAmzTarget, sendWorkflowStepStateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Begins a file transfer between local Amazon Web Services storage and a remote AS2 or SFTP server.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For an AS2 connector, you specify the &lt;code&gt;ConnectorId&lt;/code&gt; and one or more &lt;code&gt;SendFilePaths&lt;/code&gt; to identify the files you want to transfer.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For an SFTP connector, the file transfer can be either outbound or inbound. In both cases, you specify the &lt;code&gt;ConnectorId&lt;/code&gt;. Depending on the direction of the transfer, you also specify the following items:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are transferring file from a partner&#39;s SFTP server to a Transfer Family server, you specify one or more &lt;code&gt;RetreiveFilePaths&lt;/code&gt; to identify the files you want to transfer, and a &lt;code&gt;LocalDirectoryPath&lt;/code&gt; to specify the destination folder.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are transferring file to a partner&#39;s SFTP server from Amazon Web Services storage, you specify one or more &lt;code&gt;SendFilePaths&lt;/code&gt; to identify the files you want to transfer, and a &lt;code&gt;RemoteDirectoryPath&lt;/code&gt; to specify the destination folder.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startFileTransferTest() throws ApiException {
        String xAmzTarget = null;
        StartFileTransferRequest startFileTransferRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartFileTransferResponse response = api.startFileTransfer(xAmzTarget, startFileTransferRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Changes the state of a file transfer protocol-enabled server from &lt;code&gt;OFFLINE&lt;/code&gt; to &lt;code&gt;ONLINE&lt;/code&gt;. It has no impact on a server that is already &lt;code&gt;ONLINE&lt;/code&gt;. An &lt;code&gt;ONLINE&lt;/code&gt; server can accept and process file transfer jobs.&lt;/p&gt; &lt;p&gt;The state of &lt;code&gt;STARTING&lt;/code&gt; indicates that the server is in an intermediate state, either not fully able to respond, or not fully online. The values of &lt;code&gt;START_FAILED&lt;/code&gt; can indicate an error condition.&lt;/p&gt; &lt;p&gt;No response is returned from this call.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startServerTest() throws ApiException {
        String xAmzTarget = null;
        StartServerRequest startServerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.startServer(xAmzTarget, startServerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Changes the state of a file transfer protocol-enabled server from &lt;code&gt;ONLINE&lt;/code&gt; to &lt;code&gt;OFFLINE&lt;/code&gt;. An &lt;code&gt;OFFLINE&lt;/code&gt; server cannot accept and process file transfer jobs. Information tied to your server, such as server and user properties, are not affected by stopping your server.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Stopping the server does not reduce or impact your file transfer protocol endpoint billing; you must delete the server to stop being billed.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The state of &lt;code&gt;STOPPING&lt;/code&gt; indicates that the server is in an intermediate state, either not fully able to respond, or not fully offline. The values of &lt;code&gt;STOP_FAILED&lt;/code&gt; can indicate an error condition.&lt;/p&gt; &lt;p&gt;No response is returned from this call.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopServerTest() throws ApiException {
        String xAmzTarget = null;
        StopServerRequest stopServerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.stopServer(xAmzTarget, stopServerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Attaches a key-value pair to a resource, as identified by its Amazon Resource Name (ARN). Resources are users, servers, roles, and other entities.&lt;/p&gt; &lt;p&gt;There is no response returned from this call.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String xAmzTarget = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.tagResource(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Tests whether your SFTP connector is set up successfully. We highly recommend that you call this operation to test your ability to transfer files between a Transfer Family server and a trading partner&#39;s SFTP server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testConnectionTest() throws ApiException {
        String xAmzTarget = null;
        TestConnectionRequest testConnectionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        TestConnectionResponse response = api.testConnection(xAmzTarget, testConnectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;If the &lt;code&gt;IdentityProviderType&lt;/code&gt; of a file transfer protocol-enabled server is &lt;code&gt;AWS_DIRECTORY_SERVICE&lt;/code&gt; or &lt;code&gt;API_Gateway&lt;/code&gt;, tests whether your identity provider is set up successfully. We highly recommend that you call this operation to test your authentication method as soon as you create your server. By doing so, you can troubleshoot issues with the identity provider integration to ensure that your users can successfully use the service.&lt;/p&gt; &lt;p&gt; The &lt;code&gt;ServerId&lt;/code&gt; and &lt;code&gt;UserName&lt;/code&gt; parameters are required. The &lt;code&gt;ServerProtocol&lt;/code&gt;, &lt;code&gt;SourceIp&lt;/code&gt;, and &lt;code&gt;UserPassword&lt;/code&gt; are all optional. &lt;/p&gt; &lt;p&gt;Note the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; You cannot use &lt;code&gt;TestIdentityProvider&lt;/code&gt; if the &lt;code&gt;IdentityProviderType&lt;/code&gt; of your server is &lt;code&gt;SERVICE_MANAGED&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TestIdentityProvider&lt;/code&gt; does not work with keys: it only accepts passwords.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TestIdentityProvider&lt;/code&gt; can test the password operation for a custom Identity Provider that handles keys and passwords.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; If you provide any incorrect values for any parameters, the &lt;code&gt;Response&lt;/code&gt; field is empty. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; If you provide a server ID for a server that uses service-managed users, you get an error: &lt;/p&gt; &lt;p&gt; &lt;code&gt; An error occurred (InvalidRequestException) when calling the TestIdentityProvider operation: s-&lt;i&gt;server-ID&lt;/i&gt; not configured for external auth &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; If you enter a Server ID for the &lt;code&gt;--server-id&lt;/code&gt; parameter that does not identify an actual Transfer server, you receive the following error: &lt;/p&gt; &lt;p&gt; &lt;code&gt;An error occurred (ResourceNotFoundException) when calling the TestIdentityProvider operation: Unknown server&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;It is possible your sever is in a different region. You can specify a region by adding the following: &lt;code&gt;--region region-code&lt;/code&gt;, such as &lt;code&gt;--region us-east-2&lt;/code&gt; to specify a server in &lt;b&gt;US East (Ohio)&lt;/b&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testIdentityProviderTest() throws ApiException {
        String xAmzTarget = null;
        TestIdentityProviderRequest testIdentityProviderRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        TestIdentityProviderResponse response = api.testIdentityProvider(xAmzTarget, testIdentityProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Detaches a key-value pair from a resource, as identified by its Amazon Resource Name (ARN). Resources are users, servers, roles, and other entities.&lt;/p&gt; &lt;p&gt;No response is returned from this call.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String xAmzTarget = null;
        UntagResourceRequest untagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.untagResource(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Allows you to update parameters for the access specified in the &lt;code&gt;ServerID&lt;/code&gt; and &lt;code&gt;ExternalID&lt;/code&gt; parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAccessTest() throws ApiException {
        String xAmzTarget = null;
        UpdateAccessRequest updateAccessRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateAccessResponse response = api.updateAccess(xAmzTarget, updateAccessRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates some of the parameters for an existing agreement. Provide the &lt;code&gt;AgreementId&lt;/code&gt; and the &lt;code&gt;ServerId&lt;/code&gt; for the agreement that you want to update, along with the new values for the parameters to update.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAgreementTest() throws ApiException {
        String xAmzTarget = null;
        UpdateAgreementRequest updateAgreementRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateAgreementResponse response = api.updateAgreement(xAmzTarget, updateAgreementRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the active and inactive dates for a certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCertificateTest() throws ApiException {
        String xAmzTarget = null;
        UpdateCertificateRequest updateCertificateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateCertificateResponse response = api.updateCertificate(xAmzTarget, updateCertificateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates some of the parameters for an existing connector. Provide the &lt;code&gt;ConnectorId&lt;/code&gt; for the connector that you want to update, along with the new values for the parameters to update.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConnectorTest() throws ApiException {
        String xAmzTarget = null;
        UpdateConnectorRequest updateConnectorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateConnectorResponse response = api.updateConnector(xAmzTarget, updateConnectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the description for the host key that&#39;s specified by the &lt;code&gt;ServerId&lt;/code&gt; and &lt;code&gt;HostKeyId&lt;/code&gt; parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateHostKeyTest() throws ApiException {
        String xAmzTarget = null;
        UpdateHostKeyRequest updateHostKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateHostKeyResponse response = api.updateHostKey(xAmzTarget, updateHostKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates some of the parameters for an existing profile. Provide the &lt;code&gt;ProfileId&lt;/code&gt; for the profile that you want to update, along with the new values for the parameters to update.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProfileTest() throws ApiException {
        String xAmzTarget = null;
        UpdateProfileRequest updateProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateProfileResponse response = api.updateProfile(xAmzTarget, updateProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the file transfer protocol-enabled server&#39;s properties after that server has been created.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;UpdateServer&lt;/code&gt; call returns the &lt;code&gt;ServerId&lt;/code&gt; of the server you updated.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateServerTest() throws ApiException {
        String xAmzTarget = null;
        UpdateServerRequest updateServerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateServerResponse response = api.updateServer(xAmzTarget, updateServerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Assigns new properties to a user. Parameters you pass modify any or all of the following: the home directory, role, and policy for the &lt;code&gt;UserName&lt;/code&gt; and &lt;code&gt;ServerId&lt;/code&gt; you specify.&lt;/p&gt; &lt;p&gt;The response returns the &lt;code&gt;ServerId&lt;/code&gt; and the &lt;code&gt;UserName&lt;/code&gt; for the updated user.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        String xAmzTarget = null;
        UpdateUserRequest updateUserRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateUserResponse response = api.updateUser(xAmzTarget, updateUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
