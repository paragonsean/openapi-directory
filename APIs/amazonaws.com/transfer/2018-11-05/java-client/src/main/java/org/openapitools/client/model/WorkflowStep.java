/*
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.WorkflowStepCopyStepDetails;
import org.openapitools.client.model.WorkflowStepCustomStepDetails;
import org.openapitools.client.model.WorkflowStepDecryptStepDetails;
import org.openapitools.client.model.WorkflowStepDeleteStepDetails;
import org.openapitools.client.model.WorkflowStepTagStepDetails;
import org.openapitools.client.model.WorkflowStepType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The basic building block of a workflow.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:39.227658-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkflowStep {
  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private WorkflowStepType type;

  public static final String SERIALIZED_NAME_COPY_STEP_DETAILS = "CopyStepDetails";
  @SerializedName(SERIALIZED_NAME_COPY_STEP_DETAILS)
  private WorkflowStepCopyStepDetails copyStepDetails;

  public static final String SERIALIZED_NAME_CUSTOM_STEP_DETAILS = "CustomStepDetails";
  @SerializedName(SERIALIZED_NAME_CUSTOM_STEP_DETAILS)
  private WorkflowStepCustomStepDetails customStepDetails;

  public static final String SERIALIZED_NAME_DELETE_STEP_DETAILS = "DeleteStepDetails";
  @SerializedName(SERIALIZED_NAME_DELETE_STEP_DETAILS)
  private WorkflowStepDeleteStepDetails deleteStepDetails;

  public static final String SERIALIZED_NAME_TAG_STEP_DETAILS = "TagStepDetails";
  @SerializedName(SERIALIZED_NAME_TAG_STEP_DETAILS)
  private WorkflowStepTagStepDetails tagStepDetails;

  public static final String SERIALIZED_NAME_DECRYPT_STEP_DETAILS = "DecryptStepDetails";
  @SerializedName(SERIALIZED_NAME_DECRYPT_STEP_DETAILS)
  private WorkflowStepDecryptStepDetails decryptStepDetails;

  public WorkflowStep() {
  }

  public WorkflowStep type(WorkflowStepType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public WorkflowStepType getType() {
    return type;
  }

  public void setType(WorkflowStepType type) {
    this.type = type;
  }


  public WorkflowStep copyStepDetails(WorkflowStepCopyStepDetails copyStepDetails) {
    this.copyStepDetails = copyStepDetails;
    return this;
  }

  /**
   * Get copyStepDetails
   * @return copyStepDetails
   */
  @javax.annotation.Nullable
  public WorkflowStepCopyStepDetails getCopyStepDetails() {
    return copyStepDetails;
  }

  public void setCopyStepDetails(WorkflowStepCopyStepDetails copyStepDetails) {
    this.copyStepDetails = copyStepDetails;
  }


  public WorkflowStep customStepDetails(WorkflowStepCustomStepDetails customStepDetails) {
    this.customStepDetails = customStepDetails;
    return this;
  }

  /**
   * Get customStepDetails
   * @return customStepDetails
   */
  @javax.annotation.Nullable
  public WorkflowStepCustomStepDetails getCustomStepDetails() {
    return customStepDetails;
  }

  public void setCustomStepDetails(WorkflowStepCustomStepDetails customStepDetails) {
    this.customStepDetails = customStepDetails;
  }


  public WorkflowStep deleteStepDetails(WorkflowStepDeleteStepDetails deleteStepDetails) {
    this.deleteStepDetails = deleteStepDetails;
    return this;
  }

  /**
   * Get deleteStepDetails
   * @return deleteStepDetails
   */
  @javax.annotation.Nullable
  public WorkflowStepDeleteStepDetails getDeleteStepDetails() {
    return deleteStepDetails;
  }

  public void setDeleteStepDetails(WorkflowStepDeleteStepDetails deleteStepDetails) {
    this.deleteStepDetails = deleteStepDetails;
  }


  public WorkflowStep tagStepDetails(WorkflowStepTagStepDetails tagStepDetails) {
    this.tagStepDetails = tagStepDetails;
    return this;
  }

  /**
   * Get tagStepDetails
   * @return tagStepDetails
   */
  @javax.annotation.Nullable
  public WorkflowStepTagStepDetails getTagStepDetails() {
    return tagStepDetails;
  }

  public void setTagStepDetails(WorkflowStepTagStepDetails tagStepDetails) {
    this.tagStepDetails = tagStepDetails;
  }


  public WorkflowStep decryptStepDetails(WorkflowStepDecryptStepDetails decryptStepDetails) {
    this.decryptStepDetails = decryptStepDetails;
    return this;
  }

  /**
   * Get decryptStepDetails
   * @return decryptStepDetails
   */
  @javax.annotation.Nullable
  public WorkflowStepDecryptStepDetails getDecryptStepDetails() {
    return decryptStepDetails;
  }

  public void setDecryptStepDetails(WorkflowStepDecryptStepDetails decryptStepDetails) {
    this.decryptStepDetails = decryptStepDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowStep workflowStep = (WorkflowStep) o;
    return Objects.equals(this.type, workflowStep.type) &&
        Objects.equals(this.copyStepDetails, workflowStep.copyStepDetails) &&
        Objects.equals(this.customStepDetails, workflowStep.customStepDetails) &&
        Objects.equals(this.deleteStepDetails, workflowStep.deleteStepDetails) &&
        Objects.equals(this.tagStepDetails, workflowStep.tagStepDetails) &&
        Objects.equals(this.decryptStepDetails, workflowStep.decryptStepDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, copyStepDetails, customStepDetails, deleteStepDetails, tagStepDetails, decryptStepDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowStep {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    copyStepDetails: ").append(toIndentedString(copyStepDetails)).append("\n");
    sb.append("    customStepDetails: ").append(toIndentedString(customStepDetails)).append("\n");
    sb.append("    deleteStepDetails: ").append(toIndentedString(deleteStepDetails)).append("\n");
    sb.append("    tagStepDetails: ").append(toIndentedString(tagStepDetails)).append("\n");
    sb.append("    decryptStepDetails: ").append(toIndentedString(decryptStepDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Type");
    openapiFields.add("CopyStepDetails");
    openapiFields.add("CustomStepDetails");
    openapiFields.add("DeleteStepDetails");
    openapiFields.add("TagStepDetails");
    openapiFields.add("DecryptStepDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkflowStep
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkflowStep.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkflowStep is not found in the empty JSON string", WorkflowStep.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkflowStep.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkflowStep` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        WorkflowStepType.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `CopyStepDetails`
      if (jsonObj.get("CopyStepDetails") != null && !jsonObj.get("CopyStepDetails").isJsonNull()) {
        WorkflowStepCopyStepDetails.validateJsonElement(jsonObj.get("CopyStepDetails"));
      }
      // validate the optional field `CustomStepDetails`
      if (jsonObj.get("CustomStepDetails") != null && !jsonObj.get("CustomStepDetails").isJsonNull()) {
        WorkflowStepCustomStepDetails.validateJsonElement(jsonObj.get("CustomStepDetails"));
      }
      // validate the optional field `DeleteStepDetails`
      if (jsonObj.get("DeleteStepDetails") != null && !jsonObj.get("DeleteStepDetails").isJsonNull()) {
        WorkflowStepDeleteStepDetails.validateJsonElement(jsonObj.get("DeleteStepDetails"));
      }
      // validate the optional field `TagStepDetails`
      if (jsonObj.get("TagStepDetails") != null && !jsonObj.get("TagStepDetails").isJsonNull()) {
        WorkflowStepTagStepDetails.validateJsonElement(jsonObj.get("TagStepDetails"));
      }
      // validate the optional field `DecryptStepDetails`
      if (jsonObj.get("DecryptStepDetails") != null && !jsonObj.get("DecryptStepDetails").isJsonNull()) {
        WorkflowStepDecryptStepDetails.validateJsonElement(jsonObj.get("DecryptStepDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkflowStep.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkflowStep' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkflowStep> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkflowStep.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkflowStep>() {
           @Override
           public void write(JsonWriter out, WorkflowStep value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkflowStep read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkflowStep given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkflowStep
   * @throws IOException if the JSON string is invalid with respect to WorkflowStep
   */
  public static WorkflowStep fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkflowStep.class);
  }

  /**
   * Convert an instance of WorkflowStep to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

