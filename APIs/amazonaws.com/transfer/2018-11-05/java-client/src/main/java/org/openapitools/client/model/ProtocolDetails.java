/*
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SetStatOption;
import org.openapitools.client.model.TlsSessionResumptionMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  The protocol settings that are configured for your server. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:39.227658-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProtocolDetails {
  public static final String SERIALIZED_NAME_PASSIVE_IP = "PassiveIp";
  @SerializedName(SERIALIZED_NAME_PASSIVE_IP)
  private String passiveIp;

  public static final String SERIALIZED_NAME_TLS_SESSION_RESUMPTION_MODE = "TlsSessionResumptionMode";
  @SerializedName(SERIALIZED_NAME_TLS_SESSION_RESUMPTION_MODE)
  private TlsSessionResumptionMode tlsSessionResumptionMode;

  public static final String SERIALIZED_NAME_SET_STAT_OPTION = "SetStatOption";
  @SerializedName(SERIALIZED_NAME_SET_STAT_OPTION)
  private SetStatOption setStatOption;

  public static final String SERIALIZED_NAME_AS2_TRANSPORTS = "As2Transports";
  @SerializedName(SERIALIZED_NAME_AS2_TRANSPORTS)
  private List as2Transports;

  public ProtocolDetails() {
  }

  public ProtocolDetails passiveIp(String passiveIp) {
    this.passiveIp = passiveIp;
    return this;
  }

  /**
   * Get passiveIp
   * @return passiveIp
   */
  @javax.annotation.Nullable
  public String getPassiveIp() {
    return passiveIp;
  }

  public void setPassiveIp(String passiveIp) {
    this.passiveIp = passiveIp;
  }


  public ProtocolDetails tlsSessionResumptionMode(TlsSessionResumptionMode tlsSessionResumptionMode) {
    this.tlsSessionResumptionMode = tlsSessionResumptionMode;
    return this;
  }

  /**
   * Get tlsSessionResumptionMode
   * @return tlsSessionResumptionMode
   */
  @javax.annotation.Nullable
  public TlsSessionResumptionMode getTlsSessionResumptionMode() {
    return tlsSessionResumptionMode;
  }

  public void setTlsSessionResumptionMode(TlsSessionResumptionMode tlsSessionResumptionMode) {
    this.tlsSessionResumptionMode = tlsSessionResumptionMode;
  }


  public ProtocolDetails setStatOption(SetStatOption setStatOption) {
    this.setStatOption = setStatOption;
    return this;
  }

  /**
   * Get setStatOption
   * @return setStatOption
   */
  @javax.annotation.Nullable
  public SetStatOption getSetStatOption() {
    return setStatOption;
  }

  public void setSetStatOption(SetStatOption setStatOption) {
    this.setStatOption = setStatOption;
  }


  public ProtocolDetails as2Transports(List as2Transports) {
    this.as2Transports = as2Transports;
    return this;
  }

  /**
   * Get as2Transports
   * @return as2Transports
   */
  @javax.annotation.Nullable
  public List getAs2Transports() {
    return as2Transports;
  }

  public void setAs2Transports(List as2Transports) {
    this.as2Transports = as2Transports;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProtocolDetails protocolDetails = (ProtocolDetails) o;
    return Objects.equals(this.passiveIp, protocolDetails.passiveIp) &&
        Objects.equals(this.tlsSessionResumptionMode, protocolDetails.tlsSessionResumptionMode) &&
        Objects.equals(this.setStatOption, protocolDetails.setStatOption) &&
        Objects.equals(this.as2Transports, protocolDetails.as2Transports);
  }

  @Override
  public int hashCode() {
    return Objects.hash(passiveIp, tlsSessionResumptionMode, setStatOption, as2Transports);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProtocolDetails {\n");
    sb.append("    passiveIp: ").append(toIndentedString(passiveIp)).append("\n");
    sb.append("    tlsSessionResumptionMode: ").append(toIndentedString(tlsSessionResumptionMode)).append("\n");
    sb.append("    setStatOption: ").append(toIndentedString(setStatOption)).append("\n");
    sb.append("    as2Transports: ").append(toIndentedString(as2Transports)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PassiveIp");
    openapiFields.add("TlsSessionResumptionMode");
    openapiFields.add("SetStatOption");
    openapiFields.add("As2Transports");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProtocolDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProtocolDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProtocolDetails is not found in the empty JSON string", ProtocolDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProtocolDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProtocolDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `PassiveIp`
      if (jsonObj.get("PassiveIp") != null && !jsonObj.get("PassiveIp").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PassiveIp"));
      }
      // validate the optional field `TlsSessionResumptionMode`
      if (jsonObj.get("TlsSessionResumptionMode") != null && !jsonObj.get("TlsSessionResumptionMode").isJsonNull()) {
        TlsSessionResumptionMode.validateJsonElement(jsonObj.get("TlsSessionResumptionMode"));
      }
      // validate the optional field `SetStatOption`
      if (jsonObj.get("SetStatOption") != null && !jsonObj.get("SetStatOption").isJsonNull()) {
        SetStatOption.validateJsonElement(jsonObj.get("SetStatOption"));
      }
      // validate the optional field `As2Transports`
      if (jsonObj.get("As2Transports") != null && !jsonObj.get("As2Transports").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("As2Transports"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProtocolDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProtocolDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProtocolDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProtocolDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ProtocolDetails>() {
           @Override
           public void write(JsonWriter out, ProtocolDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProtocolDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProtocolDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProtocolDetails
   * @throws IOException if the JSON string is invalid with respect to ProtocolDetails
   */
  public static ProtocolDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProtocolDetails.class);
  }

  /**
   * Convert an instance of ProtocolDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

