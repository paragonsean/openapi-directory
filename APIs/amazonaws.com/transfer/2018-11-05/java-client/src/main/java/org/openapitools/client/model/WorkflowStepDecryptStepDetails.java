/*
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DecryptStepDetailsDestinationFileLocation;
import org.openapitools.client.model.EncryptionType;
import org.openapitools.client.model.OverwriteExisting;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WorkflowStepDecryptStepDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:39.227658-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkflowStepDecryptStepDetails {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private EncryptionType type;

  public static final String SERIALIZED_NAME_SOURCE_FILE_LOCATION = "SourceFileLocation";
  @SerializedName(SERIALIZED_NAME_SOURCE_FILE_LOCATION)
  private String sourceFileLocation;

  public static final String SERIALIZED_NAME_OVERWRITE_EXISTING = "OverwriteExisting";
  @SerializedName(SERIALIZED_NAME_OVERWRITE_EXISTING)
  private OverwriteExisting overwriteExisting;

  public static final String SERIALIZED_NAME_DESTINATION_FILE_LOCATION = "DestinationFileLocation";
  @SerializedName(SERIALIZED_NAME_DESTINATION_FILE_LOCATION)
  private DecryptStepDetailsDestinationFileLocation destinationFileLocation;

  public WorkflowStepDecryptStepDetails() {
  }

  public WorkflowStepDecryptStepDetails name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public WorkflowStepDecryptStepDetails type(EncryptionType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public EncryptionType getType() {
    return type;
  }

  public void setType(EncryptionType type) {
    this.type = type;
  }


  public WorkflowStepDecryptStepDetails sourceFileLocation(String sourceFileLocation) {
    this.sourceFileLocation = sourceFileLocation;
    return this;
  }

  /**
   * Get sourceFileLocation
   * @return sourceFileLocation
   */
  @javax.annotation.Nullable
  public String getSourceFileLocation() {
    return sourceFileLocation;
  }

  public void setSourceFileLocation(String sourceFileLocation) {
    this.sourceFileLocation = sourceFileLocation;
  }


  public WorkflowStepDecryptStepDetails overwriteExisting(OverwriteExisting overwriteExisting) {
    this.overwriteExisting = overwriteExisting;
    return this;
  }

  /**
   * Get overwriteExisting
   * @return overwriteExisting
   */
  @javax.annotation.Nullable
  public OverwriteExisting getOverwriteExisting() {
    return overwriteExisting;
  }

  public void setOverwriteExisting(OverwriteExisting overwriteExisting) {
    this.overwriteExisting = overwriteExisting;
  }


  public WorkflowStepDecryptStepDetails destinationFileLocation(DecryptStepDetailsDestinationFileLocation destinationFileLocation) {
    this.destinationFileLocation = destinationFileLocation;
    return this;
  }

  /**
   * Get destinationFileLocation
   * @return destinationFileLocation
   */
  @javax.annotation.Nonnull
  public DecryptStepDetailsDestinationFileLocation getDestinationFileLocation() {
    return destinationFileLocation;
  }

  public void setDestinationFileLocation(DecryptStepDetailsDestinationFileLocation destinationFileLocation) {
    this.destinationFileLocation = destinationFileLocation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowStepDecryptStepDetails workflowStepDecryptStepDetails = (WorkflowStepDecryptStepDetails) o;
    return Objects.equals(this.name, workflowStepDecryptStepDetails.name) &&
        Objects.equals(this.type, workflowStepDecryptStepDetails.type) &&
        Objects.equals(this.sourceFileLocation, workflowStepDecryptStepDetails.sourceFileLocation) &&
        Objects.equals(this.overwriteExisting, workflowStepDecryptStepDetails.overwriteExisting) &&
        Objects.equals(this.destinationFileLocation, workflowStepDecryptStepDetails.destinationFileLocation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, type, sourceFileLocation, overwriteExisting, destinationFileLocation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowStepDecryptStepDetails {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    sourceFileLocation: ").append(toIndentedString(sourceFileLocation)).append("\n");
    sb.append("    overwriteExisting: ").append(toIndentedString(overwriteExisting)).append("\n");
    sb.append("    destinationFileLocation: ").append(toIndentedString(destinationFileLocation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Type");
    openapiFields.add("SourceFileLocation");
    openapiFields.add("OverwriteExisting");
    openapiFields.add("DestinationFileLocation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Type");
    openapiRequiredFields.add("DestinationFileLocation");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkflowStepDecryptStepDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkflowStepDecryptStepDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkflowStepDecryptStepDetails is not found in the empty JSON string", WorkflowStepDecryptStepDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkflowStepDecryptStepDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkflowStepDecryptStepDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WorkflowStepDecryptStepDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the required field `Type`
      EncryptionType.validateJsonElement(jsonObj.get("Type"));
      // validate the optional field `SourceFileLocation`
      if (jsonObj.get("SourceFileLocation") != null && !jsonObj.get("SourceFileLocation").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SourceFileLocation"));
      }
      // validate the optional field `OverwriteExisting`
      if (jsonObj.get("OverwriteExisting") != null && !jsonObj.get("OverwriteExisting").isJsonNull()) {
        OverwriteExisting.validateJsonElement(jsonObj.get("OverwriteExisting"));
      }
      // validate the required field `DestinationFileLocation`
      DecryptStepDetailsDestinationFileLocation.validateJsonElement(jsonObj.get("DestinationFileLocation"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkflowStepDecryptStepDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkflowStepDecryptStepDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkflowStepDecryptStepDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkflowStepDecryptStepDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkflowStepDecryptStepDetails>() {
           @Override
           public void write(JsonWriter out, WorkflowStepDecryptStepDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkflowStepDecryptStepDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkflowStepDecryptStepDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkflowStepDecryptStepDetails
   * @throws IOException if the JSON string is invalid with respect to WorkflowStepDecryptStepDetails
   */
  public static WorkflowStepDecryptStepDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkflowStepDecryptStepDetails.class);
  }

  /**
   * Convert an instance of WorkflowStepDecryptStepDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

