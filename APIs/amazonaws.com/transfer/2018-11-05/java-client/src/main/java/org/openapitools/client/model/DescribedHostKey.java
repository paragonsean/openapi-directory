/*
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The details for a server host key.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:39.227658-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribedHostKey {
  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_HOST_KEY_ID = "HostKeyId";
  @SerializedName(SERIALIZED_NAME_HOST_KEY_ID)
  private String hostKeyId;

  public static final String SERIALIZED_NAME_HOST_KEY_FINGERPRINT = "HostKeyFingerprint";
  @SerializedName(SERIALIZED_NAME_HOST_KEY_FINGERPRINT)
  private String hostKeyFingerprint;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_DATE_IMPORTED = "DateImported";
  @SerializedName(SERIALIZED_NAME_DATE_IMPORTED)
  private OffsetDateTime dateImported;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public DescribedHostKey() {
  }

  public DescribedHostKey arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nonnull
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public DescribedHostKey hostKeyId(String hostKeyId) {
    this.hostKeyId = hostKeyId;
    return this;
  }

  /**
   * Get hostKeyId
   * @return hostKeyId
   */
  @javax.annotation.Nullable
  public String getHostKeyId() {
    return hostKeyId;
  }

  public void setHostKeyId(String hostKeyId) {
    this.hostKeyId = hostKeyId;
  }


  public DescribedHostKey hostKeyFingerprint(String hostKeyFingerprint) {
    this.hostKeyFingerprint = hostKeyFingerprint;
    return this;
  }

  /**
   * Get hostKeyFingerprint
   * @return hostKeyFingerprint
   */
  @javax.annotation.Nullable
  public String getHostKeyFingerprint() {
    return hostKeyFingerprint;
  }

  public void setHostKeyFingerprint(String hostKeyFingerprint) {
    this.hostKeyFingerprint = hostKeyFingerprint;
  }


  public DescribedHostKey description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DescribedHostKey type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public DescribedHostKey dateImported(OffsetDateTime dateImported) {
    this.dateImported = dateImported;
    return this;
  }

  /**
   * Get dateImported
   * @return dateImported
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateImported() {
    return dateImported;
  }

  public void setDateImported(OffsetDateTime dateImported) {
    this.dateImported = dateImported;
  }


  public DescribedHostKey tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribedHostKey describedHostKey = (DescribedHostKey) o;
    return Objects.equals(this.arn, describedHostKey.arn) &&
        Objects.equals(this.hostKeyId, describedHostKey.hostKeyId) &&
        Objects.equals(this.hostKeyFingerprint, describedHostKey.hostKeyFingerprint) &&
        Objects.equals(this.description, describedHostKey.description) &&
        Objects.equals(this.type, describedHostKey.type) &&
        Objects.equals(this.dateImported, describedHostKey.dateImported) &&
        Objects.equals(this.tags, describedHostKey.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, hostKeyId, hostKeyFingerprint, description, type, dateImported, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribedHostKey {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    hostKeyId: ").append(toIndentedString(hostKeyId)).append("\n");
    sb.append("    hostKeyFingerprint: ").append(toIndentedString(hostKeyFingerprint)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    dateImported: ").append(toIndentedString(dateImported)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Arn");
    openapiFields.add("HostKeyId");
    openapiFields.add("HostKeyFingerprint");
    openapiFields.add("Description");
    openapiFields.add("Type");
    openapiFields.add("DateImported");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Arn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribedHostKey
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribedHostKey.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribedHostKey is not found in the empty JSON string", DescribedHostKey.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribedHostKey.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribedHostKey` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DescribedHostKey.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Arn`
      String.validateJsonElement(jsonObj.get("Arn"));
      // validate the optional field `HostKeyId`
      if (jsonObj.get("HostKeyId") != null && !jsonObj.get("HostKeyId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("HostKeyId"));
      }
      // validate the optional field `HostKeyFingerprint`
      if (jsonObj.get("HostKeyFingerprint") != null && !jsonObj.get("HostKeyFingerprint").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("HostKeyFingerprint"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `DateImported`
      if (jsonObj.get("DateImported") != null && !jsonObj.get("DateImported").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("DateImported"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribedHostKey.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribedHostKey' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribedHostKey> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribedHostKey.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribedHostKey>() {
           @Override
           public void write(JsonWriter out, DescribedHostKey value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribedHostKey read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribedHostKey given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribedHostKey
   * @throws IOException if the JSON string is invalid with respect to DescribedHostKey
   */
  public static DescribedHostKey fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribedHostKey.class);
  }

  /**
   * Convert an instance of DescribedHostKey to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

