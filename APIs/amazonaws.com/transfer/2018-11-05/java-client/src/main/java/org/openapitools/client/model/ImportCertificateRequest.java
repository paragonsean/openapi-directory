/*
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CertificateUsageType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ImportCertificateRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:39.227658-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImportCertificateRequest {
  public static final String SERIALIZED_NAME_USAGE = "Usage";
  @SerializedName(SERIALIZED_NAME_USAGE)
  private CertificateUsageType usage;

  public static final String SERIALIZED_NAME_CERTIFICATE = "Certificate";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE)
  private String certificate;

  public static final String SERIALIZED_NAME_CERTIFICATE_CHAIN = "CertificateChain";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_CHAIN)
  private String certificateChain;

  public static final String SERIALIZED_NAME_PRIVATE_KEY = "PrivateKey";
  @SerializedName(SERIALIZED_NAME_PRIVATE_KEY)
  private String privateKey;

  public static final String SERIALIZED_NAME_ACTIVE_DATE = "ActiveDate";
  @SerializedName(SERIALIZED_NAME_ACTIVE_DATE)
  private OffsetDateTime activeDate;

  public static final String SERIALIZED_NAME_INACTIVE_DATE = "InactiveDate";
  @SerializedName(SERIALIZED_NAME_INACTIVE_DATE)
  private OffsetDateTime inactiveDate;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public ImportCertificateRequest() {
  }

  public ImportCertificateRequest usage(CertificateUsageType usage) {
    this.usage = usage;
    return this;
  }

  /**
   * Get usage
   * @return usage
   */
  @javax.annotation.Nonnull
  public CertificateUsageType getUsage() {
    return usage;
  }

  public void setUsage(CertificateUsageType usage) {
    this.usage = usage;
  }


  public ImportCertificateRequest certificate(String certificate) {
    this.certificate = certificate;
    return this;
  }

  /**
   * Get certificate
   * @return certificate
   */
  @javax.annotation.Nonnull
  public String getCertificate() {
    return certificate;
  }

  public void setCertificate(String certificate) {
    this.certificate = certificate;
  }


  public ImportCertificateRequest certificateChain(String certificateChain) {
    this.certificateChain = certificateChain;
    return this;
  }

  /**
   * Get certificateChain
   * @return certificateChain
   */
  @javax.annotation.Nullable
  public String getCertificateChain() {
    return certificateChain;
  }

  public void setCertificateChain(String certificateChain) {
    this.certificateChain = certificateChain;
  }


  public ImportCertificateRequest privateKey(String privateKey) {
    this.privateKey = privateKey;
    return this;
  }

  /**
   * Get privateKey
   * @return privateKey
   */
  @javax.annotation.Nullable
  public String getPrivateKey() {
    return privateKey;
  }

  public void setPrivateKey(String privateKey) {
    this.privateKey = privateKey;
  }


  public ImportCertificateRequest activeDate(OffsetDateTime activeDate) {
    this.activeDate = activeDate;
    return this;
  }

  /**
   * Get activeDate
   * @return activeDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getActiveDate() {
    return activeDate;
  }

  public void setActiveDate(OffsetDateTime activeDate) {
    this.activeDate = activeDate;
  }


  public ImportCertificateRequest inactiveDate(OffsetDateTime inactiveDate) {
    this.inactiveDate = inactiveDate;
    return this;
  }

  /**
   * Get inactiveDate
   * @return inactiveDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getInactiveDate() {
    return inactiveDate;
  }

  public void setInactiveDate(OffsetDateTime inactiveDate) {
    this.inactiveDate = inactiveDate;
  }


  public ImportCertificateRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ImportCertificateRequest tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportCertificateRequest importCertificateRequest = (ImportCertificateRequest) o;
    return Objects.equals(this.usage, importCertificateRequest.usage) &&
        Objects.equals(this.certificate, importCertificateRequest.certificate) &&
        Objects.equals(this.certificateChain, importCertificateRequest.certificateChain) &&
        Objects.equals(this.privateKey, importCertificateRequest.privateKey) &&
        Objects.equals(this.activeDate, importCertificateRequest.activeDate) &&
        Objects.equals(this.inactiveDate, importCertificateRequest.inactiveDate) &&
        Objects.equals(this.description, importCertificateRequest.description) &&
        Objects.equals(this.tags, importCertificateRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(usage, certificate, certificateChain, privateKey, activeDate, inactiveDate, description, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportCertificateRequest {\n");
    sb.append("    usage: ").append(toIndentedString(usage)).append("\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    certificateChain: ").append(toIndentedString(certificateChain)).append("\n");
    sb.append("    privateKey: ").append(toIndentedString(privateKey)).append("\n");
    sb.append("    activeDate: ").append(toIndentedString(activeDate)).append("\n");
    sb.append("    inactiveDate: ").append(toIndentedString(inactiveDate)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Usage");
    openapiFields.add("Certificate");
    openapiFields.add("CertificateChain");
    openapiFields.add("PrivateKey");
    openapiFields.add("ActiveDate");
    openapiFields.add("InactiveDate");
    openapiFields.add("Description");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Usage");
    openapiRequiredFields.add("Certificate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImportCertificateRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImportCertificateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImportCertificateRequest is not found in the empty JSON string", ImportCertificateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImportCertificateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImportCertificateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ImportCertificateRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Usage`
      CertificateUsageType.validateJsonElement(jsonObj.get("Usage"));
      // validate the required field `Certificate`
      String.validateJsonElement(jsonObj.get("Certificate"));
      // validate the optional field `CertificateChain`
      if (jsonObj.get("CertificateChain") != null && !jsonObj.get("CertificateChain").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CertificateChain"));
      }
      // validate the optional field `PrivateKey`
      if (jsonObj.get("PrivateKey") != null && !jsonObj.get("PrivateKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PrivateKey"));
      }
      // validate the optional field `ActiveDate`
      if (jsonObj.get("ActiveDate") != null && !jsonObj.get("ActiveDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ActiveDate"));
      }
      // validate the optional field `InactiveDate`
      if (jsonObj.get("InactiveDate") != null && !jsonObj.get("InactiveDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("InactiveDate"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImportCertificateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImportCertificateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImportCertificateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImportCertificateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ImportCertificateRequest>() {
           @Override
           public void write(JsonWriter out, ImportCertificateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImportCertificateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImportCertificateRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImportCertificateRequest
   * @throws IOException if the JSON string is invalid with respect to ImportCertificateRequest
   */
  public static ImportCertificateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImportCertificateRequest.class);
  }

  /**
   * Convert an instance of ImportCertificateRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

