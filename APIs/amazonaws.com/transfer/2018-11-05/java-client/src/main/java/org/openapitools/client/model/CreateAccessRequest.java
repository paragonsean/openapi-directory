/*
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HomeDirectoryType;
import org.openapitools.client.model.PosixProfile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAccessRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:39.227658-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAccessRequest {
  public static final String SERIALIZED_NAME_HOME_DIRECTORY = "HomeDirectory";
  @SerializedName(SERIALIZED_NAME_HOME_DIRECTORY)
  private String homeDirectory;

  public static final String SERIALIZED_NAME_HOME_DIRECTORY_TYPE = "HomeDirectoryType";
  @SerializedName(SERIALIZED_NAME_HOME_DIRECTORY_TYPE)
  private HomeDirectoryType homeDirectoryType;

  public static final String SERIALIZED_NAME_HOME_DIRECTORY_MAPPINGS = "HomeDirectoryMappings";
  @SerializedName(SERIALIZED_NAME_HOME_DIRECTORY_MAPPINGS)
  private List homeDirectoryMappings;

  public static final String SERIALIZED_NAME_POLICY = "Policy";
  @SerializedName(SERIALIZED_NAME_POLICY)
  private String policy;

  public static final String SERIALIZED_NAME_POSIX_PROFILE = "PosixProfile";
  @SerializedName(SERIALIZED_NAME_POSIX_PROFILE)
  private PosixProfile posixProfile;

  public static final String SERIALIZED_NAME_ROLE = "Role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private String role;

  public static final String SERIALIZED_NAME_SERVER_ID = "ServerId";
  @SerializedName(SERIALIZED_NAME_SERVER_ID)
  private String serverId;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "ExternalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public CreateAccessRequest() {
  }

  public CreateAccessRequest homeDirectory(String homeDirectory) {
    this.homeDirectory = homeDirectory;
    return this;
  }

  /**
   * Get homeDirectory
   * @return homeDirectory
   */
  @javax.annotation.Nullable
  public String getHomeDirectory() {
    return homeDirectory;
  }

  public void setHomeDirectory(String homeDirectory) {
    this.homeDirectory = homeDirectory;
  }


  public CreateAccessRequest homeDirectoryType(HomeDirectoryType homeDirectoryType) {
    this.homeDirectoryType = homeDirectoryType;
    return this;
  }

  /**
   * Get homeDirectoryType
   * @return homeDirectoryType
   */
  @javax.annotation.Nullable
  public HomeDirectoryType getHomeDirectoryType() {
    return homeDirectoryType;
  }

  public void setHomeDirectoryType(HomeDirectoryType homeDirectoryType) {
    this.homeDirectoryType = homeDirectoryType;
  }


  public CreateAccessRequest homeDirectoryMappings(List homeDirectoryMappings) {
    this.homeDirectoryMappings = homeDirectoryMappings;
    return this;
  }

  /**
   * Get homeDirectoryMappings
   * @return homeDirectoryMappings
   */
  @javax.annotation.Nullable
  public List getHomeDirectoryMappings() {
    return homeDirectoryMappings;
  }

  public void setHomeDirectoryMappings(List homeDirectoryMappings) {
    this.homeDirectoryMappings = homeDirectoryMappings;
  }


  public CreateAccessRequest policy(String policy) {
    this.policy = policy;
    return this;
  }

  /**
   * Get policy
   * @return policy
   */
  @javax.annotation.Nullable
  public String getPolicy() {
    return policy;
  }

  public void setPolicy(String policy) {
    this.policy = policy;
  }


  public CreateAccessRequest posixProfile(PosixProfile posixProfile) {
    this.posixProfile = posixProfile;
    return this;
  }

  /**
   * Get posixProfile
   * @return posixProfile
   */
  @javax.annotation.Nullable
  public PosixProfile getPosixProfile() {
    return posixProfile;
  }

  public void setPosixProfile(PosixProfile posixProfile) {
    this.posixProfile = posixProfile;
  }


  public CreateAccessRequest role(String role) {
    this.role = role;
    return this;
  }

  /**
   * Get role
   * @return role
   */
  @javax.annotation.Nonnull
  public String getRole() {
    return role;
  }

  public void setRole(String role) {
    this.role = role;
  }


  public CreateAccessRequest serverId(String serverId) {
    this.serverId = serverId;
    return this;
  }

  /**
   * Get serverId
   * @return serverId
   */
  @javax.annotation.Nonnull
  public String getServerId() {
    return serverId;
  }

  public void setServerId(String serverId) {
    this.serverId = serverId;
  }


  public CreateAccessRequest externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * Get externalId
   * @return externalId
   */
  @javax.annotation.Nonnull
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAccessRequest createAccessRequest = (CreateAccessRequest) o;
    return Objects.equals(this.homeDirectory, createAccessRequest.homeDirectory) &&
        Objects.equals(this.homeDirectoryType, createAccessRequest.homeDirectoryType) &&
        Objects.equals(this.homeDirectoryMappings, createAccessRequest.homeDirectoryMappings) &&
        Objects.equals(this.policy, createAccessRequest.policy) &&
        Objects.equals(this.posixProfile, createAccessRequest.posixProfile) &&
        Objects.equals(this.role, createAccessRequest.role) &&
        Objects.equals(this.serverId, createAccessRequest.serverId) &&
        Objects.equals(this.externalId, createAccessRequest.externalId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(homeDirectory, homeDirectoryType, homeDirectoryMappings, policy, posixProfile, role, serverId, externalId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAccessRequest {\n");
    sb.append("    homeDirectory: ").append(toIndentedString(homeDirectory)).append("\n");
    sb.append("    homeDirectoryType: ").append(toIndentedString(homeDirectoryType)).append("\n");
    sb.append("    homeDirectoryMappings: ").append(toIndentedString(homeDirectoryMappings)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    posixProfile: ").append(toIndentedString(posixProfile)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    serverId: ").append(toIndentedString(serverId)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("HomeDirectory");
    openapiFields.add("HomeDirectoryType");
    openapiFields.add("HomeDirectoryMappings");
    openapiFields.add("Policy");
    openapiFields.add("PosixProfile");
    openapiFields.add("Role");
    openapiFields.add("ServerId");
    openapiFields.add("ExternalId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Role");
    openapiRequiredFields.add("ServerId");
    openapiRequiredFields.add("ExternalId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAccessRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAccessRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAccessRequest is not found in the empty JSON string", CreateAccessRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAccessRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAccessRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAccessRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `HomeDirectory`
      if (jsonObj.get("HomeDirectory") != null && !jsonObj.get("HomeDirectory").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("HomeDirectory"));
      }
      // validate the optional field `HomeDirectoryType`
      if (jsonObj.get("HomeDirectoryType") != null && !jsonObj.get("HomeDirectoryType").isJsonNull()) {
        HomeDirectoryType.validateJsonElement(jsonObj.get("HomeDirectoryType"));
      }
      // validate the optional field `HomeDirectoryMappings`
      if (jsonObj.get("HomeDirectoryMappings") != null && !jsonObj.get("HomeDirectoryMappings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("HomeDirectoryMappings"));
      }
      // validate the optional field `Policy`
      if (jsonObj.get("Policy") != null && !jsonObj.get("Policy").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Policy"));
      }
      // validate the optional field `PosixProfile`
      if (jsonObj.get("PosixProfile") != null && !jsonObj.get("PosixProfile").isJsonNull()) {
        PosixProfile.validateJsonElement(jsonObj.get("PosixProfile"));
      }
      // validate the required field `Role`
      String.validateJsonElement(jsonObj.get("Role"));
      // validate the required field `ServerId`
      String.validateJsonElement(jsonObj.get("ServerId"));
      // validate the required field `ExternalId`
      String.validateJsonElement(jsonObj.get("ExternalId"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAccessRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAccessRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAccessRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAccessRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAccessRequest>() {
           @Override
           public void write(JsonWriter out, CreateAccessRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAccessRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAccessRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAccessRequest
   * @throws IOException if the JSON string is invalid with respect to CreateAccessRequest
   */
  public static CreateAccessRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAccessRequest.class);
  }

  /**
   * Convert an instance of CreateAccessRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

