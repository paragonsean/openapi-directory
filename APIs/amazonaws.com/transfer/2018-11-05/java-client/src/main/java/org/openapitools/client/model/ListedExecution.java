/*
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DescribedExecutionInitialFileLocation;
import org.openapitools.client.model.DescribedExecutionServiceMetadata;
import org.openapitools.client.model.ExecutionStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Returns properties of the execution that is specified.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:39.227658-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListedExecution {
  public static final String SERIALIZED_NAME_EXECUTION_ID = "ExecutionId";
  @SerializedName(SERIALIZED_NAME_EXECUTION_ID)
  private String executionId;

  public static final String SERIALIZED_NAME_INITIAL_FILE_LOCATION = "InitialFileLocation";
  @SerializedName(SERIALIZED_NAME_INITIAL_FILE_LOCATION)
  private DescribedExecutionInitialFileLocation initialFileLocation;

  public static final String SERIALIZED_NAME_SERVICE_METADATA = "ServiceMetadata";
  @SerializedName(SERIALIZED_NAME_SERVICE_METADATA)
  private DescribedExecutionServiceMetadata serviceMetadata;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ExecutionStatus status;

  public ListedExecution() {
  }

  public ListedExecution executionId(String executionId) {
    this.executionId = executionId;
    return this;
  }

  /**
   * Get executionId
   * @return executionId
   */
  @javax.annotation.Nullable
  public String getExecutionId() {
    return executionId;
  }

  public void setExecutionId(String executionId) {
    this.executionId = executionId;
  }


  public ListedExecution initialFileLocation(DescribedExecutionInitialFileLocation initialFileLocation) {
    this.initialFileLocation = initialFileLocation;
    return this;
  }

  /**
   * Get initialFileLocation
   * @return initialFileLocation
   */
  @javax.annotation.Nullable
  public DescribedExecutionInitialFileLocation getInitialFileLocation() {
    return initialFileLocation;
  }

  public void setInitialFileLocation(DescribedExecutionInitialFileLocation initialFileLocation) {
    this.initialFileLocation = initialFileLocation;
  }


  public ListedExecution serviceMetadata(DescribedExecutionServiceMetadata serviceMetadata) {
    this.serviceMetadata = serviceMetadata;
    return this;
  }

  /**
   * Get serviceMetadata
   * @return serviceMetadata
   */
  @javax.annotation.Nullable
  public DescribedExecutionServiceMetadata getServiceMetadata() {
    return serviceMetadata;
  }

  public void setServiceMetadata(DescribedExecutionServiceMetadata serviceMetadata) {
    this.serviceMetadata = serviceMetadata;
  }


  public ListedExecution status(ExecutionStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ExecutionStatus getStatus() {
    return status;
  }

  public void setStatus(ExecutionStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListedExecution listedExecution = (ListedExecution) o;
    return Objects.equals(this.executionId, listedExecution.executionId) &&
        Objects.equals(this.initialFileLocation, listedExecution.initialFileLocation) &&
        Objects.equals(this.serviceMetadata, listedExecution.serviceMetadata) &&
        Objects.equals(this.status, listedExecution.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(executionId, initialFileLocation, serviceMetadata, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListedExecution {\n");
    sb.append("    executionId: ").append(toIndentedString(executionId)).append("\n");
    sb.append("    initialFileLocation: ").append(toIndentedString(initialFileLocation)).append("\n");
    sb.append("    serviceMetadata: ").append(toIndentedString(serviceMetadata)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ExecutionId");
    openapiFields.add("InitialFileLocation");
    openapiFields.add("ServiceMetadata");
    openapiFields.add("Status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListedExecution
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListedExecution.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListedExecution is not found in the empty JSON string", ListedExecution.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListedExecution.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListedExecution` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ExecutionId`
      if (jsonObj.get("ExecutionId") != null && !jsonObj.get("ExecutionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ExecutionId"));
      }
      // validate the optional field `InitialFileLocation`
      if (jsonObj.get("InitialFileLocation") != null && !jsonObj.get("InitialFileLocation").isJsonNull()) {
        DescribedExecutionInitialFileLocation.validateJsonElement(jsonObj.get("InitialFileLocation"));
      }
      // validate the optional field `ServiceMetadata`
      if (jsonObj.get("ServiceMetadata") != null && !jsonObj.get("ServiceMetadata").isJsonNull()) {
        DescribedExecutionServiceMetadata.validateJsonElement(jsonObj.get("ServiceMetadata"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        ExecutionStatus.validateJsonElement(jsonObj.get("Status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListedExecution.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListedExecution' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListedExecution> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListedExecution.class));

       return (TypeAdapter<T>) new TypeAdapter<ListedExecution>() {
           @Override
           public void write(JsonWriter out, ListedExecution value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListedExecution read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListedExecution given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListedExecution
   * @throws IOException if the JSON string is invalid with respect to ListedExecution
   */
  public static ListedExecution fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListedExecution.class);
  }

  /**
   * Convert an instance of ListedExecution to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

