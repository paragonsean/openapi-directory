/*
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the properties of a security policy that was specified. For more information about security policies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/transfer/latest/userguide/security-policies.html\&quot;&gt;Working with security policies&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:39.227658-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribedSecurityPolicy {
  public static final String SERIALIZED_NAME_FIPS = "Fips";
  @SerializedName(SERIALIZED_NAME_FIPS)
  private Boolean fips;

  public static final String SERIALIZED_NAME_SECURITY_POLICY_NAME = "SecurityPolicyName";
  @SerializedName(SERIALIZED_NAME_SECURITY_POLICY_NAME)
  private String securityPolicyName;

  public static final String SERIALIZED_NAME_SSH_CIPHERS = "SshCiphers";
  @SerializedName(SERIALIZED_NAME_SSH_CIPHERS)
  private List sshCiphers;

  public static final String SERIALIZED_NAME_SSH_KEXS = "SshKexs";
  @SerializedName(SERIALIZED_NAME_SSH_KEXS)
  private List sshKexs;

  public static final String SERIALIZED_NAME_SSH_MACS = "SshMacs";
  @SerializedName(SERIALIZED_NAME_SSH_MACS)
  private List sshMacs;

  public static final String SERIALIZED_NAME_TLS_CIPHERS = "TlsCiphers";
  @SerializedName(SERIALIZED_NAME_TLS_CIPHERS)
  private List tlsCiphers;

  public DescribedSecurityPolicy() {
  }

  public DescribedSecurityPolicy fips(Boolean fips) {
    this.fips = fips;
    return this;
  }

  /**
   * Get fips
   * @return fips
   */
  @javax.annotation.Nullable
  public Boolean getFips() {
    return fips;
  }

  public void setFips(Boolean fips) {
    this.fips = fips;
  }


  public DescribedSecurityPolicy securityPolicyName(String securityPolicyName) {
    this.securityPolicyName = securityPolicyName;
    return this;
  }

  /**
   * Get securityPolicyName
   * @return securityPolicyName
   */
  @javax.annotation.Nonnull
  public String getSecurityPolicyName() {
    return securityPolicyName;
  }

  public void setSecurityPolicyName(String securityPolicyName) {
    this.securityPolicyName = securityPolicyName;
  }


  public DescribedSecurityPolicy sshCiphers(List sshCiphers) {
    this.sshCiphers = sshCiphers;
    return this;
  }

  /**
   * Get sshCiphers
   * @return sshCiphers
   */
  @javax.annotation.Nullable
  public List getSshCiphers() {
    return sshCiphers;
  }

  public void setSshCiphers(List sshCiphers) {
    this.sshCiphers = sshCiphers;
  }


  public DescribedSecurityPolicy sshKexs(List sshKexs) {
    this.sshKexs = sshKexs;
    return this;
  }

  /**
   * Get sshKexs
   * @return sshKexs
   */
  @javax.annotation.Nullable
  public List getSshKexs() {
    return sshKexs;
  }

  public void setSshKexs(List sshKexs) {
    this.sshKexs = sshKexs;
  }


  public DescribedSecurityPolicy sshMacs(List sshMacs) {
    this.sshMacs = sshMacs;
    return this;
  }

  /**
   * Get sshMacs
   * @return sshMacs
   */
  @javax.annotation.Nullable
  public List getSshMacs() {
    return sshMacs;
  }

  public void setSshMacs(List sshMacs) {
    this.sshMacs = sshMacs;
  }


  public DescribedSecurityPolicy tlsCiphers(List tlsCiphers) {
    this.tlsCiphers = tlsCiphers;
    return this;
  }

  /**
   * Get tlsCiphers
   * @return tlsCiphers
   */
  @javax.annotation.Nullable
  public List getTlsCiphers() {
    return tlsCiphers;
  }

  public void setTlsCiphers(List tlsCiphers) {
    this.tlsCiphers = tlsCiphers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribedSecurityPolicy describedSecurityPolicy = (DescribedSecurityPolicy) o;
    return Objects.equals(this.fips, describedSecurityPolicy.fips) &&
        Objects.equals(this.securityPolicyName, describedSecurityPolicy.securityPolicyName) &&
        Objects.equals(this.sshCiphers, describedSecurityPolicy.sshCiphers) &&
        Objects.equals(this.sshKexs, describedSecurityPolicy.sshKexs) &&
        Objects.equals(this.sshMacs, describedSecurityPolicy.sshMacs) &&
        Objects.equals(this.tlsCiphers, describedSecurityPolicy.tlsCiphers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fips, securityPolicyName, sshCiphers, sshKexs, sshMacs, tlsCiphers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribedSecurityPolicy {\n");
    sb.append("    fips: ").append(toIndentedString(fips)).append("\n");
    sb.append("    securityPolicyName: ").append(toIndentedString(securityPolicyName)).append("\n");
    sb.append("    sshCiphers: ").append(toIndentedString(sshCiphers)).append("\n");
    sb.append("    sshKexs: ").append(toIndentedString(sshKexs)).append("\n");
    sb.append("    sshMacs: ").append(toIndentedString(sshMacs)).append("\n");
    sb.append("    tlsCiphers: ").append(toIndentedString(tlsCiphers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Fips");
    openapiFields.add("SecurityPolicyName");
    openapiFields.add("SshCiphers");
    openapiFields.add("SshKexs");
    openapiFields.add("SshMacs");
    openapiFields.add("TlsCiphers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SecurityPolicyName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribedSecurityPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribedSecurityPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribedSecurityPolicy is not found in the empty JSON string", DescribedSecurityPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribedSecurityPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribedSecurityPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DescribedSecurityPolicy.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Fips`
      if (jsonObj.get("Fips") != null && !jsonObj.get("Fips").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Fips"));
      }
      // validate the required field `SecurityPolicyName`
      String.validateJsonElement(jsonObj.get("SecurityPolicyName"));
      // validate the optional field `SshCiphers`
      if (jsonObj.get("SshCiphers") != null && !jsonObj.get("SshCiphers").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SshCiphers"));
      }
      // validate the optional field `SshKexs`
      if (jsonObj.get("SshKexs") != null && !jsonObj.get("SshKexs").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SshKexs"));
      }
      // validate the optional field `SshMacs`
      if (jsonObj.get("SshMacs") != null && !jsonObj.get("SshMacs").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SshMacs"));
      }
      // validate the optional field `TlsCiphers`
      if (jsonObj.get("TlsCiphers") != null && !jsonObj.get("TlsCiphers").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("TlsCiphers"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribedSecurityPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribedSecurityPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribedSecurityPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribedSecurityPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribedSecurityPolicy>() {
           @Override
           public void write(JsonWriter out, DescribedSecurityPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribedSecurityPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribedSecurityPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribedSecurityPolicy
   * @throws IOException if the JSON string is invalid with respect to DescribedSecurityPolicy
   */
  public static DescribedSecurityPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribedSecurityPolicy.class);
  }

  /**
   * Convert an instance of DescribedSecurityPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

