/*
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AgreementStatusType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the properties of an agreement.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:39.227658-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListedAgreement {
  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_AGREEMENT_ID = "AgreementId";
  @SerializedName(SERIALIZED_NAME_AGREEMENT_ID)
  private String agreementId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private AgreementStatusType status;

  public static final String SERIALIZED_NAME_SERVER_ID = "ServerId";
  @SerializedName(SERIALIZED_NAME_SERVER_ID)
  private String serverId;

  public static final String SERIALIZED_NAME_LOCAL_PROFILE_ID = "LocalProfileId";
  @SerializedName(SERIALIZED_NAME_LOCAL_PROFILE_ID)
  private String localProfileId;

  public static final String SERIALIZED_NAME_PARTNER_PROFILE_ID = "PartnerProfileId";
  @SerializedName(SERIALIZED_NAME_PARTNER_PROFILE_ID)
  private String partnerProfileId;

  public ListedAgreement() {
  }

  public ListedAgreement arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public ListedAgreement agreementId(String agreementId) {
    this.agreementId = agreementId;
    return this;
  }

  /**
   * Get agreementId
   * @return agreementId
   */
  @javax.annotation.Nullable
  public String getAgreementId() {
    return agreementId;
  }

  public void setAgreementId(String agreementId) {
    this.agreementId = agreementId;
  }


  public ListedAgreement description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ListedAgreement status(AgreementStatusType status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public AgreementStatusType getStatus() {
    return status;
  }

  public void setStatus(AgreementStatusType status) {
    this.status = status;
  }


  public ListedAgreement serverId(String serverId) {
    this.serverId = serverId;
    return this;
  }

  /**
   * Get serverId
   * @return serverId
   */
  @javax.annotation.Nullable
  public String getServerId() {
    return serverId;
  }

  public void setServerId(String serverId) {
    this.serverId = serverId;
  }


  public ListedAgreement localProfileId(String localProfileId) {
    this.localProfileId = localProfileId;
    return this;
  }

  /**
   * Get localProfileId
   * @return localProfileId
   */
  @javax.annotation.Nullable
  public String getLocalProfileId() {
    return localProfileId;
  }

  public void setLocalProfileId(String localProfileId) {
    this.localProfileId = localProfileId;
  }


  public ListedAgreement partnerProfileId(String partnerProfileId) {
    this.partnerProfileId = partnerProfileId;
    return this;
  }

  /**
   * Get partnerProfileId
   * @return partnerProfileId
   */
  @javax.annotation.Nullable
  public String getPartnerProfileId() {
    return partnerProfileId;
  }

  public void setPartnerProfileId(String partnerProfileId) {
    this.partnerProfileId = partnerProfileId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListedAgreement listedAgreement = (ListedAgreement) o;
    return Objects.equals(this.arn, listedAgreement.arn) &&
        Objects.equals(this.agreementId, listedAgreement.agreementId) &&
        Objects.equals(this.description, listedAgreement.description) &&
        Objects.equals(this.status, listedAgreement.status) &&
        Objects.equals(this.serverId, listedAgreement.serverId) &&
        Objects.equals(this.localProfileId, listedAgreement.localProfileId) &&
        Objects.equals(this.partnerProfileId, listedAgreement.partnerProfileId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, agreementId, description, status, serverId, localProfileId, partnerProfileId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListedAgreement {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    agreementId: ").append(toIndentedString(agreementId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    serverId: ").append(toIndentedString(serverId)).append("\n");
    sb.append("    localProfileId: ").append(toIndentedString(localProfileId)).append("\n");
    sb.append("    partnerProfileId: ").append(toIndentedString(partnerProfileId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Arn");
    openapiFields.add("AgreementId");
    openapiFields.add("Description");
    openapiFields.add("Status");
    openapiFields.add("ServerId");
    openapiFields.add("LocalProfileId");
    openapiFields.add("PartnerProfileId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListedAgreement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListedAgreement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListedAgreement is not found in the empty JSON string", ListedAgreement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListedAgreement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListedAgreement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Arn`
      if (jsonObj.get("Arn") != null && !jsonObj.get("Arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Arn"));
      }
      // validate the optional field `AgreementId`
      if (jsonObj.get("AgreementId") != null && !jsonObj.get("AgreementId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AgreementId"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        AgreementStatusType.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `ServerId`
      if (jsonObj.get("ServerId") != null && !jsonObj.get("ServerId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ServerId"));
      }
      // validate the optional field `LocalProfileId`
      if (jsonObj.get("LocalProfileId") != null && !jsonObj.get("LocalProfileId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LocalProfileId"));
      }
      // validate the optional field `PartnerProfileId`
      if (jsonObj.get("PartnerProfileId") != null && !jsonObj.get("PartnerProfileId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PartnerProfileId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListedAgreement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListedAgreement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListedAgreement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListedAgreement.class));

       return (TypeAdapter<T>) new TypeAdapter<ListedAgreement>() {
           @Override
           public void write(JsonWriter out, ListedAgreement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListedAgreement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListedAgreement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListedAgreement
   * @throws IOException if the JSON string is invalid with respect to ListedAgreement
   */
  public static ListedAgreement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListedAgreement.class);
  }

  /**
   * Convert an instance of ListedAgreement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

