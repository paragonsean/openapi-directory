/*
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CompressionEnum;
import org.openapitools.client.model.EncryptionAlg;
import org.openapitools.client.model.MdnResponse;
import org.openapitools.client.model.MdnSigningAlg;
import org.openapitools.client.model.SigningAlg;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the details for an AS2 connector object. The connector object is used for AS2 outbound processes, to connect the Transfer Family customer with the trading partner.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:39.227658-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class As2ConnectorConfig {
  public static final String SERIALIZED_NAME_LOCAL_PROFILE_ID = "LocalProfileId";
  @SerializedName(SERIALIZED_NAME_LOCAL_PROFILE_ID)
  private String localProfileId;

  public static final String SERIALIZED_NAME_PARTNER_PROFILE_ID = "PartnerProfileId";
  @SerializedName(SERIALIZED_NAME_PARTNER_PROFILE_ID)
  private String partnerProfileId;

  public static final String SERIALIZED_NAME_MESSAGE_SUBJECT = "MessageSubject";
  @SerializedName(SERIALIZED_NAME_MESSAGE_SUBJECT)
  private String messageSubject;

  public static final String SERIALIZED_NAME_COMPRESSION = "Compression";
  @SerializedName(SERIALIZED_NAME_COMPRESSION)
  private CompressionEnum compression;

  public static final String SERIALIZED_NAME_ENCRYPTION_ALGORITHM = "EncryptionAlgorithm";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_ALGORITHM)
  private EncryptionAlg encryptionAlgorithm;

  public static final String SERIALIZED_NAME_SIGNING_ALGORITHM = "SigningAlgorithm";
  @SerializedName(SERIALIZED_NAME_SIGNING_ALGORITHM)
  private SigningAlg signingAlgorithm;

  public static final String SERIALIZED_NAME_MDN_SIGNING_ALGORITHM = "MdnSigningAlgorithm";
  @SerializedName(SERIALIZED_NAME_MDN_SIGNING_ALGORITHM)
  private MdnSigningAlg mdnSigningAlgorithm;

  public static final String SERIALIZED_NAME_MDN_RESPONSE = "MdnResponse";
  @SerializedName(SERIALIZED_NAME_MDN_RESPONSE)
  private MdnResponse mdnResponse;

  public static final String SERIALIZED_NAME_BASIC_AUTH_SECRET_ID = "BasicAuthSecretId";
  @SerializedName(SERIALIZED_NAME_BASIC_AUTH_SECRET_ID)
  private String basicAuthSecretId;

  public As2ConnectorConfig() {
  }

  public As2ConnectorConfig localProfileId(String localProfileId) {
    this.localProfileId = localProfileId;
    return this;
  }

  /**
   * Get localProfileId
   * @return localProfileId
   */
  @javax.annotation.Nullable
  public String getLocalProfileId() {
    return localProfileId;
  }

  public void setLocalProfileId(String localProfileId) {
    this.localProfileId = localProfileId;
  }


  public As2ConnectorConfig partnerProfileId(String partnerProfileId) {
    this.partnerProfileId = partnerProfileId;
    return this;
  }

  /**
   * Get partnerProfileId
   * @return partnerProfileId
   */
  @javax.annotation.Nullable
  public String getPartnerProfileId() {
    return partnerProfileId;
  }

  public void setPartnerProfileId(String partnerProfileId) {
    this.partnerProfileId = partnerProfileId;
  }


  public As2ConnectorConfig messageSubject(String messageSubject) {
    this.messageSubject = messageSubject;
    return this;
  }

  /**
   * Get messageSubject
   * @return messageSubject
   */
  @javax.annotation.Nullable
  public String getMessageSubject() {
    return messageSubject;
  }

  public void setMessageSubject(String messageSubject) {
    this.messageSubject = messageSubject;
  }


  public As2ConnectorConfig compression(CompressionEnum compression) {
    this.compression = compression;
    return this;
  }

  /**
   * Get compression
   * @return compression
   */
  @javax.annotation.Nullable
  public CompressionEnum getCompression() {
    return compression;
  }

  public void setCompression(CompressionEnum compression) {
    this.compression = compression;
  }


  public As2ConnectorConfig encryptionAlgorithm(EncryptionAlg encryptionAlgorithm) {
    this.encryptionAlgorithm = encryptionAlgorithm;
    return this;
  }

  /**
   * Get encryptionAlgorithm
   * @return encryptionAlgorithm
   */
  @javax.annotation.Nullable
  public EncryptionAlg getEncryptionAlgorithm() {
    return encryptionAlgorithm;
  }

  public void setEncryptionAlgorithm(EncryptionAlg encryptionAlgorithm) {
    this.encryptionAlgorithm = encryptionAlgorithm;
  }


  public As2ConnectorConfig signingAlgorithm(SigningAlg signingAlgorithm) {
    this.signingAlgorithm = signingAlgorithm;
    return this;
  }

  /**
   * Get signingAlgorithm
   * @return signingAlgorithm
   */
  @javax.annotation.Nullable
  public SigningAlg getSigningAlgorithm() {
    return signingAlgorithm;
  }

  public void setSigningAlgorithm(SigningAlg signingAlgorithm) {
    this.signingAlgorithm = signingAlgorithm;
  }


  public As2ConnectorConfig mdnSigningAlgorithm(MdnSigningAlg mdnSigningAlgorithm) {
    this.mdnSigningAlgorithm = mdnSigningAlgorithm;
    return this;
  }

  /**
   * Get mdnSigningAlgorithm
   * @return mdnSigningAlgorithm
   */
  @javax.annotation.Nullable
  public MdnSigningAlg getMdnSigningAlgorithm() {
    return mdnSigningAlgorithm;
  }

  public void setMdnSigningAlgorithm(MdnSigningAlg mdnSigningAlgorithm) {
    this.mdnSigningAlgorithm = mdnSigningAlgorithm;
  }


  public As2ConnectorConfig mdnResponse(MdnResponse mdnResponse) {
    this.mdnResponse = mdnResponse;
    return this;
  }

  /**
   * Get mdnResponse
   * @return mdnResponse
   */
  @javax.annotation.Nullable
  public MdnResponse getMdnResponse() {
    return mdnResponse;
  }

  public void setMdnResponse(MdnResponse mdnResponse) {
    this.mdnResponse = mdnResponse;
  }


  public As2ConnectorConfig basicAuthSecretId(String basicAuthSecretId) {
    this.basicAuthSecretId = basicAuthSecretId;
    return this;
  }

  /**
   * Get basicAuthSecretId
   * @return basicAuthSecretId
   */
  @javax.annotation.Nullable
  public String getBasicAuthSecretId() {
    return basicAuthSecretId;
  }

  public void setBasicAuthSecretId(String basicAuthSecretId) {
    this.basicAuthSecretId = basicAuthSecretId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    As2ConnectorConfig as2ConnectorConfig = (As2ConnectorConfig) o;
    return Objects.equals(this.localProfileId, as2ConnectorConfig.localProfileId) &&
        Objects.equals(this.partnerProfileId, as2ConnectorConfig.partnerProfileId) &&
        Objects.equals(this.messageSubject, as2ConnectorConfig.messageSubject) &&
        Objects.equals(this.compression, as2ConnectorConfig.compression) &&
        Objects.equals(this.encryptionAlgorithm, as2ConnectorConfig.encryptionAlgorithm) &&
        Objects.equals(this.signingAlgorithm, as2ConnectorConfig.signingAlgorithm) &&
        Objects.equals(this.mdnSigningAlgorithm, as2ConnectorConfig.mdnSigningAlgorithm) &&
        Objects.equals(this.mdnResponse, as2ConnectorConfig.mdnResponse) &&
        Objects.equals(this.basicAuthSecretId, as2ConnectorConfig.basicAuthSecretId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(localProfileId, partnerProfileId, messageSubject, compression, encryptionAlgorithm, signingAlgorithm, mdnSigningAlgorithm, mdnResponse, basicAuthSecretId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class As2ConnectorConfig {\n");
    sb.append("    localProfileId: ").append(toIndentedString(localProfileId)).append("\n");
    sb.append("    partnerProfileId: ").append(toIndentedString(partnerProfileId)).append("\n");
    sb.append("    messageSubject: ").append(toIndentedString(messageSubject)).append("\n");
    sb.append("    compression: ").append(toIndentedString(compression)).append("\n");
    sb.append("    encryptionAlgorithm: ").append(toIndentedString(encryptionAlgorithm)).append("\n");
    sb.append("    signingAlgorithm: ").append(toIndentedString(signingAlgorithm)).append("\n");
    sb.append("    mdnSigningAlgorithm: ").append(toIndentedString(mdnSigningAlgorithm)).append("\n");
    sb.append("    mdnResponse: ").append(toIndentedString(mdnResponse)).append("\n");
    sb.append("    basicAuthSecretId: ").append(toIndentedString(basicAuthSecretId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LocalProfileId");
    openapiFields.add("PartnerProfileId");
    openapiFields.add("MessageSubject");
    openapiFields.add("Compression");
    openapiFields.add("EncryptionAlgorithm");
    openapiFields.add("SigningAlgorithm");
    openapiFields.add("MdnSigningAlgorithm");
    openapiFields.add("MdnResponse");
    openapiFields.add("BasicAuthSecretId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to As2ConnectorConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!As2ConnectorConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in As2ConnectorConfig is not found in the empty JSON string", As2ConnectorConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!As2ConnectorConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `As2ConnectorConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `LocalProfileId`
      if (jsonObj.get("LocalProfileId") != null && !jsonObj.get("LocalProfileId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LocalProfileId"));
      }
      // validate the optional field `PartnerProfileId`
      if (jsonObj.get("PartnerProfileId") != null && !jsonObj.get("PartnerProfileId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PartnerProfileId"));
      }
      // validate the optional field `MessageSubject`
      if (jsonObj.get("MessageSubject") != null && !jsonObj.get("MessageSubject").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MessageSubject"));
      }
      // validate the optional field `Compression`
      if (jsonObj.get("Compression") != null && !jsonObj.get("Compression").isJsonNull()) {
        CompressionEnum.validateJsonElement(jsonObj.get("Compression"));
      }
      // validate the optional field `EncryptionAlgorithm`
      if (jsonObj.get("EncryptionAlgorithm") != null && !jsonObj.get("EncryptionAlgorithm").isJsonNull()) {
        EncryptionAlg.validateJsonElement(jsonObj.get("EncryptionAlgorithm"));
      }
      // validate the optional field `SigningAlgorithm`
      if (jsonObj.get("SigningAlgorithm") != null && !jsonObj.get("SigningAlgorithm").isJsonNull()) {
        SigningAlg.validateJsonElement(jsonObj.get("SigningAlgorithm"));
      }
      // validate the optional field `MdnSigningAlgorithm`
      if (jsonObj.get("MdnSigningAlgorithm") != null && !jsonObj.get("MdnSigningAlgorithm").isJsonNull()) {
        MdnSigningAlg.validateJsonElement(jsonObj.get("MdnSigningAlgorithm"));
      }
      // validate the optional field `MdnResponse`
      if (jsonObj.get("MdnResponse") != null && !jsonObj.get("MdnResponse").isJsonNull()) {
        MdnResponse.validateJsonElement(jsonObj.get("MdnResponse"));
      }
      // validate the optional field `BasicAuthSecretId`
      if (jsonObj.get("BasicAuthSecretId") != null && !jsonObj.get("BasicAuthSecretId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BasicAuthSecretId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!As2ConnectorConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'As2ConnectorConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<As2ConnectorConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(As2ConnectorConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<As2ConnectorConfig>() {
           @Override
           public void write(JsonWriter out, As2ConnectorConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public As2ConnectorConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of As2ConnectorConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of As2ConnectorConfig
   * @throws IOException if the JSON string is invalid with respect to As2ConnectorConfig
   */
  public static As2ConnectorConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, As2ConnectorConfig.class);
  }

  /**
   * Convert an instance of As2ConnectorConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

