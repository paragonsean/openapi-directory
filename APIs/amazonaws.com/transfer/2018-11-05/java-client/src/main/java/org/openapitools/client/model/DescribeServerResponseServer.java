/*
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateServerRequestEndpointDetails;
import org.openapitools.client.model.CreateServerRequestProtocolDetails;
import org.openapitools.client.model.CreateServerRequestWorkflowDetails;
import org.openapitools.client.model.DescribedServerIdentityProviderDetails;
import org.openapitools.client.model.Domain;
import org.openapitools.client.model.EndpointType;
import org.openapitools.client.model.IdentityProviderType;
import org.openapitools.client.model.State;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeServerResponseServer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:39.227658-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeServerResponseServer {
  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_CERTIFICATE = "Certificate";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE)
  private String certificate;

  public static final String SERIALIZED_NAME_PROTOCOL_DETAILS = "ProtocolDetails";
  @SerializedName(SERIALIZED_NAME_PROTOCOL_DETAILS)
  private CreateServerRequestProtocolDetails protocolDetails;

  public static final String SERIALIZED_NAME_DOMAIN = "Domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private Domain domain;

  public static final String SERIALIZED_NAME_ENDPOINT_DETAILS = "EndpointDetails";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_DETAILS)
  private CreateServerRequestEndpointDetails endpointDetails;

  public static final String SERIALIZED_NAME_ENDPOINT_TYPE = "EndpointType";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_TYPE)
  private EndpointType endpointType;

  public static final String SERIALIZED_NAME_HOST_KEY_FINGERPRINT = "HostKeyFingerprint";
  @SerializedName(SERIALIZED_NAME_HOST_KEY_FINGERPRINT)
  private String hostKeyFingerprint;

  public static final String SERIALIZED_NAME_IDENTITY_PROVIDER_DETAILS = "IdentityProviderDetails";
  @SerializedName(SERIALIZED_NAME_IDENTITY_PROVIDER_DETAILS)
  private DescribedServerIdentityProviderDetails identityProviderDetails;

  public static final String SERIALIZED_NAME_IDENTITY_PROVIDER_TYPE = "IdentityProviderType";
  @SerializedName(SERIALIZED_NAME_IDENTITY_PROVIDER_TYPE)
  private IdentityProviderType identityProviderType;

  public static final String SERIALIZED_NAME_LOGGING_ROLE = "LoggingRole";
  @SerializedName(SERIALIZED_NAME_LOGGING_ROLE)
  private String loggingRole;

  public static final String SERIALIZED_NAME_POST_AUTHENTICATION_LOGIN_BANNER = "PostAuthenticationLoginBanner";
  @SerializedName(SERIALIZED_NAME_POST_AUTHENTICATION_LOGIN_BANNER)
  private String postAuthenticationLoginBanner;

  public static final String SERIALIZED_NAME_PRE_AUTHENTICATION_LOGIN_BANNER = "PreAuthenticationLoginBanner";
  @SerializedName(SERIALIZED_NAME_PRE_AUTHENTICATION_LOGIN_BANNER)
  private String preAuthenticationLoginBanner;

  public static final String SERIALIZED_NAME_PROTOCOLS = "Protocols";
  @SerializedName(SERIALIZED_NAME_PROTOCOLS)
  private List protocols;

  public static final String SERIALIZED_NAME_SECURITY_POLICY_NAME = "SecurityPolicyName";
  @SerializedName(SERIALIZED_NAME_SECURITY_POLICY_NAME)
  private String securityPolicyName;

  public static final String SERIALIZED_NAME_SERVER_ID = "ServerId";
  @SerializedName(SERIALIZED_NAME_SERVER_ID)
  private String serverId;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private State state;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_USER_COUNT = "UserCount";
  @SerializedName(SERIALIZED_NAME_USER_COUNT)
  private Integer userCount;

  public static final String SERIALIZED_NAME_WORKFLOW_DETAILS = "WorkflowDetails";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_DETAILS)
  private CreateServerRequestWorkflowDetails workflowDetails;

  public static final String SERIALIZED_NAME_STRUCTURED_LOG_DESTINATIONS = "StructuredLogDestinations";
  @SerializedName(SERIALIZED_NAME_STRUCTURED_LOG_DESTINATIONS)
  private List structuredLogDestinations;

  public DescribeServerResponseServer() {
  }

  public DescribeServerResponseServer arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nonnull
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public DescribeServerResponseServer certificate(String certificate) {
    this.certificate = certificate;
    return this;
  }

  /**
   * Get certificate
   * @return certificate
   */
  @javax.annotation.Nullable
  public String getCertificate() {
    return certificate;
  }

  public void setCertificate(String certificate) {
    this.certificate = certificate;
  }


  public DescribeServerResponseServer protocolDetails(CreateServerRequestProtocolDetails protocolDetails) {
    this.protocolDetails = protocolDetails;
    return this;
  }

  /**
   * Get protocolDetails
   * @return protocolDetails
   */
  @javax.annotation.Nullable
  public CreateServerRequestProtocolDetails getProtocolDetails() {
    return protocolDetails;
  }

  public void setProtocolDetails(CreateServerRequestProtocolDetails protocolDetails) {
    this.protocolDetails = protocolDetails;
  }


  public DescribeServerResponseServer domain(Domain domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Get domain
   * @return domain
   */
  @javax.annotation.Nullable
  public Domain getDomain() {
    return domain;
  }

  public void setDomain(Domain domain) {
    this.domain = domain;
  }


  public DescribeServerResponseServer endpointDetails(CreateServerRequestEndpointDetails endpointDetails) {
    this.endpointDetails = endpointDetails;
    return this;
  }

  /**
   * Get endpointDetails
   * @return endpointDetails
   */
  @javax.annotation.Nullable
  public CreateServerRequestEndpointDetails getEndpointDetails() {
    return endpointDetails;
  }

  public void setEndpointDetails(CreateServerRequestEndpointDetails endpointDetails) {
    this.endpointDetails = endpointDetails;
  }


  public DescribeServerResponseServer endpointType(EndpointType endpointType) {
    this.endpointType = endpointType;
    return this;
  }

  /**
   * Get endpointType
   * @return endpointType
   */
  @javax.annotation.Nullable
  public EndpointType getEndpointType() {
    return endpointType;
  }

  public void setEndpointType(EndpointType endpointType) {
    this.endpointType = endpointType;
  }


  public DescribeServerResponseServer hostKeyFingerprint(String hostKeyFingerprint) {
    this.hostKeyFingerprint = hostKeyFingerprint;
    return this;
  }

  /**
   * Get hostKeyFingerprint
   * @return hostKeyFingerprint
   */
  @javax.annotation.Nullable
  public String getHostKeyFingerprint() {
    return hostKeyFingerprint;
  }

  public void setHostKeyFingerprint(String hostKeyFingerprint) {
    this.hostKeyFingerprint = hostKeyFingerprint;
  }


  public DescribeServerResponseServer identityProviderDetails(DescribedServerIdentityProviderDetails identityProviderDetails) {
    this.identityProviderDetails = identityProviderDetails;
    return this;
  }

  /**
   * Get identityProviderDetails
   * @return identityProviderDetails
   */
  @javax.annotation.Nullable
  public DescribedServerIdentityProviderDetails getIdentityProviderDetails() {
    return identityProviderDetails;
  }

  public void setIdentityProviderDetails(DescribedServerIdentityProviderDetails identityProviderDetails) {
    this.identityProviderDetails = identityProviderDetails;
  }


  public DescribeServerResponseServer identityProviderType(IdentityProviderType identityProviderType) {
    this.identityProviderType = identityProviderType;
    return this;
  }

  /**
   * Get identityProviderType
   * @return identityProviderType
   */
  @javax.annotation.Nullable
  public IdentityProviderType getIdentityProviderType() {
    return identityProviderType;
  }

  public void setIdentityProviderType(IdentityProviderType identityProviderType) {
    this.identityProviderType = identityProviderType;
  }


  public DescribeServerResponseServer loggingRole(String loggingRole) {
    this.loggingRole = loggingRole;
    return this;
  }

  /**
   * Get loggingRole
   * @return loggingRole
   */
  @javax.annotation.Nullable
  public String getLoggingRole() {
    return loggingRole;
  }

  public void setLoggingRole(String loggingRole) {
    this.loggingRole = loggingRole;
  }


  public DescribeServerResponseServer postAuthenticationLoginBanner(String postAuthenticationLoginBanner) {
    this.postAuthenticationLoginBanner = postAuthenticationLoginBanner;
    return this;
  }

  /**
   * Get postAuthenticationLoginBanner
   * @return postAuthenticationLoginBanner
   */
  @javax.annotation.Nullable
  public String getPostAuthenticationLoginBanner() {
    return postAuthenticationLoginBanner;
  }

  public void setPostAuthenticationLoginBanner(String postAuthenticationLoginBanner) {
    this.postAuthenticationLoginBanner = postAuthenticationLoginBanner;
  }


  public DescribeServerResponseServer preAuthenticationLoginBanner(String preAuthenticationLoginBanner) {
    this.preAuthenticationLoginBanner = preAuthenticationLoginBanner;
    return this;
  }

  /**
   * Get preAuthenticationLoginBanner
   * @return preAuthenticationLoginBanner
   */
  @javax.annotation.Nullable
  public String getPreAuthenticationLoginBanner() {
    return preAuthenticationLoginBanner;
  }

  public void setPreAuthenticationLoginBanner(String preAuthenticationLoginBanner) {
    this.preAuthenticationLoginBanner = preAuthenticationLoginBanner;
  }


  public DescribeServerResponseServer protocols(List protocols) {
    this.protocols = protocols;
    return this;
  }

  /**
   * Get protocols
   * @return protocols
   */
  @javax.annotation.Nullable
  public List getProtocols() {
    return protocols;
  }

  public void setProtocols(List protocols) {
    this.protocols = protocols;
  }


  public DescribeServerResponseServer securityPolicyName(String securityPolicyName) {
    this.securityPolicyName = securityPolicyName;
    return this;
  }

  /**
   * Get securityPolicyName
   * @return securityPolicyName
   */
  @javax.annotation.Nullable
  public String getSecurityPolicyName() {
    return securityPolicyName;
  }

  public void setSecurityPolicyName(String securityPolicyName) {
    this.securityPolicyName = securityPolicyName;
  }


  public DescribeServerResponseServer serverId(String serverId) {
    this.serverId = serverId;
    return this;
  }

  /**
   * Get serverId
   * @return serverId
   */
  @javax.annotation.Nullable
  public String getServerId() {
    return serverId;
  }

  public void setServerId(String serverId) {
    this.serverId = serverId;
  }


  public DescribeServerResponseServer state(State state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public State getState() {
    return state;
  }

  public void setState(State state) {
    this.state = state;
  }


  public DescribeServerResponseServer tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public DescribeServerResponseServer userCount(Integer userCount) {
    this.userCount = userCount;
    return this;
  }

  /**
   * Get userCount
   * @return userCount
   */
  @javax.annotation.Nullable
  public Integer getUserCount() {
    return userCount;
  }

  public void setUserCount(Integer userCount) {
    this.userCount = userCount;
  }


  public DescribeServerResponseServer workflowDetails(CreateServerRequestWorkflowDetails workflowDetails) {
    this.workflowDetails = workflowDetails;
    return this;
  }

  /**
   * Get workflowDetails
   * @return workflowDetails
   */
  @javax.annotation.Nullable
  public CreateServerRequestWorkflowDetails getWorkflowDetails() {
    return workflowDetails;
  }

  public void setWorkflowDetails(CreateServerRequestWorkflowDetails workflowDetails) {
    this.workflowDetails = workflowDetails;
  }


  public DescribeServerResponseServer structuredLogDestinations(List structuredLogDestinations) {
    this.structuredLogDestinations = structuredLogDestinations;
    return this;
  }

  /**
   * Get structuredLogDestinations
   * @return structuredLogDestinations
   */
  @javax.annotation.Nullable
  public List getStructuredLogDestinations() {
    return structuredLogDestinations;
  }

  public void setStructuredLogDestinations(List structuredLogDestinations) {
    this.structuredLogDestinations = structuredLogDestinations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeServerResponseServer describeServerResponseServer = (DescribeServerResponseServer) o;
    return Objects.equals(this.arn, describeServerResponseServer.arn) &&
        Objects.equals(this.certificate, describeServerResponseServer.certificate) &&
        Objects.equals(this.protocolDetails, describeServerResponseServer.protocolDetails) &&
        Objects.equals(this.domain, describeServerResponseServer.domain) &&
        Objects.equals(this.endpointDetails, describeServerResponseServer.endpointDetails) &&
        Objects.equals(this.endpointType, describeServerResponseServer.endpointType) &&
        Objects.equals(this.hostKeyFingerprint, describeServerResponseServer.hostKeyFingerprint) &&
        Objects.equals(this.identityProviderDetails, describeServerResponseServer.identityProviderDetails) &&
        Objects.equals(this.identityProviderType, describeServerResponseServer.identityProviderType) &&
        Objects.equals(this.loggingRole, describeServerResponseServer.loggingRole) &&
        Objects.equals(this.postAuthenticationLoginBanner, describeServerResponseServer.postAuthenticationLoginBanner) &&
        Objects.equals(this.preAuthenticationLoginBanner, describeServerResponseServer.preAuthenticationLoginBanner) &&
        Objects.equals(this.protocols, describeServerResponseServer.protocols) &&
        Objects.equals(this.securityPolicyName, describeServerResponseServer.securityPolicyName) &&
        Objects.equals(this.serverId, describeServerResponseServer.serverId) &&
        Objects.equals(this.state, describeServerResponseServer.state) &&
        Objects.equals(this.tags, describeServerResponseServer.tags) &&
        Objects.equals(this.userCount, describeServerResponseServer.userCount) &&
        Objects.equals(this.workflowDetails, describeServerResponseServer.workflowDetails) &&
        Objects.equals(this.structuredLogDestinations, describeServerResponseServer.structuredLogDestinations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, certificate, protocolDetails, domain, endpointDetails, endpointType, hostKeyFingerprint, identityProviderDetails, identityProviderType, loggingRole, postAuthenticationLoginBanner, preAuthenticationLoginBanner, protocols, securityPolicyName, serverId, state, tags, userCount, workflowDetails, structuredLogDestinations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeServerResponseServer {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    protocolDetails: ").append(toIndentedString(protocolDetails)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    endpointDetails: ").append(toIndentedString(endpointDetails)).append("\n");
    sb.append("    endpointType: ").append(toIndentedString(endpointType)).append("\n");
    sb.append("    hostKeyFingerprint: ").append(toIndentedString(hostKeyFingerprint)).append("\n");
    sb.append("    identityProviderDetails: ").append(toIndentedString(identityProviderDetails)).append("\n");
    sb.append("    identityProviderType: ").append(toIndentedString(identityProviderType)).append("\n");
    sb.append("    loggingRole: ").append(toIndentedString(loggingRole)).append("\n");
    sb.append("    postAuthenticationLoginBanner: ").append(toIndentedString(postAuthenticationLoginBanner)).append("\n");
    sb.append("    preAuthenticationLoginBanner: ").append(toIndentedString(preAuthenticationLoginBanner)).append("\n");
    sb.append("    protocols: ").append(toIndentedString(protocols)).append("\n");
    sb.append("    securityPolicyName: ").append(toIndentedString(securityPolicyName)).append("\n");
    sb.append("    serverId: ").append(toIndentedString(serverId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    userCount: ").append(toIndentedString(userCount)).append("\n");
    sb.append("    workflowDetails: ").append(toIndentedString(workflowDetails)).append("\n");
    sb.append("    structuredLogDestinations: ").append(toIndentedString(structuredLogDestinations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Arn");
    openapiFields.add("Certificate");
    openapiFields.add("ProtocolDetails");
    openapiFields.add("Domain");
    openapiFields.add("EndpointDetails");
    openapiFields.add("EndpointType");
    openapiFields.add("HostKeyFingerprint");
    openapiFields.add("IdentityProviderDetails");
    openapiFields.add("IdentityProviderType");
    openapiFields.add("LoggingRole");
    openapiFields.add("PostAuthenticationLoginBanner");
    openapiFields.add("PreAuthenticationLoginBanner");
    openapiFields.add("Protocols");
    openapiFields.add("SecurityPolicyName");
    openapiFields.add("ServerId");
    openapiFields.add("State");
    openapiFields.add("Tags");
    openapiFields.add("UserCount");
    openapiFields.add("WorkflowDetails");
    openapiFields.add("StructuredLogDestinations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Arn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeServerResponseServer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeServerResponseServer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeServerResponseServer is not found in the empty JSON string", DescribeServerResponseServer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeServerResponseServer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeServerResponseServer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DescribeServerResponseServer.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Arn`
      String.validateJsonElement(jsonObj.get("Arn"));
      // validate the optional field `Certificate`
      if (jsonObj.get("Certificate") != null && !jsonObj.get("Certificate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Certificate"));
      }
      // validate the optional field `ProtocolDetails`
      if (jsonObj.get("ProtocolDetails") != null && !jsonObj.get("ProtocolDetails").isJsonNull()) {
        CreateServerRequestProtocolDetails.validateJsonElement(jsonObj.get("ProtocolDetails"));
      }
      // validate the optional field `Domain`
      if (jsonObj.get("Domain") != null && !jsonObj.get("Domain").isJsonNull()) {
        Domain.validateJsonElement(jsonObj.get("Domain"));
      }
      // validate the optional field `EndpointDetails`
      if (jsonObj.get("EndpointDetails") != null && !jsonObj.get("EndpointDetails").isJsonNull()) {
        CreateServerRequestEndpointDetails.validateJsonElement(jsonObj.get("EndpointDetails"));
      }
      // validate the optional field `EndpointType`
      if (jsonObj.get("EndpointType") != null && !jsonObj.get("EndpointType").isJsonNull()) {
        EndpointType.validateJsonElement(jsonObj.get("EndpointType"));
      }
      // validate the optional field `HostKeyFingerprint`
      if (jsonObj.get("HostKeyFingerprint") != null && !jsonObj.get("HostKeyFingerprint").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("HostKeyFingerprint"));
      }
      // validate the optional field `IdentityProviderDetails`
      if (jsonObj.get("IdentityProviderDetails") != null && !jsonObj.get("IdentityProviderDetails").isJsonNull()) {
        DescribedServerIdentityProviderDetails.validateJsonElement(jsonObj.get("IdentityProviderDetails"));
      }
      // validate the optional field `IdentityProviderType`
      if (jsonObj.get("IdentityProviderType") != null && !jsonObj.get("IdentityProviderType").isJsonNull()) {
        IdentityProviderType.validateJsonElement(jsonObj.get("IdentityProviderType"));
      }
      // validate the optional field `LoggingRole`
      if (jsonObj.get("LoggingRole") != null && !jsonObj.get("LoggingRole").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LoggingRole"));
      }
      // validate the optional field `PostAuthenticationLoginBanner`
      if (jsonObj.get("PostAuthenticationLoginBanner") != null && !jsonObj.get("PostAuthenticationLoginBanner").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PostAuthenticationLoginBanner"));
      }
      // validate the optional field `PreAuthenticationLoginBanner`
      if (jsonObj.get("PreAuthenticationLoginBanner") != null && !jsonObj.get("PreAuthenticationLoginBanner").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PreAuthenticationLoginBanner"));
      }
      // validate the optional field `Protocols`
      if (jsonObj.get("Protocols") != null && !jsonObj.get("Protocols").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Protocols"));
      }
      // validate the optional field `SecurityPolicyName`
      if (jsonObj.get("SecurityPolicyName") != null && !jsonObj.get("SecurityPolicyName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SecurityPolicyName"));
      }
      // validate the optional field `ServerId`
      if (jsonObj.get("ServerId") != null && !jsonObj.get("ServerId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ServerId"));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        State.validateJsonElement(jsonObj.get("State"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `UserCount`
      if (jsonObj.get("UserCount") != null && !jsonObj.get("UserCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("UserCount"));
      }
      // validate the optional field `WorkflowDetails`
      if (jsonObj.get("WorkflowDetails") != null && !jsonObj.get("WorkflowDetails").isJsonNull()) {
        CreateServerRequestWorkflowDetails.validateJsonElement(jsonObj.get("WorkflowDetails"));
      }
      // validate the optional field `StructuredLogDestinations`
      if (jsonObj.get("StructuredLogDestinations") != null && !jsonObj.get("StructuredLogDestinations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("StructuredLogDestinations"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeServerResponseServer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeServerResponseServer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeServerResponseServer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeServerResponseServer.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeServerResponseServer>() {
           @Override
           public void write(JsonWriter out, DescribeServerResponseServer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeServerResponseServer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeServerResponseServer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeServerResponseServer
   * @throws IOException if the JSON string is invalid with respect to DescribeServerResponseServer
   */
  public static DescribeServerResponseServer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeServerResponseServer.class);
  }

  /**
   * Convert an instance of DescribeServerResponseServer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

