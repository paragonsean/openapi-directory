/*
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.HomeDirectoryType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Returns properties of the user that you specify.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:39.227658-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListedUser {
  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_HOME_DIRECTORY = "HomeDirectory";
  @SerializedName(SERIALIZED_NAME_HOME_DIRECTORY)
  private String homeDirectory;

  public static final String SERIALIZED_NAME_HOME_DIRECTORY_TYPE = "HomeDirectoryType";
  @SerializedName(SERIALIZED_NAME_HOME_DIRECTORY_TYPE)
  private HomeDirectoryType homeDirectoryType;

  public static final String SERIALIZED_NAME_ROLE = "Role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private String role;

  public static final String SERIALIZED_NAME_SSH_PUBLIC_KEY_COUNT = "SshPublicKeyCount";
  @SerializedName(SERIALIZED_NAME_SSH_PUBLIC_KEY_COUNT)
  private Integer sshPublicKeyCount;

  public static final String SERIALIZED_NAME_USER_NAME = "UserName";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public ListedUser() {
  }

  public ListedUser arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nonnull
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public ListedUser homeDirectory(String homeDirectory) {
    this.homeDirectory = homeDirectory;
    return this;
  }

  /**
   * Get homeDirectory
   * @return homeDirectory
   */
  @javax.annotation.Nullable
  public String getHomeDirectory() {
    return homeDirectory;
  }

  public void setHomeDirectory(String homeDirectory) {
    this.homeDirectory = homeDirectory;
  }


  public ListedUser homeDirectoryType(HomeDirectoryType homeDirectoryType) {
    this.homeDirectoryType = homeDirectoryType;
    return this;
  }

  /**
   * Get homeDirectoryType
   * @return homeDirectoryType
   */
  @javax.annotation.Nullable
  public HomeDirectoryType getHomeDirectoryType() {
    return homeDirectoryType;
  }

  public void setHomeDirectoryType(HomeDirectoryType homeDirectoryType) {
    this.homeDirectoryType = homeDirectoryType;
  }


  public ListedUser role(String role) {
    this.role = role;
    return this;
  }

  /**
   * Get role
   * @return role
   */
  @javax.annotation.Nullable
  public String getRole() {
    return role;
  }

  public void setRole(String role) {
    this.role = role;
  }


  public ListedUser sshPublicKeyCount(Integer sshPublicKeyCount) {
    this.sshPublicKeyCount = sshPublicKeyCount;
    return this;
  }

  /**
   * Get sshPublicKeyCount
   * @return sshPublicKeyCount
   */
  @javax.annotation.Nullable
  public Integer getSshPublicKeyCount() {
    return sshPublicKeyCount;
  }

  public void setSshPublicKeyCount(Integer sshPublicKeyCount) {
    this.sshPublicKeyCount = sshPublicKeyCount;
  }


  public ListedUser userName(String userName) {
    this.userName = userName;
    return this;
  }

  /**
   * Get userName
   * @return userName
   */
  @javax.annotation.Nullable
  public String getUserName() {
    return userName;
  }

  public void setUserName(String userName) {
    this.userName = userName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListedUser listedUser = (ListedUser) o;
    return Objects.equals(this.arn, listedUser.arn) &&
        Objects.equals(this.homeDirectory, listedUser.homeDirectory) &&
        Objects.equals(this.homeDirectoryType, listedUser.homeDirectoryType) &&
        Objects.equals(this.role, listedUser.role) &&
        Objects.equals(this.sshPublicKeyCount, listedUser.sshPublicKeyCount) &&
        Objects.equals(this.userName, listedUser.userName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, homeDirectory, homeDirectoryType, role, sshPublicKeyCount, userName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListedUser {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    homeDirectory: ").append(toIndentedString(homeDirectory)).append("\n");
    sb.append("    homeDirectoryType: ").append(toIndentedString(homeDirectoryType)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    sshPublicKeyCount: ").append(toIndentedString(sshPublicKeyCount)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Arn");
    openapiFields.add("HomeDirectory");
    openapiFields.add("HomeDirectoryType");
    openapiFields.add("Role");
    openapiFields.add("SshPublicKeyCount");
    openapiFields.add("UserName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Arn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListedUser
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListedUser.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListedUser is not found in the empty JSON string", ListedUser.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListedUser.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListedUser` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListedUser.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Arn`
      String.validateJsonElement(jsonObj.get("Arn"));
      // validate the optional field `HomeDirectory`
      if (jsonObj.get("HomeDirectory") != null && !jsonObj.get("HomeDirectory").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("HomeDirectory"));
      }
      // validate the optional field `HomeDirectoryType`
      if (jsonObj.get("HomeDirectoryType") != null && !jsonObj.get("HomeDirectoryType").isJsonNull()) {
        HomeDirectoryType.validateJsonElement(jsonObj.get("HomeDirectoryType"));
      }
      // validate the optional field `Role`
      if (jsonObj.get("Role") != null && !jsonObj.get("Role").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Role"));
      }
      // validate the optional field `SshPublicKeyCount`
      if (jsonObj.get("SshPublicKeyCount") != null && !jsonObj.get("SshPublicKeyCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SshPublicKeyCount"));
      }
      // validate the optional field `UserName`
      if (jsonObj.get("UserName") != null && !jsonObj.get("UserName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UserName"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListedUser.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListedUser' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListedUser> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListedUser.class));

       return (TypeAdapter<T>) new TypeAdapter<ListedUser>() {
           @Override
           public void write(JsonWriter out, ListedUser value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListedUser read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListedUser given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListedUser
   * @throws IOException if the JSON string is invalid with respect to ListedUser
   */
  public static ListedUser fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListedUser.class);
  }

  /**
   * Convert an instance of ListedUser to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

