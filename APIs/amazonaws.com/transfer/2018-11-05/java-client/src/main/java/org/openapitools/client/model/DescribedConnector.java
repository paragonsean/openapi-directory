/*
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateConnectorRequestAs2Config;
import org.openapitools.client.model.CreateConnectorRequestSftpConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the parameters for the connector, as identified by the &lt;code&gt;ConnectorId&lt;/code&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:39.227658-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribedConnector {
  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_CONNECTOR_ID = "ConnectorId";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_ID)
  private String connectorId;

  public static final String SERIALIZED_NAME_URL = "Url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_AS2_CONFIG = "As2Config";
  @SerializedName(SERIALIZED_NAME_AS2_CONFIG)
  private CreateConnectorRequestAs2Config as2Config;

  public static final String SERIALIZED_NAME_ACCESS_ROLE = "AccessRole";
  @SerializedName(SERIALIZED_NAME_ACCESS_ROLE)
  private String accessRole;

  public static final String SERIALIZED_NAME_LOGGING_ROLE = "LoggingRole";
  @SerializedName(SERIALIZED_NAME_LOGGING_ROLE)
  private String loggingRole;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_SFTP_CONFIG = "SftpConfig";
  @SerializedName(SERIALIZED_NAME_SFTP_CONFIG)
  private CreateConnectorRequestSftpConfig sftpConfig;

  public DescribedConnector() {
  }

  public DescribedConnector arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nonnull
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public DescribedConnector connectorId(String connectorId) {
    this.connectorId = connectorId;
    return this;
  }

  /**
   * Get connectorId
   * @return connectorId
   */
  @javax.annotation.Nullable
  public String getConnectorId() {
    return connectorId;
  }

  public void setConnectorId(String connectorId) {
    this.connectorId = connectorId;
  }


  public DescribedConnector url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public DescribedConnector as2Config(CreateConnectorRequestAs2Config as2Config) {
    this.as2Config = as2Config;
    return this;
  }

  /**
   * Get as2Config
   * @return as2Config
   */
  @javax.annotation.Nullable
  public CreateConnectorRequestAs2Config getAs2Config() {
    return as2Config;
  }

  public void setAs2Config(CreateConnectorRequestAs2Config as2Config) {
    this.as2Config = as2Config;
  }


  public DescribedConnector accessRole(String accessRole) {
    this.accessRole = accessRole;
    return this;
  }

  /**
   * Get accessRole
   * @return accessRole
   */
  @javax.annotation.Nullable
  public String getAccessRole() {
    return accessRole;
  }

  public void setAccessRole(String accessRole) {
    this.accessRole = accessRole;
  }


  public DescribedConnector loggingRole(String loggingRole) {
    this.loggingRole = loggingRole;
    return this;
  }

  /**
   * Get loggingRole
   * @return loggingRole
   */
  @javax.annotation.Nullable
  public String getLoggingRole() {
    return loggingRole;
  }

  public void setLoggingRole(String loggingRole) {
    this.loggingRole = loggingRole;
  }


  public DescribedConnector tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public DescribedConnector sftpConfig(CreateConnectorRequestSftpConfig sftpConfig) {
    this.sftpConfig = sftpConfig;
    return this;
  }

  /**
   * Get sftpConfig
   * @return sftpConfig
   */
  @javax.annotation.Nullable
  public CreateConnectorRequestSftpConfig getSftpConfig() {
    return sftpConfig;
  }

  public void setSftpConfig(CreateConnectorRequestSftpConfig sftpConfig) {
    this.sftpConfig = sftpConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribedConnector describedConnector = (DescribedConnector) o;
    return Objects.equals(this.arn, describedConnector.arn) &&
        Objects.equals(this.connectorId, describedConnector.connectorId) &&
        Objects.equals(this.url, describedConnector.url) &&
        Objects.equals(this.as2Config, describedConnector.as2Config) &&
        Objects.equals(this.accessRole, describedConnector.accessRole) &&
        Objects.equals(this.loggingRole, describedConnector.loggingRole) &&
        Objects.equals(this.tags, describedConnector.tags) &&
        Objects.equals(this.sftpConfig, describedConnector.sftpConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, connectorId, url, as2Config, accessRole, loggingRole, tags, sftpConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribedConnector {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    connectorId: ").append(toIndentedString(connectorId)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    as2Config: ").append(toIndentedString(as2Config)).append("\n");
    sb.append("    accessRole: ").append(toIndentedString(accessRole)).append("\n");
    sb.append("    loggingRole: ").append(toIndentedString(loggingRole)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    sftpConfig: ").append(toIndentedString(sftpConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Arn");
    openapiFields.add("ConnectorId");
    openapiFields.add("Url");
    openapiFields.add("As2Config");
    openapiFields.add("AccessRole");
    openapiFields.add("LoggingRole");
    openapiFields.add("Tags");
    openapiFields.add("SftpConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Arn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribedConnector
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribedConnector.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribedConnector is not found in the empty JSON string", DescribedConnector.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribedConnector.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribedConnector` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DescribedConnector.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Arn`
      String.validateJsonElement(jsonObj.get("Arn"));
      // validate the optional field `ConnectorId`
      if (jsonObj.get("ConnectorId") != null && !jsonObj.get("ConnectorId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ConnectorId"));
      }
      // validate the optional field `Url`
      if (jsonObj.get("Url") != null && !jsonObj.get("Url").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Url"));
      }
      // validate the optional field `As2Config`
      if (jsonObj.get("As2Config") != null && !jsonObj.get("As2Config").isJsonNull()) {
        CreateConnectorRequestAs2Config.validateJsonElement(jsonObj.get("As2Config"));
      }
      // validate the optional field `AccessRole`
      if (jsonObj.get("AccessRole") != null && !jsonObj.get("AccessRole").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AccessRole"));
      }
      // validate the optional field `LoggingRole`
      if (jsonObj.get("LoggingRole") != null && !jsonObj.get("LoggingRole").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LoggingRole"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `SftpConfig`
      if (jsonObj.get("SftpConfig") != null && !jsonObj.get("SftpConfig").isJsonNull()) {
        CreateConnectorRequestSftpConfig.validateJsonElement(jsonObj.get("SftpConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribedConnector.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribedConnector' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribedConnector> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribedConnector.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribedConnector>() {
           @Override
           public void write(JsonWriter out, DescribedConnector value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribedConnector read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribedConnector given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribedConnector
   * @throws IOException if the JSON string is invalid with respect to DescribedConnector
   */
  public static DescribedConnector fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribedConnector.class);
  }

  /**
   * Convert an instance of DescribedConnector to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

