/*
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.InputFileLocationEfsFileLocation;
import org.openapitools.client.model.InputFileLocationS3FileLocation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the location for the file that&#39;s being processed.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:39.227658-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InputFileLocation {
  public static final String SERIALIZED_NAME_S3_FILE_LOCATION = "S3FileLocation";
  @SerializedName(SERIALIZED_NAME_S3_FILE_LOCATION)
  private InputFileLocationS3FileLocation s3FileLocation;

  public static final String SERIALIZED_NAME_EFS_FILE_LOCATION = "EfsFileLocation";
  @SerializedName(SERIALIZED_NAME_EFS_FILE_LOCATION)
  private InputFileLocationEfsFileLocation efsFileLocation;

  public InputFileLocation() {
  }

  public InputFileLocation s3FileLocation(InputFileLocationS3FileLocation s3FileLocation) {
    this.s3FileLocation = s3FileLocation;
    return this;
  }

  /**
   * Get s3FileLocation
   * @return s3FileLocation
   */
  @javax.annotation.Nullable
  public InputFileLocationS3FileLocation getS3FileLocation() {
    return s3FileLocation;
  }

  public void setS3FileLocation(InputFileLocationS3FileLocation s3FileLocation) {
    this.s3FileLocation = s3FileLocation;
  }


  public InputFileLocation efsFileLocation(InputFileLocationEfsFileLocation efsFileLocation) {
    this.efsFileLocation = efsFileLocation;
    return this;
  }

  /**
   * Get efsFileLocation
   * @return efsFileLocation
   */
  @javax.annotation.Nullable
  public InputFileLocationEfsFileLocation getEfsFileLocation() {
    return efsFileLocation;
  }

  public void setEfsFileLocation(InputFileLocationEfsFileLocation efsFileLocation) {
    this.efsFileLocation = efsFileLocation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputFileLocation inputFileLocation = (InputFileLocation) o;
    return Objects.equals(this.s3FileLocation, inputFileLocation.s3FileLocation) &&
        Objects.equals(this.efsFileLocation, inputFileLocation.efsFileLocation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(s3FileLocation, efsFileLocation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputFileLocation {\n");
    sb.append("    s3FileLocation: ").append(toIndentedString(s3FileLocation)).append("\n");
    sb.append("    efsFileLocation: ").append(toIndentedString(efsFileLocation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("S3FileLocation");
    openapiFields.add("EfsFileLocation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InputFileLocation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InputFileLocation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InputFileLocation is not found in the empty JSON string", InputFileLocation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InputFileLocation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InputFileLocation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `S3FileLocation`
      if (jsonObj.get("S3FileLocation") != null && !jsonObj.get("S3FileLocation").isJsonNull()) {
        InputFileLocationS3FileLocation.validateJsonElement(jsonObj.get("S3FileLocation"));
      }
      // validate the optional field `EfsFileLocation`
      if (jsonObj.get("EfsFileLocation") != null && !jsonObj.get("EfsFileLocation").isJsonNull()) {
        InputFileLocationEfsFileLocation.validateJsonElement(jsonObj.get("EfsFileLocation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InputFileLocation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InputFileLocation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InputFileLocation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InputFileLocation.class));

       return (TypeAdapter<T>) new TypeAdapter<InputFileLocation>() {
           @Override
           public void write(JsonWriter out, InputFileLocation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InputFileLocation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InputFileLocation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InputFileLocation
   * @throws IOException if the JSON string is invalid with respect to InputFileLocation
   */
  public static InputFileLocation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InputFileLocation.class);
  }

  /**
   * Convert an instance of InputFileLocation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

