/*
 * AWS Transfer Family
 * Transfer Family is a fully managed service that enables the transfer of files over the File Transfer Protocol (FTP), File Transfer Protocol over SSL (FTPS), or Secure Shell (SSH) File Transfer Protocol (SFTP) directly into and out of Amazon Simple Storage Service (Amazon S3) or Amazon EFS. Additionally, you can use Applicability Statement 2 (AS2) to transfer files into and out of Amazon S3. Amazon Web Services helps you seamlessly migrate your file transfer workflows to Transfer Family by integrating with existing authentication systems, and providing DNS routing with Amazon Route 53 so nothing changes for your customers and partners, or their applications. With your data in Amazon S3, you can use it with Amazon Web Services for processing, analytics, machine learning, and archiving. Getting started with Transfer Family is easy since there is no infrastructure to buy and set up.
 *
 * The version of the OpenAPI document: 2018-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Domain;
import org.openapitools.client.model.EndpointType;
import org.openapitools.client.model.IdentityProviderType;
import org.openapitools.client.model.State;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Returns properties of a file transfer protocol-enabled server that was specified.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:39.227658-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListedServer {
  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_DOMAIN = "Domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private Domain domain;

  public static final String SERIALIZED_NAME_IDENTITY_PROVIDER_TYPE = "IdentityProviderType";
  @SerializedName(SERIALIZED_NAME_IDENTITY_PROVIDER_TYPE)
  private IdentityProviderType identityProviderType;

  public static final String SERIALIZED_NAME_ENDPOINT_TYPE = "EndpointType";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_TYPE)
  private EndpointType endpointType;

  public static final String SERIALIZED_NAME_LOGGING_ROLE = "LoggingRole";
  @SerializedName(SERIALIZED_NAME_LOGGING_ROLE)
  private String loggingRole;

  public static final String SERIALIZED_NAME_SERVER_ID = "ServerId";
  @SerializedName(SERIALIZED_NAME_SERVER_ID)
  private String serverId;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private State state;

  public static final String SERIALIZED_NAME_USER_COUNT = "UserCount";
  @SerializedName(SERIALIZED_NAME_USER_COUNT)
  private Integer userCount;

  public ListedServer() {
  }

  public ListedServer arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nonnull
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public ListedServer domain(Domain domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Get domain
   * @return domain
   */
  @javax.annotation.Nullable
  public Domain getDomain() {
    return domain;
  }

  public void setDomain(Domain domain) {
    this.domain = domain;
  }


  public ListedServer identityProviderType(IdentityProviderType identityProviderType) {
    this.identityProviderType = identityProviderType;
    return this;
  }

  /**
   * Get identityProviderType
   * @return identityProviderType
   */
  @javax.annotation.Nullable
  public IdentityProviderType getIdentityProviderType() {
    return identityProviderType;
  }

  public void setIdentityProviderType(IdentityProviderType identityProviderType) {
    this.identityProviderType = identityProviderType;
  }


  public ListedServer endpointType(EndpointType endpointType) {
    this.endpointType = endpointType;
    return this;
  }

  /**
   * Get endpointType
   * @return endpointType
   */
  @javax.annotation.Nullable
  public EndpointType getEndpointType() {
    return endpointType;
  }

  public void setEndpointType(EndpointType endpointType) {
    this.endpointType = endpointType;
  }


  public ListedServer loggingRole(String loggingRole) {
    this.loggingRole = loggingRole;
    return this;
  }

  /**
   * Get loggingRole
   * @return loggingRole
   */
  @javax.annotation.Nullable
  public String getLoggingRole() {
    return loggingRole;
  }

  public void setLoggingRole(String loggingRole) {
    this.loggingRole = loggingRole;
  }


  public ListedServer serverId(String serverId) {
    this.serverId = serverId;
    return this;
  }

  /**
   * Get serverId
   * @return serverId
   */
  @javax.annotation.Nullable
  public String getServerId() {
    return serverId;
  }

  public void setServerId(String serverId) {
    this.serverId = serverId;
  }


  public ListedServer state(State state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public State getState() {
    return state;
  }

  public void setState(State state) {
    this.state = state;
  }


  public ListedServer userCount(Integer userCount) {
    this.userCount = userCount;
    return this;
  }

  /**
   * Get userCount
   * @return userCount
   */
  @javax.annotation.Nullable
  public Integer getUserCount() {
    return userCount;
  }

  public void setUserCount(Integer userCount) {
    this.userCount = userCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListedServer listedServer = (ListedServer) o;
    return Objects.equals(this.arn, listedServer.arn) &&
        Objects.equals(this.domain, listedServer.domain) &&
        Objects.equals(this.identityProviderType, listedServer.identityProviderType) &&
        Objects.equals(this.endpointType, listedServer.endpointType) &&
        Objects.equals(this.loggingRole, listedServer.loggingRole) &&
        Objects.equals(this.serverId, listedServer.serverId) &&
        Objects.equals(this.state, listedServer.state) &&
        Objects.equals(this.userCount, listedServer.userCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, domain, identityProviderType, endpointType, loggingRole, serverId, state, userCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListedServer {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    identityProviderType: ").append(toIndentedString(identityProviderType)).append("\n");
    sb.append("    endpointType: ").append(toIndentedString(endpointType)).append("\n");
    sb.append("    loggingRole: ").append(toIndentedString(loggingRole)).append("\n");
    sb.append("    serverId: ").append(toIndentedString(serverId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    userCount: ").append(toIndentedString(userCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Arn");
    openapiFields.add("Domain");
    openapiFields.add("IdentityProviderType");
    openapiFields.add("EndpointType");
    openapiFields.add("LoggingRole");
    openapiFields.add("ServerId");
    openapiFields.add("State");
    openapiFields.add("UserCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Arn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListedServer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListedServer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListedServer is not found in the empty JSON string", ListedServer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListedServer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListedServer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListedServer.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Arn`
      String.validateJsonElement(jsonObj.get("Arn"));
      // validate the optional field `Domain`
      if (jsonObj.get("Domain") != null && !jsonObj.get("Domain").isJsonNull()) {
        Domain.validateJsonElement(jsonObj.get("Domain"));
      }
      // validate the optional field `IdentityProviderType`
      if (jsonObj.get("IdentityProviderType") != null && !jsonObj.get("IdentityProviderType").isJsonNull()) {
        IdentityProviderType.validateJsonElement(jsonObj.get("IdentityProviderType"));
      }
      // validate the optional field `EndpointType`
      if (jsonObj.get("EndpointType") != null && !jsonObj.get("EndpointType").isJsonNull()) {
        EndpointType.validateJsonElement(jsonObj.get("EndpointType"));
      }
      // validate the optional field `LoggingRole`
      if (jsonObj.get("LoggingRole") != null && !jsonObj.get("LoggingRole").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LoggingRole"));
      }
      // validate the optional field `ServerId`
      if (jsonObj.get("ServerId") != null && !jsonObj.get("ServerId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ServerId"));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        State.validateJsonElement(jsonObj.get("State"));
      }
      // validate the optional field `UserCount`
      if (jsonObj.get("UserCount") != null && !jsonObj.get("UserCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("UserCount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListedServer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListedServer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListedServer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListedServer.class));

       return (TypeAdapter<T>) new TypeAdapter<ListedServer>() {
           @Override
           public void write(JsonWriter out, ListedServer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListedServer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListedServer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListedServer
   * @throws IOException if the JSON string is invalid with respect to ListedServer
   */
  public static ListedServer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListedServer.class);
  }

  /**
   * Convert an instance of ListedServer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

