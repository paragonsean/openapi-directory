# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_connector_request_as2_config import CreateConnectorRequestAs2Config
from openapi_server.models.create_connector_request_sftp_config import CreateConnectorRequestSftpConfig
from openapi_server import util


class CreateConnectorRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, url: str=None, as2_config: CreateConnectorRequestAs2Config=None, access_role: str=None, logging_role: str=None, tags: List=None, sftp_config: CreateConnectorRequestSftpConfig=None):
        """CreateConnectorRequest - a model defined in OpenAPI

        :param url: The url of this CreateConnectorRequest.
        :param as2_config: The as2_config of this CreateConnectorRequest.
        :param access_role: The access_role of this CreateConnectorRequest.
        :param logging_role: The logging_role of this CreateConnectorRequest.
        :param tags: The tags of this CreateConnectorRequest.
        :param sftp_config: The sftp_config of this CreateConnectorRequest.
        """
        self.openapi_types = {
            'url': str,
            'as2_config': CreateConnectorRequestAs2Config,
            'access_role': str,
            'logging_role': str,
            'tags': List,
            'sftp_config': CreateConnectorRequestSftpConfig
        }

        self.attribute_map = {
            'url': 'Url',
            'as2_config': 'As2Config',
            'access_role': 'AccessRole',
            'logging_role': 'LoggingRole',
            'tags': 'Tags',
            'sftp_config': 'SftpConfig'
        }

        self._url = url
        self._as2_config = as2_config
        self._access_role = access_role
        self._logging_role = logging_role
        self._tags = tags
        self._sftp_config = sftp_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateConnectorRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateConnectorRequest of this CreateConnectorRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def url(self):
        """Gets the url of this CreateConnectorRequest.


        :return: The url of this CreateConnectorRequest.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CreateConnectorRequest.


        :param url: The url of this CreateConnectorRequest.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def as2_config(self):
        """Gets the as2_config of this CreateConnectorRequest.


        :return: The as2_config of this CreateConnectorRequest.
        :rtype: CreateConnectorRequestAs2Config
        """
        return self._as2_config

    @as2_config.setter
    def as2_config(self, as2_config):
        """Sets the as2_config of this CreateConnectorRequest.


        :param as2_config: The as2_config of this CreateConnectorRequest.
        :type as2_config: CreateConnectorRequestAs2Config
        """

        self._as2_config = as2_config

    @property
    def access_role(self):
        """Gets the access_role of this CreateConnectorRequest.


        :return: The access_role of this CreateConnectorRequest.
        :rtype: str
        """
        return self._access_role

    @access_role.setter
    def access_role(self, access_role):
        """Sets the access_role of this CreateConnectorRequest.


        :param access_role: The access_role of this CreateConnectorRequest.
        :type access_role: str
        """
        if access_role is None:
            raise ValueError("Invalid value for `access_role`, must not be `None`")

        self._access_role = access_role

    @property
    def logging_role(self):
        """Gets the logging_role of this CreateConnectorRequest.


        :return: The logging_role of this CreateConnectorRequest.
        :rtype: str
        """
        return self._logging_role

    @logging_role.setter
    def logging_role(self, logging_role):
        """Sets the logging_role of this CreateConnectorRequest.


        :param logging_role: The logging_role of this CreateConnectorRequest.
        :type logging_role: str
        """

        self._logging_role = logging_role

    @property
    def tags(self):
        """Gets the tags of this CreateConnectorRequest.


        :return: The tags of this CreateConnectorRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateConnectorRequest.


        :param tags: The tags of this CreateConnectorRequest.
        :type tags: List
        """

        self._tags = tags

    @property
    def sftp_config(self):
        """Gets the sftp_config of this CreateConnectorRequest.


        :return: The sftp_config of this CreateConnectorRequest.
        :rtype: CreateConnectorRequestSftpConfig
        """
        return self._sftp_config

    @sftp_config.setter
    def sftp_config(self, sftp_config):
        """Sets the sftp_config of this CreateConnectorRequest.


        :param sftp_config: The sftp_config of this CreateConnectorRequest.
        :type sftp_config: CreateConnectorRequestSftpConfig
        """

        self._sftp_config = sftp_config
