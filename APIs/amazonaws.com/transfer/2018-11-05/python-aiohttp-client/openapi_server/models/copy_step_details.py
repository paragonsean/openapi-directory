# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.copy_step_details_destination_file_location import CopyStepDetailsDestinationFileLocation
from openapi_server.models.overwrite_existing import OverwriteExisting
from openapi_server import util


class CopyStepDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, destination_file_location: CopyStepDetailsDestinationFileLocation=None, overwrite_existing: OverwriteExisting=None, source_file_location: str=None):
        """CopyStepDetails - a model defined in OpenAPI

        :param name: The name of this CopyStepDetails.
        :param destination_file_location: The destination_file_location of this CopyStepDetails.
        :param overwrite_existing: The overwrite_existing of this CopyStepDetails.
        :param source_file_location: The source_file_location of this CopyStepDetails.
        """
        self.openapi_types = {
            'name': str,
            'destination_file_location': CopyStepDetailsDestinationFileLocation,
            'overwrite_existing': OverwriteExisting,
            'source_file_location': str
        }

        self.attribute_map = {
            'name': 'Name',
            'destination_file_location': 'DestinationFileLocation',
            'overwrite_existing': 'OverwriteExisting',
            'source_file_location': 'SourceFileLocation'
        }

        self._name = name
        self._destination_file_location = destination_file_location
        self._overwrite_existing = overwrite_existing
        self._source_file_location = source_file_location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CopyStepDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CopyStepDetails of this CopyStepDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CopyStepDetails.


        :return: The name of this CopyStepDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CopyStepDetails.


        :param name: The name of this CopyStepDetails.
        :type name: str
        """

        self._name = name

    @property
    def destination_file_location(self):
        """Gets the destination_file_location of this CopyStepDetails.


        :return: The destination_file_location of this CopyStepDetails.
        :rtype: CopyStepDetailsDestinationFileLocation
        """
        return self._destination_file_location

    @destination_file_location.setter
    def destination_file_location(self, destination_file_location):
        """Sets the destination_file_location of this CopyStepDetails.


        :param destination_file_location: The destination_file_location of this CopyStepDetails.
        :type destination_file_location: CopyStepDetailsDestinationFileLocation
        """

        self._destination_file_location = destination_file_location

    @property
    def overwrite_existing(self):
        """Gets the overwrite_existing of this CopyStepDetails.


        :return: The overwrite_existing of this CopyStepDetails.
        :rtype: OverwriteExisting
        """
        return self._overwrite_existing

    @overwrite_existing.setter
    def overwrite_existing(self, overwrite_existing):
        """Sets the overwrite_existing of this CopyStepDetails.


        :param overwrite_existing: The overwrite_existing of this CopyStepDetails.
        :type overwrite_existing: OverwriteExisting
        """

        self._overwrite_existing = overwrite_existing

    @property
    def source_file_location(self):
        """Gets the source_file_location of this CopyStepDetails.


        :return: The source_file_location of this CopyStepDetails.
        :rtype: str
        """
        return self._source_file_location

    @source_file_location.setter
    def source_file_location(self, source_file_location):
        """Sets the source_file_location of this CopyStepDetails.


        :param source_file_location: The source_file_location of this CopyStepDetails.
        :type source_file_location: str
        """

        self._source_file_location = source_file_location
