# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.describe_user_response_user import DescribeUserResponseUser
from openapi_server import util


class DescribeUserResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, server_id: str=None, user: DescribeUserResponseUser=None):
        """DescribeUserResponse - a model defined in OpenAPI

        :param server_id: The server_id of this DescribeUserResponse.
        :param user: The user of this DescribeUserResponse.
        """
        self.openapi_types = {
            'server_id': str,
            'user': DescribeUserResponseUser
        }

        self.attribute_map = {
            'server_id': 'ServerId',
            'user': 'User'
        }

        self._server_id = server_id
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeUserResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeUserResponse of this DescribeUserResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def server_id(self):
        """Gets the server_id of this DescribeUserResponse.


        :return: The server_id of this DescribeUserResponse.
        :rtype: str
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id):
        """Sets the server_id of this DescribeUserResponse.


        :param server_id: The server_id of this DescribeUserResponse.
        :type server_id: str
        """
        if server_id is None:
            raise ValueError("Invalid value for `server_id`, must not be `None`")

        self._server_id = server_id

    @property
    def user(self):
        """Gets the user of this DescribeUserResponse.


        :return: The user of this DescribeUserResponse.
        :rtype: DescribeUserResponseUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this DescribeUserResponse.


        :param user: The user of this DescribeUserResponse.
        :type user: DescribeUserResponseUser
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
