# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.agreement_status_type import AgreementStatusType
from openapi_server import util


class UpdateAgreementRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agreement_id: str=None, server_id: str=None, description: str=None, status: AgreementStatusType=None, local_profile_id: str=None, partner_profile_id: str=None, base_directory: str=None, access_role: str=None):
        """UpdateAgreementRequest - a model defined in OpenAPI

        :param agreement_id: The agreement_id of this UpdateAgreementRequest.
        :param server_id: The server_id of this UpdateAgreementRequest.
        :param description: The description of this UpdateAgreementRequest.
        :param status: The status of this UpdateAgreementRequest.
        :param local_profile_id: The local_profile_id of this UpdateAgreementRequest.
        :param partner_profile_id: The partner_profile_id of this UpdateAgreementRequest.
        :param base_directory: The base_directory of this UpdateAgreementRequest.
        :param access_role: The access_role of this UpdateAgreementRequest.
        """
        self.openapi_types = {
            'agreement_id': str,
            'server_id': str,
            'description': str,
            'status': AgreementStatusType,
            'local_profile_id': str,
            'partner_profile_id': str,
            'base_directory': str,
            'access_role': str
        }

        self.attribute_map = {
            'agreement_id': 'AgreementId',
            'server_id': 'ServerId',
            'description': 'Description',
            'status': 'Status',
            'local_profile_id': 'LocalProfileId',
            'partner_profile_id': 'PartnerProfileId',
            'base_directory': 'BaseDirectory',
            'access_role': 'AccessRole'
        }

        self._agreement_id = agreement_id
        self._server_id = server_id
        self._description = description
        self._status = status
        self._local_profile_id = local_profile_id
        self._partner_profile_id = partner_profile_id
        self._base_directory = base_directory
        self._access_role = access_role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateAgreementRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateAgreementRequest of this UpdateAgreementRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agreement_id(self):
        """Gets the agreement_id of this UpdateAgreementRequest.


        :return: The agreement_id of this UpdateAgreementRequest.
        :rtype: str
        """
        return self._agreement_id

    @agreement_id.setter
    def agreement_id(self, agreement_id):
        """Sets the agreement_id of this UpdateAgreementRequest.


        :param agreement_id: The agreement_id of this UpdateAgreementRequest.
        :type agreement_id: str
        """
        if agreement_id is None:
            raise ValueError("Invalid value for `agreement_id`, must not be `None`")

        self._agreement_id = agreement_id

    @property
    def server_id(self):
        """Gets the server_id of this UpdateAgreementRequest.


        :return: The server_id of this UpdateAgreementRequest.
        :rtype: str
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id):
        """Sets the server_id of this UpdateAgreementRequest.


        :param server_id: The server_id of this UpdateAgreementRequest.
        :type server_id: str
        """
        if server_id is None:
            raise ValueError("Invalid value for `server_id`, must not be `None`")

        self._server_id = server_id

    @property
    def description(self):
        """Gets the description of this UpdateAgreementRequest.


        :return: The description of this UpdateAgreementRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateAgreementRequest.


        :param description: The description of this UpdateAgreementRequest.
        :type description: str
        """

        self._description = description

    @property
    def status(self):
        """Gets the status of this UpdateAgreementRequest.


        :return: The status of this UpdateAgreementRequest.
        :rtype: AgreementStatusType
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpdateAgreementRequest.


        :param status: The status of this UpdateAgreementRequest.
        :type status: AgreementStatusType
        """

        self._status = status

    @property
    def local_profile_id(self):
        """Gets the local_profile_id of this UpdateAgreementRequest.


        :return: The local_profile_id of this UpdateAgreementRequest.
        :rtype: str
        """
        return self._local_profile_id

    @local_profile_id.setter
    def local_profile_id(self, local_profile_id):
        """Sets the local_profile_id of this UpdateAgreementRequest.


        :param local_profile_id: The local_profile_id of this UpdateAgreementRequest.
        :type local_profile_id: str
        """

        self._local_profile_id = local_profile_id

    @property
    def partner_profile_id(self):
        """Gets the partner_profile_id of this UpdateAgreementRequest.


        :return: The partner_profile_id of this UpdateAgreementRequest.
        :rtype: str
        """
        return self._partner_profile_id

    @partner_profile_id.setter
    def partner_profile_id(self, partner_profile_id):
        """Sets the partner_profile_id of this UpdateAgreementRequest.


        :param partner_profile_id: The partner_profile_id of this UpdateAgreementRequest.
        :type partner_profile_id: str
        """

        self._partner_profile_id = partner_profile_id

    @property
    def base_directory(self):
        """Gets the base_directory of this UpdateAgreementRequest.


        :return: The base_directory of this UpdateAgreementRequest.
        :rtype: str
        """
        return self._base_directory

    @base_directory.setter
    def base_directory(self, base_directory):
        """Sets the base_directory of this UpdateAgreementRequest.


        :param base_directory: The base_directory of this UpdateAgreementRequest.
        :type base_directory: str
        """

        self._base_directory = base_directory

    @property
    def access_role(self):
        """Gets the access_role of this UpdateAgreementRequest.


        :return: The access_role of this UpdateAgreementRequest.
        :rtype: str
        """
        return self._access_role

    @access_role.setter
    def access_role(self, access_role):
        """Sets the access_role of this UpdateAgreementRequest.


        :param access_role: The access_role of this UpdateAgreementRequest.
        :type access_role: str
        """

        self._access_role = access_role
