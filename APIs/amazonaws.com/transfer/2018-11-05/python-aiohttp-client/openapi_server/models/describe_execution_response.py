# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.describe_execution_response_execution import DescribeExecutionResponseExecution
from openapi_server import util


class DescribeExecutionResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, workflow_id: str=None, execution: DescribeExecutionResponseExecution=None):
        """DescribeExecutionResponse - a model defined in OpenAPI

        :param workflow_id: The workflow_id of this DescribeExecutionResponse.
        :param execution: The execution of this DescribeExecutionResponse.
        """
        self.openapi_types = {
            'workflow_id': str,
            'execution': DescribeExecutionResponseExecution
        }

        self.attribute_map = {
            'workflow_id': 'WorkflowId',
            'execution': 'Execution'
        }

        self._workflow_id = workflow_id
        self._execution = execution

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeExecutionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeExecutionResponse of this DescribeExecutionResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def workflow_id(self):
        """Gets the workflow_id of this DescribeExecutionResponse.


        :return: The workflow_id of this DescribeExecutionResponse.
        :rtype: str
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this DescribeExecutionResponse.


        :param workflow_id: The workflow_id of this DescribeExecutionResponse.
        :type workflow_id: str
        """
        if workflow_id is None:
            raise ValueError("Invalid value for `workflow_id`, must not be `None`")

        self._workflow_id = workflow_id

    @property
    def execution(self):
        """Gets the execution of this DescribeExecutionResponse.


        :return: The execution of this DescribeExecutionResponse.
        :rtype: DescribeExecutionResponseExecution
        """
        return self._execution

    @execution.setter
    def execution(self, execution):
        """Sets the execution of this DescribeExecutionResponse.


        :param execution: The execution of this DescribeExecutionResponse.
        :type execution: DescribeExecutionResponseExecution
        """
        if execution is None:
            raise ValueError("Invalid value for `execution`, must not be `None`")

        self._execution = execution
