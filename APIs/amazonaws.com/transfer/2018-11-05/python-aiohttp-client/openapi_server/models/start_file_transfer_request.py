# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StartFileTransferRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connector_id: str=None, send_file_paths: List=None, retrieve_file_paths: List=None, local_directory_path: str=None, remote_directory_path: str=None):
        """StartFileTransferRequest - a model defined in OpenAPI

        :param connector_id: The connector_id of this StartFileTransferRequest.
        :param send_file_paths: The send_file_paths of this StartFileTransferRequest.
        :param retrieve_file_paths: The retrieve_file_paths of this StartFileTransferRequest.
        :param local_directory_path: The local_directory_path of this StartFileTransferRequest.
        :param remote_directory_path: The remote_directory_path of this StartFileTransferRequest.
        """
        self.openapi_types = {
            'connector_id': str,
            'send_file_paths': List,
            'retrieve_file_paths': List,
            'local_directory_path': str,
            'remote_directory_path': str
        }

        self.attribute_map = {
            'connector_id': 'ConnectorId',
            'send_file_paths': 'SendFilePaths',
            'retrieve_file_paths': 'RetrieveFilePaths',
            'local_directory_path': 'LocalDirectoryPath',
            'remote_directory_path': 'RemoteDirectoryPath'
        }

        self._connector_id = connector_id
        self._send_file_paths = send_file_paths
        self._retrieve_file_paths = retrieve_file_paths
        self._local_directory_path = local_directory_path
        self._remote_directory_path = remote_directory_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartFileTransferRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartFileTransferRequest of this StartFileTransferRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connector_id(self):
        """Gets the connector_id of this StartFileTransferRequest.


        :return: The connector_id of this StartFileTransferRequest.
        :rtype: str
        """
        return self._connector_id

    @connector_id.setter
    def connector_id(self, connector_id):
        """Sets the connector_id of this StartFileTransferRequest.


        :param connector_id: The connector_id of this StartFileTransferRequest.
        :type connector_id: str
        """
        if connector_id is None:
            raise ValueError("Invalid value for `connector_id`, must not be `None`")

        self._connector_id = connector_id

    @property
    def send_file_paths(self):
        """Gets the send_file_paths of this StartFileTransferRequest.


        :return: The send_file_paths of this StartFileTransferRequest.
        :rtype: List
        """
        return self._send_file_paths

    @send_file_paths.setter
    def send_file_paths(self, send_file_paths):
        """Sets the send_file_paths of this StartFileTransferRequest.


        :param send_file_paths: The send_file_paths of this StartFileTransferRequest.
        :type send_file_paths: List
        """

        self._send_file_paths = send_file_paths

    @property
    def retrieve_file_paths(self):
        """Gets the retrieve_file_paths of this StartFileTransferRequest.


        :return: The retrieve_file_paths of this StartFileTransferRequest.
        :rtype: List
        """
        return self._retrieve_file_paths

    @retrieve_file_paths.setter
    def retrieve_file_paths(self, retrieve_file_paths):
        """Sets the retrieve_file_paths of this StartFileTransferRequest.


        :param retrieve_file_paths: The retrieve_file_paths of this StartFileTransferRequest.
        :type retrieve_file_paths: List
        """

        self._retrieve_file_paths = retrieve_file_paths

    @property
    def local_directory_path(self):
        """Gets the local_directory_path of this StartFileTransferRequest.


        :return: The local_directory_path of this StartFileTransferRequest.
        :rtype: str
        """
        return self._local_directory_path

    @local_directory_path.setter
    def local_directory_path(self, local_directory_path):
        """Sets the local_directory_path of this StartFileTransferRequest.


        :param local_directory_path: The local_directory_path of this StartFileTransferRequest.
        :type local_directory_path: str
        """

        self._local_directory_path = local_directory_path

    @property
    def remote_directory_path(self):
        """Gets the remote_directory_path of this StartFileTransferRequest.


        :return: The remote_directory_path of this StartFileTransferRequest.
        :rtype: str
        """
        return self._remote_directory_path

    @remote_directory_path.setter
    def remote_directory_path(self, remote_directory_path):
        """Sets the remote_directory_path of this StartFileTransferRequest.


        :param remote_directory_path: The remote_directory_path of this StartFileTransferRequest.
        :type remote_directory_path: str
        """

        self._remote_directory_path = remote_directory_path
