# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.home_directory_type import HomeDirectoryType
from openapi_server import util


class ListedUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, home_directory: str=None, home_directory_type: HomeDirectoryType=None, role: str=None, ssh_public_key_count: int=None, user_name: str=None):
        """ListedUser - a model defined in OpenAPI

        :param arn: The arn of this ListedUser.
        :param home_directory: The home_directory of this ListedUser.
        :param home_directory_type: The home_directory_type of this ListedUser.
        :param role: The role of this ListedUser.
        :param ssh_public_key_count: The ssh_public_key_count of this ListedUser.
        :param user_name: The user_name of this ListedUser.
        """
        self.openapi_types = {
            'arn': str,
            'home_directory': str,
            'home_directory_type': HomeDirectoryType,
            'role': str,
            'ssh_public_key_count': int,
            'user_name': str
        }

        self.attribute_map = {
            'arn': 'Arn',
            'home_directory': 'HomeDirectory',
            'home_directory_type': 'HomeDirectoryType',
            'role': 'Role',
            'ssh_public_key_count': 'SshPublicKeyCount',
            'user_name': 'UserName'
        }

        self._arn = arn
        self._home_directory = home_directory
        self._home_directory_type = home_directory_type
        self._role = role
        self._ssh_public_key_count = ssh_public_key_count
        self._user_name = user_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListedUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListedUser of this ListedUser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this ListedUser.


        :return: The arn of this ListedUser.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this ListedUser.


        :param arn: The arn of this ListedUser.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def home_directory(self):
        """Gets the home_directory of this ListedUser.


        :return: The home_directory of this ListedUser.
        :rtype: str
        """
        return self._home_directory

    @home_directory.setter
    def home_directory(self, home_directory):
        """Sets the home_directory of this ListedUser.


        :param home_directory: The home_directory of this ListedUser.
        :type home_directory: str
        """

        self._home_directory = home_directory

    @property
    def home_directory_type(self):
        """Gets the home_directory_type of this ListedUser.


        :return: The home_directory_type of this ListedUser.
        :rtype: HomeDirectoryType
        """
        return self._home_directory_type

    @home_directory_type.setter
    def home_directory_type(self, home_directory_type):
        """Sets the home_directory_type of this ListedUser.


        :param home_directory_type: The home_directory_type of this ListedUser.
        :type home_directory_type: HomeDirectoryType
        """

        self._home_directory_type = home_directory_type

    @property
    def role(self):
        """Gets the role of this ListedUser.


        :return: The role of this ListedUser.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this ListedUser.


        :param role: The role of this ListedUser.
        :type role: str
        """

        self._role = role

    @property
    def ssh_public_key_count(self):
        """Gets the ssh_public_key_count of this ListedUser.


        :return: The ssh_public_key_count of this ListedUser.
        :rtype: int
        """
        return self._ssh_public_key_count

    @ssh_public_key_count.setter
    def ssh_public_key_count(self, ssh_public_key_count):
        """Sets the ssh_public_key_count of this ListedUser.


        :param ssh_public_key_count: The ssh_public_key_count of this ListedUser.
        :type ssh_public_key_count: int
        """

        self._ssh_public_key_count = ssh_public_key_count

    @property
    def user_name(self):
        """Gets the user_name of this ListedUser.


        :return: The user_name of this ListedUser.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this ListedUser.


        :param user_name: The user_name of this ListedUser.
        :type user_name: str
        """

        self._user_name = user_name
