# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.describe_connector_response_connector import DescribeConnectorResponseConnector
from openapi_server import util


class DescribeConnectorResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connector: DescribeConnectorResponseConnector=None):
        """DescribeConnectorResponse - a model defined in OpenAPI

        :param connector: The connector of this DescribeConnectorResponse.
        """
        self.openapi_types = {
            'connector': DescribeConnectorResponseConnector
        }

        self.attribute_map = {
            'connector': 'Connector'
        }

        self._connector = connector

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeConnectorResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeConnectorResponse of this DescribeConnectorResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connector(self):
        """Gets the connector of this DescribeConnectorResponse.


        :return: The connector of this DescribeConnectorResponse.
        :rtype: DescribeConnectorResponseConnector
        """
        return self._connector

    @connector.setter
    def connector(self, connector):
        """Sets the connector of this DescribeConnectorResponse.


        :param connector: The connector of this DescribeConnectorResponse.
        :type connector: DescribeConnectorResponseConnector
        """
        if connector is None:
            raise ValueError("Invalid value for `connector`, must not be `None`")

        self._connector = connector
