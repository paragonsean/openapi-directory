# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.domain import Domain
from openapi_server.models.endpoint_type import EndpointType
from openapi_server.models.identity_provider_type import IdentityProviderType
from openapi_server.models.state import State
from openapi_server import util


class ListedServer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, domain: Domain=None, identity_provider_type: IdentityProviderType=None, endpoint_type: EndpointType=None, logging_role: str=None, server_id: str=None, state: State=None, user_count: int=None):
        """ListedServer - a model defined in OpenAPI

        :param arn: The arn of this ListedServer.
        :param domain: The domain of this ListedServer.
        :param identity_provider_type: The identity_provider_type of this ListedServer.
        :param endpoint_type: The endpoint_type of this ListedServer.
        :param logging_role: The logging_role of this ListedServer.
        :param server_id: The server_id of this ListedServer.
        :param state: The state of this ListedServer.
        :param user_count: The user_count of this ListedServer.
        """
        self.openapi_types = {
            'arn': str,
            'domain': Domain,
            'identity_provider_type': IdentityProviderType,
            'endpoint_type': EndpointType,
            'logging_role': str,
            'server_id': str,
            'state': State,
            'user_count': int
        }

        self.attribute_map = {
            'arn': 'Arn',
            'domain': 'Domain',
            'identity_provider_type': 'IdentityProviderType',
            'endpoint_type': 'EndpointType',
            'logging_role': 'LoggingRole',
            'server_id': 'ServerId',
            'state': 'State',
            'user_count': 'UserCount'
        }

        self._arn = arn
        self._domain = domain
        self._identity_provider_type = identity_provider_type
        self._endpoint_type = endpoint_type
        self._logging_role = logging_role
        self._server_id = server_id
        self._state = state
        self._user_count = user_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListedServer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListedServer of this ListedServer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this ListedServer.


        :return: The arn of this ListedServer.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this ListedServer.


        :param arn: The arn of this ListedServer.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def domain(self):
        """Gets the domain of this ListedServer.


        :return: The domain of this ListedServer.
        :rtype: Domain
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ListedServer.


        :param domain: The domain of this ListedServer.
        :type domain: Domain
        """

        self._domain = domain

    @property
    def identity_provider_type(self):
        """Gets the identity_provider_type of this ListedServer.


        :return: The identity_provider_type of this ListedServer.
        :rtype: IdentityProviderType
        """
        return self._identity_provider_type

    @identity_provider_type.setter
    def identity_provider_type(self, identity_provider_type):
        """Sets the identity_provider_type of this ListedServer.


        :param identity_provider_type: The identity_provider_type of this ListedServer.
        :type identity_provider_type: IdentityProviderType
        """

        self._identity_provider_type = identity_provider_type

    @property
    def endpoint_type(self):
        """Gets the endpoint_type of this ListedServer.


        :return: The endpoint_type of this ListedServer.
        :rtype: EndpointType
        """
        return self._endpoint_type

    @endpoint_type.setter
    def endpoint_type(self, endpoint_type):
        """Sets the endpoint_type of this ListedServer.


        :param endpoint_type: The endpoint_type of this ListedServer.
        :type endpoint_type: EndpointType
        """

        self._endpoint_type = endpoint_type

    @property
    def logging_role(self):
        """Gets the logging_role of this ListedServer.


        :return: The logging_role of this ListedServer.
        :rtype: str
        """
        return self._logging_role

    @logging_role.setter
    def logging_role(self, logging_role):
        """Sets the logging_role of this ListedServer.


        :param logging_role: The logging_role of this ListedServer.
        :type logging_role: str
        """

        self._logging_role = logging_role

    @property
    def server_id(self):
        """Gets the server_id of this ListedServer.


        :return: The server_id of this ListedServer.
        :rtype: str
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id):
        """Sets the server_id of this ListedServer.


        :param server_id: The server_id of this ListedServer.
        :type server_id: str
        """

        self._server_id = server_id

    @property
    def state(self):
        """Gets the state of this ListedServer.


        :return: The state of this ListedServer.
        :rtype: State
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ListedServer.


        :param state: The state of this ListedServer.
        :type state: State
        """

        self._state = state

    @property
    def user_count(self):
        """Gets the user_count of this ListedServer.


        :return: The user_count of this ListedServer.
        :rtype: int
        """
        return self._user_count

    @user_count.setter
    def user_count(self, user_count):
        """Sets the user_count of this ListedServer.


        :param user_count: The user_count of this ListedServer.
        :type user_count: int
        """

        self._user_count = user_count
