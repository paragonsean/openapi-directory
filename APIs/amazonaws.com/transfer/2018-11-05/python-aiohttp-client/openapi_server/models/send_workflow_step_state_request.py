# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_step_status import CustomStepStatus
from openapi_server import util


class SendWorkflowStepStateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, workflow_id: str=None, execution_id: str=None, token: str=None, status: CustomStepStatus=None):
        """SendWorkflowStepStateRequest - a model defined in OpenAPI

        :param workflow_id: The workflow_id of this SendWorkflowStepStateRequest.
        :param execution_id: The execution_id of this SendWorkflowStepStateRequest.
        :param token: The token of this SendWorkflowStepStateRequest.
        :param status: The status of this SendWorkflowStepStateRequest.
        """
        self.openapi_types = {
            'workflow_id': str,
            'execution_id': str,
            'token': str,
            'status': CustomStepStatus
        }

        self.attribute_map = {
            'workflow_id': 'WorkflowId',
            'execution_id': 'ExecutionId',
            'token': 'Token',
            'status': 'Status'
        }

        self._workflow_id = workflow_id
        self._execution_id = execution_id
        self._token = token
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendWorkflowStepStateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SendWorkflowStepStateRequest of this SendWorkflowStepStateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def workflow_id(self):
        """Gets the workflow_id of this SendWorkflowStepStateRequest.


        :return: The workflow_id of this SendWorkflowStepStateRequest.
        :rtype: str
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this SendWorkflowStepStateRequest.


        :param workflow_id: The workflow_id of this SendWorkflowStepStateRequest.
        :type workflow_id: str
        """
        if workflow_id is None:
            raise ValueError("Invalid value for `workflow_id`, must not be `None`")

        self._workflow_id = workflow_id

    @property
    def execution_id(self):
        """Gets the execution_id of this SendWorkflowStepStateRequest.


        :return: The execution_id of this SendWorkflowStepStateRequest.
        :rtype: str
        """
        return self._execution_id

    @execution_id.setter
    def execution_id(self, execution_id):
        """Sets the execution_id of this SendWorkflowStepStateRequest.


        :param execution_id: The execution_id of this SendWorkflowStepStateRequest.
        :type execution_id: str
        """
        if execution_id is None:
            raise ValueError("Invalid value for `execution_id`, must not be `None`")

        self._execution_id = execution_id

    @property
    def token(self):
        """Gets the token of this SendWorkflowStepStateRequest.


        :return: The token of this SendWorkflowStepStateRequest.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this SendWorkflowStepStateRequest.


        :param token: The token of this SendWorkflowStepStateRequest.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token

    @property
    def status(self):
        """Gets the status of this SendWorkflowStepStateRequest.


        :return: The status of this SendWorkflowStepStateRequest.
        :rtype: CustomStepStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SendWorkflowStepStateRequest.


        :param status: The status of this SendWorkflowStepStateRequest.
        :type status: CustomStepStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
