# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TestConnectionResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connector_id: str=None, status: str=None, status_message: str=None):
        """TestConnectionResponse - a model defined in OpenAPI

        :param connector_id: The connector_id of this TestConnectionResponse.
        :param status: The status of this TestConnectionResponse.
        :param status_message: The status_message of this TestConnectionResponse.
        """
        self.openapi_types = {
            'connector_id': str,
            'status': str,
            'status_message': str
        }

        self.attribute_map = {
            'connector_id': 'ConnectorId',
            'status': 'Status',
            'status_message': 'StatusMessage'
        }

        self._connector_id = connector_id
        self._status = status
        self._status_message = status_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestConnectionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestConnectionResponse of this TestConnectionResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connector_id(self):
        """Gets the connector_id of this TestConnectionResponse.


        :return: The connector_id of this TestConnectionResponse.
        :rtype: str
        """
        return self._connector_id

    @connector_id.setter
    def connector_id(self, connector_id):
        """Sets the connector_id of this TestConnectionResponse.


        :param connector_id: The connector_id of this TestConnectionResponse.
        :type connector_id: str
        """

        self._connector_id = connector_id

    @property
    def status(self):
        """Gets the status of this TestConnectionResponse.


        :return: The status of this TestConnectionResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TestConnectionResponse.


        :param status: The status of this TestConnectionResponse.
        :type status: str
        """

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this TestConnectionResponse.


        :return: The status_message of this TestConnectionResponse.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this TestConnectionResponse.


        :param status_message: The status_message of this TestConnectionResponse.
        :type status_message: str
        """

        self._status_message = status_message
