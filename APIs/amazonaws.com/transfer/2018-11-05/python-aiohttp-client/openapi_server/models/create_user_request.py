# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_user_request_posix_profile import CreateUserRequestPosixProfile
from openapi_server.models.home_directory_type import HomeDirectoryType
from openapi_server import util


class CreateUserRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, home_directory: str=None, home_directory_type: HomeDirectoryType=None, home_directory_mappings: List=None, policy: str=None, posix_profile: CreateUserRequestPosixProfile=None, role: str=None, server_id: str=None, ssh_public_key_body: str=None, tags: List=None, user_name: str=None):
        """CreateUserRequest - a model defined in OpenAPI

        :param home_directory: The home_directory of this CreateUserRequest.
        :param home_directory_type: The home_directory_type of this CreateUserRequest.
        :param home_directory_mappings: The home_directory_mappings of this CreateUserRequest.
        :param policy: The policy of this CreateUserRequest.
        :param posix_profile: The posix_profile of this CreateUserRequest.
        :param role: The role of this CreateUserRequest.
        :param server_id: The server_id of this CreateUserRequest.
        :param ssh_public_key_body: The ssh_public_key_body of this CreateUserRequest.
        :param tags: The tags of this CreateUserRequest.
        :param user_name: The user_name of this CreateUserRequest.
        """
        self.openapi_types = {
            'home_directory': str,
            'home_directory_type': HomeDirectoryType,
            'home_directory_mappings': List,
            'policy': str,
            'posix_profile': CreateUserRequestPosixProfile,
            'role': str,
            'server_id': str,
            'ssh_public_key_body': str,
            'tags': List,
            'user_name': str
        }

        self.attribute_map = {
            'home_directory': 'HomeDirectory',
            'home_directory_type': 'HomeDirectoryType',
            'home_directory_mappings': 'HomeDirectoryMappings',
            'policy': 'Policy',
            'posix_profile': 'PosixProfile',
            'role': 'Role',
            'server_id': 'ServerId',
            'ssh_public_key_body': 'SshPublicKeyBody',
            'tags': 'Tags',
            'user_name': 'UserName'
        }

        self._home_directory = home_directory
        self._home_directory_type = home_directory_type
        self._home_directory_mappings = home_directory_mappings
        self._policy = policy
        self._posix_profile = posix_profile
        self._role = role
        self._server_id = server_id
        self._ssh_public_key_body = ssh_public_key_body
        self._tags = tags
        self._user_name = user_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateUserRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateUserRequest of this CreateUserRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def home_directory(self):
        """Gets the home_directory of this CreateUserRequest.


        :return: The home_directory of this CreateUserRequest.
        :rtype: str
        """
        return self._home_directory

    @home_directory.setter
    def home_directory(self, home_directory):
        """Sets the home_directory of this CreateUserRequest.


        :param home_directory: The home_directory of this CreateUserRequest.
        :type home_directory: str
        """

        self._home_directory = home_directory

    @property
    def home_directory_type(self):
        """Gets the home_directory_type of this CreateUserRequest.


        :return: The home_directory_type of this CreateUserRequest.
        :rtype: HomeDirectoryType
        """
        return self._home_directory_type

    @home_directory_type.setter
    def home_directory_type(self, home_directory_type):
        """Sets the home_directory_type of this CreateUserRequest.


        :param home_directory_type: The home_directory_type of this CreateUserRequest.
        :type home_directory_type: HomeDirectoryType
        """

        self._home_directory_type = home_directory_type

    @property
    def home_directory_mappings(self):
        """Gets the home_directory_mappings of this CreateUserRequest.


        :return: The home_directory_mappings of this CreateUserRequest.
        :rtype: List
        """
        return self._home_directory_mappings

    @home_directory_mappings.setter
    def home_directory_mappings(self, home_directory_mappings):
        """Sets the home_directory_mappings of this CreateUserRequest.


        :param home_directory_mappings: The home_directory_mappings of this CreateUserRequest.
        :type home_directory_mappings: List
        """

        self._home_directory_mappings = home_directory_mappings

    @property
    def policy(self):
        """Gets the policy of this CreateUserRequest.


        :return: The policy of this CreateUserRequest.
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this CreateUserRequest.


        :param policy: The policy of this CreateUserRequest.
        :type policy: str
        """

        self._policy = policy

    @property
    def posix_profile(self):
        """Gets the posix_profile of this CreateUserRequest.


        :return: The posix_profile of this CreateUserRequest.
        :rtype: CreateUserRequestPosixProfile
        """
        return self._posix_profile

    @posix_profile.setter
    def posix_profile(self, posix_profile):
        """Sets the posix_profile of this CreateUserRequest.


        :param posix_profile: The posix_profile of this CreateUserRequest.
        :type posix_profile: CreateUserRequestPosixProfile
        """

        self._posix_profile = posix_profile

    @property
    def role(self):
        """Gets the role of this CreateUserRequest.


        :return: The role of this CreateUserRequest.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this CreateUserRequest.


        :param role: The role of this CreateUserRequest.
        :type role: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")

        self._role = role

    @property
    def server_id(self):
        """Gets the server_id of this CreateUserRequest.


        :return: The server_id of this CreateUserRequest.
        :rtype: str
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id):
        """Sets the server_id of this CreateUserRequest.


        :param server_id: The server_id of this CreateUserRequest.
        :type server_id: str
        """
        if server_id is None:
            raise ValueError("Invalid value for `server_id`, must not be `None`")

        self._server_id = server_id

    @property
    def ssh_public_key_body(self):
        """Gets the ssh_public_key_body of this CreateUserRequest.


        :return: The ssh_public_key_body of this CreateUserRequest.
        :rtype: str
        """
        return self._ssh_public_key_body

    @ssh_public_key_body.setter
    def ssh_public_key_body(self, ssh_public_key_body):
        """Sets the ssh_public_key_body of this CreateUserRequest.


        :param ssh_public_key_body: The ssh_public_key_body of this CreateUserRequest.
        :type ssh_public_key_body: str
        """

        self._ssh_public_key_body = ssh_public_key_body

    @property
    def tags(self):
        """Gets the tags of this CreateUserRequest.


        :return: The tags of this CreateUserRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateUserRequest.


        :param tags: The tags of this CreateUserRequest.
        :type tags: List
        """

        self._tags = tags

    @property
    def user_name(self):
        """Gets the user_name of this CreateUserRequest.


        :return: The user_name of this CreateUserRequest.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this CreateUserRequest.


        :param user_name: The user_name of this CreateUserRequest.
        :type user_name: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")

        self._user_name = user_name
