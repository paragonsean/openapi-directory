# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.described_execution_initial_file_location import DescribedExecutionInitialFileLocation
from openapi_server.models.described_execution_service_metadata import DescribedExecutionServiceMetadata
from openapi_server.models.execution_status import ExecutionStatus
from openapi_server import util


class ListedExecution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, execution_id: str=None, initial_file_location: DescribedExecutionInitialFileLocation=None, service_metadata: DescribedExecutionServiceMetadata=None, status: ExecutionStatus=None):
        """ListedExecution - a model defined in OpenAPI

        :param execution_id: The execution_id of this ListedExecution.
        :param initial_file_location: The initial_file_location of this ListedExecution.
        :param service_metadata: The service_metadata of this ListedExecution.
        :param status: The status of this ListedExecution.
        """
        self.openapi_types = {
            'execution_id': str,
            'initial_file_location': DescribedExecutionInitialFileLocation,
            'service_metadata': DescribedExecutionServiceMetadata,
            'status': ExecutionStatus
        }

        self.attribute_map = {
            'execution_id': 'ExecutionId',
            'initial_file_location': 'InitialFileLocation',
            'service_metadata': 'ServiceMetadata',
            'status': 'Status'
        }

        self._execution_id = execution_id
        self._initial_file_location = initial_file_location
        self._service_metadata = service_metadata
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListedExecution':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListedExecution of this ListedExecution.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def execution_id(self):
        """Gets the execution_id of this ListedExecution.


        :return: The execution_id of this ListedExecution.
        :rtype: str
        """
        return self._execution_id

    @execution_id.setter
    def execution_id(self, execution_id):
        """Sets the execution_id of this ListedExecution.


        :param execution_id: The execution_id of this ListedExecution.
        :type execution_id: str
        """

        self._execution_id = execution_id

    @property
    def initial_file_location(self):
        """Gets the initial_file_location of this ListedExecution.


        :return: The initial_file_location of this ListedExecution.
        :rtype: DescribedExecutionInitialFileLocation
        """
        return self._initial_file_location

    @initial_file_location.setter
    def initial_file_location(self, initial_file_location):
        """Sets the initial_file_location of this ListedExecution.


        :param initial_file_location: The initial_file_location of this ListedExecution.
        :type initial_file_location: DescribedExecutionInitialFileLocation
        """

        self._initial_file_location = initial_file_location

    @property
    def service_metadata(self):
        """Gets the service_metadata of this ListedExecution.


        :return: The service_metadata of this ListedExecution.
        :rtype: DescribedExecutionServiceMetadata
        """
        return self._service_metadata

    @service_metadata.setter
    def service_metadata(self, service_metadata):
        """Sets the service_metadata of this ListedExecution.


        :param service_metadata: The service_metadata of this ListedExecution.
        :type service_metadata: DescribedExecutionServiceMetadata
        """

        self._service_metadata = service_metadata

    @property
    def status(self):
        """Gets the status of this ListedExecution.


        :return: The status of this ListedExecution.
        :rtype: ExecutionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ListedExecution.


        :param status: The status of this ListedExecution.
        :type status: ExecutionStatus
        """

        self._status = status
