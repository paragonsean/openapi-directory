# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service_metadata_user_details import ServiceMetadataUserDetails
from openapi_server import util


class ServiceMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_details: ServiceMetadataUserDetails=None):
        """ServiceMetadata - a model defined in OpenAPI

        :param user_details: The user_details of this ServiceMetadata.
        """
        self.openapi_types = {
            'user_details': ServiceMetadataUserDetails
        }

        self.attribute_map = {
            'user_details': 'UserDetails'
        }

        self._user_details = user_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceMetadata of this ServiceMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_details(self):
        """Gets the user_details of this ServiceMetadata.


        :return: The user_details of this ServiceMetadata.
        :rtype: ServiceMetadataUserDetails
        """
        return self._user_details

    @user_details.setter
    def user_details(self, user_details):
        """Sets the user_details of this ServiceMetadata.


        :param user_details: The user_details of this ServiceMetadata.
        :type user_details: ServiceMetadataUserDetails
        """
        if user_details is None:
            raise ValueError("Invalid value for `user_details`, must not be `None`")

        self._user_details = user_details
