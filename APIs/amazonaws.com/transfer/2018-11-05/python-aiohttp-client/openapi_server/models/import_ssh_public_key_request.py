# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImportSshPublicKeyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, server_id: str=None, ssh_public_key_body: str=None, user_name: str=None):
        """ImportSshPublicKeyRequest - a model defined in OpenAPI

        :param server_id: The server_id of this ImportSshPublicKeyRequest.
        :param ssh_public_key_body: The ssh_public_key_body of this ImportSshPublicKeyRequest.
        :param user_name: The user_name of this ImportSshPublicKeyRequest.
        """
        self.openapi_types = {
            'server_id': str,
            'ssh_public_key_body': str,
            'user_name': str
        }

        self.attribute_map = {
            'server_id': 'ServerId',
            'ssh_public_key_body': 'SshPublicKeyBody',
            'user_name': 'UserName'
        }

        self._server_id = server_id
        self._ssh_public_key_body = ssh_public_key_body
        self._user_name = user_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportSshPublicKeyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportSshPublicKeyRequest of this ImportSshPublicKeyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def server_id(self):
        """Gets the server_id of this ImportSshPublicKeyRequest.


        :return: The server_id of this ImportSshPublicKeyRequest.
        :rtype: str
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id):
        """Sets the server_id of this ImportSshPublicKeyRequest.


        :param server_id: The server_id of this ImportSshPublicKeyRequest.
        :type server_id: str
        """
        if server_id is None:
            raise ValueError("Invalid value for `server_id`, must not be `None`")

        self._server_id = server_id

    @property
    def ssh_public_key_body(self):
        """Gets the ssh_public_key_body of this ImportSshPublicKeyRequest.


        :return: The ssh_public_key_body of this ImportSshPublicKeyRequest.
        :rtype: str
        """
        return self._ssh_public_key_body

    @ssh_public_key_body.setter
    def ssh_public_key_body(self, ssh_public_key_body):
        """Sets the ssh_public_key_body of this ImportSshPublicKeyRequest.


        :param ssh_public_key_body: The ssh_public_key_body of this ImportSshPublicKeyRequest.
        :type ssh_public_key_body: str
        """
        if ssh_public_key_body is None:
            raise ValueError("Invalid value for `ssh_public_key_body`, must not be `None`")

        self._ssh_public_key_body = ssh_public_key_body

    @property
    def user_name(self):
        """Gets the user_name of this ImportSshPublicKeyRequest.


        :return: The user_name of this ImportSshPublicKeyRequest.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this ImportSshPublicKeyRequest.


        :param user_name: The user_name of this ImportSshPublicKeyRequest.
        :type user_name: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")

        self._user_name = user_name
