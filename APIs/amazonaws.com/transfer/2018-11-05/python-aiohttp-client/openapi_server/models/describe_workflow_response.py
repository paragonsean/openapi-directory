# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.describe_workflow_response_workflow import DescribeWorkflowResponseWorkflow
from openapi_server import util


class DescribeWorkflowResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, workflow: DescribeWorkflowResponseWorkflow=None):
        """DescribeWorkflowResponse - a model defined in OpenAPI

        :param workflow: The workflow of this DescribeWorkflowResponse.
        """
        self.openapi_types = {
            'workflow': DescribeWorkflowResponseWorkflow
        }

        self.attribute_map = {
            'workflow': 'Workflow'
        }

        self._workflow = workflow

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeWorkflowResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeWorkflowResponse of this DescribeWorkflowResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def workflow(self):
        """Gets the workflow of this DescribeWorkflowResponse.


        :return: The workflow of this DescribeWorkflowResponse.
        :rtype: DescribeWorkflowResponseWorkflow
        """
        return self._workflow

    @workflow.setter
    def workflow(self, workflow):
        """Sets the workflow of this DescribeWorkflowResponse.


        :param workflow: The workflow of this DescribeWorkflowResponse.
        :type workflow: DescribeWorkflowResponseWorkflow
        """
        if workflow is None:
            raise ValueError("Invalid value for `workflow`, must not be `None`")

        self._workflow = workflow
