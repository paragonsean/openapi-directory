# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compression_enum import CompressionEnum
from openapi_server.models.encryption_alg import EncryptionAlg
from openapi_server.models.mdn_response import MdnResponse
from openapi_server.models.mdn_signing_alg import MdnSigningAlg
from openapi_server.models.signing_alg import SigningAlg
from openapi_server import util


class CreateConnectorRequestAs2Config(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, local_profile_id: str=None, partner_profile_id: str=None, message_subject: str=None, compression: CompressionEnum=None, encryption_algorithm: EncryptionAlg=None, signing_algorithm: SigningAlg=None, mdn_signing_algorithm: MdnSigningAlg=None, mdn_response: MdnResponse=None, basic_auth_secret_id: str=None):
        """CreateConnectorRequestAs2Config - a model defined in OpenAPI

        :param local_profile_id: The local_profile_id of this CreateConnectorRequestAs2Config.
        :param partner_profile_id: The partner_profile_id of this CreateConnectorRequestAs2Config.
        :param message_subject: The message_subject of this CreateConnectorRequestAs2Config.
        :param compression: The compression of this CreateConnectorRequestAs2Config.
        :param encryption_algorithm: The encryption_algorithm of this CreateConnectorRequestAs2Config.
        :param signing_algorithm: The signing_algorithm of this CreateConnectorRequestAs2Config.
        :param mdn_signing_algorithm: The mdn_signing_algorithm of this CreateConnectorRequestAs2Config.
        :param mdn_response: The mdn_response of this CreateConnectorRequestAs2Config.
        :param basic_auth_secret_id: The basic_auth_secret_id of this CreateConnectorRequestAs2Config.
        """
        self.openapi_types = {
            'local_profile_id': str,
            'partner_profile_id': str,
            'message_subject': str,
            'compression': CompressionEnum,
            'encryption_algorithm': EncryptionAlg,
            'signing_algorithm': SigningAlg,
            'mdn_signing_algorithm': MdnSigningAlg,
            'mdn_response': MdnResponse,
            'basic_auth_secret_id': str
        }

        self.attribute_map = {
            'local_profile_id': 'LocalProfileId',
            'partner_profile_id': 'PartnerProfileId',
            'message_subject': 'MessageSubject',
            'compression': 'Compression',
            'encryption_algorithm': 'EncryptionAlgorithm',
            'signing_algorithm': 'SigningAlgorithm',
            'mdn_signing_algorithm': 'MdnSigningAlgorithm',
            'mdn_response': 'MdnResponse',
            'basic_auth_secret_id': 'BasicAuthSecretId'
        }

        self._local_profile_id = local_profile_id
        self._partner_profile_id = partner_profile_id
        self._message_subject = message_subject
        self._compression = compression
        self._encryption_algorithm = encryption_algorithm
        self._signing_algorithm = signing_algorithm
        self._mdn_signing_algorithm = mdn_signing_algorithm
        self._mdn_response = mdn_response
        self._basic_auth_secret_id = basic_auth_secret_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateConnectorRequestAs2Config':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateConnectorRequest_As2Config of this CreateConnectorRequestAs2Config.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def local_profile_id(self):
        """Gets the local_profile_id of this CreateConnectorRequestAs2Config.


        :return: The local_profile_id of this CreateConnectorRequestAs2Config.
        :rtype: str
        """
        return self._local_profile_id

    @local_profile_id.setter
    def local_profile_id(self, local_profile_id):
        """Sets the local_profile_id of this CreateConnectorRequestAs2Config.


        :param local_profile_id: The local_profile_id of this CreateConnectorRequestAs2Config.
        :type local_profile_id: str
        """

        self._local_profile_id = local_profile_id

    @property
    def partner_profile_id(self):
        """Gets the partner_profile_id of this CreateConnectorRequestAs2Config.


        :return: The partner_profile_id of this CreateConnectorRequestAs2Config.
        :rtype: str
        """
        return self._partner_profile_id

    @partner_profile_id.setter
    def partner_profile_id(self, partner_profile_id):
        """Sets the partner_profile_id of this CreateConnectorRequestAs2Config.


        :param partner_profile_id: The partner_profile_id of this CreateConnectorRequestAs2Config.
        :type partner_profile_id: str
        """

        self._partner_profile_id = partner_profile_id

    @property
    def message_subject(self):
        """Gets the message_subject of this CreateConnectorRequestAs2Config.


        :return: The message_subject of this CreateConnectorRequestAs2Config.
        :rtype: str
        """
        return self._message_subject

    @message_subject.setter
    def message_subject(self, message_subject):
        """Sets the message_subject of this CreateConnectorRequestAs2Config.


        :param message_subject: The message_subject of this CreateConnectorRequestAs2Config.
        :type message_subject: str
        """

        self._message_subject = message_subject

    @property
    def compression(self):
        """Gets the compression of this CreateConnectorRequestAs2Config.


        :return: The compression of this CreateConnectorRequestAs2Config.
        :rtype: CompressionEnum
        """
        return self._compression

    @compression.setter
    def compression(self, compression):
        """Sets the compression of this CreateConnectorRequestAs2Config.


        :param compression: The compression of this CreateConnectorRequestAs2Config.
        :type compression: CompressionEnum
        """

        self._compression = compression

    @property
    def encryption_algorithm(self):
        """Gets the encryption_algorithm of this CreateConnectorRequestAs2Config.


        :return: The encryption_algorithm of this CreateConnectorRequestAs2Config.
        :rtype: EncryptionAlg
        """
        return self._encryption_algorithm

    @encryption_algorithm.setter
    def encryption_algorithm(self, encryption_algorithm):
        """Sets the encryption_algorithm of this CreateConnectorRequestAs2Config.


        :param encryption_algorithm: The encryption_algorithm of this CreateConnectorRequestAs2Config.
        :type encryption_algorithm: EncryptionAlg
        """

        self._encryption_algorithm = encryption_algorithm

    @property
    def signing_algorithm(self):
        """Gets the signing_algorithm of this CreateConnectorRequestAs2Config.


        :return: The signing_algorithm of this CreateConnectorRequestAs2Config.
        :rtype: SigningAlg
        """
        return self._signing_algorithm

    @signing_algorithm.setter
    def signing_algorithm(self, signing_algorithm):
        """Sets the signing_algorithm of this CreateConnectorRequestAs2Config.


        :param signing_algorithm: The signing_algorithm of this CreateConnectorRequestAs2Config.
        :type signing_algorithm: SigningAlg
        """

        self._signing_algorithm = signing_algorithm

    @property
    def mdn_signing_algorithm(self):
        """Gets the mdn_signing_algorithm of this CreateConnectorRequestAs2Config.


        :return: The mdn_signing_algorithm of this CreateConnectorRequestAs2Config.
        :rtype: MdnSigningAlg
        """
        return self._mdn_signing_algorithm

    @mdn_signing_algorithm.setter
    def mdn_signing_algorithm(self, mdn_signing_algorithm):
        """Sets the mdn_signing_algorithm of this CreateConnectorRequestAs2Config.


        :param mdn_signing_algorithm: The mdn_signing_algorithm of this CreateConnectorRequestAs2Config.
        :type mdn_signing_algorithm: MdnSigningAlg
        """

        self._mdn_signing_algorithm = mdn_signing_algorithm

    @property
    def mdn_response(self):
        """Gets the mdn_response of this CreateConnectorRequestAs2Config.


        :return: The mdn_response of this CreateConnectorRequestAs2Config.
        :rtype: MdnResponse
        """
        return self._mdn_response

    @mdn_response.setter
    def mdn_response(self, mdn_response):
        """Sets the mdn_response of this CreateConnectorRequestAs2Config.


        :param mdn_response: The mdn_response of this CreateConnectorRequestAs2Config.
        :type mdn_response: MdnResponse
        """

        self._mdn_response = mdn_response

    @property
    def basic_auth_secret_id(self):
        """Gets the basic_auth_secret_id of this CreateConnectorRequestAs2Config.


        :return: The basic_auth_secret_id of this CreateConnectorRequestAs2Config.
        :rtype: str
        """
        return self._basic_auth_secret_id

    @basic_auth_secret_id.setter
    def basic_auth_secret_id(self, basic_auth_secret_id):
        """Sets the basic_auth_secret_id of this CreateConnectorRequestAs2Config.


        :param basic_auth_secret_id: The basic_auth_secret_id of this CreateConnectorRequestAs2Config.
        :type basic_auth_secret_id: str
        """

        self._basic_auth_secret_id = basic_auth_secret_id
