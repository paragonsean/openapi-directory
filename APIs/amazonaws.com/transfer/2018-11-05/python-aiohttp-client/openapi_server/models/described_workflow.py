# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribedWorkflow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, description: str=None, steps: List=None, on_exception_steps: List=None, workflow_id: str=None, tags: List=None):
        """DescribedWorkflow - a model defined in OpenAPI

        :param arn: The arn of this DescribedWorkflow.
        :param description: The description of this DescribedWorkflow.
        :param steps: The steps of this DescribedWorkflow.
        :param on_exception_steps: The on_exception_steps of this DescribedWorkflow.
        :param workflow_id: The workflow_id of this DescribedWorkflow.
        :param tags: The tags of this DescribedWorkflow.
        """
        self.openapi_types = {
            'arn': str,
            'description': str,
            'steps': List,
            'on_exception_steps': List,
            'workflow_id': str,
            'tags': List
        }

        self.attribute_map = {
            'arn': 'Arn',
            'description': 'Description',
            'steps': 'Steps',
            'on_exception_steps': 'OnExceptionSteps',
            'workflow_id': 'WorkflowId',
            'tags': 'Tags'
        }

        self._arn = arn
        self._description = description
        self._steps = steps
        self._on_exception_steps = on_exception_steps
        self._workflow_id = workflow_id
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribedWorkflow':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribedWorkflow of this DescribedWorkflow.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this DescribedWorkflow.


        :return: The arn of this DescribedWorkflow.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this DescribedWorkflow.


        :param arn: The arn of this DescribedWorkflow.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def description(self):
        """Gets the description of this DescribedWorkflow.


        :return: The description of this DescribedWorkflow.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DescribedWorkflow.


        :param description: The description of this DescribedWorkflow.
        :type description: str
        """

        self._description = description

    @property
    def steps(self):
        """Gets the steps of this DescribedWorkflow.


        :return: The steps of this DescribedWorkflow.
        :rtype: List
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this DescribedWorkflow.


        :param steps: The steps of this DescribedWorkflow.
        :type steps: List
        """

        self._steps = steps

    @property
    def on_exception_steps(self):
        """Gets the on_exception_steps of this DescribedWorkflow.


        :return: The on_exception_steps of this DescribedWorkflow.
        :rtype: List
        """
        return self._on_exception_steps

    @on_exception_steps.setter
    def on_exception_steps(self, on_exception_steps):
        """Sets the on_exception_steps of this DescribedWorkflow.


        :param on_exception_steps: The on_exception_steps of this DescribedWorkflow.
        :type on_exception_steps: List
        """

        self._on_exception_steps = on_exception_steps

    @property
    def workflow_id(self):
        """Gets the workflow_id of this DescribedWorkflow.


        :return: The workflow_id of this DescribedWorkflow.
        :rtype: str
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this DescribedWorkflow.


        :param workflow_id: The workflow_id of this DescribedWorkflow.
        :type workflow_id: str
        """

        self._workflow_id = workflow_id

    @property
    def tags(self):
        """Gets the tags of this DescribedWorkflow.


        :return: The tags of this DescribedWorkflow.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DescribedWorkflow.


        :param tags: The tags of this DescribedWorkflow.
        :type tags: List
        """

        self._tags = tags
