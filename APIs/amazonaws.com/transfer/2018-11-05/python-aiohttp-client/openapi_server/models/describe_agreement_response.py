# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.describe_agreement_response_agreement import DescribeAgreementResponseAgreement
from openapi_server import util


class DescribeAgreementResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agreement: DescribeAgreementResponseAgreement=None):
        """DescribeAgreementResponse - a model defined in OpenAPI

        :param agreement: The agreement of this DescribeAgreementResponse.
        """
        self.openapi_types = {
            'agreement': DescribeAgreementResponseAgreement
        }

        self.attribute_map = {
            'agreement': 'Agreement'
        }

        self._agreement = agreement

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeAgreementResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeAgreementResponse of this DescribeAgreementResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agreement(self):
        """Gets the agreement of this DescribeAgreementResponse.


        :return: The agreement of this DescribeAgreementResponse.
        :rtype: DescribeAgreementResponseAgreement
        """
        return self._agreement

    @agreement.setter
    def agreement(self, agreement):
        """Sets the agreement of this DescribeAgreementResponse.


        :param agreement: The agreement of this DescribeAgreementResponse.
        :type agreement: DescribeAgreementResponseAgreement
        """
        if agreement is None:
            raise ValueError("Invalid value for `agreement`, must not be `None`")

        self._agreement = agreement
