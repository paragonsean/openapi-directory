# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribedSecurityPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fips: bool=None, security_policy_name: str=None, ssh_ciphers: List=None, ssh_kexs: List=None, ssh_macs: List=None, tls_ciphers: List=None):
        """DescribedSecurityPolicy - a model defined in OpenAPI

        :param fips: The fips of this DescribedSecurityPolicy.
        :param security_policy_name: The security_policy_name of this DescribedSecurityPolicy.
        :param ssh_ciphers: The ssh_ciphers of this DescribedSecurityPolicy.
        :param ssh_kexs: The ssh_kexs of this DescribedSecurityPolicy.
        :param ssh_macs: The ssh_macs of this DescribedSecurityPolicy.
        :param tls_ciphers: The tls_ciphers of this DescribedSecurityPolicy.
        """
        self.openapi_types = {
            'fips': bool,
            'security_policy_name': str,
            'ssh_ciphers': List,
            'ssh_kexs': List,
            'ssh_macs': List,
            'tls_ciphers': List
        }

        self.attribute_map = {
            'fips': 'Fips',
            'security_policy_name': 'SecurityPolicyName',
            'ssh_ciphers': 'SshCiphers',
            'ssh_kexs': 'SshKexs',
            'ssh_macs': 'SshMacs',
            'tls_ciphers': 'TlsCiphers'
        }

        self._fips = fips
        self._security_policy_name = security_policy_name
        self._ssh_ciphers = ssh_ciphers
        self._ssh_kexs = ssh_kexs
        self._ssh_macs = ssh_macs
        self._tls_ciphers = tls_ciphers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribedSecurityPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribedSecurityPolicy of this DescribedSecurityPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fips(self):
        """Gets the fips of this DescribedSecurityPolicy.


        :return: The fips of this DescribedSecurityPolicy.
        :rtype: bool
        """
        return self._fips

    @fips.setter
    def fips(self, fips):
        """Sets the fips of this DescribedSecurityPolicy.


        :param fips: The fips of this DescribedSecurityPolicy.
        :type fips: bool
        """

        self._fips = fips

    @property
    def security_policy_name(self):
        """Gets the security_policy_name of this DescribedSecurityPolicy.


        :return: The security_policy_name of this DescribedSecurityPolicy.
        :rtype: str
        """
        return self._security_policy_name

    @security_policy_name.setter
    def security_policy_name(self, security_policy_name):
        """Sets the security_policy_name of this DescribedSecurityPolicy.


        :param security_policy_name: The security_policy_name of this DescribedSecurityPolicy.
        :type security_policy_name: str
        """
        if security_policy_name is None:
            raise ValueError("Invalid value for `security_policy_name`, must not be `None`")

        self._security_policy_name = security_policy_name

    @property
    def ssh_ciphers(self):
        """Gets the ssh_ciphers of this DescribedSecurityPolicy.


        :return: The ssh_ciphers of this DescribedSecurityPolicy.
        :rtype: List
        """
        return self._ssh_ciphers

    @ssh_ciphers.setter
    def ssh_ciphers(self, ssh_ciphers):
        """Sets the ssh_ciphers of this DescribedSecurityPolicy.


        :param ssh_ciphers: The ssh_ciphers of this DescribedSecurityPolicy.
        :type ssh_ciphers: List
        """

        self._ssh_ciphers = ssh_ciphers

    @property
    def ssh_kexs(self):
        """Gets the ssh_kexs of this DescribedSecurityPolicy.


        :return: The ssh_kexs of this DescribedSecurityPolicy.
        :rtype: List
        """
        return self._ssh_kexs

    @ssh_kexs.setter
    def ssh_kexs(self, ssh_kexs):
        """Sets the ssh_kexs of this DescribedSecurityPolicy.


        :param ssh_kexs: The ssh_kexs of this DescribedSecurityPolicy.
        :type ssh_kexs: List
        """

        self._ssh_kexs = ssh_kexs

    @property
    def ssh_macs(self):
        """Gets the ssh_macs of this DescribedSecurityPolicy.


        :return: The ssh_macs of this DescribedSecurityPolicy.
        :rtype: List
        """
        return self._ssh_macs

    @ssh_macs.setter
    def ssh_macs(self, ssh_macs):
        """Sets the ssh_macs of this DescribedSecurityPolicy.


        :param ssh_macs: The ssh_macs of this DescribedSecurityPolicy.
        :type ssh_macs: List
        """

        self._ssh_macs = ssh_macs

    @property
    def tls_ciphers(self):
        """Gets the tls_ciphers of this DescribedSecurityPolicy.


        :return: The tls_ciphers of this DescribedSecurityPolicy.
        :rtype: List
        """
        return self._tls_ciphers

    @tls_ciphers.setter
    def tls_ciphers(self, tls_ciphers):
        """Sets the tls_ciphers of this DescribedSecurityPolicy.


        :param tls_ciphers: The tls_ciphers of this DescribedSecurityPolicy.
        :type tls_ciphers: List
        """

        self._tls_ciphers = tls_ciphers
