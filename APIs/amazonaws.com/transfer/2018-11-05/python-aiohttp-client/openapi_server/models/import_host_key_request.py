# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImportHostKeyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, server_id: str=None, host_key_body: str=None, description: str=None, tags: List=None):
        """ImportHostKeyRequest - a model defined in OpenAPI

        :param server_id: The server_id of this ImportHostKeyRequest.
        :param host_key_body: The host_key_body of this ImportHostKeyRequest.
        :param description: The description of this ImportHostKeyRequest.
        :param tags: The tags of this ImportHostKeyRequest.
        """
        self.openapi_types = {
            'server_id': str,
            'host_key_body': str,
            'description': str,
            'tags': List
        }

        self.attribute_map = {
            'server_id': 'ServerId',
            'host_key_body': 'HostKeyBody',
            'description': 'Description',
            'tags': 'Tags'
        }

        self._server_id = server_id
        self._host_key_body = host_key_body
        self._description = description
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportHostKeyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportHostKeyRequest of this ImportHostKeyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def server_id(self):
        """Gets the server_id of this ImportHostKeyRequest.


        :return: The server_id of this ImportHostKeyRequest.
        :rtype: str
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id):
        """Sets the server_id of this ImportHostKeyRequest.


        :param server_id: The server_id of this ImportHostKeyRequest.
        :type server_id: str
        """
        if server_id is None:
            raise ValueError("Invalid value for `server_id`, must not be `None`")

        self._server_id = server_id

    @property
    def host_key_body(self):
        """Gets the host_key_body of this ImportHostKeyRequest.


        :return: The host_key_body of this ImportHostKeyRequest.
        :rtype: str
        """
        return self._host_key_body

    @host_key_body.setter
    def host_key_body(self, host_key_body):
        """Sets the host_key_body of this ImportHostKeyRequest.


        :param host_key_body: The host_key_body of this ImportHostKeyRequest.
        :type host_key_body: str
        """
        if host_key_body is None:
            raise ValueError("Invalid value for `host_key_body`, must not be `None`")

        self._host_key_body = host_key_body

    @property
    def description(self):
        """Gets the description of this ImportHostKeyRequest.


        :return: The description of this ImportHostKeyRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ImportHostKeyRequest.


        :param description: The description of this ImportHostKeyRequest.
        :type description: str
        """

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this ImportHostKeyRequest.


        :return: The tags of this ImportHostKeyRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ImportHostKeyRequest.


        :param tags: The tags of this ImportHostKeyRequest.
        :type tags: List
        """

        self._tags = tags
