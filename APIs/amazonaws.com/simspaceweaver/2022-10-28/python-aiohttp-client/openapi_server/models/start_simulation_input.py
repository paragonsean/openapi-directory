# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.start_simulation_input_schema_s3_location import StartSimulationInputSchemaS3Location
from openapi_server.models.start_simulation_input_snapshot_s3_location import StartSimulationInputSnapshotS3Location
from openapi_server import util


class StartSimulationInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, description: str=None, maximum_duration: str=None, name: str=None, role_arn: str=None, schema_s3_location: StartSimulationInputSchemaS3Location=None, snapshot_s3_location: StartSimulationInputSnapshotS3Location=None, tags: Dict=None):
        """StartSimulationInput - a model defined in OpenAPI

        :param client_token: The client_token of this StartSimulationInput.
        :param description: The description of this StartSimulationInput.
        :param maximum_duration: The maximum_duration of this StartSimulationInput.
        :param name: The name of this StartSimulationInput.
        :param role_arn: The role_arn of this StartSimulationInput.
        :param schema_s3_location: The schema_s3_location of this StartSimulationInput.
        :param snapshot_s3_location: The snapshot_s3_location of this StartSimulationInput.
        :param tags: The tags of this StartSimulationInput.
        """
        self.openapi_types = {
            'client_token': str,
            'description': str,
            'maximum_duration': str,
            'name': str,
            'role_arn': str,
            'schema_s3_location': StartSimulationInputSchemaS3Location,
            'snapshot_s3_location': StartSimulationInputSnapshotS3Location,
            'tags': Dict
        }

        self.attribute_map = {
            'client_token': 'ClientToken',
            'description': 'Description',
            'maximum_duration': 'MaximumDuration',
            'name': 'Name',
            'role_arn': 'RoleArn',
            'schema_s3_location': 'SchemaS3Location',
            'snapshot_s3_location': 'SnapshotS3Location',
            'tags': 'Tags'
        }

        self._client_token = client_token
        self._description = description
        self._maximum_duration = maximum_duration
        self._name = name
        self._role_arn = role_arn
        self._schema_s3_location = schema_s3_location
        self._snapshot_s3_location = snapshot_s3_location
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartSimulationInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartSimulationInput of this StartSimulationInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this StartSimulationInput.


        :return: The client_token of this StartSimulationInput.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this StartSimulationInput.


        :param client_token: The client_token of this StartSimulationInput.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def description(self):
        """Gets the description of this StartSimulationInput.


        :return: The description of this StartSimulationInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StartSimulationInput.


        :param description: The description of this StartSimulationInput.
        :type description: str
        """

        self._description = description

    @property
    def maximum_duration(self):
        """Gets the maximum_duration of this StartSimulationInput.


        :return: The maximum_duration of this StartSimulationInput.
        :rtype: str
        """
        return self._maximum_duration

    @maximum_duration.setter
    def maximum_duration(self, maximum_duration):
        """Sets the maximum_duration of this StartSimulationInput.


        :param maximum_duration: The maximum_duration of this StartSimulationInput.
        :type maximum_duration: str
        """

        self._maximum_duration = maximum_duration

    @property
    def name(self):
        """Gets the name of this StartSimulationInput.


        :return: The name of this StartSimulationInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StartSimulationInput.


        :param name: The name of this StartSimulationInput.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def role_arn(self):
        """Gets the role_arn of this StartSimulationInput.


        :return: The role_arn of this StartSimulationInput.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this StartSimulationInput.


        :param role_arn: The role_arn of this StartSimulationInput.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def schema_s3_location(self):
        """Gets the schema_s3_location of this StartSimulationInput.


        :return: The schema_s3_location of this StartSimulationInput.
        :rtype: StartSimulationInputSchemaS3Location
        """
        return self._schema_s3_location

    @schema_s3_location.setter
    def schema_s3_location(self, schema_s3_location):
        """Sets the schema_s3_location of this StartSimulationInput.


        :param schema_s3_location: The schema_s3_location of this StartSimulationInput.
        :type schema_s3_location: StartSimulationInputSchemaS3Location
        """

        self._schema_s3_location = schema_s3_location

    @property
    def snapshot_s3_location(self):
        """Gets the snapshot_s3_location of this StartSimulationInput.


        :return: The snapshot_s3_location of this StartSimulationInput.
        :rtype: StartSimulationInputSnapshotS3Location
        """
        return self._snapshot_s3_location

    @snapshot_s3_location.setter
    def snapshot_s3_location(self, snapshot_s3_location):
        """Sets the snapshot_s3_location of this StartSimulationInput.


        :param snapshot_s3_location: The snapshot_s3_location of this StartSimulationInput.
        :type snapshot_s3_location: StartSimulationInputSnapshotS3Location
        """

        self._snapshot_s3_location = snapshot_s3_location

    @property
    def tags(self):
        """Gets the tags of this StartSimulationInput.


        :return: The tags of this StartSimulationInput.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this StartSimulationInput.


        :param tags: The tags of this StartSimulationInput.
        :type tags: Dict
        """

        self._tags = tags
