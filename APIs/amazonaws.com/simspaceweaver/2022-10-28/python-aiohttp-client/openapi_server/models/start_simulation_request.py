# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.start_simulation_request_schema_s3_location import StartSimulationRequestSchemaS3Location
import re
from openapi_server import util


class StartSimulationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, description: str=None, maximum_duration: str=None, name: str=None, role_arn: str=None, schema_s3_location: StartSimulationRequestSchemaS3Location=None, snapshot_s3_location: StartSimulationRequestSchemaS3Location=None, tags: Dict[str, str]=None):
        """StartSimulationRequest - a model defined in OpenAPI

        :param client_token: The client_token of this StartSimulationRequest.
        :param description: The description of this StartSimulationRequest.
        :param maximum_duration: The maximum_duration of this StartSimulationRequest.
        :param name: The name of this StartSimulationRequest.
        :param role_arn: The role_arn of this StartSimulationRequest.
        :param schema_s3_location: The schema_s3_location of this StartSimulationRequest.
        :param snapshot_s3_location: The snapshot_s3_location of this StartSimulationRequest.
        :param tags: The tags of this StartSimulationRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'description': str,
            'maximum_duration': str,
            'name': str,
            'role_arn': str,
            'schema_s3_location': StartSimulationRequestSchemaS3Location,
            'snapshot_s3_location': StartSimulationRequestSchemaS3Location,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'client_token': 'ClientToken',
            'description': 'Description',
            'maximum_duration': 'MaximumDuration',
            'name': 'Name',
            'role_arn': 'RoleArn',
            'schema_s3_location': 'SchemaS3Location',
            'snapshot_s3_location': 'SnapshotS3Location',
            'tags': 'Tags'
        }

        self._client_token = client_token
        self._description = description
        self._maximum_duration = maximum_duration
        self._name = name
        self._role_arn = role_arn
        self._schema_s3_location = schema_s3_location
        self._snapshot_s3_location = snapshot_s3_location
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartSimulationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartSimulation_request of this StartSimulationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this StartSimulationRequest.

        A value that you provide to ensure that repeated calls to this API operation using the same parameters complete only once. A <code>ClientToken</code> is also known as an <i>idempotency token</i>. A <code>ClientToken</code> expires after 24 hours.

        :return: The client_token of this StartSimulationRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this StartSimulationRequest.

        A value that you provide to ensure that repeated calls to this API operation using the same parameters complete only once. A <code>ClientToken</code> is also known as an <i>idempotency token</i>. A <code>ClientToken</code> expires after 24 hours.

        :param client_token: The client_token of this StartSimulationRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 128:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `128`")
        if client_token is not None and len(client_token) < 32:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `32`")
        if client_token is not None and not re.search(r'^[a-zA-Z0-9-]+$', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/^[a-zA-Z0-9-]+$/`")

        self._client_token = client_token

    @property
    def description(self):
        """Gets the description of this StartSimulationRequest.

        The description of the simulation.

        :return: The description of this StartSimulationRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StartSimulationRequest.

        The description of the simulation.

        :param description: The description of this StartSimulationRequest.
        :type description: str
        """
        if description is not None and len(description) > 500:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `500`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def maximum_duration(self):
        """Gets the maximum_duration of this StartSimulationRequest.

        The maximum running time of the simulation, specified as a number of minutes (m or M), hours (h or H), or days (d or D). The simulation stops when it reaches this limit. The maximum value is <code>14D</code>, or its equivalent in the other units. The default value is <code>14D</code>. A value equivalent to <code>0</code> makes the simulation immediately transition to <code>Stopping</code> as soon as it reaches <code>Started</code>.

        :return: The maximum_duration of this StartSimulationRequest.
        :rtype: str
        """
        return self._maximum_duration

    @maximum_duration.setter
    def maximum_duration(self, maximum_duration):
        """Sets the maximum_duration of this StartSimulationRequest.

        The maximum running time of the simulation, specified as a number of minutes (m or M), hours (h or H), or days (d or D). The simulation stops when it reaches this limit. The maximum value is <code>14D</code>, or its equivalent in the other units. The default value is <code>14D</code>. A value equivalent to <code>0</code> makes the simulation immediately transition to <code>Stopping</code> as soon as it reaches <code>Started</code>.

        :param maximum_duration: The maximum_duration of this StartSimulationRequest.
        :type maximum_duration: str
        """
        if maximum_duration is not None and len(maximum_duration) > 6:
            raise ValueError("Invalid value for `maximum_duration`, length must be less than or equal to `6`")
        if maximum_duration is not None and len(maximum_duration) < 2:
            raise ValueError("Invalid value for `maximum_duration`, length must be greater than or equal to `2`")
        if maximum_duration is not None and not re.search(r'^\d{1,5}[mhdMHD]$', maximum_duration):
            raise ValueError("Invalid value for `maximum_duration`, must be a follow pattern or equal to `/^\d{1,5}[mhdMHD]$/`")

        self._maximum_duration = maximum_duration

    @property
    def name(self):
        """Gets the name of this StartSimulationRequest.

        The name of the simulation.

        :return: The name of this StartSimulationRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StartSimulationRequest.

        The name of the simulation.

        :param name: The name of this StartSimulationRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'^[a-zA-Z0-9_.-]+$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z0-9_.-]+$/`")

        self._name = name

    @property
    def role_arn(self):
        """Gets the role_arn of this StartSimulationRequest.

        The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that the simulation assumes to perform actions. For more information about ARNs, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. For more information about IAM roles, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html\">IAM roles</a> in the <i>Identity and Access Management User Guide</i>.

        :return: The role_arn of this StartSimulationRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this StartSimulationRequest.

        The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that the simulation assumes to perform actions. For more information about ARNs, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. For more information about IAM roles, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html\">IAM roles</a> in the <i>Identity and Access Management User Guide</i>.

        :param role_arn: The role_arn of this StartSimulationRequest.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")
        if role_arn is not None and len(role_arn) > 1600:
            raise ValueError("Invalid value for `role_arn`, length must be less than or equal to `1600`")
        if role_arn is not None and len(role_arn) < 0:
            raise ValueError("Invalid value for `role_arn`, length must be greater than or equal to `0`")
        if role_arn is not None and not re.search(r'^arn:(?:aws|aws-cn|aws-us-gov):iam::(\d{12})?:role\/(.+)$', role_arn):
            raise ValueError("Invalid value for `role_arn`, must be a follow pattern or equal to `/^arn:(?:aws|aws-cn|aws-us-gov):iam::(\d{12})?:role\/(.+)$/`")

        self._role_arn = role_arn

    @property
    def schema_s3_location(self):
        """Gets the schema_s3_location of this StartSimulationRequest.


        :return: The schema_s3_location of this StartSimulationRequest.
        :rtype: StartSimulationRequestSchemaS3Location
        """
        return self._schema_s3_location

    @schema_s3_location.setter
    def schema_s3_location(self, schema_s3_location):
        """Sets the schema_s3_location of this StartSimulationRequest.


        :param schema_s3_location: The schema_s3_location of this StartSimulationRequest.
        :type schema_s3_location: StartSimulationRequestSchemaS3Location
        """

        self._schema_s3_location = schema_s3_location

    @property
    def snapshot_s3_location(self):
        """Gets the snapshot_s3_location of this StartSimulationRequest.


        :return: The snapshot_s3_location of this StartSimulationRequest.
        :rtype: StartSimulationRequestSchemaS3Location
        """
        return self._snapshot_s3_location

    @snapshot_s3_location.setter
    def snapshot_s3_location(self, snapshot_s3_location):
        """Sets the snapshot_s3_location of this StartSimulationRequest.


        :param snapshot_s3_location: The snapshot_s3_location of this StartSimulationRequest.
        :type snapshot_s3_location: StartSimulationRequestSchemaS3Location
        """

        self._snapshot_s3_location = snapshot_s3_location

    @property
    def tags(self):
        """Gets the tags of this StartSimulationRequest.

        A list of tags for the simulation. For more information about tags, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference</i>.

        :return: The tags of this StartSimulationRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this StartSimulationRequest.

        A list of tags for the simulation. For more information about tags, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference</i>.

        :param tags: The tags of this StartSimulationRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags
