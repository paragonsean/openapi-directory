# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.start_app_request_launch_overrides import StartAppRequestLaunchOverrides
import re
from openapi_server import util


class StartAppRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, description: str=None, domain: str=None, launch_overrides: StartAppRequestLaunchOverrides=None, name: str=None, simulation: str=None):
        """StartAppRequest - a model defined in OpenAPI

        :param client_token: The client_token of this StartAppRequest.
        :param description: The description of this StartAppRequest.
        :param domain: The domain of this StartAppRequest.
        :param launch_overrides: The launch_overrides of this StartAppRequest.
        :param name: The name of this StartAppRequest.
        :param simulation: The simulation of this StartAppRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'description': str,
            'domain': str,
            'launch_overrides': StartAppRequestLaunchOverrides,
            'name': str,
            'simulation': str
        }

        self.attribute_map = {
            'client_token': 'ClientToken',
            'description': 'Description',
            'domain': 'Domain',
            'launch_overrides': 'LaunchOverrides',
            'name': 'Name',
            'simulation': 'Simulation'
        }

        self._client_token = client_token
        self._description = description
        self._domain = domain
        self._launch_overrides = launch_overrides
        self._name = name
        self._simulation = simulation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartAppRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartApp_request of this StartAppRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this StartAppRequest.

        A value that you provide to ensure that repeated calls to this API operation using the same parameters complete only once. A <code>ClientToken</code> is also known as an <i>idempotency token</i>. A <code>ClientToken</code> expires after 24 hours.

        :return: The client_token of this StartAppRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this StartAppRequest.

        A value that you provide to ensure that repeated calls to this API operation using the same parameters complete only once. A <code>ClientToken</code> is also known as an <i>idempotency token</i>. A <code>ClientToken</code> expires after 24 hours.

        :param client_token: The client_token of this StartAppRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 128:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `128`")
        if client_token is not None and len(client_token) < 32:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `32`")
        if client_token is not None and not re.search(r'^[a-zA-Z0-9-]+$', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/^[a-zA-Z0-9-]+$/`")

        self._client_token = client_token

    @property
    def description(self):
        """Gets the description of this StartAppRequest.

        The description of the app.

        :return: The description of this StartAppRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StartAppRequest.

        The description of the app.

        :param description: The description of this StartAppRequest.
        :type description: str
        """
        if description is not None and len(description) > 500:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `500`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def domain(self):
        """Gets the domain of this StartAppRequest.

        The name of the domain of the app.

        :return: The domain of this StartAppRequest.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this StartAppRequest.

        The name of the domain of the app.

        :param domain: The domain of this StartAppRequest.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")
        if domain is not None and len(domain) > 64:
            raise ValueError("Invalid value for `domain`, length must be less than or equal to `64`")
        if domain is not None and len(domain) < 1:
            raise ValueError("Invalid value for `domain`, length must be greater than or equal to `1`")
        if domain is not None and not re.search(r'^[a-zA-Z0-9_.-]+$', domain):
            raise ValueError("Invalid value for `domain`, must be a follow pattern or equal to `/^[a-zA-Z0-9_.-]+$/`")

        self._domain = domain

    @property
    def launch_overrides(self):
        """Gets the launch_overrides of this StartAppRequest.


        :return: The launch_overrides of this StartAppRequest.
        :rtype: StartAppRequestLaunchOverrides
        """
        return self._launch_overrides

    @launch_overrides.setter
    def launch_overrides(self, launch_overrides):
        """Sets the launch_overrides of this StartAppRequest.


        :param launch_overrides: The launch_overrides of this StartAppRequest.
        :type launch_overrides: StartAppRequestLaunchOverrides
        """

        self._launch_overrides = launch_overrides

    @property
    def name(self):
        """Gets the name of this StartAppRequest.

        The name of the app.

        :return: The name of this StartAppRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StartAppRequest.

        The name of the app.

        :param name: The name of this StartAppRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'^[a-zA-Z0-9_.-]+$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z0-9_.-]+$/`")

        self._name = name

    @property
    def simulation(self):
        """Gets the simulation of this StartAppRequest.

        The name of the simulation of the app.

        :return: The simulation of this StartAppRequest.
        :rtype: str
        """
        return self._simulation

    @simulation.setter
    def simulation(self, simulation):
        """Sets the simulation of this StartAppRequest.

        The name of the simulation of the app.

        :param simulation: The simulation of this StartAppRequest.
        :type simulation: str
        """
        if simulation is None:
            raise ValueError("Invalid value for `simulation`, must not be `None`")
        if simulation is not None and len(simulation) > 64:
            raise ValueError("Invalid value for `simulation`, length must be less than or equal to `64`")
        if simulation is not None and len(simulation) < 1:
            raise ValueError("Invalid value for `simulation`, length must be greater than or equal to `1`")
        if simulation is not None and not re.search(r'^[a-zA-Z0-9_.-]+$', simulation):
            raise ValueError("Invalid value for `simulation`, must be a follow pattern or equal to `/^[a-zA-Z0-9_.-]+$/`")

        self._simulation = simulation
