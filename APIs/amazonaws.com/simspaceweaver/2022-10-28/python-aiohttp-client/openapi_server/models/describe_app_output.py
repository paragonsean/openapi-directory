# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.describe_app_output_endpoint_info import DescribeAppOutputEndpointInfo
from openapi_server.models.launch_overrides import LaunchOverrides
from openapi_server.models.simulation_app_status import SimulationAppStatus
from openapi_server.models.simulation_app_target_status import SimulationAppTargetStatus
from openapi_server import util


class DescribeAppOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, domain: str=None, endpoint_info: DescribeAppOutputEndpointInfo=None, launch_overrides: LaunchOverrides=None, name: str=None, simulation: str=None, status: SimulationAppStatus=None, target_status: SimulationAppTargetStatus=None):
        """DescribeAppOutput - a model defined in OpenAPI

        :param description: The description of this DescribeAppOutput.
        :param domain: The domain of this DescribeAppOutput.
        :param endpoint_info: The endpoint_info of this DescribeAppOutput.
        :param launch_overrides: The launch_overrides of this DescribeAppOutput.
        :param name: The name of this DescribeAppOutput.
        :param simulation: The simulation of this DescribeAppOutput.
        :param status: The status of this DescribeAppOutput.
        :param target_status: The target_status of this DescribeAppOutput.
        """
        self.openapi_types = {
            'description': str,
            'domain': str,
            'endpoint_info': DescribeAppOutputEndpointInfo,
            'launch_overrides': LaunchOverrides,
            'name': str,
            'simulation': str,
            'status': SimulationAppStatus,
            'target_status': SimulationAppTargetStatus
        }

        self.attribute_map = {
            'description': 'Description',
            'domain': 'Domain',
            'endpoint_info': 'EndpointInfo',
            'launch_overrides': 'LaunchOverrides',
            'name': 'Name',
            'simulation': 'Simulation',
            'status': 'Status',
            'target_status': 'TargetStatus'
        }

        self._description = description
        self._domain = domain
        self._endpoint_info = endpoint_info
        self._launch_overrides = launch_overrides
        self._name = name
        self._simulation = simulation
        self._status = status
        self._target_status = target_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeAppOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeAppOutput of this DescribeAppOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this DescribeAppOutput.


        :return: The description of this DescribeAppOutput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DescribeAppOutput.


        :param description: The description of this DescribeAppOutput.
        :type description: str
        """

        self._description = description

    @property
    def domain(self):
        """Gets the domain of this DescribeAppOutput.


        :return: The domain of this DescribeAppOutput.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this DescribeAppOutput.


        :param domain: The domain of this DescribeAppOutput.
        :type domain: str
        """

        self._domain = domain

    @property
    def endpoint_info(self):
        """Gets the endpoint_info of this DescribeAppOutput.


        :return: The endpoint_info of this DescribeAppOutput.
        :rtype: DescribeAppOutputEndpointInfo
        """
        return self._endpoint_info

    @endpoint_info.setter
    def endpoint_info(self, endpoint_info):
        """Sets the endpoint_info of this DescribeAppOutput.


        :param endpoint_info: The endpoint_info of this DescribeAppOutput.
        :type endpoint_info: DescribeAppOutputEndpointInfo
        """

        self._endpoint_info = endpoint_info

    @property
    def launch_overrides(self):
        """Gets the launch_overrides of this DescribeAppOutput.


        :return: The launch_overrides of this DescribeAppOutput.
        :rtype: LaunchOverrides
        """
        return self._launch_overrides

    @launch_overrides.setter
    def launch_overrides(self, launch_overrides):
        """Sets the launch_overrides of this DescribeAppOutput.


        :param launch_overrides: The launch_overrides of this DescribeAppOutput.
        :type launch_overrides: LaunchOverrides
        """

        self._launch_overrides = launch_overrides

    @property
    def name(self):
        """Gets the name of this DescribeAppOutput.


        :return: The name of this DescribeAppOutput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DescribeAppOutput.


        :param name: The name of this DescribeAppOutput.
        :type name: str
        """

        self._name = name

    @property
    def simulation(self):
        """Gets the simulation of this DescribeAppOutput.


        :return: The simulation of this DescribeAppOutput.
        :rtype: str
        """
        return self._simulation

    @simulation.setter
    def simulation(self, simulation):
        """Sets the simulation of this DescribeAppOutput.


        :param simulation: The simulation of this DescribeAppOutput.
        :type simulation: str
        """

        self._simulation = simulation

    @property
    def status(self):
        """Gets the status of this DescribeAppOutput.


        :return: The status of this DescribeAppOutput.
        :rtype: SimulationAppStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DescribeAppOutput.


        :param status: The status of this DescribeAppOutput.
        :type status: SimulationAppStatus
        """

        self._status = status

    @property
    def target_status(self):
        """Gets the target_status of this DescribeAppOutput.


        :return: The target_status of this DescribeAppOutput.
        :rtype: SimulationAppTargetStatus
        """
        return self._target_status

    @target_status.setter
    def target_status(self, target_status):
        """Sets the target_status of this DescribeAppOutput.


        :param target_status: The target_status of this DescribeAppOutput.
        :type target_status: SimulationAppTargetStatus
        """

        self._target_status = target_status
