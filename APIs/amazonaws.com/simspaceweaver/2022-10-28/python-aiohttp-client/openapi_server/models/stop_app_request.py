# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class StopAppRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app: str=None, domain: str=None, simulation: str=None):
        """StopAppRequest - a model defined in OpenAPI

        :param app: The app of this StopAppRequest.
        :param domain: The domain of this StopAppRequest.
        :param simulation: The simulation of this StopAppRequest.
        """
        self.openapi_types = {
            'app': str,
            'domain': str,
            'simulation': str
        }

        self.attribute_map = {
            'app': 'App',
            'domain': 'Domain',
            'simulation': 'Simulation'
        }

        self._app = app
        self._domain = domain
        self._simulation = simulation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StopAppRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StopApp_request of this StopAppRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app(self):
        """Gets the app of this StopAppRequest.

        The name of the app.

        :return: The app of this StopAppRequest.
        :rtype: str
        """
        return self._app

    @app.setter
    def app(self, app):
        """Sets the app of this StopAppRequest.

        The name of the app.

        :param app: The app of this StopAppRequest.
        :type app: str
        """
        if app is None:
            raise ValueError("Invalid value for `app`, must not be `None`")
        if app is not None and len(app) > 64:
            raise ValueError("Invalid value for `app`, length must be less than or equal to `64`")
        if app is not None and len(app) < 1:
            raise ValueError("Invalid value for `app`, length must be greater than or equal to `1`")
        if app is not None and not re.search(r'^[a-zA-Z0-9_.-]+$', app):
            raise ValueError("Invalid value for `app`, must be a follow pattern or equal to `/^[a-zA-Z0-9_.-]+$/`")

        self._app = app

    @property
    def domain(self):
        """Gets the domain of this StopAppRequest.

        The name of the domain of the app.

        :return: The domain of this StopAppRequest.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this StopAppRequest.

        The name of the domain of the app.

        :param domain: The domain of this StopAppRequest.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")
        if domain is not None and len(domain) > 64:
            raise ValueError("Invalid value for `domain`, length must be less than or equal to `64`")
        if domain is not None and len(domain) < 1:
            raise ValueError("Invalid value for `domain`, length must be greater than or equal to `1`")
        if domain is not None and not re.search(r'^[a-zA-Z0-9_.-]+$', domain):
            raise ValueError("Invalid value for `domain`, must be a follow pattern or equal to `/^[a-zA-Z0-9_.-]+$/`")

        self._domain = domain

    @property
    def simulation(self):
        """Gets the simulation of this StopAppRequest.

        The name of the simulation of the app.

        :return: The simulation of this StopAppRequest.
        :rtype: str
        """
        return self._simulation

    @simulation.setter
    def simulation(self, simulation):
        """Sets the simulation of this StopAppRequest.

        The name of the simulation of the app.

        :param simulation: The simulation of this StopAppRequest.
        :type simulation: str
        """
        if simulation is None:
            raise ValueError("Invalid value for `simulation`, must not be `None`")
        if simulation is not None and len(simulation) > 64:
            raise ValueError("Invalid value for `simulation`, length must be less than or equal to `64`")
        if simulation is not None and len(simulation) < 1:
            raise ValueError("Invalid value for `simulation`, length must be greater than or equal to `1`")
        if simulation is not None and not re.search(r'^[a-zA-Z0-9_.-]+$', simulation):
            raise ValueError("Invalid value for `simulation`, must be a follow pattern or equal to `/^[a-zA-Z0-9_.-]+$/`")

        self._simulation = simulation
