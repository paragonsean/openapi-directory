/**
 * AWS SimSpace Weaver
 * <p>SimSpace Weaver (SimSpace Weaver) is a managed service that you can use to build and operate large-scale spatial simulations in the Amazon Web Services Cloud. For example, you can create a digital twin of a city, crowd simulations with millions of people and objects, and massively multiplayer games with hundreds of thousands of connected players. For more information about SimSpace Weaver, see the <i> <a href=\"https://docs.aws.amazon.com/simspaceweaver/latest/userguide/\">SimSpace Weaver User Guide</a> </i>.</p> <p>This API reference describes the API operations and data types that you can use to communicate directly with SimSpace Weaver.</p> <p>SimSpace Weaver also provides the SimSpace Weaver app SDK, which you use for app development. The SimSpace Weaver app SDK API reference is included in the SimSpace Weaver app SDK documentation. This documentation is part of the SimSpace Weaver app SDK distributable package.</p>
 *
 * The version of the OpenAPI document: 2022-10-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartAppInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartAppInput::OAIStartAppInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartAppInput::OAIStartAppInput() {
    this->initializeModel();
}

OAIStartAppInput::~OAIStartAppInput() {}

void OAIStartAppInput::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_launch_overrides_isSet = false;
    m_launch_overrides_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_simulation_isSet = false;
    m_simulation_isValid = false;
}

void OAIStartAppInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartAppInput::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("Domain")]);
    m_domain_isSet = !json[QString("Domain")].isNull() && m_domain_isValid;

    m_launch_overrides_isValid = ::OpenAPI::fromJsonValue(m_launch_overrides, json[QString("LaunchOverrides")]);
    m_launch_overrides_isSet = !json[QString("LaunchOverrides")].isNull() && m_launch_overrides_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_simulation_isValid = ::OpenAPI::fromJsonValue(m_simulation, json[QString("Simulation")]);
    m_simulation_isSet = !json[QString("Simulation")].isNull() && m_simulation_isValid;
}

QString OAIStartAppInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartAppInput::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_domain_isSet) {
        obj.insert(QString("Domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_launch_overrides.isSet()) {
        obj.insert(QString("LaunchOverrides"), ::OpenAPI::toJsonValue(m_launch_overrides));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_simulation_isSet) {
        obj.insert(QString("Simulation"), ::OpenAPI::toJsonValue(m_simulation));
    }
    return obj;
}

QString OAIStartAppInput::getClientToken() const {
    return m_client_token;
}
void OAIStartAppInput::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIStartAppInput::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIStartAppInput::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAIStartAppInput::getDescription() const {
    return m_description;
}
void OAIStartAppInput::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIStartAppInput::is_description_Set() const{
    return m_description_isSet;
}

bool OAIStartAppInput::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIStartAppInput::getDomain() const {
    return m_domain;
}
void OAIStartAppInput::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIStartAppInput::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIStartAppInput::is_domain_Valid() const{
    return m_domain_isValid;
}

OAILaunchOverrides OAIStartAppInput::getLaunchOverrides() const {
    return m_launch_overrides;
}
void OAIStartAppInput::setLaunchOverrides(const OAILaunchOverrides &launch_overrides) {
    m_launch_overrides = launch_overrides;
    m_launch_overrides_isSet = true;
}

bool OAIStartAppInput::is_launch_overrides_Set() const{
    return m_launch_overrides_isSet;
}

bool OAIStartAppInput::is_launch_overrides_Valid() const{
    return m_launch_overrides_isValid;
}

QString OAIStartAppInput::getName() const {
    return m_name;
}
void OAIStartAppInput::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStartAppInput::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStartAppInput::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIStartAppInput::getSimulation() const {
    return m_simulation;
}
void OAIStartAppInput::setSimulation(const QString &simulation) {
    m_simulation = simulation;
    m_simulation_isSet = true;
}

bool OAIStartAppInput::is_simulation_Set() const{
    return m_simulation_isSet;
}

bool OAIStartAppInput::is_simulation_Valid() const{
    return m_simulation_isValid;
}

bool OAIStartAppInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_overrides.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_simulation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartAppInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_isValid && m_name_isValid && m_simulation_isValid && true;
}

} // namespace OpenAPI
