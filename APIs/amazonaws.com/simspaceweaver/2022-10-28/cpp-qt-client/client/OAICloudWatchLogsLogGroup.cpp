/**
 * AWS SimSpace Weaver
 * <p>SimSpace Weaver (SimSpace Weaver) is a managed service that you can use to build and operate large-scale spatial simulations in the Amazon Web Services Cloud. For example, you can create a digital twin of a city, crowd simulations with millions of people and objects, and massively multiplayer games with hundreds of thousands of connected players. For more information about SimSpace Weaver, see the <i> <a href=\"https://docs.aws.amazon.com/simspaceweaver/latest/userguide/\">SimSpace Weaver User Guide</a> </i>.</p> <p>This API reference describes the API operations and data types that you can use to communicate directly with SimSpace Weaver.</p> <p>SimSpace Weaver also provides the SimSpace Weaver app SDK, which you use for app development. The SimSpace Weaver app SDK API reference is included in the SimSpace Weaver app SDK documentation. This documentation is part of the SimSpace Weaver app SDK distributable package.</p>
 *
 * The version of the OpenAPI document: 2022-10-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudWatchLogsLogGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudWatchLogsLogGroup::OAICloudWatchLogsLogGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudWatchLogsLogGroup::OAICloudWatchLogsLogGroup() {
    this->initializeModel();
}

OAICloudWatchLogsLogGroup::~OAICloudWatchLogsLogGroup() {}

void OAICloudWatchLogsLogGroup::initializeModel() {

    m_log_group_arn_isSet = false;
    m_log_group_arn_isValid = false;
}

void OAICloudWatchLogsLogGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudWatchLogsLogGroup::fromJsonObject(QJsonObject json) {

    m_log_group_arn_isValid = ::OpenAPI::fromJsonValue(m_log_group_arn, json[QString("LogGroupArn")]);
    m_log_group_arn_isSet = !json[QString("LogGroupArn")].isNull() && m_log_group_arn_isValid;
}

QString OAICloudWatchLogsLogGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudWatchLogsLogGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_log_group_arn_isSet) {
        obj.insert(QString("LogGroupArn"), ::OpenAPI::toJsonValue(m_log_group_arn));
    }
    return obj;
}

QString OAICloudWatchLogsLogGroup::getLogGroupArn() const {
    return m_log_group_arn;
}
void OAICloudWatchLogsLogGroup::setLogGroupArn(const QString &log_group_arn) {
    m_log_group_arn = log_group_arn;
    m_log_group_arn_isSet = true;
}

bool OAICloudWatchLogsLogGroup::is_log_group_arn_Set() const{
    return m_log_group_arn_isSet;
}

bool OAICloudWatchLogsLogGroup::is_log_group_arn_Valid() const{
    return m_log_group_arn_isValid;
}

bool OAICloudWatchLogsLogGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_log_group_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudWatchLogsLogGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
