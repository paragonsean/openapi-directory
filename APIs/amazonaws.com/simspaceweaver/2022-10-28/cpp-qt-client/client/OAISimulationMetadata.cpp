/**
 * AWS SimSpace Weaver
 * <p>SimSpace Weaver (SimSpace Weaver) is a managed service that you can use to build and operate large-scale spatial simulations in the Amazon Web Services Cloud. For example, you can create a digital twin of a city, crowd simulations with millions of people and objects, and massively multiplayer games with hundreds of thousands of connected players. For more information about SimSpace Weaver, see the <i> <a href=\"https://docs.aws.amazon.com/simspaceweaver/latest/userguide/\">SimSpace Weaver User Guide</a> </i>.</p> <p>This API reference describes the API operations and data types that you can use to communicate directly with SimSpace Weaver.</p> <p>SimSpace Weaver also provides the SimSpace Weaver app SDK, which you use for app development. The SimSpace Weaver app SDK API reference is included in the SimSpace Weaver app SDK documentation. This documentation is part of the SimSpace Weaver app SDK distributable package.</p>
 *
 * The version of the OpenAPI document: 2022-10-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISimulationMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISimulationMetadata::OAISimulationMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISimulationMetadata::OAISimulationMetadata() {
    this->initializeModel();
}

OAISimulationMetadata::~OAISimulationMetadata() {}

void OAISimulationMetadata::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_target_status_isSet = false;
    m_target_status_isValid = false;
}

void OAISimulationMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISimulationMetadata::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_target_status_isValid = ::OpenAPI::fromJsonValue(m_target_status, json[QString("TargetStatus")]);
    m_target_status_isSet = !json[QString("TargetStatus")].isNull() && m_target_status_isValid;
}

QString OAISimulationMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISimulationMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_target_status.isSet()) {
        obj.insert(QString("TargetStatus"), ::OpenAPI::toJsonValue(m_target_status));
    }
    return obj;
}

QString OAISimulationMetadata::getArn() const {
    return m_arn;
}
void OAISimulationMetadata::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAISimulationMetadata::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAISimulationMetadata::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAISimulationMetadata::getCreationTime() const {
    return m_creation_time;
}
void OAISimulationMetadata::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAISimulationMetadata::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAISimulationMetadata::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAISimulationMetadata::getName() const {
    return m_name;
}
void OAISimulationMetadata::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISimulationMetadata::is_name_Set() const{
    return m_name_isSet;
}

bool OAISimulationMetadata::is_name_Valid() const{
    return m_name_isValid;
}

OAISimulationStatus OAISimulationMetadata::getStatus() const {
    return m_status;
}
void OAISimulationMetadata::setStatus(const OAISimulationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISimulationMetadata::is_status_Set() const{
    return m_status_isSet;
}

bool OAISimulationMetadata::is_status_Valid() const{
    return m_status_isValid;
}

OAISimulationTargetStatus OAISimulationMetadata::getTargetStatus() const {
    return m_target_status;
}
void OAISimulationMetadata::setTargetStatus(const OAISimulationTargetStatus &target_status) {
    m_target_status = target_status;
    m_target_status_isSet = true;
}

bool OAISimulationMetadata::is_target_status_Set() const{
    return m_target_status_isSet;
}

bool OAISimulationMetadata::is_target_status_Valid() const{
    return m_target_status_isValid;
}

bool OAISimulationMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISimulationMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
