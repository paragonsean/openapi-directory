/**
 * AWS SimSpace Weaver
 * <p>SimSpace Weaver (SimSpace Weaver) is a managed service that you can use to build and operate large-scale spatial simulations in the Amazon Web Services Cloud. For example, you can create a digital twin of a city, crowd simulations with millions of people and objects, and massively multiplayer games with hundreds of thousands of connected players. For more information about SimSpace Weaver, see the <i> <a href=\"https://docs.aws.amazon.com/simspaceweaver/latest/userguide/\">SimSpace Weaver User Guide</a> </i>.</p> <p>This API reference describes the API operations and data types that you can use to communicate directly with SimSpace Weaver.</p> <p>SimSpace Weaver also provides the SimSpace Weaver app SDK, which you use for app development. The SimSpace Weaver app SDK API reference is included in the SimSpace Weaver app SDK documentation. This documentation is part of the SimSpace Weaver app SDK distributable package.</p>
 *
 * The version of the OpenAPI document: 2022-10-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListSimulationsOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListSimulationsOutput::OAIListSimulationsOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListSimulationsOutput::OAIListSimulationsOutput() {
    this->initializeModel();
}

OAIListSimulationsOutput::~OAIListSimulationsOutput() {}

void OAIListSimulationsOutput::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_simulations_isSet = false;
    m_simulations_isValid = false;
}

void OAIListSimulationsOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListSimulationsOutput::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_simulations_isValid = ::OpenAPI::fromJsonValue(m_simulations, json[QString("Simulations")]);
    m_simulations_isSet = !json[QString("Simulations")].isNull() && m_simulations_isValid;
}

QString OAIListSimulationsOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListSimulationsOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_simulations.isSet()) {
        obj.insert(QString("Simulations"), ::OpenAPI::toJsonValue(m_simulations));
    }
    return obj;
}

QString OAIListSimulationsOutput::getNextToken() const {
    return m_next_token;
}
void OAIListSimulationsOutput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListSimulationsOutput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListSimulationsOutput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIListSimulationsOutput::getSimulations() const {
    return m_simulations;
}
void OAIListSimulationsOutput::setSimulations(const QList &simulations) {
    m_simulations = simulations;
    m_simulations_isSet = true;
}

bool OAIListSimulationsOutput::is_simulations_Set() const{
    return m_simulations_isSet;
}

bool OAIListSimulationsOutput::is_simulations_Valid() const{
    return m_simulations_isValid;
}

bool OAIListSimulationsOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_simulations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListSimulationsOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
