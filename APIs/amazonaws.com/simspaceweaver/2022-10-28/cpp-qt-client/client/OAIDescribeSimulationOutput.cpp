/**
 * AWS SimSpace Weaver
 * <p>SimSpace Weaver (SimSpace Weaver) is a managed service that you can use to build and operate large-scale spatial simulations in the Amazon Web Services Cloud. For example, you can create a digital twin of a city, crowd simulations with millions of people and objects, and massively multiplayer games with hundreds of thousands of connected players. For more information about SimSpace Weaver, see the <i> <a href=\"https://docs.aws.amazon.com/simspaceweaver/latest/userguide/\">SimSpace Weaver User Guide</a> </i>.</p> <p>This API reference describes the API operations and data types that you can use to communicate directly with SimSpace Weaver.</p> <p>SimSpace Weaver also provides the SimSpace Weaver app SDK, which you use for app development. The SimSpace Weaver app SDK API reference is included in the SimSpace Weaver app SDK documentation. This documentation is part of the SimSpace Weaver app SDK distributable package.</p>
 *
 * The version of the OpenAPI document: 2022-10-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeSimulationOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeSimulationOutput::OAIDescribeSimulationOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeSimulationOutput::OAIDescribeSimulationOutput() {
    this->initializeModel();
}

OAIDescribeSimulationOutput::~OAIDescribeSimulationOutput() {}

void OAIDescribeSimulationOutput::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_execution_id_isSet = false;
    m_execution_id_isValid = false;

    m_live_simulation_state_isSet = false;
    m_live_simulation_state_isValid = false;

    m_logging_configuration_isSet = false;
    m_logging_configuration_isValid = false;

    m_maximum_duration_isSet = false;
    m_maximum_duration_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_schema_error_isSet = false;
    m_schema_error_isValid = false;

    m_schema_s3_location_isSet = false;
    m_schema_s3_location_isValid = false;

    m_snapshot_s3_location_isSet = false;
    m_snapshot_s3_location_isValid = false;

    m_start_error_isSet = false;
    m_start_error_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_target_status_isSet = false;
    m_target_status_isValid = false;
}

void OAIDescribeSimulationOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeSimulationOutput::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_execution_id_isValid = ::OpenAPI::fromJsonValue(m_execution_id, json[QString("ExecutionId")]);
    m_execution_id_isSet = !json[QString("ExecutionId")].isNull() && m_execution_id_isValid;

    m_live_simulation_state_isValid = ::OpenAPI::fromJsonValue(m_live_simulation_state, json[QString("LiveSimulationState")]);
    m_live_simulation_state_isSet = !json[QString("LiveSimulationState")].isNull() && m_live_simulation_state_isValid;

    m_logging_configuration_isValid = ::OpenAPI::fromJsonValue(m_logging_configuration, json[QString("LoggingConfiguration")]);
    m_logging_configuration_isSet = !json[QString("LoggingConfiguration")].isNull() && m_logging_configuration_isValid;

    m_maximum_duration_isValid = ::OpenAPI::fromJsonValue(m_maximum_duration, json[QString("MaximumDuration")]);
    m_maximum_duration_isSet = !json[QString("MaximumDuration")].isNull() && m_maximum_duration_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_schema_error_isValid = ::OpenAPI::fromJsonValue(m_schema_error, json[QString("SchemaError")]);
    m_schema_error_isSet = !json[QString("SchemaError")].isNull() && m_schema_error_isValid;

    m_schema_s3_location_isValid = ::OpenAPI::fromJsonValue(m_schema_s3_location, json[QString("SchemaS3Location")]);
    m_schema_s3_location_isSet = !json[QString("SchemaS3Location")].isNull() && m_schema_s3_location_isValid;

    m_snapshot_s3_location_isValid = ::OpenAPI::fromJsonValue(m_snapshot_s3_location, json[QString("SnapshotS3Location")]);
    m_snapshot_s3_location_isSet = !json[QString("SnapshotS3Location")].isNull() && m_snapshot_s3_location_isValid;

    m_start_error_isValid = ::OpenAPI::fromJsonValue(m_start_error, json[QString("StartError")]);
    m_start_error_isSet = !json[QString("StartError")].isNull() && m_start_error_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_target_status_isValid = ::OpenAPI::fromJsonValue(m_target_status, json[QString("TargetStatus")]);
    m_target_status_isSet = !json[QString("TargetStatus")].isNull() && m_target_status_isValid;
}

QString OAIDescribeSimulationOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeSimulationOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_execution_id_isSet) {
        obj.insert(QString("ExecutionId"), ::OpenAPI::toJsonValue(m_execution_id));
    }
    if (m_live_simulation_state.isSet()) {
        obj.insert(QString("LiveSimulationState"), ::OpenAPI::toJsonValue(m_live_simulation_state));
    }
    if (m_logging_configuration.isSet()) {
        obj.insert(QString("LoggingConfiguration"), ::OpenAPI::toJsonValue(m_logging_configuration));
    }
    if (m_maximum_duration_isSet) {
        obj.insert(QString("MaximumDuration"), ::OpenAPI::toJsonValue(m_maximum_duration));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_schema_error_isSet) {
        obj.insert(QString("SchemaError"), ::OpenAPI::toJsonValue(m_schema_error));
    }
    if (m_schema_s3_location.isSet()) {
        obj.insert(QString("SchemaS3Location"), ::OpenAPI::toJsonValue(m_schema_s3_location));
    }
    if (m_snapshot_s3_location.isSet()) {
        obj.insert(QString("SnapshotS3Location"), ::OpenAPI::toJsonValue(m_snapshot_s3_location));
    }
    if (m_start_error_isSet) {
        obj.insert(QString("StartError"), ::OpenAPI::toJsonValue(m_start_error));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_target_status.isSet()) {
        obj.insert(QString("TargetStatus"), ::OpenAPI::toJsonValue(m_target_status));
    }
    return obj;
}

QString OAIDescribeSimulationOutput::getArn() const {
    return m_arn;
}
void OAIDescribeSimulationOutput::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDescribeSimulationOutput::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDescribeSimulationOutput::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIDescribeSimulationOutput::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeSimulationOutput::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeSimulationOutput::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeSimulationOutput::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIDescribeSimulationOutput::getDescription() const {
    return m_description;
}
void OAIDescribeSimulationOutput::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDescribeSimulationOutput::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDescribeSimulationOutput::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDescribeSimulationOutput::getExecutionId() const {
    return m_execution_id;
}
void OAIDescribeSimulationOutput::setExecutionId(const QString &execution_id) {
    m_execution_id = execution_id;
    m_execution_id_isSet = true;
}

bool OAIDescribeSimulationOutput::is_execution_id_Set() const{
    return m_execution_id_isSet;
}

bool OAIDescribeSimulationOutput::is_execution_id_Valid() const{
    return m_execution_id_isValid;
}

OAIDescribeSimulationOutput_LiveSimulationState OAIDescribeSimulationOutput::getLiveSimulationState() const {
    return m_live_simulation_state;
}
void OAIDescribeSimulationOutput::setLiveSimulationState(const OAIDescribeSimulationOutput_LiveSimulationState &live_simulation_state) {
    m_live_simulation_state = live_simulation_state;
    m_live_simulation_state_isSet = true;
}

bool OAIDescribeSimulationOutput::is_live_simulation_state_Set() const{
    return m_live_simulation_state_isSet;
}

bool OAIDescribeSimulationOutput::is_live_simulation_state_Valid() const{
    return m_live_simulation_state_isValid;
}

OAIDescribeSimulationOutput_LoggingConfiguration OAIDescribeSimulationOutput::getLoggingConfiguration() const {
    return m_logging_configuration;
}
void OAIDescribeSimulationOutput::setLoggingConfiguration(const OAIDescribeSimulationOutput_LoggingConfiguration &logging_configuration) {
    m_logging_configuration = logging_configuration;
    m_logging_configuration_isSet = true;
}

bool OAIDescribeSimulationOutput::is_logging_configuration_Set() const{
    return m_logging_configuration_isSet;
}

bool OAIDescribeSimulationOutput::is_logging_configuration_Valid() const{
    return m_logging_configuration_isValid;
}

QString OAIDescribeSimulationOutput::getMaximumDuration() const {
    return m_maximum_duration;
}
void OAIDescribeSimulationOutput::setMaximumDuration(const QString &maximum_duration) {
    m_maximum_duration = maximum_duration;
    m_maximum_duration_isSet = true;
}

bool OAIDescribeSimulationOutput::is_maximum_duration_Set() const{
    return m_maximum_duration_isSet;
}

bool OAIDescribeSimulationOutput::is_maximum_duration_Valid() const{
    return m_maximum_duration_isValid;
}

QString OAIDescribeSimulationOutput::getName() const {
    return m_name;
}
void OAIDescribeSimulationOutput::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDescribeSimulationOutput::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDescribeSimulationOutput::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDescribeSimulationOutput::getRoleArn() const {
    return m_role_arn;
}
void OAIDescribeSimulationOutput::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIDescribeSimulationOutput::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIDescribeSimulationOutput::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QString OAIDescribeSimulationOutput::getSchemaError() const {
    return m_schema_error;
}
void OAIDescribeSimulationOutput::setSchemaError(const QString &schema_error) {
    m_schema_error = schema_error;
    m_schema_error_isSet = true;
}

bool OAIDescribeSimulationOutput::is_schema_error_Set() const{
    return m_schema_error_isSet;
}

bool OAIDescribeSimulationOutput::is_schema_error_Valid() const{
    return m_schema_error_isValid;
}

OAIDescribeSimulationOutput_SchemaS3Location OAIDescribeSimulationOutput::getSchemaS3Location() const {
    return m_schema_s3_location;
}
void OAIDescribeSimulationOutput::setSchemaS3Location(const OAIDescribeSimulationOutput_SchemaS3Location &schema_s3_location) {
    m_schema_s3_location = schema_s3_location;
    m_schema_s3_location_isSet = true;
}

bool OAIDescribeSimulationOutput::is_schema_s3_location_Set() const{
    return m_schema_s3_location_isSet;
}

bool OAIDescribeSimulationOutput::is_schema_s3_location_Valid() const{
    return m_schema_s3_location_isValid;
}

OAIS3Location OAIDescribeSimulationOutput::getSnapshotS3Location() const {
    return m_snapshot_s3_location;
}
void OAIDescribeSimulationOutput::setSnapshotS3Location(const OAIS3Location &snapshot_s3_location) {
    m_snapshot_s3_location = snapshot_s3_location;
    m_snapshot_s3_location_isSet = true;
}

bool OAIDescribeSimulationOutput::is_snapshot_s3_location_Set() const{
    return m_snapshot_s3_location_isSet;
}

bool OAIDescribeSimulationOutput::is_snapshot_s3_location_Valid() const{
    return m_snapshot_s3_location_isValid;
}

QString OAIDescribeSimulationOutput::getStartError() const {
    return m_start_error;
}
void OAIDescribeSimulationOutput::setStartError(const QString &start_error) {
    m_start_error = start_error;
    m_start_error_isSet = true;
}

bool OAIDescribeSimulationOutput::is_start_error_Set() const{
    return m_start_error_isSet;
}

bool OAIDescribeSimulationOutput::is_start_error_Valid() const{
    return m_start_error_isValid;
}

OAISimulationStatus OAIDescribeSimulationOutput::getStatus() const {
    return m_status;
}
void OAIDescribeSimulationOutput::setStatus(const OAISimulationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeSimulationOutput::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeSimulationOutput::is_status_Valid() const{
    return m_status_isValid;
}

OAISimulationTargetStatus OAIDescribeSimulationOutput::getTargetStatus() const {
    return m_target_status;
}
void OAIDescribeSimulationOutput::setTargetStatus(const OAISimulationTargetStatus &target_status) {
    m_target_status = target_status;
    m_target_status_isSet = true;
}

bool OAIDescribeSimulationOutput::is_target_status_Set() const{
    return m_target_status_isSet;
}

bool OAIDescribeSimulationOutput::is_target_status_Valid() const{
    return m_target_status_isValid;
}

bool OAIDescribeSimulationOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_simulation_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_s3_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_s3_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeSimulationOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
