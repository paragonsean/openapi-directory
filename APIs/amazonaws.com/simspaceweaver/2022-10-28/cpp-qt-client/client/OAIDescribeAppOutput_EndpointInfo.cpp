/**
 * AWS SimSpace Weaver
 * <p>SimSpace Weaver (SimSpace Weaver) is a managed service that you can use to build and operate large-scale spatial simulations in the Amazon Web Services Cloud. For example, you can create a digital twin of a city, crowd simulations with millions of people and objects, and massively multiplayer games with hundreds of thousands of connected players. For more information about SimSpace Weaver, see the <i> <a href=\"https://docs.aws.amazon.com/simspaceweaver/latest/userguide/\">SimSpace Weaver User Guide</a> </i>.</p> <p>This API reference describes the API operations and data types that you can use to communicate directly with SimSpace Weaver.</p> <p>SimSpace Weaver also provides the SimSpace Weaver app SDK, which you use for app development. The SimSpace Weaver app SDK API reference is included in the SimSpace Weaver app SDK documentation. This documentation is part of the SimSpace Weaver app SDK distributable package.</p>
 *
 * The version of the OpenAPI document: 2022-10-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAppOutput_EndpointInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAppOutput_EndpointInfo::OAIDescribeAppOutput_EndpointInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAppOutput_EndpointInfo::OAIDescribeAppOutput_EndpointInfo() {
    this->initializeModel();
}

OAIDescribeAppOutput_EndpointInfo::~OAIDescribeAppOutput_EndpointInfo() {}

void OAIDescribeAppOutput_EndpointInfo::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_ingress_port_mappings_isSet = false;
    m_ingress_port_mappings_isValid = false;
}

void OAIDescribeAppOutput_EndpointInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAppOutput_EndpointInfo::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("Address")]);
    m_address_isSet = !json[QString("Address")].isNull() && m_address_isValid;

    m_ingress_port_mappings_isValid = ::OpenAPI::fromJsonValue(m_ingress_port_mappings, json[QString("IngressPortMappings")]);
    m_ingress_port_mappings_isSet = !json[QString("IngressPortMappings")].isNull() && m_ingress_port_mappings_isValid;
}

QString OAIDescribeAppOutput_EndpointInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAppOutput_EndpointInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("Address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_ingress_port_mappings.isSet()) {
        obj.insert(QString("IngressPortMappings"), ::OpenAPI::toJsonValue(m_ingress_port_mappings));
    }
    return obj;
}

QString OAIDescribeAppOutput_EndpointInfo::getAddress() const {
    return m_address;
}
void OAIDescribeAppOutput_EndpointInfo::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIDescribeAppOutput_EndpointInfo::is_address_Set() const{
    return m_address_isSet;
}

bool OAIDescribeAppOutput_EndpointInfo::is_address_Valid() const{
    return m_address_isValid;
}

QList OAIDescribeAppOutput_EndpointInfo::getIngressPortMappings() const {
    return m_ingress_port_mappings;
}
void OAIDescribeAppOutput_EndpointInfo::setIngressPortMappings(const QList &ingress_port_mappings) {
    m_ingress_port_mappings = ingress_port_mappings;
    m_ingress_port_mappings_isSet = true;
}

bool OAIDescribeAppOutput_EndpointInfo::is_ingress_port_mappings_Set() const{
    return m_ingress_port_mappings_isSet;
}

bool OAIDescribeAppOutput_EndpointInfo::is_ingress_port_mappings_Valid() const{
    return m_ingress_port_mappings_isValid;
}

bool OAIDescribeAppOutput_EndpointInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingress_port_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAppOutput_EndpointInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
