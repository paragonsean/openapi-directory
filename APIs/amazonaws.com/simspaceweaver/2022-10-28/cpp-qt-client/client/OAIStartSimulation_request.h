/**
 * AWS SimSpace Weaver
 * <p>SimSpace Weaver (SimSpace Weaver) is a managed service that you can use to build and operate large-scale spatial simulations in the Amazon Web Services Cloud. For example, you can create a digital twin of a city, crowd simulations with millions of people and objects, and massively multiplayer games with hundreds of thousands of connected players. For more information about SimSpace Weaver, see the <i> <a href=\"https://docs.aws.amazon.com/simspaceweaver/latest/userguide/\">SimSpace Weaver User Guide</a> </i>.</p> <p>This API reference describes the API operations and data types that you can use to communicate directly with SimSpace Weaver.</p> <p>SimSpace Weaver also provides the SimSpace Weaver app SDK, which you use for app development. The SimSpace Weaver app SDK API reference is included in the SimSpace Weaver app SDK documentation. This documentation is part of the SimSpace Weaver app SDK distributable package.</p>
 *
 * The version of the OpenAPI document: 2022-10-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStartSimulation_request.h
 *
 * 
 */

#ifndef OAIStartSimulation_request_H
#define OAIStartSimulation_request_H

#include <QJsonObject>

#include "OAIStartSimulation_request_SchemaS3Location.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIStartSimulation_request_SchemaS3Location;

class OAIStartSimulation_request : public OAIObject {
public:
    OAIStartSimulation_request();
    OAIStartSimulation_request(QString json);
    ~OAIStartSimulation_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getClientToken() const;
    void setClientToken(const QString &client_token);
    bool is_client_token_Set() const;
    bool is_client_token_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getMaximumDuration() const;
    void setMaximumDuration(const QString &maximum_duration);
    bool is_maximum_duration_Set() const;
    bool is_maximum_duration_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getRoleArn() const;
    void setRoleArn(const QString &role_arn);
    bool is_role_arn_Set() const;
    bool is_role_arn_Valid() const;

    OAIStartSimulation_request_SchemaS3Location getSchemaS3Location() const;
    void setSchemaS3Location(const OAIStartSimulation_request_SchemaS3Location &schema_s3_location);
    bool is_schema_s3_location_Set() const;
    bool is_schema_s3_location_Valid() const;

    OAIStartSimulation_request_SchemaS3Location getSnapshotS3Location() const;
    void setSnapshotS3Location(const OAIStartSimulation_request_SchemaS3Location &snapshot_s3_location);
    bool is_snapshot_s3_location_Set() const;
    bool is_snapshot_s3_location_Valid() const;

    QMap<QString, QString> getTags() const;
    void setTags(const QMap<QString, QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_client_token;
    bool m_client_token_isSet;
    bool m_client_token_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_maximum_duration;
    bool m_maximum_duration_isSet;
    bool m_maximum_duration_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_role_arn;
    bool m_role_arn_isSet;
    bool m_role_arn_isValid;

    OAIStartSimulation_request_SchemaS3Location m_schema_s3_location;
    bool m_schema_s3_location_isSet;
    bool m_schema_s3_location_isValid;

    OAIStartSimulation_request_SchemaS3Location m_snapshot_s3_location;
    bool m_snapshot_s3_location_isSet;
    bool m_snapshot_s3_location_isValid;

    QMap<QString, QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStartSimulation_request)

#endif // OAIStartSimulation_request_H
