/**
 * AWS SimSpace Weaver
 * <p>SimSpace Weaver (SimSpace Weaver) is a managed service that you can use to build and operate large-scale spatial simulations in the Amazon Web Services Cloud. For example, you can create a digital twin of a city, crowd simulations with millions of people and objects, and massively multiplayer games with hundreds of thousands of connected players. For more information about SimSpace Weaver, see the <i> <a href=\"https://docs.aws.amazon.com/simspaceweaver/latest/userguide/\">SimSpace Weaver User Guide</a> </i>.</p> <p>This API reference describes the API operations and data types that you can use to communicate directly with SimSpace Weaver.</p> <p>SimSpace Weaver also provides the SimSpace Weaver app SDK, which you use for app development. The SimSpace Weaver app SDK API reference is included in the SimSpace Weaver app SDK documentation. This documentation is part of the SimSpace Weaver app SDK distributable package.</p>
 *
 * The version of the OpenAPI document: 2022-10-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartAppOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartAppOutput::OAIStartAppOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartAppOutput::OAIStartAppOutput() {
    this->initializeModel();
}

OAIStartAppOutput::~OAIStartAppOutput() {}

void OAIStartAppOutput::initializeModel() {

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_simulation_isSet = false;
    m_simulation_isValid = false;
}

void OAIStartAppOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartAppOutput::fromJsonObject(QJsonObject json) {

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("Domain")]);
    m_domain_isSet = !json[QString("Domain")].isNull() && m_domain_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_simulation_isValid = ::OpenAPI::fromJsonValue(m_simulation, json[QString("Simulation")]);
    m_simulation_isSet = !json[QString("Simulation")].isNull() && m_simulation_isValid;
}

QString OAIStartAppOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartAppOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_isSet) {
        obj.insert(QString("Domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_simulation_isSet) {
        obj.insert(QString("Simulation"), ::OpenAPI::toJsonValue(m_simulation));
    }
    return obj;
}

QString OAIStartAppOutput::getDomain() const {
    return m_domain;
}
void OAIStartAppOutput::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIStartAppOutput::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIStartAppOutput::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIStartAppOutput::getName() const {
    return m_name;
}
void OAIStartAppOutput::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStartAppOutput::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStartAppOutput::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIStartAppOutput::getSimulation() const {
    return m_simulation;
}
void OAIStartAppOutput::setSimulation(const QString &simulation) {
    m_simulation = simulation;
    m_simulation_isSet = true;
}

bool OAIStartAppOutput::is_simulation_Set() const{
    return m_simulation_isSet;
}

bool OAIStartAppOutput::is_simulation_Valid() const{
    return m_simulation_isValid;
}

bool OAIStartAppOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_simulation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartAppOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
