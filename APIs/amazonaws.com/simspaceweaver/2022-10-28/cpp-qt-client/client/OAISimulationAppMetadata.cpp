/**
 * AWS SimSpace Weaver
 * <p>SimSpace Weaver (SimSpace Weaver) is a managed service that you can use to build and operate large-scale spatial simulations in the Amazon Web Services Cloud. For example, you can create a digital twin of a city, crowd simulations with millions of people and objects, and massively multiplayer games with hundreds of thousands of connected players. For more information about SimSpace Weaver, see the <i> <a href=\"https://docs.aws.amazon.com/simspaceweaver/latest/userguide/\">SimSpace Weaver User Guide</a> </i>.</p> <p>This API reference describes the API operations and data types that you can use to communicate directly with SimSpace Weaver.</p> <p>SimSpace Weaver also provides the SimSpace Weaver app SDK, which you use for app development. The SimSpace Weaver app SDK API reference is included in the SimSpace Weaver app SDK documentation. This documentation is part of the SimSpace Weaver app SDK distributable package.</p>
 *
 * The version of the OpenAPI document: 2022-10-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISimulationAppMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISimulationAppMetadata::OAISimulationAppMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISimulationAppMetadata::OAISimulationAppMetadata() {
    this->initializeModel();
}

OAISimulationAppMetadata::~OAISimulationAppMetadata() {}

void OAISimulationAppMetadata::initializeModel() {

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_simulation_isSet = false;
    m_simulation_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_target_status_isSet = false;
    m_target_status_isValid = false;
}

void OAISimulationAppMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISimulationAppMetadata::fromJsonObject(QJsonObject json) {

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("Domain")]);
    m_domain_isSet = !json[QString("Domain")].isNull() && m_domain_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_simulation_isValid = ::OpenAPI::fromJsonValue(m_simulation, json[QString("Simulation")]);
    m_simulation_isSet = !json[QString("Simulation")].isNull() && m_simulation_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_target_status_isValid = ::OpenAPI::fromJsonValue(m_target_status, json[QString("TargetStatus")]);
    m_target_status_isSet = !json[QString("TargetStatus")].isNull() && m_target_status_isValid;
}

QString OAISimulationAppMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISimulationAppMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_isSet) {
        obj.insert(QString("Domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_simulation_isSet) {
        obj.insert(QString("Simulation"), ::OpenAPI::toJsonValue(m_simulation));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_target_status.isSet()) {
        obj.insert(QString("TargetStatus"), ::OpenAPI::toJsonValue(m_target_status));
    }
    return obj;
}

QString OAISimulationAppMetadata::getDomain() const {
    return m_domain;
}
void OAISimulationAppMetadata::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAISimulationAppMetadata::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAISimulationAppMetadata::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAISimulationAppMetadata::getName() const {
    return m_name;
}
void OAISimulationAppMetadata::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISimulationAppMetadata::is_name_Set() const{
    return m_name_isSet;
}

bool OAISimulationAppMetadata::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISimulationAppMetadata::getSimulation() const {
    return m_simulation;
}
void OAISimulationAppMetadata::setSimulation(const QString &simulation) {
    m_simulation = simulation;
    m_simulation_isSet = true;
}

bool OAISimulationAppMetadata::is_simulation_Set() const{
    return m_simulation_isSet;
}

bool OAISimulationAppMetadata::is_simulation_Valid() const{
    return m_simulation_isValid;
}

OAISimulationAppStatus OAISimulationAppMetadata::getStatus() const {
    return m_status;
}
void OAISimulationAppMetadata::setStatus(const OAISimulationAppStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISimulationAppMetadata::is_status_Set() const{
    return m_status_isSet;
}

bool OAISimulationAppMetadata::is_status_Valid() const{
    return m_status_isValid;
}

OAISimulationAppTargetStatus OAISimulationAppMetadata::getTargetStatus() const {
    return m_target_status;
}
void OAISimulationAppMetadata::setTargetStatus(const OAISimulationAppTargetStatus &target_status) {
    m_target_status = target_status;
    m_target_status_isSet = true;
}

bool OAISimulationAppMetadata::is_target_status_Set() const{
    return m_target_status_isSet;
}

bool OAISimulationAppMetadata::is_target_status_Valid() const{
    return m_target_status_isValid;
}

bool OAISimulationAppMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_simulation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISimulationAppMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
