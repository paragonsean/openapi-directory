/**
 * AWS SimSpace Weaver
 * <p>SimSpace Weaver (SimSpace Weaver) is a managed service that you can use to build and operate large-scale spatial simulations in the Amazon Web Services Cloud. For example, you can create a digital twin of a city, crowd simulations with millions of people and objects, and massively multiplayer games with hundreds of thousands of connected players. For more information about SimSpace Weaver, see the <i> <a href=\"https://docs.aws.amazon.com/simspaceweaver/latest/userguide/\">SimSpace Weaver User Guide</a> </i>.</p> <p>This API reference describes the API operations and data types that you can use to communicate directly with SimSpace Weaver.</p> <p>SimSpace Weaver also provides the SimSpace Weaver app SDK, which you use for app development. The SimSpace Weaver app SDK API reference is included in the SimSpace Weaver app SDK documentation. This documentation is part of the SimSpace Weaver app SDK distributable package.</p>
 *
 * The version of the OpenAPI document: 2022-10-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeSimulationOutput.h
 *
 * 
 */

#ifndef OAIDescribeSimulationOutput_H
#define OAIDescribeSimulationOutput_H

#include <QJsonObject>

#include "OAIDescribeSimulationOutput_LiveSimulationState.h"
#include "OAIDescribeSimulationOutput_LoggingConfiguration.h"
#include "OAIDescribeSimulationOutput_SchemaS3Location.h"
#include "OAIS3Location.h"
#include "OAISimulationStatus.h"
#include "OAISimulationTargetStatus.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDescribeSimulationOutput_LiveSimulationState;
class OAIDescribeSimulationOutput_LoggingConfiguration;
class OAIDescribeSimulationOutput_SchemaS3Location;
class OAIS3Location;

class OAIDescribeSimulationOutput : public OAIObject {
public:
    OAIDescribeSimulationOutput();
    OAIDescribeSimulationOutput(QString json);
    ~OAIDescribeSimulationOutput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QDateTime getCreationTime() const;
    void setCreationTime(const QDateTime &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getExecutionId() const;
    void setExecutionId(const QString &execution_id);
    bool is_execution_id_Set() const;
    bool is_execution_id_Valid() const;

    OAIDescribeSimulationOutput_LiveSimulationState getLiveSimulationState() const;
    void setLiveSimulationState(const OAIDescribeSimulationOutput_LiveSimulationState &live_simulation_state);
    bool is_live_simulation_state_Set() const;
    bool is_live_simulation_state_Valid() const;

    OAIDescribeSimulationOutput_LoggingConfiguration getLoggingConfiguration() const;
    void setLoggingConfiguration(const OAIDescribeSimulationOutput_LoggingConfiguration &logging_configuration);
    bool is_logging_configuration_Set() const;
    bool is_logging_configuration_Valid() const;

    QString getMaximumDuration() const;
    void setMaximumDuration(const QString &maximum_duration);
    bool is_maximum_duration_Set() const;
    bool is_maximum_duration_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getRoleArn() const;
    void setRoleArn(const QString &role_arn);
    bool is_role_arn_Set() const;
    bool is_role_arn_Valid() const;

    QString getSchemaError() const;
    void setSchemaError(const QString &schema_error);
    bool is_schema_error_Set() const;
    bool is_schema_error_Valid() const;

    OAIDescribeSimulationOutput_SchemaS3Location getSchemaS3Location() const;
    void setSchemaS3Location(const OAIDescribeSimulationOutput_SchemaS3Location &schema_s3_location);
    bool is_schema_s3_location_Set() const;
    bool is_schema_s3_location_Valid() const;

    OAIS3Location getSnapshotS3Location() const;
    void setSnapshotS3Location(const OAIS3Location &snapshot_s3_location);
    bool is_snapshot_s3_location_Set() const;
    bool is_snapshot_s3_location_Valid() const;

    QString getStartError() const;
    void setStartError(const QString &start_error);
    bool is_start_error_Set() const;
    bool is_start_error_Valid() const;

    OAISimulationStatus getStatus() const;
    void setStatus(const OAISimulationStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAISimulationTargetStatus getTargetStatus() const;
    void setTargetStatus(const OAISimulationTargetStatus &target_status);
    bool is_target_status_Set() const;
    bool is_target_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QDateTime m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_execution_id;
    bool m_execution_id_isSet;
    bool m_execution_id_isValid;

    OAIDescribeSimulationOutput_LiveSimulationState m_live_simulation_state;
    bool m_live_simulation_state_isSet;
    bool m_live_simulation_state_isValid;

    OAIDescribeSimulationOutput_LoggingConfiguration m_logging_configuration;
    bool m_logging_configuration_isSet;
    bool m_logging_configuration_isValid;

    QString m_maximum_duration;
    bool m_maximum_duration_isSet;
    bool m_maximum_duration_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_role_arn;
    bool m_role_arn_isSet;
    bool m_role_arn_isValid;

    QString m_schema_error;
    bool m_schema_error_isSet;
    bool m_schema_error_isValid;

    OAIDescribeSimulationOutput_SchemaS3Location m_schema_s3_location;
    bool m_schema_s3_location_isSet;
    bool m_schema_s3_location_isValid;

    OAIS3Location m_snapshot_s3_location;
    bool m_snapshot_s3_location_isSet;
    bool m_snapshot_s3_location_isValid;

    QString m_start_error;
    bool m_start_error_isSet;
    bool m_start_error_isValid;

    OAISimulationStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAISimulationTargetStatus m_target_status;
    bool m_target_status_isSet;
    bool m_target_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeSimulationOutput)

#endif // OAIDescribeSimulationOutput_H
