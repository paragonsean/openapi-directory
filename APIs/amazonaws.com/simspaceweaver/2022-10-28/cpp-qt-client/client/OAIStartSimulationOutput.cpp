/**
 * AWS SimSpace Weaver
 * <p>SimSpace Weaver (SimSpace Weaver) is a managed service that you can use to build and operate large-scale spatial simulations in the Amazon Web Services Cloud. For example, you can create a digital twin of a city, crowd simulations with millions of people and objects, and massively multiplayer games with hundreds of thousands of connected players. For more information about SimSpace Weaver, see the <i> <a href=\"https://docs.aws.amazon.com/simspaceweaver/latest/userguide/\">SimSpace Weaver User Guide</a> </i>.</p> <p>This API reference describes the API operations and data types that you can use to communicate directly with SimSpace Weaver.</p> <p>SimSpace Weaver also provides the SimSpace Weaver app SDK, which you use for app development. The SimSpace Weaver app SDK API reference is included in the SimSpace Weaver app SDK documentation. This documentation is part of the SimSpace Weaver app SDK distributable package.</p>
 *
 * The version of the OpenAPI document: 2022-10-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartSimulationOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartSimulationOutput::OAIStartSimulationOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartSimulationOutput::OAIStartSimulationOutput() {
    this->initializeModel();
}

OAIStartSimulationOutput::~OAIStartSimulationOutput() {}

void OAIStartSimulationOutput::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_execution_id_isSet = false;
    m_execution_id_isValid = false;
}

void OAIStartSimulationOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartSimulationOutput::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_execution_id_isValid = ::OpenAPI::fromJsonValue(m_execution_id, json[QString("ExecutionId")]);
    m_execution_id_isSet = !json[QString("ExecutionId")].isNull() && m_execution_id_isValid;
}

QString OAIStartSimulationOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartSimulationOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_execution_id_isSet) {
        obj.insert(QString("ExecutionId"), ::OpenAPI::toJsonValue(m_execution_id));
    }
    return obj;
}

QString OAIStartSimulationOutput::getArn() const {
    return m_arn;
}
void OAIStartSimulationOutput::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIStartSimulationOutput::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIStartSimulationOutput::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIStartSimulationOutput::getCreationTime() const {
    return m_creation_time;
}
void OAIStartSimulationOutput::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIStartSimulationOutput::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIStartSimulationOutput::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIStartSimulationOutput::getExecutionId() const {
    return m_execution_id;
}
void OAIStartSimulationOutput::setExecutionId(const QString &execution_id) {
    m_execution_id = execution_id;
    m_execution_id_isSet = true;
}

bool OAIStartSimulationOutput::is_execution_id_Set() const{
    return m_execution_id_isSet;
}

bool OAIStartSimulationOutput::is_execution_id_Valid() const{
    return m_execution_id_isValid;
}

bool OAIStartSimulationOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartSimulationOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
