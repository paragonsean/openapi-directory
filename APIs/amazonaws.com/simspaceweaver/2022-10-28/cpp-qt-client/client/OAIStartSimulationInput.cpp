/**
 * AWS SimSpace Weaver
 * <p>SimSpace Weaver (SimSpace Weaver) is a managed service that you can use to build and operate large-scale spatial simulations in the Amazon Web Services Cloud. For example, you can create a digital twin of a city, crowd simulations with millions of people and objects, and massively multiplayer games with hundreds of thousands of connected players. For more information about SimSpace Weaver, see the <i> <a href=\"https://docs.aws.amazon.com/simspaceweaver/latest/userguide/\">SimSpace Weaver User Guide</a> </i>.</p> <p>This API reference describes the API operations and data types that you can use to communicate directly with SimSpace Weaver.</p> <p>SimSpace Weaver also provides the SimSpace Weaver app SDK, which you use for app development. The SimSpace Weaver app SDK API reference is included in the SimSpace Weaver app SDK documentation. This documentation is part of the SimSpace Weaver app SDK distributable package.</p>
 *
 * The version of the OpenAPI document: 2022-10-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartSimulationInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartSimulationInput::OAIStartSimulationInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartSimulationInput::OAIStartSimulationInput() {
    this->initializeModel();
}

OAIStartSimulationInput::~OAIStartSimulationInput() {}

void OAIStartSimulationInput::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_maximum_duration_isSet = false;
    m_maximum_duration_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_schema_s3_location_isSet = false;
    m_schema_s3_location_isValid = false;

    m_snapshot_s3_location_isSet = false;
    m_snapshot_s3_location_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIStartSimulationInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartSimulationInput::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_maximum_duration_isValid = ::OpenAPI::fromJsonValue(m_maximum_duration, json[QString("MaximumDuration")]);
    m_maximum_duration_isSet = !json[QString("MaximumDuration")].isNull() && m_maximum_duration_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_schema_s3_location_isValid = ::OpenAPI::fromJsonValue(m_schema_s3_location, json[QString("SchemaS3Location")]);
    m_schema_s3_location_isSet = !json[QString("SchemaS3Location")].isNull() && m_schema_s3_location_isValid;

    m_snapshot_s3_location_isValid = ::OpenAPI::fromJsonValue(m_snapshot_s3_location, json[QString("SnapshotS3Location")]);
    m_snapshot_s3_location_isSet = !json[QString("SnapshotS3Location")].isNull() && m_snapshot_s3_location_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIStartSimulationInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartSimulationInput::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_maximum_duration_isSet) {
        obj.insert(QString("MaximumDuration"), ::OpenAPI::toJsonValue(m_maximum_duration));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_schema_s3_location.isSet()) {
        obj.insert(QString("SchemaS3Location"), ::OpenAPI::toJsonValue(m_schema_s3_location));
    }
    if (m_snapshot_s3_location.isSet()) {
        obj.insert(QString("SnapshotS3Location"), ::OpenAPI::toJsonValue(m_snapshot_s3_location));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIStartSimulationInput::getClientToken() const {
    return m_client_token;
}
void OAIStartSimulationInput::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIStartSimulationInput::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIStartSimulationInput::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAIStartSimulationInput::getDescription() const {
    return m_description;
}
void OAIStartSimulationInput::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIStartSimulationInput::is_description_Set() const{
    return m_description_isSet;
}

bool OAIStartSimulationInput::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIStartSimulationInput::getMaximumDuration() const {
    return m_maximum_duration;
}
void OAIStartSimulationInput::setMaximumDuration(const QString &maximum_duration) {
    m_maximum_duration = maximum_duration;
    m_maximum_duration_isSet = true;
}

bool OAIStartSimulationInput::is_maximum_duration_Set() const{
    return m_maximum_duration_isSet;
}

bool OAIStartSimulationInput::is_maximum_duration_Valid() const{
    return m_maximum_duration_isValid;
}

QString OAIStartSimulationInput::getName() const {
    return m_name;
}
void OAIStartSimulationInput::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStartSimulationInput::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStartSimulationInput::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIStartSimulationInput::getRoleArn() const {
    return m_role_arn;
}
void OAIStartSimulationInput::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIStartSimulationInput::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIStartSimulationInput::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

OAIStartSimulationInput_SchemaS3Location OAIStartSimulationInput::getSchemaS3Location() const {
    return m_schema_s3_location;
}
void OAIStartSimulationInput::setSchemaS3Location(const OAIStartSimulationInput_SchemaS3Location &schema_s3_location) {
    m_schema_s3_location = schema_s3_location;
    m_schema_s3_location_isSet = true;
}

bool OAIStartSimulationInput::is_schema_s3_location_Set() const{
    return m_schema_s3_location_isSet;
}

bool OAIStartSimulationInput::is_schema_s3_location_Valid() const{
    return m_schema_s3_location_isValid;
}

OAIStartSimulationInput_SnapshotS3Location OAIStartSimulationInput::getSnapshotS3Location() const {
    return m_snapshot_s3_location;
}
void OAIStartSimulationInput::setSnapshotS3Location(const OAIStartSimulationInput_SnapshotS3Location &snapshot_s3_location) {
    m_snapshot_s3_location = snapshot_s3_location;
    m_snapshot_s3_location_isSet = true;
}

bool OAIStartSimulationInput::is_snapshot_s3_location_Set() const{
    return m_snapshot_s3_location_isSet;
}

bool OAIStartSimulationInput::is_snapshot_s3_location_Valid() const{
    return m_snapshot_s3_location_isValid;
}

QMap OAIStartSimulationInput::getTags() const {
    return m_tags;
}
void OAIStartSimulationInput::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIStartSimulationInput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIStartSimulationInput::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIStartSimulationInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_s3_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_s3_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartSimulationInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_role_arn_isValid && true;
}

} // namespace OpenAPI
