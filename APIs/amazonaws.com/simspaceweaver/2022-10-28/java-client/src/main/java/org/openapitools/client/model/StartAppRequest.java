/*
 * AWS SimSpace Weaver
 * <p>SimSpace Weaver (SimSpace Weaver) is a managed service that you can use to build and operate large-scale spatial simulations in the Amazon Web Services Cloud. For example, you can create a digital twin of a city, crowd simulations with millions of people and objects, and massively multiplayer games with hundreds of thousands of connected players. For more information about SimSpace Weaver, see the <i> <a href=\"https://docs.aws.amazon.com/simspaceweaver/latest/userguide/\">SimSpace Weaver User Guide</a> </i>.</p> <p>This API reference describes the API operations and data types that you can use to communicate directly with SimSpace Weaver.</p> <p>SimSpace Weaver also provides the SimSpace Weaver app SDK, which you use for app development. The SimSpace Weaver app SDK API reference is included in the SimSpace Weaver app SDK documentation. This documentation is part of the SimSpace Weaver app SDK distributable package.</p>
 *
 * The version of the OpenAPI document: 2022-10-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.StartAppRequestLaunchOverrides;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartAppRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:46.025237-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartAppRequest {
  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "ClientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DOMAIN = "Domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_LAUNCH_OVERRIDES = "LaunchOverrides";
  @SerializedName(SERIALIZED_NAME_LAUNCH_OVERRIDES)
  private StartAppRequestLaunchOverrides launchOverrides;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SIMULATION = "Simulation";
  @SerializedName(SERIALIZED_NAME_SIMULATION)
  private String simulation;

  public StartAppRequest() {
  }

  public StartAppRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * A value that you provide to ensure that repeated calls to this API operation using the same parameters complete only once. A &lt;code&gt;ClientToken&lt;/code&gt; is also known as an &lt;i&gt;idempotency token&lt;/i&gt;. A &lt;code&gt;ClientToken&lt;/code&gt; expires after 24 hours.
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public StartAppRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the app.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public StartAppRequest domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * The name of the domain of the app.
   * @return domain
   */
  @javax.annotation.Nonnull
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public StartAppRequest launchOverrides(StartAppRequestLaunchOverrides launchOverrides) {
    this.launchOverrides = launchOverrides;
    return this;
  }

  /**
   * Get launchOverrides
   * @return launchOverrides
   */
  @javax.annotation.Nullable
  public StartAppRequestLaunchOverrides getLaunchOverrides() {
    return launchOverrides;
  }

  public void setLaunchOverrides(StartAppRequestLaunchOverrides launchOverrides) {
    this.launchOverrides = launchOverrides;
  }


  public StartAppRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the app.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public StartAppRequest simulation(String simulation) {
    this.simulation = simulation;
    return this;
  }

  /**
   * The name of the simulation of the app.
   * @return simulation
   */
  @javax.annotation.Nonnull
  public String getSimulation() {
    return simulation;
  }

  public void setSimulation(String simulation) {
    this.simulation = simulation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartAppRequest startAppRequest = (StartAppRequest) o;
    return Objects.equals(this.clientToken, startAppRequest.clientToken) &&
        Objects.equals(this.description, startAppRequest.description) &&
        Objects.equals(this.domain, startAppRequest.domain) &&
        Objects.equals(this.launchOverrides, startAppRequest.launchOverrides) &&
        Objects.equals(this.name, startAppRequest.name) &&
        Objects.equals(this.simulation, startAppRequest.simulation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientToken, description, domain, launchOverrides, name, simulation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartAppRequest {\n");
    sb.append("    clientToken: ").append("*").append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    launchOverrides: ").append(toIndentedString(launchOverrides)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    simulation: ").append(toIndentedString(simulation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ClientToken");
    openapiFields.add("Description");
    openapiFields.add("Domain");
    openapiFields.add("LaunchOverrides");
    openapiFields.add("Name");
    openapiFields.add("Simulation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Domain");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("Simulation");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartAppRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartAppRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartAppRequest is not found in the empty JSON string", StartAppRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartAppRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartAppRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartAppRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ClientToken") != null && !jsonObj.get("ClientToken").isJsonNull()) && !jsonObj.get("ClientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientToken").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if (!jsonObj.get("Domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Domain").toString()));
      }
      // validate the optional field `LaunchOverrides`
      if (jsonObj.get("LaunchOverrides") != null && !jsonObj.get("LaunchOverrides").isJsonNull()) {
        StartAppRequestLaunchOverrides.validateJsonElement(jsonObj.get("LaunchOverrides"));
      }
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if (!jsonObj.get("Simulation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Simulation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Simulation").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartAppRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartAppRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartAppRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartAppRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartAppRequest>() {
           @Override
           public void write(JsonWriter out, StartAppRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartAppRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartAppRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartAppRequest
   * @throws IOException if the JSON string is invalid with respect to StartAppRequest
   */
  public static StartAppRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartAppRequest.class);
  }

  /**
   * Convert an instance of StartAppRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

