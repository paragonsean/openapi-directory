/*
 * AWS SimSpace Weaver
 * <p>SimSpace Weaver (SimSpace Weaver) is a managed service that you can use to build and operate large-scale spatial simulations in the Amazon Web Services Cloud. For example, you can create a digital twin of a city, crowd simulations with millions of people and objects, and massively multiplayer games with hundreds of thousands of connected players. For more information about SimSpace Weaver, see the <i> <a href=\"https://docs.aws.amazon.com/simspaceweaver/latest/userguide/\">SimSpace Weaver User Guide</a> </i>.</p> <p>This API reference describes the API operations and data types that you can use to communicate directly with SimSpace Weaver.</p> <p>SimSpace Weaver also provides the SimSpace Weaver app SDK, which you use for app development. The SimSpace Weaver app SDK API reference is included in the SimSpace Weaver app SDK documentation. This documentation is part of the SimSpace Weaver app SDK distributable package.</p>
 *
 * The version of the OpenAPI document: 2022-10-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A collection of TCP/UDP ports for a custom or service app.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:46.025237-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SimulationAppPortMapping {
  public static final String SERIALIZED_NAME_ACTUAL = "Actual";
  @SerializedName(SERIALIZED_NAME_ACTUAL)
  private Integer actual;

  public static final String SERIALIZED_NAME_DECLARED = "Declared";
  @SerializedName(SERIALIZED_NAME_DECLARED)
  private Integer declared;

  public SimulationAppPortMapping() {
  }

  public SimulationAppPortMapping actual(Integer actual) {
    this.actual = actual;
    return this;
  }

  /**
   * Get actual
   * @return actual
   */
  @javax.annotation.Nullable
  public Integer getActual() {
    return actual;
  }

  public void setActual(Integer actual) {
    this.actual = actual;
  }


  public SimulationAppPortMapping declared(Integer declared) {
    this.declared = declared;
    return this;
  }

  /**
   * Get declared
   * @return declared
   */
  @javax.annotation.Nullable
  public Integer getDeclared() {
    return declared;
  }

  public void setDeclared(Integer declared) {
    this.declared = declared;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimulationAppPortMapping simulationAppPortMapping = (SimulationAppPortMapping) o;
    return Objects.equals(this.actual, simulationAppPortMapping.actual) &&
        Objects.equals(this.declared, simulationAppPortMapping.declared);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actual, declared);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimulationAppPortMapping {\n");
    sb.append("    actual: ").append(toIndentedString(actual)).append("\n");
    sb.append("    declared: ").append(toIndentedString(declared)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Actual");
    openapiFields.add("Declared");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SimulationAppPortMapping
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SimulationAppPortMapping.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SimulationAppPortMapping is not found in the empty JSON string", SimulationAppPortMapping.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SimulationAppPortMapping.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SimulationAppPortMapping` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Actual`
      if (jsonObj.get("Actual") != null && !jsonObj.get("Actual").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Actual"));
      }
      // validate the optional field `Declared`
      if (jsonObj.get("Declared") != null && !jsonObj.get("Declared").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Declared"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SimulationAppPortMapping.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SimulationAppPortMapping' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SimulationAppPortMapping> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SimulationAppPortMapping.class));

       return (TypeAdapter<T>) new TypeAdapter<SimulationAppPortMapping>() {
           @Override
           public void write(JsonWriter out, SimulationAppPortMapping value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SimulationAppPortMapping read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SimulationAppPortMapping given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SimulationAppPortMapping
   * @throws IOException if the JSON string is invalid with respect to SimulationAppPortMapping
   */
  public static SimulationAppPortMapping fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SimulationAppPortMapping.class);
  }

  /**
   * Convert an instance of SimulationAppPortMapping to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

