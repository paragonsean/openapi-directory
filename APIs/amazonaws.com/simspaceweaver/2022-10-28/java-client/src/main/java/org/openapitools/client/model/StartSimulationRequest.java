/*
 * AWS SimSpace Weaver
 * <p>SimSpace Weaver (SimSpace Weaver) is a managed service that you can use to build and operate large-scale spatial simulations in the Amazon Web Services Cloud. For example, you can create a digital twin of a city, crowd simulations with millions of people and objects, and massively multiplayer games with hundreds of thousands of connected players. For more information about SimSpace Weaver, see the <i> <a href=\"https://docs.aws.amazon.com/simspaceweaver/latest/userguide/\">SimSpace Weaver User Guide</a> </i>.</p> <p>This API reference describes the API operations and data types that you can use to communicate directly with SimSpace Weaver.</p> <p>SimSpace Weaver also provides the SimSpace Weaver app SDK, which you use for app development. The SimSpace Weaver app SDK API reference is included in the SimSpace Weaver app SDK documentation. This documentation is part of the SimSpace Weaver app SDK distributable package.</p>
 *
 * The version of the OpenAPI document: 2022-10-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.StartSimulationRequestSchemaS3Location;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartSimulationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:46.025237-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartSimulationRequest {
  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "ClientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_MAXIMUM_DURATION = "MaximumDuration";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_DURATION)
  private String maximumDuration;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ROLE_ARN = "RoleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_SCHEMA_S3_LOCATION = "SchemaS3Location";
  @SerializedName(SERIALIZED_NAME_SCHEMA_S3_LOCATION)
  private StartSimulationRequestSchemaS3Location schemaS3Location;

  public static final String SERIALIZED_NAME_SNAPSHOT_S3_LOCATION = "SnapshotS3Location";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_S3_LOCATION)
  private StartSimulationRequestSchemaS3Location snapshotS3Location;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public StartSimulationRequest() {
  }

  public StartSimulationRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * A value that you provide to ensure that repeated calls to this API operation using the same parameters complete only once. A &lt;code&gt;ClientToken&lt;/code&gt; is also known as an &lt;i&gt;idempotency token&lt;/i&gt;. A &lt;code&gt;ClientToken&lt;/code&gt; expires after 24 hours.
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public StartSimulationRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the simulation.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public StartSimulationRequest maximumDuration(String maximumDuration) {
    this.maximumDuration = maximumDuration;
    return this;
  }

  /**
   * The maximum running time of the simulation, specified as a number of minutes (m or M), hours (h or H), or days (d or D). The simulation stops when it reaches this limit. The maximum value is &lt;code&gt;14D&lt;/code&gt;, or its equivalent in the other units. The default value is &lt;code&gt;14D&lt;/code&gt;. A value equivalent to &lt;code&gt;0&lt;/code&gt; makes the simulation immediately transition to &lt;code&gt;Stopping&lt;/code&gt; as soon as it reaches &lt;code&gt;Started&lt;/code&gt;.
   * @return maximumDuration
   */
  @javax.annotation.Nullable
  public String getMaximumDuration() {
    return maximumDuration;
  }

  public void setMaximumDuration(String maximumDuration) {
    this.maximumDuration = maximumDuration;
  }


  public StartSimulationRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the simulation.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public StartSimulationRequest roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that the simulation assumes to perform actions. For more information about ARNs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs)&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;. For more information about IAM roles, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html\&quot;&gt;IAM roles&lt;/a&gt; in the &lt;i&gt;Identity and Access Management User Guide&lt;/i&gt;.
   * @return roleArn
   */
  @javax.annotation.Nonnull
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public StartSimulationRequest schemaS3Location(StartSimulationRequestSchemaS3Location schemaS3Location) {
    this.schemaS3Location = schemaS3Location;
    return this;
  }

  /**
   * Get schemaS3Location
   * @return schemaS3Location
   */
  @javax.annotation.Nullable
  public StartSimulationRequestSchemaS3Location getSchemaS3Location() {
    return schemaS3Location;
  }

  public void setSchemaS3Location(StartSimulationRequestSchemaS3Location schemaS3Location) {
    this.schemaS3Location = schemaS3Location;
  }


  public StartSimulationRequest snapshotS3Location(StartSimulationRequestSchemaS3Location snapshotS3Location) {
    this.snapshotS3Location = snapshotS3Location;
    return this;
  }

  /**
   * Get snapshotS3Location
   * @return snapshotS3Location
   */
  @javax.annotation.Nullable
  public StartSimulationRequestSchemaS3Location getSnapshotS3Location() {
    return snapshotS3Location;
  }

  public void setSnapshotS3Location(StartSimulationRequestSchemaS3Location snapshotS3Location) {
    this.snapshotS3Location = snapshotS3Location;
  }


  public StartSimulationRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public StartSimulationRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * A list of tags for the simulation. For more information about tags, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\&quot;&gt;Tagging Amazon Web Services resources&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartSimulationRequest startSimulationRequest = (StartSimulationRequest) o;
    return Objects.equals(this.clientToken, startSimulationRequest.clientToken) &&
        Objects.equals(this.description, startSimulationRequest.description) &&
        Objects.equals(this.maximumDuration, startSimulationRequest.maximumDuration) &&
        Objects.equals(this.name, startSimulationRequest.name) &&
        Objects.equals(this.roleArn, startSimulationRequest.roleArn) &&
        Objects.equals(this.schemaS3Location, startSimulationRequest.schemaS3Location) &&
        Objects.equals(this.snapshotS3Location, startSimulationRequest.snapshotS3Location) &&
        Objects.equals(this.tags, startSimulationRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientToken, description, maximumDuration, name, roleArn, schemaS3Location, snapshotS3Location, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartSimulationRequest {\n");
    sb.append("    clientToken: ").append("*").append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    maximumDuration: ").append(toIndentedString(maximumDuration)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    schemaS3Location: ").append(toIndentedString(schemaS3Location)).append("\n");
    sb.append("    snapshotS3Location: ").append(toIndentedString(snapshotS3Location)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ClientToken");
    openapiFields.add("Description");
    openapiFields.add("MaximumDuration");
    openapiFields.add("Name");
    openapiFields.add("RoleArn");
    openapiFields.add("SchemaS3Location");
    openapiFields.add("SnapshotS3Location");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("RoleArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartSimulationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartSimulationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartSimulationRequest is not found in the empty JSON string", StartSimulationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartSimulationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartSimulationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartSimulationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ClientToken") != null && !jsonObj.get("ClientToken").isJsonNull()) && !jsonObj.get("ClientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientToken").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("MaximumDuration") != null && !jsonObj.get("MaximumDuration").isJsonNull()) && !jsonObj.get("MaximumDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MaximumDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MaximumDuration").toString()));
      }
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if (!jsonObj.get("RoleArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RoleArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RoleArn").toString()));
      }
      // validate the optional field `SchemaS3Location`
      if (jsonObj.get("SchemaS3Location") != null && !jsonObj.get("SchemaS3Location").isJsonNull()) {
        StartSimulationRequestSchemaS3Location.validateJsonElement(jsonObj.get("SchemaS3Location"));
      }
      // validate the optional field `SnapshotS3Location`
      if (jsonObj.get("SnapshotS3Location") != null && !jsonObj.get("SnapshotS3Location").isJsonNull()) {
        StartSimulationRequestSchemaS3Location.validateJsonElement(jsonObj.get("SnapshotS3Location"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartSimulationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartSimulationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartSimulationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartSimulationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartSimulationRequest>() {
           @Override
           public void write(JsonWriter out, StartSimulationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartSimulationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartSimulationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartSimulationRequest
   * @throws IOException if the JSON string is invalid with respect to StartSimulationRequest
   */
  public static StartSimulationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartSimulationRequest.class);
  }

  /**
   * Convert an instance of StartSimulationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

