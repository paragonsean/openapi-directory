/*
 * AWS SimSpace Weaver
 * <p>SimSpace Weaver (SimSpace Weaver) is a managed service that you can use to build and operate large-scale spatial simulations in the Amazon Web Services Cloud. For example, you can create a digital twin of a city, crowd simulations with millions of people and objects, and massively multiplayer games with hundreds of thousands of connected players. For more information about SimSpace Weaver, see the <i> <a href=\"https://docs.aws.amazon.com/simspaceweaver/latest/userguide/\">SimSpace Weaver User Guide</a> </i>.</p> <p>This API reference describes the API operations and data types that you can use to communicate directly with SimSpace Weaver.</p> <p>SimSpace Weaver also provides the SimSpace Weaver app SDK, which you use for app development. The SimSpace Weaver app SDK API reference is included in the SimSpace Weaver app SDK documentation. This documentation is part of the SimSpace Weaver app SDK distributable package.</p>
 *
 * The version of the OpenAPI document: 2022-10-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.DescribeSimulationOutputLiveSimulationState;
import org.openapitools.client.model.DescribeSimulationOutputLoggingConfiguration;
import org.openapitools.client.model.DescribeSimulationOutputSchemaS3Location;
import org.openapitools.client.model.S3Location;
import org.openapitools.client.model.SimulationStatus;
import org.openapitools.client.model.SimulationTargetStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeSimulationOutput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:46.025237-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeSimulationOutput {
  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXECUTION_ID = "ExecutionId";
  @SerializedName(SERIALIZED_NAME_EXECUTION_ID)
  private String executionId;

  public static final String SERIALIZED_NAME_LIVE_SIMULATION_STATE = "LiveSimulationState";
  @SerializedName(SERIALIZED_NAME_LIVE_SIMULATION_STATE)
  private DescribeSimulationOutputLiveSimulationState liveSimulationState;

  public static final String SERIALIZED_NAME_LOGGING_CONFIGURATION = "LoggingConfiguration";
  @SerializedName(SERIALIZED_NAME_LOGGING_CONFIGURATION)
  private DescribeSimulationOutputLoggingConfiguration loggingConfiguration;

  public static final String SERIALIZED_NAME_MAXIMUM_DURATION = "MaximumDuration";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_DURATION)
  private String maximumDuration;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ROLE_ARN = "RoleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_SCHEMA_ERROR = "SchemaError";
  @SerializedName(SERIALIZED_NAME_SCHEMA_ERROR)
  private String schemaError;

  public static final String SERIALIZED_NAME_SCHEMA_S3_LOCATION = "SchemaS3Location";
  @SerializedName(SERIALIZED_NAME_SCHEMA_S3_LOCATION)
  private DescribeSimulationOutputSchemaS3Location schemaS3Location;

  public static final String SERIALIZED_NAME_SNAPSHOT_S3_LOCATION = "SnapshotS3Location";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_S3_LOCATION)
  private S3Location snapshotS3Location;

  public static final String SERIALIZED_NAME_START_ERROR = "StartError";
  @SerializedName(SERIALIZED_NAME_START_ERROR)
  private String startError;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private SimulationStatus status;

  public static final String SERIALIZED_NAME_TARGET_STATUS = "TargetStatus";
  @SerializedName(SERIALIZED_NAME_TARGET_STATUS)
  private SimulationTargetStatus targetStatus;

  public DescribeSimulationOutput() {
  }

  public DescribeSimulationOutput arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public DescribeSimulationOutput creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public DescribeSimulationOutput description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DescribeSimulationOutput executionId(String executionId) {
    this.executionId = executionId;
    return this;
  }

  /**
   * Get executionId
   * @return executionId
   */
  @javax.annotation.Nullable
  public String getExecutionId() {
    return executionId;
  }

  public void setExecutionId(String executionId) {
    this.executionId = executionId;
  }


  public DescribeSimulationOutput liveSimulationState(DescribeSimulationOutputLiveSimulationState liveSimulationState) {
    this.liveSimulationState = liveSimulationState;
    return this;
  }

  /**
   * Get liveSimulationState
   * @return liveSimulationState
   */
  @javax.annotation.Nullable
  public DescribeSimulationOutputLiveSimulationState getLiveSimulationState() {
    return liveSimulationState;
  }

  public void setLiveSimulationState(DescribeSimulationOutputLiveSimulationState liveSimulationState) {
    this.liveSimulationState = liveSimulationState;
  }


  public DescribeSimulationOutput loggingConfiguration(DescribeSimulationOutputLoggingConfiguration loggingConfiguration) {
    this.loggingConfiguration = loggingConfiguration;
    return this;
  }

  /**
   * Get loggingConfiguration
   * @return loggingConfiguration
   */
  @javax.annotation.Nullable
  public DescribeSimulationOutputLoggingConfiguration getLoggingConfiguration() {
    return loggingConfiguration;
  }

  public void setLoggingConfiguration(DescribeSimulationOutputLoggingConfiguration loggingConfiguration) {
    this.loggingConfiguration = loggingConfiguration;
  }


  public DescribeSimulationOutput maximumDuration(String maximumDuration) {
    this.maximumDuration = maximumDuration;
    return this;
  }

  /**
   * Get maximumDuration
   * @return maximumDuration
   */
  @javax.annotation.Nullable
  public String getMaximumDuration() {
    return maximumDuration;
  }

  public void setMaximumDuration(String maximumDuration) {
    this.maximumDuration = maximumDuration;
  }


  public DescribeSimulationOutput name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DescribeSimulationOutput roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * Get roleArn
   * @return roleArn
   */
  @javax.annotation.Nullable
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public DescribeSimulationOutput schemaError(String schemaError) {
    this.schemaError = schemaError;
    return this;
  }

  /**
   * Get schemaError
   * @return schemaError
   */
  @javax.annotation.Nullable
  public String getSchemaError() {
    return schemaError;
  }

  public void setSchemaError(String schemaError) {
    this.schemaError = schemaError;
  }


  public DescribeSimulationOutput schemaS3Location(DescribeSimulationOutputSchemaS3Location schemaS3Location) {
    this.schemaS3Location = schemaS3Location;
    return this;
  }

  /**
   * Get schemaS3Location
   * @return schemaS3Location
   */
  @javax.annotation.Nullable
  public DescribeSimulationOutputSchemaS3Location getSchemaS3Location() {
    return schemaS3Location;
  }

  public void setSchemaS3Location(DescribeSimulationOutputSchemaS3Location schemaS3Location) {
    this.schemaS3Location = schemaS3Location;
  }


  public DescribeSimulationOutput snapshotS3Location(S3Location snapshotS3Location) {
    this.snapshotS3Location = snapshotS3Location;
    return this;
  }

  /**
   * Get snapshotS3Location
   * @return snapshotS3Location
   */
  @javax.annotation.Nullable
  public S3Location getSnapshotS3Location() {
    return snapshotS3Location;
  }

  public void setSnapshotS3Location(S3Location snapshotS3Location) {
    this.snapshotS3Location = snapshotS3Location;
  }


  public DescribeSimulationOutput startError(String startError) {
    this.startError = startError;
    return this;
  }

  /**
   * Get startError
   * @return startError
   */
  @javax.annotation.Nullable
  public String getStartError() {
    return startError;
  }

  public void setStartError(String startError) {
    this.startError = startError;
  }


  public DescribeSimulationOutput status(SimulationStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public SimulationStatus getStatus() {
    return status;
  }

  public void setStatus(SimulationStatus status) {
    this.status = status;
  }


  public DescribeSimulationOutput targetStatus(SimulationTargetStatus targetStatus) {
    this.targetStatus = targetStatus;
    return this;
  }

  /**
   * Get targetStatus
   * @return targetStatus
   */
  @javax.annotation.Nullable
  public SimulationTargetStatus getTargetStatus() {
    return targetStatus;
  }

  public void setTargetStatus(SimulationTargetStatus targetStatus) {
    this.targetStatus = targetStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeSimulationOutput describeSimulationOutput = (DescribeSimulationOutput) o;
    return Objects.equals(this.arn, describeSimulationOutput.arn) &&
        Objects.equals(this.creationTime, describeSimulationOutput.creationTime) &&
        Objects.equals(this.description, describeSimulationOutput.description) &&
        Objects.equals(this.executionId, describeSimulationOutput.executionId) &&
        Objects.equals(this.liveSimulationState, describeSimulationOutput.liveSimulationState) &&
        Objects.equals(this.loggingConfiguration, describeSimulationOutput.loggingConfiguration) &&
        Objects.equals(this.maximumDuration, describeSimulationOutput.maximumDuration) &&
        Objects.equals(this.name, describeSimulationOutput.name) &&
        Objects.equals(this.roleArn, describeSimulationOutput.roleArn) &&
        Objects.equals(this.schemaError, describeSimulationOutput.schemaError) &&
        Objects.equals(this.schemaS3Location, describeSimulationOutput.schemaS3Location) &&
        Objects.equals(this.snapshotS3Location, describeSimulationOutput.snapshotS3Location) &&
        Objects.equals(this.startError, describeSimulationOutput.startError) &&
        Objects.equals(this.status, describeSimulationOutput.status) &&
        Objects.equals(this.targetStatus, describeSimulationOutput.targetStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, creationTime, description, executionId, liveSimulationState, loggingConfiguration, maximumDuration, name, roleArn, schemaError, schemaS3Location, snapshotS3Location, startError, status, targetStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeSimulationOutput {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    executionId: ").append(toIndentedString(executionId)).append("\n");
    sb.append("    liveSimulationState: ").append(toIndentedString(liveSimulationState)).append("\n");
    sb.append("    loggingConfiguration: ").append(toIndentedString(loggingConfiguration)).append("\n");
    sb.append("    maximumDuration: ").append(toIndentedString(maximumDuration)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    schemaError: ").append(toIndentedString(schemaError)).append("\n");
    sb.append("    schemaS3Location: ").append(toIndentedString(schemaS3Location)).append("\n");
    sb.append("    snapshotS3Location: ").append(toIndentedString(snapshotS3Location)).append("\n");
    sb.append("    startError: ").append(toIndentedString(startError)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    targetStatus: ").append(toIndentedString(targetStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Arn");
    openapiFields.add("CreationTime");
    openapiFields.add("Description");
    openapiFields.add("ExecutionId");
    openapiFields.add("LiveSimulationState");
    openapiFields.add("LoggingConfiguration");
    openapiFields.add("MaximumDuration");
    openapiFields.add("Name");
    openapiFields.add("RoleArn");
    openapiFields.add("SchemaError");
    openapiFields.add("SchemaS3Location");
    openapiFields.add("SnapshotS3Location");
    openapiFields.add("StartError");
    openapiFields.add("Status");
    openapiFields.add("TargetStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeSimulationOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeSimulationOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeSimulationOutput is not found in the empty JSON string", DescribeSimulationOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeSimulationOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeSimulationOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Arn`
      if (jsonObj.get("Arn") != null && !jsonObj.get("Arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Arn"));
      }
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `ExecutionId`
      if (jsonObj.get("ExecutionId") != null && !jsonObj.get("ExecutionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ExecutionId"));
      }
      // validate the optional field `LiveSimulationState`
      if (jsonObj.get("LiveSimulationState") != null && !jsonObj.get("LiveSimulationState").isJsonNull()) {
        DescribeSimulationOutputLiveSimulationState.validateJsonElement(jsonObj.get("LiveSimulationState"));
      }
      // validate the optional field `LoggingConfiguration`
      if (jsonObj.get("LoggingConfiguration") != null && !jsonObj.get("LoggingConfiguration").isJsonNull()) {
        DescribeSimulationOutputLoggingConfiguration.validateJsonElement(jsonObj.get("LoggingConfiguration"));
      }
      // validate the optional field `MaximumDuration`
      if (jsonObj.get("MaximumDuration") != null && !jsonObj.get("MaximumDuration").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MaximumDuration"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `RoleArn`
      if (jsonObj.get("RoleArn") != null && !jsonObj.get("RoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RoleArn"));
      }
      // validate the optional field `SchemaError`
      if (jsonObj.get("SchemaError") != null && !jsonObj.get("SchemaError").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SchemaError"));
      }
      // validate the optional field `SchemaS3Location`
      if (jsonObj.get("SchemaS3Location") != null && !jsonObj.get("SchemaS3Location").isJsonNull()) {
        DescribeSimulationOutputSchemaS3Location.validateJsonElement(jsonObj.get("SchemaS3Location"));
      }
      // validate the optional field `SnapshotS3Location`
      if (jsonObj.get("SnapshotS3Location") != null && !jsonObj.get("SnapshotS3Location").isJsonNull()) {
        S3Location.validateJsonElement(jsonObj.get("SnapshotS3Location"));
      }
      // validate the optional field `StartError`
      if (jsonObj.get("StartError") != null && !jsonObj.get("StartError").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StartError"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        SimulationStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `TargetStatus`
      if (jsonObj.get("TargetStatus") != null && !jsonObj.get("TargetStatus").isJsonNull()) {
        SimulationTargetStatus.validateJsonElement(jsonObj.get("TargetStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeSimulationOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeSimulationOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeSimulationOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeSimulationOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeSimulationOutput>() {
           @Override
           public void write(JsonWriter out, DescribeSimulationOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeSimulationOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeSimulationOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeSimulationOutput
   * @throws IOException if the JSON string is invalid with respect to DescribeSimulationOutput
   */
  public static DescribeSimulationOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeSimulationOutput.class);
  }

  /**
   * Convert an instance of DescribeSimulationOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

