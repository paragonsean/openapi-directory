/*
 * AWS SimSpace Weaver
 * <p>SimSpace Weaver (SimSpace Weaver) is a managed service that you can use to build and operate large-scale spatial simulations in the Amazon Web Services Cloud. For example, you can create a digital twin of a city, crowd simulations with millions of people and objects, and massively multiplayer games with hundreds of thousands of connected players. For more information about SimSpace Weaver, see the <i> <a href=\"https://docs.aws.amazon.com/simspaceweaver/latest/userguide/\">SimSpace Weaver User Guide</a> </i>.</p> <p>This API reference describes the API operations and data types that you can use to communicate directly with SimSpace Weaver.</p> <p>SimSpace Weaver also provides the SimSpace Weaver app SDK, which you use for app development. The SimSpace Weaver app SDK API reference is included in the SimSpace Weaver app SDK documentation. This documentation is part of the SimSpace Weaver app SDK distributable package.</p>
 *
 * The version of the OpenAPI document: 2022-10-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DescribeAppOutputEndpointInfo;
import org.openapitools.client.model.LaunchOverrides;
import org.openapitools.client.model.SimulationAppStatus;
import org.openapitools.client.model.SimulationAppTargetStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeAppOutput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:46.025237-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeAppOutput {
  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DOMAIN = "Domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_ENDPOINT_INFO = "EndpointInfo";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_INFO)
  private DescribeAppOutputEndpointInfo endpointInfo;

  public static final String SERIALIZED_NAME_LAUNCH_OVERRIDES = "LaunchOverrides";
  @SerializedName(SERIALIZED_NAME_LAUNCH_OVERRIDES)
  private LaunchOverrides launchOverrides;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SIMULATION = "Simulation";
  @SerializedName(SERIALIZED_NAME_SIMULATION)
  private String simulation;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private SimulationAppStatus status;

  public static final String SERIALIZED_NAME_TARGET_STATUS = "TargetStatus";
  @SerializedName(SERIALIZED_NAME_TARGET_STATUS)
  private SimulationAppTargetStatus targetStatus;

  public DescribeAppOutput() {
  }

  public DescribeAppOutput description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DescribeAppOutput domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Get domain
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public DescribeAppOutput endpointInfo(DescribeAppOutputEndpointInfo endpointInfo) {
    this.endpointInfo = endpointInfo;
    return this;
  }

  /**
   * Get endpointInfo
   * @return endpointInfo
   */
  @javax.annotation.Nullable
  public DescribeAppOutputEndpointInfo getEndpointInfo() {
    return endpointInfo;
  }

  public void setEndpointInfo(DescribeAppOutputEndpointInfo endpointInfo) {
    this.endpointInfo = endpointInfo;
  }


  public DescribeAppOutput launchOverrides(LaunchOverrides launchOverrides) {
    this.launchOverrides = launchOverrides;
    return this;
  }

  /**
   * Get launchOverrides
   * @return launchOverrides
   */
  @javax.annotation.Nullable
  public LaunchOverrides getLaunchOverrides() {
    return launchOverrides;
  }

  public void setLaunchOverrides(LaunchOverrides launchOverrides) {
    this.launchOverrides = launchOverrides;
  }


  public DescribeAppOutput name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DescribeAppOutput simulation(String simulation) {
    this.simulation = simulation;
    return this;
  }

  /**
   * Get simulation
   * @return simulation
   */
  @javax.annotation.Nullable
  public String getSimulation() {
    return simulation;
  }

  public void setSimulation(String simulation) {
    this.simulation = simulation;
  }


  public DescribeAppOutput status(SimulationAppStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public SimulationAppStatus getStatus() {
    return status;
  }

  public void setStatus(SimulationAppStatus status) {
    this.status = status;
  }


  public DescribeAppOutput targetStatus(SimulationAppTargetStatus targetStatus) {
    this.targetStatus = targetStatus;
    return this;
  }

  /**
   * Get targetStatus
   * @return targetStatus
   */
  @javax.annotation.Nullable
  public SimulationAppTargetStatus getTargetStatus() {
    return targetStatus;
  }

  public void setTargetStatus(SimulationAppTargetStatus targetStatus) {
    this.targetStatus = targetStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeAppOutput describeAppOutput = (DescribeAppOutput) o;
    return Objects.equals(this.description, describeAppOutput.description) &&
        Objects.equals(this.domain, describeAppOutput.domain) &&
        Objects.equals(this.endpointInfo, describeAppOutput.endpointInfo) &&
        Objects.equals(this.launchOverrides, describeAppOutput.launchOverrides) &&
        Objects.equals(this.name, describeAppOutput.name) &&
        Objects.equals(this.simulation, describeAppOutput.simulation) &&
        Objects.equals(this.status, describeAppOutput.status) &&
        Objects.equals(this.targetStatus, describeAppOutput.targetStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, domain, endpointInfo, launchOverrides, name, simulation, status, targetStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeAppOutput {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    endpointInfo: ").append(toIndentedString(endpointInfo)).append("\n");
    sb.append("    launchOverrides: ").append(toIndentedString(launchOverrides)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    simulation: ").append(toIndentedString(simulation)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    targetStatus: ").append(toIndentedString(targetStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Description");
    openapiFields.add("Domain");
    openapiFields.add("EndpointInfo");
    openapiFields.add("LaunchOverrides");
    openapiFields.add("Name");
    openapiFields.add("Simulation");
    openapiFields.add("Status");
    openapiFields.add("TargetStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeAppOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeAppOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeAppOutput is not found in the empty JSON string", DescribeAppOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeAppOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeAppOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `Domain`
      if (jsonObj.get("Domain") != null && !jsonObj.get("Domain").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Domain"));
      }
      // validate the optional field `EndpointInfo`
      if (jsonObj.get("EndpointInfo") != null && !jsonObj.get("EndpointInfo").isJsonNull()) {
        DescribeAppOutputEndpointInfo.validateJsonElement(jsonObj.get("EndpointInfo"));
      }
      // validate the optional field `LaunchOverrides`
      if (jsonObj.get("LaunchOverrides") != null && !jsonObj.get("LaunchOverrides").isJsonNull()) {
        LaunchOverrides.validateJsonElement(jsonObj.get("LaunchOverrides"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `Simulation`
      if (jsonObj.get("Simulation") != null && !jsonObj.get("Simulation").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Simulation"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        SimulationAppStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `TargetStatus`
      if (jsonObj.get("TargetStatus") != null && !jsonObj.get("TargetStatus").isJsonNull()) {
        SimulationAppTargetStatus.validateJsonElement(jsonObj.get("TargetStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeAppOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeAppOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeAppOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeAppOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeAppOutput>() {
           @Override
           public void write(JsonWriter out, DescribeAppOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeAppOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeAppOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeAppOutput
   * @throws IOException if the JSON string is invalid with respect to DescribeAppOutput
   */
  public static DescribeAppOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeAppOutput.class);
  }

  /**
   * Convert an instance of DescribeAppOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

