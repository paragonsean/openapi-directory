/**
 * Amazon CodeGuru Profiler
 * <p> This section provides documentation for the Amazon CodeGuru Profiler API operations. </p> <p> Amazon CodeGuru Profiler collects runtime performance data from your live applications, and provides recommendations that can help you fine-tune your application performance. Using machine learning algorithms, CodeGuru Profiler can help you find your most expensive lines of code and suggest ways you can improve efficiency and remove CPU bottlenecks. </p> <p> Amazon CodeGuru Profiler provides different visualizations of profiling data to help you identify what code is running on the CPU, see how much time is consumed, and suggest ways to reduce CPU utilization. </p> <note> <p>Amazon CodeGuru Profiler currently supports applications written in all Java virtual machine (JVM) languages and Python. While CodeGuru Profiler supports both visualizations and recommendations for applications written in Java, it can also generate visualizations and a subset of recommendations for applications written in other JVM languages and Python.</p> </note> <p> For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/profiler-ug/what-is-codeguru-profiler.html\">What is Amazon CodeGuru Profiler</a> in the <i>Amazon CodeGuru Profiler User Guide</i>. </p>
 *
 * The version of the OpenAPI document: 2019-07-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonCodeGuruProfiler);
  }
}(this, function(expect, AmazonCodeGuruProfiler) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonCodeGuruProfiler.CreateProfilingGroupRequest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CreateProfilingGroupRequest', function() {
    it('should create an instance of CreateProfilingGroupRequest', function() {
      // uncomment below and update the code to test CreateProfilingGroupRequest
      //var instance = new AmazonCodeGuruProfiler.CreateProfilingGroupRequest();
      //expect(instance).to.be.a(AmazonCodeGuruProfiler.CreateProfilingGroupRequest);
    });

    it('should have the property agentOrchestrationConfig (base name: "agentOrchestrationConfig")', function() {
      // uncomment below and update the code to test the property agentOrchestrationConfig
      //var instance = new AmazonCodeGuruProfiler.CreateProfilingGroupRequest();
      //expect(instance).to.be();
    });

    it('should have the property computePlatform (base name: "computePlatform")', function() {
      // uncomment below and update the code to test the property computePlatform
      //var instance = new AmazonCodeGuruProfiler.CreateProfilingGroupRequest();
      //expect(instance).to.be();
    });

    it('should have the property profilingGroupName (base name: "profilingGroupName")', function() {
      // uncomment below and update the code to test the property profilingGroupName
      //var instance = new AmazonCodeGuruProfiler.CreateProfilingGroupRequest();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new AmazonCodeGuruProfiler.CreateProfilingGroupRequest();
      //expect(instance).to.be();
    });

  });

}));
