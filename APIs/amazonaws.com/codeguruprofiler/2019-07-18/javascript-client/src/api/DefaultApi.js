/**
 * Amazon CodeGuru Profiler
 * <p> This section provides documentation for the Amazon CodeGuru Profiler API operations. </p> <p> Amazon CodeGuru Profiler collects runtime performance data from your live applications, and provides recommendations that can help you fine-tune your application performance. Using machine learning algorithms, CodeGuru Profiler can help you find your most expensive lines of code and suggest ways you can improve efficiency and remove CPU bottlenecks. </p> <p> Amazon CodeGuru Profiler provides different visualizations of profiling data to help you identify what code is running on the CPU, see how much time is consumed, and suggest ways to reduce CPU utilization. </p> <note> <p>Amazon CodeGuru Profiler currently supports applications written in all Java virtual machine (JVM) languages and Python. While CodeGuru Profiler supports both visualizations and recommendations for applications written in Java, it can also generate visualizations and a subset of recommendations for applications written in other JVM languages and Python.</p> </note> <p> For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/profiler-ug/what-is-codeguru-profiler.html\">What is Amazon CodeGuru Profiler</a> in the <i>Amazon CodeGuru Profiler User Guide</i>. </p>
 *
 * The version of the OpenAPI document: 2019-07-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddNotificationChannelsRequest from '../model/AddNotificationChannelsRequest';
import AddNotificationChannelsResponse from '../model/AddNotificationChannelsResponse';
import BatchGetFrameMetricDataRequest from '../model/BatchGetFrameMetricDataRequest';
import BatchGetFrameMetricDataResponse from '../model/BatchGetFrameMetricDataResponse';
import ConfigureAgentRequest from '../model/ConfigureAgentRequest';
import ConfigureAgentResponse from '../model/ConfigureAgentResponse';
import CreateProfilingGroupRequest from '../model/CreateProfilingGroupRequest';
import CreateProfilingGroupResponse from '../model/CreateProfilingGroupResponse';
import DescribeProfilingGroupResponse from '../model/DescribeProfilingGroupResponse';
import GetFindingsReportAccountSummaryResponse from '../model/GetFindingsReportAccountSummaryResponse';
import GetNotificationConfigurationResponse from '../model/GetNotificationConfigurationResponse';
import GetPolicyResponse from '../model/GetPolicyResponse';
import GetProfileResponse from '../model/GetProfileResponse';
import GetRecommendationsResponse from '../model/GetRecommendationsResponse';
import ListFindingsReportsResponse from '../model/ListFindingsReportsResponse';
import ListProfileTimesResponse from '../model/ListProfileTimesResponse';
import ListProfilingGroupsResponse from '../model/ListProfilingGroupsResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import PostAgentProfileRequest from '../model/PostAgentProfileRequest';
import PutPermissionRequest from '../model/PutPermissionRequest';
import PutPermissionResponse from '../model/PutPermissionResponse';
import RemoveNotificationChannelResponse from '../model/RemoveNotificationChannelResponse';
import RemovePermissionResponse from '../model/RemovePermissionResponse';
import SubmitFeedbackRequest from '../model/SubmitFeedbackRequest';
import TagResourceRequest from '../model/TagResourceRequest';
import UpdateProfilingGroupRequest from '../model/UpdateProfilingGroupRequest';
import UpdateProfilingGroupResponse from '../model/UpdateProfilingGroupResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2019-07-18
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addNotificationChannels operation.
     * @callback module:api/DefaultApi~addNotificationChannelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddNotificationChannelsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add up to 2 anomaly notifications channels for a profiling group.
     * @param {String} profilingGroupName The name of the profiling group that we are setting up notifications for.
     * @param {module:model/AddNotificationChannelsRequest} addNotificationChannelsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~addNotificationChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddNotificationChannelsResponse}
     */
    addNotificationChannels(profilingGroupName, addNotificationChannelsRequest, opts, callback) {
      opts = opts || {};
      let postBody = addNotificationChannelsRequest;
      // verify the required parameter 'profilingGroupName' is set
      if (profilingGroupName === undefined || profilingGroupName === null) {
        throw new Error("Missing the required parameter 'profilingGroupName' when calling addNotificationChannels");
      }
      // verify the required parameter 'addNotificationChannelsRequest' is set
      if (addNotificationChannelsRequest === undefined || addNotificationChannelsRequest === null) {
        throw new Error("Missing the required parameter 'addNotificationChannelsRequest' when calling addNotificationChannels");
      }

      let pathParams = {
        'profilingGroupName': profilingGroupName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddNotificationChannelsResponse;
      return this.apiClient.callApi(
        '/profilingGroups/{profilingGroupName}/notificationConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchGetFrameMetricData operation.
     * @callback module:api/DefaultApi~batchGetFrameMetricDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchGetFrameMetricDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns the time series of values for a requested list of frame metrics from a time period.
     * @param {String} profilingGroupName  The name of the profiling group associated with the the frame metrics used to return the time series values. 
     * @param {module:model/BatchGetFrameMetricDataRequest} batchGetFrameMetricDataRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Date} [endTime]  The end time of the time period for the returned time series values. This is specified using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1 millisecond past June 1, 2020 1:15:02 PM UTC. 
     * @param {String} [period]  The duration of the frame metrics used to return the time series values. Specify using the ISO 8601 format. The maximum period duration is one day (<code>PT24H</code> or <code>P1D</code>). 
     * @param {Date} [startTime]  The start time of the time period for the frame metrics used to return the time series values. This is specified using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1 millisecond past June 1, 2020 1:15:02 PM UTC. 
     * @param {module:model/String} [targetResolution] <p>The requested resolution of time steps for the returned time series of values. If the requested target resolution is not available due to data not being retained we provide a best effort result by falling back to the most granular available resolution after the target resolution. There are 3 valid values. </p> <ul> <li> <p> <code>P1D</code> — 1 day </p> </li> <li> <p> <code>PT1H</code> — 1 hour </p> </li> <li> <p> <code>PT5M</code> — 5 minutes </p> </li> </ul>
     * @param {module:api/DefaultApi~batchGetFrameMetricDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchGetFrameMetricDataResponse}
     */
    batchGetFrameMetricData(profilingGroupName, batchGetFrameMetricDataRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchGetFrameMetricDataRequest;
      // verify the required parameter 'profilingGroupName' is set
      if (profilingGroupName === undefined || profilingGroupName === null) {
        throw new Error("Missing the required parameter 'profilingGroupName' when calling batchGetFrameMetricData");
      }
      // verify the required parameter 'batchGetFrameMetricDataRequest' is set
      if (batchGetFrameMetricDataRequest === undefined || batchGetFrameMetricDataRequest === null) {
        throw new Error("Missing the required parameter 'batchGetFrameMetricDataRequest' when calling batchGetFrameMetricData");
      }

      let pathParams = {
        'profilingGroupName': profilingGroupName
      };
      let queryParams = {
        'endTime': opts['endTime'],
        'period': opts['period'],
        'startTime': opts['startTime'],
        'targetResolution': opts['targetResolution']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchGetFrameMetricDataResponse;
      return this.apiClient.callApi(
        '/profilingGroups/{profilingGroupName}/frames/-/metrics', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configureAgent operation.
     * @callback module:api/DefaultApi~configureAgentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigureAgentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Used by profiler agents to report their current state and to receive remote configuration updates. For example, <code>ConfigureAgent</code> can be used to tell an agent whether to profile or not and for how long to return profiling data. 
     * @param {String} profilingGroupName  The name of the profiling group for which the configured agent is collecting profiling data. 
     * @param {module:model/ConfigureAgentRequest} configureAgentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~configureAgentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigureAgentResponse}
     */
    configureAgent(profilingGroupName, configureAgentRequest, opts, callback) {
      opts = opts || {};
      let postBody = configureAgentRequest;
      // verify the required parameter 'profilingGroupName' is set
      if (profilingGroupName === undefined || profilingGroupName === null) {
        throw new Error("Missing the required parameter 'profilingGroupName' when calling configureAgent");
      }
      // verify the required parameter 'configureAgentRequest' is set
      if (configureAgentRequest === undefined || configureAgentRequest === null) {
        throw new Error("Missing the required parameter 'configureAgentRequest' when calling configureAgent");
      }

      let pathParams = {
        'profilingGroupName': profilingGroupName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConfigureAgentResponse;
      return this.apiClient.callApi(
        '/profilingGroups/{profilingGroupName}/configureAgent', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProfilingGroup operation.
     * @callback module:api/DefaultApi~createProfilingGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateProfilingGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a profiling group.
     * @param {String} clientToken  Amazon CodeGuru Profiler uses this universally unique identifier (UUID) to prevent the accidental creation of duplicate profiling groups if there are failures and retries. 
     * @param {module:model/CreateProfilingGroupRequest} createProfilingGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createProfilingGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateProfilingGroupResponse}
     */
    createProfilingGroup(clientToken, createProfilingGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = createProfilingGroupRequest;
      // verify the required parameter 'clientToken' is set
      if (clientToken === undefined || clientToken === null) {
        throw new Error("Missing the required parameter 'clientToken' when calling createProfilingGroup");
      }
      // verify the required parameter 'createProfilingGroupRequest' is set
      if (createProfilingGroupRequest === undefined || createProfilingGroupRequest === null) {
        throw new Error("Missing the required parameter 'createProfilingGroupRequest' when calling createProfilingGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'clientToken': clientToken
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateProfilingGroupResponse;
      return this.apiClient.callApi(
        '/profilingGroups#clientToken', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProfilingGroup operation.
     * @callback module:api/DefaultApi~deleteProfilingGroupCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a profiling group.
     * @param {String} profilingGroupName The name of the profiling group to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteProfilingGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteProfilingGroup(profilingGroupName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'profilingGroupName' is set
      if (profilingGroupName === undefined || profilingGroupName === null) {
        throw new Error("Missing the required parameter 'profilingGroupName' when calling deleteProfilingGroup");
      }

      let pathParams = {
        'profilingGroupName': profilingGroupName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/profilingGroups/{profilingGroupName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeProfilingGroup operation.
     * @callback module:api/DefaultApi~describeProfilingGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeProfilingGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns a <a href=\"https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ProfilingGroupDescription.html\"> <code>ProfilingGroupDescription</code> </a> object that contains information about the requested profiling group. 
     * @param {String} profilingGroupName  The name of the profiling group to get information about. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeProfilingGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeProfilingGroupResponse}
     */
    describeProfilingGroup(profilingGroupName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'profilingGroupName' is set
      if (profilingGroupName === undefined || profilingGroupName === null) {
        throw new Error("Missing the required parameter 'profilingGroupName' when calling describeProfilingGroup");
      }

      let pathParams = {
        'profilingGroupName': profilingGroupName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeProfilingGroupResponse;
      return this.apiClient.callApi(
        '/profilingGroups/{profilingGroupName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFindingsReportAccountSummary operation.
     * @callback module:api/DefaultApi~getFindingsReportAccountSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFindingsReportAccountSummaryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns a list of <a href=\"https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_FindingsReportSummary.html\"> <code>FindingsReportSummary</code> </a> objects that contain analysis results for all profiling groups in your AWS account. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [dailyReportsOnly] A <code>Boolean</code> value indicating whether to only return reports from daily profiles. If set to <code>True</code>, only analysis data from daily profiles is returned. If set to <code>False</code>, analysis data is returned from smaller time windows (for example, one hour).
     * @param {Number} [maxResults] The maximum number of results returned by <code> GetFindingsReportAccountSummary</code> in paginated output. When this parameter is used, <code>GetFindingsReportAccountSummary</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>GetFindingsReportAccountSummary</code> request with the returned <code>nextToken</code> value.
     * @param {String} [nextToken] <p>The <code>nextToken</code> value returned from a previous paginated <code>GetFindingsReportAccountSummary</code> request where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. </p> <note> <p>This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.</p> </note>
     * @param {module:api/DefaultApi~getFindingsReportAccountSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFindingsReportAccountSummaryResponse}
     */
    getFindingsReportAccountSummary(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'dailyReportsOnly': opts['dailyReportsOnly'],
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetFindingsReportAccountSummaryResponse;
      return this.apiClient.callApi(
        '/internal/findingsReports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationConfiguration operation.
     * @callback module:api/DefaultApi~getNotificationConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNotificationConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the current configuration for anomaly notifications for a profiling group.
     * @param {String} profilingGroupName The name of the profiling group we want to get the notification configuration for.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getNotificationConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNotificationConfigurationResponse}
     */
    getNotificationConfiguration(profilingGroupName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'profilingGroupName' is set
      if (profilingGroupName === undefined || profilingGroupName === null) {
        throw new Error("Missing the required parameter 'profilingGroupName' when calling getNotificationConfiguration");
      }

      let pathParams = {
        'profilingGroupName': profilingGroupName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNotificationConfigurationResponse;
      return this.apiClient.callApi(
        '/profilingGroups/{profilingGroupName}/notificationConfiguration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPolicy operation.
     * @callback module:api/DefaultApi~getPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns the JSON-formatted resource-based policy on a profiling group. 
     * @param {String} profilingGroupName The name of the profiling group.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPolicyResponse}
     */
    getPolicy(profilingGroupName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'profilingGroupName' is set
      if (profilingGroupName === undefined || profilingGroupName === null) {
        throw new Error("Missing the required parameter 'profilingGroupName' when calling getPolicy");
      }

      let pathParams = {
        'profilingGroupName': profilingGroupName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPolicyResponse;
      return this.apiClient.callApi(
        '/profilingGroups/{profilingGroupName}/policy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfile operation.
     * @callback module:api/DefaultApi~getProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> Gets the aggregated profile of a profiling group for a specified time range. Amazon CodeGuru Profiler collects posted agent profiles for a profiling group into aggregated profiles. </p> <pre><code> &lt;note&gt; &lt;p&gt; Because aggregated profiles expire over time &lt;code&gt;GetProfile&lt;/code&gt; is not idempotent. &lt;/p&gt; &lt;/note&gt; &lt;p&gt; Specify the time range for the requested aggregated profile using 1 or 2 of the following parameters: &lt;code&gt;startTime&lt;/code&gt;, &lt;code&gt;endTime&lt;/code&gt;, &lt;code&gt;period&lt;/code&gt;. The maximum time range allowed is 7 days. If you specify all 3 parameters, an exception is thrown. If you specify only &lt;code&gt;period&lt;/code&gt;, the latest aggregated profile is returned. &lt;/p&gt; &lt;p&gt; Aggregated profiles are available with aggregation periods of 5 minutes, 1 hour, and 1 day, aligned to UTC. The aggregation period of an aggregated profile determines how long it is retained. For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_AggregatedProfileTime.html&quot;&gt; &lt;code&gt;AggregatedProfileTime&lt;/code&gt; &lt;/a&gt;. The aggregated profile's aggregation period determines how long it is retained by CodeGuru Profiler. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; If the aggregation period is 5 minutes, the aggregated profile is retained for 15 days. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; If the aggregation period is 1 hour, the aggregated profile is retained for 60 days. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; If the aggregation period is 1 day, the aggregated profile is retained for 3 years. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;There are two use cases for calling &lt;code&gt;GetProfile&lt;/code&gt;.&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt; If you want to return an aggregated profile that already exists, use &lt;a href=&quot;https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ListProfileTimes.html&quot;&gt; &lt;code&gt;ListProfileTimes&lt;/code&gt; &lt;/a&gt; to view the time ranges of existing aggregated profiles. Use them in a &lt;code&gt;GetProfile&lt;/code&gt; request to return a specific, existing aggregated profile. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; If you want to return an aggregated profile for a time range that doesn't align with an existing aggregated profile, then CodeGuru Profiler makes a best effort to combine existing aggregated profiles from the requested time range and return them as one aggregated profile. &lt;/p&gt; &lt;p&gt; If aggregated profiles do not exist for the full time range requested, then aggregated profiles for a smaller time range are returned. For example, if the requested time range is from 00:00 to 00:20, and the existing aggregated profiles are from 00:15 and 00:25, then the aggregated profiles from 00:15 to 00:20 are returned. &lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; </code></pre>
     * @param {String} profilingGroupName The name of the profiling group to get.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [accept] <p> The format of the returned profiling data. The format maps to the <code>Accept</code> and <code>Content-Type</code> headers of the HTTP request. You can specify one of the following: or the default . </p> <pre><code> &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;application/json&lt;/code&gt; — standard JSON format &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;application/x-amzn-ion&lt;/code&gt; — the Amazon Ion data format. For more information, see &lt;a href=&quot;http://amzn.github.io/ion-docs/&quot;&gt;Amazon Ion&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; </code></pre>
     * @param {Date} [endTime] <p> The end time of the requested profile. Specify using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1 millisecond past June 1, 2020 1:15:02 PM UTC. </p> <p> If you specify <code>endTime</code>, then you must also specify <code>period</code> or <code>startTime</code>, but not both. </p>
     * @param {Number} [maxDepth]  The maximum depth of the stacks in the code that is represented in the aggregated profile. For example, if CodeGuru Profiler finds a method <code>A</code>, which calls method <code>B</code>, which calls method <code>C</code>, which calls method <code>D</code>, then the depth is 4. If the <code>maxDepth</code> is set to 2, then the aggregated profile contains representations of methods <code>A</code> and <code>B</code>. 
     * @param {String} [period] <p> Used with <code>startTime</code> or <code>endTime</code> to specify the time range for the returned aggregated profile. Specify using the ISO 8601 format. For example, <code>P1DT1H1M1S</code>. </p> <pre><code> &lt;p&gt; To get the latest aggregated profile, specify only &lt;code&gt;period&lt;/code&gt;. &lt;/p&gt; </code></pre>
     * @param {Date} [startTime] <p>The start time of the profile to get. Specify using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1 millisecond past June 1, 2020 1:15:02 PM UTC.</p> <pre><code> &lt;p&gt; If you specify &lt;code&gt;startTime&lt;/code&gt;, then you must also specify &lt;code&gt;period&lt;/code&gt; or &lt;code&gt;endTime&lt;/code&gt;, but not both. &lt;/p&gt; </code></pre>
     * @param {module:api/DefaultApi~getProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetProfileResponse}
     */
    getProfile(profilingGroupName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'profilingGroupName' is set
      if (profilingGroupName === undefined || profilingGroupName === null) {
        throw new Error("Missing the required parameter 'profilingGroupName' when calling getProfile");
      }

      let pathParams = {
        'profilingGroupName': profilingGroupName
      };
      let queryParams = {
        'endTime': opts['endTime'],
        'maxDepth': opts['maxDepth'],
        'period': opts['period'],
        'startTime': opts['startTime']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'Accept': opts['accept']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetProfileResponse;
      return this.apiClient.callApi(
        '/profilingGroups/{profilingGroupName}/profile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecommendations operation.
     * @callback module:api/DefaultApi~getRecommendationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRecommendationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns a list of <a href=\"https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_Recommendation.html\"> <code>Recommendation</code> </a> objects that contain recommendations for a profiling group for a given time period. A list of <a href=\"https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_Anomaly.html\"> <code>Anomaly</code> </a> objects that contains details about anomalies detected in the profiling group for the same time period is also returned. 
     * @param {Date} endTime  The start time of the profile to get analysis data about. You must specify <code>startTime</code> and <code>endTime</code>. This is specified using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1 millisecond past June 1, 2020 1:15:02 PM UTC. 
     * @param {String} profilingGroupName  The name of the profiling group to get analysis data about. 
     * @param {Date} startTime  The end time of the profile to get analysis data about. You must specify <code>startTime</code> and <code>endTime</code>. This is specified using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1 millisecond past June 1, 2020 1:15:02 PM UTC. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [locale] <p> The language used to provide analysis. Specify using a string that is one of the following <code>BCP 47</code> language codes. </p> <ul> <li> <p> <code>de-DE</code> - German, Germany </p> </li> <li> <p> <code>en-GB</code> - English, United Kingdom </p> </li> <li> <p> <code>en-US</code> - English, United States </p> </li> <li> <p> <code>es-ES</code> - Spanish, Spain </p> </li> <li> <p> <code>fr-FR</code> - French, France </p> </li> <li> <p> <code>it-IT</code> - Italian, Italy </p> </li> <li> <p> <code>ja-JP</code> - Japanese, Japan </p> </li> <li> <p> <code>ko-KR</code> - Korean, Republic of Korea </p> </li> <li> <p> <code>pt-BR</code> - Portugese, Brazil </p> </li> <li> <p> <code>zh-CN</code> - Chinese, China </p> </li> <li> <p> <code>zh-TW</code> - Chinese, Taiwan </p> </li> </ul>
     * @param {module:api/DefaultApi~getRecommendationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRecommendationsResponse}
     */
    getRecommendations(endTime, profilingGroupName, startTime, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'endTime' is set
      if (endTime === undefined || endTime === null) {
        throw new Error("Missing the required parameter 'endTime' when calling getRecommendations");
      }
      // verify the required parameter 'profilingGroupName' is set
      if (profilingGroupName === undefined || profilingGroupName === null) {
        throw new Error("Missing the required parameter 'profilingGroupName' when calling getRecommendations");
      }
      // verify the required parameter 'startTime' is set
      if (startTime === undefined || startTime === null) {
        throw new Error("Missing the required parameter 'startTime' when calling getRecommendations");
      }

      let pathParams = {
        'profilingGroupName': profilingGroupName
      };
      let queryParams = {
        'endTime': endTime,
        'locale': opts['locale'],
        'startTime': startTime
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRecommendationsResponse;
      return this.apiClient.callApi(
        '/internal/profilingGroups/{profilingGroupName}/recommendations#endTime&startTime', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFindingsReports operation.
     * @callback module:api/DefaultApi~listFindingsReportsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFindingsReportsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the available reports for a given profiling group and time range.
     * @param {Date} endTime  The end time of the profile to get analysis data about. You must specify <code>startTime</code> and <code>endTime</code>. This is specified using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1 millisecond past June 1, 2020 1:15:02 PM UTC. 
     * @param {String} profilingGroupName The name of the profiling group from which to search for analysis data.
     * @param {Date} startTime  The start time of the profile to get analysis data about. You must specify <code>startTime</code> and <code>endTime</code>. This is specified using the ISO 8601 format. For example, 2020-06-01T13:15:02.001Z represents 1 millisecond past June 1, 2020 1:15:02 PM UTC. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [dailyReportsOnly] A <code>Boolean</code> value indicating whether to only return reports from daily profiles. If set to <code>True</code>, only analysis data from daily profiles is returned. If set to <code>False</code>, analysis data is returned from smaller time windows (for example, one hour).
     * @param {Number} [maxResults] The maximum number of report results returned by <code>ListFindingsReports</code> in paginated output. When this parameter is used, <code>ListFindingsReports</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>ListFindingsReports</code> request with the returned <code>nextToken</code> value.
     * @param {String} [nextToken] <p>The <code>nextToken</code> value returned from a previous paginated <code>ListFindingsReportsRequest</code> request where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. </p> <note> <p>This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.</p> </note>
     * @param {module:api/DefaultApi~listFindingsReportsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFindingsReportsResponse}
     */
    listFindingsReports(endTime, profilingGroupName, startTime, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'endTime' is set
      if (endTime === undefined || endTime === null) {
        throw new Error("Missing the required parameter 'endTime' when calling listFindingsReports");
      }
      // verify the required parameter 'profilingGroupName' is set
      if (profilingGroupName === undefined || profilingGroupName === null) {
        throw new Error("Missing the required parameter 'profilingGroupName' when calling listFindingsReports");
      }
      // verify the required parameter 'startTime' is set
      if (startTime === undefined || startTime === null) {
        throw new Error("Missing the required parameter 'startTime' when calling listFindingsReports");
      }

      let pathParams = {
        'profilingGroupName': profilingGroupName
      };
      let queryParams = {
        'dailyReportsOnly': opts['dailyReportsOnly'],
        'endTime': endTime,
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'startTime': startTime
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListFindingsReportsResponse;
      return this.apiClient.callApi(
        '/internal/profilingGroups/{profilingGroupName}/findingsReports#endTime&startTime', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProfileTimes operation.
     * @callback module:api/DefaultApi~listProfileTimesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListProfileTimesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the start times of the available aggregated profiles of a profiling group for an aggregation period within the specified time range.
     * @param {Date} endTime The end time of the time range from which to list the profiles.
     * @param {module:model/String} period <p> The aggregation period. This specifies the period during which an aggregation profile collects posted agent profiles for a profiling group. There are 3 valid values. </p> <ul> <li> <p> <code>P1D</code> — 1 day </p> </li> <li> <p> <code>PT1H</code> — 1 hour </p> </li> <li> <p> <code>PT5M</code> — 5 minutes </p> </li> </ul>
     * @param {String} profilingGroupName The name of the profiling group.
     * @param {Date} startTime The start time of the time range from which to list the profiles.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of profile time results returned by <code>ListProfileTimes</code> in paginated output. When this parameter is used, <code>ListProfileTimes</code> only returns <code>maxResults</code> results in a single page with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>ListProfileTimes</code> request with the returned <code>nextToken</code> value. 
     * @param {String} [nextToken] <p>The <code>nextToken</code> value returned from a previous paginated <code>ListProfileTimes</code> request where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. </p> <note> <p>This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.</p> </note>
     * @param {module:model/String} [orderBy] The order (ascending or descending by start time of the profile) to use when listing profiles. Defaults to <code>TIMESTAMP_DESCENDING</code>. 
     * @param {module:api/DefaultApi~listProfileTimesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListProfileTimesResponse}
     */
    listProfileTimes(endTime, period, profilingGroupName, startTime, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'endTime' is set
      if (endTime === undefined || endTime === null) {
        throw new Error("Missing the required parameter 'endTime' when calling listProfileTimes");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling listProfileTimes");
      }
      // verify the required parameter 'profilingGroupName' is set
      if (profilingGroupName === undefined || profilingGroupName === null) {
        throw new Error("Missing the required parameter 'profilingGroupName' when calling listProfileTimes");
      }
      // verify the required parameter 'startTime' is set
      if (startTime === undefined || startTime === null) {
        throw new Error("Missing the required parameter 'startTime' when calling listProfileTimes");
      }

      let pathParams = {
        'profilingGroupName': profilingGroupName
      };
      let queryParams = {
        'endTime': endTime,
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'orderBy': opts['orderBy'],
        'period': period,
        'startTime': startTime
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListProfileTimesResponse;
      return this.apiClient.callApi(
        '/profilingGroups/{profilingGroupName}/profileTimes#endTime&period&startTime', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProfilingGroups operation.
     * @callback module:api/DefaultApi~listProfilingGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListProfilingGroupsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns a list of profiling groups. The profiling groups are returned as <a href=\"https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ProfilingGroupDescription.html\"> <code>ProfilingGroupDescription</code> </a> objects. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [includeDescription] A <code>Boolean</code> value indicating whether to include a description. If <code>true</code>, then a list of <a href=\"https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ProfilingGroupDescription.html\"> <code>ProfilingGroupDescription</code> </a> objects that contain detailed information about profiling groups is returned. If <code>false</code>, then a list of profiling group names is returned.
     * @param {Number} [maxResults] The maximum number of profiling groups results returned by <code>ListProfilingGroups</code> in paginated output. When this parameter is used, <code>ListProfilingGroups</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>ListProfilingGroups</code> request with the returned <code>nextToken</code> value. 
     * @param {String} [nextToken] <p>The <code>nextToken</code> value returned from a previous paginated <code>ListProfilingGroups</code> request where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. </p> <note> <p>This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.</p> </note>
     * @param {module:api/DefaultApi~listProfilingGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListProfilingGroupsResponse}
     */
    listProfilingGroups(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'includeDescription': opts['includeDescription'],
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListProfilingGroupsResponse;
      return this.apiClient.callApi(
        '/profilingGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns a list of the tags that are assigned to a specified resource. 
     * @param {String} resourceArn  The Amazon Resource Name (ARN) of the resource that contains the tags to return. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postAgentProfile operation.
     * @callback module:api/DefaultApi~postAgentProfileCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Submits profiling data to an aggregated profile of a profiling group. To get an aggregated profile that is created with this profiling data, use <a href=\"https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_GetProfile.html\"> <code>GetProfile</code> </a>. 
     * @param {String} contentType <p> The format of the submitted profiling data. The format maps to the <code>Accept</code> and <code>Content-Type</code> headers of the HTTP request. You can specify one of the following: or the default . </p> <pre><code> &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;application/json&lt;/code&gt; — standard JSON format &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;application/x-amzn-ion&lt;/code&gt; — the Amazon Ion data format. For more information, see &lt;a href=&quot;http://amzn.github.io/ion-docs/&quot;&gt;Amazon Ion&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; </code></pre>
     * @param {String} profilingGroupName  The name of the profiling group with the aggregated profile that receives the submitted profiling data. 
     * @param {module:model/PostAgentProfileRequest} postAgentProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [profileToken]  Amazon CodeGuru Profiler uses this universally unique identifier (UUID) to prevent the accidental submission of duplicate profiling data if there are failures and retries. 
     * @param {module:api/DefaultApi~postAgentProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    postAgentProfile(contentType, profilingGroupName, postAgentProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = postAgentProfileRequest;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling postAgentProfile");
      }
      // verify the required parameter 'profilingGroupName' is set
      if (profilingGroupName === undefined || profilingGroupName === null) {
        throw new Error("Missing the required parameter 'profilingGroupName' when calling postAgentProfile");
      }
      // verify the required parameter 'postAgentProfileRequest' is set
      if (postAgentProfileRequest === undefined || postAgentProfileRequest === null) {
        throw new Error("Missing the required parameter 'postAgentProfileRequest' when calling postAgentProfile");
      }

      let pathParams = {
        'profilingGroupName': profilingGroupName
      };
      let queryParams = {
        'profileToken': opts['profileToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/profilingGroups/{profilingGroupName}/agentProfile#Content-Type', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPermission operation.
     * @callback module:api/DefaultApi~putPermissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutPermissionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> Adds permissions to a profiling group's resource-based policy that are provided using an action group. If a profiling group doesn't have a resource-based policy, one is created for it using the permissions in the action group and the roles and users in the <code>principals</code> parameter. </p> <pre><code> &lt;p&gt; The one supported action group that can be added is &lt;code&gt;agentPermission&lt;/code&gt; which grants &lt;code&gt;ConfigureAgent&lt;/code&gt; and &lt;code&gt;PostAgent&lt;/code&gt; permissions. For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/codeguru/latest/profiler-ug/resource-based-policies.html&quot;&gt;Resource-based policies in CodeGuru Profiler&lt;/a&gt; in the &lt;i&gt;Amazon CodeGuru Profiler User Guide&lt;/i&gt;, &lt;a href=&quot;https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ConfigureAgent.html&quot;&gt; &lt;code&gt;ConfigureAgent&lt;/code&gt; &lt;/a&gt;, and &lt;a href=&quot;https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_PostAgentProfile.html&quot;&gt; &lt;code&gt;PostAgentProfile&lt;/code&gt; &lt;/a&gt;. &lt;/p&gt; &lt;p&gt; The first time you call &lt;code&gt;PutPermission&lt;/code&gt; on a profiling group, do not specify a &lt;code&gt;revisionId&lt;/code&gt; because it doesn't have a resource-based policy. Subsequent calls must provide a &lt;code&gt;revisionId&lt;/code&gt; to specify which revision of the resource-based policy to add the permissions to. &lt;/p&gt; &lt;p&gt; The response contains the profiling group's JSON-formatted resource policy. &lt;/p&gt; </code></pre>
     * @param {module:model/String} actionGroup  Specifies an action group that contains permissions to add to a profiling group resource. One action group is supported, <code>agentPermissions</code>, which grants permission to perform actions required by the profiling agent, <code>ConfigureAgent</code> and <code>PostAgentProfile</code> permissions. 
     * @param {String} profilingGroupName The name of the profiling group to grant access to.
     * @param {module:model/PutPermissionRequest} putPermissionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putPermissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutPermissionResponse}
     */
    putPermission(actionGroup, profilingGroupName, putPermissionRequest, opts, callback) {
      opts = opts || {};
      let postBody = putPermissionRequest;
      // verify the required parameter 'actionGroup' is set
      if (actionGroup === undefined || actionGroup === null) {
        throw new Error("Missing the required parameter 'actionGroup' when calling putPermission");
      }
      // verify the required parameter 'profilingGroupName' is set
      if (profilingGroupName === undefined || profilingGroupName === null) {
        throw new Error("Missing the required parameter 'profilingGroupName' when calling putPermission");
      }
      // verify the required parameter 'putPermissionRequest' is set
      if (putPermissionRequest === undefined || putPermissionRequest === null) {
        throw new Error("Missing the required parameter 'putPermissionRequest' when calling putPermission");
      }

      let pathParams = {
        'actionGroup': actionGroup,
        'profilingGroupName': profilingGroupName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutPermissionResponse;
      return this.apiClient.callApi(
        '/profilingGroups/{profilingGroupName}/policy/{actionGroup}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeNotificationChannel operation.
     * @callback module:api/DefaultApi~removeNotificationChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoveNotificationChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove one anomaly notifications channel for a profiling group.
     * @param {String} channelId The id of the channel that we want to stop receiving notifications.
     * @param {String} profilingGroupName The name of the profiling group we want to change notification configuration for.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~removeNotificationChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoveNotificationChannelResponse}
     */
    removeNotificationChannel(channelId, profilingGroupName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling removeNotificationChannel");
      }
      // verify the required parameter 'profilingGroupName' is set
      if (profilingGroupName === undefined || profilingGroupName === null) {
        throw new Error("Missing the required parameter 'profilingGroupName' when calling removeNotificationChannel");
      }

      let pathParams = {
        'channelId': channelId,
        'profilingGroupName': profilingGroupName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RemoveNotificationChannelResponse;
      return this.apiClient.callApi(
        '/profilingGroups/{profilingGroupName}/notificationConfiguration/{channelId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removePermission operation.
     * @callback module:api/DefaultApi~removePermissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemovePermissionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Removes permissions from a profiling group's resource-based policy that are provided using an action group. The one supported action group that can be removed is <code>agentPermission</code> which grants <code>ConfigureAgent</code> and <code>PostAgent</code> permissions. For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/profiler-ug/resource-based-policies.html\">Resource-based policies in CodeGuru Profiler</a> in the <i>Amazon CodeGuru Profiler User Guide</i>, <a href=\"https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ConfigureAgent.html\"> <code>ConfigureAgent</code> </a>, and <a href=\"https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_PostAgentProfile.html\"> <code>PostAgentProfile</code> </a>. 
     * @param {module:model/String} actionGroup  Specifies an action group that contains the permissions to remove from a profiling group's resource-based policy. One action group is supported, <code>agentPermissions</code>, which grants <code>ConfigureAgent</code> and <code>PostAgentProfile</code> permissions. 
     * @param {String} profilingGroupName The name of the profiling group.
     * @param {String} revisionId  A universally unique identifier (UUID) for the revision of the resource-based policy from which you want to remove permissions. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~removePermissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemovePermissionResponse}
     */
    removePermission(actionGroup, profilingGroupName, revisionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'actionGroup' is set
      if (actionGroup === undefined || actionGroup === null) {
        throw new Error("Missing the required parameter 'actionGroup' when calling removePermission");
      }
      // verify the required parameter 'profilingGroupName' is set
      if (profilingGroupName === undefined || profilingGroupName === null) {
        throw new Error("Missing the required parameter 'profilingGroupName' when calling removePermission");
      }
      // verify the required parameter 'revisionId' is set
      if (revisionId === undefined || revisionId === null) {
        throw new Error("Missing the required parameter 'revisionId' when calling removePermission");
      }

      let pathParams = {
        'actionGroup': actionGroup,
        'profilingGroupName': profilingGroupName
      };
      let queryParams = {
        'revisionId': revisionId
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RemovePermissionResponse;
      return this.apiClient.callApi(
        '/profilingGroups/{profilingGroupName}/policy/{actionGroup}#revisionId', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitFeedback operation.
     * @callback module:api/DefaultApi~submitFeedbackCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends feedback to CodeGuru Profiler about whether the anomaly detected by the analysis is useful or not.
     * @param {String} anomalyInstanceId The universally unique identifier (UUID) of the <a href=\"https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_AnomalyInstance.html\"> <code>AnomalyInstance</code> </a> object that is included in the analysis data.
     * @param {String} profilingGroupName The name of the profiling group that is associated with the analysis data.
     * @param {module:model/SubmitFeedbackRequest} submitFeedbackRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~submitFeedbackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    submitFeedback(anomalyInstanceId, profilingGroupName, submitFeedbackRequest, opts, callback) {
      opts = opts || {};
      let postBody = submitFeedbackRequest;
      // verify the required parameter 'anomalyInstanceId' is set
      if (anomalyInstanceId === undefined || anomalyInstanceId === null) {
        throw new Error("Missing the required parameter 'anomalyInstanceId' when calling submitFeedback");
      }
      // verify the required parameter 'profilingGroupName' is set
      if (profilingGroupName === undefined || profilingGroupName === null) {
        throw new Error("Missing the required parameter 'profilingGroupName' when calling submitFeedback");
      }
      // verify the required parameter 'submitFeedbackRequest' is set
      if (submitFeedbackRequest === undefined || submitFeedbackRequest === null) {
        throw new Error("Missing the required parameter 'submitFeedbackRequest' when calling submitFeedback");
      }

      let pathParams = {
        'anomalyInstanceId': anomalyInstanceId,
        'profilingGroupName': profilingGroupName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/internal/profilingGroups/{profilingGroupName}/anomalies/{anomalyInstanceId}/feedback', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Use to assign one or more tags to a resource. 
     * @param {String} resourceArn  The Amazon Resource Name (ARN) of the resource that the tags are added to. 
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Use to remove one or more tags from a resource. 
     * @param {String} resourceArn  The Amazon Resource Name (ARN) of the resource that contains the tags to remove. 
     * @param {Array.<String>} tagKeys  A list of tag keys. Existing tags of resources with keys in this list are removed from the specified resource. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProfilingGroup operation.
     * @callback module:api/DefaultApi~updateProfilingGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateProfilingGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a profiling group.
     * @param {String} profilingGroupName The name of the profiling group to update.
     * @param {module:model/UpdateProfilingGroupRequest} updateProfilingGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateProfilingGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateProfilingGroupResponse}
     */
    updateProfilingGroup(profilingGroupName, updateProfilingGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateProfilingGroupRequest;
      // verify the required parameter 'profilingGroupName' is set
      if (profilingGroupName === undefined || profilingGroupName === null) {
        throw new Error("Missing the required parameter 'profilingGroupName' when calling updateProfilingGroup");
      }
      // verify the required parameter 'updateProfilingGroupRequest' is set
      if (updateProfilingGroupRequest === undefined || updateProfilingGroupRequest === null) {
        throw new Error("Missing the required parameter 'updateProfilingGroupRequest' when calling updateProfilingGroup");
      }

      let pathParams = {
        'profilingGroupName': profilingGroupName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateProfilingGroupResponse;
      return this.apiClient.callApi(
        '/profilingGroups/{profilingGroupName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
