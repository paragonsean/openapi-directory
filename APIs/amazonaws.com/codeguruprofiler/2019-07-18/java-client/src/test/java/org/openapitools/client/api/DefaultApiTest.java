/*
 * Amazon CodeGuru Profiler
 * <p> This section provides documentation for the Amazon CodeGuru Profiler API operations. </p> <p> Amazon CodeGuru Profiler collects runtime performance data from your live applications, and provides recommendations that can help you fine-tune your application performance. Using machine learning algorithms, CodeGuru Profiler can help you find your most expensive lines of code and suggest ways you can improve efficiency and remove CPU bottlenecks. </p> <p> Amazon CodeGuru Profiler provides different visualizations of profiling data to help you identify what code is running on the CPU, see how much time is consumed, and suggest ways to reduce CPU utilization. </p> <note> <p>Amazon CodeGuru Profiler currently supports applications written in all Java virtual machine (JVM) languages and Python. While CodeGuru Profiler supports both visualizations and recommendations for applications written in Java, it can also generate visualizations and a subset of recommendations for applications written in other JVM languages and Python.</p> </note> <p> For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/profiler-ug/what-is-codeguru-profiler.html\">What is Amazon CodeGuru Profiler</a> in the <i>Amazon CodeGuru Profiler User Guide</i>. </p>
 *
 * The version of the OpenAPI document: 2019-07-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddNotificationChannelsRequest;
import org.openapitools.client.model.AddNotificationChannelsResponse;
import org.openapitools.client.model.BatchGetFrameMetricDataRequest;
import org.openapitools.client.model.BatchGetFrameMetricDataResponse;
import org.openapitools.client.model.ConfigureAgentRequest;
import org.openapitools.client.model.ConfigureAgentResponse;
import org.openapitools.client.model.CreateProfilingGroupRequest;
import org.openapitools.client.model.CreateProfilingGroupResponse;
import org.openapitools.client.model.DescribeProfilingGroupResponse;
import org.openapitools.client.model.GetFindingsReportAccountSummaryResponse;
import org.openapitools.client.model.GetNotificationConfigurationResponse;
import org.openapitools.client.model.GetPolicyResponse;
import org.openapitools.client.model.GetProfileResponse;
import org.openapitools.client.model.GetRecommendationsResponse;
import org.openapitools.client.model.ListFindingsReportsResponse;
import org.openapitools.client.model.ListProfileTimesResponse;
import org.openapitools.client.model.ListProfilingGroupsResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PostAgentProfileRequest;
import org.openapitools.client.model.PutPermissionRequest;
import org.openapitools.client.model.PutPermissionResponse;
import org.openapitools.client.model.RemoveNotificationChannelResponse;
import org.openapitools.client.model.RemovePermissionResponse;
import org.openapitools.client.model.SubmitFeedbackRequest;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UpdateProfilingGroupRequest;
import org.openapitools.client.model.UpdateProfilingGroupResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Add up to 2 anomaly notifications channels for a profiling group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addNotificationChannelsTest() throws ApiException {
        String profilingGroupName = null;
        AddNotificationChannelsRequest addNotificationChannelsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AddNotificationChannelsResponse response = api.addNotificationChannels(profilingGroupName, addNotificationChannelsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Returns the time series of values for a requested list of frame metrics from a time period.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchGetFrameMetricDataTest() throws ApiException {
        String profilingGroupName = null;
        BatchGetFrameMetricDataRequest batchGetFrameMetricDataRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        OffsetDateTime endTime = null;
        String period = null;
        OffsetDateTime startTime = null;
        String targetResolution = null;
        BatchGetFrameMetricDataResponse response = api.batchGetFrameMetricData(profilingGroupName, batchGetFrameMetricDataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, endTime, period, startTime, targetResolution);
        // TODO: test validations
    }

    /**
     *  Used by profiler agents to report their current state and to receive remote configuration updates. For example, &lt;code&gt;ConfigureAgent&lt;/code&gt; can be used to tell an agent whether to profile or not and for how long to return profiling data. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureAgentTest() throws ApiException {
        String profilingGroupName = null;
        ConfigureAgentRequest configureAgentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ConfigureAgentResponse response = api.configureAgent(profilingGroupName, configureAgentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a profiling group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProfilingGroupTest() throws ApiException {
        String clientToken = null;
        CreateProfilingGroupRequest createProfilingGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateProfilingGroupResponse response = api.createProfilingGroup(clientToken, createProfilingGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a profiling group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProfilingGroupTest() throws ApiException {
        String profilingGroupName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteProfilingGroup(profilingGroupName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Returns a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ProfilingGroupDescription.html\&quot;&gt; &lt;code&gt;ProfilingGroupDescription&lt;/code&gt; &lt;/a&gt; object that contains information about the requested profiling group. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeProfilingGroupTest() throws ApiException {
        String profilingGroupName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeProfilingGroupResponse response = api.describeProfilingGroup(profilingGroupName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Returns a list of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_FindingsReportSummary.html\&quot;&gt; &lt;code&gt;FindingsReportSummary&lt;/code&gt; &lt;/a&gt; objects that contain analysis results for all profiling groups in your AWS account. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFindingsReportAccountSummaryTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean dailyReportsOnly = null;
        Integer maxResults = null;
        String nextToken = null;
        GetFindingsReportAccountSummaryResponse response = api.getFindingsReportAccountSummary(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dailyReportsOnly, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Get the current configuration for anomaly notifications for a profiling group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNotificationConfigurationTest() throws ApiException {
        String profilingGroupName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetNotificationConfigurationResponse response = api.getNotificationConfiguration(profilingGroupName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Returns the JSON-formatted resource-based policy on a profiling group. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPolicyTest() throws ApiException {
        String profilingGroupName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetPolicyResponse response = api.getPolicy(profilingGroupName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Gets the aggregated profile of a profiling group for a specified time range. Amazon CodeGuru Profiler collects posted agent profiles for a profiling group into aggregated profiles. &lt;/p&gt; &lt;pre&gt;&lt;code&gt; &amp;lt;note&amp;gt; &amp;lt;p&amp;gt; Because aggregated profiles expire over time &amp;lt;code&amp;gt;GetProfile&amp;lt;/code&amp;gt; is not idempotent. &amp;lt;/p&amp;gt; &amp;lt;/note&amp;gt; &amp;lt;p&amp;gt; Specify the time range for the requested aggregated profile using 1 or 2 of the following parameters: &amp;lt;code&amp;gt;startTime&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;endTime&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;period&amp;lt;/code&amp;gt;. The maximum time range allowed is 7 days. If you specify all 3 parameters, an exception is thrown. If you specify only &amp;lt;code&amp;gt;period&amp;lt;/code&amp;gt;, the latest aggregated profile is returned. &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; Aggregated profiles are available with aggregation periods of 5 minutes, 1 hour, and 1 day, aligned to UTC. The aggregation period of an aggregated profile determines how long it is retained. For more information, see &amp;lt;a href&#x3D;&amp;quot;https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_AggregatedProfileTime.html&amp;quot;&amp;gt; &amp;lt;code&amp;gt;AggregatedProfileTime&amp;lt;/code&amp;gt; &amp;lt;/a&amp;gt;. The aggregated profile&#39;s aggregation period determines how long it is retained by CodeGuru Profiler. &amp;lt;/p&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt; &amp;lt;p&amp;gt; If the aggregation period is 5 minutes, the aggregated profile is retained for 15 days. &amp;lt;/p&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;p&amp;gt; If the aggregation period is 1 hour, the aggregated profile is retained for 60 days. &amp;lt;/p&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;p&amp;gt; If the aggregation period is 1 day, the aggregated profile is retained for 3 years. &amp;lt;/p&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;p&amp;gt;There are two use cases for calling &amp;lt;code&amp;gt;GetProfile&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt; &amp;lt;ol&amp;gt; &amp;lt;li&amp;gt; &amp;lt;p&amp;gt; If you want to return an aggregated profile that already exists, use &amp;lt;a href&#x3D;&amp;quot;https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ListProfileTimes.html&amp;quot;&amp;gt; &amp;lt;code&amp;gt;ListProfileTimes&amp;lt;/code&amp;gt; &amp;lt;/a&amp;gt; to view the time ranges of existing aggregated profiles. Use them in a &amp;lt;code&amp;gt;GetProfile&amp;lt;/code&amp;gt; request to return a specific, existing aggregated profile. &amp;lt;/p&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;p&amp;gt; If you want to return an aggregated profile for a time range that doesn&#39;t align with an existing aggregated profile, then CodeGuru Profiler makes a best effort to combine existing aggregated profiles from the requested time range and return them as one aggregated profile. &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; If aggregated profiles do not exist for the full time range requested, then aggregated profiles for a smaller time range are returned. For example, if the requested time range is from 00:00 to 00:20, and the existing aggregated profiles are from 00:15 and 00:25, then the aggregated profiles from 00:15 to 00:20 are returned. &amp;lt;/p&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;/ol&amp;gt; &lt;/code&gt;&lt;/pre&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProfileTest() throws ApiException {
        String profilingGroupName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String accept = null;
        OffsetDateTime endTime = null;
        Integer maxDepth = null;
        String period = null;
        OffsetDateTime startTime = null;
        GetProfileResponse response = api.getProfile(profilingGroupName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, accept, endTime, maxDepth, period, startTime);
        // TODO: test validations
    }

    /**
     *  Returns a list of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_Recommendation.html\&quot;&gt; &lt;code&gt;Recommendation&lt;/code&gt; &lt;/a&gt; objects that contain recommendations for a profiling group for a given time period. A list of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_Anomaly.html\&quot;&gt; &lt;code&gt;Anomaly&lt;/code&gt; &lt;/a&gt; objects that contains details about anomalies detected in the profiling group for the same time period is also returned. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecommendationsTest() throws ApiException {
        OffsetDateTime endTime = null;
        String profilingGroupName = null;
        OffsetDateTime startTime = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String locale = null;
        GetRecommendationsResponse response = api.getRecommendations(endTime, profilingGroupName, startTime, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, locale);
        // TODO: test validations
    }

    /**
     * List the available reports for a given profiling group and time range.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFindingsReportsTest() throws ApiException {
        OffsetDateTime endTime = null;
        String profilingGroupName = null;
        OffsetDateTime startTime = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean dailyReportsOnly = null;
        Integer maxResults = null;
        String nextToken = null;
        ListFindingsReportsResponse response = api.listFindingsReports(endTime, profilingGroupName, startTime, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dailyReportsOnly, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the start times of the available aggregated profiles of a profiling group for an aggregation period within the specified time range.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProfileTimesTest() throws ApiException {
        OffsetDateTime endTime = null;
        String period = null;
        String profilingGroupName = null;
        OffsetDateTime startTime = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String orderBy = null;
        ListProfileTimesResponse response = api.listProfileTimes(endTime, period, profilingGroupName, startTime, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, orderBy);
        // TODO: test validations
    }

    /**
     *  Returns a list of profiling groups. The profiling groups are returned as &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ProfilingGroupDescription.html\&quot;&gt; &lt;code&gt;ProfilingGroupDescription&lt;/code&gt; &lt;/a&gt; objects. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProfilingGroupsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean includeDescription = null;
        Integer maxResults = null;
        String nextToken = null;
        ListProfilingGroupsResponse response = api.listProfilingGroups(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, includeDescription, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  Returns a list of the tags that are assigned to a specified resource. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Submits profiling data to an aggregated profile of a profiling group. To get an aggregated profile that is created with this profiling data, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_GetProfile.html\&quot;&gt; &lt;code&gt;GetProfile&lt;/code&gt; &lt;/a&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postAgentProfileTest() throws ApiException {
        String contentType = null;
        String profilingGroupName = null;
        PostAgentProfileRequest postAgentProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String profileToken = null;
        Object response = api.postAgentProfile(contentType, profilingGroupName, postAgentProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, profileToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Adds permissions to a profiling group&#39;s resource-based policy that are provided using an action group. If a profiling group doesn&#39;t have a resource-based policy, one is created for it using the permissions in the action group and the roles and users in the &lt;code&gt;principals&lt;/code&gt; parameter. &lt;/p&gt; &lt;pre&gt;&lt;code&gt; &amp;lt;p&amp;gt; The one supported action group that can be added is &amp;lt;code&amp;gt;agentPermission&amp;lt;/code&amp;gt; which grants &amp;lt;code&amp;gt;ConfigureAgent&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;PostAgent&amp;lt;/code&amp;gt; permissions. For more information, see &amp;lt;a href&#x3D;&amp;quot;https://docs.aws.amazon.com/codeguru/latest/profiler-ug/resource-based-policies.html&amp;quot;&amp;gt;Resource-based policies in CodeGuru Profiler&amp;lt;/a&amp;gt; in the &amp;lt;i&amp;gt;Amazon CodeGuru Profiler User Guide&amp;lt;/i&amp;gt;, &amp;lt;a href&#x3D;&amp;quot;https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ConfigureAgent.html&amp;quot;&amp;gt; &amp;lt;code&amp;gt;ConfigureAgent&amp;lt;/code&amp;gt; &amp;lt;/a&amp;gt;, and &amp;lt;a href&#x3D;&amp;quot;https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_PostAgentProfile.html&amp;quot;&amp;gt; &amp;lt;code&amp;gt;PostAgentProfile&amp;lt;/code&amp;gt; &amp;lt;/a&amp;gt;. &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; The first time you call &amp;lt;code&amp;gt;PutPermission&amp;lt;/code&amp;gt; on a profiling group, do not specify a &amp;lt;code&amp;gt;revisionId&amp;lt;/code&amp;gt; because it doesn&#39;t have a resource-based policy. Subsequent calls must provide a &amp;lt;code&amp;gt;revisionId&amp;lt;/code&amp;gt; to specify which revision of the resource-based policy to add the permissions to. &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; The response contains the profiling group&#39;s JSON-formatted resource policy. &amp;lt;/p&amp;gt; &lt;/code&gt;&lt;/pre&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putPermissionTest() throws ApiException {
        String actionGroup = null;
        String profilingGroupName = null;
        PutPermissionRequest putPermissionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutPermissionResponse response = api.putPermission(actionGroup, profilingGroupName, putPermissionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Remove one anomaly notifications channel for a profiling group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeNotificationChannelTest() throws ApiException {
        String channelId = null;
        String profilingGroupName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RemoveNotificationChannelResponse response = api.removeNotificationChannel(channelId, profilingGroupName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Removes permissions from a profiling group&#39;s resource-based policy that are provided using an action group. The one supported action group that can be removed is &lt;code&gt;agentPermission&lt;/code&gt; which grants &lt;code&gt;ConfigureAgent&lt;/code&gt; and &lt;code&gt;PostAgent&lt;/code&gt; permissions. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/codeguru/latest/profiler-ug/resource-based-policies.html\&quot;&gt;Resource-based policies in CodeGuru Profiler&lt;/a&gt; in the &lt;i&gt;Amazon CodeGuru Profiler User Guide&lt;/i&gt;, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_ConfigureAgent.html\&quot;&gt; &lt;code&gt;ConfigureAgent&lt;/code&gt; &lt;/a&gt;, and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/codeguru/latest/profiler-api/API_PostAgentProfile.html\&quot;&gt; &lt;code&gt;PostAgentProfile&lt;/code&gt; &lt;/a&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removePermissionTest() throws ApiException {
        String actionGroup = null;
        String profilingGroupName = null;
        String revisionId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RemovePermissionResponse response = api.removePermission(actionGroup, profilingGroupName, revisionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Sends feedback to CodeGuru Profiler about whether the anomaly detected by the analysis is useful or not.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitFeedbackTest() throws ApiException {
        String anomalyInstanceId = null;
        String profilingGroupName = null;
        SubmitFeedbackRequest submitFeedbackRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.submitFeedback(anomalyInstanceId, profilingGroupName, submitFeedbackRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Use to assign one or more tags to a resource. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Use to remove one or more tags from a resource. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a profiling group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProfilingGroupTest() throws ApiException {
        String profilingGroupName = null;
        UpdateProfilingGroupRequest updateProfilingGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateProfilingGroupResponse response = api.updateProfilingGroup(profilingGroupName, updateProfilingGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
