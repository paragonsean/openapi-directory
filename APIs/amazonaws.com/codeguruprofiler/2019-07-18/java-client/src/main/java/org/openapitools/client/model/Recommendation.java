/*
 * Amazon CodeGuru Profiler
 * <p> This section provides documentation for the Amazon CodeGuru Profiler API operations. </p> <p> Amazon CodeGuru Profiler collects runtime performance data from your live applications, and provides recommendations that can help you fine-tune your application performance. Using machine learning algorithms, CodeGuru Profiler can help you find your most expensive lines of code and suggest ways you can improve efficiency and remove CPU bottlenecks. </p> <p> Amazon CodeGuru Profiler provides different visualizations of profiling data to help you identify what code is running on the CPU, see how much time is consumed, and suggest ways to reduce CPU utilization. </p> <note> <p>Amazon CodeGuru Profiler currently supports applications written in all Java virtual machine (JVM) languages and Python. While CodeGuru Profiler supports both visualizations and recommendations for applications written in Java, it can also generate visualizations and a subset of recommendations for applications written in other JVM languages and Python.</p> </note> <p> For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/profiler-ug/what-is-codeguru-profiler.html\">What is Amazon CodeGuru Profiler</a> in the <i>Amazon CodeGuru Profiler User Guide</i>. </p>
 *
 * The version of the OpenAPI document: 2019-07-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RecommendationPattern;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A potential improvement that was found from analyzing the profiling data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:39.524653-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Recommendation {
  public static final String SERIALIZED_NAME_ALL_MATCHES_COUNT = "allMatchesCount";
  @SerializedName(SERIALIZED_NAME_ALL_MATCHES_COUNT)
  private Integer allMatchesCount;

  public static final String SERIALIZED_NAME_ALL_MATCHES_SUM = "allMatchesSum";
  @SerializedName(SERIALIZED_NAME_ALL_MATCHES_SUM)
  private Double allMatchesSum;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_PATTERN = "pattern";
  @SerializedName(SERIALIZED_NAME_PATTERN)
  private RecommendationPattern pattern;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_TOP_MATCHES = "topMatches";
  @SerializedName(SERIALIZED_NAME_TOP_MATCHES)
  private List topMatches;

  public Recommendation() {
  }

  public Recommendation allMatchesCount(Integer allMatchesCount) {
    this.allMatchesCount = allMatchesCount;
    return this;
  }

  /**
   * Get allMatchesCount
   * @return allMatchesCount
   */
  @javax.annotation.Nonnull
  public Integer getAllMatchesCount() {
    return allMatchesCount;
  }

  public void setAllMatchesCount(Integer allMatchesCount) {
    this.allMatchesCount = allMatchesCount;
  }


  public Recommendation allMatchesSum(Double allMatchesSum) {
    this.allMatchesSum = allMatchesSum;
    return this;
  }

  /**
   * Get allMatchesSum
   * @return allMatchesSum
   */
  @javax.annotation.Nonnull
  public Double getAllMatchesSum() {
    return allMatchesSum;
  }

  public void setAllMatchesSum(Double allMatchesSum) {
    this.allMatchesSum = allMatchesSum;
  }


  public Recommendation endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public Recommendation pattern(RecommendationPattern pattern) {
    this.pattern = pattern;
    return this;
  }

  /**
   * Get pattern
   * @return pattern
   */
  @javax.annotation.Nonnull
  public RecommendationPattern getPattern() {
    return pattern;
  }

  public void setPattern(RecommendationPattern pattern) {
    this.pattern = pattern;
  }


  public Recommendation startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public Recommendation topMatches(List topMatches) {
    this.topMatches = topMatches;
    return this;
  }

  /**
   * Get topMatches
   * @return topMatches
   */
  @javax.annotation.Nonnull
  public List getTopMatches() {
    return topMatches;
  }

  public void setTopMatches(List topMatches) {
    this.topMatches = topMatches;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Recommendation recommendation = (Recommendation) o;
    return Objects.equals(this.allMatchesCount, recommendation.allMatchesCount) &&
        Objects.equals(this.allMatchesSum, recommendation.allMatchesSum) &&
        Objects.equals(this.endTime, recommendation.endTime) &&
        Objects.equals(this.pattern, recommendation.pattern) &&
        Objects.equals(this.startTime, recommendation.startTime) &&
        Objects.equals(this.topMatches, recommendation.topMatches);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allMatchesCount, allMatchesSum, endTime, pattern, startTime, topMatches);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Recommendation {\n");
    sb.append("    allMatchesCount: ").append(toIndentedString(allMatchesCount)).append("\n");
    sb.append("    allMatchesSum: ").append(toIndentedString(allMatchesSum)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    pattern: ").append(toIndentedString(pattern)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    topMatches: ").append(toIndentedString(topMatches)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allMatchesCount");
    openapiFields.add("allMatchesSum");
    openapiFields.add("endTime");
    openapiFields.add("pattern");
    openapiFields.add("startTime");
    openapiFields.add("topMatches");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("allMatchesCount");
    openapiRequiredFields.add("allMatchesSum");
    openapiRequiredFields.add("endTime");
    openapiRequiredFields.add("pattern");
    openapiRequiredFields.add("startTime");
    openapiRequiredFields.add("topMatches");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Recommendation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Recommendation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Recommendation is not found in the empty JSON string", Recommendation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Recommendation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Recommendation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Recommendation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `allMatchesCount`
      Integer.validateJsonElement(jsonObj.get("allMatchesCount"));
      // validate the required field `allMatchesSum`
      Double.validateJsonElement(jsonObj.get("allMatchesSum"));
      // validate the required field `endTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("endTime"));
      // validate the required field `pattern`
      RecommendationPattern.validateJsonElement(jsonObj.get("pattern"));
      // validate the required field `startTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("startTime"));
      // validate the required field `topMatches`
      List.validateJsonElement(jsonObj.get("topMatches"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Recommendation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Recommendation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Recommendation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Recommendation.class));

       return (TypeAdapter<T>) new TypeAdapter<Recommendation>() {
           @Override
           public void write(JsonWriter out, Recommendation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Recommendation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Recommendation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Recommendation
   * @throws IOException if the JSON string is invalid with respect to Recommendation
   */
  public static Recommendation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Recommendation.class);
  }

  /**
   * Convert an instance of Recommendation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

