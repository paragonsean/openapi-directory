/*
 * Amazon CodeGuru Profiler
 * <p> This section provides documentation for the Amazon CodeGuru Profiler API operations. </p> <p> Amazon CodeGuru Profiler collects runtime performance data from your live applications, and provides recommendations that can help you fine-tune your application performance. Using machine learning algorithms, CodeGuru Profiler can help you find your most expensive lines of code and suggest ways you can improve efficiency and remove CPU bottlenecks. </p> <p> Amazon CodeGuru Profiler provides different visualizations of profiling data to help you identify what code is running on the CPU, see how much time is consumed, and suggest ways to reduce CPU utilization. </p> <note> <p>Amazon CodeGuru Profiler currently supports applications written in all Java virtual machine (JVM) languages and Python. While CodeGuru Profiler supports both visualizations and recommendations for applications written in Java, it can also generate visualizations and a subset of recommendations for applications written in other JVM languages and Python.</p> </note> <p> For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/profiler-ug/what-is-codeguru-profiler.html\">What is Amazon CodeGuru Profiler</a> in the <i>Amazon CodeGuru Profiler User Guide</i>. </p>
 *
 * The version of the OpenAPI document: 2019-07-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  Information about potential recommendations that might be created from the analysis of profiling data. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:39.524653-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FindingsReportSummary {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PROFILE_END_TIME = "profileEndTime";
  @SerializedName(SERIALIZED_NAME_PROFILE_END_TIME)
  private OffsetDateTime profileEndTime;

  public static final String SERIALIZED_NAME_PROFILE_START_TIME = "profileStartTime";
  @SerializedName(SERIALIZED_NAME_PROFILE_START_TIME)
  private OffsetDateTime profileStartTime;

  public static final String SERIALIZED_NAME_PROFILING_GROUP_NAME = "profilingGroupName";
  @SerializedName(SERIALIZED_NAME_PROFILING_GROUP_NAME)
  private String profilingGroupName;

  public static final String SERIALIZED_NAME_TOTAL_NUMBER_OF_FINDINGS = "totalNumberOfFindings";
  @SerializedName(SERIALIZED_NAME_TOTAL_NUMBER_OF_FINDINGS)
  private Integer totalNumberOfFindings;

  public FindingsReportSummary() {
  }

  public FindingsReportSummary id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public FindingsReportSummary profileEndTime(OffsetDateTime profileEndTime) {
    this.profileEndTime = profileEndTime;
    return this;
  }

  /**
   * Get profileEndTime
   * @return profileEndTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getProfileEndTime() {
    return profileEndTime;
  }

  public void setProfileEndTime(OffsetDateTime profileEndTime) {
    this.profileEndTime = profileEndTime;
  }


  public FindingsReportSummary profileStartTime(OffsetDateTime profileStartTime) {
    this.profileStartTime = profileStartTime;
    return this;
  }

  /**
   * Get profileStartTime
   * @return profileStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getProfileStartTime() {
    return profileStartTime;
  }

  public void setProfileStartTime(OffsetDateTime profileStartTime) {
    this.profileStartTime = profileStartTime;
  }


  public FindingsReportSummary profilingGroupName(String profilingGroupName) {
    this.profilingGroupName = profilingGroupName;
    return this;
  }

  /**
   * Get profilingGroupName
   * @return profilingGroupName
   */
  @javax.annotation.Nullable
  public String getProfilingGroupName() {
    return profilingGroupName;
  }

  public void setProfilingGroupName(String profilingGroupName) {
    this.profilingGroupName = profilingGroupName;
  }


  public FindingsReportSummary totalNumberOfFindings(Integer totalNumberOfFindings) {
    this.totalNumberOfFindings = totalNumberOfFindings;
    return this;
  }

  /**
   * Get totalNumberOfFindings
   * @return totalNumberOfFindings
   */
  @javax.annotation.Nullable
  public Integer getTotalNumberOfFindings() {
    return totalNumberOfFindings;
  }

  public void setTotalNumberOfFindings(Integer totalNumberOfFindings) {
    this.totalNumberOfFindings = totalNumberOfFindings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FindingsReportSummary findingsReportSummary = (FindingsReportSummary) o;
    return Objects.equals(this.id, findingsReportSummary.id) &&
        Objects.equals(this.profileEndTime, findingsReportSummary.profileEndTime) &&
        Objects.equals(this.profileStartTime, findingsReportSummary.profileStartTime) &&
        Objects.equals(this.profilingGroupName, findingsReportSummary.profilingGroupName) &&
        Objects.equals(this.totalNumberOfFindings, findingsReportSummary.totalNumberOfFindings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, profileEndTime, profileStartTime, profilingGroupName, totalNumberOfFindings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FindingsReportSummary {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    profileEndTime: ").append(toIndentedString(profileEndTime)).append("\n");
    sb.append("    profileStartTime: ").append(toIndentedString(profileStartTime)).append("\n");
    sb.append("    profilingGroupName: ").append(toIndentedString(profilingGroupName)).append("\n");
    sb.append("    totalNumberOfFindings: ").append(toIndentedString(totalNumberOfFindings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("profileEndTime");
    openapiFields.add("profileStartTime");
    openapiFields.add("profilingGroupName");
    openapiFields.add("totalNumberOfFindings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FindingsReportSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FindingsReportSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FindingsReportSummary is not found in the empty JSON string", FindingsReportSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FindingsReportSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FindingsReportSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `id`
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("id"));
      }
      // validate the optional field `profileEndTime`
      if (jsonObj.get("profileEndTime") != null && !jsonObj.get("profileEndTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("profileEndTime"));
      }
      // validate the optional field `profileStartTime`
      if (jsonObj.get("profileStartTime") != null && !jsonObj.get("profileStartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("profileStartTime"));
      }
      // validate the optional field `profilingGroupName`
      if (jsonObj.get("profilingGroupName") != null && !jsonObj.get("profilingGroupName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("profilingGroupName"));
      }
      // validate the optional field `totalNumberOfFindings`
      if (jsonObj.get("totalNumberOfFindings") != null && !jsonObj.get("totalNumberOfFindings").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("totalNumberOfFindings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FindingsReportSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FindingsReportSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FindingsReportSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FindingsReportSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<FindingsReportSummary>() {
           @Override
           public void write(JsonWriter out, FindingsReportSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FindingsReportSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FindingsReportSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FindingsReportSummary
   * @throws IOException if the JSON string is invalid with respect to FindingsReportSummary
   */
  public static FindingsReportSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FindingsReportSummary.class);
  }

  /**
   * Convert an instance of FindingsReportSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

