/*
 * Amazon CodeGuru Profiler
 * <p> This section provides documentation for the Amazon CodeGuru Profiler API operations. </p> <p> Amazon CodeGuru Profiler collects runtime performance data from your live applications, and provides recommendations that can help you fine-tune your application performance. Using machine learning algorithms, CodeGuru Profiler can help you find your most expensive lines of code and suggest ways you can improve efficiency and remove CPU bottlenecks. </p> <p> Amazon CodeGuru Profiler provides different visualizations of profiling data to help you identify what code is running on the CPU, see how much time is consumed, and suggest ways to reduce CPU utilization. </p> <note> <p>Amazon CodeGuru Profiler currently supports applications written in all Java virtual machine (JVM) languages and Python. While CodeGuru Profiler supports both visualizations and recommendations for applications written in Java, it can also generate visualizations and a subset of recommendations for applications written in other JVM languages and Python.</p> </note> <p> For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/profiler-ug/what-is-codeguru-profiler.html\">What is Amazon CodeGuru Profiler</a> in the <i>Amazon CodeGuru Profiler User Guide</i>. </p>
 *
 * The version of the OpenAPI document: 2019-07-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  A set of rules used to make a recommendation during an analysis. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:39.524653-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Pattern {
  public static final String SERIALIZED_NAME_COUNTERS_TO_AGGREGATE = "countersToAggregate";
  @SerializedName(SERIALIZED_NAME_COUNTERS_TO_AGGREGATE)
  private List countersToAggregate;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RESOLUTION_STEPS = "resolutionSteps";
  @SerializedName(SERIALIZED_NAME_RESOLUTION_STEPS)
  private String resolutionSteps;

  public static final String SERIALIZED_NAME_TARGET_FRAMES = "targetFrames";
  @SerializedName(SERIALIZED_NAME_TARGET_FRAMES)
  private List targetFrames;

  public static final String SERIALIZED_NAME_THRESHOLD_PERCENT = "thresholdPercent";
  @SerializedName(SERIALIZED_NAME_THRESHOLD_PERCENT)
  private Double thresholdPercent;

  public Pattern() {
  }

  public Pattern countersToAggregate(List countersToAggregate) {
    this.countersToAggregate = countersToAggregate;
    return this;
  }

  /**
   * Get countersToAggregate
   * @return countersToAggregate
   */
  @javax.annotation.Nullable
  public List getCountersToAggregate() {
    return countersToAggregate;
  }

  public void setCountersToAggregate(List countersToAggregate) {
    this.countersToAggregate = countersToAggregate;
  }


  public Pattern description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Pattern id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Pattern name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Pattern resolutionSteps(String resolutionSteps) {
    this.resolutionSteps = resolutionSteps;
    return this;
  }

  /**
   * Get resolutionSteps
   * @return resolutionSteps
   */
  @javax.annotation.Nullable
  public String getResolutionSteps() {
    return resolutionSteps;
  }

  public void setResolutionSteps(String resolutionSteps) {
    this.resolutionSteps = resolutionSteps;
  }


  public Pattern targetFrames(List targetFrames) {
    this.targetFrames = targetFrames;
    return this;
  }

  /**
   * Get targetFrames
   * @return targetFrames
   */
  @javax.annotation.Nullable
  public List getTargetFrames() {
    return targetFrames;
  }

  public void setTargetFrames(List targetFrames) {
    this.targetFrames = targetFrames;
  }


  public Pattern thresholdPercent(Double thresholdPercent) {
    this.thresholdPercent = thresholdPercent;
    return this;
  }

  /**
   * Get thresholdPercent
   * @return thresholdPercent
   */
  @javax.annotation.Nullable
  public Double getThresholdPercent() {
    return thresholdPercent;
  }

  public void setThresholdPercent(Double thresholdPercent) {
    this.thresholdPercent = thresholdPercent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Pattern pattern = (Pattern) o;
    return Objects.equals(this.countersToAggregate, pattern.countersToAggregate) &&
        Objects.equals(this.description, pattern.description) &&
        Objects.equals(this.id, pattern.id) &&
        Objects.equals(this.name, pattern.name) &&
        Objects.equals(this.resolutionSteps, pattern.resolutionSteps) &&
        Objects.equals(this.targetFrames, pattern.targetFrames) &&
        Objects.equals(this.thresholdPercent, pattern.thresholdPercent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countersToAggregate, description, id, name, resolutionSteps, targetFrames, thresholdPercent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Pattern {\n");
    sb.append("    countersToAggregate: ").append(toIndentedString(countersToAggregate)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    resolutionSteps: ").append(toIndentedString(resolutionSteps)).append("\n");
    sb.append("    targetFrames: ").append(toIndentedString(targetFrames)).append("\n");
    sb.append("    thresholdPercent: ").append(toIndentedString(thresholdPercent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("countersToAggregate");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("resolutionSteps");
    openapiFields.add("targetFrames");
    openapiFields.add("thresholdPercent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Pattern
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Pattern.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Pattern is not found in the empty JSON string", Pattern.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Pattern.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Pattern` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `countersToAggregate`
      if (jsonObj.get("countersToAggregate") != null && !jsonObj.get("countersToAggregate").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("countersToAggregate"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `id`
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("id"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `resolutionSteps`
      if (jsonObj.get("resolutionSteps") != null && !jsonObj.get("resolutionSteps").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("resolutionSteps"));
      }
      // validate the optional field `targetFrames`
      if (jsonObj.get("targetFrames") != null && !jsonObj.get("targetFrames").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("targetFrames"));
      }
      // validate the optional field `thresholdPercent`
      if (jsonObj.get("thresholdPercent") != null && !jsonObj.get("thresholdPercent").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("thresholdPercent"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Pattern.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Pattern' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Pattern> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Pattern.class));

       return (TypeAdapter<T>) new TypeAdapter<Pattern>() {
           @Override
           public void write(JsonWriter out, Pattern value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Pattern read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Pattern given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Pattern
   * @throws IOException if the JSON string is invalid with respect to Pattern
   */
  public static Pattern fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Pattern.class);
  }

  /**
   * Convert an instance of Pattern to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

