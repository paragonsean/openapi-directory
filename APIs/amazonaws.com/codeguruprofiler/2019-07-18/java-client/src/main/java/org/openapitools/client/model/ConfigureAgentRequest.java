/*
 * Amazon CodeGuru Profiler
 * <p> This section provides documentation for the Amazon CodeGuru Profiler API operations. </p> <p> Amazon CodeGuru Profiler collects runtime performance data from your live applications, and provides recommendations that can help you fine-tune your application performance. Using machine learning algorithms, CodeGuru Profiler can help you find your most expensive lines of code and suggest ways you can improve efficiency and remove CPU bottlenecks. </p> <p> Amazon CodeGuru Profiler provides different visualizations of profiling data to help you identify what code is running on the CPU, see how much time is consumed, and suggest ways to reduce CPU utilization. </p> <note> <p>Amazon CodeGuru Profiler currently supports applications written in all Java virtual machine (JVM) languages and Python. While CodeGuru Profiler supports both visualizations and recommendations for applications written in Java, it can also generate visualizations and a subset of recommendations for applications written in other JVM languages and Python.</p> </note> <p> For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/profiler-ug/what-is-codeguru-profiler.html\">What is Amazon CodeGuru Profiler</a> in the <i>Amazon CodeGuru Profiler User Guide</i>. </p>
 *
 * The version of the OpenAPI document: 2019-07-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConfigureAgentRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:39.524653-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConfigureAgentRequest {
  public static final String SERIALIZED_NAME_FLEET_INSTANCE_ID = "fleetInstanceId";
  @SerializedName(SERIALIZED_NAME_FLEET_INSTANCE_ID)
  private String fleetInstanceId;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = new HashMap<>();

  public ConfigureAgentRequest() {
  }

  public ConfigureAgentRequest fleetInstanceId(String fleetInstanceId) {
    this.fleetInstanceId = fleetInstanceId;
    return this;
  }

  /**
   *  A universally unique identifier (UUID) for a profiling instance. For example, if the profiling instance is an Amazon EC2 instance, it is the instance ID. If it is an AWS Fargate container, it is the container&#39;s task ID. 
   * @return fleetInstanceId
   */
  @javax.annotation.Nullable
  public String getFleetInstanceId() {
    return fleetInstanceId;
  }

  public void setFleetInstanceId(String fleetInstanceId) {
    this.fleetInstanceId = fleetInstanceId;
  }


  public ConfigureAgentRequest metadata(Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public ConfigureAgentRequest putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * &lt;p&gt; Metadata captured about the compute platform the agent is running on. It includes information about sampling and reporting. The valid fields are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;COMPUTE_PLATFORM&lt;/code&gt; - The compute platform on which the agent is running &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AGENT_ID&lt;/code&gt; - The ID for an agent instance. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AWS_REQUEST_ID&lt;/code&gt; - The AWS request ID of a Lambda invocation. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;EXECUTION_ENVIRONMENT&lt;/code&gt; - The execution environment a Lambda function is running on. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LAMBDA_FUNCTION_ARN&lt;/code&gt; - The Amazon Resource Name (ARN) that is used to invoke a Lambda function. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LAMBDA_MEMORY_LIMIT_IN_MB&lt;/code&gt; - The memory allocated to a Lambda function. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LAMBDA_REMAINING_TIME_IN_MILLISECONDS&lt;/code&gt; - The time in milliseconds before execution of a Lambda function times out. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LAMBDA_TIME_GAP_BETWEEN_INVOKES_IN_MILLISECONDS&lt;/code&gt; - The time in milliseconds between two invocations of a Lambda function. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LAMBDA_PREVIOUS_EXECUTION_TIME_IN_MILLISECONDS&lt;/code&gt; - The time in milliseconds for the previous Lambda invocation. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigureAgentRequest configureAgentRequest = (ConfigureAgentRequest) o;
    return Objects.equals(this.fleetInstanceId, configureAgentRequest.fleetInstanceId) &&
        Objects.equals(this.metadata, configureAgentRequest.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fleetInstanceId, metadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigureAgentRequest {\n");
    sb.append("    fleetInstanceId: ").append(toIndentedString(fleetInstanceId)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fleetInstanceId");
    openapiFields.add("metadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigureAgentRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigureAgentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigureAgentRequest is not found in the empty JSON string", ConfigureAgentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigureAgentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigureAgentRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("fleetInstanceId") != null && !jsonObj.get("fleetInstanceId").isJsonNull()) && !jsonObj.get("fleetInstanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fleetInstanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fleetInstanceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigureAgentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigureAgentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigureAgentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigureAgentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigureAgentRequest>() {
           @Override
           public void write(JsonWriter out, ConfigureAgentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigureAgentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigureAgentRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigureAgentRequest
   * @throws IOException if the JSON string is invalid with respect to ConfigureAgentRequest
   */
  public static ConfigureAgentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigureAgentRequest.class);
  }

  /**
   * Convert an instance of ConfigureAgentRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

