/*
 * Amazon CodeGuru Profiler
 * <p> This section provides documentation for the Amazon CodeGuru Profiler API operations. </p> <p> Amazon CodeGuru Profiler collects runtime performance data from your live applications, and provides recommendations that can help you fine-tune your application performance. Using machine learning algorithms, CodeGuru Profiler can help you find your most expensive lines of code and suggest ways you can improve efficiency and remove CPU bottlenecks. </p> <p> Amazon CodeGuru Profiler provides different visualizations of profiling data to help you identify what code is running on the CPU, see how much time is consumed, and suggest ways to reduce CPU utilization. </p> <note> <p>Amazon CodeGuru Profiler currently supports applications written in all Java virtual machine (JVM) languages and Python. While CodeGuru Profiler supports both visualizations and recommendations for applications written in Java, it can also generate visualizations and a subset of recommendations for applications written in other JVM languages and Python.</p> </note> <p> For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/profiler-ug/what-is-codeguru-profiler.html\">What is Amazon CodeGuru Profiler</a> in the <i>Amazon CodeGuru Profiler User Guide</i>. </p>
 *
 * The version of the OpenAPI document: 2019-07-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AggregationPeriod;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The structure representing the BatchGetFrameMetricDataResponse.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:39.524653-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchGetFrameMetricDataResponse {
  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_END_TIMES = "endTimes";
  @SerializedName(SERIALIZED_NAME_END_TIMES)
  private List endTimes;

  public static final String SERIALIZED_NAME_FRAME_METRIC_DATA = "frameMetricData";
  @SerializedName(SERIALIZED_NAME_FRAME_METRIC_DATA)
  private List frameMetricData;

  public static final String SERIALIZED_NAME_RESOLUTION = "resolution";
  @SerializedName(SERIALIZED_NAME_RESOLUTION)
  private AggregationPeriod resolution;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_UNPROCESSED_END_TIMES = "unprocessedEndTimes";
  @SerializedName(SERIALIZED_NAME_UNPROCESSED_END_TIMES)
  private Map unprocessedEndTimes;

  public BatchGetFrameMetricDataResponse() {
  }

  public BatchGetFrameMetricDataResponse endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public BatchGetFrameMetricDataResponse endTimes(List endTimes) {
    this.endTimes = endTimes;
    return this;
  }

  /**
   * Get endTimes
   * @return endTimes
   */
  @javax.annotation.Nonnull
  public List getEndTimes() {
    return endTimes;
  }

  public void setEndTimes(List endTimes) {
    this.endTimes = endTimes;
  }


  public BatchGetFrameMetricDataResponse frameMetricData(List frameMetricData) {
    this.frameMetricData = frameMetricData;
    return this;
  }

  /**
   * Get frameMetricData
   * @return frameMetricData
   */
  @javax.annotation.Nonnull
  public List getFrameMetricData() {
    return frameMetricData;
  }

  public void setFrameMetricData(List frameMetricData) {
    this.frameMetricData = frameMetricData;
  }


  public BatchGetFrameMetricDataResponse resolution(AggregationPeriod resolution) {
    this.resolution = resolution;
    return this;
  }

  /**
   * Get resolution
   * @return resolution
   */
  @javax.annotation.Nonnull
  public AggregationPeriod getResolution() {
    return resolution;
  }

  public void setResolution(AggregationPeriod resolution) {
    this.resolution = resolution;
  }


  public BatchGetFrameMetricDataResponse startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public BatchGetFrameMetricDataResponse unprocessedEndTimes(Map unprocessedEndTimes) {
    this.unprocessedEndTimes = unprocessedEndTimes;
    return this;
  }

  /**
   * Get unprocessedEndTimes
   * @return unprocessedEndTimes
   */
  @javax.annotation.Nonnull
  public Map getUnprocessedEndTimes() {
    return unprocessedEndTimes;
  }

  public void setUnprocessedEndTimes(Map unprocessedEndTimes) {
    this.unprocessedEndTimes = unprocessedEndTimes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchGetFrameMetricDataResponse batchGetFrameMetricDataResponse = (BatchGetFrameMetricDataResponse) o;
    return Objects.equals(this.endTime, batchGetFrameMetricDataResponse.endTime) &&
        Objects.equals(this.endTimes, batchGetFrameMetricDataResponse.endTimes) &&
        Objects.equals(this.frameMetricData, batchGetFrameMetricDataResponse.frameMetricData) &&
        Objects.equals(this.resolution, batchGetFrameMetricDataResponse.resolution) &&
        Objects.equals(this.startTime, batchGetFrameMetricDataResponse.startTime) &&
        Objects.equals(this.unprocessedEndTimes, batchGetFrameMetricDataResponse.unprocessedEndTimes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endTime, endTimes, frameMetricData, resolution, startTime, unprocessedEndTimes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchGetFrameMetricDataResponse {\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    endTimes: ").append(toIndentedString(endTimes)).append("\n");
    sb.append("    frameMetricData: ").append(toIndentedString(frameMetricData)).append("\n");
    sb.append("    resolution: ").append(toIndentedString(resolution)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    unprocessedEndTimes: ").append(toIndentedString(unprocessedEndTimes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endTime");
    openapiFields.add("endTimes");
    openapiFields.add("frameMetricData");
    openapiFields.add("resolution");
    openapiFields.add("startTime");
    openapiFields.add("unprocessedEndTimes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("endTime");
    openapiRequiredFields.add("endTimes");
    openapiRequiredFields.add("frameMetricData");
    openapiRequiredFields.add("resolution");
    openapiRequiredFields.add("startTime");
    openapiRequiredFields.add("unprocessedEndTimes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchGetFrameMetricDataResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchGetFrameMetricDataResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchGetFrameMetricDataResponse is not found in the empty JSON string", BatchGetFrameMetricDataResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchGetFrameMetricDataResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchGetFrameMetricDataResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BatchGetFrameMetricDataResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `endTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("endTime"));
      // validate the required field `endTimes`
      List.validateJsonElement(jsonObj.get("endTimes"));
      // validate the required field `frameMetricData`
      List.validateJsonElement(jsonObj.get("frameMetricData"));
      // validate the required field `resolution`
      AggregationPeriod.validateJsonElement(jsonObj.get("resolution"));
      // validate the required field `startTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("startTime"));
      // validate the required field `unprocessedEndTimes`
      Map.validateJsonElement(jsonObj.get("unprocessedEndTimes"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchGetFrameMetricDataResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchGetFrameMetricDataResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchGetFrameMetricDataResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchGetFrameMetricDataResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchGetFrameMetricDataResponse>() {
           @Override
           public void write(JsonWriter out, BatchGetFrameMetricDataResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchGetFrameMetricDataResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchGetFrameMetricDataResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchGetFrameMetricDataResponse
   * @throws IOException if the JSON string is invalid with respect to BatchGetFrameMetricDataResponse
   */
  public static BatchGetFrameMetricDataResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchGetFrameMetricDataResponse.class);
  }

  /**
   * Convert an instance of BatchGetFrameMetricDataResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

