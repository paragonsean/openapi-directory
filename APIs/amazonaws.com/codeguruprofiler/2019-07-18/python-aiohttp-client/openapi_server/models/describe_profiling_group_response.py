# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.describe_profiling_group_response_profiling_group import DescribeProfilingGroupResponseProfilingGroup
from openapi_server import util


class DescribeProfilingGroupResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, profiling_group: DescribeProfilingGroupResponseProfilingGroup=None):
        """DescribeProfilingGroupResponse - a model defined in OpenAPI

        :param profiling_group: The profiling_group of this DescribeProfilingGroupResponse.
        """
        self.openapi_types = {
            'profiling_group': DescribeProfilingGroupResponseProfilingGroup
        }

        self.attribute_map = {
            'profiling_group': 'profilingGroup'
        }

        self._profiling_group = profiling_group

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeProfilingGroupResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeProfilingGroupResponse of this DescribeProfilingGroupResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def profiling_group(self):
        """Gets the profiling_group of this DescribeProfilingGroupResponse.


        :return: The profiling_group of this DescribeProfilingGroupResponse.
        :rtype: DescribeProfilingGroupResponseProfilingGroup
        """
        return self._profiling_group

    @profiling_group.setter
    def profiling_group(self, profiling_group):
        """Sets the profiling_group of this DescribeProfilingGroupResponse.


        :param profiling_group: The profiling_group of this DescribeProfilingGroupResponse.
        :type profiling_group: DescribeProfilingGroupResponseProfilingGroup
        """
        if profiling_group is None:
            raise ValueError("Invalid value for `profiling_group`, must not be `None`")

        self._profiling_group = profiling_group
