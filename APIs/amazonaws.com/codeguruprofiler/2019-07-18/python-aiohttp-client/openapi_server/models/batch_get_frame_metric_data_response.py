# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aggregation_period import AggregationPeriod
from openapi_server import util


class BatchGetFrameMetricDataResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: datetime=None, end_times: List=None, frame_metric_data: List=None, resolution: AggregationPeriod=None, start_time: datetime=None, unprocessed_end_times: Dict=None):
        """BatchGetFrameMetricDataResponse - a model defined in OpenAPI

        :param end_time: The end_time of this BatchGetFrameMetricDataResponse.
        :param end_times: The end_times of this BatchGetFrameMetricDataResponse.
        :param frame_metric_data: The frame_metric_data of this BatchGetFrameMetricDataResponse.
        :param resolution: The resolution of this BatchGetFrameMetricDataResponse.
        :param start_time: The start_time of this BatchGetFrameMetricDataResponse.
        :param unprocessed_end_times: The unprocessed_end_times of this BatchGetFrameMetricDataResponse.
        """
        self.openapi_types = {
            'end_time': datetime,
            'end_times': List,
            'frame_metric_data': List,
            'resolution': AggregationPeriod,
            'start_time': datetime,
            'unprocessed_end_times': Dict
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'end_times': 'endTimes',
            'frame_metric_data': 'frameMetricData',
            'resolution': 'resolution',
            'start_time': 'startTime',
            'unprocessed_end_times': 'unprocessedEndTimes'
        }

        self._end_time = end_time
        self._end_times = end_times
        self._frame_metric_data = frame_metric_data
        self._resolution = resolution
        self._start_time = start_time
        self._unprocessed_end_times = unprocessed_end_times

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchGetFrameMetricDataResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchGetFrameMetricDataResponse of this BatchGetFrameMetricDataResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this BatchGetFrameMetricDataResponse.


        :return: The end_time of this BatchGetFrameMetricDataResponse.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this BatchGetFrameMetricDataResponse.


        :param end_time: The end_time of this BatchGetFrameMetricDataResponse.
        :type end_time: datetime
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")

        self._end_time = end_time

    @property
    def end_times(self):
        """Gets the end_times of this BatchGetFrameMetricDataResponse.


        :return: The end_times of this BatchGetFrameMetricDataResponse.
        :rtype: List
        """
        return self._end_times

    @end_times.setter
    def end_times(self, end_times):
        """Sets the end_times of this BatchGetFrameMetricDataResponse.


        :param end_times: The end_times of this BatchGetFrameMetricDataResponse.
        :type end_times: List
        """
        if end_times is None:
            raise ValueError("Invalid value for `end_times`, must not be `None`")

        self._end_times = end_times

    @property
    def frame_metric_data(self):
        """Gets the frame_metric_data of this BatchGetFrameMetricDataResponse.


        :return: The frame_metric_data of this BatchGetFrameMetricDataResponse.
        :rtype: List
        """
        return self._frame_metric_data

    @frame_metric_data.setter
    def frame_metric_data(self, frame_metric_data):
        """Sets the frame_metric_data of this BatchGetFrameMetricDataResponse.


        :param frame_metric_data: The frame_metric_data of this BatchGetFrameMetricDataResponse.
        :type frame_metric_data: List
        """
        if frame_metric_data is None:
            raise ValueError("Invalid value for `frame_metric_data`, must not be `None`")

        self._frame_metric_data = frame_metric_data

    @property
    def resolution(self):
        """Gets the resolution of this BatchGetFrameMetricDataResponse.


        :return: The resolution of this BatchGetFrameMetricDataResponse.
        :rtype: AggregationPeriod
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this BatchGetFrameMetricDataResponse.


        :param resolution: The resolution of this BatchGetFrameMetricDataResponse.
        :type resolution: AggregationPeriod
        """
        if resolution is None:
            raise ValueError("Invalid value for `resolution`, must not be `None`")

        self._resolution = resolution

    @property
    def start_time(self):
        """Gets the start_time of this BatchGetFrameMetricDataResponse.


        :return: The start_time of this BatchGetFrameMetricDataResponse.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this BatchGetFrameMetricDataResponse.


        :param start_time: The start_time of this BatchGetFrameMetricDataResponse.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def unprocessed_end_times(self):
        """Gets the unprocessed_end_times of this BatchGetFrameMetricDataResponse.


        :return: The unprocessed_end_times of this BatchGetFrameMetricDataResponse.
        :rtype: Dict
        """
        return self._unprocessed_end_times

    @unprocessed_end_times.setter
    def unprocessed_end_times(self, unprocessed_end_times):
        """Sets the unprocessed_end_times of this BatchGetFrameMetricDataResponse.


        :param unprocessed_end_times: The unprocessed_end_times of this BatchGetFrameMetricDataResponse.
        :type unprocessed_end_times: Dict
        """
        if unprocessed_end_times is None:
            raise ValueError("Invalid value for `unprocessed_end_times`, must not be `None`")

        self._unprocessed_end_times = unprocessed_end_times
