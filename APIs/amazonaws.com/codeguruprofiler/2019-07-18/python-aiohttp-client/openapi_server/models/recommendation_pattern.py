# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RecommendationPattern(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, counters_to_aggregate: List=None, description: str=None, id: str=None, name: str=None, resolution_steps: str=None, target_frames: List=None, threshold_percent: float=None):
        """RecommendationPattern - a model defined in OpenAPI

        :param counters_to_aggregate: The counters_to_aggregate of this RecommendationPattern.
        :param description: The description of this RecommendationPattern.
        :param id: The id of this RecommendationPattern.
        :param name: The name of this RecommendationPattern.
        :param resolution_steps: The resolution_steps of this RecommendationPattern.
        :param target_frames: The target_frames of this RecommendationPattern.
        :param threshold_percent: The threshold_percent of this RecommendationPattern.
        """
        self.openapi_types = {
            'counters_to_aggregate': List,
            'description': str,
            'id': str,
            'name': str,
            'resolution_steps': str,
            'target_frames': List,
            'threshold_percent': float
        }

        self.attribute_map = {
            'counters_to_aggregate': 'countersToAggregate',
            'description': 'description',
            'id': 'id',
            'name': 'name',
            'resolution_steps': 'resolutionSteps',
            'target_frames': 'targetFrames',
            'threshold_percent': 'thresholdPercent'
        }

        self._counters_to_aggregate = counters_to_aggregate
        self._description = description
        self._id = id
        self._name = name
        self._resolution_steps = resolution_steps
        self._target_frames = target_frames
        self._threshold_percent = threshold_percent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecommendationPattern':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Recommendation_pattern of this RecommendationPattern.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def counters_to_aggregate(self):
        """Gets the counters_to_aggregate of this RecommendationPattern.


        :return: The counters_to_aggregate of this RecommendationPattern.
        :rtype: List
        """
        return self._counters_to_aggregate

    @counters_to_aggregate.setter
    def counters_to_aggregate(self, counters_to_aggregate):
        """Sets the counters_to_aggregate of this RecommendationPattern.


        :param counters_to_aggregate: The counters_to_aggregate of this RecommendationPattern.
        :type counters_to_aggregate: List
        """

        self._counters_to_aggregate = counters_to_aggregate

    @property
    def description(self):
        """Gets the description of this RecommendationPattern.


        :return: The description of this RecommendationPattern.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RecommendationPattern.


        :param description: The description of this RecommendationPattern.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this RecommendationPattern.


        :return: The id of this RecommendationPattern.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RecommendationPattern.


        :param id: The id of this RecommendationPattern.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this RecommendationPattern.


        :return: The name of this RecommendationPattern.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RecommendationPattern.


        :param name: The name of this RecommendationPattern.
        :type name: str
        """

        self._name = name

    @property
    def resolution_steps(self):
        """Gets the resolution_steps of this RecommendationPattern.


        :return: The resolution_steps of this RecommendationPattern.
        :rtype: str
        """
        return self._resolution_steps

    @resolution_steps.setter
    def resolution_steps(self, resolution_steps):
        """Sets the resolution_steps of this RecommendationPattern.


        :param resolution_steps: The resolution_steps of this RecommendationPattern.
        :type resolution_steps: str
        """

        self._resolution_steps = resolution_steps

    @property
    def target_frames(self):
        """Gets the target_frames of this RecommendationPattern.


        :return: The target_frames of this RecommendationPattern.
        :rtype: List
        """
        return self._target_frames

    @target_frames.setter
    def target_frames(self, target_frames):
        """Sets the target_frames of this RecommendationPattern.


        :param target_frames: The target_frames of this RecommendationPattern.
        :type target_frames: List
        """

        self._target_frames = target_frames

    @property
    def threshold_percent(self):
        """Gets the threshold_percent of this RecommendationPattern.


        :return: The threshold_percent of this RecommendationPattern.
        :rtype: float
        """
        return self._threshold_percent

    @threshold_percent.setter
    def threshold_percent(self, threshold_percent):
        """Sets the threshold_percent of this RecommendationPattern.


        :param threshold_percent: The threshold_percent of this RecommendationPattern.
        :type threshold_percent: float
        """

        self._threshold_percent = threshold_percent
