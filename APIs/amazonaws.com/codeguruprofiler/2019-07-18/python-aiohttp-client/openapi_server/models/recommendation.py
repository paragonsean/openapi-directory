# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recommendation_pattern import RecommendationPattern
from openapi_server import util


class Recommendation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all_matches_count: int=None, all_matches_sum: float=None, end_time: datetime=None, pattern: RecommendationPattern=None, start_time: datetime=None, top_matches: List=None):
        """Recommendation - a model defined in OpenAPI

        :param all_matches_count: The all_matches_count of this Recommendation.
        :param all_matches_sum: The all_matches_sum of this Recommendation.
        :param end_time: The end_time of this Recommendation.
        :param pattern: The pattern of this Recommendation.
        :param start_time: The start_time of this Recommendation.
        :param top_matches: The top_matches of this Recommendation.
        """
        self.openapi_types = {
            'all_matches_count': int,
            'all_matches_sum': float,
            'end_time': datetime,
            'pattern': RecommendationPattern,
            'start_time': datetime,
            'top_matches': List
        }

        self.attribute_map = {
            'all_matches_count': 'allMatchesCount',
            'all_matches_sum': 'allMatchesSum',
            'end_time': 'endTime',
            'pattern': 'pattern',
            'start_time': 'startTime',
            'top_matches': 'topMatches'
        }

        self._all_matches_count = all_matches_count
        self._all_matches_sum = all_matches_sum
        self._end_time = end_time
        self._pattern = pattern
        self._start_time = start_time
        self._top_matches = top_matches

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Recommendation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Recommendation of this Recommendation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all_matches_count(self):
        """Gets the all_matches_count of this Recommendation.


        :return: The all_matches_count of this Recommendation.
        :rtype: int
        """
        return self._all_matches_count

    @all_matches_count.setter
    def all_matches_count(self, all_matches_count):
        """Sets the all_matches_count of this Recommendation.


        :param all_matches_count: The all_matches_count of this Recommendation.
        :type all_matches_count: int
        """
        if all_matches_count is None:
            raise ValueError("Invalid value for `all_matches_count`, must not be `None`")

        self._all_matches_count = all_matches_count

    @property
    def all_matches_sum(self):
        """Gets the all_matches_sum of this Recommendation.


        :return: The all_matches_sum of this Recommendation.
        :rtype: float
        """
        return self._all_matches_sum

    @all_matches_sum.setter
    def all_matches_sum(self, all_matches_sum):
        """Sets the all_matches_sum of this Recommendation.


        :param all_matches_sum: The all_matches_sum of this Recommendation.
        :type all_matches_sum: float
        """
        if all_matches_sum is None:
            raise ValueError("Invalid value for `all_matches_sum`, must not be `None`")

        self._all_matches_sum = all_matches_sum

    @property
    def end_time(self):
        """Gets the end_time of this Recommendation.


        :return: The end_time of this Recommendation.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Recommendation.


        :param end_time: The end_time of this Recommendation.
        :type end_time: datetime
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")

        self._end_time = end_time

    @property
    def pattern(self):
        """Gets the pattern of this Recommendation.


        :return: The pattern of this Recommendation.
        :rtype: RecommendationPattern
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this Recommendation.


        :param pattern: The pattern of this Recommendation.
        :type pattern: RecommendationPattern
        """
        if pattern is None:
            raise ValueError("Invalid value for `pattern`, must not be `None`")

        self._pattern = pattern

    @property
    def start_time(self):
        """Gets the start_time of this Recommendation.


        :return: The start_time of this Recommendation.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Recommendation.


        :param start_time: The start_time of this Recommendation.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def top_matches(self):
        """Gets the top_matches of this Recommendation.


        :return: The top_matches of this Recommendation.
        :rtype: List
        """
        return self._top_matches

    @top_matches.setter
    def top_matches(self, top_matches):
        """Sets the top_matches of this Recommendation.


        :param top_matches: The top_matches of this Recommendation.
        :type top_matches: List
        """
        if top_matches is None:
            raise ValueError("Invalid value for `top_matches`, must not be `None`")

        self._top_matches = top_matches
