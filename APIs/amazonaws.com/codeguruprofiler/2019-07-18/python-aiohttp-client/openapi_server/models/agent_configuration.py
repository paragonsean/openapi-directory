# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AgentConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agent_parameters: Dict=None, period_in_seconds: int=None, should_profile: bool=None):
        """AgentConfiguration - a model defined in OpenAPI

        :param agent_parameters: The agent_parameters of this AgentConfiguration.
        :param period_in_seconds: The period_in_seconds of this AgentConfiguration.
        :param should_profile: The should_profile of this AgentConfiguration.
        """
        self.openapi_types = {
            'agent_parameters': Dict,
            'period_in_seconds': int,
            'should_profile': bool
        }

        self.attribute_map = {
            'agent_parameters': 'agentParameters',
            'period_in_seconds': 'periodInSeconds',
            'should_profile': 'shouldProfile'
        }

        self._agent_parameters = agent_parameters
        self._period_in_seconds = period_in_seconds
        self._should_profile = should_profile

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AgentConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AgentConfiguration of this AgentConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent_parameters(self):
        """Gets the agent_parameters of this AgentConfiguration.


        :return: The agent_parameters of this AgentConfiguration.
        :rtype: Dict
        """
        return self._agent_parameters

    @agent_parameters.setter
    def agent_parameters(self, agent_parameters):
        """Sets the agent_parameters of this AgentConfiguration.


        :param agent_parameters: The agent_parameters of this AgentConfiguration.
        :type agent_parameters: Dict
        """

        self._agent_parameters = agent_parameters

    @property
    def period_in_seconds(self):
        """Gets the period_in_seconds of this AgentConfiguration.


        :return: The period_in_seconds of this AgentConfiguration.
        :rtype: int
        """
        return self._period_in_seconds

    @period_in_seconds.setter
    def period_in_seconds(self, period_in_seconds):
        """Sets the period_in_seconds of this AgentConfiguration.


        :param period_in_seconds: The period_in_seconds of this AgentConfiguration.
        :type period_in_seconds: int
        """
        if period_in_seconds is None:
            raise ValueError("Invalid value for `period_in_seconds`, must not be `None`")

        self._period_in_seconds = period_in_seconds

    @property
    def should_profile(self):
        """Gets the should_profile of this AgentConfiguration.


        :return: The should_profile of this AgentConfiguration.
        :rtype: bool
        """
        return self._should_profile

    @should_profile.setter
    def should_profile(self, should_profile):
        """Sets the should_profile of this AgentConfiguration.


        :param should_profile: The should_profile of this AgentConfiguration.
        :type should_profile: bool
        """
        if should_profile is None:
            raise ValueError("Invalid value for `should_profile`, must not be `None`")

        self._should_profile = should_profile
