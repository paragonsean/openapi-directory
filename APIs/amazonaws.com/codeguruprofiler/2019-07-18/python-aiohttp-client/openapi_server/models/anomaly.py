# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.anomaly_metric import AnomalyMetric
from openapi_server import util


class Anomaly(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, instances: List=None, metric: AnomalyMetric=None, reason: str=None):
        """Anomaly - a model defined in OpenAPI

        :param instances: The instances of this Anomaly.
        :param metric: The metric of this Anomaly.
        :param reason: The reason of this Anomaly.
        """
        self.openapi_types = {
            'instances': List,
            'metric': AnomalyMetric,
            'reason': str
        }

        self.attribute_map = {
            'instances': 'instances',
            'metric': 'metric',
            'reason': 'reason'
        }

        self._instances = instances
        self._metric = metric
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Anomaly':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Anomaly of this Anomaly.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def instances(self):
        """Gets the instances of this Anomaly.


        :return: The instances of this Anomaly.
        :rtype: List
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this Anomaly.


        :param instances: The instances of this Anomaly.
        :type instances: List
        """
        if instances is None:
            raise ValueError("Invalid value for `instances`, must not be `None`")

        self._instances = instances

    @property
    def metric(self):
        """Gets the metric of this Anomaly.


        :return: The metric of this Anomaly.
        :rtype: AnomalyMetric
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this Anomaly.


        :param metric: The metric of this Anomaly.
        :type metric: AnomalyMetric
        """
        if metric is None:
            raise ValueError("Invalid value for `metric`, must not be `None`")

        self._metric = metric

    @property
    def reason(self):
        """Gets the reason of this Anomaly.


        :return: The reason of this Anomaly.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this Anomaly.


        :param reason: The reason of this Anomaly.
        :type reason: str
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")

        self._reason = reason
