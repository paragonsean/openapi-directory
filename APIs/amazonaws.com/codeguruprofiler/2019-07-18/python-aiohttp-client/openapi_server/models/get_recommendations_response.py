# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetRecommendationsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, anomalies: List=None, profile_end_time: datetime=None, profile_start_time: datetime=None, profiling_group_name: str=None, recommendations: List=None):
        """GetRecommendationsResponse - a model defined in OpenAPI

        :param anomalies: The anomalies of this GetRecommendationsResponse.
        :param profile_end_time: The profile_end_time of this GetRecommendationsResponse.
        :param profile_start_time: The profile_start_time of this GetRecommendationsResponse.
        :param profiling_group_name: The profiling_group_name of this GetRecommendationsResponse.
        :param recommendations: The recommendations of this GetRecommendationsResponse.
        """
        self.openapi_types = {
            'anomalies': List,
            'profile_end_time': datetime,
            'profile_start_time': datetime,
            'profiling_group_name': str,
            'recommendations': List
        }

        self.attribute_map = {
            'anomalies': 'anomalies',
            'profile_end_time': 'profileEndTime',
            'profile_start_time': 'profileStartTime',
            'profiling_group_name': 'profilingGroupName',
            'recommendations': 'recommendations'
        }

        self._anomalies = anomalies
        self._profile_end_time = profile_end_time
        self._profile_start_time = profile_start_time
        self._profiling_group_name = profiling_group_name
        self._recommendations = recommendations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetRecommendationsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetRecommendationsResponse of this GetRecommendationsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def anomalies(self):
        """Gets the anomalies of this GetRecommendationsResponse.


        :return: The anomalies of this GetRecommendationsResponse.
        :rtype: List
        """
        return self._anomalies

    @anomalies.setter
    def anomalies(self, anomalies):
        """Sets the anomalies of this GetRecommendationsResponse.


        :param anomalies: The anomalies of this GetRecommendationsResponse.
        :type anomalies: List
        """
        if anomalies is None:
            raise ValueError("Invalid value for `anomalies`, must not be `None`")

        self._anomalies = anomalies

    @property
    def profile_end_time(self):
        """Gets the profile_end_time of this GetRecommendationsResponse.


        :return: The profile_end_time of this GetRecommendationsResponse.
        :rtype: datetime
        """
        return self._profile_end_time

    @profile_end_time.setter
    def profile_end_time(self, profile_end_time):
        """Sets the profile_end_time of this GetRecommendationsResponse.


        :param profile_end_time: The profile_end_time of this GetRecommendationsResponse.
        :type profile_end_time: datetime
        """
        if profile_end_time is None:
            raise ValueError("Invalid value for `profile_end_time`, must not be `None`")

        self._profile_end_time = profile_end_time

    @property
    def profile_start_time(self):
        """Gets the profile_start_time of this GetRecommendationsResponse.


        :return: The profile_start_time of this GetRecommendationsResponse.
        :rtype: datetime
        """
        return self._profile_start_time

    @profile_start_time.setter
    def profile_start_time(self, profile_start_time):
        """Sets the profile_start_time of this GetRecommendationsResponse.


        :param profile_start_time: The profile_start_time of this GetRecommendationsResponse.
        :type profile_start_time: datetime
        """
        if profile_start_time is None:
            raise ValueError("Invalid value for `profile_start_time`, must not be `None`")

        self._profile_start_time = profile_start_time

    @property
    def profiling_group_name(self):
        """Gets the profiling_group_name of this GetRecommendationsResponse.


        :return: The profiling_group_name of this GetRecommendationsResponse.
        :rtype: str
        """
        return self._profiling_group_name

    @profiling_group_name.setter
    def profiling_group_name(self, profiling_group_name):
        """Sets the profiling_group_name of this GetRecommendationsResponse.


        :param profiling_group_name: The profiling_group_name of this GetRecommendationsResponse.
        :type profiling_group_name: str
        """
        if profiling_group_name is None:
            raise ValueError("Invalid value for `profiling_group_name`, must not be `None`")

        self._profiling_group_name = profiling_group_name

    @property
    def recommendations(self):
        """Gets the recommendations of this GetRecommendationsResponse.


        :return: The recommendations of this GetRecommendationsResponse.
        :rtype: List
        """
        return self._recommendations

    @recommendations.setter
    def recommendations(self, recommendations):
        """Sets the recommendations of this GetRecommendationsResponse.


        :param recommendations: The recommendations of this GetRecommendationsResponse.
        :type recommendations: List
        """
        if recommendations is None:
            raise ValueError("Invalid value for `recommendations`, must not be `None`")

        self._recommendations = recommendations
