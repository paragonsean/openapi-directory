# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_profiling_group_request_agent_orchestration_config import CreateProfilingGroupRequestAgentOrchestrationConfig
import re
from openapi_server import util


class CreateProfilingGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agent_orchestration_config: CreateProfilingGroupRequestAgentOrchestrationConfig=None, compute_platform: str=None, profiling_group_name: str=None, tags: Dict[str, str]=None):
        """CreateProfilingGroupRequest - a model defined in OpenAPI

        :param agent_orchestration_config: The agent_orchestration_config of this CreateProfilingGroupRequest.
        :param compute_platform: The compute_platform of this CreateProfilingGroupRequest.
        :param profiling_group_name: The profiling_group_name of this CreateProfilingGroupRequest.
        :param tags: The tags of this CreateProfilingGroupRequest.
        """
        self.openapi_types = {
            'agent_orchestration_config': CreateProfilingGroupRequestAgentOrchestrationConfig,
            'compute_platform': str,
            'profiling_group_name': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'agent_orchestration_config': 'agentOrchestrationConfig',
            'compute_platform': 'computePlatform',
            'profiling_group_name': 'profilingGroupName',
            'tags': 'tags'
        }

        self._agent_orchestration_config = agent_orchestration_config
        self._compute_platform = compute_platform
        self._profiling_group_name = profiling_group_name
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateProfilingGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateProfilingGroup_request of this CreateProfilingGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent_orchestration_config(self):
        """Gets the agent_orchestration_config of this CreateProfilingGroupRequest.


        :return: The agent_orchestration_config of this CreateProfilingGroupRequest.
        :rtype: CreateProfilingGroupRequestAgentOrchestrationConfig
        """
        return self._agent_orchestration_config

    @agent_orchestration_config.setter
    def agent_orchestration_config(self, agent_orchestration_config):
        """Sets the agent_orchestration_config of this CreateProfilingGroupRequest.


        :param agent_orchestration_config: The agent_orchestration_config of this CreateProfilingGroupRequest.
        :type agent_orchestration_config: CreateProfilingGroupRequestAgentOrchestrationConfig
        """

        self._agent_orchestration_config = agent_orchestration_config

    @property
    def compute_platform(self):
        """Gets the compute_platform of this CreateProfilingGroupRequest.

         The compute platform of the profiling group. Use <code>AWSLambda</code> if your application runs on AWS Lambda. Use <code>Default</code> if your application runs on a compute platform that is not AWS Lambda, such an Amazon EC2 instance, an on-premises server, or a different platform. If not specified, <code>Default</code> is used. 

        :return: The compute_platform of this CreateProfilingGroupRequest.
        :rtype: str
        """
        return self._compute_platform

    @compute_platform.setter
    def compute_platform(self, compute_platform):
        """Sets the compute_platform of this CreateProfilingGroupRequest.

         The compute platform of the profiling group. Use <code>AWSLambda</code> if your application runs on AWS Lambda. Use <code>Default</code> if your application runs on a compute platform that is not AWS Lambda, such an Amazon EC2 instance, an on-premises server, or a different platform. If not specified, <code>Default</code> is used. 

        :param compute_platform: The compute_platform of this CreateProfilingGroupRequest.
        :type compute_platform: str
        """
        allowed_values = ["Default", "AWSLambda"]  # noqa: E501
        if compute_platform not in allowed_values:
            raise ValueError(
                "Invalid value for `compute_platform` ({0}), must be one of {1}"
                .format(compute_platform, allowed_values)
            )

        self._compute_platform = compute_platform

    @property
    def profiling_group_name(self):
        """Gets the profiling_group_name of this CreateProfilingGroupRequest.

        The name of the profiling group to create.

        :return: The profiling_group_name of this CreateProfilingGroupRequest.
        :rtype: str
        """
        return self._profiling_group_name

    @profiling_group_name.setter
    def profiling_group_name(self, profiling_group_name):
        """Sets the profiling_group_name of this CreateProfilingGroupRequest.

        The name of the profiling group to create.

        :param profiling_group_name: The profiling_group_name of this CreateProfilingGroupRequest.
        :type profiling_group_name: str
        """
        if profiling_group_name is None:
            raise ValueError("Invalid value for `profiling_group_name`, must not be `None`")
        if profiling_group_name is not None and len(profiling_group_name) > 255:
            raise ValueError("Invalid value for `profiling_group_name`, length must be less than or equal to `255`")
        if profiling_group_name is not None and len(profiling_group_name) < 1:
            raise ValueError("Invalid value for `profiling_group_name`, length must be greater than or equal to `1`")
        if profiling_group_name is not None and not re.search(r'^[\w-]+$', profiling_group_name):
            raise ValueError("Invalid value for `profiling_group_name`, must be a follow pattern or equal to `/^[\w-]+$/`")

        self._profiling_group_name = profiling_group_name

    @property
    def tags(self):
        """Gets the tags of this CreateProfilingGroupRequest.

         A list of tags to add to the created profiling group. 

        :return: The tags of this CreateProfilingGroupRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateProfilingGroupRequest.

         A list of tags to add to the created profiling group. 

        :param tags: The tags of this CreateProfilingGroupRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags
