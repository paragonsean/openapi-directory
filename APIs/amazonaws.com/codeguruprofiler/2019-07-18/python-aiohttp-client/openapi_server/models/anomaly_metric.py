# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metric_type import MetricType
from openapi_server import util


class AnomalyMetric(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, frame_name: str=None, thread_states: List=None, type: MetricType=None):
        """AnomalyMetric - a model defined in OpenAPI

        :param frame_name: The frame_name of this AnomalyMetric.
        :param thread_states: The thread_states of this AnomalyMetric.
        :param type: The type of this AnomalyMetric.
        """
        self.openapi_types = {
            'frame_name': str,
            'thread_states': List,
            'type': MetricType
        }

        self.attribute_map = {
            'frame_name': 'frameName',
            'thread_states': 'threadStates',
            'type': 'type'
        }

        self._frame_name = frame_name
        self._thread_states = thread_states
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnomalyMetric':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Anomaly_metric of this AnomalyMetric.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def frame_name(self):
        """Gets the frame_name of this AnomalyMetric.


        :return: The frame_name of this AnomalyMetric.
        :rtype: str
        """
        return self._frame_name

    @frame_name.setter
    def frame_name(self, frame_name):
        """Sets the frame_name of this AnomalyMetric.


        :param frame_name: The frame_name of this AnomalyMetric.
        :type frame_name: str
        """
        if frame_name is None:
            raise ValueError("Invalid value for `frame_name`, must not be `None`")

        self._frame_name = frame_name

    @property
    def thread_states(self):
        """Gets the thread_states of this AnomalyMetric.


        :return: The thread_states of this AnomalyMetric.
        :rtype: List
        """
        return self._thread_states

    @thread_states.setter
    def thread_states(self, thread_states):
        """Sets the thread_states of this AnomalyMetric.


        :param thread_states: The thread_states of this AnomalyMetric.
        :type thread_states: List
        """
        if thread_states is None:
            raise ValueError("Invalid value for `thread_states`, must not be `None`")

        self._thread_states = thread_states

    @property
    def type(self):
        """Gets the type of this AnomalyMetric.


        :return: The type of this AnomalyMetric.
        :rtype: MetricType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AnomalyMetric.


        :param type: The type of this AnomalyMetric.
        :type type: MetricType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
