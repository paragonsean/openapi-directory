# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class PutPermissionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, principals: List[str]=None, revision_id: str=None):
        """PutPermissionRequest - a model defined in OpenAPI

        :param principals: The principals of this PutPermissionRequest.
        :param revision_id: The revision_id of this PutPermissionRequest.
        """
        self.openapi_types = {
            'principals': List[str],
            'revision_id': str
        }

        self.attribute_map = {
            'principals': 'principals',
            'revision_id': 'revisionId'
        }

        self._principals = principals
        self._revision_id = revision_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutPermissionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutPermission_request of this PutPermissionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def principals(self):
        """Gets the principals of this PutPermissionRequest.

         A list ARNs for the roles and users you want to grant access to the profiling group. Wildcards are not are supported in the ARNs. 

        :return: The principals of this PutPermissionRequest.
        :rtype: List[str]
        """
        return self._principals

    @principals.setter
    def principals(self, principals):
        """Sets the principals of this PutPermissionRequest.

         A list ARNs for the roles and users you want to grant access to the profiling group. Wildcards are not are supported in the ARNs. 

        :param principals: The principals of this PutPermissionRequest.
        :type principals: List[str]
        """
        if principals is None:
            raise ValueError("Invalid value for `principals`, must not be `None`")
        if principals is not None and len(principals) > 50:
            raise ValueError("Invalid value for `principals`, number of items must be less than or equal to `50`")
        if principals is not None and len(principals) < 1:
            raise ValueError("Invalid value for `principals`, number of items must be greater than or equal to `1`")

        self._principals = principals

    @property
    def revision_id(self):
        """Gets the revision_id of this PutPermissionRequest.

         A universally unique identifier (UUID) for the revision of the policy you are adding to the profiling group. Do not specify this when you add permissions to a profiling group for the first time. If a policy already exists on the profiling group, you must specify the <code>revisionId</code>. 

        :return: The revision_id of this PutPermissionRequest.
        :rtype: str
        """
        return self._revision_id

    @revision_id.setter
    def revision_id(self, revision_id):
        """Sets the revision_id of this PutPermissionRequest.

         A universally unique identifier (UUID) for the revision of the policy you are adding to the profiling group. Do not specify this when you add permissions to a profiling group for the first time. If a policy already exists on the profiling group, you must specify the <code>revisionId</code>. 

        :param revision_id: The revision_id of this PutPermissionRequest.
        :type revision_id: str
        """
        if revision_id is not None and not re.search(r'[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}', revision_id):
            raise ValueError("Invalid value for `revision_id`, must be a follow pattern or equal to `/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}/`")

        self._revision_id = revision_id
