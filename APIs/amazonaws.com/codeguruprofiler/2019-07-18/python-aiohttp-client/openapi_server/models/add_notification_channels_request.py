# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel import Channel
from openapi_server import util


class AddNotificationChannelsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channels: List[Channel]=None):
        """AddNotificationChannelsRequest - a model defined in OpenAPI

        :param channels: The channels of this AddNotificationChannelsRequest.
        """
        self.openapi_types = {
            'channels': List[Channel]
        }

        self.attribute_map = {
            'channels': 'channels'
        }

        self._channels = channels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddNotificationChannelsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddNotificationChannels_request of this AddNotificationChannelsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channels(self):
        """Gets the channels of this AddNotificationChannelsRequest.

        One or 2 channels to report to when anomalies are detected.

        :return: The channels of this AddNotificationChannelsRequest.
        :rtype: List[Channel]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this AddNotificationChannelsRequest.

        One or 2 channels to report to when anomalies are detected.

        :param channels: The channels of this AddNotificationChannelsRequest.
        :type channels: List[Channel]
        """
        if channels is None:
            raise ValueError("Invalid value for `channels`, must not be `None`")
        if channels is not None and len(channels) > 2:
            raise ValueError("Invalid value for `channels`, number of items must be less than or equal to `2`")
        if channels is not None and len(channels) < 1:
            raise ValueError("Invalid value for `channels`, number of items must be greater than or equal to `1`")

        self._channels = channels
