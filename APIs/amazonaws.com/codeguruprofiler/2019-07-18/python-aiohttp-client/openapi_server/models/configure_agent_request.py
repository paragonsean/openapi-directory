# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConfigureAgentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fleet_instance_id: str=None, metadata: Dict[str, str]=None):
        """ConfigureAgentRequest - a model defined in OpenAPI

        :param fleet_instance_id: The fleet_instance_id of this ConfigureAgentRequest.
        :param metadata: The metadata of this ConfigureAgentRequest.
        """
        self.openapi_types = {
            'fleet_instance_id': str,
            'metadata': Dict[str, str]
        }

        self.attribute_map = {
            'fleet_instance_id': 'fleetInstanceId',
            'metadata': 'metadata'
        }

        self._fleet_instance_id = fleet_instance_id
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigureAgentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigureAgent_request of this ConfigureAgentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fleet_instance_id(self):
        """Gets the fleet_instance_id of this ConfigureAgentRequest.

         A universally unique identifier (UUID) for a profiling instance. For example, if the profiling instance is an Amazon EC2 instance, it is the instance ID. If it is an AWS Fargate container, it is the container's task ID. 

        :return: The fleet_instance_id of this ConfigureAgentRequest.
        :rtype: str
        """
        return self._fleet_instance_id

    @fleet_instance_id.setter
    def fleet_instance_id(self, fleet_instance_id):
        """Sets the fleet_instance_id of this ConfigureAgentRequest.

         A universally unique identifier (UUID) for a profiling instance. For example, if the profiling instance is an Amazon EC2 instance, it is the instance ID. If it is an AWS Fargate container, it is the container's task ID. 

        :param fleet_instance_id: The fleet_instance_id of this ConfigureAgentRequest.
        :type fleet_instance_id: str
        """
        if fleet_instance_id is not None and len(fleet_instance_id) > 255:
            raise ValueError("Invalid value for `fleet_instance_id`, length must be less than or equal to `255`")
        if fleet_instance_id is not None and len(fleet_instance_id) < 1:
            raise ValueError("Invalid value for `fleet_instance_id`, length must be greater than or equal to `1`")

        self._fleet_instance_id = fleet_instance_id

    @property
    def metadata(self):
        """Gets the metadata of this ConfigureAgentRequest.

        <p> Metadata captured about the compute platform the agent is running on. It includes information about sampling and reporting. The valid fields are:</p> <ul> <li> <p> <code>COMPUTE_PLATFORM</code> - The compute platform on which the agent is running </p> </li> <li> <p> <code>AGENT_ID</code> - The ID for an agent instance. </p> </li> <li> <p> <code>AWS_REQUEST_ID</code> - The AWS request ID of a Lambda invocation. </p> </li> <li> <p> <code>EXECUTION_ENVIRONMENT</code> - The execution environment a Lambda function is running on. </p> </li> <li> <p> <code>LAMBDA_FUNCTION_ARN</code> - The Amazon Resource Name (ARN) that is used to invoke a Lambda function. </p> </li> <li> <p> <code>LAMBDA_MEMORY_LIMIT_IN_MB</code> - The memory allocated to a Lambda function. </p> </li> <li> <p> <code>LAMBDA_REMAINING_TIME_IN_MILLISECONDS</code> - The time in milliseconds before execution of a Lambda function times out. </p> </li> <li> <p> <code>LAMBDA_TIME_GAP_BETWEEN_INVOKES_IN_MILLISECONDS</code> - The time in milliseconds between two invocations of a Lambda function. </p> </li> <li> <p> <code>LAMBDA_PREVIOUS_EXECUTION_TIME_IN_MILLISECONDS</code> - The time in milliseconds for the previous Lambda invocation. </p> </li> </ul>

        :return: The metadata of this ConfigureAgentRequest.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ConfigureAgentRequest.

        <p> Metadata captured about the compute platform the agent is running on. It includes information about sampling and reporting. The valid fields are:</p> <ul> <li> <p> <code>COMPUTE_PLATFORM</code> - The compute platform on which the agent is running </p> </li> <li> <p> <code>AGENT_ID</code> - The ID for an agent instance. </p> </li> <li> <p> <code>AWS_REQUEST_ID</code> - The AWS request ID of a Lambda invocation. </p> </li> <li> <p> <code>EXECUTION_ENVIRONMENT</code> - The execution environment a Lambda function is running on. </p> </li> <li> <p> <code>LAMBDA_FUNCTION_ARN</code> - The Amazon Resource Name (ARN) that is used to invoke a Lambda function. </p> </li> <li> <p> <code>LAMBDA_MEMORY_LIMIT_IN_MB</code> - The memory allocated to a Lambda function. </p> </li> <li> <p> <code>LAMBDA_REMAINING_TIME_IN_MILLISECONDS</code> - The time in milliseconds before execution of a Lambda function times out. </p> </li> <li> <p> <code>LAMBDA_TIME_GAP_BETWEEN_INVOKES_IN_MILLISECONDS</code> - The time in milliseconds between two invocations of a Lambda function. </p> </li> <li> <p> <code>LAMBDA_PREVIOUS_EXECUTION_TIME_IN_MILLISECONDS</code> - The time in milliseconds for the previous Lambda invocation. </p> </li> </ul>

        :param metadata: The metadata of this ConfigureAgentRequest.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata
