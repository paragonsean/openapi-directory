# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.frame_metric import FrameMetric
from openapi_server import util


class FrameMetricDatum(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, frame_metric: FrameMetric=None, values: List=None):
        """FrameMetricDatum - a model defined in OpenAPI

        :param frame_metric: The frame_metric of this FrameMetricDatum.
        :param values: The values of this FrameMetricDatum.
        """
        self.openapi_types = {
            'frame_metric': FrameMetric,
            'values': List
        }

        self.attribute_map = {
            'frame_metric': 'frameMetric',
            'values': 'values'
        }

        self._frame_metric = frame_metric
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FrameMetricDatum':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FrameMetricDatum of this FrameMetricDatum.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def frame_metric(self):
        """Gets the frame_metric of this FrameMetricDatum.


        :return: The frame_metric of this FrameMetricDatum.
        :rtype: FrameMetric
        """
        return self._frame_metric

    @frame_metric.setter
    def frame_metric(self, frame_metric):
        """Sets the frame_metric of this FrameMetricDatum.


        :param frame_metric: The frame_metric of this FrameMetricDatum.
        :type frame_metric: FrameMetric
        """
        if frame_metric is None:
            raise ValueError("Invalid value for `frame_metric`, must not be `None`")

        self._frame_metric = frame_metric

    @property
    def values(self):
        """Gets the values of this FrameMetricDatum.


        :return: The values of this FrameMetricDatum.
        :rtype: List
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this FrameMetricDatum.


        :param values: The values of this FrameMetricDatum.
        :type values: List
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")

        self._values = values
