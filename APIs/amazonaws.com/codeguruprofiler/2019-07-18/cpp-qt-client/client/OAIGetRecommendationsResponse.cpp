/**
 * Amazon CodeGuru Profiler
 * <p> This section provides documentation for the Amazon CodeGuru Profiler API operations. </p> <p> Amazon CodeGuru Profiler collects runtime performance data from your live applications, and provides recommendations that can help you fine-tune your application performance. Using machine learning algorithms, CodeGuru Profiler can help you find your most expensive lines of code and suggest ways you can improve efficiency and remove CPU bottlenecks. </p> <p> Amazon CodeGuru Profiler provides different visualizations of profiling data to help you identify what code is running on the CPU, see how much time is consumed, and suggest ways to reduce CPU utilization. </p> <note> <p>Amazon CodeGuru Profiler currently supports applications written in all Java virtual machine (JVM) languages and Python. While CodeGuru Profiler supports both visualizations and recommendations for applications written in Java, it can also generate visualizations and a subset of recommendations for applications written in other JVM languages and Python.</p> </note> <p> For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/profiler-ug/what-is-codeguru-profiler.html\">What is Amazon CodeGuru Profiler</a> in the <i>Amazon CodeGuru Profiler User Guide</i>. </p>
 *
 * The version of the OpenAPI document: 2019-07-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetRecommendationsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetRecommendationsResponse::OAIGetRecommendationsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetRecommendationsResponse::OAIGetRecommendationsResponse() {
    this->initializeModel();
}

OAIGetRecommendationsResponse::~OAIGetRecommendationsResponse() {}

void OAIGetRecommendationsResponse::initializeModel() {

    m_anomalies_isSet = false;
    m_anomalies_isValid = false;

    m_profile_end_time_isSet = false;
    m_profile_end_time_isValid = false;

    m_profile_start_time_isSet = false;
    m_profile_start_time_isValid = false;

    m_profiling_group_name_isSet = false;
    m_profiling_group_name_isValid = false;

    m_recommendations_isSet = false;
    m_recommendations_isValid = false;
}

void OAIGetRecommendationsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetRecommendationsResponse::fromJsonObject(QJsonObject json) {

    m_anomalies_isValid = ::OpenAPI::fromJsonValue(m_anomalies, json[QString("anomalies")]);
    m_anomalies_isSet = !json[QString("anomalies")].isNull() && m_anomalies_isValid;

    m_profile_end_time_isValid = ::OpenAPI::fromJsonValue(m_profile_end_time, json[QString("profileEndTime")]);
    m_profile_end_time_isSet = !json[QString("profileEndTime")].isNull() && m_profile_end_time_isValid;

    m_profile_start_time_isValid = ::OpenAPI::fromJsonValue(m_profile_start_time, json[QString("profileStartTime")]);
    m_profile_start_time_isSet = !json[QString("profileStartTime")].isNull() && m_profile_start_time_isValid;

    m_profiling_group_name_isValid = ::OpenAPI::fromJsonValue(m_profiling_group_name, json[QString("profilingGroupName")]);
    m_profiling_group_name_isSet = !json[QString("profilingGroupName")].isNull() && m_profiling_group_name_isValid;

    m_recommendations_isValid = ::OpenAPI::fromJsonValue(m_recommendations, json[QString("recommendations")]);
    m_recommendations_isSet = !json[QString("recommendations")].isNull() && m_recommendations_isValid;
}

QString OAIGetRecommendationsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetRecommendationsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_anomalies.isSet()) {
        obj.insert(QString("anomalies"), ::OpenAPI::toJsonValue(m_anomalies));
    }
    if (m_profile_end_time_isSet) {
        obj.insert(QString("profileEndTime"), ::OpenAPI::toJsonValue(m_profile_end_time));
    }
    if (m_profile_start_time_isSet) {
        obj.insert(QString("profileStartTime"), ::OpenAPI::toJsonValue(m_profile_start_time));
    }
    if (m_profiling_group_name_isSet) {
        obj.insert(QString("profilingGroupName"), ::OpenAPI::toJsonValue(m_profiling_group_name));
    }
    if (m_recommendations.isSet()) {
        obj.insert(QString("recommendations"), ::OpenAPI::toJsonValue(m_recommendations));
    }
    return obj;
}

QList OAIGetRecommendationsResponse::getAnomalies() const {
    return m_anomalies;
}
void OAIGetRecommendationsResponse::setAnomalies(const QList &anomalies) {
    m_anomalies = anomalies;
    m_anomalies_isSet = true;
}

bool OAIGetRecommendationsResponse::is_anomalies_Set() const{
    return m_anomalies_isSet;
}

bool OAIGetRecommendationsResponse::is_anomalies_Valid() const{
    return m_anomalies_isValid;
}

QDateTime OAIGetRecommendationsResponse::getProfileEndTime() const {
    return m_profile_end_time;
}
void OAIGetRecommendationsResponse::setProfileEndTime(const QDateTime &profile_end_time) {
    m_profile_end_time = profile_end_time;
    m_profile_end_time_isSet = true;
}

bool OAIGetRecommendationsResponse::is_profile_end_time_Set() const{
    return m_profile_end_time_isSet;
}

bool OAIGetRecommendationsResponse::is_profile_end_time_Valid() const{
    return m_profile_end_time_isValid;
}

QDateTime OAIGetRecommendationsResponse::getProfileStartTime() const {
    return m_profile_start_time;
}
void OAIGetRecommendationsResponse::setProfileStartTime(const QDateTime &profile_start_time) {
    m_profile_start_time = profile_start_time;
    m_profile_start_time_isSet = true;
}

bool OAIGetRecommendationsResponse::is_profile_start_time_Set() const{
    return m_profile_start_time_isSet;
}

bool OAIGetRecommendationsResponse::is_profile_start_time_Valid() const{
    return m_profile_start_time_isValid;
}

QString OAIGetRecommendationsResponse::getProfilingGroupName() const {
    return m_profiling_group_name;
}
void OAIGetRecommendationsResponse::setProfilingGroupName(const QString &profiling_group_name) {
    m_profiling_group_name = profiling_group_name;
    m_profiling_group_name_isSet = true;
}

bool OAIGetRecommendationsResponse::is_profiling_group_name_Set() const{
    return m_profiling_group_name_isSet;
}

bool OAIGetRecommendationsResponse::is_profiling_group_name_Valid() const{
    return m_profiling_group_name_isValid;
}

QList OAIGetRecommendationsResponse::getRecommendations() const {
    return m_recommendations;
}
void OAIGetRecommendationsResponse::setRecommendations(const QList &recommendations) {
    m_recommendations = recommendations;
    m_recommendations_isSet = true;
}

bool OAIGetRecommendationsResponse::is_recommendations_Set() const{
    return m_recommendations_isSet;
}

bool OAIGetRecommendationsResponse::is_recommendations_Valid() const{
    return m_recommendations_isValid;
}

bool OAIGetRecommendationsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_anomalies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profiling_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetRecommendationsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_anomalies_isValid && m_profile_end_time_isValid && m_profile_start_time_isValid && m_profiling_group_name_isValid && m_recommendations_isValid && true;
}

} // namespace OpenAPI
