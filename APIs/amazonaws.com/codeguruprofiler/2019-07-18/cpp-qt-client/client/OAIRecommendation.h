/**
 * Amazon CodeGuru Profiler
 * <p> This section provides documentation for the Amazon CodeGuru Profiler API operations. </p> <p> Amazon CodeGuru Profiler collects runtime performance data from your live applications, and provides recommendations that can help you fine-tune your application performance. Using machine learning algorithms, CodeGuru Profiler can help you find your most expensive lines of code and suggest ways you can improve efficiency and remove CPU bottlenecks. </p> <p> Amazon CodeGuru Profiler provides different visualizations of profiling data to help you identify what code is running on the CPU, see how much time is consumed, and suggest ways to reduce CPU utilization. </p> <note> <p>Amazon CodeGuru Profiler currently supports applications written in all Java virtual machine (JVM) languages and Python. While CodeGuru Profiler supports both visualizations and recommendations for applications written in Java, it can also generate visualizations and a subset of recommendations for applications written in other JVM languages and Python.</p> </note> <p> For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/profiler-ug/what-is-codeguru-profiler.html\">What is Amazon CodeGuru Profiler</a> in the <i>Amazon CodeGuru Profiler User Guide</i>. </p>
 *
 * The version of the OpenAPI document: 2019-07-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRecommendation.h
 *
 * A potential improvement that was found from analyzing the profiling data.
 */

#ifndef OAIRecommendation_H
#define OAIRecommendation_H

#include <QJsonObject>

#include "OAIRecommendation_pattern.h"
#include <QDateTime>
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRecommendation_pattern;

class OAIRecommendation : public OAIObject {
public:
    OAIRecommendation();
    OAIRecommendation(QString json);
    ~OAIRecommendation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAllMatchesCount() const;
    void setAllMatchesCount(const qint32 &all_matches_count);
    bool is_all_matches_count_Set() const;
    bool is_all_matches_count_Valid() const;

    double getAllMatchesSum() const;
    void setAllMatchesSum(const double &all_matches_sum);
    bool is_all_matches_sum_Set() const;
    bool is_all_matches_sum_Valid() const;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    OAIRecommendation_pattern getPattern() const;
    void setPattern(const OAIRecommendation_pattern &pattern);
    bool is_pattern_Set() const;
    bool is_pattern_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QList getTopMatches() const;
    void setTopMatches(const QList &top_matches);
    bool is_top_matches_Set() const;
    bool is_top_matches_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_all_matches_count;
    bool m_all_matches_count_isSet;
    bool m_all_matches_count_isValid;

    double m_all_matches_sum;
    bool m_all_matches_sum_isSet;
    bool m_all_matches_sum_isValid;

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    OAIRecommendation_pattern m_pattern;
    bool m_pattern_isSet;
    bool m_pattern_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QList m_top_matches;
    bool m_top_matches_isSet;
    bool m_top_matches_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRecommendation)

#endif // OAIRecommendation_H
