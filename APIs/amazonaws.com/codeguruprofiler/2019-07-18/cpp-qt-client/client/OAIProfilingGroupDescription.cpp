/**
 * Amazon CodeGuru Profiler
 * <p> This section provides documentation for the Amazon CodeGuru Profiler API operations. </p> <p> Amazon CodeGuru Profiler collects runtime performance data from your live applications, and provides recommendations that can help you fine-tune your application performance. Using machine learning algorithms, CodeGuru Profiler can help you find your most expensive lines of code and suggest ways you can improve efficiency and remove CPU bottlenecks. </p> <p> Amazon CodeGuru Profiler provides different visualizations of profiling data to help you identify what code is running on the CPU, see how much time is consumed, and suggest ways to reduce CPU utilization. </p> <note> <p>Amazon CodeGuru Profiler currently supports applications written in all Java virtual machine (JVM) languages and Python. While CodeGuru Profiler supports both visualizations and recommendations for applications written in Java, it can also generate visualizations and a subset of recommendations for applications written in other JVM languages and Python.</p> </note> <p> For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/profiler-ug/what-is-codeguru-profiler.html\">What is Amazon CodeGuru Profiler</a> in the <i>Amazon CodeGuru Profiler User Guide</i>. </p>
 *
 * The version of the OpenAPI document: 2019-07-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProfilingGroupDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProfilingGroupDescription::OAIProfilingGroupDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProfilingGroupDescription::OAIProfilingGroupDescription() {
    this->initializeModel();
}

OAIProfilingGroupDescription::~OAIProfilingGroupDescription() {}

void OAIProfilingGroupDescription::initializeModel() {

    m_agent_orchestration_config_isSet = false;
    m_agent_orchestration_config_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_compute_platform_isSet = false;
    m_compute_platform_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_profiling_status_isSet = false;
    m_profiling_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIProfilingGroupDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProfilingGroupDescription::fromJsonObject(QJsonObject json) {

    m_agent_orchestration_config_isValid = ::OpenAPI::fromJsonValue(m_agent_orchestration_config, json[QString("agentOrchestrationConfig")]);
    m_agent_orchestration_config_isSet = !json[QString("agentOrchestrationConfig")].isNull() && m_agent_orchestration_config_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_compute_platform_isValid = ::OpenAPI::fromJsonValue(m_compute_platform, json[QString("computePlatform")]);
    m_compute_platform_isSet = !json[QString("computePlatform")].isNull() && m_compute_platform_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_profiling_status_isValid = ::OpenAPI::fromJsonValue(m_profiling_status, json[QString("profilingStatus")]);
    m_profiling_status_isSet = !json[QString("profilingStatus")].isNull() && m_profiling_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAIProfilingGroupDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProfilingGroupDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_orchestration_config.isSet()) {
        obj.insert(QString("agentOrchestrationConfig"), ::OpenAPI::toJsonValue(m_agent_orchestration_config));
    }
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_compute_platform.isSet()) {
        obj.insert(QString("computePlatform"), ::OpenAPI::toJsonValue(m_compute_platform));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_profiling_status.isSet()) {
        obj.insert(QString("profilingStatus"), ::OpenAPI::toJsonValue(m_profiling_status));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

OAIProfilingGroupDescription_agentOrchestrationConfig OAIProfilingGroupDescription::getAgentOrchestrationConfig() const {
    return m_agent_orchestration_config;
}
void OAIProfilingGroupDescription::setAgentOrchestrationConfig(const OAIProfilingGroupDescription_agentOrchestrationConfig &agent_orchestration_config) {
    m_agent_orchestration_config = agent_orchestration_config;
    m_agent_orchestration_config_isSet = true;
}

bool OAIProfilingGroupDescription::is_agent_orchestration_config_Set() const{
    return m_agent_orchestration_config_isSet;
}

bool OAIProfilingGroupDescription::is_agent_orchestration_config_Valid() const{
    return m_agent_orchestration_config_isValid;
}

QString OAIProfilingGroupDescription::getArn() const {
    return m_arn;
}
void OAIProfilingGroupDescription::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIProfilingGroupDescription::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIProfilingGroupDescription::is_arn_Valid() const{
    return m_arn_isValid;
}

OAIComputePlatform OAIProfilingGroupDescription::getComputePlatform() const {
    return m_compute_platform;
}
void OAIProfilingGroupDescription::setComputePlatform(const OAIComputePlatform &compute_platform) {
    m_compute_platform = compute_platform;
    m_compute_platform_isSet = true;
}

bool OAIProfilingGroupDescription::is_compute_platform_Set() const{
    return m_compute_platform_isSet;
}

bool OAIProfilingGroupDescription::is_compute_platform_Valid() const{
    return m_compute_platform_isValid;
}

QDateTime OAIProfilingGroupDescription::getCreatedAt() const {
    return m_created_at;
}
void OAIProfilingGroupDescription::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIProfilingGroupDescription::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIProfilingGroupDescription::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIProfilingGroupDescription::getName() const {
    return m_name;
}
void OAIProfilingGroupDescription::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProfilingGroupDescription::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProfilingGroupDescription::is_name_Valid() const{
    return m_name_isValid;
}

OAIProfilingGroupDescription_profilingStatus OAIProfilingGroupDescription::getProfilingStatus() const {
    return m_profiling_status;
}
void OAIProfilingGroupDescription::setProfilingStatus(const OAIProfilingGroupDescription_profilingStatus &profiling_status) {
    m_profiling_status = profiling_status;
    m_profiling_status_isSet = true;
}

bool OAIProfilingGroupDescription::is_profiling_status_Set() const{
    return m_profiling_status_isSet;
}

bool OAIProfilingGroupDescription::is_profiling_status_Valid() const{
    return m_profiling_status_isValid;
}

QMap OAIProfilingGroupDescription::getTags() const {
    return m_tags;
}
void OAIProfilingGroupDescription::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIProfilingGroupDescription::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIProfilingGroupDescription::is_tags_Valid() const{
    return m_tags_isValid;
}

QDateTime OAIProfilingGroupDescription::getUpdatedAt() const {
    return m_updated_at;
}
void OAIProfilingGroupDescription::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIProfilingGroupDescription::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIProfilingGroupDescription::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIProfilingGroupDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_orchestration_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profiling_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProfilingGroupDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
