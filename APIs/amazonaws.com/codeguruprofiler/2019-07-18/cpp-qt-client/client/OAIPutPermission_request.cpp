/**
 * Amazon CodeGuru Profiler
 * <p> This section provides documentation for the Amazon CodeGuru Profiler API operations. </p> <p> Amazon CodeGuru Profiler collects runtime performance data from your live applications, and provides recommendations that can help you fine-tune your application performance. Using machine learning algorithms, CodeGuru Profiler can help you find your most expensive lines of code and suggest ways you can improve efficiency and remove CPU bottlenecks. </p> <p> Amazon CodeGuru Profiler provides different visualizations of profiling data to help you identify what code is running on the CPU, see how much time is consumed, and suggest ways to reduce CPU utilization. </p> <note> <p>Amazon CodeGuru Profiler currently supports applications written in all Java virtual machine (JVM) languages and Python. While CodeGuru Profiler supports both visualizations and recommendations for applications written in Java, it can also generate visualizations and a subset of recommendations for applications written in other JVM languages and Python.</p> </note> <p> For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/profiler-ug/what-is-codeguru-profiler.html\">What is Amazon CodeGuru Profiler</a> in the <i>Amazon CodeGuru Profiler User Guide</i>. </p>
 *
 * The version of the OpenAPI document: 2019-07-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutPermission_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutPermission_request::OAIPutPermission_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutPermission_request::OAIPutPermission_request() {
    this->initializeModel();
}

OAIPutPermission_request::~OAIPutPermission_request() {}

void OAIPutPermission_request::initializeModel() {

    m_principals_isSet = false;
    m_principals_isValid = false;

    m_revision_id_isSet = false;
    m_revision_id_isValid = false;
}

void OAIPutPermission_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutPermission_request::fromJsonObject(QJsonObject json) {

    m_principals_isValid = ::OpenAPI::fromJsonValue(m_principals, json[QString("principals")]);
    m_principals_isSet = !json[QString("principals")].isNull() && m_principals_isValid;

    m_revision_id_isValid = ::OpenAPI::fromJsonValue(m_revision_id, json[QString("revisionId")]);
    m_revision_id_isSet = !json[QString("revisionId")].isNull() && m_revision_id_isValid;
}

QString OAIPutPermission_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutPermission_request::asJsonObject() const {
    QJsonObject obj;
    if (m_principals.size() > 0) {
        obj.insert(QString("principals"), ::OpenAPI::toJsonValue(m_principals));
    }
    if (m_revision_id_isSet) {
        obj.insert(QString("revisionId"), ::OpenAPI::toJsonValue(m_revision_id));
    }
    return obj;
}

QList<QString> OAIPutPermission_request::getPrincipals() const {
    return m_principals;
}
void OAIPutPermission_request::setPrincipals(const QList<QString> &principals) {
    m_principals = principals;
    m_principals_isSet = true;
}

bool OAIPutPermission_request::is_principals_Set() const{
    return m_principals_isSet;
}

bool OAIPutPermission_request::is_principals_Valid() const{
    return m_principals_isValid;
}

QString OAIPutPermission_request::getRevisionId() const {
    return m_revision_id;
}
void OAIPutPermission_request::setRevisionId(const QString &revision_id) {
    m_revision_id = revision_id;
    m_revision_id_isSet = true;
}

bool OAIPutPermission_request::is_revision_id_Set() const{
    return m_revision_id_isSet;
}

bool OAIPutPermission_request::is_revision_id_Valid() const{
    return m_revision_id_isValid;
}

bool OAIPutPermission_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_principals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutPermission_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_principals_isValid && true;
}

} // namespace OpenAPI
