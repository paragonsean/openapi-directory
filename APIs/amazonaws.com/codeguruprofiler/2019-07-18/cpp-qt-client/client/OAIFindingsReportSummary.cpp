/**
 * Amazon CodeGuru Profiler
 * <p> This section provides documentation for the Amazon CodeGuru Profiler API operations. </p> <p> Amazon CodeGuru Profiler collects runtime performance data from your live applications, and provides recommendations that can help you fine-tune your application performance. Using machine learning algorithms, CodeGuru Profiler can help you find your most expensive lines of code and suggest ways you can improve efficiency and remove CPU bottlenecks. </p> <p> Amazon CodeGuru Profiler provides different visualizations of profiling data to help you identify what code is running on the CPU, see how much time is consumed, and suggest ways to reduce CPU utilization. </p> <note> <p>Amazon CodeGuru Profiler currently supports applications written in all Java virtual machine (JVM) languages and Python. While CodeGuru Profiler supports both visualizations and recommendations for applications written in Java, it can also generate visualizations and a subset of recommendations for applications written in other JVM languages and Python.</p> </note> <p> For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/profiler-ug/what-is-codeguru-profiler.html\">What is Amazon CodeGuru Profiler</a> in the <i>Amazon CodeGuru Profiler User Guide</i>. </p>
 *
 * The version of the OpenAPI document: 2019-07-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFindingsReportSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFindingsReportSummary::OAIFindingsReportSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFindingsReportSummary::OAIFindingsReportSummary() {
    this->initializeModel();
}

OAIFindingsReportSummary::~OAIFindingsReportSummary() {}

void OAIFindingsReportSummary::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_profile_end_time_isSet = false;
    m_profile_end_time_isValid = false;

    m_profile_start_time_isSet = false;
    m_profile_start_time_isValid = false;

    m_profiling_group_name_isSet = false;
    m_profiling_group_name_isValid = false;

    m_total_number_of_findings_isSet = false;
    m_total_number_of_findings_isValid = false;
}

void OAIFindingsReportSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFindingsReportSummary::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_profile_end_time_isValid = ::OpenAPI::fromJsonValue(m_profile_end_time, json[QString("profileEndTime")]);
    m_profile_end_time_isSet = !json[QString("profileEndTime")].isNull() && m_profile_end_time_isValid;

    m_profile_start_time_isValid = ::OpenAPI::fromJsonValue(m_profile_start_time, json[QString("profileStartTime")]);
    m_profile_start_time_isSet = !json[QString("profileStartTime")].isNull() && m_profile_start_time_isValid;

    m_profiling_group_name_isValid = ::OpenAPI::fromJsonValue(m_profiling_group_name, json[QString("profilingGroupName")]);
    m_profiling_group_name_isSet = !json[QString("profilingGroupName")].isNull() && m_profiling_group_name_isValid;

    m_total_number_of_findings_isValid = ::OpenAPI::fromJsonValue(m_total_number_of_findings, json[QString("totalNumberOfFindings")]);
    m_total_number_of_findings_isSet = !json[QString("totalNumberOfFindings")].isNull() && m_total_number_of_findings_isValid;
}

QString OAIFindingsReportSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFindingsReportSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_profile_end_time_isSet) {
        obj.insert(QString("profileEndTime"), ::OpenAPI::toJsonValue(m_profile_end_time));
    }
    if (m_profile_start_time_isSet) {
        obj.insert(QString("profileStartTime"), ::OpenAPI::toJsonValue(m_profile_start_time));
    }
    if (m_profiling_group_name_isSet) {
        obj.insert(QString("profilingGroupName"), ::OpenAPI::toJsonValue(m_profiling_group_name));
    }
    if (m_total_number_of_findings_isSet) {
        obj.insert(QString("totalNumberOfFindings"), ::OpenAPI::toJsonValue(m_total_number_of_findings));
    }
    return obj;
}

QString OAIFindingsReportSummary::getId() const {
    return m_id;
}
void OAIFindingsReportSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFindingsReportSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFindingsReportSummary::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIFindingsReportSummary::getProfileEndTime() const {
    return m_profile_end_time;
}
void OAIFindingsReportSummary::setProfileEndTime(const QDateTime &profile_end_time) {
    m_profile_end_time = profile_end_time;
    m_profile_end_time_isSet = true;
}

bool OAIFindingsReportSummary::is_profile_end_time_Set() const{
    return m_profile_end_time_isSet;
}

bool OAIFindingsReportSummary::is_profile_end_time_Valid() const{
    return m_profile_end_time_isValid;
}

QDateTime OAIFindingsReportSummary::getProfileStartTime() const {
    return m_profile_start_time;
}
void OAIFindingsReportSummary::setProfileStartTime(const QDateTime &profile_start_time) {
    m_profile_start_time = profile_start_time;
    m_profile_start_time_isSet = true;
}

bool OAIFindingsReportSummary::is_profile_start_time_Set() const{
    return m_profile_start_time_isSet;
}

bool OAIFindingsReportSummary::is_profile_start_time_Valid() const{
    return m_profile_start_time_isValid;
}

QString OAIFindingsReportSummary::getProfilingGroupName() const {
    return m_profiling_group_name;
}
void OAIFindingsReportSummary::setProfilingGroupName(const QString &profiling_group_name) {
    m_profiling_group_name = profiling_group_name;
    m_profiling_group_name_isSet = true;
}

bool OAIFindingsReportSummary::is_profiling_group_name_Set() const{
    return m_profiling_group_name_isSet;
}

bool OAIFindingsReportSummary::is_profiling_group_name_Valid() const{
    return m_profiling_group_name_isValid;
}

qint32 OAIFindingsReportSummary::getTotalNumberOfFindings() const {
    return m_total_number_of_findings;
}
void OAIFindingsReportSummary::setTotalNumberOfFindings(const qint32 &total_number_of_findings) {
    m_total_number_of_findings = total_number_of_findings;
    m_total_number_of_findings_isSet = true;
}

bool OAIFindingsReportSummary::is_total_number_of_findings_Set() const{
    return m_total_number_of_findings_isSet;
}

bool OAIFindingsReportSummary::is_total_number_of_findings_Valid() const{
    return m_total_number_of_findings_isValid;
}

bool OAIFindingsReportSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profiling_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_number_of_findings_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFindingsReportSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
