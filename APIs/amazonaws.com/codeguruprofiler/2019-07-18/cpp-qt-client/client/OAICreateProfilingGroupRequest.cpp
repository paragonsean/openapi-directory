/**
 * Amazon CodeGuru Profiler
 * <p> This section provides documentation for the Amazon CodeGuru Profiler API operations. </p> <p> Amazon CodeGuru Profiler collects runtime performance data from your live applications, and provides recommendations that can help you fine-tune your application performance. Using machine learning algorithms, CodeGuru Profiler can help you find your most expensive lines of code and suggest ways you can improve efficiency and remove CPU bottlenecks. </p> <p> Amazon CodeGuru Profiler provides different visualizations of profiling data to help you identify what code is running on the CPU, see how much time is consumed, and suggest ways to reduce CPU utilization. </p> <note> <p>Amazon CodeGuru Profiler currently supports applications written in all Java virtual machine (JVM) languages and Python. While CodeGuru Profiler supports both visualizations and recommendations for applications written in Java, it can also generate visualizations and a subset of recommendations for applications written in other JVM languages and Python.</p> </note> <p> For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/profiler-ug/what-is-codeguru-profiler.html\">What is Amazon CodeGuru Profiler</a> in the <i>Amazon CodeGuru Profiler User Guide</i>. </p>
 *
 * The version of the OpenAPI document: 2019-07-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateProfilingGroupRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateProfilingGroupRequest::OAICreateProfilingGroupRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateProfilingGroupRequest::OAICreateProfilingGroupRequest() {
    this->initializeModel();
}

OAICreateProfilingGroupRequest::~OAICreateProfilingGroupRequest() {}

void OAICreateProfilingGroupRequest::initializeModel() {

    m_agent_orchestration_config_isSet = false;
    m_agent_orchestration_config_isValid = false;

    m_compute_platform_isSet = false;
    m_compute_platform_isValid = false;

    m_profiling_group_name_isSet = false;
    m_profiling_group_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateProfilingGroupRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateProfilingGroupRequest::fromJsonObject(QJsonObject json) {

    m_agent_orchestration_config_isValid = ::OpenAPI::fromJsonValue(m_agent_orchestration_config, json[QString("agentOrchestrationConfig")]);
    m_agent_orchestration_config_isSet = !json[QString("agentOrchestrationConfig")].isNull() && m_agent_orchestration_config_isValid;

    m_compute_platform_isValid = ::OpenAPI::fromJsonValue(m_compute_platform, json[QString("computePlatform")]);
    m_compute_platform_isSet = !json[QString("computePlatform")].isNull() && m_compute_platform_isValid;

    m_profiling_group_name_isValid = ::OpenAPI::fromJsonValue(m_profiling_group_name, json[QString("profilingGroupName")]);
    m_profiling_group_name_isSet = !json[QString("profilingGroupName")].isNull() && m_profiling_group_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateProfilingGroupRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateProfilingGroupRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_orchestration_config.isSet()) {
        obj.insert(QString("agentOrchestrationConfig"), ::OpenAPI::toJsonValue(m_agent_orchestration_config));
    }
    if (m_compute_platform.isSet()) {
        obj.insert(QString("computePlatform"), ::OpenAPI::toJsonValue(m_compute_platform));
    }
    if (m_profiling_group_name_isSet) {
        obj.insert(QString("profilingGroupName"), ::OpenAPI::toJsonValue(m_profiling_group_name));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAICreateProfilingGroupRequest_agentOrchestrationConfig OAICreateProfilingGroupRequest::getAgentOrchestrationConfig() const {
    return m_agent_orchestration_config;
}
void OAICreateProfilingGroupRequest::setAgentOrchestrationConfig(const OAICreateProfilingGroupRequest_agentOrchestrationConfig &agent_orchestration_config) {
    m_agent_orchestration_config = agent_orchestration_config;
    m_agent_orchestration_config_isSet = true;
}

bool OAICreateProfilingGroupRequest::is_agent_orchestration_config_Set() const{
    return m_agent_orchestration_config_isSet;
}

bool OAICreateProfilingGroupRequest::is_agent_orchestration_config_Valid() const{
    return m_agent_orchestration_config_isValid;
}

OAIComputePlatform OAICreateProfilingGroupRequest::getComputePlatform() const {
    return m_compute_platform;
}
void OAICreateProfilingGroupRequest::setComputePlatform(const OAIComputePlatform &compute_platform) {
    m_compute_platform = compute_platform;
    m_compute_platform_isSet = true;
}

bool OAICreateProfilingGroupRequest::is_compute_platform_Set() const{
    return m_compute_platform_isSet;
}

bool OAICreateProfilingGroupRequest::is_compute_platform_Valid() const{
    return m_compute_platform_isValid;
}

QString OAICreateProfilingGroupRequest::getProfilingGroupName() const {
    return m_profiling_group_name;
}
void OAICreateProfilingGroupRequest::setProfilingGroupName(const QString &profiling_group_name) {
    m_profiling_group_name = profiling_group_name;
    m_profiling_group_name_isSet = true;
}

bool OAICreateProfilingGroupRequest::is_profiling_group_name_Set() const{
    return m_profiling_group_name_isSet;
}

bool OAICreateProfilingGroupRequest::is_profiling_group_name_Valid() const{
    return m_profiling_group_name_isValid;
}

QMap OAICreateProfilingGroupRequest::getTags() const {
    return m_tags;
}
void OAICreateProfilingGroupRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateProfilingGroupRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateProfilingGroupRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateProfilingGroupRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_orchestration_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_profiling_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateProfilingGroupRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_profiling_group_name_isValid && true;
}

} // namespace OpenAPI
