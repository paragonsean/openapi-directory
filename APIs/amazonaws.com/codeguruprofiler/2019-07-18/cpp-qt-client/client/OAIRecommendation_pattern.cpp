/**
 * Amazon CodeGuru Profiler
 * <p> This section provides documentation for the Amazon CodeGuru Profiler API operations. </p> <p> Amazon CodeGuru Profiler collects runtime performance data from your live applications, and provides recommendations that can help you fine-tune your application performance. Using machine learning algorithms, CodeGuru Profiler can help you find your most expensive lines of code and suggest ways you can improve efficiency and remove CPU bottlenecks. </p> <p> Amazon CodeGuru Profiler provides different visualizations of profiling data to help you identify what code is running on the CPU, see how much time is consumed, and suggest ways to reduce CPU utilization. </p> <note> <p>Amazon CodeGuru Profiler currently supports applications written in all Java virtual machine (JVM) languages and Python. While CodeGuru Profiler supports both visualizations and recommendations for applications written in Java, it can also generate visualizations and a subset of recommendations for applications written in other JVM languages and Python.</p> </note> <p> For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/profiler-ug/what-is-codeguru-profiler.html\">What is Amazon CodeGuru Profiler</a> in the <i>Amazon CodeGuru Profiler User Guide</i>. </p>
 *
 * The version of the OpenAPI document: 2019-07-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendation_pattern.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendation_pattern::OAIRecommendation_pattern(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendation_pattern::OAIRecommendation_pattern() {
    this->initializeModel();
}

OAIRecommendation_pattern::~OAIRecommendation_pattern() {}

void OAIRecommendation_pattern::initializeModel() {

    m_counters_to_aggregate_isSet = false;
    m_counters_to_aggregate_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_resolution_steps_isSet = false;
    m_resolution_steps_isValid = false;

    m_target_frames_isSet = false;
    m_target_frames_isValid = false;

    m_threshold_percent_isSet = false;
    m_threshold_percent_isValid = false;
}

void OAIRecommendation_pattern::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecommendation_pattern::fromJsonObject(QJsonObject json) {

    m_counters_to_aggregate_isValid = ::OpenAPI::fromJsonValue(m_counters_to_aggregate, json[QString("countersToAggregate")]);
    m_counters_to_aggregate_isSet = !json[QString("countersToAggregate")].isNull() && m_counters_to_aggregate_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_resolution_steps_isValid = ::OpenAPI::fromJsonValue(m_resolution_steps, json[QString("resolutionSteps")]);
    m_resolution_steps_isSet = !json[QString("resolutionSteps")].isNull() && m_resolution_steps_isValid;

    m_target_frames_isValid = ::OpenAPI::fromJsonValue(m_target_frames, json[QString("targetFrames")]);
    m_target_frames_isSet = !json[QString("targetFrames")].isNull() && m_target_frames_isValid;

    m_threshold_percent_isValid = ::OpenAPI::fromJsonValue(m_threshold_percent, json[QString("thresholdPercent")]);
    m_threshold_percent_isSet = !json[QString("thresholdPercent")].isNull() && m_threshold_percent_isValid;
}

QString OAIRecommendation_pattern::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecommendation_pattern::asJsonObject() const {
    QJsonObject obj;
    if (m_counters_to_aggregate.isSet()) {
        obj.insert(QString("countersToAggregate"), ::OpenAPI::toJsonValue(m_counters_to_aggregate));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resolution_steps_isSet) {
        obj.insert(QString("resolutionSteps"), ::OpenAPI::toJsonValue(m_resolution_steps));
    }
    if (m_target_frames.isSet()) {
        obj.insert(QString("targetFrames"), ::OpenAPI::toJsonValue(m_target_frames));
    }
    if (m_threshold_percent_isSet) {
        obj.insert(QString("thresholdPercent"), ::OpenAPI::toJsonValue(m_threshold_percent));
    }
    return obj;
}

QList OAIRecommendation_pattern::getCountersToAggregate() const {
    return m_counters_to_aggregate;
}
void OAIRecommendation_pattern::setCountersToAggregate(const QList &counters_to_aggregate) {
    m_counters_to_aggregate = counters_to_aggregate;
    m_counters_to_aggregate_isSet = true;
}

bool OAIRecommendation_pattern::is_counters_to_aggregate_Set() const{
    return m_counters_to_aggregate_isSet;
}

bool OAIRecommendation_pattern::is_counters_to_aggregate_Valid() const{
    return m_counters_to_aggregate_isValid;
}

QString OAIRecommendation_pattern::getDescription() const {
    return m_description;
}
void OAIRecommendation_pattern::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRecommendation_pattern::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRecommendation_pattern::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIRecommendation_pattern::getId() const {
    return m_id;
}
void OAIRecommendation_pattern::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRecommendation_pattern::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRecommendation_pattern::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRecommendation_pattern::getName() const {
    return m_name;
}
void OAIRecommendation_pattern::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRecommendation_pattern::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRecommendation_pattern::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRecommendation_pattern::getResolutionSteps() const {
    return m_resolution_steps;
}
void OAIRecommendation_pattern::setResolutionSteps(const QString &resolution_steps) {
    m_resolution_steps = resolution_steps;
    m_resolution_steps_isSet = true;
}

bool OAIRecommendation_pattern::is_resolution_steps_Set() const{
    return m_resolution_steps_isSet;
}

bool OAIRecommendation_pattern::is_resolution_steps_Valid() const{
    return m_resolution_steps_isValid;
}

QList OAIRecommendation_pattern::getTargetFrames() const {
    return m_target_frames;
}
void OAIRecommendation_pattern::setTargetFrames(const QList &target_frames) {
    m_target_frames = target_frames;
    m_target_frames_isSet = true;
}

bool OAIRecommendation_pattern::is_target_frames_Set() const{
    return m_target_frames_isSet;
}

bool OAIRecommendation_pattern::is_target_frames_Valid() const{
    return m_target_frames_isValid;
}

double OAIRecommendation_pattern::getThresholdPercent() const {
    return m_threshold_percent;
}
void OAIRecommendation_pattern::setThresholdPercent(const double &threshold_percent) {
    m_threshold_percent = threshold_percent;
    m_threshold_percent_isSet = true;
}

bool OAIRecommendation_pattern::is_threshold_percent_Set() const{
    return m_threshold_percent_isSet;
}

bool OAIRecommendation_pattern::is_threshold_percent_Valid() const{
    return m_threshold_percent_isValid;
}

bool OAIRecommendation_pattern::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_counters_to_aggregate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_steps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_frames.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_threshold_percent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecommendation_pattern::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
