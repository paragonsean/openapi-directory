/**
 * Amazon CodeGuru Profiler
 * <p> This section provides documentation for the Amazon CodeGuru Profiler API operations. </p> <p> Amazon CodeGuru Profiler collects runtime performance data from your live applications, and provides recommendations that can help you fine-tune your application performance. Using machine learning algorithms, CodeGuru Profiler can help you find your most expensive lines of code and suggest ways you can improve efficiency and remove CPU bottlenecks. </p> <p> Amazon CodeGuru Profiler provides different visualizations of profiling data to help you identify what code is running on the CPU, see how much time is consumed, and suggest ways to reduce CPU utilization. </p> <note> <p>Amazon CodeGuru Profiler currently supports applications written in all Java virtual machine (JVM) languages and Python. While CodeGuru Profiler supports both visualizations and recommendations for applications written in Java, it can also generate visualizations and a subset of recommendations for applications written in other JVM languages and Python.</p> </note> <p> For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/profiler-ug/what-is-codeguru-profiler.html\">What is Amazon CodeGuru Profiler</a> in the <i>Amazon CodeGuru Profiler User Guide</i>. </p>
 *
 * The version of the OpenAPI document: 2019-07-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigureAgent_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigureAgent_request::OAIConfigureAgent_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigureAgent_request::OAIConfigureAgent_request() {
    this->initializeModel();
}

OAIConfigureAgent_request::~OAIConfigureAgent_request() {}

void OAIConfigureAgent_request::initializeModel() {

    m_fleet_instance_id_isSet = false;
    m_fleet_instance_id_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;
}

void OAIConfigureAgent_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigureAgent_request::fromJsonObject(QJsonObject json) {

    m_fleet_instance_id_isValid = ::OpenAPI::fromJsonValue(m_fleet_instance_id, json[QString("fleetInstanceId")]);
    m_fleet_instance_id_isSet = !json[QString("fleetInstanceId")].isNull() && m_fleet_instance_id_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;
}

QString OAIConfigureAgent_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigureAgent_request::asJsonObject() const {
    QJsonObject obj;
    if (m_fleet_instance_id_isSet) {
        obj.insert(QString("fleetInstanceId"), ::OpenAPI::toJsonValue(m_fleet_instance_id));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    return obj;
}

QString OAIConfigureAgent_request::getFleetInstanceId() const {
    return m_fleet_instance_id;
}
void OAIConfigureAgent_request::setFleetInstanceId(const QString &fleet_instance_id) {
    m_fleet_instance_id = fleet_instance_id;
    m_fleet_instance_id_isSet = true;
}

bool OAIConfigureAgent_request::is_fleet_instance_id_Set() const{
    return m_fleet_instance_id_isSet;
}

bool OAIConfigureAgent_request::is_fleet_instance_id_Valid() const{
    return m_fleet_instance_id_isValid;
}

QMap<QString, QString> OAIConfigureAgent_request::getMetadata() const {
    return m_metadata;
}
void OAIConfigureAgent_request::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIConfigureAgent_request::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIConfigureAgent_request::is_metadata_Valid() const{
    return m_metadata_isValid;
}

bool OAIConfigureAgent_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fleet_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigureAgent_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
