/**
 * Amazon CodeGuru Profiler
 * <p> This section provides documentation for the Amazon CodeGuru Profiler API operations. </p> <p> Amazon CodeGuru Profiler collects runtime performance data from your live applications, and provides recommendations that can help you fine-tune your application performance. Using machine learning algorithms, CodeGuru Profiler can help you find your most expensive lines of code and suggest ways you can improve efficiency and remove CPU bottlenecks. </p> <p> Amazon CodeGuru Profiler provides different visualizations of profiling data to help you identify what code is running on the CPU, see how much time is consumed, and suggest ways to reduce CPU utilization. </p> <note> <p>Amazon CodeGuru Profiler currently supports applications written in all Java virtual machine (JVM) languages and Python. While CodeGuru Profiler supports both visualizations and recommendations for applications written in Java, it can also generate visualizations and a subset of recommendations for applications written in other JVM languages and Python.</p> </note> <p> For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/profiler-ug/what-is-codeguru-profiler.html\">What is Amazon CodeGuru Profiler</a> in the <i>Amazon CodeGuru Profiler User Guide</i>. </p>
 *
 * The version of the OpenAPI document: 2019-07-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchGetFrameMetricDataResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchGetFrameMetricDataResponse::OAIBatchGetFrameMetricDataResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchGetFrameMetricDataResponse::OAIBatchGetFrameMetricDataResponse() {
    this->initializeModel();
}

OAIBatchGetFrameMetricDataResponse::~OAIBatchGetFrameMetricDataResponse() {}

void OAIBatchGetFrameMetricDataResponse::initializeModel() {

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_end_times_isSet = false;
    m_end_times_isValid = false;

    m_frame_metric_data_isSet = false;
    m_frame_metric_data_isValid = false;

    m_resolution_isSet = false;
    m_resolution_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_unprocessed_end_times_isSet = false;
    m_unprocessed_end_times_isValid = false;
}

void OAIBatchGetFrameMetricDataResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchGetFrameMetricDataResponse::fromJsonObject(QJsonObject json) {

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_end_times_isValid = ::OpenAPI::fromJsonValue(m_end_times, json[QString("endTimes")]);
    m_end_times_isSet = !json[QString("endTimes")].isNull() && m_end_times_isValid;

    m_frame_metric_data_isValid = ::OpenAPI::fromJsonValue(m_frame_metric_data, json[QString("frameMetricData")]);
    m_frame_metric_data_isSet = !json[QString("frameMetricData")].isNull() && m_frame_metric_data_isValid;

    m_resolution_isValid = ::OpenAPI::fromJsonValue(m_resolution, json[QString("resolution")]);
    m_resolution_isSet = !json[QString("resolution")].isNull() && m_resolution_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_unprocessed_end_times_isValid = ::OpenAPI::fromJsonValue(m_unprocessed_end_times, json[QString("unprocessedEndTimes")]);
    m_unprocessed_end_times_isSet = !json[QString("unprocessedEndTimes")].isNull() && m_unprocessed_end_times_isValid;
}

QString OAIBatchGetFrameMetricDataResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchGetFrameMetricDataResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_end_times.isSet()) {
        obj.insert(QString("endTimes"), ::OpenAPI::toJsonValue(m_end_times));
    }
    if (m_frame_metric_data.isSet()) {
        obj.insert(QString("frameMetricData"), ::OpenAPI::toJsonValue(m_frame_metric_data));
    }
    if (m_resolution.isSet()) {
        obj.insert(QString("resolution"), ::OpenAPI::toJsonValue(m_resolution));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_unprocessed_end_times.isSet()) {
        obj.insert(QString("unprocessedEndTimes"), ::OpenAPI::toJsonValue(m_unprocessed_end_times));
    }
    return obj;
}

QDateTime OAIBatchGetFrameMetricDataResponse::getEndTime() const {
    return m_end_time;
}
void OAIBatchGetFrameMetricDataResponse::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIBatchGetFrameMetricDataResponse::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIBatchGetFrameMetricDataResponse::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QList OAIBatchGetFrameMetricDataResponse::getEndTimes() const {
    return m_end_times;
}
void OAIBatchGetFrameMetricDataResponse::setEndTimes(const QList &end_times) {
    m_end_times = end_times;
    m_end_times_isSet = true;
}

bool OAIBatchGetFrameMetricDataResponse::is_end_times_Set() const{
    return m_end_times_isSet;
}

bool OAIBatchGetFrameMetricDataResponse::is_end_times_Valid() const{
    return m_end_times_isValid;
}

QList OAIBatchGetFrameMetricDataResponse::getFrameMetricData() const {
    return m_frame_metric_data;
}
void OAIBatchGetFrameMetricDataResponse::setFrameMetricData(const QList &frame_metric_data) {
    m_frame_metric_data = frame_metric_data;
    m_frame_metric_data_isSet = true;
}

bool OAIBatchGetFrameMetricDataResponse::is_frame_metric_data_Set() const{
    return m_frame_metric_data_isSet;
}

bool OAIBatchGetFrameMetricDataResponse::is_frame_metric_data_Valid() const{
    return m_frame_metric_data_isValid;
}

OAIAggregationPeriod OAIBatchGetFrameMetricDataResponse::getResolution() const {
    return m_resolution;
}
void OAIBatchGetFrameMetricDataResponse::setResolution(const OAIAggregationPeriod &resolution) {
    m_resolution = resolution;
    m_resolution_isSet = true;
}

bool OAIBatchGetFrameMetricDataResponse::is_resolution_Set() const{
    return m_resolution_isSet;
}

bool OAIBatchGetFrameMetricDataResponse::is_resolution_Valid() const{
    return m_resolution_isValid;
}

QDateTime OAIBatchGetFrameMetricDataResponse::getStartTime() const {
    return m_start_time;
}
void OAIBatchGetFrameMetricDataResponse::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIBatchGetFrameMetricDataResponse::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIBatchGetFrameMetricDataResponse::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QMap OAIBatchGetFrameMetricDataResponse::getUnprocessedEndTimes() const {
    return m_unprocessed_end_times;
}
void OAIBatchGetFrameMetricDataResponse::setUnprocessedEndTimes(const QMap &unprocessed_end_times) {
    m_unprocessed_end_times = unprocessed_end_times;
    m_unprocessed_end_times_isSet = true;
}

bool OAIBatchGetFrameMetricDataResponse::is_unprocessed_end_times_Set() const{
    return m_unprocessed_end_times_isSet;
}

bool OAIBatchGetFrameMetricDataResponse::is_unprocessed_end_times_Valid() const{
    return m_unprocessed_end_times_isValid;
}

bool OAIBatchGetFrameMetricDataResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_times.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_frame_metric_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unprocessed_end_times.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchGetFrameMetricDataResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_end_time_isValid && m_end_times_isValid && m_frame_metric_data_isValid && m_resolution_isValid && m_start_time_isValid && m_unprocessed_end_times_isValid && true;
}

} // namespace OpenAPI
