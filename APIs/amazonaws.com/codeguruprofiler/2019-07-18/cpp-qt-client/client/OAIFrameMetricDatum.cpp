/**
 * Amazon CodeGuru Profiler
 * <p> This section provides documentation for the Amazon CodeGuru Profiler API operations. </p> <p> Amazon CodeGuru Profiler collects runtime performance data from your live applications, and provides recommendations that can help you fine-tune your application performance. Using machine learning algorithms, CodeGuru Profiler can help you find your most expensive lines of code and suggest ways you can improve efficiency and remove CPU bottlenecks. </p> <p> Amazon CodeGuru Profiler provides different visualizations of profiling data to help you identify what code is running on the CPU, see how much time is consumed, and suggest ways to reduce CPU utilization. </p> <note> <p>Amazon CodeGuru Profiler currently supports applications written in all Java virtual machine (JVM) languages and Python. While CodeGuru Profiler supports both visualizations and recommendations for applications written in Java, it can also generate visualizations and a subset of recommendations for applications written in other JVM languages and Python.</p> </note> <p> For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/profiler-ug/what-is-codeguru-profiler.html\">What is Amazon CodeGuru Profiler</a> in the <i>Amazon CodeGuru Profiler User Guide</i>. </p>
 *
 * The version of the OpenAPI document: 2019-07-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFrameMetricDatum.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFrameMetricDatum::OAIFrameMetricDatum(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFrameMetricDatum::OAIFrameMetricDatum() {
    this->initializeModel();
}

OAIFrameMetricDatum::~OAIFrameMetricDatum() {}

void OAIFrameMetricDatum::initializeModel() {

    m_frame_metric_isSet = false;
    m_frame_metric_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIFrameMetricDatum::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFrameMetricDatum::fromJsonObject(QJsonObject json) {

    m_frame_metric_isValid = ::OpenAPI::fromJsonValue(m_frame_metric, json[QString("frameMetric")]);
    m_frame_metric_isSet = !json[QString("frameMetric")].isNull() && m_frame_metric_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAIFrameMetricDatum::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFrameMetricDatum::asJsonObject() const {
    QJsonObject obj;
    if (m_frame_metric.isSet()) {
        obj.insert(QString("frameMetric"), ::OpenAPI::toJsonValue(m_frame_metric));
    }
    if (m_values.isSet()) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

OAIFrameMetric OAIFrameMetricDatum::getFrameMetric() const {
    return m_frame_metric;
}
void OAIFrameMetricDatum::setFrameMetric(const OAIFrameMetric &frame_metric) {
    m_frame_metric = frame_metric;
    m_frame_metric_isSet = true;
}

bool OAIFrameMetricDatum::is_frame_metric_Set() const{
    return m_frame_metric_isSet;
}

bool OAIFrameMetricDatum::is_frame_metric_Valid() const{
    return m_frame_metric_isValid;
}

QList OAIFrameMetricDatum::getValues() const {
    return m_values;
}
void OAIFrameMetricDatum::setValues(const QList &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIFrameMetricDatum::is_values_Set() const{
    return m_values_isSet;
}

bool OAIFrameMetricDatum::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIFrameMetricDatum::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_frame_metric.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFrameMetricDatum::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_frame_metric_isValid && m_values_isValid && true;
}

} // namespace OpenAPI
