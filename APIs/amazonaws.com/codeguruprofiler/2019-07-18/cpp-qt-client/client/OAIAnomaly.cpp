/**
 * Amazon CodeGuru Profiler
 * <p> This section provides documentation for the Amazon CodeGuru Profiler API operations. </p> <p> Amazon CodeGuru Profiler collects runtime performance data from your live applications, and provides recommendations that can help you fine-tune your application performance. Using machine learning algorithms, CodeGuru Profiler can help you find your most expensive lines of code and suggest ways you can improve efficiency and remove CPU bottlenecks. </p> <p> Amazon CodeGuru Profiler provides different visualizations of profiling data to help you identify what code is running on the CPU, see how much time is consumed, and suggest ways to reduce CPU utilization. </p> <note> <p>Amazon CodeGuru Profiler currently supports applications written in all Java virtual machine (JVM) languages and Python. While CodeGuru Profiler supports both visualizations and recommendations for applications written in Java, it can also generate visualizations and a subset of recommendations for applications written in other JVM languages and Python.</p> </note> <p> For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/profiler-ug/what-is-codeguru-profiler.html\">What is Amazon CodeGuru Profiler</a> in the <i>Amazon CodeGuru Profiler User Guide</i>. </p>
 *
 * The version of the OpenAPI document: 2019-07-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnomaly.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnomaly::OAIAnomaly(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnomaly::OAIAnomaly() {
    this->initializeModel();
}

OAIAnomaly::~OAIAnomaly() {}

void OAIAnomaly::initializeModel() {

    m_instances_isSet = false;
    m_instances_isValid = false;

    m_metric_isSet = false;
    m_metric_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;
}

void OAIAnomaly::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnomaly::fromJsonObject(QJsonObject json) {

    m_instances_isValid = ::OpenAPI::fromJsonValue(m_instances, json[QString("instances")]);
    m_instances_isSet = !json[QString("instances")].isNull() && m_instances_isValid;

    m_metric_isValid = ::OpenAPI::fromJsonValue(m_metric, json[QString("metric")]);
    m_metric_isSet = !json[QString("metric")].isNull() && m_metric_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;
}

QString OAIAnomaly::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnomaly::asJsonObject() const {
    QJsonObject obj;
    if (m_instances.isSet()) {
        obj.insert(QString("instances"), ::OpenAPI::toJsonValue(m_instances));
    }
    if (m_metric.isSet()) {
        obj.insert(QString("metric"), ::OpenAPI::toJsonValue(m_metric));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    return obj;
}

QList OAIAnomaly::getInstances() const {
    return m_instances;
}
void OAIAnomaly::setInstances(const QList &instances) {
    m_instances = instances;
    m_instances_isSet = true;
}

bool OAIAnomaly::is_instances_Set() const{
    return m_instances_isSet;
}

bool OAIAnomaly::is_instances_Valid() const{
    return m_instances_isValid;
}

OAIAnomaly_metric OAIAnomaly::getMetric() const {
    return m_metric;
}
void OAIAnomaly::setMetric(const OAIAnomaly_metric &metric) {
    m_metric = metric;
    m_metric_isSet = true;
}

bool OAIAnomaly::is_metric_Set() const{
    return m_metric_isSet;
}

bool OAIAnomaly::is_metric_Valid() const{
    return m_metric_isValid;
}

QString OAIAnomaly::getReason() const {
    return m_reason;
}
void OAIAnomaly::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIAnomaly::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIAnomaly::is_reason_Valid() const{
    return m_reason_isValid;
}

bool OAIAnomaly::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instances.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnomaly::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_instances_isValid && m_metric_isValid && m_reason_isValid && true;
}

} // namespace OpenAPI
