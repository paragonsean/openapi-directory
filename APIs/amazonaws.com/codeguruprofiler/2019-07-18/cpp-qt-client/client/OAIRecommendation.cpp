/**
 * Amazon CodeGuru Profiler
 * <p> This section provides documentation for the Amazon CodeGuru Profiler API operations. </p> <p> Amazon CodeGuru Profiler collects runtime performance data from your live applications, and provides recommendations that can help you fine-tune your application performance. Using machine learning algorithms, CodeGuru Profiler can help you find your most expensive lines of code and suggest ways you can improve efficiency and remove CPU bottlenecks. </p> <p> Amazon CodeGuru Profiler provides different visualizations of profiling data to help you identify what code is running on the CPU, see how much time is consumed, and suggest ways to reduce CPU utilization. </p> <note> <p>Amazon CodeGuru Profiler currently supports applications written in all Java virtual machine (JVM) languages and Python. While CodeGuru Profiler supports both visualizations and recommendations for applications written in Java, it can also generate visualizations and a subset of recommendations for applications written in other JVM languages and Python.</p> </note> <p> For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/profiler-ug/what-is-codeguru-profiler.html\">What is Amazon CodeGuru Profiler</a> in the <i>Amazon CodeGuru Profiler User Guide</i>. </p>
 *
 * The version of the OpenAPI document: 2019-07-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendation::OAIRecommendation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendation::OAIRecommendation() {
    this->initializeModel();
}

OAIRecommendation::~OAIRecommendation() {}

void OAIRecommendation::initializeModel() {

    m_all_matches_count_isSet = false;
    m_all_matches_count_isValid = false;

    m_all_matches_sum_isSet = false;
    m_all_matches_sum_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_pattern_isSet = false;
    m_pattern_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_top_matches_isSet = false;
    m_top_matches_isValid = false;
}

void OAIRecommendation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecommendation::fromJsonObject(QJsonObject json) {

    m_all_matches_count_isValid = ::OpenAPI::fromJsonValue(m_all_matches_count, json[QString("allMatchesCount")]);
    m_all_matches_count_isSet = !json[QString("allMatchesCount")].isNull() && m_all_matches_count_isValid;

    m_all_matches_sum_isValid = ::OpenAPI::fromJsonValue(m_all_matches_sum, json[QString("allMatchesSum")]);
    m_all_matches_sum_isSet = !json[QString("allMatchesSum")].isNull() && m_all_matches_sum_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_pattern_isValid = ::OpenAPI::fromJsonValue(m_pattern, json[QString("pattern")]);
    m_pattern_isSet = !json[QString("pattern")].isNull() && m_pattern_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_top_matches_isValid = ::OpenAPI::fromJsonValue(m_top_matches, json[QString("topMatches")]);
    m_top_matches_isSet = !json[QString("topMatches")].isNull() && m_top_matches_isValid;
}

QString OAIRecommendation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecommendation::asJsonObject() const {
    QJsonObject obj;
    if (m_all_matches_count_isSet) {
        obj.insert(QString("allMatchesCount"), ::OpenAPI::toJsonValue(m_all_matches_count));
    }
    if (m_all_matches_sum_isSet) {
        obj.insert(QString("allMatchesSum"), ::OpenAPI::toJsonValue(m_all_matches_sum));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_pattern.isSet()) {
        obj.insert(QString("pattern"), ::OpenAPI::toJsonValue(m_pattern));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_top_matches.isSet()) {
        obj.insert(QString("topMatches"), ::OpenAPI::toJsonValue(m_top_matches));
    }
    return obj;
}

qint32 OAIRecommendation::getAllMatchesCount() const {
    return m_all_matches_count;
}
void OAIRecommendation::setAllMatchesCount(const qint32 &all_matches_count) {
    m_all_matches_count = all_matches_count;
    m_all_matches_count_isSet = true;
}

bool OAIRecommendation::is_all_matches_count_Set() const{
    return m_all_matches_count_isSet;
}

bool OAIRecommendation::is_all_matches_count_Valid() const{
    return m_all_matches_count_isValid;
}

double OAIRecommendation::getAllMatchesSum() const {
    return m_all_matches_sum;
}
void OAIRecommendation::setAllMatchesSum(const double &all_matches_sum) {
    m_all_matches_sum = all_matches_sum;
    m_all_matches_sum_isSet = true;
}

bool OAIRecommendation::is_all_matches_sum_Set() const{
    return m_all_matches_sum_isSet;
}

bool OAIRecommendation::is_all_matches_sum_Valid() const{
    return m_all_matches_sum_isValid;
}

QDateTime OAIRecommendation::getEndTime() const {
    return m_end_time;
}
void OAIRecommendation::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIRecommendation::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIRecommendation::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIRecommendation_pattern OAIRecommendation::getPattern() const {
    return m_pattern;
}
void OAIRecommendation::setPattern(const OAIRecommendation_pattern &pattern) {
    m_pattern = pattern;
    m_pattern_isSet = true;
}

bool OAIRecommendation::is_pattern_Set() const{
    return m_pattern_isSet;
}

bool OAIRecommendation::is_pattern_Valid() const{
    return m_pattern_isValid;
}

QDateTime OAIRecommendation::getStartTime() const {
    return m_start_time;
}
void OAIRecommendation::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIRecommendation::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIRecommendation::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QList OAIRecommendation::getTopMatches() const {
    return m_top_matches;
}
void OAIRecommendation::setTopMatches(const QList &top_matches) {
    m_top_matches = top_matches;
    m_top_matches_isSet = true;
}

bool OAIRecommendation::is_top_matches_Set() const{
    return m_top_matches_isSet;
}

bool OAIRecommendation::is_top_matches_Valid() const{
    return m_top_matches_isValid;
}

bool OAIRecommendation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_matches_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_all_matches_sum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pattern.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_matches.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecommendation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_all_matches_count_isValid && m_all_matches_sum_isValid && m_end_time_isValid && m_pattern_isValid && m_start_time_isValid && m_top_matches_isValid && true;
}

} // namespace OpenAPI
