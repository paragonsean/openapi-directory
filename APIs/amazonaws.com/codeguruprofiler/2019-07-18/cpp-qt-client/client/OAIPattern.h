/**
 * Amazon CodeGuru Profiler
 * <p> This section provides documentation for the Amazon CodeGuru Profiler API operations. </p> <p> Amazon CodeGuru Profiler collects runtime performance data from your live applications, and provides recommendations that can help you fine-tune your application performance. Using machine learning algorithms, CodeGuru Profiler can help you find your most expensive lines of code and suggest ways you can improve efficiency and remove CPU bottlenecks. </p> <p> Amazon CodeGuru Profiler provides different visualizations of profiling data to help you identify what code is running on the CPU, see how much time is consumed, and suggest ways to reduce CPU utilization. </p> <note> <p>Amazon CodeGuru Profiler currently supports applications written in all Java virtual machine (JVM) languages and Python. While CodeGuru Profiler supports both visualizations and recommendations for applications written in Java, it can also generate visualizations and a subset of recommendations for applications written in other JVM languages and Python.</p> </note> <p> For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/profiler-ug/what-is-codeguru-profiler.html\">What is Amazon CodeGuru Profiler</a> in the <i>Amazon CodeGuru Profiler User Guide</i>. </p>
 *
 * The version of the OpenAPI document: 2019-07-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPattern.h
 *
 *  A set of rules used to make a recommendation during an analysis. 
 */

#ifndef OAIPattern_H
#define OAIPattern_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPattern : public OAIObject {
public:
    OAIPattern();
    OAIPattern(QString json);
    ~OAIPattern() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getCountersToAggregate() const;
    void setCountersToAggregate(const QList &counters_to_aggregate);
    bool is_counters_to_aggregate_Set() const;
    bool is_counters_to_aggregate_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getResolutionSteps() const;
    void setResolutionSteps(const QString &resolution_steps);
    bool is_resolution_steps_Set() const;
    bool is_resolution_steps_Valid() const;

    QList getTargetFrames() const;
    void setTargetFrames(const QList &target_frames);
    bool is_target_frames_Set() const;
    bool is_target_frames_Valid() const;

    double getThresholdPercent() const;
    void setThresholdPercent(const double &threshold_percent);
    bool is_threshold_percent_Set() const;
    bool is_threshold_percent_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_counters_to_aggregate;
    bool m_counters_to_aggregate_isSet;
    bool m_counters_to_aggregate_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_resolution_steps;
    bool m_resolution_steps_isSet;
    bool m_resolution_steps_isValid;

    QList m_target_frames;
    bool m_target_frames_isSet;
    bool m_target_frames_isValid;

    double m_threshold_percent;
    bool m_threshold_percent_isSet;
    bool m_threshold_percent_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPattern)

#endif // OAIPattern_H
