/**
 * Amazon CodeGuru Profiler
 * <p> This section provides documentation for the Amazon CodeGuru Profiler API operations. </p> <p> Amazon CodeGuru Profiler collects runtime performance data from your live applications, and provides recommendations that can help you fine-tune your application performance. Using machine learning algorithms, CodeGuru Profiler can help you find your most expensive lines of code and suggest ways you can improve efficiency and remove CPU bottlenecks. </p> <p> Amazon CodeGuru Profiler provides different visualizations of profiling data to help you identify what code is running on the CPU, see how much time is consumed, and suggest ways to reduce CPU utilization. </p> <note> <p>Amazon CodeGuru Profiler currently supports applications written in all Java virtual machine (JVM) languages and Python. While CodeGuru Profiler supports both visualizations and recommendations for applications written in Java, it can also generate visualizations and a subset of recommendations for applications written in other JVM languages and Python.</p> </note> <p> For more information, see <a href=\"https://docs.aws.amazon.com/codeguru/latest/profiler-ug/what-is-codeguru-profiler.html\">What is Amazon CodeGuru Profiler</a> in the <i>Amazon CodeGuru Profiler User Guide</i>. </p>
 *
 * The version of the OpenAPI document: 2019-07-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnomalyInstance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnomalyInstance::OAIAnomalyInstance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnomalyInstance::OAIAnomalyInstance() {
    this->initializeModel();
}

OAIAnomalyInstance::~OAIAnomalyInstance() {}

void OAIAnomalyInstance::initializeModel() {

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_user_feedback_isSet = false;
    m_user_feedback_isValid = false;
}

void OAIAnomalyInstance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnomalyInstance::fromJsonObject(QJsonObject json) {

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_user_feedback_isValid = ::OpenAPI::fromJsonValue(m_user_feedback, json[QString("userFeedback")]);
    m_user_feedback_isSet = !json[QString("userFeedback")].isNull() && m_user_feedback_isValid;
}

QString OAIAnomalyInstance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnomalyInstance::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_user_feedback.isSet()) {
        obj.insert(QString("userFeedback"), ::OpenAPI::toJsonValue(m_user_feedback));
    }
    return obj;
}

QDateTime OAIAnomalyInstance::getEndTime() const {
    return m_end_time;
}
void OAIAnomalyInstance::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIAnomalyInstance::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIAnomalyInstance::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIAnomalyInstance::getId() const {
    return m_id;
}
void OAIAnomalyInstance::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAnomalyInstance::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAnomalyInstance::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIAnomalyInstance::getStartTime() const {
    return m_start_time;
}
void OAIAnomalyInstance::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIAnomalyInstance::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIAnomalyInstance::is_start_time_Valid() const{
    return m_start_time_isValid;
}

OAIAnomalyInstance_userFeedback OAIAnomalyInstance::getUserFeedback() const {
    return m_user_feedback;
}
void OAIAnomalyInstance::setUserFeedback(const OAIAnomalyInstance_userFeedback &user_feedback) {
    m_user_feedback = user_feedback;
    m_user_feedback_isSet = true;
}

bool OAIAnomalyInstance::is_user_feedback_Set() const{
    return m_user_feedback_isSet;
}

bool OAIAnomalyInstance::is_user_feedback_Valid() const{
    return m_user_feedback_isValid;
}

bool OAIAnomalyInstance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_feedback.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnomalyInstance::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_start_time_isValid && true;
}

} // namespace OpenAPI
