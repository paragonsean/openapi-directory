/**
 * Amazon Glacier
 * <p> Amazon S3 Glacier (Glacier) is a storage solution for \"cold data.\"</p> <p>Glacier is an extremely low-cost storage service that provides secure, durable, and easy-to-use storage for data backup and archival. With Glacier, customers can store their data cost effectively for months, years, or decades. Glacier also enables customers to offload the administrative burdens of operating and scaling storage to AWS, so they don't have to worry about capacity planning, hardware provisioning, data replication, hardware failure and recovery, or time-consuming hardware migrations.</p> <p>Glacier is a great storage choice when low storage cost is paramount and your data is rarely retrieved. If your application requires fast or frequent access to your data, consider using Amazon S3. For more information, see <a href=\"http://aws.amazon.com/s3/\">Amazon Simple Storage Service (Amazon S3)</a>.</p> <p>You can store any kind of data in any format. There is no maximum limit on the total amount of data you can store in Glacier.</p> <p>If you are a first-time user of Glacier, we recommend that you begin by reading the following sections in the <i>Amazon S3 Glacier Developer Guide</i>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/amazonglacier/latest/dev/introduction.html\">What is Amazon S3 Glacier</a> - This section of the Developer Guide describes the underlying data model, the operations it supports, and the AWS SDKs that you can use to interact with the service.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/amazonglacier/latest/dev/amazon-glacier-getting-started.html\">Getting Started with Amazon S3 Glacier</a> - The Getting Started section walks you through the process of creating a vault, uploading archives, creating jobs to download archives, retrieving the job output, and deleting archives.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2012-06-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIS3Location.h
 *
 * Contains information about the location in Amazon S3 where the select job results are stored.
 */

#ifndef OAIS3Location_H
#define OAIS3Location_H

#include <QJsonObject>

#include "OAICannedACL.h"
#include "OAIS3Location_Encryption.h"
#include "OAIStorageClass.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIS3Location_Encryption;

class OAIS3Location : public OAIObject {
public:
    OAIS3Location();
    OAIS3Location(QString json);
    ~OAIS3Location() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBucketName() const;
    void setBucketName(const QString &bucket_name);
    bool is_bucket_name_Set() const;
    bool is_bucket_name_Valid() const;

    QString getPrefix() const;
    void setPrefix(const QString &prefix);
    bool is_prefix_Set() const;
    bool is_prefix_Valid() const;

    OAIS3Location_Encryption getEncryption() const;
    void setEncryption(const OAIS3Location_Encryption &encryption);
    bool is_encryption_Set() const;
    bool is_encryption_Valid() const;

    OAICannedACL getCannedAcl() const;
    void setCannedAcl(const OAICannedACL &canned_acl);
    bool is_canned_acl_Set() const;
    bool is_canned_acl_Valid() const;

    QList getAccessControlList() const;
    void setAccessControlList(const QList &access_control_list);
    bool is_access_control_list_Set() const;
    bool is_access_control_list_Valid() const;

    QMap getTagging() const;
    void setTagging(const QMap &tagging);
    bool is_tagging_Set() const;
    bool is_tagging_Valid() const;

    QMap getUserMetadata() const;
    void setUserMetadata(const QMap &user_metadata);
    bool is_user_metadata_Set() const;
    bool is_user_metadata_Valid() const;

    OAIStorageClass getStorageClass() const;
    void setStorageClass(const OAIStorageClass &storage_class);
    bool is_storage_class_Set() const;
    bool is_storage_class_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_bucket_name;
    bool m_bucket_name_isSet;
    bool m_bucket_name_isValid;

    QString m_prefix;
    bool m_prefix_isSet;
    bool m_prefix_isValid;

    OAIS3Location_Encryption m_encryption;
    bool m_encryption_isSet;
    bool m_encryption_isValid;

    OAICannedACL m_canned_acl;
    bool m_canned_acl_isSet;
    bool m_canned_acl_isValid;

    QList m_access_control_list;
    bool m_access_control_list_isSet;
    bool m_access_control_list_isValid;

    QMap m_tagging;
    bool m_tagging_isSet;
    bool m_tagging_isValid;

    QMap m_user_metadata;
    bool m_user_metadata_isSet;
    bool m_user_metadata_isValid;

    OAIStorageClass m_storage_class;
    bool m_storage_class_isSet;
    bool m_storage_class_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIS3Location)

#endif // OAIS3Location_H
