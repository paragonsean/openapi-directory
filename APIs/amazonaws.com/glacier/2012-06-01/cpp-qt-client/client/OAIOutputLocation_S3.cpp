/**
 * Amazon Glacier
 * <p> Amazon S3 Glacier (Glacier) is a storage solution for \"cold data.\"</p> <p>Glacier is an extremely low-cost storage service that provides secure, durable, and easy-to-use storage for data backup and archival. With Glacier, customers can store their data cost effectively for months, years, or decades. Glacier also enables customers to offload the administrative burdens of operating and scaling storage to AWS, so they don't have to worry about capacity planning, hardware provisioning, data replication, hardware failure and recovery, or time-consuming hardware migrations.</p> <p>Glacier is a great storage choice when low storage cost is paramount and your data is rarely retrieved. If your application requires fast or frequent access to your data, consider using Amazon S3. For more information, see <a href=\"http://aws.amazon.com/s3/\">Amazon Simple Storage Service (Amazon S3)</a>.</p> <p>You can store any kind of data in any format. There is no maximum limit on the total amount of data you can store in Glacier.</p> <p>If you are a first-time user of Glacier, we recommend that you begin by reading the following sections in the <i>Amazon S3 Glacier Developer Guide</i>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/amazonglacier/latest/dev/introduction.html\">What is Amazon S3 Glacier</a> - This section of the Developer Guide describes the underlying data model, the operations it supports, and the AWS SDKs that you can use to interact with the service.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/amazonglacier/latest/dev/amazon-glacier-getting-started.html\">Getting Started with Amazon S3 Glacier</a> - The Getting Started section walks you through the process of creating a vault, uploading archives, creating jobs to download archives, retrieving the job output, and deleting archives.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2012-06-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutputLocation_S3.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutputLocation_S3::OAIOutputLocation_S3(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutputLocation_S3::OAIOutputLocation_S3() {
    this->initializeModel();
}

OAIOutputLocation_S3::~OAIOutputLocation_S3() {}

void OAIOutputLocation_S3::initializeModel() {

    m_bucket_name_isSet = false;
    m_bucket_name_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;

    m_encryption_isSet = false;
    m_encryption_isValid = false;

    m_canned_acl_isSet = false;
    m_canned_acl_isValid = false;

    m_access_control_list_isSet = false;
    m_access_control_list_isValid = false;

    m_tagging_isSet = false;
    m_tagging_isValid = false;

    m_user_metadata_isSet = false;
    m_user_metadata_isValid = false;

    m_storage_class_isSet = false;
    m_storage_class_isValid = false;
}

void OAIOutputLocation_S3::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutputLocation_S3::fromJsonObject(QJsonObject json) {

    m_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_bucket_name, json[QString("BucketName")]);
    m_bucket_name_isSet = !json[QString("BucketName")].isNull() && m_bucket_name_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("Prefix")]);
    m_prefix_isSet = !json[QString("Prefix")].isNull() && m_prefix_isValid;

    m_encryption_isValid = ::OpenAPI::fromJsonValue(m_encryption, json[QString("Encryption")]);
    m_encryption_isSet = !json[QString("Encryption")].isNull() && m_encryption_isValid;

    m_canned_acl_isValid = ::OpenAPI::fromJsonValue(m_canned_acl, json[QString("CannedACL")]);
    m_canned_acl_isSet = !json[QString("CannedACL")].isNull() && m_canned_acl_isValid;

    m_access_control_list_isValid = ::OpenAPI::fromJsonValue(m_access_control_list, json[QString("AccessControlList")]);
    m_access_control_list_isSet = !json[QString("AccessControlList")].isNull() && m_access_control_list_isValid;

    m_tagging_isValid = ::OpenAPI::fromJsonValue(m_tagging, json[QString("Tagging")]);
    m_tagging_isSet = !json[QString("Tagging")].isNull() && m_tagging_isValid;

    m_user_metadata_isValid = ::OpenAPI::fromJsonValue(m_user_metadata, json[QString("UserMetadata")]);
    m_user_metadata_isSet = !json[QString("UserMetadata")].isNull() && m_user_metadata_isValid;

    m_storage_class_isValid = ::OpenAPI::fromJsonValue(m_storage_class, json[QString("StorageClass")]);
    m_storage_class_isSet = !json[QString("StorageClass")].isNull() && m_storage_class_isValid;
}

QString OAIOutputLocation_S3::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutputLocation_S3::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_name_isSet) {
        obj.insert(QString("BucketName"), ::OpenAPI::toJsonValue(m_bucket_name));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("Prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    if (m_encryption.isSet()) {
        obj.insert(QString("Encryption"), ::OpenAPI::toJsonValue(m_encryption));
    }
    if (m_canned_acl.isSet()) {
        obj.insert(QString("CannedACL"), ::OpenAPI::toJsonValue(m_canned_acl));
    }
    if (m_access_control_list.isSet()) {
        obj.insert(QString("AccessControlList"), ::OpenAPI::toJsonValue(m_access_control_list));
    }
    if (m_tagging.isSet()) {
        obj.insert(QString("Tagging"), ::OpenAPI::toJsonValue(m_tagging));
    }
    if (m_user_metadata.isSet()) {
        obj.insert(QString("UserMetadata"), ::OpenAPI::toJsonValue(m_user_metadata));
    }
    if (m_storage_class.isSet()) {
        obj.insert(QString("StorageClass"), ::OpenAPI::toJsonValue(m_storage_class));
    }
    return obj;
}

QString OAIOutputLocation_S3::getBucketName() const {
    return m_bucket_name;
}
void OAIOutputLocation_S3::setBucketName(const QString &bucket_name) {
    m_bucket_name = bucket_name;
    m_bucket_name_isSet = true;
}

bool OAIOutputLocation_S3::is_bucket_name_Set() const{
    return m_bucket_name_isSet;
}

bool OAIOutputLocation_S3::is_bucket_name_Valid() const{
    return m_bucket_name_isValid;
}

QString OAIOutputLocation_S3::getPrefix() const {
    return m_prefix;
}
void OAIOutputLocation_S3::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAIOutputLocation_S3::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAIOutputLocation_S3::is_prefix_Valid() const{
    return m_prefix_isValid;
}

OAIS3Location_Encryption OAIOutputLocation_S3::getEncryption() const {
    return m_encryption;
}
void OAIOutputLocation_S3::setEncryption(const OAIS3Location_Encryption &encryption) {
    m_encryption = encryption;
    m_encryption_isSet = true;
}

bool OAIOutputLocation_S3::is_encryption_Set() const{
    return m_encryption_isSet;
}

bool OAIOutputLocation_S3::is_encryption_Valid() const{
    return m_encryption_isValid;
}

OAICannedACL OAIOutputLocation_S3::getCannedAcl() const {
    return m_canned_acl;
}
void OAIOutputLocation_S3::setCannedAcl(const OAICannedACL &canned_acl) {
    m_canned_acl = canned_acl;
    m_canned_acl_isSet = true;
}

bool OAIOutputLocation_S3::is_canned_acl_Set() const{
    return m_canned_acl_isSet;
}

bool OAIOutputLocation_S3::is_canned_acl_Valid() const{
    return m_canned_acl_isValid;
}

QList OAIOutputLocation_S3::getAccessControlList() const {
    return m_access_control_list;
}
void OAIOutputLocation_S3::setAccessControlList(const QList &access_control_list) {
    m_access_control_list = access_control_list;
    m_access_control_list_isSet = true;
}

bool OAIOutputLocation_S3::is_access_control_list_Set() const{
    return m_access_control_list_isSet;
}

bool OAIOutputLocation_S3::is_access_control_list_Valid() const{
    return m_access_control_list_isValid;
}

QMap OAIOutputLocation_S3::getTagging() const {
    return m_tagging;
}
void OAIOutputLocation_S3::setTagging(const QMap &tagging) {
    m_tagging = tagging;
    m_tagging_isSet = true;
}

bool OAIOutputLocation_S3::is_tagging_Set() const{
    return m_tagging_isSet;
}

bool OAIOutputLocation_S3::is_tagging_Valid() const{
    return m_tagging_isValid;
}

QMap OAIOutputLocation_S3::getUserMetadata() const {
    return m_user_metadata;
}
void OAIOutputLocation_S3::setUserMetadata(const QMap &user_metadata) {
    m_user_metadata = user_metadata;
    m_user_metadata_isSet = true;
}

bool OAIOutputLocation_S3::is_user_metadata_Set() const{
    return m_user_metadata_isSet;
}

bool OAIOutputLocation_S3::is_user_metadata_Valid() const{
    return m_user_metadata_isValid;
}

OAIStorageClass OAIOutputLocation_S3::getStorageClass() const {
    return m_storage_class;
}
void OAIOutputLocation_S3::setStorageClass(const OAIStorageClass &storage_class) {
    m_storage_class = storage_class;
    m_storage_class_isSet = true;
}

bool OAIOutputLocation_S3::is_storage_class_Set() const{
    return m_storage_class_isSet;
}

bool OAIOutputLocation_S3::is_storage_class_Valid() const{
    return m_storage_class_isValid;
}

bool OAIOutputLocation_S3::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_canned_acl.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_control_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tagging.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_class.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutputLocation_S3::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
