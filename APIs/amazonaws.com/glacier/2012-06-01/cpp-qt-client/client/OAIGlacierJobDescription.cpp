/**
 * Amazon Glacier
 * <p> Amazon S3 Glacier (Glacier) is a storage solution for \"cold data.\"</p> <p>Glacier is an extremely low-cost storage service that provides secure, durable, and easy-to-use storage for data backup and archival. With Glacier, customers can store their data cost effectively for months, years, or decades. Glacier also enables customers to offload the administrative burdens of operating and scaling storage to AWS, so they don't have to worry about capacity planning, hardware provisioning, data replication, hardware failure and recovery, or time-consuming hardware migrations.</p> <p>Glacier is a great storage choice when low storage cost is paramount and your data is rarely retrieved. If your application requires fast or frequent access to your data, consider using Amazon S3. For more information, see <a href=\"http://aws.amazon.com/s3/\">Amazon Simple Storage Service (Amazon S3)</a>.</p> <p>You can store any kind of data in any format. There is no maximum limit on the total amount of data you can store in Glacier.</p> <p>If you are a first-time user of Glacier, we recommend that you begin by reading the following sections in the <i>Amazon S3 Glacier Developer Guide</i>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/amazonglacier/latest/dev/introduction.html\">What is Amazon S3 Glacier</a> - This section of the Developer Guide describes the underlying data model, the operations it supports, and the AWS SDKs that you can use to interact with the service.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/amazonglacier/latest/dev/amazon-glacier-getting-started.html\">Getting Started with Amazon S3 Glacier</a> - The Getting Started section walks you through the process of creating a vault, uploading archives, creating jobs to download archives, retrieving the job output, and deleting archives.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2012-06-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGlacierJobDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGlacierJobDescription::OAIGlacierJobDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGlacierJobDescription::OAIGlacierJobDescription() {
    this->initializeModel();
}

OAIGlacierJobDescription::~OAIGlacierJobDescription() {}

void OAIGlacierJobDescription::initializeModel() {

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_job_description_isSet = false;
    m_job_description_isValid = false;

    m_action_isSet = false;
    m_action_isValid = false;

    m_archive_id_isSet = false;
    m_archive_id_isValid = false;

    m_vault_arn_isSet = false;
    m_vault_arn_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_completed_isSet = false;
    m_completed_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_archive_size_in_bytes_isSet = false;
    m_archive_size_in_bytes_isValid = false;

    m_inventory_size_in_bytes_isSet = false;
    m_inventory_size_in_bytes_isValid = false;

    m_sns_topic_isSet = false;
    m_sns_topic_isValid = false;

    m_completion_date_isSet = false;
    m_completion_date_isValid = false;

    m_sha256_tree_hash_isSet = false;
    m_sha256_tree_hash_isValid = false;

    m_archive_sha256_tree_hash_isSet = false;
    m_archive_sha256_tree_hash_isValid = false;

    m_retrieval_byte_range_isSet = false;
    m_retrieval_byte_range_isValid = false;

    m_tier_isSet = false;
    m_tier_isValid = false;

    m_inventory_retrieval_parameters_isSet = false;
    m_inventory_retrieval_parameters_isValid = false;

    m_job_output_path_isSet = false;
    m_job_output_path_isValid = false;

    m_select_parameters_isSet = false;
    m_select_parameters_isValid = false;

    m_output_location_isSet = false;
    m_output_location_isValid = false;
}

void OAIGlacierJobDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGlacierJobDescription::fromJsonObject(QJsonObject json) {

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("JobId")]);
    m_job_id_isSet = !json[QString("JobId")].isNull() && m_job_id_isValid;

    m_job_description_isValid = ::OpenAPI::fromJsonValue(m_job_description, json[QString("JobDescription")]);
    m_job_description_isSet = !json[QString("JobDescription")].isNull() && m_job_description_isValid;

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("Action")]);
    m_action_isSet = !json[QString("Action")].isNull() && m_action_isValid;

    m_archive_id_isValid = ::OpenAPI::fromJsonValue(m_archive_id, json[QString("ArchiveId")]);
    m_archive_id_isSet = !json[QString("ArchiveId")].isNull() && m_archive_id_isValid;

    m_vault_arn_isValid = ::OpenAPI::fromJsonValue(m_vault_arn, json[QString("VaultARN")]);
    m_vault_arn_isSet = !json[QString("VaultARN")].isNull() && m_vault_arn_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_completed_isValid = ::OpenAPI::fromJsonValue(m_completed, json[QString("Completed")]);
    m_completed_isSet = !json[QString("Completed")].isNull() && m_completed_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("StatusCode")]);
    m_status_code_isSet = !json[QString("StatusCode")].isNull() && m_status_code_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("StatusMessage")]);
    m_status_message_isSet = !json[QString("StatusMessage")].isNull() && m_status_message_isValid;

    m_archive_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_archive_size_in_bytes, json[QString("ArchiveSizeInBytes")]);
    m_archive_size_in_bytes_isSet = !json[QString("ArchiveSizeInBytes")].isNull() && m_archive_size_in_bytes_isValid;

    m_inventory_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_inventory_size_in_bytes, json[QString("InventorySizeInBytes")]);
    m_inventory_size_in_bytes_isSet = !json[QString("InventorySizeInBytes")].isNull() && m_inventory_size_in_bytes_isValid;

    m_sns_topic_isValid = ::OpenAPI::fromJsonValue(m_sns_topic, json[QString("SNSTopic")]);
    m_sns_topic_isSet = !json[QString("SNSTopic")].isNull() && m_sns_topic_isValid;

    m_completion_date_isValid = ::OpenAPI::fromJsonValue(m_completion_date, json[QString("CompletionDate")]);
    m_completion_date_isSet = !json[QString("CompletionDate")].isNull() && m_completion_date_isValid;

    m_sha256_tree_hash_isValid = ::OpenAPI::fromJsonValue(m_sha256_tree_hash, json[QString("SHA256TreeHash")]);
    m_sha256_tree_hash_isSet = !json[QString("SHA256TreeHash")].isNull() && m_sha256_tree_hash_isValid;

    m_archive_sha256_tree_hash_isValid = ::OpenAPI::fromJsonValue(m_archive_sha256_tree_hash, json[QString("ArchiveSHA256TreeHash")]);
    m_archive_sha256_tree_hash_isSet = !json[QString("ArchiveSHA256TreeHash")].isNull() && m_archive_sha256_tree_hash_isValid;

    m_retrieval_byte_range_isValid = ::OpenAPI::fromJsonValue(m_retrieval_byte_range, json[QString("RetrievalByteRange")]);
    m_retrieval_byte_range_isSet = !json[QString("RetrievalByteRange")].isNull() && m_retrieval_byte_range_isValid;

    m_tier_isValid = ::OpenAPI::fromJsonValue(m_tier, json[QString("Tier")]);
    m_tier_isSet = !json[QString("Tier")].isNull() && m_tier_isValid;

    m_inventory_retrieval_parameters_isValid = ::OpenAPI::fromJsonValue(m_inventory_retrieval_parameters, json[QString("InventoryRetrievalParameters")]);
    m_inventory_retrieval_parameters_isSet = !json[QString("InventoryRetrievalParameters")].isNull() && m_inventory_retrieval_parameters_isValid;

    m_job_output_path_isValid = ::OpenAPI::fromJsonValue(m_job_output_path, json[QString("JobOutputPath")]);
    m_job_output_path_isSet = !json[QString("JobOutputPath")].isNull() && m_job_output_path_isValid;

    m_select_parameters_isValid = ::OpenAPI::fromJsonValue(m_select_parameters, json[QString("SelectParameters")]);
    m_select_parameters_isSet = !json[QString("SelectParameters")].isNull() && m_select_parameters_isValid;

    m_output_location_isValid = ::OpenAPI::fromJsonValue(m_output_location, json[QString("OutputLocation")]);
    m_output_location_isSet = !json[QString("OutputLocation")].isNull() && m_output_location_isValid;
}

QString OAIGlacierJobDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGlacierJobDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_job_id_isSet) {
        obj.insert(QString("JobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_job_description_isSet) {
        obj.insert(QString("JobDescription"), ::OpenAPI::toJsonValue(m_job_description));
    }
    if (m_action.isSet()) {
        obj.insert(QString("Action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_archive_id_isSet) {
        obj.insert(QString("ArchiveId"), ::OpenAPI::toJsonValue(m_archive_id));
    }
    if (m_vault_arn_isSet) {
        obj.insert(QString("VaultARN"), ::OpenAPI::toJsonValue(m_vault_arn));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_completed_isSet) {
        obj.insert(QString("Completed"), ::OpenAPI::toJsonValue(m_completed));
    }
    if (m_status_code.isSet()) {
        obj.insert(QString("StatusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("StatusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_archive_size_in_bytes_isSet) {
        obj.insert(QString("ArchiveSizeInBytes"), ::OpenAPI::toJsonValue(m_archive_size_in_bytes));
    }
    if (m_inventory_size_in_bytes_isSet) {
        obj.insert(QString("InventorySizeInBytes"), ::OpenAPI::toJsonValue(m_inventory_size_in_bytes));
    }
    if (m_sns_topic_isSet) {
        obj.insert(QString("SNSTopic"), ::OpenAPI::toJsonValue(m_sns_topic));
    }
    if (m_completion_date_isSet) {
        obj.insert(QString("CompletionDate"), ::OpenAPI::toJsonValue(m_completion_date));
    }
    if (m_sha256_tree_hash_isSet) {
        obj.insert(QString("SHA256TreeHash"), ::OpenAPI::toJsonValue(m_sha256_tree_hash));
    }
    if (m_archive_sha256_tree_hash_isSet) {
        obj.insert(QString("ArchiveSHA256TreeHash"), ::OpenAPI::toJsonValue(m_archive_sha256_tree_hash));
    }
    if (m_retrieval_byte_range_isSet) {
        obj.insert(QString("RetrievalByteRange"), ::OpenAPI::toJsonValue(m_retrieval_byte_range));
    }
    if (m_tier_isSet) {
        obj.insert(QString("Tier"), ::OpenAPI::toJsonValue(m_tier));
    }
    if (m_inventory_retrieval_parameters.isSet()) {
        obj.insert(QString("InventoryRetrievalParameters"), ::OpenAPI::toJsonValue(m_inventory_retrieval_parameters));
    }
    if (m_job_output_path_isSet) {
        obj.insert(QString("JobOutputPath"), ::OpenAPI::toJsonValue(m_job_output_path));
    }
    if (m_select_parameters.isSet()) {
        obj.insert(QString("SelectParameters"), ::OpenAPI::toJsonValue(m_select_parameters));
    }
    if (m_output_location.isSet()) {
        obj.insert(QString("OutputLocation"), ::OpenAPI::toJsonValue(m_output_location));
    }
    return obj;
}

QString OAIGlacierJobDescription::getJobId() const {
    return m_job_id;
}
void OAIGlacierJobDescription::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIGlacierJobDescription::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIGlacierJobDescription::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QString OAIGlacierJobDescription::getJobDescription() const {
    return m_job_description;
}
void OAIGlacierJobDescription::setJobDescription(const QString &job_description) {
    m_job_description = job_description;
    m_job_description_isSet = true;
}

bool OAIGlacierJobDescription::is_job_description_Set() const{
    return m_job_description_isSet;
}

bool OAIGlacierJobDescription::is_job_description_Valid() const{
    return m_job_description_isValid;
}

OAIActionCode OAIGlacierJobDescription::getAction() const {
    return m_action;
}
void OAIGlacierJobDescription::setAction(const OAIActionCode &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIGlacierJobDescription::is_action_Set() const{
    return m_action_isSet;
}

bool OAIGlacierJobDescription::is_action_Valid() const{
    return m_action_isValid;
}

QString OAIGlacierJobDescription::getArchiveId() const {
    return m_archive_id;
}
void OAIGlacierJobDescription::setArchiveId(const QString &archive_id) {
    m_archive_id = archive_id;
    m_archive_id_isSet = true;
}

bool OAIGlacierJobDescription::is_archive_id_Set() const{
    return m_archive_id_isSet;
}

bool OAIGlacierJobDescription::is_archive_id_Valid() const{
    return m_archive_id_isValid;
}

QString OAIGlacierJobDescription::getVaultArn() const {
    return m_vault_arn;
}
void OAIGlacierJobDescription::setVaultArn(const QString &vault_arn) {
    m_vault_arn = vault_arn;
    m_vault_arn_isSet = true;
}

bool OAIGlacierJobDescription::is_vault_arn_Set() const{
    return m_vault_arn_isSet;
}

bool OAIGlacierJobDescription::is_vault_arn_Valid() const{
    return m_vault_arn_isValid;
}

QString OAIGlacierJobDescription::getCreationDate() const {
    return m_creation_date;
}
void OAIGlacierJobDescription::setCreationDate(const QString &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIGlacierJobDescription::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIGlacierJobDescription::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

bool OAIGlacierJobDescription::getCompleted() const {
    return m_completed;
}
void OAIGlacierJobDescription::setCompleted(const bool &completed) {
    m_completed = completed;
    m_completed_isSet = true;
}

bool OAIGlacierJobDescription::is_completed_Set() const{
    return m_completed_isSet;
}

bool OAIGlacierJobDescription::is_completed_Valid() const{
    return m_completed_isValid;
}

OAIStatusCode OAIGlacierJobDescription::getStatusCode() const {
    return m_status_code;
}
void OAIGlacierJobDescription::setStatusCode(const OAIStatusCode &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAIGlacierJobDescription::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAIGlacierJobDescription::is_status_code_Valid() const{
    return m_status_code_isValid;
}

QString OAIGlacierJobDescription::getStatusMessage() const {
    return m_status_message;
}
void OAIGlacierJobDescription::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIGlacierJobDescription::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIGlacierJobDescription::is_status_message_Valid() const{
    return m_status_message_isValid;
}

qint32 OAIGlacierJobDescription::getArchiveSizeInBytes() const {
    return m_archive_size_in_bytes;
}
void OAIGlacierJobDescription::setArchiveSizeInBytes(const qint32 &archive_size_in_bytes) {
    m_archive_size_in_bytes = archive_size_in_bytes;
    m_archive_size_in_bytes_isSet = true;
}

bool OAIGlacierJobDescription::is_archive_size_in_bytes_Set() const{
    return m_archive_size_in_bytes_isSet;
}

bool OAIGlacierJobDescription::is_archive_size_in_bytes_Valid() const{
    return m_archive_size_in_bytes_isValid;
}

qint32 OAIGlacierJobDescription::getInventorySizeInBytes() const {
    return m_inventory_size_in_bytes;
}
void OAIGlacierJobDescription::setInventorySizeInBytes(const qint32 &inventory_size_in_bytes) {
    m_inventory_size_in_bytes = inventory_size_in_bytes;
    m_inventory_size_in_bytes_isSet = true;
}

bool OAIGlacierJobDescription::is_inventory_size_in_bytes_Set() const{
    return m_inventory_size_in_bytes_isSet;
}

bool OAIGlacierJobDescription::is_inventory_size_in_bytes_Valid() const{
    return m_inventory_size_in_bytes_isValid;
}

QString OAIGlacierJobDescription::getSnsTopic() const {
    return m_sns_topic;
}
void OAIGlacierJobDescription::setSnsTopic(const QString &sns_topic) {
    m_sns_topic = sns_topic;
    m_sns_topic_isSet = true;
}

bool OAIGlacierJobDescription::is_sns_topic_Set() const{
    return m_sns_topic_isSet;
}

bool OAIGlacierJobDescription::is_sns_topic_Valid() const{
    return m_sns_topic_isValid;
}

QString OAIGlacierJobDescription::getCompletionDate() const {
    return m_completion_date;
}
void OAIGlacierJobDescription::setCompletionDate(const QString &completion_date) {
    m_completion_date = completion_date;
    m_completion_date_isSet = true;
}

bool OAIGlacierJobDescription::is_completion_date_Set() const{
    return m_completion_date_isSet;
}

bool OAIGlacierJobDescription::is_completion_date_Valid() const{
    return m_completion_date_isValid;
}

QString OAIGlacierJobDescription::getSha256TreeHash() const {
    return m_sha256_tree_hash;
}
void OAIGlacierJobDescription::setSha256TreeHash(const QString &sha256_tree_hash) {
    m_sha256_tree_hash = sha256_tree_hash;
    m_sha256_tree_hash_isSet = true;
}

bool OAIGlacierJobDescription::is_sha256_tree_hash_Set() const{
    return m_sha256_tree_hash_isSet;
}

bool OAIGlacierJobDescription::is_sha256_tree_hash_Valid() const{
    return m_sha256_tree_hash_isValid;
}

QString OAIGlacierJobDescription::getArchiveSha256TreeHash() const {
    return m_archive_sha256_tree_hash;
}
void OAIGlacierJobDescription::setArchiveSha256TreeHash(const QString &archive_sha256_tree_hash) {
    m_archive_sha256_tree_hash = archive_sha256_tree_hash;
    m_archive_sha256_tree_hash_isSet = true;
}

bool OAIGlacierJobDescription::is_archive_sha256_tree_hash_Set() const{
    return m_archive_sha256_tree_hash_isSet;
}

bool OAIGlacierJobDescription::is_archive_sha256_tree_hash_Valid() const{
    return m_archive_sha256_tree_hash_isValid;
}

QString OAIGlacierJobDescription::getRetrievalByteRange() const {
    return m_retrieval_byte_range;
}
void OAIGlacierJobDescription::setRetrievalByteRange(const QString &retrieval_byte_range) {
    m_retrieval_byte_range = retrieval_byte_range;
    m_retrieval_byte_range_isSet = true;
}

bool OAIGlacierJobDescription::is_retrieval_byte_range_Set() const{
    return m_retrieval_byte_range_isSet;
}

bool OAIGlacierJobDescription::is_retrieval_byte_range_Valid() const{
    return m_retrieval_byte_range_isValid;
}

QString OAIGlacierJobDescription::getTier() const {
    return m_tier;
}
void OAIGlacierJobDescription::setTier(const QString &tier) {
    m_tier = tier;
    m_tier_isSet = true;
}

bool OAIGlacierJobDescription::is_tier_Set() const{
    return m_tier_isSet;
}

bool OAIGlacierJobDescription::is_tier_Valid() const{
    return m_tier_isValid;
}

OAIGlacierJobDescription_InventoryRetrievalParameters OAIGlacierJobDescription::getInventoryRetrievalParameters() const {
    return m_inventory_retrieval_parameters;
}
void OAIGlacierJobDescription::setInventoryRetrievalParameters(const OAIGlacierJobDescription_InventoryRetrievalParameters &inventory_retrieval_parameters) {
    m_inventory_retrieval_parameters = inventory_retrieval_parameters;
    m_inventory_retrieval_parameters_isSet = true;
}

bool OAIGlacierJobDescription::is_inventory_retrieval_parameters_Set() const{
    return m_inventory_retrieval_parameters_isSet;
}

bool OAIGlacierJobDescription::is_inventory_retrieval_parameters_Valid() const{
    return m_inventory_retrieval_parameters_isValid;
}

QString OAIGlacierJobDescription::getJobOutputPath() const {
    return m_job_output_path;
}
void OAIGlacierJobDescription::setJobOutputPath(const QString &job_output_path) {
    m_job_output_path = job_output_path;
    m_job_output_path_isSet = true;
}

bool OAIGlacierJobDescription::is_job_output_path_Set() const{
    return m_job_output_path_isSet;
}

bool OAIGlacierJobDescription::is_job_output_path_Valid() const{
    return m_job_output_path_isValid;
}

OAIGlacierJobDescription_SelectParameters OAIGlacierJobDescription::getSelectParameters() const {
    return m_select_parameters;
}
void OAIGlacierJobDescription::setSelectParameters(const OAIGlacierJobDescription_SelectParameters &select_parameters) {
    m_select_parameters = select_parameters;
    m_select_parameters_isSet = true;
}

bool OAIGlacierJobDescription::is_select_parameters_Set() const{
    return m_select_parameters_isSet;
}

bool OAIGlacierJobDescription::is_select_parameters_Valid() const{
    return m_select_parameters_isValid;
}

OAIGlacierJobDescription_OutputLocation OAIGlacierJobDescription::getOutputLocation() const {
    return m_output_location;
}
void OAIGlacierJobDescription::setOutputLocation(const OAIGlacierJobDescription_OutputLocation &output_location) {
    m_output_location = output_location;
    m_output_location_isSet = true;
}

bool OAIGlacierJobDescription::is_output_location_Set() const{
    return m_output_location_isSet;
}

bool OAIGlacierJobDescription::is_output_location_Valid() const{
    return m_output_location_isValid;
}

bool OAIGlacierJobDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_archive_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vault_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_archive_size_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_size_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sns_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha256_tree_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_archive_sha256_tree_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retrieval_byte_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_retrieval_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_output_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_select_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_location.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGlacierJobDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
