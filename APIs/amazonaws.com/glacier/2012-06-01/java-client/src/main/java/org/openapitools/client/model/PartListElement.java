/*
 * Amazon Glacier
 * <p> Amazon S3 Glacier (Glacier) is a storage solution for \"cold data.\"</p> <p>Glacier is an extremely low-cost storage service that provides secure, durable, and easy-to-use storage for data backup and archival. With Glacier, customers can store their data cost effectively for months, years, or decades. Glacier also enables customers to offload the administrative burdens of operating and scaling storage to AWS, so they don't have to worry about capacity planning, hardware provisioning, data replication, hardware failure and recovery, or time-consuming hardware migrations.</p> <p>Glacier is a great storage choice when low storage cost is paramount and your data is rarely retrieved. If your application requires fast or frequent access to your data, consider using Amazon S3. For more information, see <a href=\"http://aws.amazon.com/s3/\">Amazon Simple Storage Service (Amazon S3)</a>.</p> <p>You can store any kind of data in any format. There is no maximum limit on the total amount of data you can store in Glacier.</p> <p>If you are a first-time user of Glacier, we recommend that you begin by reading the following sections in the <i>Amazon S3 Glacier Developer Guide</i>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/amazonglacier/latest/dev/introduction.html\">What is Amazon S3 Glacier</a> - This section of the Developer Guide describes the underlying data model, the operations it supports, and the AWS SDKs that you can use to interact with the service.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/amazonglacier/latest/dev/amazon-glacier-getting-started.html\">Getting Started with Amazon S3 Glacier</a> - The Getting Started section walks you through the process of creating a vault, uploading archives, creating jobs to download archives, retrieving the job output, and deleting archives.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2012-06-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A list of the part sizes of the multipart upload.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:14.721106-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PartListElement {
  public static final String SERIALIZED_NAME_RANGE_IN_BYTES = "RangeInBytes";
  @SerializedName(SERIALIZED_NAME_RANGE_IN_BYTES)
  private String rangeInBytes;

  public static final String SERIALIZED_NAME_SH_A256_TREE_HASH = "SHA256TreeHash";
  @SerializedName(SERIALIZED_NAME_SH_A256_TREE_HASH)
  private String shA256TreeHash;

  public PartListElement() {
  }

  public PartListElement rangeInBytes(String rangeInBytes) {
    this.rangeInBytes = rangeInBytes;
    return this;
  }

  /**
   * Get rangeInBytes
   * @return rangeInBytes
   */
  @javax.annotation.Nullable
  public String getRangeInBytes() {
    return rangeInBytes;
  }

  public void setRangeInBytes(String rangeInBytes) {
    this.rangeInBytes = rangeInBytes;
  }


  public PartListElement shA256TreeHash(String shA256TreeHash) {
    this.shA256TreeHash = shA256TreeHash;
    return this;
  }

  /**
   * Get shA256TreeHash
   * @return shA256TreeHash
   */
  @javax.annotation.Nullable
  public String getShA256TreeHash() {
    return shA256TreeHash;
  }

  public void setShA256TreeHash(String shA256TreeHash) {
    this.shA256TreeHash = shA256TreeHash;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PartListElement partListElement = (PartListElement) o;
    return Objects.equals(this.rangeInBytes, partListElement.rangeInBytes) &&
        Objects.equals(this.shA256TreeHash, partListElement.shA256TreeHash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rangeInBytes, shA256TreeHash);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PartListElement {\n");
    sb.append("    rangeInBytes: ").append(toIndentedString(rangeInBytes)).append("\n");
    sb.append("    shA256TreeHash: ").append(toIndentedString(shA256TreeHash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("RangeInBytes");
    openapiFields.add("SHA256TreeHash");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PartListElement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PartListElement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PartListElement is not found in the empty JSON string", PartListElement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PartListElement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PartListElement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `RangeInBytes`
      if (jsonObj.get("RangeInBytes") != null && !jsonObj.get("RangeInBytes").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RangeInBytes"));
      }
      // validate the optional field `SHA256TreeHash`
      if (jsonObj.get("SHA256TreeHash") != null && !jsonObj.get("SHA256TreeHash").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SHA256TreeHash"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PartListElement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PartListElement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PartListElement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PartListElement.class));

       return (TypeAdapter<T>) new TypeAdapter<PartListElement>() {
           @Override
           public void write(JsonWriter out, PartListElement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PartListElement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PartListElement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PartListElement
   * @throws IOException if the JSON string is invalid with respect to PartListElement
   */
  public static PartListElement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PartListElement.class);
  }

  /**
   * Convert an instance of PartListElement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

