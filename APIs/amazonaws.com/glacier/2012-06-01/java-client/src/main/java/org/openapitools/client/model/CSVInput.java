/*
 * Amazon Glacier
 * <p> Amazon S3 Glacier (Glacier) is a storage solution for \"cold data.\"</p> <p>Glacier is an extremely low-cost storage service that provides secure, durable, and easy-to-use storage for data backup and archival. With Glacier, customers can store their data cost effectively for months, years, or decades. Glacier also enables customers to offload the administrative burdens of operating and scaling storage to AWS, so they don't have to worry about capacity planning, hardware provisioning, data replication, hardware failure and recovery, or time-consuming hardware migrations.</p> <p>Glacier is a great storage choice when low storage cost is paramount and your data is rarely retrieved. If your application requires fast or frequent access to your data, consider using Amazon S3. For more information, see <a href=\"http://aws.amazon.com/s3/\">Amazon Simple Storage Service (Amazon S3)</a>.</p> <p>You can store any kind of data in any format. There is no maximum limit on the total amount of data you can store in Glacier.</p> <p>If you are a first-time user of Glacier, we recommend that you begin by reading the following sections in the <i>Amazon S3 Glacier Developer Guide</i>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/amazonglacier/latest/dev/introduction.html\">What is Amazon S3 Glacier</a> - This section of the Developer Guide describes the underlying data model, the operations it supports, and the AWS SDKs that you can use to interact with the service.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/amazonglacier/latest/dev/amazon-glacier-getting-started.html\">Getting Started with Amazon S3 Glacier</a> - The Getting Started section walks you through the process of creating a vault, uploading archives, creating jobs to download archives, retrieving the job output, and deleting archives.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2012-06-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FileHeaderInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about the comma-separated value (CSV) file to select from.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:14.721106-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CSVInput {
  public static final String SERIALIZED_NAME_FILE_HEADER_INFO = "FileHeaderInfo";
  @SerializedName(SERIALIZED_NAME_FILE_HEADER_INFO)
  private FileHeaderInfo fileHeaderInfo;

  public static final String SERIALIZED_NAME_COMMENTS = "Comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_QUOTE_ESCAPE_CHARACTER = "QuoteEscapeCharacter";
  @SerializedName(SERIALIZED_NAME_QUOTE_ESCAPE_CHARACTER)
  private String quoteEscapeCharacter;

  public static final String SERIALIZED_NAME_RECORD_DELIMITER = "RecordDelimiter";
  @SerializedName(SERIALIZED_NAME_RECORD_DELIMITER)
  private String recordDelimiter;

  public static final String SERIALIZED_NAME_FIELD_DELIMITER = "FieldDelimiter";
  @SerializedName(SERIALIZED_NAME_FIELD_DELIMITER)
  private String fieldDelimiter;

  public static final String SERIALIZED_NAME_QUOTE_CHARACTER = "QuoteCharacter";
  @SerializedName(SERIALIZED_NAME_QUOTE_CHARACTER)
  private String quoteCharacter;

  public CSVInput() {
  }

  public CSVInput fileHeaderInfo(FileHeaderInfo fileHeaderInfo) {
    this.fileHeaderInfo = fileHeaderInfo;
    return this;
  }

  /**
   * Get fileHeaderInfo
   * @return fileHeaderInfo
   */
  @javax.annotation.Nullable
  public FileHeaderInfo getFileHeaderInfo() {
    return fileHeaderInfo;
  }

  public void setFileHeaderInfo(FileHeaderInfo fileHeaderInfo) {
    this.fileHeaderInfo = fileHeaderInfo;
  }


  public CSVInput comments(String comments) {
    this.comments = comments;
    return this;
  }

  /**
   * Get comments
   * @return comments
   */
  @javax.annotation.Nullable
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }


  public CSVInput quoteEscapeCharacter(String quoteEscapeCharacter) {
    this.quoteEscapeCharacter = quoteEscapeCharacter;
    return this;
  }

  /**
   * Get quoteEscapeCharacter
   * @return quoteEscapeCharacter
   */
  @javax.annotation.Nullable
  public String getQuoteEscapeCharacter() {
    return quoteEscapeCharacter;
  }

  public void setQuoteEscapeCharacter(String quoteEscapeCharacter) {
    this.quoteEscapeCharacter = quoteEscapeCharacter;
  }


  public CSVInput recordDelimiter(String recordDelimiter) {
    this.recordDelimiter = recordDelimiter;
    return this;
  }

  /**
   * Get recordDelimiter
   * @return recordDelimiter
   */
  @javax.annotation.Nullable
  public String getRecordDelimiter() {
    return recordDelimiter;
  }

  public void setRecordDelimiter(String recordDelimiter) {
    this.recordDelimiter = recordDelimiter;
  }


  public CSVInput fieldDelimiter(String fieldDelimiter) {
    this.fieldDelimiter = fieldDelimiter;
    return this;
  }

  /**
   * Get fieldDelimiter
   * @return fieldDelimiter
   */
  @javax.annotation.Nullable
  public String getFieldDelimiter() {
    return fieldDelimiter;
  }

  public void setFieldDelimiter(String fieldDelimiter) {
    this.fieldDelimiter = fieldDelimiter;
  }


  public CSVInput quoteCharacter(String quoteCharacter) {
    this.quoteCharacter = quoteCharacter;
    return this;
  }

  /**
   * Get quoteCharacter
   * @return quoteCharacter
   */
  @javax.annotation.Nullable
  public String getQuoteCharacter() {
    return quoteCharacter;
  }

  public void setQuoteCharacter(String quoteCharacter) {
    this.quoteCharacter = quoteCharacter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CSVInput csVInput = (CSVInput) o;
    return Objects.equals(this.fileHeaderInfo, csVInput.fileHeaderInfo) &&
        Objects.equals(this.comments, csVInput.comments) &&
        Objects.equals(this.quoteEscapeCharacter, csVInput.quoteEscapeCharacter) &&
        Objects.equals(this.recordDelimiter, csVInput.recordDelimiter) &&
        Objects.equals(this.fieldDelimiter, csVInput.fieldDelimiter) &&
        Objects.equals(this.quoteCharacter, csVInput.quoteCharacter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileHeaderInfo, comments, quoteEscapeCharacter, recordDelimiter, fieldDelimiter, quoteCharacter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CSVInput {\n");
    sb.append("    fileHeaderInfo: ").append(toIndentedString(fileHeaderInfo)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    quoteEscapeCharacter: ").append(toIndentedString(quoteEscapeCharacter)).append("\n");
    sb.append("    recordDelimiter: ").append(toIndentedString(recordDelimiter)).append("\n");
    sb.append("    fieldDelimiter: ").append(toIndentedString(fieldDelimiter)).append("\n");
    sb.append("    quoteCharacter: ").append(toIndentedString(quoteCharacter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FileHeaderInfo");
    openapiFields.add("Comments");
    openapiFields.add("QuoteEscapeCharacter");
    openapiFields.add("RecordDelimiter");
    openapiFields.add("FieldDelimiter");
    openapiFields.add("QuoteCharacter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CSVInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CSVInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CSVInput is not found in the empty JSON string", CSVInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CSVInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CSVInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `FileHeaderInfo`
      if (jsonObj.get("FileHeaderInfo") != null && !jsonObj.get("FileHeaderInfo").isJsonNull()) {
        FileHeaderInfo.validateJsonElement(jsonObj.get("FileHeaderInfo"));
      }
      // validate the optional field `Comments`
      if (jsonObj.get("Comments") != null && !jsonObj.get("Comments").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Comments"));
      }
      // validate the optional field `QuoteEscapeCharacter`
      if (jsonObj.get("QuoteEscapeCharacter") != null && !jsonObj.get("QuoteEscapeCharacter").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("QuoteEscapeCharacter"));
      }
      // validate the optional field `RecordDelimiter`
      if (jsonObj.get("RecordDelimiter") != null && !jsonObj.get("RecordDelimiter").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RecordDelimiter"));
      }
      // validate the optional field `FieldDelimiter`
      if (jsonObj.get("FieldDelimiter") != null && !jsonObj.get("FieldDelimiter").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FieldDelimiter"));
      }
      // validate the optional field `QuoteCharacter`
      if (jsonObj.get("QuoteCharacter") != null && !jsonObj.get("QuoteCharacter").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("QuoteCharacter"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CSVInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CSVInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CSVInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CSVInput.class));

       return (TypeAdapter<T>) new TypeAdapter<CSVInput>() {
           @Override
           public void write(JsonWriter out, CSVInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CSVInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CSVInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CSVInput
   * @throws IOException if the JSON string is invalid with respect to CSVInput
   */
  public static CSVInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CSVInput.class);
  }

  /**
   * Convert an instance of CSVInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

