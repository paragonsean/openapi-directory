/**
 * Amazon Glacier
 * <p> Amazon S3 Glacier (Glacier) is a storage solution for \"cold data.\"</p> <p>Glacier is an extremely low-cost storage service that provides secure, durable, and easy-to-use storage for data backup and archival. With Glacier, customers can store their data cost effectively for months, years, or decades. Glacier also enables customers to offload the administrative burdens of operating and scaling storage to AWS, so they don't have to worry about capacity planning, hardware provisioning, data replication, hardware failure and recovery, or time-consuming hardware migrations.</p> <p>Glacier is a great storage choice when low storage cost is paramount and your data is rarely retrieved. If your application requires fast or frequent access to your data, consider using Amazon S3. For more information, see <a href=\"http://aws.amazon.com/s3/\">Amazon Simple Storage Service (Amazon S3)</a>.</p> <p>You can store any kind of data in any format. There is no maximum limit on the total amount of data you can store in Glacier.</p> <p>If you are a first-time user of Glacier, we recommend that you begin by reading the following sections in the <i>Amazon S3 Glacier Developer Guide</i>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/amazonglacier/latest/dev/introduction.html\">What is Amazon S3 Glacier</a> - This section of the Developer Guide describes the underlying data model, the operations it supports, and the AWS SDKs that you can use to interact with the service.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/amazonglacier/latest/dev/amazon-glacier-getting-started.html\">Getting Started with Amazon S3 Glacier</a> - The Getting Started section walks you through the process of creating a vault, uploading archives, creating jobs to download archives, retrieving the job output, and deleting archives.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2012-06-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonGlacier);
  }
}(this, function(expect, AmazonGlacier) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonGlacier.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('abortMultipartUpload', function() {
      it('should call abortMultipartUpload successfully', function(done) {
        //uncomment below and update the code to test abortMultipartUpload
        //instance.abortMultipartUpload(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('abortVaultLock', function() {
      it('should call abortVaultLock successfully', function(done) {
        //uncomment below and update the code to test abortVaultLock
        //instance.abortVaultLock(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addTagsToVault', function() {
      it('should call addTagsToVault successfully', function(done) {
        //uncomment below and update the code to test addTagsToVault
        //instance.addTagsToVault(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('completeMultipartUpload', function() {
      it('should call completeMultipartUpload successfully', function(done) {
        //uncomment below and update the code to test completeMultipartUpload
        //instance.completeMultipartUpload(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('completeVaultLock', function() {
      it('should call completeVaultLock successfully', function(done) {
        //uncomment below and update the code to test completeVaultLock
        //instance.completeVaultLock(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createVault', function() {
      it('should call createVault successfully', function(done) {
        //uncomment below and update the code to test createVault
        //instance.createVault(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteArchive', function() {
      it('should call deleteArchive successfully', function(done) {
        //uncomment below and update the code to test deleteArchive
        //instance.deleteArchive(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVault', function() {
      it('should call deleteVault successfully', function(done) {
        //uncomment below and update the code to test deleteVault
        //instance.deleteVault(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVaultAccessPolicy', function() {
      it('should call deleteVaultAccessPolicy successfully', function(done) {
        //uncomment below and update the code to test deleteVaultAccessPolicy
        //instance.deleteVaultAccessPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVaultNotifications', function() {
      it('should call deleteVaultNotifications successfully', function(done) {
        //uncomment below and update the code to test deleteVaultNotifications
        //instance.deleteVaultNotifications(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeJob', function() {
      it('should call describeJob successfully', function(done) {
        //uncomment below and update the code to test describeJob
        //instance.describeJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeVault', function() {
      it('should call describeVault successfully', function(done) {
        //uncomment below and update the code to test describeVault
        //instance.describeVault(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDataRetrievalPolicy', function() {
      it('should call getDataRetrievalPolicy successfully', function(done) {
        //uncomment below and update the code to test getDataRetrievalPolicy
        //instance.getDataRetrievalPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getJobOutput', function() {
      it('should call getJobOutput successfully', function(done) {
        //uncomment below and update the code to test getJobOutput
        //instance.getJobOutput(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getVaultAccessPolicy', function() {
      it('should call getVaultAccessPolicy successfully', function(done) {
        //uncomment below and update the code to test getVaultAccessPolicy
        //instance.getVaultAccessPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getVaultLock', function() {
      it('should call getVaultLock successfully', function(done) {
        //uncomment below and update the code to test getVaultLock
        //instance.getVaultLock(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getVaultNotifications', function() {
      it('should call getVaultNotifications successfully', function(done) {
        //uncomment below and update the code to test getVaultNotifications
        //instance.getVaultNotifications(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('initiateJob', function() {
      it('should call initiateJob successfully', function(done) {
        //uncomment below and update the code to test initiateJob
        //instance.initiateJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('initiateMultipartUpload', function() {
      it('should call initiateMultipartUpload successfully', function(done) {
        //uncomment below and update the code to test initiateMultipartUpload
        //instance.initiateMultipartUpload(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('initiateVaultLock', function() {
      it('should call initiateVaultLock successfully', function(done) {
        //uncomment below and update the code to test initiateVaultLock
        //instance.initiateVaultLock(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listJobs', function() {
      it('should call listJobs successfully', function(done) {
        //uncomment below and update the code to test listJobs
        //instance.listJobs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listMultipartUploads', function() {
      it('should call listMultipartUploads successfully', function(done) {
        //uncomment below and update the code to test listMultipartUploads
        //instance.listMultipartUploads(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listParts', function() {
      it('should call listParts successfully', function(done) {
        //uncomment below and update the code to test listParts
        //instance.listParts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listProvisionedCapacity', function() {
      it('should call listProvisionedCapacity successfully', function(done) {
        //uncomment below and update the code to test listProvisionedCapacity
        //instance.listProvisionedCapacity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForVault', function() {
      it('should call listTagsForVault successfully', function(done) {
        //uncomment below and update the code to test listTagsForVault
        //instance.listTagsForVault(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listVaults', function() {
      it('should call listVaults successfully', function(done) {
        //uncomment below and update the code to test listVaults
        //instance.listVaults(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('purchaseProvisionedCapacity', function() {
      it('should call purchaseProvisionedCapacity successfully', function(done) {
        //uncomment below and update the code to test purchaseProvisionedCapacity
        //instance.purchaseProvisionedCapacity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeTagsFromVault', function() {
      it('should call removeTagsFromVault successfully', function(done) {
        //uncomment below and update the code to test removeTagsFromVault
        //instance.removeTagsFromVault(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setDataRetrievalPolicy', function() {
      it('should call setDataRetrievalPolicy successfully', function(done) {
        //uncomment below and update the code to test setDataRetrievalPolicy
        //instance.setDataRetrievalPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setVaultAccessPolicy', function() {
      it('should call setVaultAccessPolicy successfully', function(done) {
        //uncomment below and update the code to test setVaultAccessPolicy
        //instance.setVaultAccessPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setVaultNotifications', function() {
      it('should call setVaultNotifications successfully', function(done) {
        //uncomment below and update the code to test setVaultNotifications
        //instance.setVaultNotifications(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uploadArchive', function() {
      it('should call uploadArchive successfully', function(done) {
        //uncomment below and update the code to test uploadArchive
        //instance.uploadArchive(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uploadMultipartPart', function() {
      it('should call uploadMultipartPart successfully', function(done) {
        //uncomment below and update the code to test uploadMultipartPart
        //instance.uploadMultipartPart(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
