/**
 * Amazon Glacier
 * <p> Amazon S3 Glacier (Glacier) is a storage solution for \"cold data.\"</p> <p>Glacier is an extremely low-cost storage service that provides secure, durable, and easy-to-use storage for data backup and archival. With Glacier, customers can store their data cost effectively for months, years, or decades. Glacier also enables customers to offload the administrative burdens of operating and scaling storage to AWS, so they don't have to worry about capacity planning, hardware provisioning, data replication, hardware failure and recovery, or time-consuming hardware migrations.</p> <p>Glacier is a great storage choice when low storage cost is paramount and your data is rarely retrieved. If your application requires fast or frequent access to your data, consider using Amazon S3. For more information, see <a href=\"http://aws.amazon.com/s3/\">Amazon Simple Storage Service (Amazon S3)</a>.</p> <p>You can store any kind of data in any format. There is no maximum limit on the total amount of data you can store in Glacier.</p> <p>If you are a first-time user of Glacier, we recommend that you begin by reading the following sections in the <i>Amazon S3 Glacier Developer Guide</i>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/amazonglacier/latest/dev/introduction.html\">What is Amazon S3 Glacier</a> - This section of the Developer Guide describes the underlying data model, the operations it supports, and the AWS SDKs that you can use to interact with the service.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/amazonglacier/latest/dev/amazon-glacier-getting-started.html\">Getting Started with Amazon S3 Glacier</a> - The Getting Started section walks you through the process of creating a vault, uploading archives, creating jobs to download archives, retrieving the job output, and deleting archives.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2012-06-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonGlacier);
  }
}(this, function(expect, AmazonGlacier) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonGlacier.S3Location();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('S3Location', function() {
    it('should create an instance of S3Location', function() {
      // uncomment below and update the code to test S3Location
      //var instance = new AmazonGlacier.S3Location();
      //expect(instance).to.be.a(AmazonGlacier.S3Location);
    });

    it('should have the property bucketName (base name: "BucketName")', function() {
      // uncomment below and update the code to test the property bucketName
      //var instance = new AmazonGlacier.S3Location();
      //expect(instance).to.be();
    });

    it('should have the property prefix (base name: "Prefix")', function() {
      // uncomment below and update the code to test the property prefix
      //var instance = new AmazonGlacier.S3Location();
      //expect(instance).to.be();
    });

    it('should have the property encryption (base name: "Encryption")', function() {
      // uncomment below and update the code to test the property encryption
      //var instance = new AmazonGlacier.S3Location();
      //expect(instance).to.be();
    });

    it('should have the property cannedACL (base name: "CannedACL")', function() {
      // uncomment below and update the code to test the property cannedACL
      //var instance = new AmazonGlacier.S3Location();
      //expect(instance).to.be();
    });

    it('should have the property accessControlList (base name: "AccessControlList")', function() {
      // uncomment below and update the code to test the property accessControlList
      //var instance = new AmazonGlacier.S3Location();
      //expect(instance).to.be();
    });

    it('should have the property tagging (base name: "Tagging")', function() {
      // uncomment below and update the code to test the property tagging
      //var instance = new AmazonGlacier.S3Location();
      //expect(instance).to.be();
    });

    it('should have the property userMetadata (base name: "UserMetadata")', function() {
      // uncomment below and update the code to test the property userMetadata
      //var instance = new AmazonGlacier.S3Location();
      //expect(instance).to.be();
    });

    it('should have the property storageClass (base name: "StorageClass")', function() {
      // uncomment below and update the code to test the property storageClass
      //var instance = new AmazonGlacier.S3Location();
      //expect(instance).to.be();
    });

  });

}));
