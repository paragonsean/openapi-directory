# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.canned_acl import CannedACL
from openapi_server.models.s3_location_encryption import S3LocationEncryption
from openapi_server.models.storage_class import StorageClass
from openapi_server import util


class OutputLocationS3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket_name: str=None, prefix: str=None, encryption: S3LocationEncryption=None, canned_acl: CannedACL=None, access_control_list: List=None, tagging: Dict=None, user_metadata: Dict=None, storage_class: StorageClass=None):
        """OutputLocationS3 - a model defined in OpenAPI

        :param bucket_name: The bucket_name of this OutputLocationS3.
        :param prefix: The prefix of this OutputLocationS3.
        :param encryption: The encryption of this OutputLocationS3.
        :param canned_acl: The canned_acl of this OutputLocationS3.
        :param access_control_list: The access_control_list of this OutputLocationS3.
        :param tagging: The tagging of this OutputLocationS3.
        :param user_metadata: The user_metadata of this OutputLocationS3.
        :param storage_class: The storage_class of this OutputLocationS3.
        """
        self.openapi_types = {
            'bucket_name': str,
            'prefix': str,
            'encryption': S3LocationEncryption,
            'canned_acl': CannedACL,
            'access_control_list': List,
            'tagging': Dict,
            'user_metadata': Dict,
            'storage_class': StorageClass
        }

        self.attribute_map = {
            'bucket_name': 'BucketName',
            'prefix': 'Prefix',
            'encryption': 'Encryption',
            'canned_acl': 'CannedACL',
            'access_control_list': 'AccessControlList',
            'tagging': 'Tagging',
            'user_metadata': 'UserMetadata',
            'storage_class': 'StorageClass'
        }

        self._bucket_name = bucket_name
        self._prefix = prefix
        self._encryption = encryption
        self._canned_acl = canned_acl
        self._access_control_list = access_control_list
        self._tagging = tagging
        self._user_metadata = user_metadata
        self._storage_class = storage_class

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OutputLocationS3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OutputLocation_S3 of this OutputLocationS3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket_name(self):
        """Gets the bucket_name of this OutputLocationS3.


        :return: The bucket_name of this OutputLocationS3.
        :rtype: str
        """
        return self._bucket_name

    @bucket_name.setter
    def bucket_name(self, bucket_name):
        """Sets the bucket_name of this OutputLocationS3.


        :param bucket_name: The bucket_name of this OutputLocationS3.
        :type bucket_name: str
        """

        self._bucket_name = bucket_name

    @property
    def prefix(self):
        """Gets the prefix of this OutputLocationS3.


        :return: The prefix of this OutputLocationS3.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this OutputLocationS3.


        :param prefix: The prefix of this OutputLocationS3.
        :type prefix: str
        """

        self._prefix = prefix

    @property
    def encryption(self):
        """Gets the encryption of this OutputLocationS3.


        :return: The encryption of this OutputLocationS3.
        :rtype: S3LocationEncryption
        """
        return self._encryption

    @encryption.setter
    def encryption(self, encryption):
        """Sets the encryption of this OutputLocationS3.


        :param encryption: The encryption of this OutputLocationS3.
        :type encryption: S3LocationEncryption
        """

        self._encryption = encryption

    @property
    def canned_acl(self):
        """Gets the canned_acl of this OutputLocationS3.


        :return: The canned_acl of this OutputLocationS3.
        :rtype: CannedACL
        """
        return self._canned_acl

    @canned_acl.setter
    def canned_acl(self, canned_acl):
        """Sets the canned_acl of this OutputLocationS3.


        :param canned_acl: The canned_acl of this OutputLocationS3.
        :type canned_acl: CannedACL
        """

        self._canned_acl = canned_acl

    @property
    def access_control_list(self):
        """Gets the access_control_list of this OutputLocationS3.


        :return: The access_control_list of this OutputLocationS3.
        :rtype: List
        """
        return self._access_control_list

    @access_control_list.setter
    def access_control_list(self, access_control_list):
        """Sets the access_control_list of this OutputLocationS3.


        :param access_control_list: The access_control_list of this OutputLocationS3.
        :type access_control_list: List
        """

        self._access_control_list = access_control_list

    @property
    def tagging(self):
        """Gets the tagging of this OutputLocationS3.


        :return: The tagging of this OutputLocationS3.
        :rtype: Dict
        """
        return self._tagging

    @tagging.setter
    def tagging(self, tagging):
        """Sets the tagging of this OutputLocationS3.


        :param tagging: The tagging of this OutputLocationS3.
        :type tagging: Dict
        """

        self._tagging = tagging

    @property
    def user_metadata(self):
        """Gets the user_metadata of this OutputLocationS3.


        :return: The user_metadata of this OutputLocationS3.
        :rtype: Dict
        """
        return self._user_metadata

    @user_metadata.setter
    def user_metadata(self, user_metadata):
        """Sets the user_metadata of this OutputLocationS3.


        :param user_metadata: The user_metadata of this OutputLocationS3.
        :type user_metadata: Dict
        """

        self._user_metadata = user_metadata

    @property
    def storage_class(self):
        """Gets the storage_class of this OutputLocationS3.


        :return: The storage_class of this OutputLocationS3.
        :rtype: StorageClass
        """
        return self._storage_class

    @storage_class.setter
    def storage_class(self, storage_class):
        """Sets the storage_class of this OutputLocationS3.


        :param storage_class: The storage_class of this OutputLocationS3.
        :type storage_class: StorageClass
        """

        self._storage_class = storage_class
