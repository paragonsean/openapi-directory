# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.type import Type
from openapi_server import util


class GrantGrantee(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: Type=None, display_name: str=None, uri: str=None, id: str=None, email_address: str=None):
        """GrantGrantee - a model defined in OpenAPI

        :param type: The type of this GrantGrantee.
        :param display_name: The display_name of this GrantGrantee.
        :param uri: The uri of this GrantGrantee.
        :param id: The id of this GrantGrantee.
        :param email_address: The email_address of this GrantGrantee.
        """
        self.openapi_types = {
            'type': Type,
            'display_name': str,
            'uri': str,
            'id': str,
            'email_address': str
        }

        self.attribute_map = {
            'type': 'Type',
            'display_name': 'DisplayName',
            'uri': 'URI',
            'id': 'ID',
            'email_address': 'EmailAddress'
        }

        self._type = type
        self._display_name = display_name
        self._uri = uri
        self._id = id
        self._email_address = email_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GrantGrantee':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Grant_Grantee of this GrantGrantee.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this GrantGrantee.


        :return: The type of this GrantGrantee.
        :rtype: Type
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GrantGrantee.


        :param type: The type of this GrantGrantee.
        :type type: Type
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def display_name(self):
        """Gets the display_name of this GrantGrantee.


        :return: The display_name of this GrantGrantee.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GrantGrantee.


        :param display_name: The display_name of this GrantGrantee.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def uri(self):
        """Gets the uri of this GrantGrantee.


        :return: The uri of this GrantGrantee.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this GrantGrantee.


        :param uri: The uri of this GrantGrantee.
        :type uri: str
        """

        self._uri = uri

    @property
    def id(self):
        """Gets the id of this GrantGrantee.


        :return: The id of this GrantGrantee.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GrantGrantee.


        :param id: The id of this GrantGrantee.
        :type id: str
        """

        self._id = id

    @property
    def email_address(self):
        """Gets the email_address of this GrantGrantee.


        :return: The email_address of this GrantGrantee.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this GrantGrantee.


        :param email_address: The email_address of this GrantGrantee.
        :type email_address: str
        """

        self._email_address = email_address
