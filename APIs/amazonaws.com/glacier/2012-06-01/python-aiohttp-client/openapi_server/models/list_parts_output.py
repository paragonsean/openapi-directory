# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListPartsOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, multipart_upload_id: str=None, vault_arn: str=None, archive_description: str=None, part_size_in_bytes: int=None, creation_date: str=None, parts: List=None, marker: str=None):
        """ListPartsOutput - a model defined in OpenAPI

        :param multipart_upload_id: The multipart_upload_id of this ListPartsOutput.
        :param vault_arn: The vault_arn of this ListPartsOutput.
        :param archive_description: The archive_description of this ListPartsOutput.
        :param part_size_in_bytes: The part_size_in_bytes of this ListPartsOutput.
        :param creation_date: The creation_date of this ListPartsOutput.
        :param parts: The parts of this ListPartsOutput.
        :param marker: The marker of this ListPartsOutput.
        """
        self.openapi_types = {
            'multipart_upload_id': str,
            'vault_arn': str,
            'archive_description': str,
            'part_size_in_bytes': int,
            'creation_date': str,
            'parts': List,
            'marker': str
        }

        self.attribute_map = {
            'multipart_upload_id': 'MultipartUploadId',
            'vault_arn': 'VaultARN',
            'archive_description': 'ArchiveDescription',
            'part_size_in_bytes': 'PartSizeInBytes',
            'creation_date': 'CreationDate',
            'parts': 'Parts',
            'marker': 'Marker'
        }

        self._multipart_upload_id = multipart_upload_id
        self._vault_arn = vault_arn
        self._archive_description = archive_description
        self._part_size_in_bytes = part_size_in_bytes
        self._creation_date = creation_date
        self._parts = parts
        self._marker = marker

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListPartsOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListPartsOutput of this ListPartsOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def multipart_upload_id(self):
        """Gets the multipart_upload_id of this ListPartsOutput.


        :return: The multipart_upload_id of this ListPartsOutput.
        :rtype: str
        """
        return self._multipart_upload_id

    @multipart_upload_id.setter
    def multipart_upload_id(self, multipart_upload_id):
        """Sets the multipart_upload_id of this ListPartsOutput.


        :param multipart_upload_id: The multipart_upload_id of this ListPartsOutput.
        :type multipart_upload_id: str
        """

        self._multipart_upload_id = multipart_upload_id

    @property
    def vault_arn(self):
        """Gets the vault_arn of this ListPartsOutput.


        :return: The vault_arn of this ListPartsOutput.
        :rtype: str
        """
        return self._vault_arn

    @vault_arn.setter
    def vault_arn(self, vault_arn):
        """Sets the vault_arn of this ListPartsOutput.


        :param vault_arn: The vault_arn of this ListPartsOutput.
        :type vault_arn: str
        """

        self._vault_arn = vault_arn

    @property
    def archive_description(self):
        """Gets the archive_description of this ListPartsOutput.


        :return: The archive_description of this ListPartsOutput.
        :rtype: str
        """
        return self._archive_description

    @archive_description.setter
    def archive_description(self, archive_description):
        """Sets the archive_description of this ListPartsOutput.


        :param archive_description: The archive_description of this ListPartsOutput.
        :type archive_description: str
        """

        self._archive_description = archive_description

    @property
    def part_size_in_bytes(self):
        """Gets the part_size_in_bytes of this ListPartsOutput.


        :return: The part_size_in_bytes of this ListPartsOutput.
        :rtype: int
        """
        return self._part_size_in_bytes

    @part_size_in_bytes.setter
    def part_size_in_bytes(self, part_size_in_bytes):
        """Sets the part_size_in_bytes of this ListPartsOutput.


        :param part_size_in_bytes: The part_size_in_bytes of this ListPartsOutput.
        :type part_size_in_bytes: int
        """

        self._part_size_in_bytes = part_size_in_bytes

    @property
    def creation_date(self):
        """Gets the creation_date of this ListPartsOutput.


        :return: The creation_date of this ListPartsOutput.
        :rtype: str
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this ListPartsOutput.


        :param creation_date: The creation_date of this ListPartsOutput.
        :type creation_date: str
        """

        self._creation_date = creation_date

    @property
    def parts(self):
        """Gets the parts of this ListPartsOutput.


        :return: The parts of this ListPartsOutput.
        :rtype: List
        """
        return self._parts

    @parts.setter
    def parts(self, parts):
        """Sets the parts of this ListPartsOutput.


        :param parts: The parts of this ListPartsOutput.
        :type parts: List
        """

        self._parts = parts

    @property
    def marker(self):
        """Gets the marker of this ListPartsOutput.


        :return: The marker of this ListPartsOutput.
        :rtype: str
        """
        return self._marker

    @marker.setter
    def marker(self, marker):
        """Sets the marker of this ListPartsOutput.


        :param marker: The marker of this ListPartsOutput.
        :type marker: str
        """

        self._marker = marker
