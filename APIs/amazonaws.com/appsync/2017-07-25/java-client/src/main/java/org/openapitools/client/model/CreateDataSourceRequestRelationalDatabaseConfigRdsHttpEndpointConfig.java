/*
 * AWS AppSync
 * AppSync provides API actions for creating and interacting with data sources using GraphQL from your application.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateDataSourceRequestRelationalDatabaseConfigRdsHttpEndpointConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:29.005234-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateDataSourceRequestRelationalDatabaseConfigRdsHttpEndpointConfig {
  public static final String SERIALIZED_NAME_AWS_REGION = "awsRegion";
  @SerializedName(SERIALIZED_NAME_AWS_REGION)
  private String awsRegion;

  public static final String SERIALIZED_NAME_DB_CLUSTER_IDENTIFIER = "dbClusterIdentifier";
  @SerializedName(SERIALIZED_NAME_DB_CLUSTER_IDENTIFIER)
  private String dbClusterIdentifier;

  public static final String SERIALIZED_NAME_DATABASE_NAME = "databaseName";
  @SerializedName(SERIALIZED_NAME_DATABASE_NAME)
  private String databaseName;

  public static final String SERIALIZED_NAME_SCHEMA = "schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  private String schema;

  public static final String SERIALIZED_NAME_AWS_SECRET_STORE_ARN = "awsSecretStoreArn";
  @SerializedName(SERIALIZED_NAME_AWS_SECRET_STORE_ARN)
  private String awsSecretStoreArn;

  public CreateDataSourceRequestRelationalDatabaseConfigRdsHttpEndpointConfig() {
  }

  public CreateDataSourceRequestRelationalDatabaseConfigRdsHttpEndpointConfig awsRegion(String awsRegion) {
    this.awsRegion = awsRegion;
    return this;
  }

  /**
   * Get awsRegion
   * @return awsRegion
   */
  @javax.annotation.Nullable
  public String getAwsRegion() {
    return awsRegion;
  }

  public void setAwsRegion(String awsRegion) {
    this.awsRegion = awsRegion;
  }


  public CreateDataSourceRequestRelationalDatabaseConfigRdsHttpEndpointConfig dbClusterIdentifier(String dbClusterIdentifier) {
    this.dbClusterIdentifier = dbClusterIdentifier;
    return this;
  }

  /**
   * Get dbClusterIdentifier
   * @return dbClusterIdentifier
   */
  @javax.annotation.Nullable
  public String getDbClusterIdentifier() {
    return dbClusterIdentifier;
  }

  public void setDbClusterIdentifier(String dbClusterIdentifier) {
    this.dbClusterIdentifier = dbClusterIdentifier;
  }


  public CreateDataSourceRequestRelationalDatabaseConfigRdsHttpEndpointConfig databaseName(String databaseName) {
    this.databaseName = databaseName;
    return this;
  }

  /**
   * Get databaseName
   * @return databaseName
   */
  @javax.annotation.Nullable
  public String getDatabaseName() {
    return databaseName;
  }

  public void setDatabaseName(String databaseName) {
    this.databaseName = databaseName;
  }


  public CreateDataSourceRequestRelationalDatabaseConfigRdsHttpEndpointConfig schema(String schema) {
    this.schema = schema;
    return this;
  }

  /**
   * Get schema
   * @return schema
   */
  @javax.annotation.Nullable
  public String getSchema() {
    return schema;
  }

  public void setSchema(String schema) {
    this.schema = schema;
  }


  public CreateDataSourceRequestRelationalDatabaseConfigRdsHttpEndpointConfig awsSecretStoreArn(String awsSecretStoreArn) {
    this.awsSecretStoreArn = awsSecretStoreArn;
    return this;
  }

  /**
   * Get awsSecretStoreArn
   * @return awsSecretStoreArn
   */
  @javax.annotation.Nullable
  public String getAwsSecretStoreArn() {
    return awsSecretStoreArn;
  }

  public void setAwsSecretStoreArn(String awsSecretStoreArn) {
    this.awsSecretStoreArn = awsSecretStoreArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDataSourceRequestRelationalDatabaseConfigRdsHttpEndpointConfig createDataSourceRequestRelationalDatabaseConfigRdsHttpEndpointConfig = (CreateDataSourceRequestRelationalDatabaseConfigRdsHttpEndpointConfig) o;
    return Objects.equals(this.awsRegion, createDataSourceRequestRelationalDatabaseConfigRdsHttpEndpointConfig.awsRegion) &&
        Objects.equals(this.dbClusterIdentifier, createDataSourceRequestRelationalDatabaseConfigRdsHttpEndpointConfig.dbClusterIdentifier) &&
        Objects.equals(this.databaseName, createDataSourceRequestRelationalDatabaseConfigRdsHttpEndpointConfig.databaseName) &&
        Objects.equals(this.schema, createDataSourceRequestRelationalDatabaseConfigRdsHttpEndpointConfig.schema) &&
        Objects.equals(this.awsSecretStoreArn, createDataSourceRequestRelationalDatabaseConfigRdsHttpEndpointConfig.awsSecretStoreArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(awsRegion, dbClusterIdentifier, databaseName, schema, awsSecretStoreArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDataSourceRequestRelationalDatabaseConfigRdsHttpEndpointConfig {\n");
    sb.append("    awsRegion: ").append(toIndentedString(awsRegion)).append("\n");
    sb.append("    dbClusterIdentifier: ").append(toIndentedString(dbClusterIdentifier)).append("\n");
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    awsSecretStoreArn: ").append(toIndentedString(awsSecretStoreArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("awsRegion");
    openapiFields.add("dbClusterIdentifier");
    openapiFields.add("databaseName");
    openapiFields.add("schema");
    openapiFields.add("awsSecretStoreArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateDataSourceRequestRelationalDatabaseConfigRdsHttpEndpointConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateDataSourceRequestRelationalDatabaseConfigRdsHttpEndpointConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDataSourceRequestRelationalDatabaseConfigRdsHttpEndpointConfig is not found in the empty JSON string", CreateDataSourceRequestRelationalDatabaseConfigRdsHttpEndpointConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateDataSourceRequestRelationalDatabaseConfigRdsHttpEndpointConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateDataSourceRequestRelationalDatabaseConfigRdsHttpEndpointConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `awsRegion`
      if (jsonObj.get("awsRegion") != null && !jsonObj.get("awsRegion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("awsRegion"));
      }
      // validate the optional field `dbClusterIdentifier`
      if (jsonObj.get("dbClusterIdentifier") != null && !jsonObj.get("dbClusterIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("dbClusterIdentifier"));
      }
      // validate the optional field `databaseName`
      if (jsonObj.get("databaseName") != null && !jsonObj.get("databaseName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("databaseName"));
      }
      // validate the optional field `schema`
      if (jsonObj.get("schema") != null && !jsonObj.get("schema").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("schema"));
      }
      // validate the optional field `awsSecretStoreArn`
      if (jsonObj.get("awsSecretStoreArn") != null && !jsonObj.get("awsSecretStoreArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("awsSecretStoreArn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDataSourceRequestRelationalDatabaseConfigRdsHttpEndpointConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDataSourceRequestRelationalDatabaseConfigRdsHttpEndpointConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDataSourceRequestRelationalDatabaseConfigRdsHttpEndpointConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDataSourceRequestRelationalDatabaseConfigRdsHttpEndpointConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDataSourceRequestRelationalDatabaseConfigRdsHttpEndpointConfig>() {
           @Override
           public void write(JsonWriter out, CreateDataSourceRequestRelationalDatabaseConfigRdsHttpEndpointConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDataSourceRequestRelationalDatabaseConfigRdsHttpEndpointConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateDataSourceRequestRelationalDatabaseConfigRdsHttpEndpointConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateDataSourceRequestRelationalDatabaseConfigRdsHttpEndpointConfig
   * @throws IOException if the JSON string is invalid with respect to CreateDataSourceRequestRelationalDatabaseConfigRdsHttpEndpointConfig
   */
  public static CreateDataSourceRequestRelationalDatabaseConfigRdsHttpEndpointConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDataSourceRequestRelationalDatabaseConfigRdsHttpEndpointConfig.class);
  }

  /**
   * Convert an instance of CreateDataSourceRequestRelationalDatabaseConfigRdsHttpEndpointConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

