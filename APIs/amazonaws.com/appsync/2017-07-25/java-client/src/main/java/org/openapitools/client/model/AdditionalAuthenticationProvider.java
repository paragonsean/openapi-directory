/*
 * AWS AppSync
 * AppSync provides API actions for creating and interacting with data sources using GraphQL from your application.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AdditionalAuthenticationProviderLambdaAuthorizerConfig;
import org.openapitools.client.model.AdditionalAuthenticationProviderOpenIDConnectConfig;
import org.openapitools.client.model.AdditionalAuthenticationProviderUserPoolConfig;
import org.openapitools.client.model.AuthenticationType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes an additional authentication provider.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:29.005234-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdditionalAuthenticationProvider {
  public static final String SERIALIZED_NAME_AUTHENTICATION_TYPE = "authenticationType";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_TYPE)
  private AuthenticationType authenticationType;

  public static final String SERIALIZED_NAME_OPEN_I_D_CONNECT_CONFIG = "openIDConnectConfig";
  @SerializedName(SERIALIZED_NAME_OPEN_I_D_CONNECT_CONFIG)
  private AdditionalAuthenticationProviderOpenIDConnectConfig openIDConnectConfig;

  public static final String SERIALIZED_NAME_USER_POOL_CONFIG = "userPoolConfig";
  @SerializedName(SERIALIZED_NAME_USER_POOL_CONFIG)
  private AdditionalAuthenticationProviderUserPoolConfig userPoolConfig;

  public static final String SERIALIZED_NAME_LAMBDA_AUTHORIZER_CONFIG = "lambdaAuthorizerConfig";
  @SerializedName(SERIALIZED_NAME_LAMBDA_AUTHORIZER_CONFIG)
  private AdditionalAuthenticationProviderLambdaAuthorizerConfig lambdaAuthorizerConfig;

  public AdditionalAuthenticationProvider() {
  }

  public AdditionalAuthenticationProvider authenticationType(AuthenticationType authenticationType) {
    this.authenticationType = authenticationType;
    return this;
  }

  /**
   * Get authenticationType
   * @return authenticationType
   */
  @javax.annotation.Nullable
  public AuthenticationType getAuthenticationType() {
    return authenticationType;
  }

  public void setAuthenticationType(AuthenticationType authenticationType) {
    this.authenticationType = authenticationType;
  }


  public AdditionalAuthenticationProvider openIDConnectConfig(AdditionalAuthenticationProviderOpenIDConnectConfig openIDConnectConfig) {
    this.openIDConnectConfig = openIDConnectConfig;
    return this;
  }

  /**
   * Get openIDConnectConfig
   * @return openIDConnectConfig
   */
  @javax.annotation.Nullable
  public AdditionalAuthenticationProviderOpenIDConnectConfig getOpenIDConnectConfig() {
    return openIDConnectConfig;
  }

  public void setOpenIDConnectConfig(AdditionalAuthenticationProviderOpenIDConnectConfig openIDConnectConfig) {
    this.openIDConnectConfig = openIDConnectConfig;
  }


  public AdditionalAuthenticationProvider userPoolConfig(AdditionalAuthenticationProviderUserPoolConfig userPoolConfig) {
    this.userPoolConfig = userPoolConfig;
    return this;
  }

  /**
   * Get userPoolConfig
   * @return userPoolConfig
   */
  @javax.annotation.Nullable
  public AdditionalAuthenticationProviderUserPoolConfig getUserPoolConfig() {
    return userPoolConfig;
  }

  public void setUserPoolConfig(AdditionalAuthenticationProviderUserPoolConfig userPoolConfig) {
    this.userPoolConfig = userPoolConfig;
  }


  public AdditionalAuthenticationProvider lambdaAuthorizerConfig(AdditionalAuthenticationProviderLambdaAuthorizerConfig lambdaAuthorizerConfig) {
    this.lambdaAuthorizerConfig = lambdaAuthorizerConfig;
    return this;
  }

  /**
   * Get lambdaAuthorizerConfig
   * @return lambdaAuthorizerConfig
   */
  @javax.annotation.Nullable
  public AdditionalAuthenticationProviderLambdaAuthorizerConfig getLambdaAuthorizerConfig() {
    return lambdaAuthorizerConfig;
  }

  public void setLambdaAuthorizerConfig(AdditionalAuthenticationProviderLambdaAuthorizerConfig lambdaAuthorizerConfig) {
    this.lambdaAuthorizerConfig = lambdaAuthorizerConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdditionalAuthenticationProvider additionalAuthenticationProvider = (AdditionalAuthenticationProvider) o;
    return Objects.equals(this.authenticationType, additionalAuthenticationProvider.authenticationType) &&
        Objects.equals(this.openIDConnectConfig, additionalAuthenticationProvider.openIDConnectConfig) &&
        Objects.equals(this.userPoolConfig, additionalAuthenticationProvider.userPoolConfig) &&
        Objects.equals(this.lambdaAuthorizerConfig, additionalAuthenticationProvider.lambdaAuthorizerConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authenticationType, openIDConnectConfig, userPoolConfig, lambdaAuthorizerConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdditionalAuthenticationProvider {\n");
    sb.append("    authenticationType: ").append(toIndentedString(authenticationType)).append("\n");
    sb.append("    openIDConnectConfig: ").append(toIndentedString(openIDConnectConfig)).append("\n");
    sb.append("    userPoolConfig: ").append(toIndentedString(userPoolConfig)).append("\n");
    sb.append("    lambdaAuthorizerConfig: ").append(toIndentedString(lambdaAuthorizerConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authenticationType");
    openapiFields.add("openIDConnectConfig");
    openapiFields.add("userPoolConfig");
    openapiFields.add("lambdaAuthorizerConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdditionalAuthenticationProvider
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdditionalAuthenticationProvider.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdditionalAuthenticationProvider is not found in the empty JSON string", AdditionalAuthenticationProvider.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdditionalAuthenticationProvider.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdditionalAuthenticationProvider` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `authenticationType`
      if (jsonObj.get("authenticationType") != null && !jsonObj.get("authenticationType").isJsonNull()) {
        AuthenticationType.validateJsonElement(jsonObj.get("authenticationType"));
      }
      // validate the optional field `openIDConnectConfig`
      if (jsonObj.get("openIDConnectConfig") != null && !jsonObj.get("openIDConnectConfig").isJsonNull()) {
        AdditionalAuthenticationProviderOpenIDConnectConfig.validateJsonElement(jsonObj.get("openIDConnectConfig"));
      }
      // validate the optional field `userPoolConfig`
      if (jsonObj.get("userPoolConfig") != null && !jsonObj.get("userPoolConfig").isJsonNull()) {
        AdditionalAuthenticationProviderUserPoolConfig.validateJsonElement(jsonObj.get("userPoolConfig"));
      }
      // validate the optional field `lambdaAuthorizerConfig`
      if (jsonObj.get("lambdaAuthorizerConfig") != null && !jsonObj.get("lambdaAuthorizerConfig").isJsonNull()) {
        AdditionalAuthenticationProviderLambdaAuthorizerConfig.validateJsonElement(jsonObj.get("lambdaAuthorizerConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdditionalAuthenticationProvider.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdditionalAuthenticationProvider' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdditionalAuthenticationProvider> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdditionalAuthenticationProvider.class));

       return (TypeAdapter<T>) new TypeAdapter<AdditionalAuthenticationProvider>() {
           @Override
           public void write(JsonWriter out, AdditionalAuthenticationProvider value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdditionalAuthenticationProvider read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdditionalAuthenticationProvider given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdditionalAuthenticationProvider
   * @throws IOException if the JSON string is invalid with respect to AdditionalAuthenticationProvider
   */
  public static AdditionalAuthenticationProvider fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdditionalAuthenticationProvider.class);
  }

  /**
   * Convert an instance of AdditionalAuthenticationProvider to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

