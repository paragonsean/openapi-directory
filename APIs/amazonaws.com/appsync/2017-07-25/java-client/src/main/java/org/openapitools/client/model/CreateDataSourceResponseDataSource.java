/*
 * AWS AppSync
 * AppSync provides API actions for creating and interacting with data sources using GraphQL from your application.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateDataSourceRequestEventBridgeConfig;
import org.openapitools.client.model.CreateDataSourceRequestHttpConfig;
import org.openapitools.client.model.CreateDataSourceRequestLambdaConfig;
import org.openapitools.client.model.CreateDataSourceRequestOpenSearchServiceConfig;
import org.openapitools.client.model.CreateDataSourceRequestRelationalDatabaseConfig;
import org.openapitools.client.model.DataSourceDynamodbConfig;
import org.openapitools.client.model.DataSourceElasticsearchConfig;
import org.openapitools.client.model.DataSourceType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateDataSourceResponseDataSource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:29.005234-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateDataSourceResponseDataSource {
  public static final String SERIALIZED_NAME_DATA_SOURCE_ARN = "dataSourceArn";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE_ARN)
  private String dataSourceArn;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private DataSourceType type;

  public static final String SERIALIZED_NAME_SERVICE_ROLE_ARN = "serviceRoleArn";
  @SerializedName(SERIALIZED_NAME_SERVICE_ROLE_ARN)
  private String serviceRoleArn;

  public static final String SERIALIZED_NAME_DYNAMODB_CONFIG = "dynamodbConfig";
  @SerializedName(SERIALIZED_NAME_DYNAMODB_CONFIG)
  private DataSourceDynamodbConfig dynamodbConfig;

  public static final String SERIALIZED_NAME_LAMBDA_CONFIG = "lambdaConfig";
  @SerializedName(SERIALIZED_NAME_LAMBDA_CONFIG)
  private CreateDataSourceRequestLambdaConfig lambdaConfig;

  public static final String SERIALIZED_NAME_ELASTICSEARCH_CONFIG = "elasticsearchConfig";
  @SerializedName(SERIALIZED_NAME_ELASTICSEARCH_CONFIG)
  private DataSourceElasticsearchConfig elasticsearchConfig;

  public static final String SERIALIZED_NAME_OPEN_SEARCH_SERVICE_CONFIG = "openSearchServiceConfig";
  @SerializedName(SERIALIZED_NAME_OPEN_SEARCH_SERVICE_CONFIG)
  private CreateDataSourceRequestOpenSearchServiceConfig openSearchServiceConfig;

  public static final String SERIALIZED_NAME_HTTP_CONFIG = "httpConfig";
  @SerializedName(SERIALIZED_NAME_HTTP_CONFIG)
  private CreateDataSourceRequestHttpConfig httpConfig;

  public static final String SERIALIZED_NAME_RELATIONAL_DATABASE_CONFIG = "relationalDatabaseConfig";
  @SerializedName(SERIALIZED_NAME_RELATIONAL_DATABASE_CONFIG)
  private CreateDataSourceRequestRelationalDatabaseConfig relationalDatabaseConfig;

  public static final String SERIALIZED_NAME_EVENT_BRIDGE_CONFIG = "eventBridgeConfig";
  @SerializedName(SERIALIZED_NAME_EVENT_BRIDGE_CONFIG)
  private CreateDataSourceRequestEventBridgeConfig eventBridgeConfig;

  public CreateDataSourceResponseDataSource() {
  }

  public CreateDataSourceResponseDataSource dataSourceArn(String dataSourceArn) {
    this.dataSourceArn = dataSourceArn;
    return this;
  }

  /**
   * Get dataSourceArn
   * @return dataSourceArn
   */
  @javax.annotation.Nullable
  public String getDataSourceArn() {
    return dataSourceArn;
  }

  public void setDataSourceArn(String dataSourceArn) {
    this.dataSourceArn = dataSourceArn;
  }


  public CreateDataSourceResponseDataSource name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateDataSourceResponseDataSource description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateDataSourceResponseDataSource type(DataSourceType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public DataSourceType getType() {
    return type;
  }

  public void setType(DataSourceType type) {
    this.type = type;
  }


  public CreateDataSourceResponseDataSource serviceRoleArn(String serviceRoleArn) {
    this.serviceRoleArn = serviceRoleArn;
    return this;
  }

  /**
   * Get serviceRoleArn
   * @return serviceRoleArn
   */
  @javax.annotation.Nullable
  public String getServiceRoleArn() {
    return serviceRoleArn;
  }

  public void setServiceRoleArn(String serviceRoleArn) {
    this.serviceRoleArn = serviceRoleArn;
  }


  public CreateDataSourceResponseDataSource dynamodbConfig(DataSourceDynamodbConfig dynamodbConfig) {
    this.dynamodbConfig = dynamodbConfig;
    return this;
  }

  /**
   * Get dynamodbConfig
   * @return dynamodbConfig
   */
  @javax.annotation.Nullable
  public DataSourceDynamodbConfig getDynamodbConfig() {
    return dynamodbConfig;
  }

  public void setDynamodbConfig(DataSourceDynamodbConfig dynamodbConfig) {
    this.dynamodbConfig = dynamodbConfig;
  }


  public CreateDataSourceResponseDataSource lambdaConfig(CreateDataSourceRequestLambdaConfig lambdaConfig) {
    this.lambdaConfig = lambdaConfig;
    return this;
  }

  /**
   * Get lambdaConfig
   * @return lambdaConfig
   */
  @javax.annotation.Nullable
  public CreateDataSourceRequestLambdaConfig getLambdaConfig() {
    return lambdaConfig;
  }

  public void setLambdaConfig(CreateDataSourceRequestLambdaConfig lambdaConfig) {
    this.lambdaConfig = lambdaConfig;
  }


  public CreateDataSourceResponseDataSource elasticsearchConfig(DataSourceElasticsearchConfig elasticsearchConfig) {
    this.elasticsearchConfig = elasticsearchConfig;
    return this;
  }

  /**
   * Get elasticsearchConfig
   * @return elasticsearchConfig
   */
  @javax.annotation.Nullable
  public DataSourceElasticsearchConfig getElasticsearchConfig() {
    return elasticsearchConfig;
  }

  public void setElasticsearchConfig(DataSourceElasticsearchConfig elasticsearchConfig) {
    this.elasticsearchConfig = elasticsearchConfig;
  }


  public CreateDataSourceResponseDataSource openSearchServiceConfig(CreateDataSourceRequestOpenSearchServiceConfig openSearchServiceConfig) {
    this.openSearchServiceConfig = openSearchServiceConfig;
    return this;
  }

  /**
   * Get openSearchServiceConfig
   * @return openSearchServiceConfig
   */
  @javax.annotation.Nullable
  public CreateDataSourceRequestOpenSearchServiceConfig getOpenSearchServiceConfig() {
    return openSearchServiceConfig;
  }

  public void setOpenSearchServiceConfig(CreateDataSourceRequestOpenSearchServiceConfig openSearchServiceConfig) {
    this.openSearchServiceConfig = openSearchServiceConfig;
  }


  public CreateDataSourceResponseDataSource httpConfig(CreateDataSourceRequestHttpConfig httpConfig) {
    this.httpConfig = httpConfig;
    return this;
  }

  /**
   * Get httpConfig
   * @return httpConfig
   */
  @javax.annotation.Nullable
  public CreateDataSourceRequestHttpConfig getHttpConfig() {
    return httpConfig;
  }

  public void setHttpConfig(CreateDataSourceRequestHttpConfig httpConfig) {
    this.httpConfig = httpConfig;
  }


  public CreateDataSourceResponseDataSource relationalDatabaseConfig(CreateDataSourceRequestRelationalDatabaseConfig relationalDatabaseConfig) {
    this.relationalDatabaseConfig = relationalDatabaseConfig;
    return this;
  }

  /**
   * Get relationalDatabaseConfig
   * @return relationalDatabaseConfig
   */
  @javax.annotation.Nullable
  public CreateDataSourceRequestRelationalDatabaseConfig getRelationalDatabaseConfig() {
    return relationalDatabaseConfig;
  }

  public void setRelationalDatabaseConfig(CreateDataSourceRequestRelationalDatabaseConfig relationalDatabaseConfig) {
    this.relationalDatabaseConfig = relationalDatabaseConfig;
  }


  public CreateDataSourceResponseDataSource eventBridgeConfig(CreateDataSourceRequestEventBridgeConfig eventBridgeConfig) {
    this.eventBridgeConfig = eventBridgeConfig;
    return this;
  }

  /**
   * Get eventBridgeConfig
   * @return eventBridgeConfig
   */
  @javax.annotation.Nullable
  public CreateDataSourceRequestEventBridgeConfig getEventBridgeConfig() {
    return eventBridgeConfig;
  }

  public void setEventBridgeConfig(CreateDataSourceRequestEventBridgeConfig eventBridgeConfig) {
    this.eventBridgeConfig = eventBridgeConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDataSourceResponseDataSource createDataSourceResponseDataSource = (CreateDataSourceResponseDataSource) o;
    return Objects.equals(this.dataSourceArn, createDataSourceResponseDataSource.dataSourceArn) &&
        Objects.equals(this.name, createDataSourceResponseDataSource.name) &&
        Objects.equals(this.description, createDataSourceResponseDataSource.description) &&
        Objects.equals(this.type, createDataSourceResponseDataSource.type) &&
        Objects.equals(this.serviceRoleArn, createDataSourceResponseDataSource.serviceRoleArn) &&
        Objects.equals(this.dynamodbConfig, createDataSourceResponseDataSource.dynamodbConfig) &&
        Objects.equals(this.lambdaConfig, createDataSourceResponseDataSource.lambdaConfig) &&
        Objects.equals(this.elasticsearchConfig, createDataSourceResponseDataSource.elasticsearchConfig) &&
        Objects.equals(this.openSearchServiceConfig, createDataSourceResponseDataSource.openSearchServiceConfig) &&
        Objects.equals(this.httpConfig, createDataSourceResponseDataSource.httpConfig) &&
        Objects.equals(this.relationalDatabaseConfig, createDataSourceResponseDataSource.relationalDatabaseConfig) &&
        Objects.equals(this.eventBridgeConfig, createDataSourceResponseDataSource.eventBridgeConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSourceArn, name, description, type, serviceRoleArn, dynamodbConfig, lambdaConfig, elasticsearchConfig, openSearchServiceConfig, httpConfig, relationalDatabaseConfig, eventBridgeConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDataSourceResponseDataSource {\n");
    sb.append("    dataSourceArn: ").append(toIndentedString(dataSourceArn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    serviceRoleArn: ").append(toIndentedString(serviceRoleArn)).append("\n");
    sb.append("    dynamodbConfig: ").append(toIndentedString(dynamodbConfig)).append("\n");
    sb.append("    lambdaConfig: ").append(toIndentedString(lambdaConfig)).append("\n");
    sb.append("    elasticsearchConfig: ").append(toIndentedString(elasticsearchConfig)).append("\n");
    sb.append("    openSearchServiceConfig: ").append(toIndentedString(openSearchServiceConfig)).append("\n");
    sb.append("    httpConfig: ").append(toIndentedString(httpConfig)).append("\n");
    sb.append("    relationalDatabaseConfig: ").append(toIndentedString(relationalDatabaseConfig)).append("\n");
    sb.append("    eventBridgeConfig: ").append(toIndentedString(eventBridgeConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataSourceArn");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("type");
    openapiFields.add("serviceRoleArn");
    openapiFields.add("dynamodbConfig");
    openapiFields.add("lambdaConfig");
    openapiFields.add("elasticsearchConfig");
    openapiFields.add("openSearchServiceConfig");
    openapiFields.add("httpConfig");
    openapiFields.add("relationalDatabaseConfig");
    openapiFields.add("eventBridgeConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateDataSourceResponseDataSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateDataSourceResponseDataSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDataSourceResponseDataSource is not found in the empty JSON string", CreateDataSourceResponseDataSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateDataSourceResponseDataSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateDataSourceResponseDataSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dataSourceArn`
      if (jsonObj.get("dataSourceArn") != null && !jsonObj.get("dataSourceArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("dataSourceArn"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        DataSourceType.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `serviceRoleArn`
      if (jsonObj.get("serviceRoleArn") != null && !jsonObj.get("serviceRoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("serviceRoleArn"));
      }
      // validate the optional field `dynamodbConfig`
      if (jsonObj.get("dynamodbConfig") != null && !jsonObj.get("dynamodbConfig").isJsonNull()) {
        DataSourceDynamodbConfig.validateJsonElement(jsonObj.get("dynamodbConfig"));
      }
      // validate the optional field `lambdaConfig`
      if (jsonObj.get("lambdaConfig") != null && !jsonObj.get("lambdaConfig").isJsonNull()) {
        CreateDataSourceRequestLambdaConfig.validateJsonElement(jsonObj.get("lambdaConfig"));
      }
      // validate the optional field `elasticsearchConfig`
      if (jsonObj.get("elasticsearchConfig") != null && !jsonObj.get("elasticsearchConfig").isJsonNull()) {
        DataSourceElasticsearchConfig.validateJsonElement(jsonObj.get("elasticsearchConfig"));
      }
      // validate the optional field `openSearchServiceConfig`
      if (jsonObj.get("openSearchServiceConfig") != null && !jsonObj.get("openSearchServiceConfig").isJsonNull()) {
        CreateDataSourceRequestOpenSearchServiceConfig.validateJsonElement(jsonObj.get("openSearchServiceConfig"));
      }
      // validate the optional field `httpConfig`
      if (jsonObj.get("httpConfig") != null && !jsonObj.get("httpConfig").isJsonNull()) {
        CreateDataSourceRequestHttpConfig.validateJsonElement(jsonObj.get("httpConfig"));
      }
      // validate the optional field `relationalDatabaseConfig`
      if (jsonObj.get("relationalDatabaseConfig") != null && !jsonObj.get("relationalDatabaseConfig").isJsonNull()) {
        CreateDataSourceRequestRelationalDatabaseConfig.validateJsonElement(jsonObj.get("relationalDatabaseConfig"));
      }
      // validate the optional field `eventBridgeConfig`
      if (jsonObj.get("eventBridgeConfig") != null && !jsonObj.get("eventBridgeConfig").isJsonNull()) {
        CreateDataSourceRequestEventBridgeConfig.validateJsonElement(jsonObj.get("eventBridgeConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDataSourceResponseDataSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDataSourceResponseDataSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDataSourceResponseDataSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDataSourceResponseDataSource.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDataSourceResponseDataSource>() {
           @Override
           public void write(JsonWriter out, CreateDataSourceResponseDataSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDataSourceResponseDataSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateDataSourceResponseDataSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateDataSourceResponseDataSource
   * @throws IOException if the JSON string is invalid with respect to CreateDataSourceResponseDataSource
   */
  public static CreateDataSourceResponseDataSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDataSourceResponseDataSource.class);
  }

  /**
   * Convert an instance of CreateDataSourceResponseDataSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

