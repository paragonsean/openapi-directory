/*
 * AWS AppSync
 * AppSync provides API actions for creating and interacting with data sources using GraphQL from your application.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AppSyncRuntime;
import org.openapitools.client.model.CreateResolverRequestCachingConfig;
import org.openapitools.client.model.CreateResolverRequestPipelineConfig;
import org.openapitools.client.model.CreateResolverRequestSyncConfig;
import org.openapitools.client.model.ResolverKind;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateResolverResponseResolver
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:29.005234-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateResolverResponseResolver {
  public static final String SERIALIZED_NAME_TYPE_NAME = "typeName";
  @SerializedName(SERIALIZED_NAME_TYPE_NAME)
  private String typeName;

  public static final String SERIALIZED_NAME_FIELD_NAME = "fieldName";
  @SerializedName(SERIALIZED_NAME_FIELD_NAME)
  private String fieldName;

  public static final String SERIALIZED_NAME_DATA_SOURCE_NAME = "dataSourceName";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE_NAME)
  private String dataSourceName;

  public static final String SERIALIZED_NAME_RESOLVER_ARN = "resolverArn";
  @SerializedName(SERIALIZED_NAME_RESOLVER_ARN)
  private String resolverArn;

  public static final String SERIALIZED_NAME_REQUEST_MAPPING_TEMPLATE = "requestMappingTemplate";
  @SerializedName(SERIALIZED_NAME_REQUEST_MAPPING_TEMPLATE)
  private String requestMappingTemplate;

  public static final String SERIALIZED_NAME_RESPONSE_MAPPING_TEMPLATE = "responseMappingTemplate";
  @SerializedName(SERIALIZED_NAME_RESPONSE_MAPPING_TEMPLATE)
  private String responseMappingTemplate;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private ResolverKind kind;

  public static final String SERIALIZED_NAME_PIPELINE_CONFIG = "pipelineConfig";
  @SerializedName(SERIALIZED_NAME_PIPELINE_CONFIG)
  private CreateResolverRequestPipelineConfig pipelineConfig;

  public static final String SERIALIZED_NAME_SYNC_CONFIG = "syncConfig";
  @SerializedName(SERIALIZED_NAME_SYNC_CONFIG)
  private CreateResolverRequestSyncConfig syncConfig;

  public static final String SERIALIZED_NAME_CACHING_CONFIG = "cachingConfig";
  @SerializedName(SERIALIZED_NAME_CACHING_CONFIG)
  private CreateResolverRequestCachingConfig cachingConfig;

  public static final String SERIALIZED_NAME_MAX_BATCH_SIZE = "maxBatchSize";
  @SerializedName(SERIALIZED_NAME_MAX_BATCH_SIZE)
  private Integer maxBatchSize;

  public static final String SERIALIZED_NAME_RUNTIME = "runtime";
  @SerializedName(SERIALIZED_NAME_RUNTIME)
  private AppSyncRuntime runtime;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public CreateResolverResponseResolver() {
  }

  public CreateResolverResponseResolver typeName(String typeName) {
    this.typeName = typeName;
    return this;
  }

  /**
   * Get typeName
   * @return typeName
   */
  @javax.annotation.Nullable
  public String getTypeName() {
    return typeName;
  }

  public void setTypeName(String typeName) {
    this.typeName = typeName;
  }


  public CreateResolverResponseResolver fieldName(String fieldName) {
    this.fieldName = fieldName;
    return this;
  }

  /**
   * Get fieldName
   * @return fieldName
   */
  @javax.annotation.Nullable
  public String getFieldName() {
    return fieldName;
  }

  public void setFieldName(String fieldName) {
    this.fieldName = fieldName;
  }


  public CreateResolverResponseResolver dataSourceName(String dataSourceName) {
    this.dataSourceName = dataSourceName;
    return this;
  }

  /**
   * Get dataSourceName
   * @return dataSourceName
   */
  @javax.annotation.Nullable
  public String getDataSourceName() {
    return dataSourceName;
  }

  public void setDataSourceName(String dataSourceName) {
    this.dataSourceName = dataSourceName;
  }


  public CreateResolverResponseResolver resolverArn(String resolverArn) {
    this.resolverArn = resolverArn;
    return this;
  }

  /**
   * Get resolverArn
   * @return resolverArn
   */
  @javax.annotation.Nullable
  public String getResolverArn() {
    return resolverArn;
  }

  public void setResolverArn(String resolverArn) {
    this.resolverArn = resolverArn;
  }


  public CreateResolverResponseResolver requestMappingTemplate(String requestMappingTemplate) {
    this.requestMappingTemplate = requestMappingTemplate;
    return this;
  }

  /**
   * Get requestMappingTemplate
   * @return requestMappingTemplate
   */
  @javax.annotation.Nullable
  public String getRequestMappingTemplate() {
    return requestMappingTemplate;
  }

  public void setRequestMappingTemplate(String requestMappingTemplate) {
    this.requestMappingTemplate = requestMappingTemplate;
  }


  public CreateResolverResponseResolver responseMappingTemplate(String responseMappingTemplate) {
    this.responseMappingTemplate = responseMappingTemplate;
    return this;
  }

  /**
   * Get responseMappingTemplate
   * @return responseMappingTemplate
   */
  @javax.annotation.Nullable
  public String getResponseMappingTemplate() {
    return responseMappingTemplate;
  }

  public void setResponseMappingTemplate(String responseMappingTemplate) {
    this.responseMappingTemplate = responseMappingTemplate;
  }


  public CreateResolverResponseResolver kind(ResolverKind kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Get kind
   * @return kind
   */
  @javax.annotation.Nullable
  public ResolverKind getKind() {
    return kind;
  }

  public void setKind(ResolverKind kind) {
    this.kind = kind;
  }


  public CreateResolverResponseResolver pipelineConfig(CreateResolverRequestPipelineConfig pipelineConfig) {
    this.pipelineConfig = pipelineConfig;
    return this;
  }

  /**
   * Get pipelineConfig
   * @return pipelineConfig
   */
  @javax.annotation.Nullable
  public CreateResolverRequestPipelineConfig getPipelineConfig() {
    return pipelineConfig;
  }

  public void setPipelineConfig(CreateResolverRequestPipelineConfig pipelineConfig) {
    this.pipelineConfig = pipelineConfig;
  }


  public CreateResolverResponseResolver syncConfig(CreateResolverRequestSyncConfig syncConfig) {
    this.syncConfig = syncConfig;
    return this;
  }

  /**
   * Get syncConfig
   * @return syncConfig
   */
  @javax.annotation.Nullable
  public CreateResolverRequestSyncConfig getSyncConfig() {
    return syncConfig;
  }

  public void setSyncConfig(CreateResolverRequestSyncConfig syncConfig) {
    this.syncConfig = syncConfig;
  }


  public CreateResolverResponseResolver cachingConfig(CreateResolverRequestCachingConfig cachingConfig) {
    this.cachingConfig = cachingConfig;
    return this;
  }

  /**
   * Get cachingConfig
   * @return cachingConfig
   */
  @javax.annotation.Nullable
  public CreateResolverRequestCachingConfig getCachingConfig() {
    return cachingConfig;
  }

  public void setCachingConfig(CreateResolverRequestCachingConfig cachingConfig) {
    this.cachingConfig = cachingConfig;
  }


  public CreateResolverResponseResolver maxBatchSize(Integer maxBatchSize) {
    this.maxBatchSize = maxBatchSize;
    return this;
  }

  /**
   * Get maxBatchSize
   * @return maxBatchSize
   */
  @javax.annotation.Nullable
  public Integer getMaxBatchSize() {
    return maxBatchSize;
  }

  public void setMaxBatchSize(Integer maxBatchSize) {
    this.maxBatchSize = maxBatchSize;
  }


  public CreateResolverResponseResolver runtime(AppSyncRuntime runtime) {
    this.runtime = runtime;
    return this;
  }

  /**
   * Get runtime
   * @return runtime
   */
  @javax.annotation.Nullable
  public AppSyncRuntime getRuntime() {
    return runtime;
  }

  public void setRuntime(AppSyncRuntime runtime) {
    this.runtime = runtime;
  }


  public CreateResolverResponseResolver code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateResolverResponseResolver createResolverResponseResolver = (CreateResolverResponseResolver) o;
    return Objects.equals(this.typeName, createResolverResponseResolver.typeName) &&
        Objects.equals(this.fieldName, createResolverResponseResolver.fieldName) &&
        Objects.equals(this.dataSourceName, createResolverResponseResolver.dataSourceName) &&
        Objects.equals(this.resolverArn, createResolverResponseResolver.resolverArn) &&
        Objects.equals(this.requestMappingTemplate, createResolverResponseResolver.requestMappingTemplate) &&
        Objects.equals(this.responseMappingTemplate, createResolverResponseResolver.responseMappingTemplate) &&
        Objects.equals(this.kind, createResolverResponseResolver.kind) &&
        Objects.equals(this.pipelineConfig, createResolverResponseResolver.pipelineConfig) &&
        Objects.equals(this.syncConfig, createResolverResponseResolver.syncConfig) &&
        Objects.equals(this.cachingConfig, createResolverResponseResolver.cachingConfig) &&
        Objects.equals(this.maxBatchSize, createResolverResponseResolver.maxBatchSize) &&
        Objects.equals(this.runtime, createResolverResponseResolver.runtime) &&
        Objects.equals(this.code, createResolverResponseResolver.code);
  }

  @Override
  public int hashCode() {
    return Objects.hash(typeName, fieldName, dataSourceName, resolverArn, requestMappingTemplate, responseMappingTemplate, kind, pipelineConfig, syncConfig, cachingConfig, maxBatchSize, runtime, code);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateResolverResponseResolver {\n");
    sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
    sb.append("    fieldName: ").append(toIndentedString(fieldName)).append("\n");
    sb.append("    dataSourceName: ").append(toIndentedString(dataSourceName)).append("\n");
    sb.append("    resolverArn: ").append(toIndentedString(resolverArn)).append("\n");
    sb.append("    requestMappingTemplate: ").append(toIndentedString(requestMappingTemplate)).append("\n");
    sb.append("    responseMappingTemplate: ").append(toIndentedString(responseMappingTemplate)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    pipelineConfig: ").append(toIndentedString(pipelineConfig)).append("\n");
    sb.append("    syncConfig: ").append(toIndentedString(syncConfig)).append("\n");
    sb.append("    cachingConfig: ").append(toIndentedString(cachingConfig)).append("\n");
    sb.append("    maxBatchSize: ").append(toIndentedString(maxBatchSize)).append("\n");
    sb.append("    runtime: ").append(toIndentedString(runtime)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("typeName");
    openapiFields.add("fieldName");
    openapiFields.add("dataSourceName");
    openapiFields.add("resolverArn");
    openapiFields.add("requestMappingTemplate");
    openapiFields.add("responseMappingTemplate");
    openapiFields.add("kind");
    openapiFields.add("pipelineConfig");
    openapiFields.add("syncConfig");
    openapiFields.add("cachingConfig");
    openapiFields.add("maxBatchSize");
    openapiFields.add("runtime");
    openapiFields.add("code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateResolverResponseResolver
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateResolverResponseResolver.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateResolverResponseResolver is not found in the empty JSON string", CreateResolverResponseResolver.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateResolverResponseResolver.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateResolverResponseResolver` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `typeName`
      if (jsonObj.get("typeName") != null && !jsonObj.get("typeName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("typeName"));
      }
      // validate the optional field `fieldName`
      if (jsonObj.get("fieldName") != null && !jsonObj.get("fieldName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("fieldName"));
      }
      // validate the optional field `dataSourceName`
      if (jsonObj.get("dataSourceName") != null && !jsonObj.get("dataSourceName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("dataSourceName"));
      }
      // validate the optional field `resolverArn`
      if (jsonObj.get("resolverArn") != null && !jsonObj.get("resolverArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("resolverArn"));
      }
      // validate the optional field `requestMappingTemplate`
      if (jsonObj.get("requestMappingTemplate") != null && !jsonObj.get("requestMappingTemplate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("requestMappingTemplate"));
      }
      // validate the optional field `responseMappingTemplate`
      if (jsonObj.get("responseMappingTemplate") != null && !jsonObj.get("responseMappingTemplate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("responseMappingTemplate"));
      }
      // validate the optional field `kind`
      if (jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) {
        ResolverKind.validateJsonElement(jsonObj.get("kind"));
      }
      // validate the optional field `pipelineConfig`
      if (jsonObj.get("pipelineConfig") != null && !jsonObj.get("pipelineConfig").isJsonNull()) {
        CreateResolverRequestPipelineConfig.validateJsonElement(jsonObj.get("pipelineConfig"));
      }
      // validate the optional field `syncConfig`
      if (jsonObj.get("syncConfig") != null && !jsonObj.get("syncConfig").isJsonNull()) {
        CreateResolverRequestSyncConfig.validateJsonElement(jsonObj.get("syncConfig"));
      }
      // validate the optional field `cachingConfig`
      if (jsonObj.get("cachingConfig") != null && !jsonObj.get("cachingConfig").isJsonNull()) {
        CreateResolverRequestCachingConfig.validateJsonElement(jsonObj.get("cachingConfig"));
      }
      // validate the optional field `maxBatchSize`
      if (jsonObj.get("maxBatchSize") != null && !jsonObj.get("maxBatchSize").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("maxBatchSize"));
      }
      // validate the optional field `runtime`
      if (jsonObj.get("runtime") != null && !jsonObj.get("runtime").isJsonNull()) {
        AppSyncRuntime.validateJsonElement(jsonObj.get("runtime"));
      }
      // validate the optional field `code`
      if (jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("code"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateResolverResponseResolver.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateResolverResponseResolver' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateResolverResponseResolver> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateResolverResponseResolver.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateResolverResponseResolver>() {
           @Override
           public void write(JsonWriter out, CreateResolverResponseResolver value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateResolverResponseResolver read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateResolverResponseResolver given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateResolverResponseResolver
   * @throws IOException if the JSON string is invalid with respect to CreateResolverResponseResolver
   */
  public static CreateResolverResponseResolver fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateResolverResponseResolver.class);
  }

  /**
   * Convert an instance of CreateResolverResponseResolver to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

