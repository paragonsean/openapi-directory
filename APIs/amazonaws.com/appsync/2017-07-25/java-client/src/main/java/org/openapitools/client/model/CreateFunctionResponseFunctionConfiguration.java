/*
 * AWS AppSync
 * AppSync provides API actions for creating and interacting with data sources using GraphQL from your application.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AppSyncRuntime;
import org.openapitools.client.model.SyncConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateFunctionResponseFunctionConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:29.005234-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateFunctionResponseFunctionConfiguration {
  public static final String SERIALIZED_NAME_FUNCTION_ID = "functionId";
  @SerializedName(SERIALIZED_NAME_FUNCTION_ID)
  private String functionId;

  public static final String SERIALIZED_NAME_FUNCTION_ARN = "functionArn";
  @SerializedName(SERIALIZED_NAME_FUNCTION_ARN)
  private String functionArn;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DATA_SOURCE_NAME = "dataSourceName";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE_NAME)
  private String dataSourceName;

  public static final String SERIALIZED_NAME_REQUEST_MAPPING_TEMPLATE = "requestMappingTemplate";
  @SerializedName(SERIALIZED_NAME_REQUEST_MAPPING_TEMPLATE)
  private String requestMappingTemplate;

  public static final String SERIALIZED_NAME_RESPONSE_MAPPING_TEMPLATE = "responseMappingTemplate";
  @SerializedName(SERIALIZED_NAME_RESPONSE_MAPPING_TEMPLATE)
  private String responseMappingTemplate;

  public static final String SERIALIZED_NAME_FUNCTION_VERSION = "functionVersion";
  @SerializedName(SERIALIZED_NAME_FUNCTION_VERSION)
  private String functionVersion;

  public static final String SERIALIZED_NAME_SYNC_CONFIG = "syncConfig";
  @SerializedName(SERIALIZED_NAME_SYNC_CONFIG)
  private SyncConfig syncConfig;

  public static final String SERIALIZED_NAME_MAX_BATCH_SIZE = "maxBatchSize";
  @SerializedName(SERIALIZED_NAME_MAX_BATCH_SIZE)
  private Integer maxBatchSize;

  public static final String SERIALIZED_NAME_RUNTIME = "runtime";
  @SerializedName(SERIALIZED_NAME_RUNTIME)
  private AppSyncRuntime runtime;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public CreateFunctionResponseFunctionConfiguration() {
  }

  public CreateFunctionResponseFunctionConfiguration functionId(String functionId) {
    this.functionId = functionId;
    return this;
  }

  /**
   * Get functionId
   * @return functionId
   */
  @javax.annotation.Nullable
  public String getFunctionId() {
    return functionId;
  }

  public void setFunctionId(String functionId) {
    this.functionId = functionId;
  }


  public CreateFunctionResponseFunctionConfiguration functionArn(String functionArn) {
    this.functionArn = functionArn;
    return this;
  }

  /**
   * Get functionArn
   * @return functionArn
   */
  @javax.annotation.Nullable
  public String getFunctionArn() {
    return functionArn;
  }

  public void setFunctionArn(String functionArn) {
    this.functionArn = functionArn;
  }


  public CreateFunctionResponseFunctionConfiguration name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateFunctionResponseFunctionConfiguration description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateFunctionResponseFunctionConfiguration dataSourceName(String dataSourceName) {
    this.dataSourceName = dataSourceName;
    return this;
  }

  /**
   * Get dataSourceName
   * @return dataSourceName
   */
  @javax.annotation.Nullable
  public String getDataSourceName() {
    return dataSourceName;
  }

  public void setDataSourceName(String dataSourceName) {
    this.dataSourceName = dataSourceName;
  }


  public CreateFunctionResponseFunctionConfiguration requestMappingTemplate(String requestMappingTemplate) {
    this.requestMappingTemplate = requestMappingTemplate;
    return this;
  }

  /**
   * Get requestMappingTemplate
   * @return requestMappingTemplate
   */
  @javax.annotation.Nullable
  public String getRequestMappingTemplate() {
    return requestMappingTemplate;
  }

  public void setRequestMappingTemplate(String requestMappingTemplate) {
    this.requestMappingTemplate = requestMappingTemplate;
  }


  public CreateFunctionResponseFunctionConfiguration responseMappingTemplate(String responseMappingTemplate) {
    this.responseMappingTemplate = responseMappingTemplate;
    return this;
  }

  /**
   * Get responseMappingTemplate
   * @return responseMappingTemplate
   */
  @javax.annotation.Nullable
  public String getResponseMappingTemplate() {
    return responseMappingTemplate;
  }

  public void setResponseMappingTemplate(String responseMappingTemplate) {
    this.responseMappingTemplate = responseMappingTemplate;
  }


  public CreateFunctionResponseFunctionConfiguration functionVersion(String functionVersion) {
    this.functionVersion = functionVersion;
    return this;
  }

  /**
   * Get functionVersion
   * @return functionVersion
   */
  @javax.annotation.Nullable
  public String getFunctionVersion() {
    return functionVersion;
  }

  public void setFunctionVersion(String functionVersion) {
    this.functionVersion = functionVersion;
  }


  public CreateFunctionResponseFunctionConfiguration syncConfig(SyncConfig syncConfig) {
    this.syncConfig = syncConfig;
    return this;
  }

  /**
   * Get syncConfig
   * @return syncConfig
   */
  @javax.annotation.Nullable
  public SyncConfig getSyncConfig() {
    return syncConfig;
  }

  public void setSyncConfig(SyncConfig syncConfig) {
    this.syncConfig = syncConfig;
  }


  public CreateFunctionResponseFunctionConfiguration maxBatchSize(Integer maxBatchSize) {
    this.maxBatchSize = maxBatchSize;
    return this;
  }

  /**
   * Get maxBatchSize
   * @return maxBatchSize
   */
  @javax.annotation.Nullable
  public Integer getMaxBatchSize() {
    return maxBatchSize;
  }

  public void setMaxBatchSize(Integer maxBatchSize) {
    this.maxBatchSize = maxBatchSize;
  }


  public CreateFunctionResponseFunctionConfiguration runtime(AppSyncRuntime runtime) {
    this.runtime = runtime;
    return this;
  }

  /**
   * Get runtime
   * @return runtime
   */
  @javax.annotation.Nullable
  public AppSyncRuntime getRuntime() {
    return runtime;
  }

  public void setRuntime(AppSyncRuntime runtime) {
    this.runtime = runtime;
  }


  public CreateFunctionResponseFunctionConfiguration code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateFunctionResponseFunctionConfiguration createFunctionResponseFunctionConfiguration = (CreateFunctionResponseFunctionConfiguration) o;
    return Objects.equals(this.functionId, createFunctionResponseFunctionConfiguration.functionId) &&
        Objects.equals(this.functionArn, createFunctionResponseFunctionConfiguration.functionArn) &&
        Objects.equals(this.name, createFunctionResponseFunctionConfiguration.name) &&
        Objects.equals(this.description, createFunctionResponseFunctionConfiguration.description) &&
        Objects.equals(this.dataSourceName, createFunctionResponseFunctionConfiguration.dataSourceName) &&
        Objects.equals(this.requestMappingTemplate, createFunctionResponseFunctionConfiguration.requestMappingTemplate) &&
        Objects.equals(this.responseMappingTemplate, createFunctionResponseFunctionConfiguration.responseMappingTemplate) &&
        Objects.equals(this.functionVersion, createFunctionResponseFunctionConfiguration.functionVersion) &&
        Objects.equals(this.syncConfig, createFunctionResponseFunctionConfiguration.syncConfig) &&
        Objects.equals(this.maxBatchSize, createFunctionResponseFunctionConfiguration.maxBatchSize) &&
        Objects.equals(this.runtime, createFunctionResponseFunctionConfiguration.runtime) &&
        Objects.equals(this.code, createFunctionResponseFunctionConfiguration.code);
  }

  @Override
  public int hashCode() {
    return Objects.hash(functionId, functionArn, name, description, dataSourceName, requestMappingTemplate, responseMappingTemplate, functionVersion, syncConfig, maxBatchSize, runtime, code);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateFunctionResponseFunctionConfiguration {\n");
    sb.append("    functionId: ").append(toIndentedString(functionId)).append("\n");
    sb.append("    functionArn: ").append(toIndentedString(functionArn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dataSourceName: ").append(toIndentedString(dataSourceName)).append("\n");
    sb.append("    requestMappingTemplate: ").append(toIndentedString(requestMappingTemplate)).append("\n");
    sb.append("    responseMappingTemplate: ").append(toIndentedString(responseMappingTemplate)).append("\n");
    sb.append("    functionVersion: ").append(toIndentedString(functionVersion)).append("\n");
    sb.append("    syncConfig: ").append(toIndentedString(syncConfig)).append("\n");
    sb.append("    maxBatchSize: ").append(toIndentedString(maxBatchSize)).append("\n");
    sb.append("    runtime: ").append(toIndentedString(runtime)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("functionId");
    openapiFields.add("functionArn");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("dataSourceName");
    openapiFields.add("requestMappingTemplate");
    openapiFields.add("responseMappingTemplate");
    openapiFields.add("functionVersion");
    openapiFields.add("syncConfig");
    openapiFields.add("maxBatchSize");
    openapiFields.add("runtime");
    openapiFields.add("code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateFunctionResponseFunctionConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateFunctionResponseFunctionConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateFunctionResponseFunctionConfiguration is not found in the empty JSON string", CreateFunctionResponseFunctionConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateFunctionResponseFunctionConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateFunctionResponseFunctionConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `functionId`
      if (jsonObj.get("functionId") != null && !jsonObj.get("functionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("functionId"));
      }
      // validate the optional field `functionArn`
      if (jsonObj.get("functionArn") != null && !jsonObj.get("functionArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("functionArn"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `dataSourceName`
      if (jsonObj.get("dataSourceName") != null && !jsonObj.get("dataSourceName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("dataSourceName"));
      }
      // validate the optional field `requestMappingTemplate`
      if (jsonObj.get("requestMappingTemplate") != null && !jsonObj.get("requestMappingTemplate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("requestMappingTemplate"));
      }
      // validate the optional field `responseMappingTemplate`
      if (jsonObj.get("responseMappingTemplate") != null && !jsonObj.get("responseMappingTemplate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("responseMappingTemplate"));
      }
      // validate the optional field `functionVersion`
      if (jsonObj.get("functionVersion") != null && !jsonObj.get("functionVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("functionVersion"));
      }
      // validate the optional field `syncConfig`
      if (jsonObj.get("syncConfig") != null && !jsonObj.get("syncConfig").isJsonNull()) {
        SyncConfig.validateJsonElement(jsonObj.get("syncConfig"));
      }
      // validate the optional field `maxBatchSize`
      if (jsonObj.get("maxBatchSize") != null && !jsonObj.get("maxBatchSize").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("maxBatchSize"));
      }
      // validate the optional field `runtime`
      if (jsonObj.get("runtime") != null && !jsonObj.get("runtime").isJsonNull()) {
        AppSyncRuntime.validateJsonElement(jsonObj.get("runtime"));
      }
      // validate the optional field `code`
      if (jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("code"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateFunctionResponseFunctionConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateFunctionResponseFunctionConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateFunctionResponseFunctionConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateFunctionResponseFunctionConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateFunctionResponseFunctionConfiguration>() {
           @Override
           public void write(JsonWriter out, CreateFunctionResponseFunctionConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateFunctionResponseFunctionConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateFunctionResponseFunctionConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateFunctionResponseFunctionConfiguration
   * @throws IOException if the JSON string is invalid with respect to CreateFunctionResponseFunctionConfiguration
   */
  public static CreateFunctionResponseFunctionConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateFunctionResponseFunctionConfiguration.class);
  }

  /**
   * Convert an instance of CreateFunctionResponseFunctionConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

