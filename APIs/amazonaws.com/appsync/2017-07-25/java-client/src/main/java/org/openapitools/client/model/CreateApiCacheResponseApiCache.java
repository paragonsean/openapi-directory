/*
 * AWS AppSync
 * AppSync provides API actions for creating and interacting with data sources using GraphQL from your application.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ApiCacheStatus;
import org.openapitools.client.model.ApiCacheType;
import org.openapitools.client.model.ApiCachingBehavior;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateApiCacheResponseApiCache
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:29.005234-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateApiCacheResponseApiCache {
  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  private Integer ttl;

  public static final String SERIALIZED_NAME_API_CACHING_BEHAVIOR = "apiCachingBehavior";
  @SerializedName(SERIALIZED_NAME_API_CACHING_BEHAVIOR)
  private ApiCachingBehavior apiCachingBehavior;

  public static final String SERIALIZED_NAME_TRANSIT_ENCRYPTION_ENABLED = "transitEncryptionEnabled";
  @SerializedName(SERIALIZED_NAME_TRANSIT_ENCRYPTION_ENABLED)
  private Boolean transitEncryptionEnabled;

  public static final String SERIALIZED_NAME_AT_REST_ENCRYPTION_ENABLED = "atRestEncryptionEnabled";
  @SerializedName(SERIALIZED_NAME_AT_REST_ENCRYPTION_ENABLED)
  private Boolean atRestEncryptionEnabled;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ApiCacheType type;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ApiCacheStatus status;

  public CreateApiCacheResponseApiCache() {
  }

  public CreateApiCacheResponseApiCache ttl(Integer ttl) {
    this.ttl = ttl;
    return this;
  }

  /**
   * Get ttl
   * @return ttl
   */
  @javax.annotation.Nullable
  public Integer getTtl() {
    return ttl;
  }

  public void setTtl(Integer ttl) {
    this.ttl = ttl;
  }


  public CreateApiCacheResponseApiCache apiCachingBehavior(ApiCachingBehavior apiCachingBehavior) {
    this.apiCachingBehavior = apiCachingBehavior;
    return this;
  }

  /**
   * Get apiCachingBehavior
   * @return apiCachingBehavior
   */
  @javax.annotation.Nullable
  public ApiCachingBehavior getApiCachingBehavior() {
    return apiCachingBehavior;
  }

  public void setApiCachingBehavior(ApiCachingBehavior apiCachingBehavior) {
    this.apiCachingBehavior = apiCachingBehavior;
  }


  public CreateApiCacheResponseApiCache transitEncryptionEnabled(Boolean transitEncryptionEnabled) {
    this.transitEncryptionEnabled = transitEncryptionEnabled;
    return this;
  }

  /**
   * Get transitEncryptionEnabled
   * @return transitEncryptionEnabled
   */
  @javax.annotation.Nullable
  public Boolean getTransitEncryptionEnabled() {
    return transitEncryptionEnabled;
  }

  public void setTransitEncryptionEnabled(Boolean transitEncryptionEnabled) {
    this.transitEncryptionEnabled = transitEncryptionEnabled;
  }


  public CreateApiCacheResponseApiCache atRestEncryptionEnabled(Boolean atRestEncryptionEnabled) {
    this.atRestEncryptionEnabled = atRestEncryptionEnabled;
    return this;
  }

  /**
   * Get atRestEncryptionEnabled
   * @return atRestEncryptionEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAtRestEncryptionEnabled() {
    return atRestEncryptionEnabled;
  }

  public void setAtRestEncryptionEnabled(Boolean atRestEncryptionEnabled) {
    this.atRestEncryptionEnabled = atRestEncryptionEnabled;
  }


  public CreateApiCacheResponseApiCache type(ApiCacheType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public ApiCacheType getType() {
    return type;
  }

  public void setType(ApiCacheType type) {
    this.type = type;
  }


  public CreateApiCacheResponseApiCache status(ApiCacheStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ApiCacheStatus getStatus() {
    return status;
  }

  public void setStatus(ApiCacheStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateApiCacheResponseApiCache createApiCacheResponseApiCache = (CreateApiCacheResponseApiCache) o;
    return Objects.equals(this.ttl, createApiCacheResponseApiCache.ttl) &&
        Objects.equals(this.apiCachingBehavior, createApiCacheResponseApiCache.apiCachingBehavior) &&
        Objects.equals(this.transitEncryptionEnabled, createApiCacheResponseApiCache.transitEncryptionEnabled) &&
        Objects.equals(this.atRestEncryptionEnabled, createApiCacheResponseApiCache.atRestEncryptionEnabled) &&
        Objects.equals(this.type, createApiCacheResponseApiCache.type) &&
        Objects.equals(this.status, createApiCacheResponseApiCache.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ttl, apiCachingBehavior, transitEncryptionEnabled, atRestEncryptionEnabled, type, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateApiCacheResponseApiCache {\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("    apiCachingBehavior: ").append(toIndentedString(apiCachingBehavior)).append("\n");
    sb.append("    transitEncryptionEnabled: ").append(toIndentedString(transitEncryptionEnabled)).append("\n");
    sb.append("    atRestEncryptionEnabled: ").append(toIndentedString(atRestEncryptionEnabled)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ttl");
    openapiFields.add("apiCachingBehavior");
    openapiFields.add("transitEncryptionEnabled");
    openapiFields.add("atRestEncryptionEnabled");
    openapiFields.add("type");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateApiCacheResponseApiCache
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateApiCacheResponseApiCache.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateApiCacheResponseApiCache is not found in the empty JSON string", CreateApiCacheResponseApiCache.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateApiCacheResponseApiCache.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateApiCacheResponseApiCache` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ttl`
      if (jsonObj.get("ttl") != null && !jsonObj.get("ttl").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ttl"));
      }
      // validate the optional field `apiCachingBehavior`
      if (jsonObj.get("apiCachingBehavior") != null && !jsonObj.get("apiCachingBehavior").isJsonNull()) {
        ApiCachingBehavior.validateJsonElement(jsonObj.get("apiCachingBehavior"));
      }
      // validate the optional field `transitEncryptionEnabled`
      if (jsonObj.get("transitEncryptionEnabled") != null && !jsonObj.get("transitEncryptionEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("transitEncryptionEnabled"));
      }
      // validate the optional field `atRestEncryptionEnabled`
      if (jsonObj.get("atRestEncryptionEnabled") != null && !jsonObj.get("atRestEncryptionEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("atRestEncryptionEnabled"));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        ApiCacheType.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ApiCacheStatus.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateApiCacheResponseApiCache.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateApiCacheResponseApiCache' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateApiCacheResponseApiCache> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateApiCacheResponseApiCache.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateApiCacheResponseApiCache>() {
           @Override
           public void write(JsonWriter out, CreateApiCacheResponseApiCache value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateApiCacheResponseApiCache read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateApiCacheResponseApiCache given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateApiCacheResponseApiCache
   * @throws IOException if the JSON string is invalid with respect to CreateApiCacheResponseApiCache
   */
  public static CreateApiCacheResponseApiCache fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateApiCacheResponseApiCache.class);
  }

  /**
   * Convert an instance of CreateApiCacheResponseApiCache to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

