/*
 * AWS AppSync
 * AppSync provides API actions for creating and interacting with data sources using GraphQL from your application.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AdditionalAuthenticationProvider;
import org.openapitools.client.model.CreateGraphqlApiRequestLambdaAuthorizerConfig;
import org.openapitools.client.model.CreateGraphqlApiRequestLogConfig;
import org.openapitools.client.model.CreateGraphqlApiRequestOpenIDConnectConfig;
import org.openapitools.client.model.CreateGraphqlApiRequestUserPoolConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateGraphqlApiRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:29.005234-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateGraphqlApiRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_LOG_CONFIG = "logConfig";
  @SerializedName(SERIALIZED_NAME_LOG_CONFIG)
  private CreateGraphqlApiRequestLogConfig logConfig;

  /**
   * The authentication type: API key, Identity and Access Management (IAM), OpenID Connect (OIDC), Amazon Cognito user pools, or Lambda.
   */
  @JsonAdapter(AuthenticationTypeEnum.Adapter.class)
  public enum AuthenticationTypeEnum {
    API_KEY("API_KEY"),
    
    AWS_IAM("AWS_IAM"),
    
    AMAZON_COGNITO_USER_POOLS("AMAZON_COGNITO_USER_POOLS"),
    
    OPENID_CONNECT("OPENID_CONNECT"),
    
    AWS_LAMBDA("AWS_LAMBDA");

    private String value;

    AuthenticationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthenticationTypeEnum fromValue(String value) {
      for (AuthenticationTypeEnum b : AuthenticationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthenticationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthenticationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthenticationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthenticationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthenticationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTHENTICATION_TYPE = "authenticationType";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_TYPE)
  private AuthenticationTypeEnum authenticationType;

  public static final String SERIALIZED_NAME_USER_POOL_CONFIG = "userPoolConfig";
  @SerializedName(SERIALIZED_NAME_USER_POOL_CONFIG)
  private CreateGraphqlApiRequestUserPoolConfig userPoolConfig;

  public static final String SERIALIZED_NAME_OPEN_I_D_CONNECT_CONFIG = "openIDConnectConfig";
  @SerializedName(SERIALIZED_NAME_OPEN_I_D_CONNECT_CONFIG)
  private CreateGraphqlApiRequestOpenIDConnectConfig openIDConnectConfig;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_ADDITIONAL_AUTHENTICATION_PROVIDERS = "additionalAuthenticationProviders";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_AUTHENTICATION_PROVIDERS)
  private List<AdditionalAuthenticationProvider> additionalAuthenticationProviders = new ArrayList<>();

  public static final String SERIALIZED_NAME_XRAY_ENABLED = "xrayEnabled";
  @SerializedName(SERIALIZED_NAME_XRAY_ENABLED)
  private Boolean xrayEnabled;

  public static final String SERIALIZED_NAME_LAMBDA_AUTHORIZER_CONFIG = "lambdaAuthorizerConfig";
  @SerializedName(SERIALIZED_NAME_LAMBDA_AUTHORIZER_CONFIG)
  private CreateGraphqlApiRequestLambdaAuthorizerConfig lambdaAuthorizerConfig;

  /**
   * Sets the value of the GraphQL API to public (&lt;code&gt;GLOBAL&lt;/code&gt;) or private (&lt;code&gt;PRIVATE&lt;/code&gt;). If no value is provided, the visibility will be set to &lt;code&gt;GLOBAL&lt;/code&gt; by default. This value cannot be changed once the API has been created.
   */
  @JsonAdapter(VisibilityEnum.Adapter.class)
  public enum VisibilityEnum {
    GLOBAL("GLOBAL"),
    
    PRIVATE("PRIVATE");

    private String value;

    VisibilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VisibilityEnum fromValue(String value) {
      for (VisibilityEnum b : VisibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VisibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VisibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VisibilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VisibilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VisibilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VISIBILITY = "visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  private VisibilityEnum visibility;

  /**
   * The value that indicates whether the GraphQL API is a standard API (&lt;code&gt;GRAPHQL&lt;/code&gt;) or merged API (&lt;code&gt;MERGED&lt;/code&gt;).
   */
  @JsonAdapter(ApiTypeEnum.Adapter.class)
  public enum ApiTypeEnum {
    GRAPHQL("GRAPHQL"),
    
    MERGED("MERGED");

    private String value;

    ApiTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApiTypeEnum fromValue(String value) {
      for (ApiTypeEnum b : ApiTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApiTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApiTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApiTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApiTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ApiTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_API_TYPE = "apiType";
  @SerializedName(SERIALIZED_NAME_API_TYPE)
  private ApiTypeEnum apiType;

  public static final String SERIALIZED_NAME_MERGED_API_EXECUTION_ROLE_ARN = "mergedApiExecutionRoleArn";
  @SerializedName(SERIALIZED_NAME_MERGED_API_EXECUTION_ROLE_ARN)
  private String mergedApiExecutionRoleArn;

  public static final String SERIALIZED_NAME_OWNER_CONTACT = "ownerContact";
  @SerializedName(SERIALIZED_NAME_OWNER_CONTACT)
  private String ownerContact;

  public CreateGraphqlApiRequest() {
  }

  public CreateGraphqlApiRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A user-supplied name for the &lt;code&gt;GraphqlApi&lt;/code&gt;.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateGraphqlApiRequest logConfig(CreateGraphqlApiRequestLogConfig logConfig) {
    this.logConfig = logConfig;
    return this;
  }

  /**
   * Get logConfig
   * @return logConfig
   */
  @javax.annotation.Nullable
  public CreateGraphqlApiRequestLogConfig getLogConfig() {
    return logConfig;
  }

  public void setLogConfig(CreateGraphqlApiRequestLogConfig logConfig) {
    this.logConfig = logConfig;
  }


  public CreateGraphqlApiRequest authenticationType(AuthenticationTypeEnum authenticationType) {
    this.authenticationType = authenticationType;
    return this;
  }

  /**
   * The authentication type: API key, Identity and Access Management (IAM), OpenID Connect (OIDC), Amazon Cognito user pools, or Lambda.
   * @return authenticationType
   */
  @javax.annotation.Nonnull
  public AuthenticationTypeEnum getAuthenticationType() {
    return authenticationType;
  }

  public void setAuthenticationType(AuthenticationTypeEnum authenticationType) {
    this.authenticationType = authenticationType;
  }


  public CreateGraphqlApiRequest userPoolConfig(CreateGraphqlApiRequestUserPoolConfig userPoolConfig) {
    this.userPoolConfig = userPoolConfig;
    return this;
  }

  /**
   * Get userPoolConfig
   * @return userPoolConfig
   */
  @javax.annotation.Nullable
  public CreateGraphqlApiRequestUserPoolConfig getUserPoolConfig() {
    return userPoolConfig;
  }

  public void setUserPoolConfig(CreateGraphqlApiRequestUserPoolConfig userPoolConfig) {
    this.userPoolConfig = userPoolConfig;
  }


  public CreateGraphqlApiRequest openIDConnectConfig(CreateGraphqlApiRequestOpenIDConnectConfig openIDConnectConfig) {
    this.openIDConnectConfig = openIDConnectConfig;
    return this;
  }

  /**
   * Get openIDConnectConfig
   * @return openIDConnectConfig
   */
  @javax.annotation.Nullable
  public CreateGraphqlApiRequestOpenIDConnectConfig getOpenIDConnectConfig() {
    return openIDConnectConfig;
  }

  public void setOpenIDConnectConfig(CreateGraphqlApiRequestOpenIDConnectConfig openIDConnectConfig) {
    this.openIDConnectConfig = openIDConnectConfig;
  }


  public CreateGraphqlApiRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateGraphqlApiRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * A map with keys of &lt;code&gt;TagKey&lt;/code&gt; objects and values of &lt;code&gt;TagValue&lt;/code&gt; objects.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public CreateGraphqlApiRequest additionalAuthenticationProviders(List<AdditionalAuthenticationProvider> additionalAuthenticationProviders) {
    this.additionalAuthenticationProviders = additionalAuthenticationProviders;
    return this;
  }

  public CreateGraphqlApiRequest addAdditionalAuthenticationProvidersItem(AdditionalAuthenticationProvider additionalAuthenticationProvidersItem) {
    if (this.additionalAuthenticationProviders == null) {
      this.additionalAuthenticationProviders = new ArrayList<>();
    }
    this.additionalAuthenticationProviders.add(additionalAuthenticationProvidersItem);
    return this;
  }

  /**
   * A list of additional authentication providers for the &lt;code&gt;GraphqlApi&lt;/code&gt; API.
   * @return additionalAuthenticationProviders
   */
  @javax.annotation.Nullable
  public List<AdditionalAuthenticationProvider> getAdditionalAuthenticationProviders() {
    return additionalAuthenticationProviders;
  }

  public void setAdditionalAuthenticationProviders(List<AdditionalAuthenticationProvider> additionalAuthenticationProviders) {
    this.additionalAuthenticationProviders = additionalAuthenticationProviders;
  }


  public CreateGraphqlApiRequest xrayEnabled(Boolean xrayEnabled) {
    this.xrayEnabled = xrayEnabled;
    return this;
  }

  /**
   * A flag indicating whether to use X-Ray tracing for the &lt;code&gt;GraphqlApi&lt;/code&gt;.
   * @return xrayEnabled
   */
  @javax.annotation.Nullable
  public Boolean getXrayEnabled() {
    return xrayEnabled;
  }

  public void setXrayEnabled(Boolean xrayEnabled) {
    this.xrayEnabled = xrayEnabled;
  }


  public CreateGraphqlApiRequest lambdaAuthorizerConfig(CreateGraphqlApiRequestLambdaAuthorizerConfig lambdaAuthorizerConfig) {
    this.lambdaAuthorizerConfig = lambdaAuthorizerConfig;
    return this;
  }

  /**
   * Get lambdaAuthorizerConfig
   * @return lambdaAuthorizerConfig
   */
  @javax.annotation.Nullable
  public CreateGraphqlApiRequestLambdaAuthorizerConfig getLambdaAuthorizerConfig() {
    return lambdaAuthorizerConfig;
  }

  public void setLambdaAuthorizerConfig(CreateGraphqlApiRequestLambdaAuthorizerConfig lambdaAuthorizerConfig) {
    this.lambdaAuthorizerConfig = lambdaAuthorizerConfig;
  }


  public CreateGraphqlApiRequest visibility(VisibilityEnum visibility) {
    this.visibility = visibility;
    return this;
  }

  /**
   * Sets the value of the GraphQL API to public (&lt;code&gt;GLOBAL&lt;/code&gt;) or private (&lt;code&gt;PRIVATE&lt;/code&gt;). If no value is provided, the visibility will be set to &lt;code&gt;GLOBAL&lt;/code&gt; by default. This value cannot be changed once the API has been created.
   * @return visibility
   */
  @javax.annotation.Nullable
  public VisibilityEnum getVisibility() {
    return visibility;
  }

  public void setVisibility(VisibilityEnum visibility) {
    this.visibility = visibility;
  }


  public CreateGraphqlApiRequest apiType(ApiTypeEnum apiType) {
    this.apiType = apiType;
    return this;
  }

  /**
   * The value that indicates whether the GraphQL API is a standard API (&lt;code&gt;GRAPHQL&lt;/code&gt;) or merged API (&lt;code&gt;MERGED&lt;/code&gt;).
   * @return apiType
   */
  @javax.annotation.Nullable
  public ApiTypeEnum getApiType() {
    return apiType;
  }

  public void setApiType(ApiTypeEnum apiType) {
    this.apiType = apiType;
  }


  public CreateGraphqlApiRequest mergedApiExecutionRoleArn(String mergedApiExecutionRoleArn) {
    this.mergedApiExecutionRoleArn = mergedApiExecutionRoleArn;
    return this;
  }

  /**
   * The Identity and Access Management service role ARN for a merged API. The AppSync service assumes this role on behalf of the Merged API to validate access to source APIs at runtime and to prompt the &lt;code&gt;AUTO_MERGE&lt;/code&gt; to update the merged API endpoint with the source API changes automatically.
   * @return mergedApiExecutionRoleArn
   */
  @javax.annotation.Nullable
  public String getMergedApiExecutionRoleArn() {
    return mergedApiExecutionRoleArn;
  }

  public void setMergedApiExecutionRoleArn(String mergedApiExecutionRoleArn) {
    this.mergedApiExecutionRoleArn = mergedApiExecutionRoleArn;
  }


  public CreateGraphqlApiRequest ownerContact(String ownerContact) {
    this.ownerContact = ownerContact;
    return this;
  }

  /**
   * &lt;p&gt;The owner contact information for an API resource.&lt;/p&gt; &lt;p&gt;This field accepts any string input with a length of 0 - 256 characters.&lt;/p&gt;
   * @return ownerContact
   */
  @javax.annotation.Nullable
  public String getOwnerContact() {
    return ownerContact;
  }

  public void setOwnerContact(String ownerContact) {
    this.ownerContact = ownerContact;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateGraphqlApiRequest createGraphqlApiRequest = (CreateGraphqlApiRequest) o;
    return Objects.equals(this.name, createGraphqlApiRequest.name) &&
        Objects.equals(this.logConfig, createGraphqlApiRequest.logConfig) &&
        Objects.equals(this.authenticationType, createGraphqlApiRequest.authenticationType) &&
        Objects.equals(this.userPoolConfig, createGraphqlApiRequest.userPoolConfig) &&
        Objects.equals(this.openIDConnectConfig, createGraphqlApiRequest.openIDConnectConfig) &&
        Objects.equals(this.tags, createGraphqlApiRequest.tags) &&
        Objects.equals(this.additionalAuthenticationProviders, createGraphqlApiRequest.additionalAuthenticationProviders) &&
        Objects.equals(this.xrayEnabled, createGraphqlApiRequest.xrayEnabled) &&
        Objects.equals(this.lambdaAuthorizerConfig, createGraphqlApiRequest.lambdaAuthorizerConfig) &&
        Objects.equals(this.visibility, createGraphqlApiRequest.visibility) &&
        Objects.equals(this.apiType, createGraphqlApiRequest.apiType) &&
        Objects.equals(this.mergedApiExecutionRoleArn, createGraphqlApiRequest.mergedApiExecutionRoleArn) &&
        Objects.equals(this.ownerContact, createGraphqlApiRequest.ownerContact);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, logConfig, authenticationType, userPoolConfig, openIDConnectConfig, tags, additionalAuthenticationProviders, xrayEnabled, lambdaAuthorizerConfig, visibility, apiType, mergedApiExecutionRoleArn, ownerContact);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateGraphqlApiRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    logConfig: ").append(toIndentedString(logConfig)).append("\n");
    sb.append("    authenticationType: ").append(toIndentedString(authenticationType)).append("\n");
    sb.append("    userPoolConfig: ").append(toIndentedString(userPoolConfig)).append("\n");
    sb.append("    openIDConnectConfig: ").append(toIndentedString(openIDConnectConfig)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    additionalAuthenticationProviders: ").append(toIndentedString(additionalAuthenticationProviders)).append("\n");
    sb.append("    xrayEnabled: ").append(toIndentedString(xrayEnabled)).append("\n");
    sb.append("    lambdaAuthorizerConfig: ").append(toIndentedString(lambdaAuthorizerConfig)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("    apiType: ").append(toIndentedString(apiType)).append("\n");
    sb.append("    mergedApiExecutionRoleArn: ").append(toIndentedString(mergedApiExecutionRoleArn)).append("\n");
    sb.append("    ownerContact: ").append(toIndentedString(ownerContact)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("logConfig");
    openapiFields.add("authenticationType");
    openapiFields.add("userPoolConfig");
    openapiFields.add("openIDConnectConfig");
    openapiFields.add("tags");
    openapiFields.add("additionalAuthenticationProviders");
    openapiFields.add("xrayEnabled");
    openapiFields.add("lambdaAuthorizerConfig");
    openapiFields.add("visibility");
    openapiFields.add("apiType");
    openapiFields.add("mergedApiExecutionRoleArn");
    openapiFields.add("ownerContact");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("authenticationType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateGraphqlApiRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateGraphqlApiRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateGraphqlApiRequest is not found in the empty JSON string", CreateGraphqlApiRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateGraphqlApiRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateGraphqlApiRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateGraphqlApiRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `logConfig`
      if (jsonObj.get("logConfig") != null && !jsonObj.get("logConfig").isJsonNull()) {
        CreateGraphqlApiRequestLogConfig.validateJsonElement(jsonObj.get("logConfig"));
      }
      if (!jsonObj.get("authenticationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authenticationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authenticationType").toString()));
      }
      // validate the required field `authenticationType`
      AuthenticationTypeEnum.validateJsonElement(jsonObj.get("authenticationType"));
      // validate the optional field `userPoolConfig`
      if (jsonObj.get("userPoolConfig") != null && !jsonObj.get("userPoolConfig").isJsonNull()) {
        CreateGraphqlApiRequestUserPoolConfig.validateJsonElement(jsonObj.get("userPoolConfig"));
      }
      // validate the optional field `openIDConnectConfig`
      if (jsonObj.get("openIDConnectConfig") != null && !jsonObj.get("openIDConnectConfig").isJsonNull()) {
        CreateGraphqlApiRequestOpenIDConnectConfig.validateJsonElement(jsonObj.get("openIDConnectConfig"));
      }
      if (jsonObj.get("additionalAuthenticationProviders") != null && !jsonObj.get("additionalAuthenticationProviders").isJsonNull()) {
        JsonArray jsonArrayadditionalAuthenticationProviders = jsonObj.getAsJsonArray("additionalAuthenticationProviders");
        if (jsonArrayadditionalAuthenticationProviders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalAuthenticationProviders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalAuthenticationProviders` to be an array in the JSON string but got `%s`", jsonObj.get("additionalAuthenticationProviders").toString()));
          }

          // validate the optional field `additionalAuthenticationProviders` (array)
          for (int i = 0; i < jsonArrayadditionalAuthenticationProviders.size(); i++) {
            AdditionalAuthenticationProvider.validateJsonElement(jsonArrayadditionalAuthenticationProviders.get(i));
          };
        }
      }
      // validate the optional field `lambdaAuthorizerConfig`
      if (jsonObj.get("lambdaAuthorizerConfig") != null && !jsonObj.get("lambdaAuthorizerConfig").isJsonNull()) {
        CreateGraphqlApiRequestLambdaAuthorizerConfig.validateJsonElement(jsonObj.get("lambdaAuthorizerConfig"));
      }
      if ((jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonNull()) && !jsonObj.get("visibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visibility").toString()));
      }
      // validate the optional field `visibility`
      if (jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonNull()) {
        VisibilityEnum.validateJsonElement(jsonObj.get("visibility"));
      }
      if ((jsonObj.get("apiType") != null && !jsonObj.get("apiType").isJsonNull()) && !jsonObj.get("apiType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiType").toString()));
      }
      // validate the optional field `apiType`
      if (jsonObj.get("apiType") != null && !jsonObj.get("apiType").isJsonNull()) {
        ApiTypeEnum.validateJsonElement(jsonObj.get("apiType"));
      }
      if ((jsonObj.get("mergedApiExecutionRoleArn") != null && !jsonObj.get("mergedApiExecutionRoleArn").isJsonNull()) && !jsonObj.get("mergedApiExecutionRoleArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mergedApiExecutionRoleArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mergedApiExecutionRoleArn").toString()));
      }
      if ((jsonObj.get("ownerContact") != null && !jsonObj.get("ownerContact").isJsonNull()) && !jsonObj.get("ownerContact").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerContact` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerContact").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateGraphqlApiRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateGraphqlApiRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateGraphqlApiRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateGraphqlApiRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateGraphqlApiRequest>() {
           @Override
           public void write(JsonWriter out, CreateGraphqlApiRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateGraphqlApiRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateGraphqlApiRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateGraphqlApiRequest
   * @throws IOException if the JSON string is invalid with respect to CreateGraphqlApiRequest
   */
  public static CreateGraphqlApiRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateGraphqlApiRequest.class);
  }

  /**
   * Convert an instance of CreateGraphqlApiRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

