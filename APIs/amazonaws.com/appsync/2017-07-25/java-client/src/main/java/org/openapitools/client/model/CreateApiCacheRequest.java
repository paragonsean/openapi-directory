/*
 * AWS AppSync
 * AppSync provides API actions for creating and interacting with data sources using GraphQL from your application.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateApiCacheRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:29.005234-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateApiCacheRequest {
  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  private Integer ttl;

  public static final String SERIALIZED_NAME_TRANSIT_ENCRYPTION_ENABLED = "transitEncryptionEnabled";
  @SerializedName(SERIALIZED_NAME_TRANSIT_ENCRYPTION_ENABLED)
  private Boolean transitEncryptionEnabled;

  public static final String SERIALIZED_NAME_AT_REST_ENCRYPTION_ENABLED = "atRestEncryptionEnabled";
  @SerializedName(SERIALIZED_NAME_AT_REST_ENCRYPTION_ENABLED)
  private Boolean atRestEncryptionEnabled;

  /**
   * &lt;p&gt;Caching behavior.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;FULL_REQUEST_CACHING&lt;/b&gt;: All requests are fully cached.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;PER_RESOLVER_CACHING&lt;/b&gt;: Individual resolvers that you specify are cached.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   */
  @JsonAdapter(ApiCachingBehaviorEnum.Adapter.class)
  public enum ApiCachingBehaviorEnum {
    FULL_REQUEST_CACHING("FULL_REQUEST_CACHING"),
    
    PER_RESOLVER_CACHING("PER_RESOLVER_CACHING");

    private String value;

    ApiCachingBehaviorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApiCachingBehaviorEnum fromValue(String value) {
      for (ApiCachingBehaviorEnum b : ApiCachingBehaviorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApiCachingBehaviorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApiCachingBehaviorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApiCachingBehaviorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApiCachingBehaviorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ApiCachingBehaviorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_API_CACHING_BEHAVIOR = "apiCachingBehavior";
  @SerializedName(SERIALIZED_NAME_API_CACHING_BEHAVIOR)
  private ApiCachingBehaviorEnum apiCachingBehavior;

  /**
   * &lt;p&gt;The cache instance type. Valid values are &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SMALL&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MEDIUM&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LARGE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;XLARGE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LARGE_2X&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LARGE_4X&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LARGE_8X&lt;/code&gt; (not available in all regions)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LARGE_12X&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Historically, instance types were identified by an EC2-style value. As of July 2020, this is deprecated, and the generic identifiers above should be used.&lt;/p&gt; &lt;p&gt;The following legacy instance types are available, but their use is discouraged:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;T2_SMALL&lt;/b&gt;: A t2.small instance type.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;T2_MEDIUM&lt;/b&gt;: A t2.medium instance type.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;R4_LARGE&lt;/b&gt;: A r4.large instance type.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;R4_XLARGE&lt;/b&gt;: A r4.xlarge instance type.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;R4_2XLARGE&lt;/b&gt;: A r4.2xlarge instance type.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;R4_4XLARGE&lt;/b&gt;: A r4.4xlarge instance type.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;R4_8XLARGE&lt;/b&gt;: A r4.8xlarge instance type.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    T2_SMALL("T2_SMALL"),
    
    T2_MEDIUM("T2_MEDIUM"),
    
    R4_LARGE("R4_LARGE"),
    
    R4_XLARGE("R4_XLARGE"),
    
    R4_2_XLARGE("R4_2XLARGE"),
    
    R4_4_XLARGE("R4_4XLARGE"),
    
    R4_8_XLARGE("R4_8XLARGE"),
    
    SMALL("SMALL"),
    
    MEDIUM("MEDIUM"),
    
    LARGE("LARGE"),
    
    XLARGE("XLARGE"),
    
    LARGE_2_X("LARGE_2X"),
    
    LARGE_4_X("LARGE_4X"),
    
    LARGE_8_X("LARGE_8X"),
    
    LARGE_12_X("LARGE_12X");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public CreateApiCacheRequest() {
  }

  public CreateApiCacheRequest ttl(Integer ttl) {
    this.ttl = ttl;
    return this;
  }

  /**
   * &lt;p&gt;TTL in seconds for cache entries.&lt;/p&gt; &lt;p&gt;Valid values are 1â€“3,600 seconds.&lt;/p&gt;
   * @return ttl
   */
  @javax.annotation.Nonnull
  public Integer getTtl() {
    return ttl;
  }

  public void setTtl(Integer ttl) {
    this.ttl = ttl;
  }


  public CreateApiCacheRequest transitEncryptionEnabled(Boolean transitEncryptionEnabled) {
    this.transitEncryptionEnabled = transitEncryptionEnabled;
    return this;
  }

  /**
   * Transit encryption flag when connecting to cache. You cannot update this setting after creation.
   * @return transitEncryptionEnabled
   */
  @javax.annotation.Nullable
  public Boolean getTransitEncryptionEnabled() {
    return transitEncryptionEnabled;
  }

  public void setTransitEncryptionEnabled(Boolean transitEncryptionEnabled) {
    this.transitEncryptionEnabled = transitEncryptionEnabled;
  }


  public CreateApiCacheRequest atRestEncryptionEnabled(Boolean atRestEncryptionEnabled) {
    this.atRestEncryptionEnabled = atRestEncryptionEnabled;
    return this;
  }

  /**
   * At-rest encryption flag for cache. You cannot update this setting after creation.
   * @return atRestEncryptionEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAtRestEncryptionEnabled() {
    return atRestEncryptionEnabled;
  }

  public void setAtRestEncryptionEnabled(Boolean atRestEncryptionEnabled) {
    this.atRestEncryptionEnabled = atRestEncryptionEnabled;
  }


  public CreateApiCacheRequest apiCachingBehavior(ApiCachingBehaviorEnum apiCachingBehavior) {
    this.apiCachingBehavior = apiCachingBehavior;
    return this;
  }

  /**
   * &lt;p&gt;Caching behavior.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;FULL_REQUEST_CACHING&lt;/b&gt;: All requests are fully cached.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;PER_RESOLVER_CACHING&lt;/b&gt;: Individual resolvers that you specify are cached.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return apiCachingBehavior
   */
  @javax.annotation.Nonnull
  public ApiCachingBehaviorEnum getApiCachingBehavior() {
    return apiCachingBehavior;
  }

  public void setApiCachingBehavior(ApiCachingBehaviorEnum apiCachingBehavior) {
    this.apiCachingBehavior = apiCachingBehavior;
  }


  public CreateApiCacheRequest type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * &lt;p&gt;The cache instance type. Valid values are &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SMALL&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MEDIUM&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LARGE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;XLARGE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LARGE_2X&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LARGE_4X&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LARGE_8X&lt;/code&gt; (not available in all regions)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LARGE_12X&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Historically, instance types were identified by an EC2-style value. As of July 2020, this is deprecated, and the generic identifiers above should be used.&lt;/p&gt; &lt;p&gt;The following legacy instance types are available, but their use is discouraged:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;T2_SMALL&lt;/b&gt;: A t2.small instance type.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;T2_MEDIUM&lt;/b&gt;: A t2.medium instance type.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;R4_LARGE&lt;/b&gt;: A r4.large instance type.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;R4_XLARGE&lt;/b&gt;: A r4.xlarge instance type.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;R4_2XLARGE&lt;/b&gt;: A r4.2xlarge instance type.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;R4_4XLARGE&lt;/b&gt;: A r4.4xlarge instance type.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;R4_8XLARGE&lt;/b&gt;: A r4.8xlarge instance type.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateApiCacheRequest createApiCacheRequest = (CreateApiCacheRequest) o;
    return Objects.equals(this.ttl, createApiCacheRequest.ttl) &&
        Objects.equals(this.transitEncryptionEnabled, createApiCacheRequest.transitEncryptionEnabled) &&
        Objects.equals(this.atRestEncryptionEnabled, createApiCacheRequest.atRestEncryptionEnabled) &&
        Objects.equals(this.apiCachingBehavior, createApiCacheRequest.apiCachingBehavior) &&
        Objects.equals(this.type, createApiCacheRequest.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ttl, transitEncryptionEnabled, atRestEncryptionEnabled, apiCachingBehavior, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateApiCacheRequest {\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("    transitEncryptionEnabled: ").append(toIndentedString(transitEncryptionEnabled)).append("\n");
    sb.append("    atRestEncryptionEnabled: ").append(toIndentedString(atRestEncryptionEnabled)).append("\n");
    sb.append("    apiCachingBehavior: ").append(toIndentedString(apiCachingBehavior)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ttl");
    openapiFields.add("transitEncryptionEnabled");
    openapiFields.add("atRestEncryptionEnabled");
    openapiFields.add("apiCachingBehavior");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ttl");
    openapiRequiredFields.add("apiCachingBehavior");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateApiCacheRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateApiCacheRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateApiCacheRequest is not found in the empty JSON string", CreateApiCacheRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateApiCacheRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateApiCacheRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateApiCacheRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("apiCachingBehavior").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiCachingBehavior` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiCachingBehavior").toString()));
      }
      // validate the required field `apiCachingBehavior`
      ApiCachingBehaviorEnum.validateJsonElement(jsonObj.get("apiCachingBehavior"));
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateApiCacheRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateApiCacheRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateApiCacheRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateApiCacheRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateApiCacheRequest>() {
           @Override
           public void write(JsonWriter out, CreateApiCacheRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateApiCacheRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateApiCacheRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateApiCacheRequest
   * @throws IOException if the JSON string is invalid with respect to CreateApiCacheRequest
   */
  public static CreateApiCacheRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateApiCacheRequest.class);
  }

  /**
   * Convert an instance of CreateApiCacheRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

