/*
 * AWS AppSync
 * AppSync provides API actions for creating and interacting with data sources using GraphQL from your application.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateFunctionRequestRuntime;
import org.openapitools.client.model.CreateFunctionRequestSyncConfig;
import org.openapitools.client.model.CreateResolverRequestCachingConfig;
import org.openapitools.client.model.CreateResolverRequestPipelineConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateResolverRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:29.005234-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateResolverRequest {
  public static final String SERIALIZED_NAME_DATA_SOURCE_NAME = "dataSourceName";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE_NAME)
  private String dataSourceName;

  public static final String SERIALIZED_NAME_REQUEST_MAPPING_TEMPLATE = "requestMappingTemplate";
  @SerializedName(SERIALIZED_NAME_REQUEST_MAPPING_TEMPLATE)
  private String requestMappingTemplate;

  public static final String SERIALIZED_NAME_RESPONSE_MAPPING_TEMPLATE = "responseMappingTemplate";
  @SerializedName(SERIALIZED_NAME_RESPONSE_MAPPING_TEMPLATE)
  private String responseMappingTemplate;

  /**
   * &lt;p&gt;The resolver type.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;UNIT&lt;/b&gt;: A UNIT resolver type. A UNIT resolver is the default resolver type. You can use a UNIT resolver to run a GraphQL query against a single data source.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;PIPELINE&lt;/b&gt;: A PIPELINE resolver type. You can use a PIPELINE resolver to invoke a series of &lt;code&gt;Function&lt;/code&gt; objects in a serial manner. You can use a pipeline resolver to run a GraphQL query against multiple data sources.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   */
  @JsonAdapter(KindEnum.Adapter.class)
  public enum KindEnum {
    UNIT("UNIT"),
    
    PIPELINE("PIPELINE");

    private String value;

    KindEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KindEnum fromValue(String value) {
      for (KindEnum b : KindEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KindEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KindEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KindEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KindEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private KindEnum kind;

  public static final String SERIALIZED_NAME_PIPELINE_CONFIG = "pipelineConfig";
  @SerializedName(SERIALIZED_NAME_PIPELINE_CONFIG)
  private CreateResolverRequestPipelineConfig pipelineConfig;

  public static final String SERIALIZED_NAME_SYNC_CONFIG = "syncConfig";
  @SerializedName(SERIALIZED_NAME_SYNC_CONFIG)
  private CreateFunctionRequestSyncConfig syncConfig;

  public static final String SERIALIZED_NAME_CACHING_CONFIG = "cachingConfig";
  @SerializedName(SERIALIZED_NAME_CACHING_CONFIG)
  private CreateResolverRequestCachingConfig cachingConfig;

  public static final String SERIALIZED_NAME_MAX_BATCH_SIZE = "maxBatchSize";
  @SerializedName(SERIALIZED_NAME_MAX_BATCH_SIZE)
  private Integer maxBatchSize;

  public static final String SERIALIZED_NAME_RUNTIME = "runtime";
  @SerializedName(SERIALIZED_NAME_RUNTIME)
  private CreateFunctionRequestRuntime runtime;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public UpdateResolverRequest() {
  }

  public UpdateResolverRequest dataSourceName(String dataSourceName) {
    this.dataSourceName = dataSourceName;
    return this;
  }

  /**
   * The new data source name.
   * @return dataSourceName
   */
  @javax.annotation.Nullable
  public String getDataSourceName() {
    return dataSourceName;
  }

  public void setDataSourceName(String dataSourceName) {
    this.dataSourceName = dataSourceName;
  }


  public UpdateResolverRequest requestMappingTemplate(String requestMappingTemplate) {
    this.requestMappingTemplate = requestMappingTemplate;
    return this;
  }

  /**
   * &lt;p&gt;The new request mapping template.&lt;/p&gt; &lt;p&gt;A resolver uses a request mapping template to convert a GraphQL expression into a format that a data source can understand. Mapping templates are written in Apache Velocity Template Language (VTL).&lt;/p&gt; &lt;p&gt;VTL request mapping templates are optional when using an Lambda data source. For all other data sources, VTL request and response mapping templates are required.&lt;/p&gt;
   * @return requestMappingTemplate
   */
  @javax.annotation.Nullable
  public String getRequestMappingTemplate() {
    return requestMappingTemplate;
  }

  public void setRequestMappingTemplate(String requestMappingTemplate) {
    this.requestMappingTemplate = requestMappingTemplate;
  }


  public UpdateResolverRequest responseMappingTemplate(String responseMappingTemplate) {
    this.responseMappingTemplate = responseMappingTemplate;
    return this;
  }

  /**
   * The new response mapping template.
   * @return responseMappingTemplate
   */
  @javax.annotation.Nullable
  public String getResponseMappingTemplate() {
    return responseMappingTemplate;
  }

  public void setResponseMappingTemplate(String responseMappingTemplate) {
    this.responseMappingTemplate = responseMappingTemplate;
  }


  public UpdateResolverRequest kind(KindEnum kind) {
    this.kind = kind;
    return this;
  }

  /**
   * &lt;p&gt;The resolver type.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;UNIT&lt;/b&gt;: A UNIT resolver type. A UNIT resolver is the default resolver type. You can use a UNIT resolver to run a GraphQL query against a single data source.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;PIPELINE&lt;/b&gt;: A PIPELINE resolver type. You can use a PIPELINE resolver to invoke a series of &lt;code&gt;Function&lt;/code&gt; objects in a serial manner. You can use a pipeline resolver to run a GraphQL query against multiple data sources.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return kind
   */
  @javax.annotation.Nullable
  public KindEnum getKind() {
    return kind;
  }

  public void setKind(KindEnum kind) {
    this.kind = kind;
  }


  public UpdateResolverRequest pipelineConfig(CreateResolverRequestPipelineConfig pipelineConfig) {
    this.pipelineConfig = pipelineConfig;
    return this;
  }

  /**
   * Get pipelineConfig
   * @return pipelineConfig
   */
  @javax.annotation.Nullable
  public CreateResolverRequestPipelineConfig getPipelineConfig() {
    return pipelineConfig;
  }

  public void setPipelineConfig(CreateResolverRequestPipelineConfig pipelineConfig) {
    this.pipelineConfig = pipelineConfig;
  }


  public UpdateResolverRequest syncConfig(CreateFunctionRequestSyncConfig syncConfig) {
    this.syncConfig = syncConfig;
    return this;
  }

  /**
   * Get syncConfig
   * @return syncConfig
   */
  @javax.annotation.Nullable
  public CreateFunctionRequestSyncConfig getSyncConfig() {
    return syncConfig;
  }

  public void setSyncConfig(CreateFunctionRequestSyncConfig syncConfig) {
    this.syncConfig = syncConfig;
  }


  public UpdateResolverRequest cachingConfig(CreateResolverRequestCachingConfig cachingConfig) {
    this.cachingConfig = cachingConfig;
    return this;
  }

  /**
   * Get cachingConfig
   * @return cachingConfig
   */
  @javax.annotation.Nullable
  public CreateResolverRequestCachingConfig getCachingConfig() {
    return cachingConfig;
  }

  public void setCachingConfig(CreateResolverRequestCachingConfig cachingConfig) {
    this.cachingConfig = cachingConfig;
  }


  public UpdateResolverRequest maxBatchSize(Integer maxBatchSize) {
    this.maxBatchSize = maxBatchSize;
    return this;
  }

  /**
   * The maximum batching size for a resolver.
   * minimum: 0
   * maximum: 2000
   * @return maxBatchSize
   */
  @javax.annotation.Nullable
  public Integer getMaxBatchSize() {
    return maxBatchSize;
  }

  public void setMaxBatchSize(Integer maxBatchSize) {
    this.maxBatchSize = maxBatchSize;
  }


  public UpdateResolverRequest runtime(CreateFunctionRequestRuntime runtime) {
    this.runtime = runtime;
    return this;
  }

  /**
   * Get runtime
   * @return runtime
   */
  @javax.annotation.Nullable
  public CreateFunctionRequestRuntime getRuntime() {
    return runtime;
  }

  public void setRuntime(CreateFunctionRequestRuntime runtime) {
    this.runtime = runtime;
  }


  public UpdateResolverRequest code(String code) {
    this.code = code;
    return this;
  }

  /**
   * The &lt;code&gt;resolver&lt;/code&gt; code that contains the request and response functions. When code is used, the &lt;code&gt;runtime&lt;/code&gt; is required. The &lt;code&gt;runtime&lt;/code&gt; value must be &lt;code&gt;APPSYNC_JS&lt;/code&gt;.
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateResolverRequest updateResolverRequest = (UpdateResolverRequest) o;
    return Objects.equals(this.dataSourceName, updateResolverRequest.dataSourceName) &&
        Objects.equals(this.requestMappingTemplate, updateResolverRequest.requestMappingTemplate) &&
        Objects.equals(this.responseMappingTemplate, updateResolverRequest.responseMappingTemplate) &&
        Objects.equals(this.kind, updateResolverRequest.kind) &&
        Objects.equals(this.pipelineConfig, updateResolverRequest.pipelineConfig) &&
        Objects.equals(this.syncConfig, updateResolverRequest.syncConfig) &&
        Objects.equals(this.cachingConfig, updateResolverRequest.cachingConfig) &&
        Objects.equals(this.maxBatchSize, updateResolverRequest.maxBatchSize) &&
        Objects.equals(this.runtime, updateResolverRequest.runtime) &&
        Objects.equals(this.code, updateResolverRequest.code);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSourceName, requestMappingTemplate, responseMappingTemplate, kind, pipelineConfig, syncConfig, cachingConfig, maxBatchSize, runtime, code);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateResolverRequest {\n");
    sb.append("    dataSourceName: ").append(toIndentedString(dataSourceName)).append("\n");
    sb.append("    requestMappingTemplate: ").append(toIndentedString(requestMappingTemplate)).append("\n");
    sb.append("    responseMappingTemplate: ").append(toIndentedString(responseMappingTemplate)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    pipelineConfig: ").append(toIndentedString(pipelineConfig)).append("\n");
    sb.append("    syncConfig: ").append(toIndentedString(syncConfig)).append("\n");
    sb.append("    cachingConfig: ").append(toIndentedString(cachingConfig)).append("\n");
    sb.append("    maxBatchSize: ").append(toIndentedString(maxBatchSize)).append("\n");
    sb.append("    runtime: ").append(toIndentedString(runtime)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataSourceName");
    openapiFields.add("requestMappingTemplate");
    openapiFields.add("responseMappingTemplate");
    openapiFields.add("kind");
    openapiFields.add("pipelineConfig");
    openapiFields.add("syncConfig");
    openapiFields.add("cachingConfig");
    openapiFields.add("maxBatchSize");
    openapiFields.add("runtime");
    openapiFields.add("code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateResolverRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateResolverRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateResolverRequest is not found in the empty JSON string", UpdateResolverRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateResolverRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateResolverRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataSourceName") != null && !jsonObj.get("dataSourceName").isJsonNull()) && !jsonObj.get("dataSourceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSourceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSourceName").toString()));
      }
      if ((jsonObj.get("requestMappingTemplate") != null && !jsonObj.get("requestMappingTemplate").isJsonNull()) && !jsonObj.get("requestMappingTemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestMappingTemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestMappingTemplate").toString()));
      }
      if ((jsonObj.get("responseMappingTemplate") != null && !jsonObj.get("responseMappingTemplate").isJsonNull()) && !jsonObj.get("responseMappingTemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseMappingTemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseMappingTemplate").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `kind`
      if (jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) {
        KindEnum.validateJsonElement(jsonObj.get("kind"));
      }
      // validate the optional field `pipelineConfig`
      if (jsonObj.get("pipelineConfig") != null && !jsonObj.get("pipelineConfig").isJsonNull()) {
        CreateResolverRequestPipelineConfig.validateJsonElement(jsonObj.get("pipelineConfig"));
      }
      // validate the optional field `syncConfig`
      if (jsonObj.get("syncConfig") != null && !jsonObj.get("syncConfig").isJsonNull()) {
        CreateFunctionRequestSyncConfig.validateJsonElement(jsonObj.get("syncConfig"));
      }
      // validate the optional field `cachingConfig`
      if (jsonObj.get("cachingConfig") != null && !jsonObj.get("cachingConfig").isJsonNull()) {
        CreateResolverRequestCachingConfig.validateJsonElement(jsonObj.get("cachingConfig"));
      }
      // validate the optional field `runtime`
      if (jsonObj.get("runtime") != null && !jsonObj.get("runtime").isJsonNull()) {
        CreateFunctionRequestRuntime.validateJsonElement(jsonObj.get("runtime"));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateResolverRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateResolverRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateResolverRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateResolverRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateResolverRequest>() {
           @Override
           public void write(JsonWriter out, UpdateResolverRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateResolverRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateResolverRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateResolverRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateResolverRequest
   */
  public static UpdateResolverRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateResolverRequest.class);
  }

  /**
   * Convert an instance of UpdateResolverRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

