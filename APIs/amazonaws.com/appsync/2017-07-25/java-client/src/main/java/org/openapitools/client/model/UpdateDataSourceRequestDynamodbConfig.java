/*
 * AWS AppSync
 * AppSync provides API actions for creating and interacting with data sources using GraphQL from your application.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateDataSourceRequestDynamodbConfigDeltaSyncConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateDataSourceRequestDynamodbConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:29.005234-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateDataSourceRequestDynamodbConfig {
  public static final String SERIALIZED_NAME_TABLE_NAME = "tableName";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  private String tableName;

  public static final String SERIALIZED_NAME_AWS_REGION = "awsRegion";
  @SerializedName(SERIALIZED_NAME_AWS_REGION)
  private String awsRegion;

  public static final String SERIALIZED_NAME_USE_CALLER_CREDENTIALS = "useCallerCredentials";
  @SerializedName(SERIALIZED_NAME_USE_CALLER_CREDENTIALS)
  private Boolean useCallerCredentials;

  public static final String SERIALIZED_NAME_DELTA_SYNC_CONFIG = "deltaSyncConfig";
  @SerializedName(SERIALIZED_NAME_DELTA_SYNC_CONFIG)
  private CreateDataSourceRequestDynamodbConfigDeltaSyncConfig deltaSyncConfig;

  public static final String SERIALIZED_NAME_VERSIONED = "versioned";
  @SerializedName(SERIALIZED_NAME_VERSIONED)
  private Boolean versioned;

  public UpdateDataSourceRequestDynamodbConfig() {
  }

  public UpdateDataSourceRequestDynamodbConfig tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * Get tableName
   * @return tableName
   */
  @javax.annotation.Nonnull
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }


  public UpdateDataSourceRequestDynamodbConfig awsRegion(String awsRegion) {
    this.awsRegion = awsRegion;
    return this;
  }

  /**
   * Get awsRegion
   * @return awsRegion
   */
  @javax.annotation.Nonnull
  public String getAwsRegion() {
    return awsRegion;
  }

  public void setAwsRegion(String awsRegion) {
    this.awsRegion = awsRegion;
  }


  public UpdateDataSourceRequestDynamodbConfig useCallerCredentials(Boolean useCallerCredentials) {
    this.useCallerCredentials = useCallerCredentials;
    return this;
  }

  /**
   * Get useCallerCredentials
   * @return useCallerCredentials
   */
  @javax.annotation.Nullable
  public Boolean getUseCallerCredentials() {
    return useCallerCredentials;
  }

  public void setUseCallerCredentials(Boolean useCallerCredentials) {
    this.useCallerCredentials = useCallerCredentials;
  }


  public UpdateDataSourceRequestDynamodbConfig deltaSyncConfig(CreateDataSourceRequestDynamodbConfigDeltaSyncConfig deltaSyncConfig) {
    this.deltaSyncConfig = deltaSyncConfig;
    return this;
  }

  /**
   * Get deltaSyncConfig
   * @return deltaSyncConfig
   */
  @javax.annotation.Nullable
  public CreateDataSourceRequestDynamodbConfigDeltaSyncConfig getDeltaSyncConfig() {
    return deltaSyncConfig;
  }

  public void setDeltaSyncConfig(CreateDataSourceRequestDynamodbConfigDeltaSyncConfig deltaSyncConfig) {
    this.deltaSyncConfig = deltaSyncConfig;
  }


  public UpdateDataSourceRequestDynamodbConfig versioned(Boolean versioned) {
    this.versioned = versioned;
    return this;
  }

  /**
   * Get versioned
   * @return versioned
   */
  @javax.annotation.Nullable
  public Boolean getVersioned() {
    return versioned;
  }

  public void setVersioned(Boolean versioned) {
    this.versioned = versioned;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateDataSourceRequestDynamodbConfig updateDataSourceRequestDynamodbConfig = (UpdateDataSourceRequestDynamodbConfig) o;
    return Objects.equals(this.tableName, updateDataSourceRequestDynamodbConfig.tableName) &&
        Objects.equals(this.awsRegion, updateDataSourceRequestDynamodbConfig.awsRegion) &&
        Objects.equals(this.useCallerCredentials, updateDataSourceRequestDynamodbConfig.useCallerCredentials) &&
        Objects.equals(this.deltaSyncConfig, updateDataSourceRequestDynamodbConfig.deltaSyncConfig) &&
        Objects.equals(this.versioned, updateDataSourceRequestDynamodbConfig.versioned);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tableName, awsRegion, useCallerCredentials, deltaSyncConfig, versioned);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateDataSourceRequestDynamodbConfig {\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    awsRegion: ").append(toIndentedString(awsRegion)).append("\n");
    sb.append("    useCallerCredentials: ").append(toIndentedString(useCallerCredentials)).append("\n");
    sb.append("    deltaSyncConfig: ").append(toIndentedString(deltaSyncConfig)).append("\n");
    sb.append("    versioned: ").append(toIndentedString(versioned)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tableName");
    openapiFields.add("awsRegion");
    openapiFields.add("useCallerCredentials");
    openapiFields.add("deltaSyncConfig");
    openapiFields.add("versioned");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("tableName");
    openapiRequiredFields.add("awsRegion");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateDataSourceRequestDynamodbConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateDataSourceRequestDynamodbConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateDataSourceRequestDynamodbConfig is not found in the empty JSON string", UpdateDataSourceRequestDynamodbConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateDataSourceRequestDynamodbConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateDataSourceRequestDynamodbConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateDataSourceRequestDynamodbConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `tableName`
      String.validateJsonElement(jsonObj.get("tableName"));
      // validate the required field `awsRegion`
      String.validateJsonElement(jsonObj.get("awsRegion"));
      // validate the optional field `useCallerCredentials`
      if (jsonObj.get("useCallerCredentials") != null && !jsonObj.get("useCallerCredentials").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("useCallerCredentials"));
      }
      // validate the optional field `deltaSyncConfig`
      if (jsonObj.get("deltaSyncConfig") != null && !jsonObj.get("deltaSyncConfig").isJsonNull()) {
        CreateDataSourceRequestDynamodbConfigDeltaSyncConfig.validateJsonElement(jsonObj.get("deltaSyncConfig"));
      }
      // validate the optional field `versioned`
      if (jsonObj.get("versioned") != null && !jsonObj.get("versioned").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("versioned"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateDataSourceRequestDynamodbConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateDataSourceRequestDynamodbConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateDataSourceRequestDynamodbConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateDataSourceRequestDynamodbConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateDataSourceRequestDynamodbConfig>() {
           @Override
           public void write(JsonWriter out, UpdateDataSourceRequestDynamodbConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateDataSourceRequestDynamodbConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateDataSourceRequestDynamodbConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateDataSourceRequestDynamodbConfig
   * @throws IOException if the JSON string is invalid with respect to UpdateDataSourceRequestDynamodbConfig
   */
  public static UpdateDataSourceRequestDynamodbConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateDataSourceRequestDynamodbConfig.class);
  }

  /**
   * Convert an instance of UpdateDataSourceRequestDynamodbConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

