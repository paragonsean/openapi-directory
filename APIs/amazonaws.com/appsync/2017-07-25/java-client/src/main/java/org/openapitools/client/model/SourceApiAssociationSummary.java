/*
 * AWS AppSync
 * AppSync provides API actions for creating and interacting with data sources using GraphQL from your application.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the ARNs and IDs of associations, Merged APIs, and source APIs.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:29.005234-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SourceApiAssociationSummary {
  public static final String SERIALIZED_NAME_ASSOCIATION_ID = "associationId";
  @SerializedName(SERIALIZED_NAME_ASSOCIATION_ID)
  private String associationId;

  public static final String SERIALIZED_NAME_ASSOCIATION_ARN = "associationArn";
  @SerializedName(SERIALIZED_NAME_ASSOCIATION_ARN)
  private String associationArn;

  public static final String SERIALIZED_NAME_SOURCE_API_ID = "sourceApiId";
  @SerializedName(SERIALIZED_NAME_SOURCE_API_ID)
  private String sourceApiId;

  public static final String SERIALIZED_NAME_SOURCE_API_ARN = "sourceApiArn";
  @SerializedName(SERIALIZED_NAME_SOURCE_API_ARN)
  private String sourceApiArn;

  public static final String SERIALIZED_NAME_MERGED_API_ID = "mergedApiId";
  @SerializedName(SERIALIZED_NAME_MERGED_API_ID)
  private String mergedApiId;

  public static final String SERIALIZED_NAME_MERGED_API_ARN = "mergedApiArn";
  @SerializedName(SERIALIZED_NAME_MERGED_API_ARN)
  private String mergedApiArn;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public SourceApiAssociationSummary() {
  }

  public SourceApiAssociationSummary associationId(String associationId) {
    this.associationId = associationId;
    return this;
  }

  /**
   * Get associationId
   * @return associationId
   */
  @javax.annotation.Nullable
  public String getAssociationId() {
    return associationId;
  }

  public void setAssociationId(String associationId) {
    this.associationId = associationId;
  }


  public SourceApiAssociationSummary associationArn(String associationArn) {
    this.associationArn = associationArn;
    return this;
  }

  /**
   * Get associationArn
   * @return associationArn
   */
  @javax.annotation.Nullable
  public String getAssociationArn() {
    return associationArn;
  }

  public void setAssociationArn(String associationArn) {
    this.associationArn = associationArn;
  }


  public SourceApiAssociationSummary sourceApiId(String sourceApiId) {
    this.sourceApiId = sourceApiId;
    return this;
  }

  /**
   * Get sourceApiId
   * @return sourceApiId
   */
  @javax.annotation.Nullable
  public String getSourceApiId() {
    return sourceApiId;
  }

  public void setSourceApiId(String sourceApiId) {
    this.sourceApiId = sourceApiId;
  }


  public SourceApiAssociationSummary sourceApiArn(String sourceApiArn) {
    this.sourceApiArn = sourceApiArn;
    return this;
  }

  /**
   * Get sourceApiArn
   * @return sourceApiArn
   */
  @javax.annotation.Nullable
  public String getSourceApiArn() {
    return sourceApiArn;
  }

  public void setSourceApiArn(String sourceApiArn) {
    this.sourceApiArn = sourceApiArn;
  }


  public SourceApiAssociationSummary mergedApiId(String mergedApiId) {
    this.mergedApiId = mergedApiId;
    return this;
  }

  /**
   * Get mergedApiId
   * @return mergedApiId
   */
  @javax.annotation.Nullable
  public String getMergedApiId() {
    return mergedApiId;
  }

  public void setMergedApiId(String mergedApiId) {
    this.mergedApiId = mergedApiId;
  }


  public SourceApiAssociationSummary mergedApiArn(String mergedApiArn) {
    this.mergedApiArn = mergedApiArn;
    return this;
  }

  /**
   * Get mergedApiArn
   * @return mergedApiArn
   */
  @javax.annotation.Nullable
  public String getMergedApiArn() {
    return mergedApiArn;
  }

  public void setMergedApiArn(String mergedApiArn) {
    this.mergedApiArn = mergedApiArn;
  }


  public SourceApiAssociationSummary description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceApiAssociationSummary sourceApiAssociationSummary = (SourceApiAssociationSummary) o;
    return Objects.equals(this.associationId, sourceApiAssociationSummary.associationId) &&
        Objects.equals(this.associationArn, sourceApiAssociationSummary.associationArn) &&
        Objects.equals(this.sourceApiId, sourceApiAssociationSummary.sourceApiId) &&
        Objects.equals(this.sourceApiArn, sourceApiAssociationSummary.sourceApiArn) &&
        Objects.equals(this.mergedApiId, sourceApiAssociationSummary.mergedApiId) &&
        Objects.equals(this.mergedApiArn, sourceApiAssociationSummary.mergedApiArn) &&
        Objects.equals(this.description, sourceApiAssociationSummary.description);
  }

  @Override
  public int hashCode() {
    return Objects.hash(associationId, associationArn, sourceApiId, sourceApiArn, mergedApiId, mergedApiArn, description);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceApiAssociationSummary {\n");
    sb.append("    associationId: ").append(toIndentedString(associationId)).append("\n");
    sb.append("    associationArn: ").append(toIndentedString(associationArn)).append("\n");
    sb.append("    sourceApiId: ").append(toIndentedString(sourceApiId)).append("\n");
    sb.append("    sourceApiArn: ").append(toIndentedString(sourceApiArn)).append("\n");
    sb.append("    mergedApiId: ").append(toIndentedString(mergedApiId)).append("\n");
    sb.append("    mergedApiArn: ").append(toIndentedString(mergedApiArn)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("associationId");
    openapiFields.add("associationArn");
    openapiFields.add("sourceApiId");
    openapiFields.add("sourceApiArn");
    openapiFields.add("mergedApiId");
    openapiFields.add("mergedApiArn");
    openapiFields.add("description");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SourceApiAssociationSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SourceApiAssociationSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SourceApiAssociationSummary is not found in the empty JSON string", SourceApiAssociationSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SourceApiAssociationSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SourceApiAssociationSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `associationId`
      if (jsonObj.get("associationId") != null && !jsonObj.get("associationId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("associationId"));
      }
      // validate the optional field `associationArn`
      if (jsonObj.get("associationArn") != null && !jsonObj.get("associationArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("associationArn"));
      }
      // validate the optional field `sourceApiId`
      if (jsonObj.get("sourceApiId") != null && !jsonObj.get("sourceApiId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("sourceApiId"));
      }
      // validate the optional field `sourceApiArn`
      if (jsonObj.get("sourceApiArn") != null && !jsonObj.get("sourceApiArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("sourceApiArn"));
      }
      // validate the optional field `mergedApiId`
      if (jsonObj.get("mergedApiId") != null && !jsonObj.get("mergedApiId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("mergedApiId"));
      }
      // validate the optional field `mergedApiArn`
      if (jsonObj.get("mergedApiArn") != null && !jsonObj.get("mergedApiArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("mergedApiArn"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SourceApiAssociationSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SourceApiAssociationSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SourceApiAssociationSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SourceApiAssociationSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<SourceApiAssociationSummary>() {
           @Override
           public void write(JsonWriter out, SourceApiAssociationSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SourceApiAssociationSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SourceApiAssociationSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SourceApiAssociationSummary
   * @throws IOException if the JSON string is invalid with respect to SourceApiAssociationSummary
   */
  public static SourceApiAssociationSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SourceApiAssociationSummary.class);
  }

  /**
   * Convert an instance of SourceApiAssociationSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

