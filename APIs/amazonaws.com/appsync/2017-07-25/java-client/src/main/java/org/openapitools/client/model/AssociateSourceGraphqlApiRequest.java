/*
 * AWS AppSync
 * AppSync provides API actions for creating and interacting with data sources using GraphQL from your application.
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AssociateMergedGraphqlApiRequestSourceApiAssociationConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AssociateSourceGraphqlApiRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:29.005234-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssociateSourceGraphqlApiRequest {
  public static final String SERIALIZED_NAME_SOURCE_API_IDENTIFIER = "sourceApiIdentifier";
  @SerializedName(SERIALIZED_NAME_SOURCE_API_IDENTIFIER)
  private String sourceApiIdentifier;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SOURCE_API_ASSOCIATION_CONFIG = "sourceApiAssociationConfig";
  @SerializedName(SERIALIZED_NAME_SOURCE_API_ASSOCIATION_CONFIG)
  private AssociateMergedGraphqlApiRequestSourceApiAssociationConfig sourceApiAssociationConfig;

  public AssociateSourceGraphqlApiRequest() {
  }

  public AssociateSourceGraphqlApiRequest sourceApiIdentifier(String sourceApiIdentifier) {
    this.sourceApiIdentifier = sourceApiIdentifier;
    return this;
  }

  /**
   * The identifier of the AppSync Source API. This is generated by the AppSync service. In most cases, source APIs (especially in your account) only require the API ID value or ARN of the source API. However, source APIs from other accounts (cross-account use cases) strictly require the full resource ARN of the source API.
   * @return sourceApiIdentifier
   */
  @javax.annotation.Nonnull
  public String getSourceApiIdentifier() {
    return sourceApiIdentifier;
  }

  public void setSourceApiIdentifier(String sourceApiIdentifier) {
    this.sourceApiIdentifier = sourceApiIdentifier;
  }


  public AssociateSourceGraphqlApiRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description field.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AssociateSourceGraphqlApiRequest sourceApiAssociationConfig(AssociateMergedGraphqlApiRequestSourceApiAssociationConfig sourceApiAssociationConfig) {
    this.sourceApiAssociationConfig = sourceApiAssociationConfig;
    return this;
  }

  /**
   * Get sourceApiAssociationConfig
   * @return sourceApiAssociationConfig
   */
  @javax.annotation.Nullable
  public AssociateMergedGraphqlApiRequestSourceApiAssociationConfig getSourceApiAssociationConfig() {
    return sourceApiAssociationConfig;
  }

  public void setSourceApiAssociationConfig(AssociateMergedGraphqlApiRequestSourceApiAssociationConfig sourceApiAssociationConfig) {
    this.sourceApiAssociationConfig = sourceApiAssociationConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssociateSourceGraphqlApiRequest associateSourceGraphqlApiRequest = (AssociateSourceGraphqlApiRequest) o;
    return Objects.equals(this.sourceApiIdentifier, associateSourceGraphqlApiRequest.sourceApiIdentifier) &&
        Objects.equals(this.description, associateSourceGraphqlApiRequest.description) &&
        Objects.equals(this.sourceApiAssociationConfig, associateSourceGraphqlApiRequest.sourceApiAssociationConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceApiIdentifier, description, sourceApiAssociationConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssociateSourceGraphqlApiRequest {\n");
    sb.append("    sourceApiIdentifier: ").append(toIndentedString(sourceApiIdentifier)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    sourceApiAssociationConfig: ").append(toIndentedString(sourceApiAssociationConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sourceApiIdentifier");
    openapiFields.add("description");
    openapiFields.add("sourceApiAssociationConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sourceApiIdentifier");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssociateSourceGraphqlApiRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssociateSourceGraphqlApiRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssociateSourceGraphqlApiRequest is not found in the empty JSON string", AssociateSourceGraphqlApiRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssociateSourceGraphqlApiRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssociateSourceGraphqlApiRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AssociateSourceGraphqlApiRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("sourceApiIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceApiIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceApiIdentifier").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `sourceApiAssociationConfig`
      if (jsonObj.get("sourceApiAssociationConfig") != null && !jsonObj.get("sourceApiAssociationConfig").isJsonNull()) {
        AssociateMergedGraphqlApiRequestSourceApiAssociationConfig.validateJsonElement(jsonObj.get("sourceApiAssociationConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssociateSourceGraphqlApiRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssociateSourceGraphqlApiRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssociateSourceGraphqlApiRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssociateSourceGraphqlApiRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AssociateSourceGraphqlApiRequest>() {
           @Override
           public void write(JsonWriter out, AssociateSourceGraphqlApiRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssociateSourceGraphqlApiRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssociateSourceGraphqlApiRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssociateSourceGraphqlApiRequest
   * @throws IOException if the JSON string is invalid with respect to AssociateSourceGraphqlApiRequest
   */
  public static AssociateSourceGraphqlApiRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssociateSourceGraphqlApiRequest.class);
  }

  /**
   * Convert an instance of AssociateSourceGraphqlApiRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

