/**
 * Amazon SageMaker Runtime
 *  The Amazon SageMaker runtime API. 
 *
 * The version of the OpenAPI document: 2017-05-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIInvokeEndpointAsyncOutput.h"
#include "OAIInvokeEndpointOutput.h"
#include "OAIInvokeEndpoint_request.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  endpoint_name QString [required]
    * @param[in]  oai_invoke_endpoint_request OAIInvokeEndpoint_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_amzn_sage_maker_custom_attributes QString [optional]
    * @param[in]  x_amzn_sage_maker_target_model QString [optional]
    * @param[in]  x_amzn_sage_maker_target_variant QString [optional]
    * @param[in]  x_amzn_sage_maker_target_container_hostname QString [optional]
    * @param[in]  x_amzn_sage_maker_inference_id QString [optional]
    * @param[in]  x_amzn_sage_maker_enable_explanations QString [optional]
    */
    virtual void invokeEndpoint(const QString &endpoint_name, const OAIInvokeEndpoint_request &oai_invoke_endpoint_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amzn_sage_maker_custom_attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amzn_sage_maker_target_model = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amzn_sage_maker_target_variant = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amzn_sage_maker_target_container_hostname = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amzn_sage_maker_inference_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amzn_sage_maker_enable_explanations = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  endpoint_name QString [required]
    * @param[in]  x_amzn_sage_maker_input_location QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amzn_sage_maker_content_type QString [optional]
    * @param[in]  x_amzn_sage_maker_accept QString [optional]
    * @param[in]  x_amzn_sage_maker_custom_attributes QString [optional]
    * @param[in]  x_amzn_sage_maker_inference_id QString [optional]
    * @param[in]  x_amzn_sage_maker_request_ttl_seconds qint32 [optional]
    * @param[in]  x_amzn_sage_maker_invocation_timeout_seconds qint32 [optional]
    */
    virtual void invokeEndpointAsync(const QString &endpoint_name, const QString &x_amzn_sage_maker_input_location, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amzn_sage_maker_content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amzn_sage_maker_accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amzn_sage_maker_custom_attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amzn_sage_maker_inference_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &x_amzn_sage_maker_request_ttl_seconds = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &x_amzn_sage_maker_invocation_timeout_seconds = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void invokeEndpointCallback(OAIHttpRequestWorker *worker);
    void invokeEndpointAsyncCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void invokeEndpointSignal(OAIInvokeEndpointOutput summary);
    void invokeEndpointAsyncSignal(OAIInvokeEndpointAsyncOutput summary);


    void invokeEndpointSignalFull(OAIHttpRequestWorker *worker, OAIInvokeEndpointOutput summary);
    void invokeEndpointAsyncSignalFull(OAIHttpRequestWorker *worker, OAIInvokeEndpointAsyncOutput summary);

    Q_DECL_DEPRECATED_X("Use invokeEndpointSignalError() instead")
    void invokeEndpointSignalE(OAIInvokeEndpointOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void invokeEndpointSignalError(OAIInvokeEndpointOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invokeEndpointAsyncSignalError() instead")
    void invokeEndpointAsyncSignalE(OAIInvokeEndpointAsyncOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void invokeEndpointAsyncSignalError(OAIInvokeEndpointAsyncOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use invokeEndpointSignalErrorFull() instead")
    void invokeEndpointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void invokeEndpointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invokeEndpointAsyncSignalErrorFull() instead")
    void invokeEndpointAsyncSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void invokeEndpointAsyncSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
