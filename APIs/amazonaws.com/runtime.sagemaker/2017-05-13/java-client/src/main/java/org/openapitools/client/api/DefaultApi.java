/*
 * Amazon SageMaker Runtime
 *  The Amazon SageMaker runtime API. 
 *
 * The version of the OpenAPI document: 2017-05-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.InvokeEndpointAsyncOutput;
import org.openapitools.client.model.InvokeEndpointOutput;
import org.openapitools.client.model.InvokeEndpointRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for invokeEndpoint
     * @param endpointName The name of the endpoint that you specified when you created the endpoint using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/API_CreateEndpoint.html\&quot;&gt;CreateEndpoint&lt;/a&gt; API.  (required)
     * @param invokeEndpointRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param contentType The MIME type of the input data in the request body. (optional)
     * @param accept The desired MIME type of the inference in the response. (optional)
     * @param xAmznSageMakerCustomAttributes &lt;p&gt;Provides additional information about a request for an inference submitted to a model hosted at an Amazon SageMaker endpoint. The information is an opaque value that is forwarded verbatim. You could use this value, for example, to provide an ID that you can use to track a request or to provide other metadata that a service endpoint was programmed to process. The value must consist of no more than 1024 visible US-ASCII characters as specified in &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc7230#section-3.2.6\&quot;&gt;Section 3.3.6. Field Value Components&lt;/a&gt; of the Hypertext Transfer Protocol (HTTP/1.1). &lt;/p&gt; &lt;p&gt;The code in your model is responsible for setting or updating any custom attributes in the response. If your code does not set this value in the response, an empty value is returned. For example, if a custom attribute represents the trace ID, your model can prepend the custom attribute with &lt;code&gt;Trace ID:&lt;/code&gt; in your post-processing function.&lt;/p&gt; &lt;p&gt;This feature is currently supported in the Amazon Web Services SDKs but not in the Amazon SageMaker Python SDK.&lt;/p&gt; (optional)
     * @param xAmznSageMakerTargetModel The model to request for inference when invoking a multi-model endpoint. (optional)
     * @param xAmznSageMakerTargetVariant &lt;p&gt;Specify the production variant to send the inference request to when invoking an endpoint that is running two or more variants. Note that this parameter overrides the default behavior for the endpoint, which is to distribute the invocation traffic based on the variant weights.&lt;/p&gt; &lt;p&gt;For information about how to use variant targeting to perform a/b testing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/model-ab-testing.html\&quot;&gt;Test models in production&lt;/a&gt; &lt;/p&gt; (optional)
     * @param xAmznSageMakerTargetContainerHostname If the endpoint hosts multiple containers and is configured to use direct invocation, this parameter specifies the host name of the container to invoke. (optional)
     * @param xAmznSageMakerInferenceId If you provide a value, it is added to the captured data when you enable data capture on the endpoint. For information about data capture, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-data-capture.html\&quot;&gt;Capture Data&lt;/a&gt;. (optional)
     * @param xAmznSageMakerEnableExplanations An optional JMESPath expression used to override the &lt;code&gt;EnableExplanations&lt;/code&gt; parameter of the &lt;code&gt;ClarifyExplainerConfig&lt;/code&gt; API. See the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-online-explainability-create-endpoint.html#clarify-online-explainability-create-endpoint-enable\&quot;&gt;EnableExplanations&lt;/a&gt; section in the developer guide for more information.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalFailure </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceUnavailable </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ModelError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalDependencyException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ModelNotReadyException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invokeEndpointCall(String endpointName, InvokeEndpointRequest invokeEndpointRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String contentType, String accept, String xAmznSageMakerCustomAttributes, String xAmznSageMakerTargetModel, String xAmznSageMakerTargetVariant, String xAmznSageMakerTargetContainerHostname, String xAmznSageMakerInferenceId, String xAmznSageMakerEnableExplanations, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invokeEndpointRequest;

        // create path and map variables
        String localVarPath = "/endpoints/{EndpointName}/invocations"
            .replace("{" + "EndpointName" + "}", localVarApiClient.escapeString(endpointName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (xAmznSageMakerCustomAttributes != null) {
            localVarHeaderParams.put("X-Amzn-SageMaker-Custom-Attributes", localVarApiClient.parameterToString(xAmznSageMakerCustomAttributes));
        }

        if (xAmznSageMakerTargetModel != null) {
            localVarHeaderParams.put("X-Amzn-SageMaker-Target-Model", localVarApiClient.parameterToString(xAmznSageMakerTargetModel));
        }

        if (xAmznSageMakerTargetVariant != null) {
            localVarHeaderParams.put("X-Amzn-SageMaker-Target-Variant", localVarApiClient.parameterToString(xAmznSageMakerTargetVariant));
        }

        if (xAmznSageMakerTargetContainerHostname != null) {
            localVarHeaderParams.put("X-Amzn-SageMaker-Target-Container-Hostname", localVarApiClient.parameterToString(xAmznSageMakerTargetContainerHostname));
        }

        if (xAmznSageMakerInferenceId != null) {
            localVarHeaderParams.put("X-Amzn-SageMaker-Inference-Id", localVarApiClient.parameterToString(xAmznSageMakerInferenceId));
        }

        if (xAmznSageMakerEnableExplanations != null) {
            localVarHeaderParams.put("X-Amzn-SageMaker-Enable-Explanations", localVarApiClient.parameterToString(xAmznSageMakerEnableExplanations));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invokeEndpointValidateBeforeCall(String endpointName, InvokeEndpointRequest invokeEndpointRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String contentType, String accept, String xAmznSageMakerCustomAttributes, String xAmznSageMakerTargetModel, String xAmznSageMakerTargetVariant, String xAmznSageMakerTargetContainerHostname, String xAmznSageMakerInferenceId, String xAmznSageMakerEnableExplanations, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'endpointName' is set
        if (endpointName == null) {
            throw new ApiException("Missing the required parameter 'endpointName' when calling invokeEndpoint(Async)");
        }

        // verify the required parameter 'invokeEndpointRequest' is set
        if (invokeEndpointRequest == null) {
            throw new ApiException("Missing the required parameter 'invokeEndpointRequest' when calling invokeEndpoint(Async)");
        }

        return invokeEndpointCall(endpointName, invokeEndpointRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, contentType, accept, xAmznSageMakerCustomAttributes, xAmznSageMakerTargetModel, xAmznSageMakerTargetVariant, xAmznSageMakerTargetContainerHostname, xAmznSageMakerInferenceId, xAmznSageMakerEnableExplanations, _callback);

    }

    /**
     * 
     * &lt;p&gt;After you deploy a model into production using Amazon SageMaker hosting services, your client applications use this API to get inferences from the model hosted at the specified endpoint. &lt;/p&gt; &lt;p&gt;For an overview of Amazon SageMaker, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works.html\&quot;&gt;How It Works&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;Amazon SageMaker strips all POST headers except those supported by the API. Amazon SageMaker might add additional headers. You should not rely on the behavior of headers outside those enumerated in the request syntax. &lt;/p&gt; &lt;p&gt;Calls to &lt;code&gt;InvokeEndpoint&lt;/code&gt; are authenticated by using Amazon Web Services Signature Version 4. For information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html\&quot;&gt;Authenticating Requests (Amazon Web Services Signature Version 4)&lt;/a&gt; in the &lt;i&gt;Amazon S3 API Reference&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;A customer&#39;s model containers must respond to requests within 60 seconds. The model itself can have a maximum processing time of 60 seconds before responding to invocations. If your model is going to take 50-60 seconds of processing time, the SDK socket timeout should be set to be 70 seconds.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Endpoints are scoped to an individual account, and are not public. The URL does not contain the account ID, but Amazon SageMaker determines the account ID from the authentication token that is supplied by the caller.&lt;/p&gt; &lt;/note&gt;
     * @param endpointName The name of the endpoint that you specified when you created the endpoint using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/API_CreateEndpoint.html\&quot;&gt;CreateEndpoint&lt;/a&gt; API.  (required)
     * @param invokeEndpointRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param contentType The MIME type of the input data in the request body. (optional)
     * @param accept The desired MIME type of the inference in the response. (optional)
     * @param xAmznSageMakerCustomAttributes &lt;p&gt;Provides additional information about a request for an inference submitted to a model hosted at an Amazon SageMaker endpoint. The information is an opaque value that is forwarded verbatim. You could use this value, for example, to provide an ID that you can use to track a request or to provide other metadata that a service endpoint was programmed to process. The value must consist of no more than 1024 visible US-ASCII characters as specified in &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc7230#section-3.2.6\&quot;&gt;Section 3.3.6. Field Value Components&lt;/a&gt; of the Hypertext Transfer Protocol (HTTP/1.1). &lt;/p&gt; &lt;p&gt;The code in your model is responsible for setting or updating any custom attributes in the response. If your code does not set this value in the response, an empty value is returned. For example, if a custom attribute represents the trace ID, your model can prepend the custom attribute with &lt;code&gt;Trace ID:&lt;/code&gt; in your post-processing function.&lt;/p&gt; &lt;p&gt;This feature is currently supported in the Amazon Web Services SDKs but not in the Amazon SageMaker Python SDK.&lt;/p&gt; (optional)
     * @param xAmznSageMakerTargetModel The model to request for inference when invoking a multi-model endpoint. (optional)
     * @param xAmznSageMakerTargetVariant &lt;p&gt;Specify the production variant to send the inference request to when invoking an endpoint that is running two or more variants. Note that this parameter overrides the default behavior for the endpoint, which is to distribute the invocation traffic based on the variant weights.&lt;/p&gt; &lt;p&gt;For information about how to use variant targeting to perform a/b testing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/model-ab-testing.html\&quot;&gt;Test models in production&lt;/a&gt; &lt;/p&gt; (optional)
     * @param xAmznSageMakerTargetContainerHostname If the endpoint hosts multiple containers and is configured to use direct invocation, this parameter specifies the host name of the container to invoke. (optional)
     * @param xAmznSageMakerInferenceId If you provide a value, it is added to the captured data when you enable data capture on the endpoint. For information about data capture, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-data-capture.html\&quot;&gt;Capture Data&lt;/a&gt;. (optional)
     * @param xAmznSageMakerEnableExplanations An optional JMESPath expression used to override the &lt;code&gt;EnableExplanations&lt;/code&gt; parameter of the &lt;code&gt;ClarifyExplainerConfig&lt;/code&gt; API. See the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-online-explainability-create-endpoint.html#clarify-online-explainability-create-endpoint-enable\&quot;&gt;EnableExplanations&lt;/a&gt; section in the developer guide for more information.  (optional)
     * @return InvokeEndpointOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalFailure </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceUnavailable </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ModelError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalDependencyException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ModelNotReadyException </td><td>  -  </td></tr>
     </table>
     */
    public InvokeEndpointOutput invokeEndpoint(String endpointName, InvokeEndpointRequest invokeEndpointRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String contentType, String accept, String xAmznSageMakerCustomAttributes, String xAmznSageMakerTargetModel, String xAmznSageMakerTargetVariant, String xAmznSageMakerTargetContainerHostname, String xAmznSageMakerInferenceId, String xAmznSageMakerEnableExplanations) throws ApiException {
        ApiResponse<InvokeEndpointOutput> localVarResp = invokeEndpointWithHttpInfo(endpointName, invokeEndpointRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, contentType, accept, xAmznSageMakerCustomAttributes, xAmznSageMakerTargetModel, xAmznSageMakerTargetVariant, xAmznSageMakerTargetContainerHostname, xAmznSageMakerInferenceId, xAmznSageMakerEnableExplanations);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;After you deploy a model into production using Amazon SageMaker hosting services, your client applications use this API to get inferences from the model hosted at the specified endpoint. &lt;/p&gt; &lt;p&gt;For an overview of Amazon SageMaker, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works.html\&quot;&gt;How It Works&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;Amazon SageMaker strips all POST headers except those supported by the API. Amazon SageMaker might add additional headers. You should not rely on the behavior of headers outside those enumerated in the request syntax. &lt;/p&gt; &lt;p&gt;Calls to &lt;code&gt;InvokeEndpoint&lt;/code&gt; are authenticated by using Amazon Web Services Signature Version 4. For information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html\&quot;&gt;Authenticating Requests (Amazon Web Services Signature Version 4)&lt;/a&gt; in the &lt;i&gt;Amazon S3 API Reference&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;A customer&#39;s model containers must respond to requests within 60 seconds. The model itself can have a maximum processing time of 60 seconds before responding to invocations. If your model is going to take 50-60 seconds of processing time, the SDK socket timeout should be set to be 70 seconds.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Endpoints are scoped to an individual account, and are not public. The URL does not contain the account ID, but Amazon SageMaker determines the account ID from the authentication token that is supplied by the caller.&lt;/p&gt; &lt;/note&gt;
     * @param endpointName The name of the endpoint that you specified when you created the endpoint using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/API_CreateEndpoint.html\&quot;&gt;CreateEndpoint&lt;/a&gt; API.  (required)
     * @param invokeEndpointRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param contentType The MIME type of the input data in the request body. (optional)
     * @param accept The desired MIME type of the inference in the response. (optional)
     * @param xAmznSageMakerCustomAttributes &lt;p&gt;Provides additional information about a request for an inference submitted to a model hosted at an Amazon SageMaker endpoint. The information is an opaque value that is forwarded verbatim. You could use this value, for example, to provide an ID that you can use to track a request or to provide other metadata that a service endpoint was programmed to process. The value must consist of no more than 1024 visible US-ASCII characters as specified in &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc7230#section-3.2.6\&quot;&gt;Section 3.3.6. Field Value Components&lt;/a&gt; of the Hypertext Transfer Protocol (HTTP/1.1). &lt;/p&gt; &lt;p&gt;The code in your model is responsible for setting or updating any custom attributes in the response. If your code does not set this value in the response, an empty value is returned. For example, if a custom attribute represents the trace ID, your model can prepend the custom attribute with &lt;code&gt;Trace ID:&lt;/code&gt; in your post-processing function.&lt;/p&gt; &lt;p&gt;This feature is currently supported in the Amazon Web Services SDKs but not in the Amazon SageMaker Python SDK.&lt;/p&gt; (optional)
     * @param xAmznSageMakerTargetModel The model to request for inference when invoking a multi-model endpoint. (optional)
     * @param xAmznSageMakerTargetVariant &lt;p&gt;Specify the production variant to send the inference request to when invoking an endpoint that is running two or more variants. Note that this parameter overrides the default behavior for the endpoint, which is to distribute the invocation traffic based on the variant weights.&lt;/p&gt; &lt;p&gt;For information about how to use variant targeting to perform a/b testing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/model-ab-testing.html\&quot;&gt;Test models in production&lt;/a&gt; &lt;/p&gt; (optional)
     * @param xAmznSageMakerTargetContainerHostname If the endpoint hosts multiple containers and is configured to use direct invocation, this parameter specifies the host name of the container to invoke. (optional)
     * @param xAmznSageMakerInferenceId If you provide a value, it is added to the captured data when you enable data capture on the endpoint. For information about data capture, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-data-capture.html\&quot;&gt;Capture Data&lt;/a&gt;. (optional)
     * @param xAmznSageMakerEnableExplanations An optional JMESPath expression used to override the &lt;code&gt;EnableExplanations&lt;/code&gt; parameter of the &lt;code&gt;ClarifyExplainerConfig&lt;/code&gt; API. See the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-online-explainability-create-endpoint.html#clarify-online-explainability-create-endpoint-enable\&quot;&gt;EnableExplanations&lt;/a&gt; section in the developer guide for more information.  (optional)
     * @return ApiResponse&lt;InvokeEndpointOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalFailure </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceUnavailable </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ModelError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalDependencyException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ModelNotReadyException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvokeEndpointOutput> invokeEndpointWithHttpInfo(String endpointName, InvokeEndpointRequest invokeEndpointRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String contentType, String accept, String xAmznSageMakerCustomAttributes, String xAmznSageMakerTargetModel, String xAmznSageMakerTargetVariant, String xAmznSageMakerTargetContainerHostname, String xAmznSageMakerInferenceId, String xAmznSageMakerEnableExplanations) throws ApiException {
        okhttp3.Call localVarCall = invokeEndpointValidateBeforeCall(endpointName, invokeEndpointRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, contentType, accept, xAmznSageMakerCustomAttributes, xAmznSageMakerTargetModel, xAmznSageMakerTargetVariant, xAmznSageMakerTargetContainerHostname, xAmznSageMakerInferenceId, xAmznSageMakerEnableExplanations, null);
        Type localVarReturnType = new TypeToken<InvokeEndpointOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;After you deploy a model into production using Amazon SageMaker hosting services, your client applications use this API to get inferences from the model hosted at the specified endpoint. &lt;/p&gt; &lt;p&gt;For an overview of Amazon SageMaker, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works.html\&quot;&gt;How It Works&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;Amazon SageMaker strips all POST headers except those supported by the API. Amazon SageMaker might add additional headers. You should not rely on the behavior of headers outside those enumerated in the request syntax. &lt;/p&gt; &lt;p&gt;Calls to &lt;code&gt;InvokeEndpoint&lt;/code&gt; are authenticated by using Amazon Web Services Signature Version 4. For information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html\&quot;&gt;Authenticating Requests (Amazon Web Services Signature Version 4)&lt;/a&gt; in the &lt;i&gt;Amazon S3 API Reference&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;A customer&#39;s model containers must respond to requests within 60 seconds. The model itself can have a maximum processing time of 60 seconds before responding to invocations. If your model is going to take 50-60 seconds of processing time, the SDK socket timeout should be set to be 70 seconds.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Endpoints are scoped to an individual account, and are not public. The URL does not contain the account ID, but Amazon SageMaker determines the account ID from the authentication token that is supplied by the caller.&lt;/p&gt; &lt;/note&gt;
     * @param endpointName The name of the endpoint that you specified when you created the endpoint using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/API_CreateEndpoint.html\&quot;&gt;CreateEndpoint&lt;/a&gt; API.  (required)
     * @param invokeEndpointRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param contentType The MIME type of the input data in the request body. (optional)
     * @param accept The desired MIME type of the inference in the response. (optional)
     * @param xAmznSageMakerCustomAttributes &lt;p&gt;Provides additional information about a request for an inference submitted to a model hosted at an Amazon SageMaker endpoint. The information is an opaque value that is forwarded verbatim. You could use this value, for example, to provide an ID that you can use to track a request or to provide other metadata that a service endpoint was programmed to process. The value must consist of no more than 1024 visible US-ASCII characters as specified in &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc7230#section-3.2.6\&quot;&gt;Section 3.3.6. Field Value Components&lt;/a&gt; of the Hypertext Transfer Protocol (HTTP/1.1). &lt;/p&gt; &lt;p&gt;The code in your model is responsible for setting or updating any custom attributes in the response. If your code does not set this value in the response, an empty value is returned. For example, if a custom attribute represents the trace ID, your model can prepend the custom attribute with &lt;code&gt;Trace ID:&lt;/code&gt; in your post-processing function.&lt;/p&gt; &lt;p&gt;This feature is currently supported in the Amazon Web Services SDKs but not in the Amazon SageMaker Python SDK.&lt;/p&gt; (optional)
     * @param xAmznSageMakerTargetModel The model to request for inference when invoking a multi-model endpoint. (optional)
     * @param xAmznSageMakerTargetVariant &lt;p&gt;Specify the production variant to send the inference request to when invoking an endpoint that is running two or more variants. Note that this parameter overrides the default behavior for the endpoint, which is to distribute the invocation traffic based on the variant weights.&lt;/p&gt; &lt;p&gt;For information about how to use variant targeting to perform a/b testing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/model-ab-testing.html\&quot;&gt;Test models in production&lt;/a&gt; &lt;/p&gt; (optional)
     * @param xAmznSageMakerTargetContainerHostname If the endpoint hosts multiple containers and is configured to use direct invocation, this parameter specifies the host name of the container to invoke. (optional)
     * @param xAmznSageMakerInferenceId If you provide a value, it is added to the captured data when you enable data capture on the endpoint. For information about data capture, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-data-capture.html\&quot;&gt;Capture Data&lt;/a&gt;. (optional)
     * @param xAmznSageMakerEnableExplanations An optional JMESPath expression used to override the &lt;code&gt;EnableExplanations&lt;/code&gt; parameter of the &lt;code&gt;ClarifyExplainerConfig&lt;/code&gt; API. See the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-online-explainability-create-endpoint.html#clarify-online-explainability-create-endpoint-enable\&quot;&gt;EnableExplanations&lt;/a&gt; section in the developer guide for more information.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalFailure </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceUnavailable </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ModelError </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalDependencyException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ModelNotReadyException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invokeEndpointAsync(String endpointName, InvokeEndpointRequest invokeEndpointRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String contentType, String accept, String xAmznSageMakerCustomAttributes, String xAmznSageMakerTargetModel, String xAmznSageMakerTargetVariant, String xAmznSageMakerTargetContainerHostname, String xAmznSageMakerInferenceId, String xAmznSageMakerEnableExplanations, final ApiCallback<InvokeEndpointOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = invokeEndpointValidateBeforeCall(endpointName, invokeEndpointRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, contentType, accept, xAmznSageMakerCustomAttributes, xAmznSageMakerTargetModel, xAmznSageMakerTargetVariant, xAmznSageMakerTargetContainerHostname, xAmznSageMakerInferenceId, xAmznSageMakerEnableExplanations, _callback);
        Type localVarReturnType = new TypeToken<InvokeEndpointOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invokeEndpointAsync
     * @param endpointName The name of the endpoint that you specified when you created the endpoint using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html\&quot;&gt; &lt;code&gt;CreateEndpoint&lt;/code&gt; &lt;/a&gt; API. (required)
     * @param xAmznSageMakerInputLocation The Amazon S3 URI where the inference request payload is stored. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznSageMakerContentType The MIME type of the input data in the request body. (optional)
     * @param xAmznSageMakerAccept The desired MIME type of the inference in the response. (optional)
     * @param xAmznSageMakerCustomAttributes &lt;p&gt;Provides additional information about a request for an inference submitted to a model hosted at an Amazon SageMaker endpoint. The information is an opaque value that is forwarded verbatim. You could use this value, for example, to provide an ID that you can use to track a request or to provide other metadata that a service endpoint was programmed to process. The value must consist of no more than 1024 visible US-ASCII characters as specified in &lt;a href&#x3D;\&quot;https://datatracker.ietf.org/doc/html/rfc7230#section-3.2.6\&quot;&gt;Section 3.3.6. Field Value Components&lt;/a&gt; of the Hypertext Transfer Protocol (HTTP/1.1). &lt;/p&gt; &lt;p&gt;The code in your model is responsible for setting or updating any custom attributes in the response. If your code does not set this value in the response, an empty value is returned. For example, if a custom attribute represents the trace ID, your model can prepend the custom attribute with &lt;code&gt;Trace ID&lt;/code&gt;: in your post-processing function. &lt;/p&gt; &lt;p&gt;This feature is currently supported in the Amazon Web Services SDKs but not in the Amazon SageMaker Python SDK. &lt;/p&gt; (optional)
     * @param xAmznSageMakerInferenceId The identifier for the inference request. Amazon SageMaker will generate an identifier for you if none is specified.  (optional)
     * @param xAmznSageMakerRequestTTLSeconds Maximum age in seconds a request can be in the queue before it is marked as expired. The default is 6 hours, or 21,600 seconds. (optional)
     * @param xAmznSageMakerInvocationTimeoutSeconds Maximum amount of time in seconds a request can be processed before it is marked as expired. The default is 15 minutes, or 900 seconds. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalFailure </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceUnavailable </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invokeEndpointAsyncCall(String endpointName, String xAmznSageMakerInputLocation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznSageMakerContentType, String xAmznSageMakerAccept, String xAmznSageMakerCustomAttributes, String xAmznSageMakerInferenceId, Integer xAmznSageMakerRequestTTLSeconds, Integer xAmznSageMakerInvocationTimeoutSeconds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/endpoints/{EndpointName}/async-invocations#X-Amzn-SageMaker-InputLocation"
            .replace("{" + "EndpointName" + "}", localVarApiClient.escapeString(endpointName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmznSageMakerContentType != null) {
            localVarHeaderParams.put("X-Amzn-SageMaker-Content-Type", localVarApiClient.parameterToString(xAmznSageMakerContentType));
        }

        if (xAmznSageMakerAccept != null) {
            localVarHeaderParams.put("X-Amzn-SageMaker-Accept", localVarApiClient.parameterToString(xAmznSageMakerAccept));
        }

        if (xAmznSageMakerCustomAttributes != null) {
            localVarHeaderParams.put("X-Amzn-SageMaker-Custom-Attributes", localVarApiClient.parameterToString(xAmznSageMakerCustomAttributes));
        }

        if (xAmznSageMakerInferenceId != null) {
            localVarHeaderParams.put("X-Amzn-SageMaker-Inference-Id", localVarApiClient.parameterToString(xAmznSageMakerInferenceId));
        }

        if (xAmznSageMakerInputLocation != null) {
            localVarHeaderParams.put("X-Amzn-SageMaker-InputLocation", localVarApiClient.parameterToString(xAmznSageMakerInputLocation));
        }

        if (xAmznSageMakerRequestTTLSeconds != null) {
            localVarHeaderParams.put("X-Amzn-SageMaker-RequestTTLSeconds", localVarApiClient.parameterToString(xAmznSageMakerRequestTTLSeconds));
        }

        if (xAmznSageMakerInvocationTimeoutSeconds != null) {
            localVarHeaderParams.put("X-Amzn-SageMaker-InvocationTimeoutSeconds", localVarApiClient.parameterToString(xAmznSageMakerInvocationTimeoutSeconds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invokeEndpointAsyncValidateBeforeCall(String endpointName, String xAmznSageMakerInputLocation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznSageMakerContentType, String xAmznSageMakerAccept, String xAmznSageMakerCustomAttributes, String xAmznSageMakerInferenceId, Integer xAmznSageMakerRequestTTLSeconds, Integer xAmznSageMakerInvocationTimeoutSeconds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'endpointName' is set
        if (endpointName == null) {
            throw new ApiException("Missing the required parameter 'endpointName' when calling invokeEndpointAsync(Async)");
        }

        // verify the required parameter 'xAmznSageMakerInputLocation' is set
        if (xAmznSageMakerInputLocation == null) {
            throw new ApiException("Missing the required parameter 'xAmznSageMakerInputLocation' when calling invokeEndpointAsync(Async)");
        }

        return invokeEndpointAsyncCall(endpointName, xAmznSageMakerInputLocation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznSageMakerContentType, xAmznSageMakerAccept, xAmznSageMakerCustomAttributes, xAmznSageMakerInferenceId, xAmznSageMakerRequestTTLSeconds, xAmznSageMakerInvocationTimeoutSeconds, _callback);

    }

    /**
     * 
     * &lt;p&gt;After you deploy a model into production using Amazon SageMaker hosting services, your client applications use this API to get inferences from the model hosted at the specified endpoint in an asynchronous manner.&lt;/p&gt; &lt;p&gt;Inference requests sent to this API are enqueued for asynchronous processing. The processing of the inference request may or may not complete before you receive a response from this API. The response from this API will not contain the result of the inference request but contain information about where you can locate it.&lt;/p&gt; &lt;p&gt;Amazon SageMaker strips all &lt;code&gt;POST&lt;/code&gt; headers except those supported by the API. Amazon SageMaker might add additional headers. You should not rely on the behavior of headers outside those enumerated in the request syntax.&lt;/p&gt; &lt;p&gt;Calls to &lt;code&gt;InvokeEndpointAsync&lt;/code&gt; are authenticated by using Amazon Web Services Signature Version 4. For information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html\&quot;&gt;Authenticating Requests (Amazon Web Services Signature Version 4)&lt;/a&gt; in the &lt;i&gt;Amazon S3 API Reference&lt;/i&gt;.&lt;/p&gt;
     * @param endpointName The name of the endpoint that you specified when you created the endpoint using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html\&quot;&gt; &lt;code&gt;CreateEndpoint&lt;/code&gt; &lt;/a&gt; API. (required)
     * @param xAmznSageMakerInputLocation The Amazon S3 URI where the inference request payload is stored. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznSageMakerContentType The MIME type of the input data in the request body. (optional)
     * @param xAmznSageMakerAccept The desired MIME type of the inference in the response. (optional)
     * @param xAmznSageMakerCustomAttributes &lt;p&gt;Provides additional information about a request for an inference submitted to a model hosted at an Amazon SageMaker endpoint. The information is an opaque value that is forwarded verbatim. You could use this value, for example, to provide an ID that you can use to track a request or to provide other metadata that a service endpoint was programmed to process. The value must consist of no more than 1024 visible US-ASCII characters as specified in &lt;a href&#x3D;\&quot;https://datatracker.ietf.org/doc/html/rfc7230#section-3.2.6\&quot;&gt;Section 3.3.6. Field Value Components&lt;/a&gt; of the Hypertext Transfer Protocol (HTTP/1.1). &lt;/p&gt; &lt;p&gt;The code in your model is responsible for setting or updating any custom attributes in the response. If your code does not set this value in the response, an empty value is returned. For example, if a custom attribute represents the trace ID, your model can prepend the custom attribute with &lt;code&gt;Trace ID&lt;/code&gt;: in your post-processing function. &lt;/p&gt; &lt;p&gt;This feature is currently supported in the Amazon Web Services SDKs but not in the Amazon SageMaker Python SDK. &lt;/p&gt; (optional)
     * @param xAmznSageMakerInferenceId The identifier for the inference request. Amazon SageMaker will generate an identifier for you if none is specified.  (optional)
     * @param xAmznSageMakerRequestTTLSeconds Maximum age in seconds a request can be in the queue before it is marked as expired. The default is 6 hours, or 21,600 seconds. (optional)
     * @param xAmznSageMakerInvocationTimeoutSeconds Maximum amount of time in seconds a request can be processed before it is marked as expired. The default is 15 minutes, or 900 seconds. (optional)
     * @return InvokeEndpointAsyncOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalFailure </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceUnavailable </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationError </td><td>  -  </td></tr>
     </table>
     */
    public InvokeEndpointAsyncOutput invokeEndpointAsync(String endpointName, String xAmznSageMakerInputLocation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznSageMakerContentType, String xAmznSageMakerAccept, String xAmznSageMakerCustomAttributes, String xAmznSageMakerInferenceId, Integer xAmznSageMakerRequestTTLSeconds, Integer xAmznSageMakerInvocationTimeoutSeconds) throws ApiException {
        ApiResponse<InvokeEndpointAsyncOutput> localVarResp = invokeEndpointAsyncWithHttpInfo(endpointName, xAmznSageMakerInputLocation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznSageMakerContentType, xAmznSageMakerAccept, xAmznSageMakerCustomAttributes, xAmznSageMakerInferenceId, xAmznSageMakerRequestTTLSeconds, xAmznSageMakerInvocationTimeoutSeconds);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;After you deploy a model into production using Amazon SageMaker hosting services, your client applications use this API to get inferences from the model hosted at the specified endpoint in an asynchronous manner.&lt;/p&gt; &lt;p&gt;Inference requests sent to this API are enqueued for asynchronous processing. The processing of the inference request may or may not complete before you receive a response from this API. The response from this API will not contain the result of the inference request but contain information about where you can locate it.&lt;/p&gt; &lt;p&gt;Amazon SageMaker strips all &lt;code&gt;POST&lt;/code&gt; headers except those supported by the API. Amazon SageMaker might add additional headers. You should not rely on the behavior of headers outside those enumerated in the request syntax.&lt;/p&gt; &lt;p&gt;Calls to &lt;code&gt;InvokeEndpointAsync&lt;/code&gt; are authenticated by using Amazon Web Services Signature Version 4. For information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html\&quot;&gt;Authenticating Requests (Amazon Web Services Signature Version 4)&lt;/a&gt; in the &lt;i&gt;Amazon S3 API Reference&lt;/i&gt;.&lt;/p&gt;
     * @param endpointName The name of the endpoint that you specified when you created the endpoint using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html\&quot;&gt; &lt;code&gt;CreateEndpoint&lt;/code&gt; &lt;/a&gt; API. (required)
     * @param xAmznSageMakerInputLocation The Amazon S3 URI where the inference request payload is stored. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznSageMakerContentType The MIME type of the input data in the request body. (optional)
     * @param xAmznSageMakerAccept The desired MIME type of the inference in the response. (optional)
     * @param xAmznSageMakerCustomAttributes &lt;p&gt;Provides additional information about a request for an inference submitted to a model hosted at an Amazon SageMaker endpoint. The information is an opaque value that is forwarded verbatim. You could use this value, for example, to provide an ID that you can use to track a request or to provide other metadata that a service endpoint was programmed to process. The value must consist of no more than 1024 visible US-ASCII characters as specified in &lt;a href&#x3D;\&quot;https://datatracker.ietf.org/doc/html/rfc7230#section-3.2.6\&quot;&gt;Section 3.3.6. Field Value Components&lt;/a&gt; of the Hypertext Transfer Protocol (HTTP/1.1). &lt;/p&gt; &lt;p&gt;The code in your model is responsible for setting or updating any custom attributes in the response. If your code does not set this value in the response, an empty value is returned. For example, if a custom attribute represents the trace ID, your model can prepend the custom attribute with &lt;code&gt;Trace ID&lt;/code&gt;: in your post-processing function. &lt;/p&gt; &lt;p&gt;This feature is currently supported in the Amazon Web Services SDKs but not in the Amazon SageMaker Python SDK. &lt;/p&gt; (optional)
     * @param xAmznSageMakerInferenceId The identifier for the inference request. Amazon SageMaker will generate an identifier for you if none is specified.  (optional)
     * @param xAmznSageMakerRequestTTLSeconds Maximum age in seconds a request can be in the queue before it is marked as expired. The default is 6 hours, or 21,600 seconds. (optional)
     * @param xAmznSageMakerInvocationTimeoutSeconds Maximum amount of time in seconds a request can be processed before it is marked as expired. The default is 15 minutes, or 900 seconds. (optional)
     * @return ApiResponse&lt;InvokeEndpointAsyncOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalFailure </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceUnavailable </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationError </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvokeEndpointAsyncOutput> invokeEndpointAsyncWithHttpInfo(String endpointName, String xAmznSageMakerInputLocation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznSageMakerContentType, String xAmznSageMakerAccept, String xAmznSageMakerCustomAttributes, String xAmznSageMakerInferenceId, Integer xAmznSageMakerRequestTTLSeconds, Integer xAmznSageMakerInvocationTimeoutSeconds) throws ApiException {
        okhttp3.Call localVarCall = invokeEndpointAsyncValidateBeforeCall(endpointName, xAmznSageMakerInputLocation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznSageMakerContentType, xAmznSageMakerAccept, xAmznSageMakerCustomAttributes, xAmznSageMakerInferenceId, xAmznSageMakerRequestTTLSeconds, xAmznSageMakerInvocationTimeoutSeconds, null);
        Type localVarReturnType = new TypeToken<InvokeEndpointAsyncOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;After you deploy a model into production using Amazon SageMaker hosting services, your client applications use this API to get inferences from the model hosted at the specified endpoint in an asynchronous manner.&lt;/p&gt; &lt;p&gt;Inference requests sent to this API are enqueued for asynchronous processing. The processing of the inference request may or may not complete before you receive a response from this API. The response from this API will not contain the result of the inference request but contain information about where you can locate it.&lt;/p&gt; &lt;p&gt;Amazon SageMaker strips all &lt;code&gt;POST&lt;/code&gt; headers except those supported by the API. Amazon SageMaker might add additional headers. You should not rely on the behavior of headers outside those enumerated in the request syntax.&lt;/p&gt; &lt;p&gt;Calls to &lt;code&gt;InvokeEndpointAsync&lt;/code&gt; are authenticated by using Amazon Web Services Signature Version 4. For information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html\&quot;&gt;Authenticating Requests (Amazon Web Services Signature Version 4)&lt;/a&gt; in the &lt;i&gt;Amazon S3 API Reference&lt;/i&gt;.&lt;/p&gt;
     * @param endpointName The name of the endpoint that you specified when you created the endpoint using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html\&quot;&gt; &lt;code&gt;CreateEndpoint&lt;/code&gt; &lt;/a&gt; API. (required)
     * @param xAmznSageMakerInputLocation The Amazon S3 URI where the inference request payload is stored. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznSageMakerContentType The MIME type of the input data in the request body. (optional)
     * @param xAmznSageMakerAccept The desired MIME type of the inference in the response. (optional)
     * @param xAmznSageMakerCustomAttributes &lt;p&gt;Provides additional information about a request for an inference submitted to a model hosted at an Amazon SageMaker endpoint. The information is an opaque value that is forwarded verbatim. You could use this value, for example, to provide an ID that you can use to track a request or to provide other metadata that a service endpoint was programmed to process. The value must consist of no more than 1024 visible US-ASCII characters as specified in &lt;a href&#x3D;\&quot;https://datatracker.ietf.org/doc/html/rfc7230#section-3.2.6\&quot;&gt;Section 3.3.6. Field Value Components&lt;/a&gt; of the Hypertext Transfer Protocol (HTTP/1.1). &lt;/p&gt; &lt;p&gt;The code in your model is responsible for setting or updating any custom attributes in the response. If your code does not set this value in the response, an empty value is returned. For example, if a custom attribute represents the trace ID, your model can prepend the custom attribute with &lt;code&gt;Trace ID&lt;/code&gt;: in your post-processing function. &lt;/p&gt; &lt;p&gt;This feature is currently supported in the Amazon Web Services SDKs but not in the Amazon SageMaker Python SDK. &lt;/p&gt; (optional)
     * @param xAmznSageMakerInferenceId The identifier for the inference request. Amazon SageMaker will generate an identifier for you if none is specified.  (optional)
     * @param xAmznSageMakerRequestTTLSeconds Maximum age in seconds a request can be in the queue before it is marked as expired. The default is 6 hours, or 21,600 seconds. (optional)
     * @param xAmznSageMakerInvocationTimeoutSeconds Maximum amount of time in seconds a request can be processed before it is marked as expired. The default is 15 minutes, or 900 seconds. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalFailure </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceUnavailable </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationError </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invokeEndpointAsyncAsync(String endpointName, String xAmznSageMakerInputLocation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznSageMakerContentType, String xAmznSageMakerAccept, String xAmznSageMakerCustomAttributes, String xAmznSageMakerInferenceId, Integer xAmznSageMakerRequestTTLSeconds, Integer xAmznSageMakerInvocationTimeoutSeconds, final ApiCallback<InvokeEndpointAsyncOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = invokeEndpointAsyncValidateBeforeCall(endpointName, xAmznSageMakerInputLocation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznSageMakerContentType, xAmznSageMakerAccept, xAmznSageMakerCustomAttributes, xAmznSageMakerInferenceId, xAmznSageMakerRequestTTLSeconds, xAmznSageMakerInvocationTimeoutSeconds, _callback);
        Type localVarReturnType = new TypeToken<InvokeEndpointAsyncOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
