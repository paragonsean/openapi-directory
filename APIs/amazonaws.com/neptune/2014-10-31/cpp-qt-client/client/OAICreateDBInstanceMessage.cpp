/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDBInstanceMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDBInstanceMessage::OAICreateDBInstanceMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDBInstanceMessage::OAICreateDBInstanceMessage() {
    this->initializeModel();
}

OAICreateDBInstanceMessage::~OAICreateDBInstanceMessage() {}

void OAICreateDBInstanceMessage::initializeModel() {

    m_db_name_isSet = false;
    m_db_name_isValid = false;

    m_db_instance_identifier_isSet = false;
    m_db_instance_identifier_isValid = false;

    m_allocated_storage_isSet = false;
    m_allocated_storage_isValid = false;

    m_db_instance_class_isSet = false;
    m_db_instance_class_isValid = false;

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_master_username_isSet = false;
    m_master_username_isValid = false;

    m_master_user_password_isSet = false;
    m_master_user_password_isValid = false;

    m_db_security_groups_isSet = false;
    m_db_security_groups_isValid = false;

    m_vpc_security_group_ids_isSet = false;
    m_vpc_security_group_ids_isValid = false;

    m_availability_zone_isSet = false;
    m_availability_zone_isValid = false;

    m_db_subnet_group_name_isSet = false;
    m_db_subnet_group_name_isValid = false;

    m_preferred_maintenance_window_isSet = false;
    m_preferred_maintenance_window_isValid = false;

    m_db_parameter_group_name_isSet = false;
    m_db_parameter_group_name_isValid = false;

    m_backup_retention_period_isSet = false;
    m_backup_retention_period_isValid = false;

    m_preferred_backup_window_isSet = false;
    m_preferred_backup_window_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_multi_az_isSet = false;
    m_multi_az_isValid = false;

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_auto_minor_version_upgrade_isSet = false;
    m_auto_minor_version_upgrade_isValid = false;

    m_license_model_isSet = false;
    m_license_model_isValid = false;

    m_iops_isSet = false;
    m_iops_isValid = false;

    m_option_group_name_isSet = false;
    m_option_group_name_isValid = false;

    m_character_set_name_isSet = false;
    m_character_set_name_isValid = false;

    m_publicly_accessible_isSet = false;
    m_publicly_accessible_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_db_cluster_identifier_isSet = false;
    m_db_cluster_identifier_isValid = false;

    m_storage_type_isSet = false;
    m_storage_type_isValid = false;

    m_tde_credential_arn_isSet = false;
    m_tde_credential_arn_isValid = false;

    m_tde_credential_password_isSet = false;
    m_tde_credential_password_isValid = false;

    m_storage_encrypted_isSet = false;
    m_storage_encrypted_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_copy_tags_to_snapshot_isSet = false;
    m_copy_tags_to_snapshot_isValid = false;

    m_monitoring_interval_isSet = false;
    m_monitoring_interval_isValid = false;

    m_monitoring_role_arn_isSet = false;
    m_monitoring_role_arn_isValid = false;

    m_domain_iam_role_name_isSet = false;
    m_domain_iam_role_name_isValid = false;

    m_promotion_tier_isSet = false;
    m_promotion_tier_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_enable_iam_database_authentication_isSet = false;
    m_enable_iam_database_authentication_isValid = false;

    m_enable_performance_insights_isSet = false;
    m_enable_performance_insights_isValid = false;

    m_performance_insights_kms_key_id_isSet = false;
    m_performance_insights_kms_key_id_isValid = false;

    m_enable_cloudwatch_logs_exports_isSet = false;
    m_enable_cloudwatch_logs_exports_isValid = false;

    m_deletion_protection_isSet = false;
    m_deletion_protection_isValid = false;
}

void OAICreateDBInstanceMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDBInstanceMessage::fromJsonObject(QJsonObject json) {

    m_db_name_isValid = ::OpenAPI::fromJsonValue(m_db_name, json[QString("DBName")]);
    m_db_name_isSet = !json[QString("DBName")].isNull() && m_db_name_isValid;

    m_db_instance_identifier_isValid = ::OpenAPI::fromJsonValue(m_db_instance_identifier, json[QString("DBInstanceIdentifier")]);
    m_db_instance_identifier_isSet = !json[QString("DBInstanceIdentifier")].isNull() && m_db_instance_identifier_isValid;

    m_allocated_storage_isValid = ::OpenAPI::fromJsonValue(m_allocated_storage, json[QString("AllocatedStorage")]);
    m_allocated_storage_isSet = !json[QString("AllocatedStorage")].isNull() && m_allocated_storage_isValid;

    m_db_instance_class_isValid = ::OpenAPI::fromJsonValue(m_db_instance_class, json[QString("DBInstanceClass")]);
    m_db_instance_class_isSet = !json[QString("DBInstanceClass")].isNull() && m_db_instance_class_isValid;

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("Engine")]);
    m_engine_isSet = !json[QString("Engine")].isNull() && m_engine_isValid;

    m_master_username_isValid = ::OpenAPI::fromJsonValue(m_master_username, json[QString("MasterUsername")]);
    m_master_username_isSet = !json[QString("MasterUsername")].isNull() && m_master_username_isValid;

    m_master_user_password_isValid = ::OpenAPI::fromJsonValue(m_master_user_password, json[QString("MasterUserPassword")]);
    m_master_user_password_isSet = !json[QString("MasterUserPassword")].isNull() && m_master_user_password_isValid;

    m_db_security_groups_isValid = ::OpenAPI::fromJsonValue(m_db_security_groups, json[QString("DBSecurityGroups")]);
    m_db_security_groups_isSet = !json[QString("DBSecurityGroups")].isNull() && m_db_security_groups_isValid;

    m_vpc_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_vpc_security_group_ids, json[QString("VpcSecurityGroupIds")]);
    m_vpc_security_group_ids_isSet = !json[QString("VpcSecurityGroupIds")].isNull() && m_vpc_security_group_ids_isValid;

    m_availability_zone_isValid = ::OpenAPI::fromJsonValue(m_availability_zone, json[QString("AvailabilityZone")]);
    m_availability_zone_isSet = !json[QString("AvailabilityZone")].isNull() && m_availability_zone_isValid;

    m_db_subnet_group_name_isValid = ::OpenAPI::fromJsonValue(m_db_subnet_group_name, json[QString("DBSubnetGroupName")]);
    m_db_subnet_group_name_isSet = !json[QString("DBSubnetGroupName")].isNull() && m_db_subnet_group_name_isValid;

    m_preferred_maintenance_window_isValid = ::OpenAPI::fromJsonValue(m_preferred_maintenance_window, json[QString("PreferredMaintenanceWindow")]);
    m_preferred_maintenance_window_isSet = !json[QString("PreferredMaintenanceWindow")].isNull() && m_preferred_maintenance_window_isValid;

    m_db_parameter_group_name_isValid = ::OpenAPI::fromJsonValue(m_db_parameter_group_name, json[QString("DBParameterGroupName")]);
    m_db_parameter_group_name_isSet = !json[QString("DBParameterGroupName")].isNull() && m_db_parameter_group_name_isValid;

    m_backup_retention_period_isValid = ::OpenAPI::fromJsonValue(m_backup_retention_period, json[QString("BackupRetentionPeriod")]);
    m_backup_retention_period_isSet = !json[QString("BackupRetentionPeriod")].isNull() && m_backup_retention_period_isValid;

    m_preferred_backup_window_isValid = ::OpenAPI::fromJsonValue(m_preferred_backup_window, json[QString("PreferredBackupWindow")]);
    m_preferred_backup_window_isSet = !json[QString("PreferredBackupWindow")].isNull() && m_preferred_backup_window_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("Port")]);
    m_port_isSet = !json[QString("Port")].isNull() && m_port_isValid;

    m_multi_az_isValid = ::OpenAPI::fromJsonValue(m_multi_az, json[QString("MultiAZ")]);
    m_multi_az_isSet = !json[QString("MultiAZ")].isNull() && m_multi_az_isValid;

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("EngineVersion")]);
    m_engine_version_isSet = !json[QString("EngineVersion")].isNull() && m_engine_version_isValid;

    m_auto_minor_version_upgrade_isValid = ::OpenAPI::fromJsonValue(m_auto_minor_version_upgrade, json[QString("AutoMinorVersionUpgrade")]);
    m_auto_minor_version_upgrade_isSet = !json[QString("AutoMinorVersionUpgrade")].isNull() && m_auto_minor_version_upgrade_isValid;

    m_license_model_isValid = ::OpenAPI::fromJsonValue(m_license_model, json[QString("LicenseModel")]);
    m_license_model_isSet = !json[QString("LicenseModel")].isNull() && m_license_model_isValid;

    m_iops_isValid = ::OpenAPI::fromJsonValue(m_iops, json[QString("Iops")]);
    m_iops_isSet = !json[QString("Iops")].isNull() && m_iops_isValid;

    m_option_group_name_isValid = ::OpenAPI::fromJsonValue(m_option_group_name, json[QString("OptionGroupName")]);
    m_option_group_name_isSet = !json[QString("OptionGroupName")].isNull() && m_option_group_name_isValid;

    m_character_set_name_isValid = ::OpenAPI::fromJsonValue(m_character_set_name, json[QString("CharacterSetName")]);
    m_character_set_name_isSet = !json[QString("CharacterSetName")].isNull() && m_character_set_name_isValid;

    m_publicly_accessible_isValid = ::OpenAPI::fromJsonValue(m_publicly_accessible, json[QString("PubliclyAccessible")]);
    m_publicly_accessible_isSet = !json[QString("PubliclyAccessible")].isNull() && m_publicly_accessible_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_db_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_identifier, json[QString("DBClusterIdentifier")]);
    m_db_cluster_identifier_isSet = !json[QString("DBClusterIdentifier")].isNull() && m_db_cluster_identifier_isValid;

    m_storage_type_isValid = ::OpenAPI::fromJsonValue(m_storage_type, json[QString("StorageType")]);
    m_storage_type_isSet = !json[QString("StorageType")].isNull() && m_storage_type_isValid;

    m_tde_credential_arn_isValid = ::OpenAPI::fromJsonValue(m_tde_credential_arn, json[QString("TdeCredentialArn")]);
    m_tde_credential_arn_isSet = !json[QString("TdeCredentialArn")].isNull() && m_tde_credential_arn_isValid;

    m_tde_credential_password_isValid = ::OpenAPI::fromJsonValue(m_tde_credential_password, json[QString("TdeCredentialPassword")]);
    m_tde_credential_password_isSet = !json[QString("TdeCredentialPassword")].isNull() && m_tde_credential_password_isValid;

    m_storage_encrypted_isValid = ::OpenAPI::fromJsonValue(m_storage_encrypted, json[QString("StorageEncrypted")]);
    m_storage_encrypted_isSet = !json[QString("StorageEncrypted")].isNull() && m_storage_encrypted_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("Domain")]);
    m_domain_isSet = !json[QString("Domain")].isNull() && m_domain_isValid;

    m_copy_tags_to_snapshot_isValid = ::OpenAPI::fromJsonValue(m_copy_tags_to_snapshot, json[QString("CopyTagsToSnapshot")]);
    m_copy_tags_to_snapshot_isSet = !json[QString("CopyTagsToSnapshot")].isNull() && m_copy_tags_to_snapshot_isValid;

    m_monitoring_interval_isValid = ::OpenAPI::fromJsonValue(m_monitoring_interval, json[QString("MonitoringInterval")]);
    m_monitoring_interval_isSet = !json[QString("MonitoringInterval")].isNull() && m_monitoring_interval_isValid;

    m_monitoring_role_arn_isValid = ::OpenAPI::fromJsonValue(m_monitoring_role_arn, json[QString("MonitoringRoleArn")]);
    m_monitoring_role_arn_isSet = !json[QString("MonitoringRoleArn")].isNull() && m_monitoring_role_arn_isValid;

    m_domain_iam_role_name_isValid = ::OpenAPI::fromJsonValue(m_domain_iam_role_name, json[QString("DomainIAMRoleName")]);
    m_domain_iam_role_name_isSet = !json[QString("DomainIAMRoleName")].isNull() && m_domain_iam_role_name_isValid;

    m_promotion_tier_isValid = ::OpenAPI::fromJsonValue(m_promotion_tier, json[QString("PromotionTier")]);
    m_promotion_tier_isSet = !json[QString("PromotionTier")].isNull() && m_promotion_tier_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("Timezone")]);
    m_timezone_isSet = !json[QString("Timezone")].isNull() && m_timezone_isValid;

    m_enable_iam_database_authentication_isValid = ::OpenAPI::fromJsonValue(m_enable_iam_database_authentication, json[QString("EnableIAMDatabaseAuthentication")]);
    m_enable_iam_database_authentication_isSet = !json[QString("EnableIAMDatabaseAuthentication")].isNull() && m_enable_iam_database_authentication_isValid;

    m_enable_performance_insights_isValid = ::OpenAPI::fromJsonValue(m_enable_performance_insights, json[QString("EnablePerformanceInsights")]);
    m_enable_performance_insights_isSet = !json[QString("EnablePerformanceInsights")].isNull() && m_enable_performance_insights_isValid;

    m_performance_insights_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_performance_insights_kms_key_id, json[QString("PerformanceInsightsKMSKeyId")]);
    m_performance_insights_kms_key_id_isSet = !json[QString("PerformanceInsightsKMSKeyId")].isNull() && m_performance_insights_kms_key_id_isValid;

    m_enable_cloudwatch_logs_exports_isValid = ::OpenAPI::fromJsonValue(m_enable_cloudwatch_logs_exports, json[QString("EnableCloudwatchLogsExports")]);
    m_enable_cloudwatch_logs_exports_isSet = !json[QString("EnableCloudwatchLogsExports")].isNull() && m_enable_cloudwatch_logs_exports_isValid;

    m_deletion_protection_isValid = ::OpenAPI::fromJsonValue(m_deletion_protection, json[QString("DeletionProtection")]);
    m_deletion_protection_isSet = !json[QString("DeletionProtection")].isNull() && m_deletion_protection_isValid;
}

QString OAICreateDBInstanceMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDBInstanceMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_db_name_isSet) {
        obj.insert(QString("DBName"), ::OpenAPI::toJsonValue(m_db_name));
    }
    if (m_db_instance_identifier_isSet) {
        obj.insert(QString("DBInstanceIdentifier"), ::OpenAPI::toJsonValue(m_db_instance_identifier));
    }
    if (m_allocated_storage_isSet) {
        obj.insert(QString("AllocatedStorage"), ::OpenAPI::toJsonValue(m_allocated_storage));
    }
    if (m_db_instance_class_isSet) {
        obj.insert(QString("DBInstanceClass"), ::OpenAPI::toJsonValue(m_db_instance_class));
    }
    if (m_engine_isSet) {
        obj.insert(QString("Engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_master_username_isSet) {
        obj.insert(QString("MasterUsername"), ::OpenAPI::toJsonValue(m_master_username));
    }
    if (m_master_user_password_isSet) {
        obj.insert(QString("MasterUserPassword"), ::OpenAPI::toJsonValue(m_master_user_password));
    }
    if (m_db_security_groups.isSet()) {
        obj.insert(QString("DBSecurityGroups"), ::OpenAPI::toJsonValue(m_db_security_groups));
    }
    if (m_vpc_security_group_ids.isSet()) {
        obj.insert(QString("VpcSecurityGroupIds"), ::OpenAPI::toJsonValue(m_vpc_security_group_ids));
    }
    if (m_availability_zone_isSet) {
        obj.insert(QString("AvailabilityZone"), ::OpenAPI::toJsonValue(m_availability_zone));
    }
    if (m_db_subnet_group_name_isSet) {
        obj.insert(QString("DBSubnetGroupName"), ::OpenAPI::toJsonValue(m_db_subnet_group_name));
    }
    if (m_preferred_maintenance_window_isSet) {
        obj.insert(QString("PreferredMaintenanceWindow"), ::OpenAPI::toJsonValue(m_preferred_maintenance_window));
    }
    if (m_db_parameter_group_name_isSet) {
        obj.insert(QString("DBParameterGroupName"), ::OpenAPI::toJsonValue(m_db_parameter_group_name));
    }
    if (m_backup_retention_period_isSet) {
        obj.insert(QString("BackupRetentionPeriod"), ::OpenAPI::toJsonValue(m_backup_retention_period));
    }
    if (m_preferred_backup_window_isSet) {
        obj.insert(QString("PreferredBackupWindow"), ::OpenAPI::toJsonValue(m_preferred_backup_window));
    }
    if (m_port_isSet) {
        obj.insert(QString("Port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_multi_az_isSet) {
        obj.insert(QString("MultiAZ"), ::OpenAPI::toJsonValue(m_multi_az));
    }
    if (m_engine_version_isSet) {
        obj.insert(QString("EngineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_auto_minor_version_upgrade_isSet) {
        obj.insert(QString("AutoMinorVersionUpgrade"), ::OpenAPI::toJsonValue(m_auto_minor_version_upgrade));
    }
    if (m_license_model_isSet) {
        obj.insert(QString("LicenseModel"), ::OpenAPI::toJsonValue(m_license_model));
    }
    if (m_iops_isSet) {
        obj.insert(QString("Iops"), ::OpenAPI::toJsonValue(m_iops));
    }
    if (m_option_group_name_isSet) {
        obj.insert(QString("OptionGroupName"), ::OpenAPI::toJsonValue(m_option_group_name));
    }
    if (m_character_set_name_isSet) {
        obj.insert(QString("CharacterSetName"), ::OpenAPI::toJsonValue(m_character_set_name));
    }
    if (m_publicly_accessible_isSet) {
        obj.insert(QString("PubliclyAccessible"), ::OpenAPI::toJsonValue(m_publicly_accessible));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_db_cluster_identifier_isSet) {
        obj.insert(QString("DBClusterIdentifier"), ::OpenAPI::toJsonValue(m_db_cluster_identifier));
    }
    if (m_storage_type_isSet) {
        obj.insert(QString("StorageType"), ::OpenAPI::toJsonValue(m_storage_type));
    }
    if (m_tde_credential_arn_isSet) {
        obj.insert(QString("TdeCredentialArn"), ::OpenAPI::toJsonValue(m_tde_credential_arn));
    }
    if (m_tde_credential_password_isSet) {
        obj.insert(QString("TdeCredentialPassword"), ::OpenAPI::toJsonValue(m_tde_credential_password));
    }
    if (m_storage_encrypted_isSet) {
        obj.insert(QString("StorageEncrypted"), ::OpenAPI::toJsonValue(m_storage_encrypted));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_domain_isSet) {
        obj.insert(QString("Domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_copy_tags_to_snapshot_isSet) {
        obj.insert(QString("CopyTagsToSnapshot"), ::OpenAPI::toJsonValue(m_copy_tags_to_snapshot));
    }
    if (m_monitoring_interval_isSet) {
        obj.insert(QString("MonitoringInterval"), ::OpenAPI::toJsonValue(m_monitoring_interval));
    }
    if (m_monitoring_role_arn_isSet) {
        obj.insert(QString("MonitoringRoleArn"), ::OpenAPI::toJsonValue(m_monitoring_role_arn));
    }
    if (m_domain_iam_role_name_isSet) {
        obj.insert(QString("DomainIAMRoleName"), ::OpenAPI::toJsonValue(m_domain_iam_role_name));
    }
    if (m_promotion_tier_isSet) {
        obj.insert(QString("PromotionTier"), ::OpenAPI::toJsonValue(m_promotion_tier));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("Timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_enable_iam_database_authentication_isSet) {
        obj.insert(QString("EnableIAMDatabaseAuthentication"), ::OpenAPI::toJsonValue(m_enable_iam_database_authentication));
    }
    if (m_enable_performance_insights_isSet) {
        obj.insert(QString("EnablePerformanceInsights"), ::OpenAPI::toJsonValue(m_enable_performance_insights));
    }
    if (m_performance_insights_kms_key_id_isSet) {
        obj.insert(QString("PerformanceInsightsKMSKeyId"), ::OpenAPI::toJsonValue(m_performance_insights_kms_key_id));
    }
    if (m_enable_cloudwatch_logs_exports.isSet()) {
        obj.insert(QString("EnableCloudwatchLogsExports"), ::OpenAPI::toJsonValue(m_enable_cloudwatch_logs_exports));
    }
    if (m_deletion_protection_isSet) {
        obj.insert(QString("DeletionProtection"), ::OpenAPI::toJsonValue(m_deletion_protection));
    }
    return obj;
}

QString OAICreateDBInstanceMessage::getDbName() const {
    return m_db_name;
}
void OAICreateDBInstanceMessage::setDbName(const QString &db_name) {
    m_db_name = db_name;
    m_db_name_isSet = true;
}

bool OAICreateDBInstanceMessage::is_db_name_Set() const{
    return m_db_name_isSet;
}

bool OAICreateDBInstanceMessage::is_db_name_Valid() const{
    return m_db_name_isValid;
}

QString OAICreateDBInstanceMessage::getDbInstanceIdentifier() const {
    return m_db_instance_identifier;
}
void OAICreateDBInstanceMessage::setDbInstanceIdentifier(const QString &db_instance_identifier) {
    m_db_instance_identifier = db_instance_identifier;
    m_db_instance_identifier_isSet = true;
}

bool OAICreateDBInstanceMessage::is_db_instance_identifier_Set() const{
    return m_db_instance_identifier_isSet;
}

bool OAICreateDBInstanceMessage::is_db_instance_identifier_Valid() const{
    return m_db_instance_identifier_isValid;
}

qint32 OAICreateDBInstanceMessage::getAllocatedStorage() const {
    return m_allocated_storage;
}
void OAICreateDBInstanceMessage::setAllocatedStorage(const qint32 &allocated_storage) {
    m_allocated_storage = allocated_storage;
    m_allocated_storage_isSet = true;
}

bool OAICreateDBInstanceMessage::is_allocated_storage_Set() const{
    return m_allocated_storage_isSet;
}

bool OAICreateDBInstanceMessage::is_allocated_storage_Valid() const{
    return m_allocated_storage_isValid;
}

QString OAICreateDBInstanceMessage::getDbInstanceClass() const {
    return m_db_instance_class;
}
void OAICreateDBInstanceMessage::setDbInstanceClass(const QString &db_instance_class) {
    m_db_instance_class = db_instance_class;
    m_db_instance_class_isSet = true;
}

bool OAICreateDBInstanceMessage::is_db_instance_class_Set() const{
    return m_db_instance_class_isSet;
}

bool OAICreateDBInstanceMessage::is_db_instance_class_Valid() const{
    return m_db_instance_class_isValid;
}

QString OAICreateDBInstanceMessage::getEngine() const {
    return m_engine;
}
void OAICreateDBInstanceMessage::setEngine(const QString &engine) {
    m_engine = engine;
    m_engine_isSet = true;
}

bool OAICreateDBInstanceMessage::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAICreateDBInstanceMessage::is_engine_Valid() const{
    return m_engine_isValid;
}

QString OAICreateDBInstanceMessage::getMasterUsername() const {
    return m_master_username;
}
void OAICreateDBInstanceMessage::setMasterUsername(const QString &master_username) {
    m_master_username = master_username;
    m_master_username_isSet = true;
}

bool OAICreateDBInstanceMessage::is_master_username_Set() const{
    return m_master_username_isSet;
}

bool OAICreateDBInstanceMessage::is_master_username_Valid() const{
    return m_master_username_isValid;
}

QString OAICreateDBInstanceMessage::getMasterUserPassword() const {
    return m_master_user_password;
}
void OAICreateDBInstanceMessage::setMasterUserPassword(const QString &master_user_password) {
    m_master_user_password = master_user_password;
    m_master_user_password_isSet = true;
}

bool OAICreateDBInstanceMessage::is_master_user_password_Set() const{
    return m_master_user_password_isSet;
}

bool OAICreateDBInstanceMessage::is_master_user_password_Valid() const{
    return m_master_user_password_isValid;
}

QList OAICreateDBInstanceMessage::getDbSecurityGroups() const {
    return m_db_security_groups;
}
void OAICreateDBInstanceMessage::setDbSecurityGroups(const QList &db_security_groups) {
    m_db_security_groups = db_security_groups;
    m_db_security_groups_isSet = true;
}

bool OAICreateDBInstanceMessage::is_db_security_groups_Set() const{
    return m_db_security_groups_isSet;
}

bool OAICreateDBInstanceMessage::is_db_security_groups_Valid() const{
    return m_db_security_groups_isValid;
}

QList OAICreateDBInstanceMessage::getVpcSecurityGroupIds() const {
    return m_vpc_security_group_ids;
}
void OAICreateDBInstanceMessage::setVpcSecurityGroupIds(const QList &vpc_security_group_ids) {
    m_vpc_security_group_ids = vpc_security_group_ids;
    m_vpc_security_group_ids_isSet = true;
}

bool OAICreateDBInstanceMessage::is_vpc_security_group_ids_Set() const{
    return m_vpc_security_group_ids_isSet;
}

bool OAICreateDBInstanceMessage::is_vpc_security_group_ids_Valid() const{
    return m_vpc_security_group_ids_isValid;
}

QString OAICreateDBInstanceMessage::getAvailabilityZone() const {
    return m_availability_zone;
}
void OAICreateDBInstanceMessage::setAvailabilityZone(const QString &availability_zone) {
    m_availability_zone = availability_zone;
    m_availability_zone_isSet = true;
}

bool OAICreateDBInstanceMessage::is_availability_zone_Set() const{
    return m_availability_zone_isSet;
}

bool OAICreateDBInstanceMessage::is_availability_zone_Valid() const{
    return m_availability_zone_isValid;
}

QString OAICreateDBInstanceMessage::getDbSubnetGroupName() const {
    return m_db_subnet_group_name;
}
void OAICreateDBInstanceMessage::setDbSubnetGroupName(const QString &db_subnet_group_name) {
    m_db_subnet_group_name = db_subnet_group_name;
    m_db_subnet_group_name_isSet = true;
}

bool OAICreateDBInstanceMessage::is_db_subnet_group_name_Set() const{
    return m_db_subnet_group_name_isSet;
}

bool OAICreateDBInstanceMessage::is_db_subnet_group_name_Valid() const{
    return m_db_subnet_group_name_isValid;
}

QString OAICreateDBInstanceMessage::getPreferredMaintenanceWindow() const {
    return m_preferred_maintenance_window;
}
void OAICreateDBInstanceMessage::setPreferredMaintenanceWindow(const QString &preferred_maintenance_window) {
    m_preferred_maintenance_window = preferred_maintenance_window;
    m_preferred_maintenance_window_isSet = true;
}

bool OAICreateDBInstanceMessage::is_preferred_maintenance_window_Set() const{
    return m_preferred_maintenance_window_isSet;
}

bool OAICreateDBInstanceMessage::is_preferred_maintenance_window_Valid() const{
    return m_preferred_maintenance_window_isValid;
}

QString OAICreateDBInstanceMessage::getDbParameterGroupName() const {
    return m_db_parameter_group_name;
}
void OAICreateDBInstanceMessage::setDbParameterGroupName(const QString &db_parameter_group_name) {
    m_db_parameter_group_name = db_parameter_group_name;
    m_db_parameter_group_name_isSet = true;
}

bool OAICreateDBInstanceMessage::is_db_parameter_group_name_Set() const{
    return m_db_parameter_group_name_isSet;
}

bool OAICreateDBInstanceMessage::is_db_parameter_group_name_Valid() const{
    return m_db_parameter_group_name_isValid;
}

qint32 OAICreateDBInstanceMessage::getBackupRetentionPeriod() const {
    return m_backup_retention_period;
}
void OAICreateDBInstanceMessage::setBackupRetentionPeriod(const qint32 &backup_retention_period) {
    m_backup_retention_period = backup_retention_period;
    m_backup_retention_period_isSet = true;
}

bool OAICreateDBInstanceMessage::is_backup_retention_period_Set() const{
    return m_backup_retention_period_isSet;
}

bool OAICreateDBInstanceMessage::is_backup_retention_period_Valid() const{
    return m_backup_retention_period_isValid;
}

QString OAICreateDBInstanceMessage::getPreferredBackupWindow() const {
    return m_preferred_backup_window;
}
void OAICreateDBInstanceMessage::setPreferredBackupWindow(const QString &preferred_backup_window) {
    m_preferred_backup_window = preferred_backup_window;
    m_preferred_backup_window_isSet = true;
}

bool OAICreateDBInstanceMessage::is_preferred_backup_window_Set() const{
    return m_preferred_backup_window_isSet;
}

bool OAICreateDBInstanceMessage::is_preferred_backup_window_Valid() const{
    return m_preferred_backup_window_isValid;
}

qint32 OAICreateDBInstanceMessage::getPort() const {
    return m_port;
}
void OAICreateDBInstanceMessage::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAICreateDBInstanceMessage::is_port_Set() const{
    return m_port_isSet;
}

bool OAICreateDBInstanceMessage::is_port_Valid() const{
    return m_port_isValid;
}

bool OAICreateDBInstanceMessage::getMultiAz() const {
    return m_multi_az;
}
void OAICreateDBInstanceMessage::setMultiAz(const bool &multi_az) {
    m_multi_az = multi_az;
    m_multi_az_isSet = true;
}

bool OAICreateDBInstanceMessage::is_multi_az_Set() const{
    return m_multi_az_isSet;
}

bool OAICreateDBInstanceMessage::is_multi_az_Valid() const{
    return m_multi_az_isValid;
}

QString OAICreateDBInstanceMessage::getEngineVersion() const {
    return m_engine_version;
}
void OAICreateDBInstanceMessage::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAICreateDBInstanceMessage::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAICreateDBInstanceMessage::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

bool OAICreateDBInstanceMessage::getAutoMinorVersionUpgrade() const {
    return m_auto_minor_version_upgrade;
}
void OAICreateDBInstanceMessage::setAutoMinorVersionUpgrade(const bool &auto_minor_version_upgrade) {
    m_auto_minor_version_upgrade = auto_minor_version_upgrade;
    m_auto_minor_version_upgrade_isSet = true;
}

bool OAICreateDBInstanceMessage::is_auto_minor_version_upgrade_Set() const{
    return m_auto_minor_version_upgrade_isSet;
}

bool OAICreateDBInstanceMessage::is_auto_minor_version_upgrade_Valid() const{
    return m_auto_minor_version_upgrade_isValid;
}

QString OAICreateDBInstanceMessage::getLicenseModel() const {
    return m_license_model;
}
void OAICreateDBInstanceMessage::setLicenseModel(const QString &license_model) {
    m_license_model = license_model;
    m_license_model_isSet = true;
}

bool OAICreateDBInstanceMessage::is_license_model_Set() const{
    return m_license_model_isSet;
}

bool OAICreateDBInstanceMessage::is_license_model_Valid() const{
    return m_license_model_isValid;
}

qint32 OAICreateDBInstanceMessage::getIops() const {
    return m_iops;
}
void OAICreateDBInstanceMessage::setIops(const qint32 &iops) {
    m_iops = iops;
    m_iops_isSet = true;
}

bool OAICreateDBInstanceMessage::is_iops_Set() const{
    return m_iops_isSet;
}

bool OAICreateDBInstanceMessage::is_iops_Valid() const{
    return m_iops_isValid;
}

QString OAICreateDBInstanceMessage::getOptionGroupName() const {
    return m_option_group_name;
}
void OAICreateDBInstanceMessage::setOptionGroupName(const QString &option_group_name) {
    m_option_group_name = option_group_name;
    m_option_group_name_isSet = true;
}

bool OAICreateDBInstanceMessage::is_option_group_name_Set() const{
    return m_option_group_name_isSet;
}

bool OAICreateDBInstanceMessage::is_option_group_name_Valid() const{
    return m_option_group_name_isValid;
}

QString OAICreateDBInstanceMessage::getCharacterSetName() const {
    return m_character_set_name;
}
void OAICreateDBInstanceMessage::setCharacterSetName(const QString &character_set_name) {
    m_character_set_name = character_set_name;
    m_character_set_name_isSet = true;
}

bool OAICreateDBInstanceMessage::is_character_set_name_Set() const{
    return m_character_set_name_isSet;
}

bool OAICreateDBInstanceMessage::is_character_set_name_Valid() const{
    return m_character_set_name_isValid;
}

bool OAICreateDBInstanceMessage::getPubliclyAccessible() const {
    return m_publicly_accessible;
}
void OAICreateDBInstanceMessage::setPubliclyAccessible(const bool &publicly_accessible) {
    m_publicly_accessible = publicly_accessible;
    m_publicly_accessible_isSet = true;
}

bool OAICreateDBInstanceMessage::is_publicly_accessible_Set() const{
    return m_publicly_accessible_isSet;
}

bool OAICreateDBInstanceMessage::is_publicly_accessible_Valid() const{
    return m_publicly_accessible_isValid;
}

QList OAICreateDBInstanceMessage::getTags() const {
    return m_tags;
}
void OAICreateDBInstanceMessage::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateDBInstanceMessage::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateDBInstanceMessage::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateDBInstanceMessage::getDbClusterIdentifier() const {
    return m_db_cluster_identifier;
}
void OAICreateDBInstanceMessage::setDbClusterIdentifier(const QString &db_cluster_identifier) {
    m_db_cluster_identifier = db_cluster_identifier;
    m_db_cluster_identifier_isSet = true;
}

bool OAICreateDBInstanceMessage::is_db_cluster_identifier_Set() const{
    return m_db_cluster_identifier_isSet;
}

bool OAICreateDBInstanceMessage::is_db_cluster_identifier_Valid() const{
    return m_db_cluster_identifier_isValid;
}

QString OAICreateDBInstanceMessage::getStorageType() const {
    return m_storage_type;
}
void OAICreateDBInstanceMessage::setStorageType(const QString &storage_type) {
    m_storage_type = storage_type;
    m_storage_type_isSet = true;
}

bool OAICreateDBInstanceMessage::is_storage_type_Set() const{
    return m_storage_type_isSet;
}

bool OAICreateDBInstanceMessage::is_storage_type_Valid() const{
    return m_storage_type_isValid;
}

QString OAICreateDBInstanceMessage::getTdeCredentialArn() const {
    return m_tde_credential_arn;
}
void OAICreateDBInstanceMessage::setTdeCredentialArn(const QString &tde_credential_arn) {
    m_tde_credential_arn = tde_credential_arn;
    m_tde_credential_arn_isSet = true;
}

bool OAICreateDBInstanceMessage::is_tde_credential_arn_Set() const{
    return m_tde_credential_arn_isSet;
}

bool OAICreateDBInstanceMessage::is_tde_credential_arn_Valid() const{
    return m_tde_credential_arn_isValid;
}

QString OAICreateDBInstanceMessage::getTdeCredentialPassword() const {
    return m_tde_credential_password;
}
void OAICreateDBInstanceMessage::setTdeCredentialPassword(const QString &tde_credential_password) {
    m_tde_credential_password = tde_credential_password;
    m_tde_credential_password_isSet = true;
}

bool OAICreateDBInstanceMessage::is_tde_credential_password_Set() const{
    return m_tde_credential_password_isSet;
}

bool OAICreateDBInstanceMessage::is_tde_credential_password_Valid() const{
    return m_tde_credential_password_isValid;
}

bool OAICreateDBInstanceMessage::getStorageEncrypted() const {
    return m_storage_encrypted;
}
void OAICreateDBInstanceMessage::setStorageEncrypted(const bool &storage_encrypted) {
    m_storage_encrypted = storage_encrypted;
    m_storage_encrypted_isSet = true;
}

bool OAICreateDBInstanceMessage::is_storage_encrypted_Set() const{
    return m_storage_encrypted_isSet;
}

bool OAICreateDBInstanceMessage::is_storage_encrypted_Valid() const{
    return m_storage_encrypted_isValid;
}

QString OAICreateDBInstanceMessage::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAICreateDBInstanceMessage::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAICreateDBInstanceMessage::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAICreateDBInstanceMessage::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

QString OAICreateDBInstanceMessage::getDomain() const {
    return m_domain;
}
void OAICreateDBInstanceMessage::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAICreateDBInstanceMessage::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAICreateDBInstanceMessage::is_domain_Valid() const{
    return m_domain_isValid;
}

bool OAICreateDBInstanceMessage::getCopyTagsToSnapshot() const {
    return m_copy_tags_to_snapshot;
}
void OAICreateDBInstanceMessage::setCopyTagsToSnapshot(const bool &copy_tags_to_snapshot) {
    m_copy_tags_to_snapshot = copy_tags_to_snapshot;
    m_copy_tags_to_snapshot_isSet = true;
}

bool OAICreateDBInstanceMessage::is_copy_tags_to_snapshot_Set() const{
    return m_copy_tags_to_snapshot_isSet;
}

bool OAICreateDBInstanceMessage::is_copy_tags_to_snapshot_Valid() const{
    return m_copy_tags_to_snapshot_isValid;
}

qint32 OAICreateDBInstanceMessage::getMonitoringInterval() const {
    return m_monitoring_interval;
}
void OAICreateDBInstanceMessage::setMonitoringInterval(const qint32 &monitoring_interval) {
    m_monitoring_interval = monitoring_interval;
    m_monitoring_interval_isSet = true;
}

bool OAICreateDBInstanceMessage::is_monitoring_interval_Set() const{
    return m_monitoring_interval_isSet;
}

bool OAICreateDBInstanceMessage::is_monitoring_interval_Valid() const{
    return m_monitoring_interval_isValid;
}

QString OAICreateDBInstanceMessage::getMonitoringRoleArn() const {
    return m_monitoring_role_arn;
}
void OAICreateDBInstanceMessage::setMonitoringRoleArn(const QString &monitoring_role_arn) {
    m_monitoring_role_arn = monitoring_role_arn;
    m_monitoring_role_arn_isSet = true;
}

bool OAICreateDBInstanceMessage::is_monitoring_role_arn_Set() const{
    return m_monitoring_role_arn_isSet;
}

bool OAICreateDBInstanceMessage::is_monitoring_role_arn_Valid() const{
    return m_monitoring_role_arn_isValid;
}

QString OAICreateDBInstanceMessage::getDomainIamRoleName() const {
    return m_domain_iam_role_name;
}
void OAICreateDBInstanceMessage::setDomainIamRoleName(const QString &domain_iam_role_name) {
    m_domain_iam_role_name = domain_iam_role_name;
    m_domain_iam_role_name_isSet = true;
}

bool OAICreateDBInstanceMessage::is_domain_iam_role_name_Set() const{
    return m_domain_iam_role_name_isSet;
}

bool OAICreateDBInstanceMessage::is_domain_iam_role_name_Valid() const{
    return m_domain_iam_role_name_isValid;
}

qint32 OAICreateDBInstanceMessage::getPromotionTier() const {
    return m_promotion_tier;
}
void OAICreateDBInstanceMessage::setPromotionTier(const qint32 &promotion_tier) {
    m_promotion_tier = promotion_tier;
    m_promotion_tier_isSet = true;
}

bool OAICreateDBInstanceMessage::is_promotion_tier_Set() const{
    return m_promotion_tier_isSet;
}

bool OAICreateDBInstanceMessage::is_promotion_tier_Valid() const{
    return m_promotion_tier_isValid;
}

QString OAICreateDBInstanceMessage::getTimezone() const {
    return m_timezone;
}
void OAICreateDBInstanceMessage::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAICreateDBInstanceMessage::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAICreateDBInstanceMessage::is_timezone_Valid() const{
    return m_timezone_isValid;
}

bool OAICreateDBInstanceMessage::getEnableIamDatabaseAuthentication() const {
    return m_enable_iam_database_authentication;
}
void OAICreateDBInstanceMessage::setEnableIamDatabaseAuthentication(const bool &enable_iam_database_authentication) {
    m_enable_iam_database_authentication = enable_iam_database_authentication;
    m_enable_iam_database_authentication_isSet = true;
}

bool OAICreateDBInstanceMessage::is_enable_iam_database_authentication_Set() const{
    return m_enable_iam_database_authentication_isSet;
}

bool OAICreateDBInstanceMessage::is_enable_iam_database_authentication_Valid() const{
    return m_enable_iam_database_authentication_isValid;
}

bool OAICreateDBInstanceMessage::getEnablePerformanceInsights() const {
    return m_enable_performance_insights;
}
void OAICreateDBInstanceMessage::setEnablePerformanceInsights(const bool &enable_performance_insights) {
    m_enable_performance_insights = enable_performance_insights;
    m_enable_performance_insights_isSet = true;
}

bool OAICreateDBInstanceMessage::is_enable_performance_insights_Set() const{
    return m_enable_performance_insights_isSet;
}

bool OAICreateDBInstanceMessage::is_enable_performance_insights_Valid() const{
    return m_enable_performance_insights_isValid;
}

QString OAICreateDBInstanceMessage::getPerformanceInsightsKmsKeyId() const {
    return m_performance_insights_kms_key_id;
}
void OAICreateDBInstanceMessage::setPerformanceInsightsKmsKeyId(const QString &performance_insights_kms_key_id) {
    m_performance_insights_kms_key_id = performance_insights_kms_key_id;
    m_performance_insights_kms_key_id_isSet = true;
}

bool OAICreateDBInstanceMessage::is_performance_insights_kms_key_id_Set() const{
    return m_performance_insights_kms_key_id_isSet;
}

bool OAICreateDBInstanceMessage::is_performance_insights_kms_key_id_Valid() const{
    return m_performance_insights_kms_key_id_isValid;
}

QList OAICreateDBInstanceMessage::getEnableCloudwatchLogsExports() const {
    return m_enable_cloudwatch_logs_exports;
}
void OAICreateDBInstanceMessage::setEnableCloudwatchLogsExports(const QList &enable_cloudwatch_logs_exports) {
    m_enable_cloudwatch_logs_exports = enable_cloudwatch_logs_exports;
    m_enable_cloudwatch_logs_exports_isSet = true;
}

bool OAICreateDBInstanceMessage::is_enable_cloudwatch_logs_exports_Set() const{
    return m_enable_cloudwatch_logs_exports_isSet;
}

bool OAICreateDBInstanceMessage::is_enable_cloudwatch_logs_exports_Valid() const{
    return m_enable_cloudwatch_logs_exports_isValid;
}

bool OAICreateDBInstanceMessage::getDeletionProtection() const {
    return m_deletion_protection;
}
void OAICreateDBInstanceMessage::setDeletionProtection(const bool &deletion_protection) {
    m_deletion_protection = deletion_protection;
    m_deletion_protection_isSet = true;
}

bool OAICreateDBInstanceMessage::is_deletion_protection_Set() const{
    return m_deletion_protection_isSet;
}

bool OAICreateDBInstanceMessage::is_deletion_protection_Valid() const{
    return m_deletion_protection_isValid;
}

bool OAICreateDBInstanceMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_db_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_instance_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allocated_storage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_instance_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_user_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_security_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_subnet_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_maintenance_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_parameter_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_retention_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_backup_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_az_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_minor_version_upgrade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iops_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_option_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_character_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publicly_accessible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tde_credential_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tde_credential_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_tags_to_snapshot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_iam_role_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotion_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_iam_database_authentication_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_performance_insights_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_performance_insights_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_cloudwatch_logs_exports.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletion_protection_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDBInstanceMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_db_instance_identifier_isValid && m_db_instance_class_isValid && m_engine_isValid && m_db_cluster_identifier_isValid && true;
}

} // namespace OpenAPI
