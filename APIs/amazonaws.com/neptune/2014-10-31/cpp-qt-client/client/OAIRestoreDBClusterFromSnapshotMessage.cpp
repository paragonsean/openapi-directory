/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestoreDBClusterFromSnapshotMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestoreDBClusterFromSnapshotMessage::OAIRestoreDBClusterFromSnapshotMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestoreDBClusterFromSnapshotMessage::OAIRestoreDBClusterFromSnapshotMessage() {
    this->initializeModel();
}

OAIRestoreDBClusterFromSnapshotMessage::~OAIRestoreDBClusterFromSnapshotMessage() {}

void OAIRestoreDBClusterFromSnapshotMessage::initializeModel() {

    m_availability_zones_isSet = false;
    m_availability_zones_isValid = false;

    m_db_cluster_identifier_isSet = false;
    m_db_cluster_identifier_isValid = false;

    m_snapshot_identifier_isSet = false;
    m_snapshot_identifier_isValid = false;

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_db_subnet_group_name_isSet = false;
    m_db_subnet_group_name_isValid = false;

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_option_group_name_isSet = false;
    m_option_group_name_isValid = false;

    m_vpc_security_group_ids_isSet = false;
    m_vpc_security_group_ids_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_enable_iam_database_authentication_isSet = false;
    m_enable_iam_database_authentication_isValid = false;

    m_enable_cloudwatch_logs_exports_isSet = false;
    m_enable_cloudwatch_logs_exports_isValid = false;

    m_db_cluster_parameter_group_name_isSet = false;
    m_db_cluster_parameter_group_name_isValid = false;

    m_deletion_protection_isSet = false;
    m_deletion_protection_isValid = false;

    m_copy_tags_to_snapshot_isSet = false;
    m_copy_tags_to_snapshot_isValid = false;

    m_serverless_v2_scaling_configuration_isSet = false;
    m_serverless_v2_scaling_configuration_isValid = false;
}

void OAIRestoreDBClusterFromSnapshotMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestoreDBClusterFromSnapshotMessage::fromJsonObject(QJsonObject json) {

    m_availability_zones_isValid = ::OpenAPI::fromJsonValue(m_availability_zones, json[QString("AvailabilityZones")]);
    m_availability_zones_isSet = !json[QString("AvailabilityZones")].isNull() && m_availability_zones_isValid;

    m_db_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_identifier, json[QString("DBClusterIdentifier")]);
    m_db_cluster_identifier_isSet = !json[QString("DBClusterIdentifier")].isNull() && m_db_cluster_identifier_isValid;

    m_snapshot_identifier_isValid = ::OpenAPI::fromJsonValue(m_snapshot_identifier, json[QString("SnapshotIdentifier")]);
    m_snapshot_identifier_isSet = !json[QString("SnapshotIdentifier")].isNull() && m_snapshot_identifier_isValid;

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("Engine")]);
    m_engine_isSet = !json[QString("Engine")].isNull() && m_engine_isValid;

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("EngineVersion")]);
    m_engine_version_isSet = !json[QString("EngineVersion")].isNull() && m_engine_version_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("Port")]);
    m_port_isSet = !json[QString("Port")].isNull() && m_port_isValid;

    m_db_subnet_group_name_isValid = ::OpenAPI::fromJsonValue(m_db_subnet_group_name, json[QString("DBSubnetGroupName")]);
    m_db_subnet_group_name_isSet = !json[QString("DBSubnetGroupName")].isNull() && m_db_subnet_group_name_isValid;

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("DatabaseName")]);
    m_database_name_isSet = !json[QString("DatabaseName")].isNull() && m_database_name_isValid;

    m_option_group_name_isValid = ::OpenAPI::fromJsonValue(m_option_group_name, json[QString("OptionGroupName")]);
    m_option_group_name_isSet = !json[QString("OptionGroupName")].isNull() && m_option_group_name_isValid;

    m_vpc_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_vpc_security_group_ids, json[QString("VpcSecurityGroupIds")]);
    m_vpc_security_group_ids_isSet = !json[QString("VpcSecurityGroupIds")].isNull() && m_vpc_security_group_ids_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_enable_iam_database_authentication_isValid = ::OpenAPI::fromJsonValue(m_enable_iam_database_authentication, json[QString("EnableIAMDatabaseAuthentication")]);
    m_enable_iam_database_authentication_isSet = !json[QString("EnableIAMDatabaseAuthentication")].isNull() && m_enable_iam_database_authentication_isValid;

    m_enable_cloudwatch_logs_exports_isValid = ::OpenAPI::fromJsonValue(m_enable_cloudwatch_logs_exports, json[QString("EnableCloudwatchLogsExports")]);
    m_enable_cloudwatch_logs_exports_isSet = !json[QString("EnableCloudwatchLogsExports")].isNull() && m_enable_cloudwatch_logs_exports_isValid;

    m_db_cluster_parameter_group_name_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_parameter_group_name, json[QString("DBClusterParameterGroupName")]);
    m_db_cluster_parameter_group_name_isSet = !json[QString("DBClusterParameterGroupName")].isNull() && m_db_cluster_parameter_group_name_isValid;

    m_deletion_protection_isValid = ::OpenAPI::fromJsonValue(m_deletion_protection, json[QString("DeletionProtection")]);
    m_deletion_protection_isSet = !json[QString("DeletionProtection")].isNull() && m_deletion_protection_isValid;

    m_copy_tags_to_snapshot_isValid = ::OpenAPI::fromJsonValue(m_copy_tags_to_snapshot, json[QString("CopyTagsToSnapshot")]);
    m_copy_tags_to_snapshot_isSet = !json[QString("CopyTagsToSnapshot")].isNull() && m_copy_tags_to_snapshot_isValid;

    m_serverless_v2_scaling_configuration_isValid = ::OpenAPI::fromJsonValue(m_serverless_v2_scaling_configuration, json[QString("ServerlessV2ScalingConfiguration")]);
    m_serverless_v2_scaling_configuration_isSet = !json[QString("ServerlessV2ScalingConfiguration")].isNull() && m_serverless_v2_scaling_configuration_isValid;
}

QString OAIRestoreDBClusterFromSnapshotMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestoreDBClusterFromSnapshotMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_availability_zones.isSet()) {
        obj.insert(QString("AvailabilityZones"), ::OpenAPI::toJsonValue(m_availability_zones));
    }
    if (m_db_cluster_identifier_isSet) {
        obj.insert(QString("DBClusterIdentifier"), ::OpenAPI::toJsonValue(m_db_cluster_identifier));
    }
    if (m_snapshot_identifier_isSet) {
        obj.insert(QString("SnapshotIdentifier"), ::OpenAPI::toJsonValue(m_snapshot_identifier));
    }
    if (m_engine_isSet) {
        obj.insert(QString("Engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_engine_version_isSet) {
        obj.insert(QString("EngineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_port_isSet) {
        obj.insert(QString("Port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_db_subnet_group_name_isSet) {
        obj.insert(QString("DBSubnetGroupName"), ::OpenAPI::toJsonValue(m_db_subnet_group_name));
    }
    if (m_database_name_isSet) {
        obj.insert(QString("DatabaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_option_group_name_isSet) {
        obj.insert(QString("OptionGroupName"), ::OpenAPI::toJsonValue(m_option_group_name));
    }
    if (m_vpc_security_group_ids.isSet()) {
        obj.insert(QString("VpcSecurityGroupIds"), ::OpenAPI::toJsonValue(m_vpc_security_group_ids));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_enable_iam_database_authentication_isSet) {
        obj.insert(QString("EnableIAMDatabaseAuthentication"), ::OpenAPI::toJsonValue(m_enable_iam_database_authentication));
    }
    if (m_enable_cloudwatch_logs_exports.isSet()) {
        obj.insert(QString("EnableCloudwatchLogsExports"), ::OpenAPI::toJsonValue(m_enable_cloudwatch_logs_exports));
    }
    if (m_db_cluster_parameter_group_name_isSet) {
        obj.insert(QString("DBClusterParameterGroupName"), ::OpenAPI::toJsonValue(m_db_cluster_parameter_group_name));
    }
    if (m_deletion_protection_isSet) {
        obj.insert(QString("DeletionProtection"), ::OpenAPI::toJsonValue(m_deletion_protection));
    }
    if (m_copy_tags_to_snapshot_isSet) {
        obj.insert(QString("CopyTagsToSnapshot"), ::OpenAPI::toJsonValue(m_copy_tags_to_snapshot));
    }
    if (m_serverless_v2_scaling_configuration.isSet()) {
        obj.insert(QString("ServerlessV2ScalingConfiguration"), ::OpenAPI::toJsonValue(m_serverless_v2_scaling_configuration));
    }
    return obj;
}

QList OAIRestoreDBClusterFromSnapshotMessage::getAvailabilityZones() const {
    return m_availability_zones;
}
void OAIRestoreDBClusterFromSnapshotMessage::setAvailabilityZones(const QList &availability_zones) {
    m_availability_zones = availability_zones;
    m_availability_zones_isSet = true;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_availability_zones_Set() const{
    return m_availability_zones_isSet;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_availability_zones_Valid() const{
    return m_availability_zones_isValid;
}

QString OAIRestoreDBClusterFromSnapshotMessage::getDbClusterIdentifier() const {
    return m_db_cluster_identifier;
}
void OAIRestoreDBClusterFromSnapshotMessage::setDbClusterIdentifier(const QString &db_cluster_identifier) {
    m_db_cluster_identifier = db_cluster_identifier;
    m_db_cluster_identifier_isSet = true;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_db_cluster_identifier_Set() const{
    return m_db_cluster_identifier_isSet;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_db_cluster_identifier_Valid() const{
    return m_db_cluster_identifier_isValid;
}

QString OAIRestoreDBClusterFromSnapshotMessage::getSnapshotIdentifier() const {
    return m_snapshot_identifier;
}
void OAIRestoreDBClusterFromSnapshotMessage::setSnapshotIdentifier(const QString &snapshot_identifier) {
    m_snapshot_identifier = snapshot_identifier;
    m_snapshot_identifier_isSet = true;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_snapshot_identifier_Set() const{
    return m_snapshot_identifier_isSet;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_snapshot_identifier_Valid() const{
    return m_snapshot_identifier_isValid;
}

QString OAIRestoreDBClusterFromSnapshotMessage::getEngine() const {
    return m_engine;
}
void OAIRestoreDBClusterFromSnapshotMessage::setEngine(const QString &engine) {
    m_engine = engine;
    m_engine_isSet = true;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_engine_Valid() const{
    return m_engine_isValid;
}

QString OAIRestoreDBClusterFromSnapshotMessage::getEngineVersion() const {
    return m_engine_version;
}
void OAIRestoreDBClusterFromSnapshotMessage::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

qint32 OAIRestoreDBClusterFromSnapshotMessage::getPort() const {
    return m_port;
}
void OAIRestoreDBClusterFromSnapshotMessage::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_port_Set() const{
    return m_port_isSet;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIRestoreDBClusterFromSnapshotMessage::getDbSubnetGroupName() const {
    return m_db_subnet_group_name;
}
void OAIRestoreDBClusterFromSnapshotMessage::setDbSubnetGroupName(const QString &db_subnet_group_name) {
    m_db_subnet_group_name = db_subnet_group_name;
    m_db_subnet_group_name_isSet = true;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_db_subnet_group_name_Set() const{
    return m_db_subnet_group_name_isSet;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_db_subnet_group_name_Valid() const{
    return m_db_subnet_group_name_isValid;
}

QString OAIRestoreDBClusterFromSnapshotMessage::getDatabaseName() const {
    return m_database_name;
}
void OAIRestoreDBClusterFromSnapshotMessage::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_database_name_Valid() const{
    return m_database_name_isValid;
}

QString OAIRestoreDBClusterFromSnapshotMessage::getOptionGroupName() const {
    return m_option_group_name;
}
void OAIRestoreDBClusterFromSnapshotMessage::setOptionGroupName(const QString &option_group_name) {
    m_option_group_name = option_group_name;
    m_option_group_name_isSet = true;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_option_group_name_Set() const{
    return m_option_group_name_isSet;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_option_group_name_Valid() const{
    return m_option_group_name_isValid;
}

QList OAIRestoreDBClusterFromSnapshotMessage::getVpcSecurityGroupIds() const {
    return m_vpc_security_group_ids;
}
void OAIRestoreDBClusterFromSnapshotMessage::setVpcSecurityGroupIds(const QList &vpc_security_group_ids) {
    m_vpc_security_group_ids = vpc_security_group_ids;
    m_vpc_security_group_ids_isSet = true;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_vpc_security_group_ids_Set() const{
    return m_vpc_security_group_ids_isSet;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_vpc_security_group_ids_Valid() const{
    return m_vpc_security_group_ids_isValid;
}

QList OAIRestoreDBClusterFromSnapshotMessage::getTags() const {
    return m_tags;
}
void OAIRestoreDBClusterFromSnapshotMessage::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIRestoreDBClusterFromSnapshotMessage::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAIRestoreDBClusterFromSnapshotMessage::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

bool OAIRestoreDBClusterFromSnapshotMessage::getEnableIamDatabaseAuthentication() const {
    return m_enable_iam_database_authentication;
}
void OAIRestoreDBClusterFromSnapshotMessage::setEnableIamDatabaseAuthentication(const bool &enable_iam_database_authentication) {
    m_enable_iam_database_authentication = enable_iam_database_authentication;
    m_enable_iam_database_authentication_isSet = true;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_enable_iam_database_authentication_Set() const{
    return m_enable_iam_database_authentication_isSet;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_enable_iam_database_authentication_Valid() const{
    return m_enable_iam_database_authentication_isValid;
}

QList OAIRestoreDBClusterFromSnapshotMessage::getEnableCloudwatchLogsExports() const {
    return m_enable_cloudwatch_logs_exports;
}
void OAIRestoreDBClusterFromSnapshotMessage::setEnableCloudwatchLogsExports(const QList &enable_cloudwatch_logs_exports) {
    m_enable_cloudwatch_logs_exports = enable_cloudwatch_logs_exports;
    m_enable_cloudwatch_logs_exports_isSet = true;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_enable_cloudwatch_logs_exports_Set() const{
    return m_enable_cloudwatch_logs_exports_isSet;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_enable_cloudwatch_logs_exports_Valid() const{
    return m_enable_cloudwatch_logs_exports_isValid;
}

QString OAIRestoreDBClusterFromSnapshotMessage::getDbClusterParameterGroupName() const {
    return m_db_cluster_parameter_group_name;
}
void OAIRestoreDBClusterFromSnapshotMessage::setDbClusterParameterGroupName(const QString &db_cluster_parameter_group_name) {
    m_db_cluster_parameter_group_name = db_cluster_parameter_group_name;
    m_db_cluster_parameter_group_name_isSet = true;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_db_cluster_parameter_group_name_Set() const{
    return m_db_cluster_parameter_group_name_isSet;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_db_cluster_parameter_group_name_Valid() const{
    return m_db_cluster_parameter_group_name_isValid;
}

bool OAIRestoreDBClusterFromSnapshotMessage::getDeletionProtection() const {
    return m_deletion_protection;
}
void OAIRestoreDBClusterFromSnapshotMessage::setDeletionProtection(const bool &deletion_protection) {
    m_deletion_protection = deletion_protection;
    m_deletion_protection_isSet = true;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_deletion_protection_Set() const{
    return m_deletion_protection_isSet;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_deletion_protection_Valid() const{
    return m_deletion_protection_isValid;
}

bool OAIRestoreDBClusterFromSnapshotMessage::getCopyTagsToSnapshot() const {
    return m_copy_tags_to_snapshot;
}
void OAIRestoreDBClusterFromSnapshotMessage::setCopyTagsToSnapshot(const bool &copy_tags_to_snapshot) {
    m_copy_tags_to_snapshot = copy_tags_to_snapshot;
    m_copy_tags_to_snapshot_isSet = true;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_copy_tags_to_snapshot_Set() const{
    return m_copy_tags_to_snapshot_isSet;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_copy_tags_to_snapshot_Valid() const{
    return m_copy_tags_to_snapshot_isValid;
}

OAIServerlessV2ScalingConfiguration OAIRestoreDBClusterFromSnapshotMessage::getServerlessV2ScalingConfiguration() const {
    return m_serverless_v2_scaling_configuration;
}
void OAIRestoreDBClusterFromSnapshotMessage::setServerlessV2ScalingConfiguration(const OAIServerlessV2ScalingConfiguration &serverless_v2_scaling_configuration) {
    m_serverless_v2_scaling_configuration = serverless_v2_scaling_configuration;
    m_serverless_v2_scaling_configuration_isSet = true;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_serverless_v2_scaling_configuration_Set() const{
    return m_serverless_v2_scaling_configuration_isSet;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_serverless_v2_scaling_configuration_Valid() const{
    return m_serverless_v2_scaling_configuration_isValid;
}

bool OAIRestoreDBClusterFromSnapshotMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability_zones.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_subnet_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_option_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_iam_database_authentication_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_cloudwatch_logs_exports.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_cluster_parameter_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletion_protection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_tags_to_snapshot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serverless_v2_scaling_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestoreDBClusterFromSnapshotMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_db_cluster_identifier_isValid && m_snapshot_identifier_isValid && m_engine_isValid && true;
}

} // namespace OpenAPI
