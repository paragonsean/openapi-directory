/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIModifyDBInstanceMessage.h
 *
 * 
 */

#ifndef OAIModifyDBInstanceMessage_H
#define OAIModifyDBInstanceMessage_H

#include <QJsonObject>

#include "OAIModifyDBInstanceMessage_CloudwatchLogsExportConfiguration.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIModifyDBInstanceMessage_CloudwatchLogsExportConfiguration;

class OAIModifyDBInstanceMessage : public OAIObject {
public:
    OAIModifyDBInstanceMessage();
    OAIModifyDBInstanceMessage(QString json);
    ~OAIModifyDBInstanceMessage() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDbInstanceIdentifier() const;
    void setDbInstanceIdentifier(const QString &db_instance_identifier);
    bool is_db_instance_identifier_Set() const;
    bool is_db_instance_identifier_Valid() const;

    qint32 getAllocatedStorage() const;
    void setAllocatedStorage(const qint32 &allocated_storage);
    bool is_allocated_storage_Set() const;
    bool is_allocated_storage_Valid() const;

    QString getDbInstanceClass() const;
    void setDbInstanceClass(const QString &db_instance_class);
    bool is_db_instance_class_Set() const;
    bool is_db_instance_class_Valid() const;

    QString getDbSubnetGroupName() const;
    void setDbSubnetGroupName(const QString &db_subnet_group_name);
    bool is_db_subnet_group_name_Set() const;
    bool is_db_subnet_group_name_Valid() const;

    QList getDbSecurityGroups() const;
    void setDbSecurityGroups(const QList &db_security_groups);
    bool is_db_security_groups_Set() const;
    bool is_db_security_groups_Valid() const;

    QList getVpcSecurityGroupIds() const;
    void setVpcSecurityGroupIds(const QList &vpc_security_group_ids);
    bool is_vpc_security_group_ids_Set() const;
    bool is_vpc_security_group_ids_Valid() const;

    bool getApplyImmediately() const;
    void setApplyImmediately(const bool &apply_immediately);
    bool is_apply_immediately_Set() const;
    bool is_apply_immediately_Valid() const;

    QString getMasterUserPassword() const;
    void setMasterUserPassword(const QString &master_user_password);
    bool is_master_user_password_Set() const;
    bool is_master_user_password_Valid() const;

    QString getDbParameterGroupName() const;
    void setDbParameterGroupName(const QString &db_parameter_group_name);
    bool is_db_parameter_group_name_Set() const;
    bool is_db_parameter_group_name_Valid() const;

    qint32 getBackupRetentionPeriod() const;
    void setBackupRetentionPeriod(const qint32 &backup_retention_period);
    bool is_backup_retention_period_Set() const;
    bool is_backup_retention_period_Valid() const;

    QString getPreferredBackupWindow() const;
    void setPreferredBackupWindow(const QString &preferred_backup_window);
    bool is_preferred_backup_window_Set() const;
    bool is_preferred_backup_window_Valid() const;

    QString getPreferredMaintenanceWindow() const;
    void setPreferredMaintenanceWindow(const QString &preferred_maintenance_window);
    bool is_preferred_maintenance_window_Set() const;
    bool is_preferred_maintenance_window_Valid() const;

    bool getMultiAz() const;
    void setMultiAz(const bool &multi_az);
    bool is_multi_az_Set() const;
    bool is_multi_az_Valid() const;

    QString getEngineVersion() const;
    void setEngineVersion(const QString &engine_version);
    bool is_engine_version_Set() const;
    bool is_engine_version_Valid() const;

    bool getAllowMajorVersionUpgrade() const;
    void setAllowMajorVersionUpgrade(const bool &allow_major_version_upgrade);
    bool is_allow_major_version_upgrade_Set() const;
    bool is_allow_major_version_upgrade_Valid() const;

    bool getAutoMinorVersionUpgrade() const;
    void setAutoMinorVersionUpgrade(const bool &auto_minor_version_upgrade);
    bool is_auto_minor_version_upgrade_Set() const;
    bool is_auto_minor_version_upgrade_Valid() const;

    QString getLicenseModel() const;
    void setLicenseModel(const QString &license_model);
    bool is_license_model_Set() const;
    bool is_license_model_Valid() const;

    qint32 getIops() const;
    void setIops(const qint32 &iops);
    bool is_iops_Set() const;
    bool is_iops_Valid() const;

    QString getOptionGroupName() const;
    void setOptionGroupName(const QString &option_group_name);
    bool is_option_group_name_Set() const;
    bool is_option_group_name_Valid() const;

    QString getNewDbInstanceIdentifier() const;
    void setNewDbInstanceIdentifier(const QString &new_db_instance_identifier);
    bool is_new_db_instance_identifier_Set() const;
    bool is_new_db_instance_identifier_Valid() const;

    QString getStorageType() const;
    void setStorageType(const QString &storage_type);
    bool is_storage_type_Set() const;
    bool is_storage_type_Valid() const;

    QString getTdeCredentialArn() const;
    void setTdeCredentialArn(const QString &tde_credential_arn);
    bool is_tde_credential_arn_Set() const;
    bool is_tde_credential_arn_Valid() const;

    QString getTdeCredentialPassword() const;
    void setTdeCredentialPassword(const QString &tde_credential_password);
    bool is_tde_credential_password_Set() const;
    bool is_tde_credential_password_Valid() const;

    QString getCaCertificateIdentifier() const;
    void setCaCertificateIdentifier(const QString &ca_certificate_identifier);
    bool is_ca_certificate_identifier_Set() const;
    bool is_ca_certificate_identifier_Valid() const;

    QString getDomain() const;
    void setDomain(const QString &domain);
    bool is_domain_Set() const;
    bool is_domain_Valid() const;

    bool getCopyTagsToSnapshot() const;
    void setCopyTagsToSnapshot(const bool &copy_tags_to_snapshot);
    bool is_copy_tags_to_snapshot_Set() const;
    bool is_copy_tags_to_snapshot_Valid() const;

    qint32 getMonitoringInterval() const;
    void setMonitoringInterval(const qint32 &monitoring_interval);
    bool is_monitoring_interval_Set() const;
    bool is_monitoring_interval_Valid() const;

    qint32 getDbPortNumber() const;
    void setDbPortNumber(const qint32 &db_port_number);
    bool is_db_port_number_Set() const;
    bool is_db_port_number_Valid() const;

    bool getPubliclyAccessible() const;
    void setPubliclyAccessible(const bool &publicly_accessible);
    bool is_publicly_accessible_Set() const;
    bool is_publicly_accessible_Valid() const;

    QString getMonitoringRoleArn() const;
    void setMonitoringRoleArn(const QString &monitoring_role_arn);
    bool is_monitoring_role_arn_Set() const;
    bool is_monitoring_role_arn_Valid() const;

    QString getDomainIamRoleName() const;
    void setDomainIamRoleName(const QString &domain_iam_role_name);
    bool is_domain_iam_role_name_Set() const;
    bool is_domain_iam_role_name_Valid() const;

    qint32 getPromotionTier() const;
    void setPromotionTier(const qint32 &promotion_tier);
    bool is_promotion_tier_Set() const;
    bool is_promotion_tier_Valid() const;

    bool getEnableIamDatabaseAuthentication() const;
    void setEnableIamDatabaseAuthentication(const bool &enable_iam_database_authentication);
    bool is_enable_iam_database_authentication_Set() const;
    bool is_enable_iam_database_authentication_Valid() const;

    bool getEnablePerformanceInsights() const;
    void setEnablePerformanceInsights(const bool &enable_performance_insights);
    bool is_enable_performance_insights_Set() const;
    bool is_enable_performance_insights_Valid() const;

    QString getPerformanceInsightsKmsKeyId() const;
    void setPerformanceInsightsKmsKeyId(const QString &performance_insights_kms_key_id);
    bool is_performance_insights_kms_key_id_Set() const;
    bool is_performance_insights_kms_key_id_Valid() const;

    OAIModifyDBInstanceMessage_CloudwatchLogsExportConfiguration getCloudwatchLogsExportConfiguration() const;
    void setCloudwatchLogsExportConfiguration(const OAIModifyDBInstanceMessage_CloudwatchLogsExportConfiguration &cloudwatch_logs_export_configuration);
    bool is_cloudwatch_logs_export_configuration_Set() const;
    bool is_cloudwatch_logs_export_configuration_Valid() const;

    bool getDeletionProtection() const;
    void setDeletionProtection(const bool &deletion_protection);
    bool is_deletion_protection_Set() const;
    bool is_deletion_protection_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_db_instance_identifier;
    bool m_db_instance_identifier_isSet;
    bool m_db_instance_identifier_isValid;

    qint32 m_allocated_storage;
    bool m_allocated_storage_isSet;
    bool m_allocated_storage_isValid;

    QString m_db_instance_class;
    bool m_db_instance_class_isSet;
    bool m_db_instance_class_isValid;

    QString m_db_subnet_group_name;
    bool m_db_subnet_group_name_isSet;
    bool m_db_subnet_group_name_isValid;

    QList m_db_security_groups;
    bool m_db_security_groups_isSet;
    bool m_db_security_groups_isValid;

    QList m_vpc_security_group_ids;
    bool m_vpc_security_group_ids_isSet;
    bool m_vpc_security_group_ids_isValid;

    bool m_apply_immediately;
    bool m_apply_immediately_isSet;
    bool m_apply_immediately_isValid;

    QString m_master_user_password;
    bool m_master_user_password_isSet;
    bool m_master_user_password_isValid;

    QString m_db_parameter_group_name;
    bool m_db_parameter_group_name_isSet;
    bool m_db_parameter_group_name_isValid;

    qint32 m_backup_retention_period;
    bool m_backup_retention_period_isSet;
    bool m_backup_retention_period_isValid;

    QString m_preferred_backup_window;
    bool m_preferred_backup_window_isSet;
    bool m_preferred_backup_window_isValid;

    QString m_preferred_maintenance_window;
    bool m_preferred_maintenance_window_isSet;
    bool m_preferred_maintenance_window_isValid;

    bool m_multi_az;
    bool m_multi_az_isSet;
    bool m_multi_az_isValid;

    QString m_engine_version;
    bool m_engine_version_isSet;
    bool m_engine_version_isValid;

    bool m_allow_major_version_upgrade;
    bool m_allow_major_version_upgrade_isSet;
    bool m_allow_major_version_upgrade_isValid;

    bool m_auto_minor_version_upgrade;
    bool m_auto_minor_version_upgrade_isSet;
    bool m_auto_minor_version_upgrade_isValid;

    QString m_license_model;
    bool m_license_model_isSet;
    bool m_license_model_isValid;

    qint32 m_iops;
    bool m_iops_isSet;
    bool m_iops_isValid;

    QString m_option_group_name;
    bool m_option_group_name_isSet;
    bool m_option_group_name_isValid;

    QString m_new_db_instance_identifier;
    bool m_new_db_instance_identifier_isSet;
    bool m_new_db_instance_identifier_isValid;

    QString m_storage_type;
    bool m_storage_type_isSet;
    bool m_storage_type_isValid;

    QString m_tde_credential_arn;
    bool m_tde_credential_arn_isSet;
    bool m_tde_credential_arn_isValid;

    QString m_tde_credential_password;
    bool m_tde_credential_password_isSet;
    bool m_tde_credential_password_isValid;

    QString m_ca_certificate_identifier;
    bool m_ca_certificate_identifier_isSet;
    bool m_ca_certificate_identifier_isValid;

    QString m_domain;
    bool m_domain_isSet;
    bool m_domain_isValid;

    bool m_copy_tags_to_snapshot;
    bool m_copy_tags_to_snapshot_isSet;
    bool m_copy_tags_to_snapshot_isValid;

    qint32 m_monitoring_interval;
    bool m_monitoring_interval_isSet;
    bool m_monitoring_interval_isValid;

    qint32 m_db_port_number;
    bool m_db_port_number_isSet;
    bool m_db_port_number_isValid;

    bool m_publicly_accessible;
    bool m_publicly_accessible_isSet;
    bool m_publicly_accessible_isValid;

    QString m_monitoring_role_arn;
    bool m_monitoring_role_arn_isSet;
    bool m_monitoring_role_arn_isValid;

    QString m_domain_iam_role_name;
    bool m_domain_iam_role_name_isSet;
    bool m_domain_iam_role_name_isValid;

    qint32 m_promotion_tier;
    bool m_promotion_tier_isSet;
    bool m_promotion_tier_isValid;

    bool m_enable_iam_database_authentication;
    bool m_enable_iam_database_authentication_isSet;
    bool m_enable_iam_database_authentication_isValid;

    bool m_enable_performance_insights;
    bool m_enable_performance_insights_isSet;
    bool m_enable_performance_insights_isValid;

    QString m_performance_insights_kms_key_id;
    bool m_performance_insights_kms_key_id_isSet;
    bool m_performance_insights_kms_key_id_isValid;

    OAIModifyDBInstanceMessage_CloudwatchLogsExportConfiguration m_cloudwatch_logs_export_configuration;
    bool m_cloudwatch_logs_export_configuration_isSet;
    bool m_cloudwatch_logs_export_configuration_isValid;

    bool m_deletion_protection;
    bool m_deletion_protection_isSet;
    bool m_deletion_protection_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIModifyDBInstanceMessage)

#endif // OAIModifyDBInstanceMessage_H
