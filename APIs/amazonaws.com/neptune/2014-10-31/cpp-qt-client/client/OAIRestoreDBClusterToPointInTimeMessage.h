/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRestoreDBClusterToPointInTimeMessage.h
 *
 * 
 */

#ifndef OAIRestoreDBClusterToPointInTimeMessage_H
#define OAIRestoreDBClusterToPointInTimeMessage_H

#include <QJsonObject>

#include "OAIServerlessV2ScalingConfiguration.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIServerlessV2ScalingConfiguration;

class OAIRestoreDBClusterToPointInTimeMessage : public OAIObject {
public:
    OAIRestoreDBClusterToPointInTimeMessage();
    OAIRestoreDBClusterToPointInTimeMessage(QString json);
    ~OAIRestoreDBClusterToPointInTimeMessage() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDbClusterIdentifier() const;
    void setDbClusterIdentifier(const QString &db_cluster_identifier);
    bool is_db_cluster_identifier_Set() const;
    bool is_db_cluster_identifier_Valid() const;

    QString getRestoreType() const;
    void setRestoreType(const QString &restore_type);
    bool is_restore_type_Set() const;
    bool is_restore_type_Valid() const;

    QString getSourceDbClusterIdentifier() const;
    void setSourceDbClusterIdentifier(const QString &source_db_cluster_identifier);
    bool is_source_db_cluster_identifier_Set() const;
    bool is_source_db_cluster_identifier_Valid() const;

    QDateTime getRestoreToTime() const;
    void setRestoreToTime(const QDateTime &restore_to_time);
    bool is_restore_to_time_Set() const;
    bool is_restore_to_time_Valid() const;

    bool getUseLatestRestorableTime() const;
    void setUseLatestRestorableTime(const bool &use_latest_restorable_time);
    bool is_use_latest_restorable_time_Set() const;
    bool is_use_latest_restorable_time_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    QString getDbSubnetGroupName() const;
    void setDbSubnetGroupName(const QString &db_subnet_group_name);
    bool is_db_subnet_group_name_Set() const;
    bool is_db_subnet_group_name_Valid() const;

    QString getOptionGroupName() const;
    void setOptionGroupName(const QString &option_group_name);
    bool is_option_group_name_Set() const;
    bool is_option_group_name_Valid() const;

    QList getVpcSecurityGroupIds() const;
    void setVpcSecurityGroupIds(const QList &vpc_security_group_ids);
    bool is_vpc_security_group_ids_Set() const;
    bool is_vpc_security_group_ids_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getKmsKeyId() const;
    void setKmsKeyId(const QString &kms_key_id);
    bool is_kms_key_id_Set() const;
    bool is_kms_key_id_Valid() const;

    bool getEnableIamDatabaseAuthentication() const;
    void setEnableIamDatabaseAuthentication(const bool &enable_iam_database_authentication);
    bool is_enable_iam_database_authentication_Set() const;
    bool is_enable_iam_database_authentication_Valid() const;

    QList getEnableCloudwatchLogsExports() const;
    void setEnableCloudwatchLogsExports(const QList &enable_cloudwatch_logs_exports);
    bool is_enable_cloudwatch_logs_exports_Set() const;
    bool is_enable_cloudwatch_logs_exports_Valid() const;

    QString getDbClusterParameterGroupName() const;
    void setDbClusterParameterGroupName(const QString &db_cluster_parameter_group_name);
    bool is_db_cluster_parameter_group_name_Set() const;
    bool is_db_cluster_parameter_group_name_Valid() const;

    bool getDeletionProtection() const;
    void setDeletionProtection(const bool &deletion_protection);
    bool is_deletion_protection_Set() const;
    bool is_deletion_protection_Valid() const;

    OAIServerlessV2ScalingConfiguration getServerlessV2ScalingConfiguration() const;
    void setServerlessV2ScalingConfiguration(const OAIServerlessV2ScalingConfiguration &serverless_v2_scaling_configuration);
    bool is_serverless_v2_scaling_configuration_Set() const;
    bool is_serverless_v2_scaling_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_db_cluster_identifier;
    bool m_db_cluster_identifier_isSet;
    bool m_db_cluster_identifier_isValid;

    QString m_restore_type;
    bool m_restore_type_isSet;
    bool m_restore_type_isValid;

    QString m_source_db_cluster_identifier;
    bool m_source_db_cluster_identifier_isSet;
    bool m_source_db_cluster_identifier_isValid;

    QDateTime m_restore_to_time;
    bool m_restore_to_time_isSet;
    bool m_restore_to_time_isValid;

    bool m_use_latest_restorable_time;
    bool m_use_latest_restorable_time_isSet;
    bool m_use_latest_restorable_time_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    QString m_db_subnet_group_name;
    bool m_db_subnet_group_name_isSet;
    bool m_db_subnet_group_name_isValid;

    QString m_option_group_name;
    bool m_option_group_name_isSet;
    bool m_option_group_name_isValid;

    QList m_vpc_security_group_ids;
    bool m_vpc_security_group_ids_isSet;
    bool m_vpc_security_group_ids_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_kms_key_id;
    bool m_kms_key_id_isSet;
    bool m_kms_key_id_isValid;

    bool m_enable_iam_database_authentication;
    bool m_enable_iam_database_authentication_isSet;
    bool m_enable_iam_database_authentication_isValid;

    QList m_enable_cloudwatch_logs_exports;
    bool m_enable_cloudwatch_logs_exports_isSet;
    bool m_enable_cloudwatch_logs_exports_isValid;

    QString m_db_cluster_parameter_group_name;
    bool m_db_cluster_parameter_group_name_isSet;
    bool m_db_cluster_parameter_group_name_isValid;

    bool m_deletion_protection;
    bool m_deletion_protection_isSet;
    bool m_deletion_protection_isValid;

    OAIServerlessV2ScalingConfiguration m_serverless_v2_scaling_configuration;
    bool m_serverless_v2_scaling_configuration_isSet;
    bool m_serverless_v2_scaling_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRestoreDBClusterToPointInTimeMessage)

#endif // OAIRestoreDBClusterToPointInTimeMessage_H
