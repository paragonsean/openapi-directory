/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDBCluster_PendingModifiedValues.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDBCluster_PendingModifiedValues::OAIDBCluster_PendingModifiedValues(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDBCluster_PendingModifiedValues::OAIDBCluster_PendingModifiedValues() {
    this->initializeModel();
}

OAIDBCluster_PendingModifiedValues::~OAIDBCluster_PendingModifiedValues() {}

void OAIDBCluster_PendingModifiedValues::initializeModel() {

    m_pending_cloudwatch_logs_exports_isSet = false;
    m_pending_cloudwatch_logs_exports_isValid = false;

    m_db_cluster_identifier_isSet = false;
    m_db_cluster_identifier_isValid = false;

    m_iam_database_authentication_enabled_isSet = false;
    m_iam_database_authentication_enabled_isValid = false;

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_backup_retention_period_isSet = false;
    m_backup_retention_period_isValid = false;

    m_allocated_storage_isSet = false;
    m_allocated_storage_isValid = false;

    m_iops_isSet = false;
    m_iops_isValid = false;
}

void OAIDBCluster_PendingModifiedValues::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDBCluster_PendingModifiedValues::fromJsonObject(QJsonObject json) {

    m_pending_cloudwatch_logs_exports_isValid = ::OpenAPI::fromJsonValue(m_pending_cloudwatch_logs_exports, json[QString("PendingCloudwatchLogsExports")]);
    m_pending_cloudwatch_logs_exports_isSet = !json[QString("PendingCloudwatchLogsExports")].isNull() && m_pending_cloudwatch_logs_exports_isValid;

    m_db_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_identifier, json[QString("DBClusterIdentifier")]);
    m_db_cluster_identifier_isSet = !json[QString("DBClusterIdentifier")].isNull() && m_db_cluster_identifier_isValid;

    m_iam_database_authentication_enabled_isValid = ::OpenAPI::fromJsonValue(m_iam_database_authentication_enabled, json[QString("IAMDatabaseAuthenticationEnabled")]);
    m_iam_database_authentication_enabled_isSet = !json[QString("IAMDatabaseAuthenticationEnabled")].isNull() && m_iam_database_authentication_enabled_isValid;

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("EngineVersion")]);
    m_engine_version_isSet = !json[QString("EngineVersion")].isNull() && m_engine_version_isValid;

    m_backup_retention_period_isValid = ::OpenAPI::fromJsonValue(m_backup_retention_period, json[QString("BackupRetentionPeriod")]);
    m_backup_retention_period_isSet = !json[QString("BackupRetentionPeriod")].isNull() && m_backup_retention_period_isValid;

    m_allocated_storage_isValid = ::OpenAPI::fromJsonValue(m_allocated_storage, json[QString("AllocatedStorage")]);
    m_allocated_storage_isSet = !json[QString("AllocatedStorage")].isNull() && m_allocated_storage_isValid;

    m_iops_isValid = ::OpenAPI::fromJsonValue(m_iops, json[QString("Iops")]);
    m_iops_isSet = !json[QString("Iops")].isNull() && m_iops_isValid;
}

QString OAIDBCluster_PendingModifiedValues::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDBCluster_PendingModifiedValues::asJsonObject() const {
    QJsonObject obj;
    if (m_pending_cloudwatch_logs_exports.isSet()) {
        obj.insert(QString("PendingCloudwatchLogsExports"), ::OpenAPI::toJsonValue(m_pending_cloudwatch_logs_exports));
    }
    if (m_db_cluster_identifier_isSet) {
        obj.insert(QString("DBClusterIdentifier"), ::OpenAPI::toJsonValue(m_db_cluster_identifier));
    }
    if (m_iam_database_authentication_enabled_isSet) {
        obj.insert(QString("IAMDatabaseAuthenticationEnabled"), ::OpenAPI::toJsonValue(m_iam_database_authentication_enabled));
    }
    if (m_engine_version_isSet) {
        obj.insert(QString("EngineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_backup_retention_period_isSet) {
        obj.insert(QString("BackupRetentionPeriod"), ::OpenAPI::toJsonValue(m_backup_retention_period));
    }
    if (m_allocated_storage_isSet) {
        obj.insert(QString("AllocatedStorage"), ::OpenAPI::toJsonValue(m_allocated_storage));
    }
    if (m_iops_isSet) {
        obj.insert(QString("Iops"), ::OpenAPI::toJsonValue(m_iops));
    }
    return obj;
}

OAIClusterPendingModifiedValues_PendingCloudwatchLogsExports OAIDBCluster_PendingModifiedValues::getPendingCloudwatchLogsExports() const {
    return m_pending_cloudwatch_logs_exports;
}
void OAIDBCluster_PendingModifiedValues::setPendingCloudwatchLogsExports(const OAIClusterPendingModifiedValues_PendingCloudwatchLogsExports &pending_cloudwatch_logs_exports) {
    m_pending_cloudwatch_logs_exports = pending_cloudwatch_logs_exports;
    m_pending_cloudwatch_logs_exports_isSet = true;
}

bool OAIDBCluster_PendingModifiedValues::is_pending_cloudwatch_logs_exports_Set() const{
    return m_pending_cloudwatch_logs_exports_isSet;
}

bool OAIDBCluster_PendingModifiedValues::is_pending_cloudwatch_logs_exports_Valid() const{
    return m_pending_cloudwatch_logs_exports_isValid;
}

QString OAIDBCluster_PendingModifiedValues::getDbClusterIdentifier() const {
    return m_db_cluster_identifier;
}
void OAIDBCluster_PendingModifiedValues::setDbClusterIdentifier(const QString &db_cluster_identifier) {
    m_db_cluster_identifier = db_cluster_identifier;
    m_db_cluster_identifier_isSet = true;
}

bool OAIDBCluster_PendingModifiedValues::is_db_cluster_identifier_Set() const{
    return m_db_cluster_identifier_isSet;
}

bool OAIDBCluster_PendingModifiedValues::is_db_cluster_identifier_Valid() const{
    return m_db_cluster_identifier_isValid;
}

bool OAIDBCluster_PendingModifiedValues::getIamDatabaseAuthenticationEnabled() const {
    return m_iam_database_authentication_enabled;
}
void OAIDBCluster_PendingModifiedValues::setIamDatabaseAuthenticationEnabled(const bool &iam_database_authentication_enabled) {
    m_iam_database_authentication_enabled = iam_database_authentication_enabled;
    m_iam_database_authentication_enabled_isSet = true;
}

bool OAIDBCluster_PendingModifiedValues::is_iam_database_authentication_enabled_Set() const{
    return m_iam_database_authentication_enabled_isSet;
}

bool OAIDBCluster_PendingModifiedValues::is_iam_database_authentication_enabled_Valid() const{
    return m_iam_database_authentication_enabled_isValid;
}

QString OAIDBCluster_PendingModifiedValues::getEngineVersion() const {
    return m_engine_version;
}
void OAIDBCluster_PendingModifiedValues::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAIDBCluster_PendingModifiedValues::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAIDBCluster_PendingModifiedValues::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

qint32 OAIDBCluster_PendingModifiedValues::getBackupRetentionPeriod() const {
    return m_backup_retention_period;
}
void OAIDBCluster_PendingModifiedValues::setBackupRetentionPeriod(const qint32 &backup_retention_period) {
    m_backup_retention_period = backup_retention_period;
    m_backup_retention_period_isSet = true;
}

bool OAIDBCluster_PendingModifiedValues::is_backup_retention_period_Set() const{
    return m_backup_retention_period_isSet;
}

bool OAIDBCluster_PendingModifiedValues::is_backup_retention_period_Valid() const{
    return m_backup_retention_period_isValid;
}

qint32 OAIDBCluster_PendingModifiedValues::getAllocatedStorage() const {
    return m_allocated_storage;
}
void OAIDBCluster_PendingModifiedValues::setAllocatedStorage(const qint32 &allocated_storage) {
    m_allocated_storage = allocated_storage;
    m_allocated_storage_isSet = true;
}

bool OAIDBCluster_PendingModifiedValues::is_allocated_storage_Set() const{
    return m_allocated_storage_isSet;
}

bool OAIDBCluster_PendingModifiedValues::is_allocated_storage_Valid() const{
    return m_allocated_storage_isValid;
}

qint32 OAIDBCluster_PendingModifiedValues::getIops() const {
    return m_iops;
}
void OAIDBCluster_PendingModifiedValues::setIops(const qint32 &iops) {
    m_iops = iops;
    m_iops_isSet = true;
}

bool OAIDBCluster_PendingModifiedValues::is_iops_Set() const{
    return m_iops_isSet;
}

bool OAIDBCluster_PendingModifiedValues::is_iops_Valid() const{
    return m_iops_isValid;
}

bool OAIDBCluster_PendingModifiedValues::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pending_cloudwatch_logs_exports.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_database_authentication_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_retention_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allocated_storage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iops_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDBCluster_PendingModifiedValues::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
