/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIParameter.h
 *
 * Specifies a parameter.
 */

#ifndef OAIParameter_H
#define OAIParameter_H

#include <QJsonObject>

#include "OAIApplyMethod.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIParameter : public OAIObject {
public:
    OAIParameter();
    OAIParameter(QString json);
    ~OAIParameter() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getParameterName() const;
    void setParameterName(const QString &parameter_name);
    bool is_parameter_name_Set() const;
    bool is_parameter_name_Valid() const;

    QString getParameterValue() const;
    void setParameterValue(const QString &parameter_value);
    bool is_parameter_value_Set() const;
    bool is_parameter_value_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getSource() const;
    void setSource(const QString &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    QString getApplyType() const;
    void setApplyType(const QString &apply_type);
    bool is_apply_type_Set() const;
    bool is_apply_type_Valid() const;

    QString getDataType() const;
    void setDataType(const QString &data_type);
    bool is_data_type_Set() const;
    bool is_data_type_Valid() const;

    QString getAllowedValues() const;
    void setAllowedValues(const QString &allowed_values);
    bool is_allowed_values_Set() const;
    bool is_allowed_values_Valid() const;

    bool getIsModifiable() const;
    void setIsModifiable(const bool &is_modifiable);
    bool is_is_modifiable_Set() const;
    bool is_is_modifiable_Valid() const;

    QString getMinimumEngineVersion() const;
    void setMinimumEngineVersion(const QString &minimum_engine_version);
    bool is_minimum_engine_version_Set() const;
    bool is_minimum_engine_version_Valid() const;

    OAIApplyMethod getApplyMethod() const;
    void setApplyMethod(const OAIApplyMethod &apply_method);
    bool is_apply_method_Set() const;
    bool is_apply_method_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_parameter_name;
    bool m_parameter_name_isSet;
    bool m_parameter_name_isValid;

    QString m_parameter_value;
    bool m_parameter_value_isSet;
    bool m_parameter_value_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_source;
    bool m_source_isSet;
    bool m_source_isValid;

    QString m_apply_type;
    bool m_apply_type_isSet;
    bool m_apply_type_isValid;

    QString m_data_type;
    bool m_data_type_isSet;
    bool m_data_type_isValid;

    QString m_allowed_values;
    bool m_allowed_values_isSet;
    bool m_allowed_values_isValid;

    bool m_is_modifiable;
    bool m_is_modifiable_isSet;
    bool m_is_modifiable_isValid;

    QString m_minimum_engine_version;
    bool m_minimum_engine_version_isSet;
    bool m_minimum_engine_version_isValid;

    OAIApplyMethod m_apply_method;
    bool m_apply_method_isSet;
    bool m_apply_method_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIParameter)

#endif // OAIParameter_H
