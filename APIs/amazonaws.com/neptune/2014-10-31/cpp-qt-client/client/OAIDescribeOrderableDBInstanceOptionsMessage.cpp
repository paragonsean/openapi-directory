/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeOrderableDBInstanceOptionsMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeOrderableDBInstanceOptionsMessage::OAIDescribeOrderableDBInstanceOptionsMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeOrderableDBInstanceOptionsMessage::OAIDescribeOrderableDBInstanceOptionsMessage() {
    this->initializeModel();
}

OAIDescribeOrderableDBInstanceOptionsMessage::~OAIDescribeOrderableDBInstanceOptionsMessage() {}

void OAIDescribeOrderableDBInstanceOptionsMessage::initializeModel() {

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_db_instance_class_isSet = false;
    m_db_instance_class_isValid = false;

    m_license_model_isSet = false;
    m_license_model_isValid = false;

    m_vpc_isSet = false;
    m_vpc_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_max_records_isSet = false;
    m_max_records_isValid = false;

    m_marker_isSet = false;
    m_marker_isValid = false;
}

void OAIDescribeOrderableDBInstanceOptionsMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeOrderableDBInstanceOptionsMessage::fromJsonObject(QJsonObject json) {

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("Engine")]);
    m_engine_isSet = !json[QString("Engine")].isNull() && m_engine_isValid;

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("EngineVersion")]);
    m_engine_version_isSet = !json[QString("EngineVersion")].isNull() && m_engine_version_isValid;

    m_db_instance_class_isValid = ::OpenAPI::fromJsonValue(m_db_instance_class, json[QString("DBInstanceClass")]);
    m_db_instance_class_isSet = !json[QString("DBInstanceClass")].isNull() && m_db_instance_class_isValid;

    m_license_model_isValid = ::OpenAPI::fromJsonValue(m_license_model, json[QString("LicenseModel")]);
    m_license_model_isSet = !json[QString("LicenseModel")].isNull() && m_license_model_isValid;

    m_vpc_isValid = ::OpenAPI::fromJsonValue(m_vpc, json[QString("Vpc")]);
    m_vpc_isSet = !json[QString("Vpc")].isNull() && m_vpc_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("Filters")]);
    m_filters_isSet = !json[QString("Filters")].isNull() && m_filters_isValid;

    m_max_records_isValid = ::OpenAPI::fromJsonValue(m_max_records, json[QString("MaxRecords")]);
    m_max_records_isSet = !json[QString("MaxRecords")].isNull() && m_max_records_isValid;

    m_marker_isValid = ::OpenAPI::fromJsonValue(m_marker, json[QString("Marker")]);
    m_marker_isSet = !json[QString("Marker")].isNull() && m_marker_isValid;
}

QString OAIDescribeOrderableDBInstanceOptionsMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeOrderableDBInstanceOptionsMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_engine_isSet) {
        obj.insert(QString("Engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_engine_version_isSet) {
        obj.insert(QString("EngineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_db_instance_class_isSet) {
        obj.insert(QString("DBInstanceClass"), ::OpenAPI::toJsonValue(m_db_instance_class));
    }
    if (m_license_model_isSet) {
        obj.insert(QString("LicenseModel"), ::OpenAPI::toJsonValue(m_license_model));
    }
    if (m_vpc_isSet) {
        obj.insert(QString("Vpc"), ::OpenAPI::toJsonValue(m_vpc));
    }
    if (m_filters.isSet()) {
        obj.insert(QString("Filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_max_records_isSet) {
        obj.insert(QString("MaxRecords"), ::OpenAPI::toJsonValue(m_max_records));
    }
    if (m_marker_isSet) {
        obj.insert(QString("Marker"), ::OpenAPI::toJsonValue(m_marker));
    }
    return obj;
}

QString OAIDescribeOrderableDBInstanceOptionsMessage::getEngine() const {
    return m_engine;
}
void OAIDescribeOrderableDBInstanceOptionsMessage::setEngine(const QString &engine) {
    m_engine = engine;
    m_engine_isSet = true;
}

bool OAIDescribeOrderableDBInstanceOptionsMessage::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAIDescribeOrderableDBInstanceOptionsMessage::is_engine_Valid() const{
    return m_engine_isValid;
}

QString OAIDescribeOrderableDBInstanceOptionsMessage::getEngineVersion() const {
    return m_engine_version;
}
void OAIDescribeOrderableDBInstanceOptionsMessage::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAIDescribeOrderableDBInstanceOptionsMessage::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAIDescribeOrderableDBInstanceOptionsMessage::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

QString OAIDescribeOrderableDBInstanceOptionsMessage::getDbInstanceClass() const {
    return m_db_instance_class;
}
void OAIDescribeOrderableDBInstanceOptionsMessage::setDbInstanceClass(const QString &db_instance_class) {
    m_db_instance_class = db_instance_class;
    m_db_instance_class_isSet = true;
}

bool OAIDescribeOrderableDBInstanceOptionsMessage::is_db_instance_class_Set() const{
    return m_db_instance_class_isSet;
}

bool OAIDescribeOrderableDBInstanceOptionsMessage::is_db_instance_class_Valid() const{
    return m_db_instance_class_isValid;
}

QString OAIDescribeOrderableDBInstanceOptionsMessage::getLicenseModel() const {
    return m_license_model;
}
void OAIDescribeOrderableDBInstanceOptionsMessage::setLicenseModel(const QString &license_model) {
    m_license_model = license_model;
    m_license_model_isSet = true;
}

bool OAIDescribeOrderableDBInstanceOptionsMessage::is_license_model_Set() const{
    return m_license_model_isSet;
}

bool OAIDescribeOrderableDBInstanceOptionsMessage::is_license_model_Valid() const{
    return m_license_model_isValid;
}

bool OAIDescribeOrderableDBInstanceOptionsMessage::getVpc() const {
    return m_vpc;
}
void OAIDescribeOrderableDBInstanceOptionsMessage::setVpc(const bool &vpc) {
    m_vpc = vpc;
    m_vpc_isSet = true;
}

bool OAIDescribeOrderableDBInstanceOptionsMessage::is_vpc_Set() const{
    return m_vpc_isSet;
}

bool OAIDescribeOrderableDBInstanceOptionsMessage::is_vpc_Valid() const{
    return m_vpc_isValid;
}

QList OAIDescribeOrderableDBInstanceOptionsMessage::getFilters() const {
    return m_filters;
}
void OAIDescribeOrderableDBInstanceOptionsMessage::setFilters(const QList &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIDescribeOrderableDBInstanceOptionsMessage::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIDescribeOrderableDBInstanceOptionsMessage::is_filters_Valid() const{
    return m_filters_isValid;
}

qint32 OAIDescribeOrderableDBInstanceOptionsMessage::getMaxRecords() const {
    return m_max_records;
}
void OAIDescribeOrderableDBInstanceOptionsMessage::setMaxRecords(const qint32 &max_records) {
    m_max_records = max_records;
    m_max_records_isSet = true;
}

bool OAIDescribeOrderableDBInstanceOptionsMessage::is_max_records_Set() const{
    return m_max_records_isSet;
}

bool OAIDescribeOrderableDBInstanceOptionsMessage::is_max_records_Valid() const{
    return m_max_records_isValid;
}

QString OAIDescribeOrderableDBInstanceOptionsMessage::getMarker() const {
    return m_marker;
}
void OAIDescribeOrderableDBInstanceOptionsMessage::setMarker(const QString &marker) {
    m_marker = marker;
    m_marker_isSet = true;
}

bool OAIDescribeOrderableDBInstanceOptionsMessage::is_marker_Set() const{
    return m_marker_isSet;
}

bool OAIDescribeOrderableDBInstanceOptionsMessage::is_marker_Valid() const{
    return m_marker_isValid;
}

bool OAIDescribeOrderableDBInstanceOptionsMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_instance_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_records_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marker_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeOrderableDBInstanceOptionsMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_engine_isValid && true;
}

} // namespace OpenAPI
