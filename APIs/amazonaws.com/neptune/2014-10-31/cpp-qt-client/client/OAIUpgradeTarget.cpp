/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpgradeTarget.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpgradeTarget::OAIUpgradeTarget(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpgradeTarget::OAIUpgradeTarget() {
    this->initializeModel();
}

OAIUpgradeTarget::~OAIUpgradeTarget() {}

void OAIUpgradeTarget::initializeModel() {

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_auto_upgrade_isSet = false;
    m_auto_upgrade_isValid = false;

    m_is_major_version_upgrade_isSet = false;
    m_is_major_version_upgrade_isValid = false;

    m_supports_global_databases_isSet = false;
    m_supports_global_databases_isValid = false;
}

void OAIUpgradeTarget::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpgradeTarget::fromJsonObject(QJsonObject json) {

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("Engine")]);
    m_engine_isSet = !json[QString("Engine")].isNull() && m_engine_isValid;

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("EngineVersion")]);
    m_engine_version_isSet = !json[QString("EngineVersion")].isNull() && m_engine_version_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_auto_upgrade_isValid = ::OpenAPI::fromJsonValue(m_auto_upgrade, json[QString("AutoUpgrade")]);
    m_auto_upgrade_isSet = !json[QString("AutoUpgrade")].isNull() && m_auto_upgrade_isValid;

    m_is_major_version_upgrade_isValid = ::OpenAPI::fromJsonValue(m_is_major_version_upgrade, json[QString("IsMajorVersionUpgrade")]);
    m_is_major_version_upgrade_isSet = !json[QString("IsMajorVersionUpgrade")].isNull() && m_is_major_version_upgrade_isValid;

    m_supports_global_databases_isValid = ::OpenAPI::fromJsonValue(m_supports_global_databases, json[QString("SupportsGlobalDatabases")]);
    m_supports_global_databases_isSet = !json[QString("SupportsGlobalDatabases")].isNull() && m_supports_global_databases_isValid;
}

QString OAIUpgradeTarget::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpgradeTarget::asJsonObject() const {
    QJsonObject obj;
    if (m_engine_isSet) {
        obj.insert(QString("Engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_engine_version_isSet) {
        obj.insert(QString("EngineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_auto_upgrade_isSet) {
        obj.insert(QString("AutoUpgrade"), ::OpenAPI::toJsonValue(m_auto_upgrade));
    }
    if (m_is_major_version_upgrade_isSet) {
        obj.insert(QString("IsMajorVersionUpgrade"), ::OpenAPI::toJsonValue(m_is_major_version_upgrade));
    }
    if (m_supports_global_databases_isSet) {
        obj.insert(QString("SupportsGlobalDatabases"), ::OpenAPI::toJsonValue(m_supports_global_databases));
    }
    return obj;
}

QString OAIUpgradeTarget::getEngine() const {
    return m_engine;
}
void OAIUpgradeTarget::setEngine(const QString &engine) {
    m_engine = engine;
    m_engine_isSet = true;
}

bool OAIUpgradeTarget::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAIUpgradeTarget::is_engine_Valid() const{
    return m_engine_isValid;
}

QString OAIUpgradeTarget::getEngineVersion() const {
    return m_engine_version;
}
void OAIUpgradeTarget::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAIUpgradeTarget::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAIUpgradeTarget::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

QString OAIUpgradeTarget::getDescription() const {
    return m_description;
}
void OAIUpgradeTarget::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpgradeTarget::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpgradeTarget::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIUpgradeTarget::getAutoUpgrade() const {
    return m_auto_upgrade;
}
void OAIUpgradeTarget::setAutoUpgrade(const bool &auto_upgrade) {
    m_auto_upgrade = auto_upgrade;
    m_auto_upgrade_isSet = true;
}

bool OAIUpgradeTarget::is_auto_upgrade_Set() const{
    return m_auto_upgrade_isSet;
}

bool OAIUpgradeTarget::is_auto_upgrade_Valid() const{
    return m_auto_upgrade_isValid;
}

bool OAIUpgradeTarget::getIsMajorVersionUpgrade() const {
    return m_is_major_version_upgrade;
}
void OAIUpgradeTarget::setIsMajorVersionUpgrade(const bool &is_major_version_upgrade) {
    m_is_major_version_upgrade = is_major_version_upgrade;
    m_is_major_version_upgrade_isSet = true;
}

bool OAIUpgradeTarget::is_is_major_version_upgrade_Set() const{
    return m_is_major_version_upgrade_isSet;
}

bool OAIUpgradeTarget::is_is_major_version_upgrade_Valid() const{
    return m_is_major_version_upgrade_isValid;
}

bool OAIUpgradeTarget::getSupportsGlobalDatabases() const {
    return m_supports_global_databases;
}
void OAIUpgradeTarget::setSupportsGlobalDatabases(const bool &supports_global_databases) {
    m_supports_global_databases = supports_global_databases;
    m_supports_global_databases_isSet = true;
}

bool OAIUpgradeTarget::is_supports_global_databases_Set() const{
    return m_supports_global_databases_isSet;
}

bool OAIUpgradeTarget::is_supports_global_databases_Valid() const{
    return m_supports_global_databases_isValid;
}

bool OAIUpgradeTarget::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_upgrade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_major_version_upgrade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_global_databases_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpgradeTarget::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
