/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModifyDBInstanceMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModifyDBInstanceMessage::OAIModifyDBInstanceMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModifyDBInstanceMessage::OAIModifyDBInstanceMessage() {
    this->initializeModel();
}

OAIModifyDBInstanceMessage::~OAIModifyDBInstanceMessage() {}

void OAIModifyDBInstanceMessage::initializeModel() {

    m_db_instance_identifier_isSet = false;
    m_db_instance_identifier_isValid = false;

    m_allocated_storage_isSet = false;
    m_allocated_storage_isValid = false;

    m_db_instance_class_isSet = false;
    m_db_instance_class_isValid = false;

    m_db_subnet_group_name_isSet = false;
    m_db_subnet_group_name_isValid = false;

    m_db_security_groups_isSet = false;
    m_db_security_groups_isValid = false;

    m_vpc_security_group_ids_isSet = false;
    m_vpc_security_group_ids_isValid = false;

    m_apply_immediately_isSet = false;
    m_apply_immediately_isValid = false;

    m_master_user_password_isSet = false;
    m_master_user_password_isValid = false;

    m_db_parameter_group_name_isSet = false;
    m_db_parameter_group_name_isValid = false;

    m_backup_retention_period_isSet = false;
    m_backup_retention_period_isValid = false;

    m_preferred_backup_window_isSet = false;
    m_preferred_backup_window_isValid = false;

    m_preferred_maintenance_window_isSet = false;
    m_preferred_maintenance_window_isValid = false;

    m_multi_az_isSet = false;
    m_multi_az_isValid = false;

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_allow_major_version_upgrade_isSet = false;
    m_allow_major_version_upgrade_isValid = false;

    m_auto_minor_version_upgrade_isSet = false;
    m_auto_minor_version_upgrade_isValid = false;

    m_license_model_isSet = false;
    m_license_model_isValid = false;

    m_iops_isSet = false;
    m_iops_isValid = false;

    m_option_group_name_isSet = false;
    m_option_group_name_isValid = false;

    m_new_db_instance_identifier_isSet = false;
    m_new_db_instance_identifier_isValid = false;

    m_storage_type_isSet = false;
    m_storage_type_isValid = false;

    m_tde_credential_arn_isSet = false;
    m_tde_credential_arn_isValid = false;

    m_tde_credential_password_isSet = false;
    m_tde_credential_password_isValid = false;

    m_ca_certificate_identifier_isSet = false;
    m_ca_certificate_identifier_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_copy_tags_to_snapshot_isSet = false;
    m_copy_tags_to_snapshot_isValid = false;

    m_monitoring_interval_isSet = false;
    m_monitoring_interval_isValid = false;

    m_db_port_number_isSet = false;
    m_db_port_number_isValid = false;

    m_publicly_accessible_isSet = false;
    m_publicly_accessible_isValid = false;

    m_monitoring_role_arn_isSet = false;
    m_monitoring_role_arn_isValid = false;

    m_domain_iam_role_name_isSet = false;
    m_domain_iam_role_name_isValid = false;

    m_promotion_tier_isSet = false;
    m_promotion_tier_isValid = false;

    m_enable_iam_database_authentication_isSet = false;
    m_enable_iam_database_authentication_isValid = false;

    m_enable_performance_insights_isSet = false;
    m_enable_performance_insights_isValid = false;

    m_performance_insights_kms_key_id_isSet = false;
    m_performance_insights_kms_key_id_isValid = false;

    m_cloudwatch_logs_export_configuration_isSet = false;
    m_cloudwatch_logs_export_configuration_isValid = false;

    m_deletion_protection_isSet = false;
    m_deletion_protection_isValid = false;
}

void OAIModifyDBInstanceMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModifyDBInstanceMessage::fromJsonObject(QJsonObject json) {

    m_db_instance_identifier_isValid = ::OpenAPI::fromJsonValue(m_db_instance_identifier, json[QString("DBInstanceIdentifier")]);
    m_db_instance_identifier_isSet = !json[QString("DBInstanceIdentifier")].isNull() && m_db_instance_identifier_isValid;

    m_allocated_storage_isValid = ::OpenAPI::fromJsonValue(m_allocated_storage, json[QString("AllocatedStorage")]);
    m_allocated_storage_isSet = !json[QString("AllocatedStorage")].isNull() && m_allocated_storage_isValid;

    m_db_instance_class_isValid = ::OpenAPI::fromJsonValue(m_db_instance_class, json[QString("DBInstanceClass")]);
    m_db_instance_class_isSet = !json[QString("DBInstanceClass")].isNull() && m_db_instance_class_isValid;

    m_db_subnet_group_name_isValid = ::OpenAPI::fromJsonValue(m_db_subnet_group_name, json[QString("DBSubnetGroupName")]);
    m_db_subnet_group_name_isSet = !json[QString("DBSubnetGroupName")].isNull() && m_db_subnet_group_name_isValid;

    m_db_security_groups_isValid = ::OpenAPI::fromJsonValue(m_db_security_groups, json[QString("DBSecurityGroups")]);
    m_db_security_groups_isSet = !json[QString("DBSecurityGroups")].isNull() && m_db_security_groups_isValid;

    m_vpc_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_vpc_security_group_ids, json[QString("VpcSecurityGroupIds")]);
    m_vpc_security_group_ids_isSet = !json[QString("VpcSecurityGroupIds")].isNull() && m_vpc_security_group_ids_isValid;

    m_apply_immediately_isValid = ::OpenAPI::fromJsonValue(m_apply_immediately, json[QString("ApplyImmediately")]);
    m_apply_immediately_isSet = !json[QString("ApplyImmediately")].isNull() && m_apply_immediately_isValid;

    m_master_user_password_isValid = ::OpenAPI::fromJsonValue(m_master_user_password, json[QString("MasterUserPassword")]);
    m_master_user_password_isSet = !json[QString("MasterUserPassword")].isNull() && m_master_user_password_isValid;

    m_db_parameter_group_name_isValid = ::OpenAPI::fromJsonValue(m_db_parameter_group_name, json[QString("DBParameterGroupName")]);
    m_db_parameter_group_name_isSet = !json[QString("DBParameterGroupName")].isNull() && m_db_parameter_group_name_isValid;

    m_backup_retention_period_isValid = ::OpenAPI::fromJsonValue(m_backup_retention_period, json[QString("BackupRetentionPeriod")]);
    m_backup_retention_period_isSet = !json[QString("BackupRetentionPeriod")].isNull() && m_backup_retention_period_isValid;

    m_preferred_backup_window_isValid = ::OpenAPI::fromJsonValue(m_preferred_backup_window, json[QString("PreferredBackupWindow")]);
    m_preferred_backup_window_isSet = !json[QString("PreferredBackupWindow")].isNull() && m_preferred_backup_window_isValid;

    m_preferred_maintenance_window_isValid = ::OpenAPI::fromJsonValue(m_preferred_maintenance_window, json[QString("PreferredMaintenanceWindow")]);
    m_preferred_maintenance_window_isSet = !json[QString("PreferredMaintenanceWindow")].isNull() && m_preferred_maintenance_window_isValid;

    m_multi_az_isValid = ::OpenAPI::fromJsonValue(m_multi_az, json[QString("MultiAZ")]);
    m_multi_az_isSet = !json[QString("MultiAZ")].isNull() && m_multi_az_isValid;

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("EngineVersion")]);
    m_engine_version_isSet = !json[QString("EngineVersion")].isNull() && m_engine_version_isValid;

    m_allow_major_version_upgrade_isValid = ::OpenAPI::fromJsonValue(m_allow_major_version_upgrade, json[QString("AllowMajorVersionUpgrade")]);
    m_allow_major_version_upgrade_isSet = !json[QString("AllowMajorVersionUpgrade")].isNull() && m_allow_major_version_upgrade_isValid;

    m_auto_minor_version_upgrade_isValid = ::OpenAPI::fromJsonValue(m_auto_minor_version_upgrade, json[QString("AutoMinorVersionUpgrade")]);
    m_auto_minor_version_upgrade_isSet = !json[QString("AutoMinorVersionUpgrade")].isNull() && m_auto_minor_version_upgrade_isValid;

    m_license_model_isValid = ::OpenAPI::fromJsonValue(m_license_model, json[QString("LicenseModel")]);
    m_license_model_isSet = !json[QString("LicenseModel")].isNull() && m_license_model_isValid;

    m_iops_isValid = ::OpenAPI::fromJsonValue(m_iops, json[QString("Iops")]);
    m_iops_isSet = !json[QString("Iops")].isNull() && m_iops_isValid;

    m_option_group_name_isValid = ::OpenAPI::fromJsonValue(m_option_group_name, json[QString("OptionGroupName")]);
    m_option_group_name_isSet = !json[QString("OptionGroupName")].isNull() && m_option_group_name_isValid;

    m_new_db_instance_identifier_isValid = ::OpenAPI::fromJsonValue(m_new_db_instance_identifier, json[QString("NewDBInstanceIdentifier")]);
    m_new_db_instance_identifier_isSet = !json[QString("NewDBInstanceIdentifier")].isNull() && m_new_db_instance_identifier_isValid;

    m_storage_type_isValid = ::OpenAPI::fromJsonValue(m_storage_type, json[QString("StorageType")]);
    m_storage_type_isSet = !json[QString("StorageType")].isNull() && m_storage_type_isValid;

    m_tde_credential_arn_isValid = ::OpenAPI::fromJsonValue(m_tde_credential_arn, json[QString("TdeCredentialArn")]);
    m_tde_credential_arn_isSet = !json[QString("TdeCredentialArn")].isNull() && m_tde_credential_arn_isValid;

    m_tde_credential_password_isValid = ::OpenAPI::fromJsonValue(m_tde_credential_password, json[QString("TdeCredentialPassword")]);
    m_tde_credential_password_isSet = !json[QString("TdeCredentialPassword")].isNull() && m_tde_credential_password_isValid;

    m_ca_certificate_identifier_isValid = ::OpenAPI::fromJsonValue(m_ca_certificate_identifier, json[QString("CACertificateIdentifier")]);
    m_ca_certificate_identifier_isSet = !json[QString("CACertificateIdentifier")].isNull() && m_ca_certificate_identifier_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("Domain")]);
    m_domain_isSet = !json[QString("Domain")].isNull() && m_domain_isValid;

    m_copy_tags_to_snapshot_isValid = ::OpenAPI::fromJsonValue(m_copy_tags_to_snapshot, json[QString("CopyTagsToSnapshot")]);
    m_copy_tags_to_snapshot_isSet = !json[QString("CopyTagsToSnapshot")].isNull() && m_copy_tags_to_snapshot_isValid;

    m_monitoring_interval_isValid = ::OpenAPI::fromJsonValue(m_monitoring_interval, json[QString("MonitoringInterval")]);
    m_monitoring_interval_isSet = !json[QString("MonitoringInterval")].isNull() && m_monitoring_interval_isValid;

    m_db_port_number_isValid = ::OpenAPI::fromJsonValue(m_db_port_number, json[QString("DBPortNumber")]);
    m_db_port_number_isSet = !json[QString("DBPortNumber")].isNull() && m_db_port_number_isValid;

    m_publicly_accessible_isValid = ::OpenAPI::fromJsonValue(m_publicly_accessible, json[QString("PubliclyAccessible")]);
    m_publicly_accessible_isSet = !json[QString("PubliclyAccessible")].isNull() && m_publicly_accessible_isValid;

    m_monitoring_role_arn_isValid = ::OpenAPI::fromJsonValue(m_monitoring_role_arn, json[QString("MonitoringRoleArn")]);
    m_monitoring_role_arn_isSet = !json[QString("MonitoringRoleArn")].isNull() && m_monitoring_role_arn_isValid;

    m_domain_iam_role_name_isValid = ::OpenAPI::fromJsonValue(m_domain_iam_role_name, json[QString("DomainIAMRoleName")]);
    m_domain_iam_role_name_isSet = !json[QString("DomainIAMRoleName")].isNull() && m_domain_iam_role_name_isValid;

    m_promotion_tier_isValid = ::OpenAPI::fromJsonValue(m_promotion_tier, json[QString("PromotionTier")]);
    m_promotion_tier_isSet = !json[QString("PromotionTier")].isNull() && m_promotion_tier_isValid;

    m_enable_iam_database_authentication_isValid = ::OpenAPI::fromJsonValue(m_enable_iam_database_authentication, json[QString("EnableIAMDatabaseAuthentication")]);
    m_enable_iam_database_authentication_isSet = !json[QString("EnableIAMDatabaseAuthentication")].isNull() && m_enable_iam_database_authentication_isValid;

    m_enable_performance_insights_isValid = ::OpenAPI::fromJsonValue(m_enable_performance_insights, json[QString("EnablePerformanceInsights")]);
    m_enable_performance_insights_isSet = !json[QString("EnablePerformanceInsights")].isNull() && m_enable_performance_insights_isValid;

    m_performance_insights_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_performance_insights_kms_key_id, json[QString("PerformanceInsightsKMSKeyId")]);
    m_performance_insights_kms_key_id_isSet = !json[QString("PerformanceInsightsKMSKeyId")].isNull() && m_performance_insights_kms_key_id_isValid;

    m_cloudwatch_logs_export_configuration_isValid = ::OpenAPI::fromJsonValue(m_cloudwatch_logs_export_configuration, json[QString("CloudwatchLogsExportConfiguration")]);
    m_cloudwatch_logs_export_configuration_isSet = !json[QString("CloudwatchLogsExportConfiguration")].isNull() && m_cloudwatch_logs_export_configuration_isValid;

    m_deletion_protection_isValid = ::OpenAPI::fromJsonValue(m_deletion_protection, json[QString("DeletionProtection")]);
    m_deletion_protection_isSet = !json[QString("DeletionProtection")].isNull() && m_deletion_protection_isValid;
}

QString OAIModifyDBInstanceMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModifyDBInstanceMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_db_instance_identifier_isSet) {
        obj.insert(QString("DBInstanceIdentifier"), ::OpenAPI::toJsonValue(m_db_instance_identifier));
    }
    if (m_allocated_storage_isSet) {
        obj.insert(QString("AllocatedStorage"), ::OpenAPI::toJsonValue(m_allocated_storage));
    }
    if (m_db_instance_class_isSet) {
        obj.insert(QString("DBInstanceClass"), ::OpenAPI::toJsonValue(m_db_instance_class));
    }
    if (m_db_subnet_group_name_isSet) {
        obj.insert(QString("DBSubnetGroupName"), ::OpenAPI::toJsonValue(m_db_subnet_group_name));
    }
    if (m_db_security_groups.isSet()) {
        obj.insert(QString("DBSecurityGroups"), ::OpenAPI::toJsonValue(m_db_security_groups));
    }
    if (m_vpc_security_group_ids.isSet()) {
        obj.insert(QString("VpcSecurityGroupIds"), ::OpenAPI::toJsonValue(m_vpc_security_group_ids));
    }
    if (m_apply_immediately_isSet) {
        obj.insert(QString("ApplyImmediately"), ::OpenAPI::toJsonValue(m_apply_immediately));
    }
    if (m_master_user_password_isSet) {
        obj.insert(QString("MasterUserPassword"), ::OpenAPI::toJsonValue(m_master_user_password));
    }
    if (m_db_parameter_group_name_isSet) {
        obj.insert(QString("DBParameterGroupName"), ::OpenAPI::toJsonValue(m_db_parameter_group_name));
    }
    if (m_backup_retention_period_isSet) {
        obj.insert(QString("BackupRetentionPeriod"), ::OpenAPI::toJsonValue(m_backup_retention_period));
    }
    if (m_preferred_backup_window_isSet) {
        obj.insert(QString("PreferredBackupWindow"), ::OpenAPI::toJsonValue(m_preferred_backup_window));
    }
    if (m_preferred_maintenance_window_isSet) {
        obj.insert(QString("PreferredMaintenanceWindow"), ::OpenAPI::toJsonValue(m_preferred_maintenance_window));
    }
    if (m_multi_az_isSet) {
        obj.insert(QString("MultiAZ"), ::OpenAPI::toJsonValue(m_multi_az));
    }
    if (m_engine_version_isSet) {
        obj.insert(QString("EngineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_allow_major_version_upgrade_isSet) {
        obj.insert(QString("AllowMajorVersionUpgrade"), ::OpenAPI::toJsonValue(m_allow_major_version_upgrade));
    }
    if (m_auto_minor_version_upgrade_isSet) {
        obj.insert(QString("AutoMinorVersionUpgrade"), ::OpenAPI::toJsonValue(m_auto_minor_version_upgrade));
    }
    if (m_license_model_isSet) {
        obj.insert(QString("LicenseModel"), ::OpenAPI::toJsonValue(m_license_model));
    }
    if (m_iops_isSet) {
        obj.insert(QString("Iops"), ::OpenAPI::toJsonValue(m_iops));
    }
    if (m_option_group_name_isSet) {
        obj.insert(QString("OptionGroupName"), ::OpenAPI::toJsonValue(m_option_group_name));
    }
    if (m_new_db_instance_identifier_isSet) {
        obj.insert(QString("NewDBInstanceIdentifier"), ::OpenAPI::toJsonValue(m_new_db_instance_identifier));
    }
    if (m_storage_type_isSet) {
        obj.insert(QString("StorageType"), ::OpenAPI::toJsonValue(m_storage_type));
    }
    if (m_tde_credential_arn_isSet) {
        obj.insert(QString("TdeCredentialArn"), ::OpenAPI::toJsonValue(m_tde_credential_arn));
    }
    if (m_tde_credential_password_isSet) {
        obj.insert(QString("TdeCredentialPassword"), ::OpenAPI::toJsonValue(m_tde_credential_password));
    }
    if (m_ca_certificate_identifier_isSet) {
        obj.insert(QString("CACertificateIdentifier"), ::OpenAPI::toJsonValue(m_ca_certificate_identifier));
    }
    if (m_domain_isSet) {
        obj.insert(QString("Domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_copy_tags_to_snapshot_isSet) {
        obj.insert(QString("CopyTagsToSnapshot"), ::OpenAPI::toJsonValue(m_copy_tags_to_snapshot));
    }
    if (m_monitoring_interval_isSet) {
        obj.insert(QString("MonitoringInterval"), ::OpenAPI::toJsonValue(m_monitoring_interval));
    }
    if (m_db_port_number_isSet) {
        obj.insert(QString("DBPortNumber"), ::OpenAPI::toJsonValue(m_db_port_number));
    }
    if (m_publicly_accessible_isSet) {
        obj.insert(QString("PubliclyAccessible"), ::OpenAPI::toJsonValue(m_publicly_accessible));
    }
    if (m_monitoring_role_arn_isSet) {
        obj.insert(QString("MonitoringRoleArn"), ::OpenAPI::toJsonValue(m_monitoring_role_arn));
    }
    if (m_domain_iam_role_name_isSet) {
        obj.insert(QString("DomainIAMRoleName"), ::OpenAPI::toJsonValue(m_domain_iam_role_name));
    }
    if (m_promotion_tier_isSet) {
        obj.insert(QString("PromotionTier"), ::OpenAPI::toJsonValue(m_promotion_tier));
    }
    if (m_enable_iam_database_authentication_isSet) {
        obj.insert(QString("EnableIAMDatabaseAuthentication"), ::OpenAPI::toJsonValue(m_enable_iam_database_authentication));
    }
    if (m_enable_performance_insights_isSet) {
        obj.insert(QString("EnablePerformanceInsights"), ::OpenAPI::toJsonValue(m_enable_performance_insights));
    }
    if (m_performance_insights_kms_key_id_isSet) {
        obj.insert(QString("PerformanceInsightsKMSKeyId"), ::OpenAPI::toJsonValue(m_performance_insights_kms_key_id));
    }
    if (m_cloudwatch_logs_export_configuration.isSet()) {
        obj.insert(QString("CloudwatchLogsExportConfiguration"), ::OpenAPI::toJsonValue(m_cloudwatch_logs_export_configuration));
    }
    if (m_deletion_protection_isSet) {
        obj.insert(QString("DeletionProtection"), ::OpenAPI::toJsonValue(m_deletion_protection));
    }
    return obj;
}

QString OAIModifyDBInstanceMessage::getDbInstanceIdentifier() const {
    return m_db_instance_identifier;
}
void OAIModifyDBInstanceMessage::setDbInstanceIdentifier(const QString &db_instance_identifier) {
    m_db_instance_identifier = db_instance_identifier;
    m_db_instance_identifier_isSet = true;
}

bool OAIModifyDBInstanceMessage::is_db_instance_identifier_Set() const{
    return m_db_instance_identifier_isSet;
}

bool OAIModifyDBInstanceMessage::is_db_instance_identifier_Valid() const{
    return m_db_instance_identifier_isValid;
}

qint32 OAIModifyDBInstanceMessage::getAllocatedStorage() const {
    return m_allocated_storage;
}
void OAIModifyDBInstanceMessage::setAllocatedStorage(const qint32 &allocated_storage) {
    m_allocated_storage = allocated_storage;
    m_allocated_storage_isSet = true;
}

bool OAIModifyDBInstanceMessage::is_allocated_storage_Set() const{
    return m_allocated_storage_isSet;
}

bool OAIModifyDBInstanceMessage::is_allocated_storage_Valid() const{
    return m_allocated_storage_isValid;
}

QString OAIModifyDBInstanceMessage::getDbInstanceClass() const {
    return m_db_instance_class;
}
void OAIModifyDBInstanceMessage::setDbInstanceClass(const QString &db_instance_class) {
    m_db_instance_class = db_instance_class;
    m_db_instance_class_isSet = true;
}

bool OAIModifyDBInstanceMessage::is_db_instance_class_Set() const{
    return m_db_instance_class_isSet;
}

bool OAIModifyDBInstanceMessage::is_db_instance_class_Valid() const{
    return m_db_instance_class_isValid;
}

QString OAIModifyDBInstanceMessage::getDbSubnetGroupName() const {
    return m_db_subnet_group_name;
}
void OAIModifyDBInstanceMessage::setDbSubnetGroupName(const QString &db_subnet_group_name) {
    m_db_subnet_group_name = db_subnet_group_name;
    m_db_subnet_group_name_isSet = true;
}

bool OAIModifyDBInstanceMessage::is_db_subnet_group_name_Set() const{
    return m_db_subnet_group_name_isSet;
}

bool OAIModifyDBInstanceMessage::is_db_subnet_group_name_Valid() const{
    return m_db_subnet_group_name_isValid;
}

QList OAIModifyDBInstanceMessage::getDbSecurityGroups() const {
    return m_db_security_groups;
}
void OAIModifyDBInstanceMessage::setDbSecurityGroups(const QList &db_security_groups) {
    m_db_security_groups = db_security_groups;
    m_db_security_groups_isSet = true;
}

bool OAIModifyDBInstanceMessage::is_db_security_groups_Set() const{
    return m_db_security_groups_isSet;
}

bool OAIModifyDBInstanceMessage::is_db_security_groups_Valid() const{
    return m_db_security_groups_isValid;
}

QList OAIModifyDBInstanceMessage::getVpcSecurityGroupIds() const {
    return m_vpc_security_group_ids;
}
void OAIModifyDBInstanceMessage::setVpcSecurityGroupIds(const QList &vpc_security_group_ids) {
    m_vpc_security_group_ids = vpc_security_group_ids;
    m_vpc_security_group_ids_isSet = true;
}

bool OAIModifyDBInstanceMessage::is_vpc_security_group_ids_Set() const{
    return m_vpc_security_group_ids_isSet;
}

bool OAIModifyDBInstanceMessage::is_vpc_security_group_ids_Valid() const{
    return m_vpc_security_group_ids_isValid;
}

bool OAIModifyDBInstanceMessage::getApplyImmediately() const {
    return m_apply_immediately;
}
void OAIModifyDBInstanceMessage::setApplyImmediately(const bool &apply_immediately) {
    m_apply_immediately = apply_immediately;
    m_apply_immediately_isSet = true;
}

bool OAIModifyDBInstanceMessage::is_apply_immediately_Set() const{
    return m_apply_immediately_isSet;
}

bool OAIModifyDBInstanceMessage::is_apply_immediately_Valid() const{
    return m_apply_immediately_isValid;
}

QString OAIModifyDBInstanceMessage::getMasterUserPassword() const {
    return m_master_user_password;
}
void OAIModifyDBInstanceMessage::setMasterUserPassword(const QString &master_user_password) {
    m_master_user_password = master_user_password;
    m_master_user_password_isSet = true;
}

bool OAIModifyDBInstanceMessage::is_master_user_password_Set() const{
    return m_master_user_password_isSet;
}

bool OAIModifyDBInstanceMessage::is_master_user_password_Valid() const{
    return m_master_user_password_isValid;
}

QString OAIModifyDBInstanceMessage::getDbParameterGroupName() const {
    return m_db_parameter_group_name;
}
void OAIModifyDBInstanceMessage::setDbParameterGroupName(const QString &db_parameter_group_name) {
    m_db_parameter_group_name = db_parameter_group_name;
    m_db_parameter_group_name_isSet = true;
}

bool OAIModifyDBInstanceMessage::is_db_parameter_group_name_Set() const{
    return m_db_parameter_group_name_isSet;
}

bool OAIModifyDBInstanceMessage::is_db_parameter_group_name_Valid() const{
    return m_db_parameter_group_name_isValid;
}

qint32 OAIModifyDBInstanceMessage::getBackupRetentionPeriod() const {
    return m_backup_retention_period;
}
void OAIModifyDBInstanceMessage::setBackupRetentionPeriod(const qint32 &backup_retention_period) {
    m_backup_retention_period = backup_retention_period;
    m_backup_retention_period_isSet = true;
}

bool OAIModifyDBInstanceMessage::is_backup_retention_period_Set() const{
    return m_backup_retention_period_isSet;
}

bool OAIModifyDBInstanceMessage::is_backup_retention_period_Valid() const{
    return m_backup_retention_period_isValid;
}

QString OAIModifyDBInstanceMessage::getPreferredBackupWindow() const {
    return m_preferred_backup_window;
}
void OAIModifyDBInstanceMessage::setPreferredBackupWindow(const QString &preferred_backup_window) {
    m_preferred_backup_window = preferred_backup_window;
    m_preferred_backup_window_isSet = true;
}

bool OAIModifyDBInstanceMessage::is_preferred_backup_window_Set() const{
    return m_preferred_backup_window_isSet;
}

bool OAIModifyDBInstanceMessage::is_preferred_backup_window_Valid() const{
    return m_preferred_backup_window_isValid;
}

QString OAIModifyDBInstanceMessage::getPreferredMaintenanceWindow() const {
    return m_preferred_maintenance_window;
}
void OAIModifyDBInstanceMessage::setPreferredMaintenanceWindow(const QString &preferred_maintenance_window) {
    m_preferred_maintenance_window = preferred_maintenance_window;
    m_preferred_maintenance_window_isSet = true;
}

bool OAIModifyDBInstanceMessage::is_preferred_maintenance_window_Set() const{
    return m_preferred_maintenance_window_isSet;
}

bool OAIModifyDBInstanceMessage::is_preferred_maintenance_window_Valid() const{
    return m_preferred_maintenance_window_isValid;
}

bool OAIModifyDBInstanceMessage::getMultiAz() const {
    return m_multi_az;
}
void OAIModifyDBInstanceMessage::setMultiAz(const bool &multi_az) {
    m_multi_az = multi_az;
    m_multi_az_isSet = true;
}

bool OAIModifyDBInstanceMessage::is_multi_az_Set() const{
    return m_multi_az_isSet;
}

bool OAIModifyDBInstanceMessage::is_multi_az_Valid() const{
    return m_multi_az_isValid;
}

QString OAIModifyDBInstanceMessage::getEngineVersion() const {
    return m_engine_version;
}
void OAIModifyDBInstanceMessage::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAIModifyDBInstanceMessage::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAIModifyDBInstanceMessage::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

bool OAIModifyDBInstanceMessage::getAllowMajorVersionUpgrade() const {
    return m_allow_major_version_upgrade;
}
void OAIModifyDBInstanceMessage::setAllowMajorVersionUpgrade(const bool &allow_major_version_upgrade) {
    m_allow_major_version_upgrade = allow_major_version_upgrade;
    m_allow_major_version_upgrade_isSet = true;
}

bool OAIModifyDBInstanceMessage::is_allow_major_version_upgrade_Set() const{
    return m_allow_major_version_upgrade_isSet;
}

bool OAIModifyDBInstanceMessage::is_allow_major_version_upgrade_Valid() const{
    return m_allow_major_version_upgrade_isValid;
}

bool OAIModifyDBInstanceMessage::getAutoMinorVersionUpgrade() const {
    return m_auto_minor_version_upgrade;
}
void OAIModifyDBInstanceMessage::setAutoMinorVersionUpgrade(const bool &auto_minor_version_upgrade) {
    m_auto_minor_version_upgrade = auto_minor_version_upgrade;
    m_auto_minor_version_upgrade_isSet = true;
}

bool OAIModifyDBInstanceMessage::is_auto_minor_version_upgrade_Set() const{
    return m_auto_minor_version_upgrade_isSet;
}

bool OAIModifyDBInstanceMessage::is_auto_minor_version_upgrade_Valid() const{
    return m_auto_minor_version_upgrade_isValid;
}

QString OAIModifyDBInstanceMessage::getLicenseModel() const {
    return m_license_model;
}
void OAIModifyDBInstanceMessage::setLicenseModel(const QString &license_model) {
    m_license_model = license_model;
    m_license_model_isSet = true;
}

bool OAIModifyDBInstanceMessage::is_license_model_Set() const{
    return m_license_model_isSet;
}

bool OAIModifyDBInstanceMessage::is_license_model_Valid() const{
    return m_license_model_isValid;
}

qint32 OAIModifyDBInstanceMessage::getIops() const {
    return m_iops;
}
void OAIModifyDBInstanceMessage::setIops(const qint32 &iops) {
    m_iops = iops;
    m_iops_isSet = true;
}

bool OAIModifyDBInstanceMessage::is_iops_Set() const{
    return m_iops_isSet;
}

bool OAIModifyDBInstanceMessage::is_iops_Valid() const{
    return m_iops_isValid;
}

QString OAIModifyDBInstanceMessage::getOptionGroupName() const {
    return m_option_group_name;
}
void OAIModifyDBInstanceMessage::setOptionGroupName(const QString &option_group_name) {
    m_option_group_name = option_group_name;
    m_option_group_name_isSet = true;
}

bool OAIModifyDBInstanceMessage::is_option_group_name_Set() const{
    return m_option_group_name_isSet;
}

bool OAIModifyDBInstanceMessage::is_option_group_name_Valid() const{
    return m_option_group_name_isValid;
}

QString OAIModifyDBInstanceMessage::getNewDbInstanceIdentifier() const {
    return m_new_db_instance_identifier;
}
void OAIModifyDBInstanceMessage::setNewDbInstanceIdentifier(const QString &new_db_instance_identifier) {
    m_new_db_instance_identifier = new_db_instance_identifier;
    m_new_db_instance_identifier_isSet = true;
}

bool OAIModifyDBInstanceMessage::is_new_db_instance_identifier_Set() const{
    return m_new_db_instance_identifier_isSet;
}

bool OAIModifyDBInstanceMessage::is_new_db_instance_identifier_Valid() const{
    return m_new_db_instance_identifier_isValid;
}

QString OAIModifyDBInstanceMessage::getStorageType() const {
    return m_storage_type;
}
void OAIModifyDBInstanceMessage::setStorageType(const QString &storage_type) {
    m_storage_type = storage_type;
    m_storage_type_isSet = true;
}

bool OAIModifyDBInstanceMessage::is_storage_type_Set() const{
    return m_storage_type_isSet;
}

bool OAIModifyDBInstanceMessage::is_storage_type_Valid() const{
    return m_storage_type_isValid;
}

QString OAIModifyDBInstanceMessage::getTdeCredentialArn() const {
    return m_tde_credential_arn;
}
void OAIModifyDBInstanceMessage::setTdeCredentialArn(const QString &tde_credential_arn) {
    m_tde_credential_arn = tde_credential_arn;
    m_tde_credential_arn_isSet = true;
}

bool OAIModifyDBInstanceMessage::is_tde_credential_arn_Set() const{
    return m_tde_credential_arn_isSet;
}

bool OAIModifyDBInstanceMessage::is_tde_credential_arn_Valid() const{
    return m_tde_credential_arn_isValid;
}

QString OAIModifyDBInstanceMessage::getTdeCredentialPassword() const {
    return m_tde_credential_password;
}
void OAIModifyDBInstanceMessage::setTdeCredentialPassword(const QString &tde_credential_password) {
    m_tde_credential_password = tde_credential_password;
    m_tde_credential_password_isSet = true;
}

bool OAIModifyDBInstanceMessage::is_tde_credential_password_Set() const{
    return m_tde_credential_password_isSet;
}

bool OAIModifyDBInstanceMessage::is_tde_credential_password_Valid() const{
    return m_tde_credential_password_isValid;
}

QString OAIModifyDBInstanceMessage::getCaCertificateIdentifier() const {
    return m_ca_certificate_identifier;
}
void OAIModifyDBInstanceMessage::setCaCertificateIdentifier(const QString &ca_certificate_identifier) {
    m_ca_certificate_identifier = ca_certificate_identifier;
    m_ca_certificate_identifier_isSet = true;
}

bool OAIModifyDBInstanceMessage::is_ca_certificate_identifier_Set() const{
    return m_ca_certificate_identifier_isSet;
}

bool OAIModifyDBInstanceMessage::is_ca_certificate_identifier_Valid() const{
    return m_ca_certificate_identifier_isValid;
}

QString OAIModifyDBInstanceMessage::getDomain() const {
    return m_domain;
}
void OAIModifyDBInstanceMessage::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIModifyDBInstanceMessage::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIModifyDBInstanceMessage::is_domain_Valid() const{
    return m_domain_isValid;
}

bool OAIModifyDBInstanceMessage::getCopyTagsToSnapshot() const {
    return m_copy_tags_to_snapshot;
}
void OAIModifyDBInstanceMessage::setCopyTagsToSnapshot(const bool &copy_tags_to_snapshot) {
    m_copy_tags_to_snapshot = copy_tags_to_snapshot;
    m_copy_tags_to_snapshot_isSet = true;
}

bool OAIModifyDBInstanceMessage::is_copy_tags_to_snapshot_Set() const{
    return m_copy_tags_to_snapshot_isSet;
}

bool OAIModifyDBInstanceMessage::is_copy_tags_to_snapshot_Valid() const{
    return m_copy_tags_to_snapshot_isValid;
}

qint32 OAIModifyDBInstanceMessage::getMonitoringInterval() const {
    return m_monitoring_interval;
}
void OAIModifyDBInstanceMessage::setMonitoringInterval(const qint32 &monitoring_interval) {
    m_monitoring_interval = monitoring_interval;
    m_monitoring_interval_isSet = true;
}

bool OAIModifyDBInstanceMessage::is_monitoring_interval_Set() const{
    return m_monitoring_interval_isSet;
}

bool OAIModifyDBInstanceMessage::is_monitoring_interval_Valid() const{
    return m_monitoring_interval_isValid;
}

qint32 OAIModifyDBInstanceMessage::getDbPortNumber() const {
    return m_db_port_number;
}
void OAIModifyDBInstanceMessage::setDbPortNumber(const qint32 &db_port_number) {
    m_db_port_number = db_port_number;
    m_db_port_number_isSet = true;
}

bool OAIModifyDBInstanceMessage::is_db_port_number_Set() const{
    return m_db_port_number_isSet;
}

bool OAIModifyDBInstanceMessage::is_db_port_number_Valid() const{
    return m_db_port_number_isValid;
}

bool OAIModifyDBInstanceMessage::getPubliclyAccessible() const {
    return m_publicly_accessible;
}
void OAIModifyDBInstanceMessage::setPubliclyAccessible(const bool &publicly_accessible) {
    m_publicly_accessible = publicly_accessible;
    m_publicly_accessible_isSet = true;
}

bool OAIModifyDBInstanceMessage::is_publicly_accessible_Set() const{
    return m_publicly_accessible_isSet;
}

bool OAIModifyDBInstanceMessage::is_publicly_accessible_Valid() const{
    return m_publicly_accessible_isValid;
}

QString OAIModifyDBInstanceMessage::getMonitoringRoleArn() const {
    return m_monitoring_role_arn;
}
void OAIModifyDBInstanceMessage::setMonitoringRoleArn(const QString &monitoring_role_arn) {
    m_monitoring_role_arn = monitoring_role_arn;
    m_monitoring_role_arn_isSet = true;
}

bool OAIModifyDBInstanceMessage::is_monitoring_role_arn_Set() const{
    return m_monitoring_role_arn_isSet;
}

bool OAIModifyDBInstanceMessage::is_monitoring_role_arn_Valid() const{
    return m_monitoring_role_arn_isValid;
}

QString OAIModifyDBInstanceMessage::getDomainIamRoleName() const {
    return m_domain_iam_role_name;
}
void OAIModifyDBInstanceMessage::setDomainIamRoleName(const QString &domain_iam_role_name) {
    m_domain_iam_role_name = domain_iam_role_name;
    m_domain_iam_role_name_isSet = true;
}

bool OAIModifyDBInstanceMessage::is_domain_iam_role_name_Set() const{
    return m_domain_iam_role_name_isSet;
}

bool OAIModifyDBInstanceMessage::is_domain_iam_role_name_Valid() const{
    return m_domain_iam_role_name_isValid;
}

qint32 OAIModifyDBInstanceMessage::getPromotionTier() const {
    return m_promotion_tier;
}
void OAIModifyDBInstanceMessage::setPromotionTier(const qint32 &promotion_tier) {
    m_promotion_tier = promotion_tier;
    m_promotion_tier_isSet = true;
}

bool OAIModifyDBInstanceMessage::is_promotion_tier_Set() const{
    return m_promotion_tier_isSet;
}

bool OAIModifyDBInstanceMessage::is_promotion_tier_Valid() const{
    return m_promotion_tier_isValid;
}

bool OAIModifyDBInstanceMessage::getEnableIamDatabaseAuthentication() const {
    return m_enable_iam_database_authentication;
}
void OAIModifyDBInstanceMessage::setEnableIamDatabaseAuthentication(const bool &enable_iam_database_authentication) {
    m_enable_iam_database_authentication = enable_iam_database_authentication;
    m_enable_iam_database_authentication_isSet = true;
}

bool OAIModifyDBInstanceMessage::is_enable_iam_database_authentication_Set() const{
    return m_enable_iam_database_authentication_isSet;
}

bool OAIModifyDBInstanceMessage::is_enable_iam_database_authentication_Valid() const{
    return m_enable_iam_database_authentication_isValid;
}

bool OAIModifyDBInstanceMessage::getEnablePerformanceInsights() const {
    return m_enable_performance_insights;
}
void OAIModifyDBInstanceMessage::setEnablePerformanceInsights(const bool &enable_performance_insights) {
    m_enable_performance_insights = enable_performance_insights;
    m_enable_performance_insights_isSet = true;
}

bool OAIModifyDBInstanceMessage::is_enable_performance_insights_Set() const{
    return m_enable_performance_insights_isSet;
}

bool OAIModifyDBInstanceMessage::is_enable_performance_insights_Valid() const{
    return m_enable_performance_insights_isValid;
}

QString OAIModifyDBInstanceMessage::getPerformanceInsightsKmsKeyId() const {
    return m_performance_insights_kms_key_id;
}
void OAIModifyDBInstanceMessage::setPerformanceInsightsKmsKeyId(const QString &performance_insights_kms_key_id) {
    m_performance_insights_kms_key_id = performance_insights_kms_key_id;
    m_performance_insights_kms_key_id_isSet = true;
}

bool OAIModifyDBInstanceMessage::is_performance_insights_kms_key_id_Set() const{
    return m_performance_insights_kms_key_id_isSet;
}

bool OAIModifyDBInstanceMessage::is_performance_insights_kms_key_id_Valid() const{
    return m_performance_insights_kms_key_id_isValid;
}

OAIModifyDBInstanceMessage_CloudwatchLogsExportConfiguration OAIModifyDBInstanceMessage::getCloudwatchLogsExportConfiguration() const {
    return m_cloudwatch_logs_export_configuration;
}
void OAIModifyDBInstanceMessage::setCloudwatchLogsExportConfiguration(const OAIModifyDBInstanceMessage_CloudwatchLogsExportConfiguration &cloudwatch_logs_export_configuration) {
    m_cloudwatch_logs_export_configuration = cloudwatch_logs_export_configuration;
    m_cloudwatch_logs_export_configuration_isSet = true;
}

bool OAIModifyDBInstanceMessage::is_cloudwatch_logs_export_configuration_Set() const{
    return m_cloudwatch_logs_export_configuration_isSet;
}

bool OAIModifyDBInstanceMessage::is_cloudwatch_logs_export_configuration_Valid() const{
    return m_cloudwatch_logs_export_configuration_isValid;
}

bool OAIModifyDBInstanceMessage::getDeletionProtection() const {
    return m_deletion_protection;
}
void OAIModifyDBInstanceMessage::setDeletionProtection(const bool &deletion_protection) {
    m_deletion_protection = deletion_protection;
    m_deletion_protection_isSet = true;
}

bool OAIModifyDBInstanceMessage::is_deletion_protection_Set() const{
    return m_deletion_protection_isSet;
}

bool OAIModifyDBInstanceMessage::is_deletion_protection_Valid() const{
    return m_deletion_protection_isValid;
}

bool OAIModifyDBInstanceMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_db_instance_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allocated_storage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_instance_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_subnet_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_security_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_apply_immediately_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_user_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_parameter_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_retention_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_backup_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_maintenance_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_az_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_major_version_upgrade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_minor_version_upgrade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iops_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_option_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_db_instance_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tde_credential_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tde_credential_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ca_certificate_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_tags_to_snapshot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_port_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publicly_accessible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_iam_role_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotion_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_iam_database_authentication_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_performance_insights_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_performance_insights_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloudwatch_logs_export_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletion_protection_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModifyDBInstanceMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_db_instance_identifier_isValid && true;
}

} // namespace OpenAPI
