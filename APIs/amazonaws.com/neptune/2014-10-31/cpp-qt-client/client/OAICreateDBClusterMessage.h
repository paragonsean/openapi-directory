/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateDBClusterMessage.h
 *
 * 
 */

#ifndef OAICreateDBClusterMessage_H
#define OAICreateDBClusterMessage_H

#include <QJsonObject>

#include "OAIServerlessV2ScalingConfiguration.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIServerlessV2ScalingConfiguration;

class OAICreateDBClusterMessage : public OAIObject {
public:
    OAICreateDBClusterMessage();
    OAICreateDBClusterMessage(QString json);
    ~OAICreateDBClusterMessage() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getAvailabilityZones() const;
    void setAvailabilityZones(const QList &availability_zones);
    bool is_availability_zones_Set() const;
    bool is_availability_zones_Valid() const;

    qint32 getBackupRetentionPeriod() const;
    void setBackupRetentionPeriod(const qint32 &backup_retention_period);
    bool is_backup_retention_period_Set() const;
    bool is_backup_retention_period_Valid() const;

    QString getCharacterSetName() const;
    void setCharacterSetName(const QString &character_set_name);
    bool is_character_set_name_Set() const;
    bool is_character_set_name_Valid() const;

    bool getCopyTagsToSnapshot() const;
    void setCopyTagsToSnapshot(const bool &copy_tags_to_snapshot);
    bool is_copy_tags_to_snapshot_Set() const;
    bool is_copy_tags_to_snapshot_Valid() const;

    QString getDatabaseName() const;
    void setDatabaseName(const QString &database_name);
    bool is_database_name_Set() const;
    bool is_database_name_Valid() const;

    QString getDbClusterIdentifier() const;
    void setDbClusterIdentifier(const QString &db_cluster_identifier);
    bool is_db_cluster_identifier_Set() const;
    bool is_db_cluster_identifier_Valid() const;

    QString getDbClusterParameterGroupName() const;
    void setDbClusterParameterGroupName(const QString &db_cluster_parameter_group_name);
    bool is_db_cluster_parameter_group_name_Set() const;
    bool is_db_cluster_parameter_group_name_Valid() const;

    QList getVpcSecurityGroupIds() const;
    void setVpcSecurityGroupIds(const QList &vpc_security_group_ids);
    bool is_vpc_security_group_ids_Set() const;
    bool is_vpc_security_group_ids_Valid() const;

    QString getDbSubnetGroupName() const;
    void setDbSubnetGroupName(const QString &db_subnet_group_name);
    bool is_db_subnet_group_name_Set() const;
    bool is_db_subnet_group_name_Valid() const;

    QString getEngine() const;
    void setEngine(const QString &engine);
    bool is_engine_Set() const;
    bool is_engine_Valid() const;

    QString getEngineVersion() const;
    void setEngineVersion(const QString &engine_version);
    bool is_engine_version_Set() const;
    bool is_engine_version_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    QString getMasterUsername() const;
    void setMasterUsername(const QString &master_username);
    bool is_master_username_Set() const;
    bool is_master_username_Valid() const;

    QString getMasterUserPassword() const;
    void setMasterUserPassword(const QString &master_user_password);
    bool is_master_user_password_Set() const;
    bool is_master_user_password_Valid() const;

    QString getOptionGroupName() const;
    void setOptionGroupName(const QString &option_group_name);
    bool is_option_group_name_Set() const;
    bool is_option_group_name_Valid() const;

    QString getPreferredBackupWindow() const;
    void setPreferredBackupWindow(const QString &preferred_backup_window);
    bool is_preferred_backup_window_Set() const;
    bool is_preferred_backup_window_Valid() const;

    QString getPreferredMaintenanceWindow() const;
    void setPreferredMaintenanceWindow(const QString &preferred_maintenance_window);
    bool is_preferred_maintenance_window_Set() const;
    bool is_preferred_maintenance_window_Valid() const;

    QString getReplicationSourceIdentifier() const;
    void setReplicationSourceIdentifier(const QString &replication_source_identifier);
    bool is_replication_source_identifier_Set() const;
    bool is_replication_source_identifier_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    bool getStorageEncrypted() const;
    void setStorageEncrypted(const bool &storage_encrypted);
    bool is_storage_encrypted_Set() const;
    bool is_storage_encrypted_Valid() const;

    QString getKmsKeyId() const;
    void setKmsKeyId(const QString &kms_key_id);
    bool is_kms_key_id_Set() const;
    bool is_kms_key_id_Valid() const;

    QString getPreSignedUrl() const;
    void setPreSignedUrl(const QString &pre_signed_url);
    bool is_pre_signed_url_Set() const;
    bool is_pre_signed_url_Valid() const;

    bool getEnableIamDatabaseAuthentication() const;
    void setEnableIamDatabaseAuthentication(const bool &enable_iam_database_authentication);
    bool is_enable_iam_database_authentication_Set() const;
    bool is_enable_iam_database_authentication_Valid() const;

    QList getEnableCloudwatchLogsExports() const;
    void setEnableCloudwatchLogsExports(const QList &enable_cloudwatch_logs_exports);
    bool is_enable_cloudwatch_logs_exports_Set() const;
    bool is_enable_cloudwatch_logs_exports_Valid() const;

    bool getDeletionProtection() const;
    void setDeletionProtection(const bool &deletion_protection);
    bool is_deletion_protection_Set() const;
    bool is_deletion_protection_Valid() const;

    OAIServerlessV2ScalingConfiguration getServerlessV2ScalingConfiguration() const;
    void setServerlessV2ScalingConfiguration(const OAIServerlessV2ScalingConfiguration &serverless_v2_scaling_configuration);
    bool is_serverless_v2_scaling_configuration_Set() const;
    bool is_serverless_v2_scaling_configuration_Valid() const;

    QString getGlobalClusterIdentifier() const;
    void setGlobalClusterIdentifier(const QString &global_cluster_identifier);
    bool is_global_cluster_identifier_Set() const;
    bool is_global_cluster_identifier_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_availability_zones;
    bool m_availability_zones_isSet;
    bool m_availability_zones_isValid;

    qint32 m_backup_retention_period;
    bool m_backup_retention_period_isSet;
    bool m_backup_retention_period_isValid;

    QString m_character_set_name;
    bool m_character_set_name_isSet;
    bool m_character_set_name_isValid;

    bool m_copy_tags_to_snapshot;
    bool m_copy_tags_to_snapshot_isSet;
    bool m_copy_tags_to_snapshot_isValid;

    QString m_database_name;
    bool m_database_name_isSet;
    bool m_database_name_isValid;

    QString m_db_cluster_identifier;
    bool m_db_cluster_identifier_isSet;
    bool m_db_cluster_identifier_isValid;

    QString m_db_cluster_parameter_group_name;
    bool m_db_cluster_parameter_group_name_isSet;
    bool m_db_cluster_parameter_group_name_isValid;

    QList m_vpc_security_group_ids;
    bool m_vpc_security_group_ids_isSet;
    bool m_vpc_security_group_ids_isValid;

    QString m_db_subnet_group_name;
    bool m_db_subnet_group_name_isSet;
    bool m_db_subnet_group_name_isValid;

    QString m_engine;
    bool m_engine_isSet;
    bool m_engine_isValid;

    QString m_engine_version;
    bool m_engine_version_isSet;
    bool m_engine_version_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    QString m_master_username;
    bool m_master_username_isSet;
    bool m_master_username_isValid;

    QString m_master_user_password;
    bool m_master_user_password_isSet;
    bool m_master_user_password_isValid;

    QString m_option_group_name;
    bool m_option_group_name_isSet;
    bool m_option_group_name_isValid;

    QString m_preferred_backup_window;
    bool m_preferred_backup_window_isSet;
    bool m_preferred_backup_window_isValid;

    QString m_preferred_maintenance_window;
    bool m_preferred_maintenance_window_isSet;
    bool m_preferred_maintenance_window_isValid;

    QString m_replication_source_identifier;
    bool m_replication_source_identifier_isSet;
    bool m_replication_source_identifier_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    bool m_storage_encrypted;
    bool m_storage_encrypted_isSet;
    bool m_storage_encrypted_isValid;

    QString m_kms_key_id;
    bool m_kms_key_id_isSet;
    bool m_kms_key_id_isValid;

    QString m_pre_signed_url;
    bool m_pre_signed_url_isSet;
    bool m_pre_signed_url_isValid;

    bool m_enable_iam_database_authentication;
    bool m_enable_iam_database_authentication_isSet;
    bool m_enable_iam_database_authentication_isValid;

    QList m_enable_cloudwatch_logs_exports;
    bool m_enable_cloudwatch_logs_exports_isSet;
    bool m_enable_cloudwatch_logs_exports_isValid;

    bool m_deletion_protection;
    bool m_deletion_protection_isSet;
    bool m_deletion_protection_isValid;

    OAIServerlessV2ScalingConfiguration m_serverless_v2_scaling_configuration;
    bool m_serverless_v2_scaling_configuration_isSet;
    bool m_serverless_v2_scaling_configuration_isValid;

    QString m_global_cluster_identifier;
    bool m_global_cluster_identifier_isSet;
    bool m_global_cluster_identifier_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateDBClusterMessage)

#endif // OAICreateDBClusterMessage_H
