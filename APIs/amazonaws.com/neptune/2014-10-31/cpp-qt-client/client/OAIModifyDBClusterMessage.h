/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIModifyDBClusterMessage.h
 *
 * 
 */

#ifndef OAIModifyDBClusterMessage_H
#define OAIModifyDBClusterMessage_H

#include <QJsonObject>

#include "OAIModifyDBClusterMessage_CloudwatchLogsExportConfiguration.h"
#include "OAIServerlessV2ScalingConfiguration.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIModifyDBClusterMessage_CloudwatchLogsExportConfiguration;
class OAIServerlessV2ScalingConfiguration;

class OAIModifyDBClusterMessage : public OAIObject {
public:
    OAIModifyDBClusterMessage();
    OAIModifyDBClusterMessage(QString json);
    ~OAIModifyDBClusterMessage() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDbClusterIdentifier() const;
    void setDbClusterIdentifier(const QString &db_cluster_identifier);
    bool is_db_cluster_identifier_Set() const;
    bool is_db_cluster_identifier_Valid() const;

    QString getNewDbClusterIdentifier() const;
    void setNewDbClusterIdentifier(const QString &new_db_cluster_identifier);
    bool is_new_db_cluster_identifier_Set() const;
    bool is_new_db_cluster_identifier_Valid() const;

    bool getApplyImmediately() const;
    void setApplyImmediately(const bool &apply_immediately);
    bool is_apply_immediately_Set() const;
    bool is_apply_immediately_Valid() const;

    qint32 getBackupRetentionPeriod() const;
    void setBackupRetentionPeriod(const qint32 &backup_retention_period);
    bool is_backup_retention_period_Set() const;
    bool is_backup_retention_period_Valid() const;

    QString getDbClusterParameterGroupName() const;
    void setDbClusterParameterGroupName(const QString &db_cluster_parameter_group_name);
    bool is_db_cluster_parameter_group_name_Set() const;
    bool is_db_cluster_parameter_group_name_Valid() const;

    QList getVpcSecurityGroupIds() const;
    void setVpcSecurityGroupIds(const QList &vpc_security_group_ids);
    bool is_vpc_security_group_ids_Set() const;
    bool is_vpc_security_group_ids_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    QString getMasterUserPassword() const;
    void setMasterUserPassword(const QString &master_user_password);
    bool is_master_user_password_Set() const;
    bool is_master_user_password_Valid() const;

    QString getOptionGroupName() const;
    void setOptionGroupName(const QString &option_group_name);
    bool is_option_group_name_Set() const;
    bool is_option_group_name_Valid() const;

    QString getPreferredBackupWindow() const;
    void setPreferredBackupWindow(const QString &preferred_backup_window);
    bool is_preferred_backup_window_Set() const;
    bool is_preferred_backup_window_Valid() const;

    QString getPreferredMaintenanceWindow() const;
    void setPreferredMaintenanceWindow(const QString &preferred_maintenance_window);
    bool is_preferred_maintenance_window_Set() const;
    bool is_preferred_maintenance_window_Valid() const;

    bool getEnableIamDatabaseAuthentication() const;
    void setEnableIamDatabaseAuthentication(const bool &enable_iam_database_authentication);
    bool is_enable_iam_database_authentication_Set() const;
    bool is_enable_iam_database_authentication_Valid() const;

    OAIModifyDBClusterMessage_CloudwatchLogsExportConfiguration getCloudwatchLogsExportConfiguration() const;
    void setCloudwatchLogsExportConfiguration(const OAIModifyDBClusterMessage_CloudwatchLogsExportConfiguration &cloudwatch_logs_export_configuration);
    bool is_cloudwatch_logs_export_configuration_Set() const;
    bool is_cloudwatch_logs_export_configuration_Valid() const;

    QString getEngineVersion() const;
    void setEngineVersion(const QString &engine_version);
    bool is_engine_version_Set() const;
    bool is_engine_version_Valid() const;

    bool getAllowMajorVersionUpgrade() const;
    void setAllowMajorVersionUpgrade(const bool &allow_major_version_upgrade);
    bool is_allow_major_version_upgrade_Set() const;
    bool is_allow_major_version_upgrade_Valid() const;

    QString getDbInstanceParameterGroupName() const;
    void setDbInstanceParameterGroupName(const QString &db_instance_parameter_group_name);
    bool is_db_instance_parameter_group_name_Set() const;
    bool is_db_instance_parameter_group_name_Valid() const;

    bool getDeletionProtection() const;
    void setDeletionProtection(const bool &deletion_protection);
    bool is_deletion_protection_Set() const;
    bool is_deletion_protection_Valid() const;

    bool getCopyTagsToSnapshot() const;
    void setCopyTagsToSnapshot(const bool &copy_tags_to_snapshot);
    bool is_copy_tags_to_snapshot_Set() const;
    bool is_copy_tags_to_snapshot_Valid() const;

    OAIServerlessV2ScalingConfiguration getServerlessV2ScalingConfiguration() const;
    void setServerlessV2ScalingConfiguration(const OAIServerlessV2ScalingConfiguration &serverless_v2_scaling_configuration);
    bool is_serverless_v2_scaling_configuration_Set() const;
    bool is_serverless_v2_scaling_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_db_cluster_identifier;
    bool m_db_cluster_identifier_isSet;
    bool m_db_cluster_identifier_isValid;

    QString m_new_db_cluster_identifier;
    bool m_new_db_cluster_identifier_isSet;
    bool m_new_db_cluster_identifier_isValid;

    bool m_apply_immediately;
    bool m_apply_immediately_isSet;
    bool m_apply_immediately_isValid;

    qint32 m_backup_retention_period;
    bool m_backup_retention_period_isSet;
    bool m_backup_retention_period_isValid;

    QString m_db_cluster_parameter_group_name;
    bool m_db_cluster_parameter_group_name_isSet;
    bool m_db_cluster_parameter_group_name_isValid;

    QList m_vpc_security_group_ids;
    bool m_vpc_security_group_ids_isSet;
    bool m_vpc_security_group_ids_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    QString m_master_user_password;
    bool m_master_user_password_isSet;
    bool m_master_user_password_isValid;

    QString m_option_group_name;
    bool m_option_group_name_isSet;
    bool m_option_group_name_isValid;

    QString m_preferred_backup_window;
    bool m_preferred_backup_window_isSet;
    bool m_preferred_backup_window_isValid;

    QString m_preferred_maintenance_window;
    bool m_preferred_maintenance_window_isSet;
    bool m_preferred_maintenance_window_isValid;

    bool m_enable_iam_database_authentication;
    bool m_enable_iam_database_authentication_isSet;
    bool m_enable_iam_database_authentication_isValid;

    OAIModifyDBClusterMessage_CloudwatchLogsExportConfiguration m_cloudwatch_logs_export_configuration;
    bool m_cloudwatch_logs_export_configuration_isSet;
    bool m_cloudwatch_logs_export_configuration_isValid;

    QString m_engine_version;
    bool m_engine_version_isSet;
    bool m_engine_version_isValid;

    bool m_allow_major_version_upgrade;
    bool m_allow_major_version_upgrade_isSet;
    bool m_allow_major_version_upgrade_isValid;

    QString m_db_instance_parameter_group_name;
    bool m_db_instance_parameter_group_name_isSet;
    bool m_db_instance_parameter_group_name_isValid;

    bool m_deletion_protection;
    bool m_deletion_protection_isSet;
    bool m_deletion_protection_isValid;

    bool m_copy_tags_to_snapshot;
    bool m_copy_tags_to_snapshot_isSet;
    bool m_copy_tags_to_snapshot_isValid;

    OAIServerlessV2ScalingConfiguration m_serverless_v2_scaling_configuration;
    bool m_serverless_v2_scaling_configuration_isSet;
    bool m_serverless_v2_scaling_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIModifyDBClusterMessage)

#endif // OAIModifyDBClusterMessage_H
