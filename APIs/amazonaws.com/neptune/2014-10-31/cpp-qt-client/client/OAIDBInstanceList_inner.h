/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDBInstanceList_inner.h
 *
 * 
 */

#ifndef OAIDBInstanceList_inner_H
#define OAIDBInstanceList_inner_H

#include <QJsonObject>

#include "OAIDBInstance_DBSubnetGroup.h"
#include "OAIDBInstance_Endpoint.h"
#include "OAIDBInstance_PendingModifiedValues.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDBInstance_Endpoint;
class OAIDBInstance_DBSubnetGroup;
class OAIDBInstance_PendingModifiedValues;

class OAIDBInstanceList_inner : public OAIObject {
public:
    OAIDBInstanceList_inner();
    OAIDBInstanceList_inner(QString json);
    ~OAIDBInstanceList_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDbInstanceIdentifier() const;
    void setDbInstanceIdentifier(const QString &db_instance_identifier);
    bool is_db_instance_identifier_Set() const;
    bool is_db_instance_identifier_Valid() const;

    QString getDbInstanceClass() const;
    void setDbInstanceClass(const QString &db_instance_class);
    bool is_db_instance_class_Set() const;
    bool is_db_instance_class_Valid() const;

    QString getEngine() const;
    void setEngine(const QString &engine);
    bool is_engine_Set() const;
    bool is_engine_Valid() const;

    QString getDbInstanceStatus() const;
    void setDbInstanceStatus(const QString &db_instance_status);
    bool is_db_instance_status_Set() const;
    bool is_db_instance_status_Valid() const;

    QString getMasterUsername() const;
    void setMasterUsername(const QString &master_username);
    bool is_master_username_Set() const;
    bool is_master_username_Valid() const;

    QString getDbName() const;
    void setDbName(const QString &db_name);
    bool is_db_name_Set() const;
    bool is_db_name_Valid() const;

    OAIDBInstance_Endpoint getEndpoint() const;
    void setEndpoint(const OAIDBInstance_Endpoint &endpoint);
    bool is_endpoint_Set() const;
    bool is_endpoint_Valid() const;

    qint32 getAllocatedStorage() const;
    void setAllocatedStorage(const qint32 &allocated_storage);
    bool is_allocated_storage_Set() const;
    bool is_allocated_storage_Valid() const;

    QDateTime getInstanceCreateTime() const;
    void setInstanceCreateTime(const QDateTime &instance_create_time);
    bool is_instance_create_time_Set() const;
    bool is_instance_create_time_Valid() const;

    QString getPreferredBackupWindow() const;
    void setPreferredBackupWindow(const QString &preferred_backup_window);
    bool is_preferred_backup_window_Set() const;
    bool is_preferred_backup_window_Valid() const;

    qint32 getBackupRetentionPeriod() const;
    void setBackupRetentionPeriod(const qint32 &backup_retention_period);
    bool is_backup_retention_period_Set() const;
    bool is_backup_retention_period_Valid() const;

    QList getDbSecurityGroups() const;
    void setDbSecurityGroups(const QList &db_security_groups);
    bool is_db_security_groups_Set() const;
    bool is_db_security_groups_Valid() const;

    QList getVpcSecurityGroups() const;
    void setVpcSecurityGroups(const QList &vpc_security_groups);
    bool is_vpc_security_groups_Set() const;
    bool is_vpc_security_groups_Valid() const;

    QList getDbParameterGroups() const;
    void setDbParameterGroups(const QList &db_parameter_groups);
    bool is_db_parameter_groups_Set() const;
    bool is_db_parameter_groups_Valid() const;

    QString getAvailabilityZone() const;
    void setAvailabilityZone(const QString &availability_zone);
    bool is_availability_zone_Set() const;
    bool is_availability_zone_Valid() const;

    OAIDBInstance_DBSubnetGroup getDbSubnetGroup() const;
    void setDbSubnetGroup(const OAIDBInstance_DBSubnetGroup &db_subnet_group);
    bool is_db_subnet_group_Set() const;
    bool is_db_subnet_group_Valid() const;

    QString getPreferredMaintenanceWindow() const;
    void setPreferredMaintenanceWindow(const QString &preferred_maintenance_window);
    bool is_preferred_maintenance_window_Set() const;
    bool is_preferred_maintenance_window_Valid() const;

    OAIDBInstance_PendingModifiedValues getPendingModifiedValues() const;
    void setPendingModifiedValues(const OAIDBInstance_PendingModifiedValues &pending_modified_values);
    bool is_pending_modified_values_Set() const;
    bool is_pending_modified_values_Valid() const;

    QDateTime getLatestRestorableTime() const;
    void setLatestRestorableTime(const QDateTime &latest_restorable_time);
    bool is_latest_restorable_time_Set() const;
    bool is_latest_restorable_time_Valid() const;

    bool getMultiAz() const;
    void setMultiAz(const bool &multi_az);
    bool is_multi_az_Set() const;
    bool is_multi_az_Valid() const;

    QString getEngineVersion() const;
    void setEngineVersion(const QString &engine_version);
    bool is_engine_version_Set() const;
    bool is_engine_version_Valid() const;

    bool getAutoMinorVersionUpgrade() const;
    void setAutoMinorVersionUpgrade(const bool &auto_minor_version_upgrade);
    bool is_auto_minor_version_upgrade_Set() const;
    bool is_auto_minor_version_upgrade_Valid() const;

    QString getReadReplicaSourceDbInstanceIdentifier() const;
    void setReadReplicaSourceDbInstanceIdentifier(const QString &read_replica_source_db_instance_identifier);
    bool is_read_replica_source_db_instance_identifier_Set() const;
    bool is_read_replica_source_db_instance_identifier_Valid() const;

    QList getReadReplicaDbInstanceIdentifiers() const;
    void setReadReplicaDbInstanceIdentifiers(const QList &read_replica_db_instance_identifiers);
    bool is_read_replica_db_instance_identifiers_Set() const;
    bool is_read_replica_db_instance_identifiers_Valid() const;

    QList getReadReplicaDbClusterIdentifiers() const;
    void setReadReplicaDbClusterIdentifiers(const QList &read_replica_db_cluster_identifiers);
    bool is_read_replica_db_cluster_identifiers_Set() const;
    bool is_read_replica_db_cluster_identifiers_Valid() const;

    QString getLicenseModel() const;
    void setLicenseModel(const QString &license_model);
    bool is_license_model_Set() const;
    bool is_license_model_Valid() const;

    qint32 getIops() const;
    void setIops(const qint32 &iops);
    bool is_iops_Set() const;
    bool is_iops_Valid() const;

    QList getOptionGroupMemberships() const;
    void setOptionGroupMemberships(const QList &option_group_memberships);
    bool is_option_group_memberships_Set() const;
    bool is_option_group_memberships_Valid() const;

    QString getCharacterSetName() const;
    void setCharacterSetName(const QString &character_set_name);
    bool is_character_set_name_Set() const;
    bool is_character_set_name_Valid() const;

    QString getSecondaryAvailabilityZone() const;
    void setSecondaryAvailabilityZone(const QString &secondary_availability_zone);
    bool is_secondary_availability_zone_Set() const;
    bool is_secondary_availability_zone_Valid() const;

    bool getPubliclyAccessible() const;
    void setPubliclyAccessible(const bool &publicly_accessible);
    bool is_publicly_accessible_Set() const;
    bool is_publicly_accessible_Valid() const;

    QList getStatusInfos() const;
    void setStatusInfos(const QList &status_infos);
    bool is_status_infos_Set() const;
    bool is_status_infos_Valid() const;

    QString getStorageType() const;
    void setStorageType(const QString &storage_type);
    bool is_storage_type_Set() const;
    bool is_storage_type_Valid() const;

    QString getTdeCredentialArn() const;
    void setTdeCredentialArn(const QString &tde_credential_arn);
    bool is_tde_credential_arn_Set() const;
    bool is_tde_credential_arn_Valid() const;

    qint32 getDbInstancePort() const;
    void setDbInstancePort(const qint32 &db_instance_port);
    bool is_db_instance_port_Set() const;
    bool is_db_instance_port_Valid() const;

    QString getDbClusterIdentifier() const;
    void setDbClusterIdentifier(const QString &db_cluster_identifier);
    bool is_db_cluster_identifier_Set() const;
    bool is_db_cluster_identifier_Valid() const;

    bool getStorageEncrypted() const;
    void setStorageEncrypted(const bool &storage_encrypted);
    bool is_storage_encrypted_Set() const;
    bool is_storage_encrypted_Valid() const;

    QString getKmsKeyId() const;
    void setKmsKeyId(const QString &kms_key_id);
    bool is_kms_key_id_Set() const;
    bool is_kms_key_id_Valid() const;

    QString getDbiResourceId() const;
    void setDbiResourceId(const QString &dbi_resource_id);
    bool is_dbi_resource_id_Set() const;
    bool is_dbi_resource_id_Valid() const;

    QString getCaCertificateIdentifier() const;
    void setCaCertificateIdentifier(const QString &ca_certificate_identifier);
    bool is_ca_certificate_identifier_Set() const;
    bool is_ca_certificate_identifier_Valid() const;

    QList getDomainMemberships() const;
    void setDomainMemberships(const QList &domain_memberships);
    bool is_domain_memberships_Set() const;
    bool is_domain_memberships_Valid() const;

    bool getCopyTagsToSnapshot() const;
    void setCopyTagsToSnapshot(const bool &copy_tags_to_snapshot);
    bool is_copy_tags_to_snapshot_Set() const;
    bool is_copy_tags_to_snapshot_Valid() const;

    qint32 getMonitoringInterval() const;
    void setMonitoringInterval(const qint32 &monitoring_interval);
    bool is_monitoring_interval_Set() const;
    bool is_monitoring_interval_Valid() const;

    QString getEnhancedMonitoringResourceArn() const;
    void setEnhancedMonitoringResourceArn(const QString &enhanced_monitoring_resource_arn);
    bool is_enhanced_monitoring_resource_arn_Set() const;
    bool is_enhanced_monitoring_resource_arn_Valid() const;

    QString getMonitoringRoleArn() const;
    void setMonitoringRoleArn(const QString &monitoring_role_arn);
    bool is_monitoring_role_arn_Set() const;
    bool is_monitoring_role_arn_Valid() const;

    qint32 getPromotionTier() const;
    void setPromotionTier(const qint32 &promotion_tier);
    bool is_promotion_tier_Set() const;
    bool is_promotion_tier_Valid() const;

    QString getDbInstanceArn() const;
    void setDbInstanceArn(const QString &db_instance_arn);
    bool is_db_instance_arn_Set() const;
    bool is_db_instance_arn_Valid() const;

    QString getTimezone() const;
    void setTimezone(const QString &timezone);
    bool is_timezone_Set() const;
    bool is_timezone_Valid() const;

    bool getIamDatabaseAuthenticationEnabled() const;
    void setIamDatabaseAuthenticationEnabled(const bool &iam_database_authentication_enabled);
    bool is_iam_database_authentication_enabled_Set() const;
    bool is_iam_database_authentication_enabled_Valid() const;

    bool getPerformanceInsightsEnabled() const;
    void setPerformanceInsightsEnabled(const bool &performance_insights_enabled);
    bool is_performance_insights_enabled_Set() const;
    bool is_performance_insights_enabled_Valid() const;

    QString getPerformanceInsightsKmsKeyId() const;
    void setPerformanceInsightsKmsKeyId(const QString &performance_insights_kms_key_id);
    bool is_performance_insights_kms_key_id_Set() const;
    bool is_performance_insights_kms_key_id_Valid() const;

    QList getEnabledCloudwatchLogsExports() const;
    void setEnabledCloudwatchLogsExports(const QList &enabled_cloudwatch_logs_exports);
    bool is_enabled_cloudwatch_logs_exports_Set() const;
    bool is_enabled_cloudwatch_logs_exports_Valid() const;

    bool getDeletionProtection() const;
    void setDeletionProtection(const bool &deletion_protection);
    bool is_deletion_protection_Set() const;
    bool is_deletion_protection_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_db_instance_identifier;
    bool m_db_instance_identifier_isSet;
    bool m_db_instance_identifier_isValid;

    QString m_db_instance_class;
    bool m_db_instance_class_isSet;
    bool m_db_instance_class_isValid;

    QString m_engine;
    bool m_engine_isSet;
    bool m_engine_isValid;

    QString m_db_instance_status;
    bool m_db_instance_status_isSet;
    bool m_db_instance_status_isValid;

    QString m_master_username;
    bool m_master_username_isSet;
    bool m_master_username_isValid;

    QString m_db_name;
    bool m_db_name_isSet;
    bool m_db_name_isValid;

    OAIDBInstance_Endpoint m_endpoint;
    bool m_endpoint_isSet;
    bool m_endpoint_isValid;

    qint32 m_allocated_storage;
    bool m_allocated_storage_isSet;
    bool m_allocated_storage_isValid;

    QDateTime m_instance_create_time;
    bool m_instance_create_time_isSet;
    bool m_instance_create_time_isValid;

    QString m_preferred_backup_window;
    bool m_preferred_backup_window_isSet;
    bool m_preferred_backup_window_isValid;

    qint32 m_backup_retention_period;
    bool m_backup_retention_period_isSet;
    bool m_backup_retention_period_isValid;

    QList m_db_security_groups;
    bool m_db_security_groups_isSet;
    bool m_db_security_groups_isValid;

    QList m_vpc_security_groups;
    bool m_vpc_security_groups_isSet;
    bool m_vpc_security_groups_isValid;

    QList m_db_parameter_groups;
    bool m_db_parameter_groups_isSet;
    bool m_db_parameter_groups_isValid;

    QString m_availability_zone;
    bool m_availability_zone_isSet;
    bool m_availability_zone_isValid;

    OAIDBInstance_DBSubnetGroup m_db_subnet_group;
    bool m_db_subnet_group_isSet;
    bool m_db_subnet_group_isValid;

    QString m_preferred_maintenance_window;
    bool m_preferred_maintenance_window_isSet;
    bool m_preferred_maintenance_window_isValid;

    OAIDBInstance_PendingModifiedValues m_pending_modified_values;
    bool m_pending_modified_values_isSet;
    bool m_pending_modified_values_isValid;

    QDateTime m_latest_restorable_time;
    bool m_latest_restorable_time_isSet;
    bool m_latest_restorable_time_isValid;

    bool m_multi_az;
    bool m_multi_az_isSet;
    bool m_multi_az_isValid;

    QString m_engine_version;
    bool m_engine_version_isSet;
    bool m_engine_version_isValid;

    bool m_auto_minor_version_upgrade;
    bool m_auto_minor_version_upgrade_isSet;
    bool m_auto_minor_version_upgrade_isValid;

    QString m_read_replica_source_db_instance_identifier;
    bool m_read_replica_source_db_instance_identifier_isSet;
    bool m_read_replica_source_db_instance_identifier_isValid;

    QList m_read_replica_db_instance_identifiers;
    bool m_read_replica_db_instance_identifiers_isSet;
    bool m_read_replica_db_instance_identifiers_isValid;

    QList m_read_replica_db_cluster_identifiers;
    bool m_read_replica_db_cluster_identifiers_isSet;
    bool m_read_replica_db_cluster_identifiers_isValid;

    QString m_license_model;
    bool m_license_model_isSet;
    bool m_license_model_isValid;

    qint32 m_iops;
    bool m_iops_isSet;
    bool m_iops_isValid;

    QList m_option_group_memberships;
    bool m_option_group_memberships_isSet;
    bool m_option_group_memberships_isValid;

    QString m_character_set_name;
    bool m_character_set_name_isSet;
    bool m_character_set_name_isValid;

    QString m_secondary_availability_zone;
    bool m_secondary_availability_zone_isSet;
    bool m_secondary_availability_zone_isValid;

    bool m_publicly_accessible;
    bool m_publicly_accessible_isSet;
    bool m_publicly_accessible_isValid;

    QList m_status_infos;
    bool m_status_infos_isSet;
    bool m_status_infos_isValid;

    QString m_storage_type;
    bool m_storage_type_isSet;
    bool m_storage_type_isValid;

    QString m_tde_credential_arn;
    bool m_tde_credential_arn_isSet;
    bool m_tde_credential_arn_isValid;

    qint32 m_db_instance_port;
    bool m_db_instance_port_isSet;
    bool m_db_instance_port_isValid;

    QString m_db_cluster_identifier;
    bool m_db_cluster_identifier_isSet;
    bool m_db_cluster_identifier_isValid;

    bool m_storage_encrypted;
    bool m_storage_encrypted_isSet;
    bool m_storage_encrypted_isValid;

    QString m_kms_key_id;
    bool m_kms_key_id_isSet;
    bool m_kms_key_id_isValid;

    QString m_dbi_resource_id;
    bool m_dbi_resource_id_isSet;
    bool m_dbi_resource_id_isValid;

    QString m_ca_certificate_identifier;
    bool m_ca_certificate_identifier_isSet;
    bool m_ca_certificate_identifier_isValid;

    QList m_domain_memberships;
    bool m_domain_memberships_isSet;
    bool m_domain_memberships_isValid;

    bool m_copy_tags_to_snapshot;
    bool m_copy_tags_to_snapshot_isSet;
    bool m_copy_tags_to_snapshot_isValid;

    qint32 m_monitoring_interval;
    bool m_monitoring_interval_isSet;
    bool m_monitoring_interval_isValid;

    QString m_enhanced_monitoring_resource_arn;
    bool m_enhanced_monitoring_resource_arn_isSet;
    bool m_enhanced_monitoring_resource_arn_isValid;

    QString m_monitoring_role_arn;
    bool m_monitoring_role_arn_isSet;
    bool m_monitoring_role_arn_isValid;

    qint32 m_promotion_tier;
    bool m_promotion_tier_isSet;
    bool m_promotion_tier_isValid;

    QString m_db_instance_arn;
    bool m_db_instance_arn_isSet;
    bool m_db_instance_arn_isValid;

    QString m_timezone;
    bool m_timezone_isSet;
    bool m_timezone_isValid;

    bool m_iam_database_authentication_enabled;
    bool m_iam_database_authentication_enabled_isSet;
    bool m_iam_database_authentication_enabled_isValid;

    bool m_performance_insights_enabled;
    bool m_performance_insights_enabled_isSet;
    bool m_performance_insights_enabled_isValid;

    QString m_performance_insights_kms_key_id;
    bool m_performance_insights_kms_key_id_isSet;
    bool m_performance_insights_kms_key_id_isValid;

    QList m_enabled_cloudwatch_logs_exports;
    bool m_enabled_cloudwatch_logs_exports_isSet;
    bool m_enabled_cloudwatch_logs_exports_isValid;

    bool m_deletion_protection;
    bool m_deletion_protection_isSet;
    bool m_deletion_protection_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDBInstanceList_inner)

#endif // OAIDBInstanceList_inner_H
