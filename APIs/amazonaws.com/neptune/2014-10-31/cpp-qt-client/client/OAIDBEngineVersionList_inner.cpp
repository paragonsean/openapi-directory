/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDBEngineVersionList_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDBEngineVersionList_inner::OAIDBEngineVersionList_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDBEngineVersionList_inner::OAIDBEngineVersionList_inner() {
    this->initializeModel();
}

OAIDBEngineVersionList_inner::~OAIDBEngineVersionList_inner() {}

void OAIDBEngineVersionList_inner::initializeModel() {

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_db_parameter_group_family_isSet = false;
    m_db_parameter_group_family_isValid = false;

    m_db_engine_description_isSet = false;
    m_db_engine_description_isValid = false;

    m_db_engine_version_description_isSet = false;
    m_db_engine_version_description_isValid = false;

    m_default_character_set_isSet = false;
    m_default_character_set_isValid = false;

    m_supported_character_sets_isSet = false;
    m_supported_character_sets_isValid = false;

    m_valid_upgrade_target_isSet = false;
    m_valid_upgrade_target_isValid = false;

    m_supported_timezones_isSet = false;
    m_supported_timezones_isValid = false;

    m_exportable_log_types_isSet = false;
    m_exportable_log_types_isValid = false;

    m_supports_log_exports_to_cloudwatch_logs_isSet = false;
    m_supports_log_exports_to_cloudwatch_logs_isValid = false;

    m_supports_read_replica_isSet = false;
    m_supports_read_replica_isValid = false;

    m_supports_global_databases_isSet = false;
    m_supports_global_databases_isValid = false;
}

void OAIDBEngineVersionList_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDBEngineVersionList_inner::fromJsonObject(QJsonObject json) {

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("Engine")]);
    m_engine_isSet = !json[QString("Engine")].isNull() && m_engine_isValid;

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("EngineVersion")]);
    m_engine_version_isSet = !json[QString("EngineVersion")].isNull() && m_engine_version_isValid;

    m_db_parameter_group_family_isValid = ::OpenAPI::fromJsonValue(m_db_parameter_group_family, json[QString("DBParameterGroupFamily")]);
    m_db_parameter_group_family_isSet = !json[QString("DBParameterGroupFamily")].isNull() && m_db_parameter_group_family_isValid;

    m_db_engine_description_isValid = ::OpenAPI::fromJsonValue(m_db_engine_description, json[QString("DBEngineDescription")]);
    m_db_engine_description_isSet = !json[QString("DBEngineDescription")].isNull() && m_db_engine_description_isValid;

    m_db_engine_version_description_isValid = ::OpenAPI::fromJsonValue(m_db_engine_version_description, json[QString("DBEngineVersionDescription")]);
    m_db_engine_version_description_isSet = !json[QString("DBEngineVersionDescription")].isNull() && m_db_engine_version_description_isValid;

    m_default_character_set_isValid = ::OpenAPI::fromJsonValue(m_default_character_set, json[QString("DefaultCharacterSet")]);
    m_default_character_set_isSet = !json[QString("DefaultCharacterSet")].isNull() && m_default_character_set_isValid;

    m_supported_character_sets_isValid = ::OpenAPI::fromJsonValue(m_supported_character_sets, json[QString("SupportedCharacterSets")]);
    m_supported_character_sets_isSet = !json[QString("SupportedCharacterSets")].isNull() && m_supported_character_sets_isValid;

    m_valid_upgrade_target_isValid = ::OpenAPI::fromJsonValue(m_valid_upgrade_target, json[QString("ValidUpgradeTarget")]);
    m_valid_upgrade_target_isSet = !json[QString("ValidUpgradeTarget")].isNull() && m_valid_upgrade_target_isValid;

    m_supported_timezones_isValid = ::OpenAPI::fromJsonValue(m_supported_timezones, json[QString("SupportedTimezones")]);
    m_supported_timezones_isSet = !json[QString("SupportedTimezones")].isNull() && m_supported_timezones_isValid;

    m_exportable_log_types_isValid = ::OpenAPI::fromJsonValue(m_exportable_log_types, json[QString("ExportableLogTypes")]);
    m_exportable_log_types_isSet = !json[QString("ExportableLogTypes")].isNull() && m_exportable_log_types_isValid;

    m_supports_log_exports_to_cloudwatch_logs_isValid = ::OpenAPI::fromJsonValue(m_supports_log_exports_to_cloudwatch_logs, json[QString("SupportsLogExportsToCloudwatchLogs")]);
    m_supports_log_exports_to_cloudwatch_logs_isSet = !json[QString("SupportsLogExportsToCloudwatchLogs")].isNull() && m_supports_log_exports_to_cloudwatch_logs_isValid;

    m_supports_read_replica_isValid = ::OpenAPI::fromJsonValue(m_supports_read_replica, json[QString("SupportsReadReplica")]);
    m_supports_read_replica_isSet = !json[QString("SupportsReadReplica")].isNull() && m_supports_read_replica_isValid;

    m_supports_global_databases_isValid = ::OpenAPI::fromJsonValue(m_supports_global_databases, json[QString("SupportsGlobalDatabases")]);
    m_supports_global_databases_isSet = !json[QString("SupportsGlobalDatabases")].isNull() && m_supports_global_databases_isValid;
}

QString OAIDBEngineVersionList_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDBEngineVersionList_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_engine_isSet) {
        obj.insert(QString("Engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_engine_version_isSet) {
        obj.insert(QString("EngineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_db_parameter_group_family_isSet) {
        obj.insert(QString("DBParameterGroupFamily"), ::OpenAPI::toJsonValue(m_db_parameter_group_family));
    }
    if (m_db_engine_description_isSet) {
        obj.insert(QString("DBEngineDescription"), ::OpenAPI::toJsonValue(m_db_engine_description));
    }
    if (m_db_engine_version_description_isSet) {
        obj.insert(QString("DBEngineVersionDescription"), ::OpenAPI::toJsonValue(m_db_engine_version_description));
    }
    if (m_default_character_set.isSet()) {
        obj.insert(QString("DefaultCharacterSet"), ::OpenAPI::toJsonValue(m_default_character_set));
    }
    if (m_supported_character_sets.isSet()) {
        obj.insert(QString("SupportedCharacterSets"), ::OpenAPI::toJsonValue(m_supported_character_sets));
    }
    if (m_valid_upgrade_target.isSet()) {
        obj.insert(QString("ValidUpgradeTarget"), ::OpenAPI::toJsonValue(m_valid_upgrade_target));
    }
    if (m_supported_timezones.isSet()) {
        obj.insert(QString("SupportedTimezones"), ::OpenAPI::toJsonValue(m_supported_timezones));
    }
    if (m_exportable_log_types.isSet()) {
        obj.insert(QString("ExportableLogTypes"), ::OpenAPI::toJsonValue(m_exportable_log_types));
    }
    if (m_supports_log_exports_to_cloudwatch_logs_isSet) {
        obj.insert(QString("SupportsLogExportsToCloudwatchLogs"), ::OpenAPI::toJsonValue(m_supports_log_exports_to_cloudwatch_logs));
    }
    if (m_supports_read_replica_isSet) {
        obj.insert(QString("SupportsReadReplica"), ::OpenAPI::toJsonValue(m_supports_read_replica));
    }
    if (m_supports_global_databases_isSet) {
        obj.insert(QString("SupportsGlobalDatabases"), ::OpenAPI::toJsonValue(m_supports_global_databases));
    }
    return obj;
}

QString OAIDBEngineVersionList_inner::getEngine() const {
    return m_engine;
}
void OAIDBEngineVersionList_inner::setEngine(const QString &engine) {
    m_engine = engine;
    m_engine_isSet = true;
}

bool OAIDBEngineVersionList_inner::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAIDBEngineVersionList_inner::is_engine_Valid() const{
    return m_engine_isValid;
}

QString OAIDBEngineVersionList_inner::getEngineVersion() const {
    return m_engine_version;
}
void OAIDBEngineVersionList_inner::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAIDBEngineVersionList_inner::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAIDBEngineVersionList_inner::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

QString OAIDBEngineVersionList_inner::getDbParameterGroupFamily() const {
    return m_db_parameter_group_family;
}
void OAIDBEngineVersionList_inner::setDbParameterGroupFamily(const QString &db_parameter_group_family) {
    m_db_parameter_group_family = db_parameter_group_family;
    m_db_parameter_group_family_isSet = true;
}

bool OAIDBEngineVersionList_inner::is_db_parameter_group_family_Set() const{
    return m_db_parameter_group_family_isSet;
}

bool OAIDBEngineVersionList_inner::is_db_parameter_group_family_Valid() const{
    return m_db_parameter_group_family_isValid;
}

QString OAIDBEngineVersionList_inner::getDbEngineDescription() const {
    return m_db_engine_description;
}
void OAIDBEngineVersionList_inner::setDbEngineDescription(const QString &db_engine_description) {
    m_db_engine_description = db_engine_description;
    m_db_engine_description_isSet = true;
}

bool OAIDBEngineVersionList_inner::is_db_engine_description_Set() const{
    return m_db_engine_description_isSet;
}

bool OAIDBEngineVersionList_inner::is_db_engine_description_Valid() const{
    return m_db_engine_description_isValid;
}

QString OAIDBEngineVersionList_inner::getDbEngineVersionDescription() const {
    return m_db_engine_version_description;
}
void OAIDBEngineVersionList_inner::setDbEngineVersionDescription(const QString &db_engine_version_description) {
    m_db_engine_version_description = db_engine_version_description;
    m_db_engine_version_description_isSet = true;
}

bool OAIDBEngineVersionList_inner::is_db_engine_version_description_Set() const{
    return m_db_engine_version_description_isSet;
}

bool OAIDBEngineVersionList_inner::is_db_engine_version_description_Valid() const{
    return m_db_engine_version_description_isValid;
}

OAIDBEngineVersion_DefaultCharacterSet OAIDBEngineVersionList_inner::getDefaultCharacterSet() const {
    return m_default_character_set;
}
void OAIDBEngineVersionList_inner::setDefaultCharacterSet(const OAIDBEngineVersion_DefaultCharacterSet &default_character_set) {
    m_default_character_set = default_character_set;
    m_default_character_set_isSet = true;
}

bool OAIDBEngineVersionList_inner::is_default_character_set_Set() const{
    return m_default_character_set_isSet;
}

bool OAIDBEngineVersionList_inner::is_default_character_set_Valid() const{
    return m_default_character_set_isValid;
}

QList OAIDBEngineVersionList_inner::getSupportedCharacterSets() const {
    return m_supported_character_sets;
}
void OAIDBEngineVersionList_inner::setSupportedCharacterSets(const QList &supported_character_sets) {
    m_supported_character_sets = supported_character_sets;
    m_supported_character_sets_isSet = true;
}

bool OAIDBEngineVersionList_inner::is_supported_character_sets_Set() const{
    return m_supported_character_sets_isSet;
}

bool OAIDBEngineVersionList_inner::is_supported_character_sets_Valid() const{
    return m_supported_character_sets_isValid;
}

QList OAIDBEngineVersionList_inner::getValidUpgradeTarget() const {
    return m_valid_upgrade_target;
}
void OAIDBEngineVersionList_inner::setValidUpgradeTarget(const QList &valid_upgrade_target) {
    m_valid_upgrade_target = valid_upgrade_target;
    m_valid_upgrade_target_isSet = true;
}

bool OAIDBEngineVersionList_inner::is_valid_upgrade_target_Set() const{
    return m_valid_upgrade_target_isSet;
}

bool OAIDBEngineVersionList_inner::is_valid_upgrade_target_Valid() const{
    return m_valid_upgrade_target_isValid;
}

QList OAIDBEngineVersionList_inner::getSupportedTimezones() const {
    return m_supported_timezones;
}
void OAIDBEngineVersionList_inner::setSupportedTimezones(const QList &supported_timezones) {
    m_supported_timezones = supported_timezones;
    m_supported_timezones_isSet = true;
}

bool OAIDBEngineVersionList_inner::is_supported_timezones_Set() const{
    return m_supported_timezones_isSet;
}

bool OAIDBEngineVersionList_inner::is_supported_timezones_Valid() const{
    return m_supported_timezones_isValid;
}

QList OAIDBEngineVersionList_inner::getExportableLogTypes() const {
    return m_exportable_log_types;
}
void OAIDBEngineVersionList_inner::setExportableLogTypes(const QList &exportable_log_types) {
    m_exportable_log_types = exportable_log_types;
    m_exportable_log_types_isSet = true;
}

bool OAIDBEngineVersionList_inner::is_exportable_log_types_Set() const{
    return m_exportable_log_types_isSet;
}

bool OAIDBEngineVersionList_inner::is_exportable_log_types_Valid() const{
    return m_exportable_log_types_isValid;
}

bool OAIDBEngineVersionList_inner::getSupportsLogExportsToCloudwatchLogs() const {
    return m_supports_log_exports_to_cloudwatch_logs;
}
void OAIDBEngineVersionList_inner::setSupportsLogExportsToCloudwatchLogs(const bool &supports_log_exports_to_cloudwatch_logs) {
    m_supports_log_exports_to_cloudwatch_logs = supports_log_exports_to_cloudwatch_logs;
    m_supports_log_exports_to_cloudwatch_logs_isSet = true;
}

bool OAIDBEngineVersionList_inner::is_supports_log_exports_to_cloudwatch_logs_Set() const{
    return m_supports_log_exports_to_cloudwatch_logs_isSet;
}

bool OAIDBEngineVersionList_inner::is_supports_log_exports_to_cloudwatch_logs_Valid() const{
    return m_supports_log_exports_to_cloudwatch_logs_isValid;
}

bool OAIDBEngineVersionList_inner::getSupportsReadReplica() const {
    return m_supports_read_replica;
}
void OAIDBEngineVersionList_inner::setSupportsReadReplica(const bool &supports_read_replica) {
    m_supports_read_replica = supports_read_replica;
    m_supports_read_replica_isSet = true;
}

bool OAIDBEngineVersionList_inner::is_supports_read_replica_Set() const{
    return m_supports_read_replica_isSet;
}

bool OAIDBEngineVersionList_inner::is_supports_read_replica_Valid() const{
    return m_supports_read_replica_isValid;
}

bool OAIDBEngineVersionList_inner::getSupportsGlobalDatabases() const {
    return m_supports_global_databases;
}
void OAIDBEngineVersionList_inner::setSupportsGlobalDatabases(const bool &supports_global_databases) {
    m_supports_global_databases = supports_global_databases;
    m_supports_global_databases_isSet = true;
}

bool OAIDBEngineVersionList_inner::is_supports_global_databases_Set() const{
    return m_supports_global_databases_isSet;
}

bool OAIDBEngineVersionList_inner::is_supports_global_databases_Valid() const{
    return m_supports_global_databases_isValid;
}

bool OAIDBEngineVersionList_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_parameter_group_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_engine_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_engine_version_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_character_set.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_character_sets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_upgrade_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_timezones.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exportable_log_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_log_exports_to_cloudwatch_logs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_read_replica_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_global_databases_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDBEngineVersionList_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
