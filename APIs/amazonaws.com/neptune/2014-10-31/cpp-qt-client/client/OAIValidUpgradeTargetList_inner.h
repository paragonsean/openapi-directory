/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIValidUpgradeTargetList_inner.h
 *
 * 
 */

#ifndef OAIValidUpgradeTargetList_inner_H
#define OAIValidUpgradeTargetList_inner_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIValidUpgradeTargetList_inner : public OAIObject {
public:
    OAIValidUpgradeTargetList_inner();
    OAIValidUpgradeTargetList_inner(QString json);
    ~OAIValidUpgradeTargetList_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getEngine() const;
    void setEngine(const QString &engine);
    bool is_engine_Set() const;
    bool is_engine_Valid() const;

    QString getEngineVersion() const;
    void setEngineVersion(const QString &engine_version);
    bool is_engine_version_Set() const;
    bool is_engine_version_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    bool getAutoUpgrade() const;
    void setAutoUpgrade(const bool &auto_upgrade);
    bool is_auto_upgrade_Set() const;
    bool is_auto_upgrade_Valid() const;

    bool getIsMajorVersionUpgrade() const;
    void setIsMajorVersionUpgrade(const bool &is_major_version_upgrade);
    bool is_is_major_version_upgrade_Set() const;
    bool is_is_major_version_upgrade_Valid() const;

    bool getSupportsGlobalDatabases() const;
    void setSupportsGlobalDatabases(const bool &supports_global_databases);
    bool is_supports_global_databases_Set() const;
    bool is_supports_global_databases_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_engine;
    bool m_engine_isSet;
    bool m_engine_isValid;

    QString m_engine_version;
    bool m_engine_version_isSet;
    bool m_engine_version_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    bool m_auto_upgrade;
    bool m_auto_upgrade_isSet;
    bool m_auto_upgrade_isValid;

    bool m_is_major_version_upgrade;
    bool m_is_major_version_upgrade_isSet;
    bool m_is_major_version_upgrade_isValid;

    bool m_supports_global_databases;
    bool m_supports_global_databases_isSet;
    bool m_supports_global_databases_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIValidUpgradeTargetList_inner)

#endif // OAIValidUpgradeTargetList_inner_H
