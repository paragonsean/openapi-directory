/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDBSubnetGroup.h
 *
 * &lt;p&gt;Contains the details of an Amazon Neptune DB subnet group.&lt;/p&gt; &lt;p&gt;This data type is used as a response element in the &lt;a&gt;DescribeDBSubnetGroups&lt;/a&gt; action.&lt;/p&gt;
 */

#ifndef OAIDBSubnetGroup_H
#define OAIDBSubnetGroup_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDBSubnetGroup : public OAIObject {
public:
    OAIDBSubnetGroup();
    OAIDBSubnetGroup(QString json);
    ~OAIDBSubnetGroup() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDbSubnetGroupName() const;
    void setDbSubnetGroupName(const QString &db_subnet_group_name);
    bool is_db_subnet_group_name_Set() const;
    bool is_db_subnet_group_name_Valid() const;

    QString getDbSubnetGroupDescription() const;
    void setDbSubnetGroupDescription(const QString &db_subnet_group_description);
    bool is_db_subnet_group_description_Set() const;
    bool is_db_subnet_group_description_Valid() const;

    QString getVpcId() const;
    void setVpcId(const QString &vpc_id);
    bool is_vpc_id_Set() const;
    bool is_vpc_id_Valid() const;

    QString getSubnetGroupStatus() const;
    void setSubnetGroupStatus(const QString &subnet_group_status);
    bool is_subnet_group_status_Set() const;
    bool is_subnet_group_status_Valid() const;

    QList getSubnets() const;
    void setSubnets(const QList &subnets);
    bool is_subnets_Set() const;
    bool is_subnets_Valid() const;

    QString getDbSubnetGroupArn() const;
    void setDbSubnetGroupArn(const QString &db_subnet_group_arn);
    bool is_db_subnet_group_arn_Set() const;
    bool is_db_subnet_group_arn_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_db_subnet_group_name;
    bool m_db_subnet_group_name_isSet;
    bool m_db_subnet_group_name_isValid;

    QString m_db_subnet_group_description;
    bool m_db_subnet_group_description_isSet;
    bool m_db_subnet_group_description_isValid;

    QString m_vpc_id;
    bool m_vpc_id_isSet;
    bool m_vpc_id_isValid;

    QString m_subnet_group_status;
    bool m_subnet_group_status_isSet;
    bool m_subnet_group_status_isValid;

    QList m_subnets;
    bool m_subnets_isSet;
    bool m_subnets_isValid;

    QString m_db_subnet_group_arn;
    bool m_db_subnet_group_arn_isSet;
    bool m_db_subnet_group_arn_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDBSubnetGroup)

#endif // OAIDBSubnetGroup_H
