/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDBInstance_PendingModifiedValues.h
 *
 * 
 */

#ifndef OAIDBInstance_PendingModifiedValues_H
#define OAIDBInstance_PendingModifiedValues_H

#include <QJsonObject>

#include "OAIClusterPendingModifiedValues_PendingCloudwatchLogsExports.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIClusterPendingModifiedValues_PendingCloudwatchLogsExports;

class OAIDBInstance_PendingModifiedValues : public OAIObject {
public:
    OAIDBInstance_PendingModifiedValues();
    OAIDBInstance_PendingModifiedValues(QString json);
    ~OAIDBInstance_PendingModifiedValues() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDbInstanceClass() const;
    void setDbInstanceClass(const QString &db_instance_class);
    bool is_db_instance_class_Set() const;
    bool is_db_instance_class_Valid() const;

    qint32 getAllocatedStorage() const;
    void setAllocatedStorage(const qint32 &allocated_storage);
    bool is_allocated_storage_Set() const;
    bool is_allocated_storage_Valid() const;

    QString getMasterUserPassword() const;
    void setMasterUserPassword(const QString &master_user_password);
    bool is_master_user_password_Set() const;
    bool is_master_user_password_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    qint32 getBackupRetentionPeriod() const;
    void setBackupRetentionPeriod(const qint32 &backup_retention_period);
    bool is_backup_retention_period_Set() const;
    bool is_backup_retention_period_Valid() const;

    bool getMultiAz() const;
    void setMultiAz(const bool &multi_az);
    bool is_multi_az_Set() const;
    bool is_multi_az_Valid() const;

    QString getEngineVersion() const;
    void setEngineVersion(const QString &engine_version);
    bool is_engine_version_Set() const;
    bool is_engine_version_Valid() const;

    QString getLicenseModel() const;
    void setLicenseModel(const QString &license_model);
    bool is_license_model_Set() const;
    bool is_license_model_Valid() const;

    qint32 getIops() const;
    void setIops(const qint32 &iops);
    bool is_iops_Set() const;
    bool is_iops_Valid() const;

    QString getDbInstanceIdentifier() const;
    void setDbInstanceIdentifier(const QString &db_instance_identifier);
    bool is_db_instance_identifier_Set() const;
    bool is_db_instance_identifier_Valid() const;

    QString getStorageType() const;
    void setStorageType(const QString &storage_type);
    bool is_storage_type_Set() const;
    bool is_storage_type_Valid() const;

    QString getCaCertificateIdentifier() const;
    void setCaCertificateIdentifier(const QString &ca_certificate_identifier);
    bool is_ca_certificate_identifier_Set() const;
    bool is_ca_certificate_identifier_Valid() const;

    QString getDbSubnetGroupName() const;
    void setDbSubnetGroupName(const QString &db_subnet_group_name);
    bool is_db_subnet_group_name_Set() const;
    bool is_db_subnet_group_name_Valid() const;

    OAIClusterPendingModifiedValues_PendingCloudwatchLogsExports getPendingCloudwatchLogsExports() const;
    void setPendingCloudwatchLogsExports(const OAIClusterPendingModifiedValues_PendingCloudwatchLogsExports &pending_cloudwatch_logs_exports);
    bool is_pending_cloudwatch_logs_exports_Set() const;
    bool is_pending_cloudwatch_logs_exports_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_db_instance_class;
    bool m_db_instance_class_isSet;
    bool m_db_instance_class_isValid;

    qint32 m_allocated_storage;
    bool m_allocated_storage_isSet;
    bool m_allocated_storage_isValid;

    QString m_master_user_password;
    bool m_master_user_password_isSet;
    bool m_master_user_password_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    qint32 m_backup_retention_period;
    bool m_backup_retention_period_isSet;
    bool m_backup_retention_period_isValid;

    bool m_multi_az;
    bool m_multi_az_isSet;
    bool m_multi_az_isValid;

    QString m_engine_version;
    bool m_engine_version_isSet;
    bool m_engine_version_isValid;

    QString m_license_model;
    bool m_license_model_isSet;
    bool m_license_model_isValid;

    qint32 m_iops;
    bool m_iops_isSet;
    bool m_iops_isValid;

    QString m_db_instance_identifier;
    bool m_db_instance_identifier_isSet;
    bool m_db_instance_identifier_isValid;

    QString m_storage_type;
    bool m_storage_type_isSet;
    bool m_storage_type_isValid;

    QString m_ca_certificate_identifier;
    bool m_ca_certificate_identifier_isSet;
    bool m_ca_certificate_identifier_isValid;

    QString m_db_subnet_group_name;
    bool m_db_subnet_group_name_isSet;
    bool m_db_subnet_group_name_isValid;

    OAIClusterPendingModifiedValues_PendingCloudwatchLogsExports m_pending_cloudwatch_logs_exports;
    bool m_pending_cloudwatch_logs_exports_isSet;
    bool m_pending_cloudwatch_logs_exports_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDBInstance_PendingModifiedValues)

#endif // OAIDBInstance_PendingModifiedValues_H
