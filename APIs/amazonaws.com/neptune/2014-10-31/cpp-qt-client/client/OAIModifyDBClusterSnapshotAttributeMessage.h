/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIModifyDBClusterSnapshotAttributeMessage.h
 *
 * 
 */

#ifndef OAIModifyDBClusterSnapshotAttributeMessage_H
#define OAIModifyDBClusterSnapshotAttributeMessage_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIModifyDBClusterSnapshotAttributeMessage : public OAIObject {
public:
    OAIModifyDBClusterSnapshotAttributeMessage();
    OAIModifyDBClusterSnapshotAttributeMessage(QString json);
    ~OAIModifyDBClusterSnapshotAttributeMessage() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDbClusterSnapshotIdentifier() const;
    void setDbClusterSnapshotIdentifier(const QString &db_cluster_snapshot_identifier);
    bool is_db_cluster_snapshot_identifier_Set() const;
    bool is_db_cluster_snapshot_identifier_Valid() const;

    QString getAttributeName() const;
    void setAttributeName(const QString &attribute_name);
    bool is_attribute_name_Set() const;
    bool is_attribute_name_Valid() const;

    QList getValuesToAdd() const;
    void setValuesToAdd(const QList &values_to_add);
    bool is_values_to_add_Set() const;
    bool is_values_to_add_Valid() const;

    QList getValuesToRemove() const;
    void setValuesToRemove(const QList &values_to_remove);
    bool is_values_to_remove_Set() const;
    bool is_values_to_remove_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_db_cluster_snapshot_identifier;
    bool m_db_cluster_snapshot_identifier_isSet;
    bool m_db_cluster_snapshot_identifier_isValid;

    QString m_attribute_name;
    bool m_attribute_name_isSet;
    bool m_attribute_name_isValid;

    QList m_values_to_add;
    bool m_values_to_add_isSet;
    bool m_values_to_add_isValid;

    QList m_values_to_remove;
    bool m_values_to_remove_isSet;
    bool m_values_to_remove_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIModifyDBClusterSnapshotAttributeMessage)

#endif // OAIModifyDBClusterSnapshotAttributeMessage_H
