/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDBClusterSnapshot.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDBClusterSnapshot::OAIDBClusterSnapshot(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDBClusterSnapshot::OAIDBClusterSnapshot() {
    this->initializeModel();
}

OAIDBClusterSnapshot::~OAIDBClusterSnapshot() {}

void OAIDBClusterSnapshot::initializeModel() {

    m_availability_zones_isSet = false;
    m_availability_zones_isValid = false;

    m_db_cluster_snapshot_identifier_isSet = false;
    m_db_cluster_snapshot_identifier_isValid = false;

    m_db_cluster_identifier_isSet = false;
    m_db_cluster_identifier_isValid = false;

    m_snapshot_create_time_isSet = false;
    m_snapshot_create_time_isValid = false;

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_allocated_storage_isSet = false;
    m_allocated_storage_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_vpc_id_isSet = false;
    m_vpc_id_isValid = false;

    m_cluster_create_time_isSet = false;
    m_cluster_create_time_isValid = false;

    m_master_username_isSet = false;
    m_master_username_isValid = false;

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_license_model_isSet = false;
    m_license_model_isValid = false;

    m_snapshot_type_isSet = false;
    m_snapshot_type_isValid = false;

    m_percent_progress_isSet = false;
    m_percent_progress_isValid = false;

    m_storage_encrypted_isSet = false;
    m_storage_encrypted_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_db_cluster_snapshot_arn_isSet = false;
    m_db_cluster_snapshot_arn_isValid = false;

    m_source_db_cluster_snapshot_arn_isSet = false;
    m_source_db_cluster_snapshot_arn_isValid = false;

    m_iam_database_authentication_enabled_isSet = false;
    m_iam_database_authentication_enabled_isValid = false;
}

void OAIDBClusterSnapshot::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDBClusterSnapshot::fromJsonObject(QJsonObject json) {

    m_availability_zones_isValid = ::OpenAPI::fromJsonValue(m_availability_zones, json[QString("AvailabilityZones")]);
    m_availability_zones_isSet = !json[QString("AvailabilityZones")].isNull() && m_availability_zones_isValid;

    m_db_cluster_snapshot_identifier_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_snapshot_identifier, json[QString("DBClusterSnapshotIdentifier")]);
    m_db_cluster_snapshot_identifier_isSet = !json[QString("DBClusterSnapshotIdentifier")].isNull() && m_db_cluster_snapshot_identifier_isValid;

    m_db_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_identifier, json[QString("DBClusterIdentifier")]);
    m_db_cluster_identifier_isSet = !json[QString("DBClusterIdentifier")].isNull() && m_db_cluster_identifier_isValid;

    m_snapshot_create_time_isValid = ::OpenAPI::fromJsonValue(m_snapshot_create_time, json[QString("SnapshotCreateTime")]);
    m_snapshot_create_time_isSet = !json[QString("SnapshotCreateTime")].isNull() && m_snapshot_create_time_isValid;

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("Engine")]);
    m_engine_isSet = !json[QString("Engine")].isNull() && m_engine_isValid;

    m_allocated_storage_isValid = ::OpenAPI::fromJsonValue(m_allocated_storage, json[QString("AllocatedStorage")]);
    m_allocated_storage_isSet = !json[QString("AllocatedStorage")].isNull() && m_allocated_storage_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("Port")]);
    m_port_isSet = !json[QString("Port")].isNull() && m_port_isValid;

    m_vpc_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_id, json[QString("VpcId")]);
    m_vpc_id_isSet = !json[QString("VpcId")].isNull() && m_vpc_id_isValid;

    m_cluster_create_time_isValid = ::OpenAPI::fromJsonValue(m_cluster_create_time, json[QString("ClusterCreateTime")]);
    m_cluster_create_time_isSet = !json[QString("ClusterCreateTime")].isNull() && m_cluster_create_time_isValid;

    m_master_username_isValid = ::OpenAPI::fromJsonValue(m_master_username, json[QString("MasterUsername")]);
    m_master_username_isSet = !json[QString("MasterUsername")].isNull() && m_master_username_isValid;

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("EngineVersion")]);
    m_engine_version_isSet = !json[QString("EngineVersion")].isNull() && m_engine_version_isValid;

    m_license_model_isValid = ::OpenAPI::fromJsonValue(m_license_model, json[QString("LicenseModel")]);
    m_license_model_isSet = !json[QString("LicenseModel")].isNull() && m_license_model_isValid;

    m_snapshot_type_isValid = ::OpenAPI::fromJsonValue(m_snapshot_type, json[QString("SnapshotType")]);
    m_snapshot_type_isSet = !json[QString("SnapshotType")].isNull() && m_snapshot_type_isValid;

    m_percent_progress_isValid = ::OpenAPI::fromJsonValue(m_percent_progress, json[QString("PercentProgress")]);
    m_percent_progress_isSet = !json[QString("PercentProgress")].isNull() && m_percent_progress_isValid;

    m_storage_encrypted_isValid = ::OpenAPI::fromJsonValue(m_storage_encrypted, json[QString("StorageEncrypted")]);
    m_storage_encrypted_isSet = !json[QString("StorageEncrypted")].isNull() && m_storage_encrypted_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_db_cluster_snapshot_arn_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_snapshot_arn, json[QString("DBClusterSnapshotArn")]);
    m_db_cluster_snapshot_arn_isSet = !json[QString("DBClusterSnapshotArn")].isNull() && m_db_cluster_snapshot_arn_isValid;

    m_source_db_cluster_snapshot_arn_isValid = ::OpenAPI::fromJsonValue(m_source_db_cluster_snapshot_arn, json[QString("SourceDBClusterSnapshotArn")]);
    m_source_db_cluster_snapshot_arn_isSet = !json[QString("SourceDBClusterSnapshotArn")].isNull() && m_source_db_cluster_snapshot_arn_isValid;

    m_iam_database_authentication_enabled_isValid = ::OpenAPI::fromJsonValue(m_iam_database_authentication_enabled, json[QString("IAMDatabaseAuthenticationEnabled")]);
    m_iam_database_authentication_enabled_isSet = !json[QString("IAMDatabaseAuthenticationEnabled")].isNull() && m_iam_database_authentication_enabled_isValid;
}

QString OAIDBClusterSnapshot::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDBClusterSnapshot::asJsonObject() const {
    QJsonObject obj;
    if (m_availability_zones.isSet()) {
        obj.insert(QString("AvailabilityZones"), ::OpenAPI::toJsonValue(m_availability_zones));
    }
    if (m_db_cluster_snapshot_identifier_isSet) {
        obj.insert(QString("DBClusterSnapshotIdentifier"), ::OpenAPI::toJsonValue(m_db_cluster_snapshot_identifier));
    }
    if (m_db_cluster_identifier_isSet) {
        obj.insert(QString("DBClusterIdentifier"), ::OpenAPI::toJsonValue(m_db_cluster_identifier));
    }
    if (m_snapshot_create_time_isSet) {
        obj.insert(QString("SnapshotCreateTime"), ::OpenAPI::toJsonValue(m_snapshot_create_time));
    }
    if (m_engine_isSet) {
        obj.insert(QString("Engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_allocated_storage_isSet) {
        obj.insert(QString("AllocatedStorage"), ::OpenAPI::toJsonValue(m_allocated_storage));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_port_isSet) {
        obj.insert(QString("Port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_vpc_id_isSet) {
        obj.insert(QString("VpcId"), ::OpenAPI::toJsonValue(m_vpc_id));
    }
    if (m_cluster_create_time_isSet) {
        obj.insert(QString("ClusterCreateTime"), ::OpenAPI::toJsonValue(m_cluster_create_time));
    }
    if (m_master_username_isSet) {
        obj.insert(QString("MasterUsername"), ::OpenAPI::toJsonValue(m_master_username));
    }
    if (m_engine_version_isSet) {
        obj.insert(QString("EngineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_license_model_isSet) {
        obj.insert(QString("LicenseModel"), ::OpenAPI::toJsonValue(m_license_model));
    }
    if (m_snapshot_type_isSet) {
        obj.insert(QString("SnapshotType"), ::OpenAPI::toJsonValue(m_snapshot_type));
    }
    if (m_percent_progress_isSet) {
        obj.insert(QString("PercentProgress"), ::OpenAPI::toJsonValue(m_percent_progress));
    }
    if (m_storage_encrypted_isSet) {
        obj.insert(QString("StorageEncrypted"), ::OpenAPI::toJsonValue(m_storage_encrypted));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_db_cluster_snapshot_arn_isSet) {
        obj.insert(QString("DBClusterSnapshotArn"), ::OpenAPI::toJsonValue(m_db_cluster_snapshot_arn));
    }
    if (m_source_db_cluster_snapshot_arn_isSet) {
        obj.insert(QString("SourceDBClusterSnapshotArn"), ::OpenAPI::toJsonValue(m_source_db_cluster_snapshot_arn));
    }
    if (m_iam_database_authentication_enabled_isSet) {
        obj.insert(QString("IAMDatabaseAuthenticationEnabled"), ::OpenAPI::toJsonValue(m_iam_database_authentication_enabled));
    }
    return obj;
}

QList OAIDBClusterSnapshot::getAvailabilityZones() const {
    return m_availability_zones;
}
void OAIDBClusterSnapshot::setAvailabilityZones(const QList &availability_zones) {
    m_availability_zones = availability_zones;
    m_availability_zones_isSet = true;
}

bool OAIDBClusterSnapshot::is_availability_zones_Set() const{
    return m_availability_zones_isSet;
}

bool OAIDBClusterSnapshot::is_availability_zones_Valid() const{
    return m_availability_zones_isValid;
}

QString OAIDBClusterSnapshot::getDbClusterSnapshotIdentifier() const {
    return m_db_cluster_snapshot_identifier;
}
void OAIDBClusterSnapshot::setDbClusterSnapshotIdentifier(const QString &db_cluster_snapshot_identifier) {
    m_db_cluster_snapshot_identifier = db_cluster_snapshot_identifier;
    m_db_cluster_snapshot_identifier_isSet = true;
}

bool OAIDBClusterSnapshot::is_db_cluster_snapshot_identifier_Set() const{
    return m_db_cluster_snapshot_identifier_isSet;
}

bool OAIDBClusterSnapshot::is_db_cluster_snapshot_identifier_Valid() const{
    return m_db_cluster_snapshot_identifier_isValid;
}

QString OAIDBClusterSnapshot::getDbClusterIdentifier() const {
    return m_db_cluster_identifier;
}
void OAIDBClusterSnapshot::setDbClusterIdentifier(const QString &db_cluster_identifier) {
    m_db_cluster_identifier = db_cluster_identifier;
    m_db_cluster_identifier_isSet = true;
}

bool OAIDBClusterSnapshot::is_db_cluster_identifier_Set() const{
    return m_db_cluster_identifier_isSet;
}

bool OAIDBClusterSnapshot::is_db_cluster_identifier_Valid() const{
    return m_db_cluster_identifier_isValid;
}

QDateTime OAIDBClusterSnapshot::getSnapshotCreateTime() const {
    return m_snapshot_create_time;
}
void OAIDBClusterSnapshot::setSnapshotCreateTime(const QDateTime &snapshot_create_time) {
    m_snapshot_create_time = snapshot_create_time;
    m_snapshot_create_time_isSet = true;
}

bool OAIDBClusterSnapshot::is_snapshot_create_time_Set() const{
    return m_snapshot_create_time_isSet;
}

bool OAIDBClusterSnapshot::is_snapshot_create_time_Valid() const{
    return m_snapshot_create_time_isValid;
}

QString OAIDBClusterSnapshot::getEngine() const {
    return m_engine;
}
void OAIDBClusterSnapshot::setEngine(const QString &engine) {
    m_engine = engine;
    m_engine_isSet = true;
}

bool OAIDBClusterSnapshot::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAIDBClusterSnapshot::is_engine_Valid() const{
    return m_engine_isValid;
}

qint32 OAIDBClusterSnapshot::getAllocatedStorage() const {
    return m_allocated_storage;
}
void OAIDBClusterSnapshot::setAllocatedStorage(const qint32 &allocated_storage) {
    m_allocated_storage = allocated_storage;
    m_allocated_storage_isSet = true;
}

bool OAIDBClusterSnapshot::is_allocated_storage_Set() const{
    return m_allocated_storage_isSet;
}

bool OAIDBClusterSnapshot::is_allocated_storage_Valid() const{
    return m_allocated_storage_isValid;
}

QString OAIDBClusterSnapshot::getStatus() const {
    return m_status;
}
void OAIDBClusterSnapshot::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDBClusterSnapshot::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDBClusterSnapshot::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIDBClusterSnapshot::getPort() const {
    return m_port;
}
void OAIDBClusterSnapshot::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIDBClusterSnapshot::is_port_Set() const{
    return m_port_isSet;
}

bool OAIDBClusterSnapshot::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIDBClusterSnapshot::getVpcId() const {
    return m_vpc_id;
}
void OAIDBClusterSnapshot::setVpcId(const QString &vpc_id) {
    m_vpc_id = vpc_id;
    m_vpc_id_isSet = true;
}

bool OAIDBClusterSnapshot::is_vpc_id_Set() const{
    return m_vpc_id_isSet;
}

bool OAIDBClusterSnapshot::is_vpc_id_Valid() const{
    return m_vpc_id_isValid;
}

QDateTime OAIDBClusterSnapshot::getClusterCreateTime() const {
    return m_cluster_create_time;
}
void OAIDBClusterSnapshot::setClusterCreateTime(const QDateTime &cluster_create_time) {
    m_cluster_create_time = cluster_create_time;
    m_cluster_create_time_isSet = true;
}

bool OAIDBClusterSnapshot::is_cluster_create_time_Set() const{
    return m_cluster_create_time_isSet;
}

bool OAIDBClusterSnapshot::is_cluster_create_time_Valid() const{
    return m_cluster_create_time_isValid;
}

QString OAIDBClusterSnapshot::getMasterUsername() const {
    return m_master_username;
}
void OAIDBClusterSnapshot::setMasterUsername(const QString &master_username) {
    m_master_username = master_username;
    m_master_username_isSet = true;
}

bool OAIDBClusterSnapshot::is_master_username_Set() const{
    return m_master_username_isSet;
}

bool OAIDBClusterSnapshot::is_master_username_Valid() const{
    return m_master_username_isValid;
}

QString OAIDBClusterSnapshot::getEngineVersion() const {
    return m_engine_version;
}
void OAIDBClusterSnapshot::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAIDBClusterSnapshot::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAIDBClusterSnapshot::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

QString OAIDBClusterSnapshot::getLicenseModel() const {
    return m_license_model;
}
void OAIDBClusterSnapshot::setLicenseModel(const QString &license_model) {
    m_license_model = license_model;
    m_license_model_isSet = true;
}

bool OAIDBClusterSnapshot::is_license_model_Set() const{
    return m_license_model_isSet;
}

bool OAIDBClusterSnapshot::is_license_model_Valid() const{
    return m_license_model_isValid;
}

QString OAIDBClusterSnapshot::getSnapshotType() const {
    return m_snapshot_type;
}
void OAIDBClusterSnapshot::setSnapshotType(const QString &snapshot_type) {
    m_snapshot_type = snapshot_type;
    m_snapshot_type_isSet = true;
}

bool OAIDBClusterSnapshot::is_snapshot_type_Set() const{
    return m_snapshot_type_isSet;
}

bool OAIDBClusterSnapshot::is_snapshot_type_Valid() const{
    return m_snapshot_type_isValid;
}

qint32 OAIDBClusterSnapshot::getPercentProgress() const {
    return m_percent_progress;
}
void OAIDBClusterSnapshot::setPercentProgress(const qint32 &percent_progress) {
    m_percent_progress = percent_progress;
    m_percent_progress_isSet = true;
}

bool OAIDBClusterSnapshot::is_percent_progress_Set() const{
    return m_percent_progress_isSet;
}

bool OAIDBClusterSnapshot::is_percent_progress_Valid() const{
    return m_percent_progress_isValid;
}

bool OAIDBClusterSnapshot::getStorageEncrypted() const {
    return m_storage_encrypted;
}
void OAIDBClusterSnapshot::setStorageEncrypted(const bool &storage_encrypted) {
    m_storage_encrypted = storage_encrypted;
    m_storage_encrypted_isSet = true;
}

bool OAIDBClusterSnapshot::is_storage_encrypted_Set() const{
    return m_storage_encrypted_isSet;
}

bool OAIDBClusterSnapshot::is_storage_encrypted_Valid() const{
    return m_storage_encrypted_isValid;
}

QString OAIDBClusterSnapshot::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAIDBClusterSnapshot::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAIDBClusterSnapshot::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAIDBClusterSnapshot::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

QString OAIDBClusterSnapshot::getDbClusterSnapshotArn() const {
    return m_db_cluster_snapshot_arn;
}
void OAIDBClusterSnapshot::setDbClusterSnapshotArn(const QString &db_cluster_snapshot_arn) {
    m_db_cluster_snapshot_arn = db_cluster_snapshot_arn;
    m_db_cluster_snapshot_arn_isSet = true;
}

bool OAIDBClusterSnapshot::is_db_cluster_snapshot_arn_Set() const{
    return m_db_cluster_snapshot_arn_isSet;
}

bool OAIDBClusterSnapshot::is_db_cluster_snapshot_arn_Valid() const{
    return m_db_cluster_snapshot_arn_isValid;
}

QString OAIDBClusterSnapshot::getSourceDbClusterSnapshotArn() const {
    return m_source_db_cluster_snapshot_arn;
}
void OAIDBClusterSnapshot::setSourceDbClusterSnapshotArn(const QString &source_db_cluster_snapshot_arn) {
    m_source_db_cluster_snapshot_arn = source_db_cluster_snapshot_arn;
    m_source_db_cluster_snapshot_arn_isSet = true;
}

bool OAIDBClusterSnapshot::is_source_db_cluster_snapshot_arn_Set() const{
    return m_source_db_cluster_snapshot_arn_isSet;
}

bool OAIDBClusterSnapshot::is_source_db_cluster_snapshot_arn_Valid() const{
    return m_source_db_cluster_snapshot_arn_isValid;
}

bool OAIDBClusterSnapshot::getIamDatabaseAuthenticationEnabled() const {
    return m_iam_database_authentication_enabled;
}
void OAIDBClusterSnapshot::setIamDatabaseAuthenticationEnabled(const bool &iam_database_authentication_enabled) {
    m_iam_database_authentication_enabled = iam_database_authentication_enabled;
    m_iam_database_authentication_enabled_isSet = true;
}

bool OAIDBClusterSnapshot::is_iam_database_authentication_enabled_Set() const{
    return m_iam_database_authentication_enabled_isSet;
}

bool OAIDBClusterSnapshot::is_iam_database_authentication_enabled_Valid() const{
    return m_iam_database_authentication_enabled_isValid;
}

bool OAIDBClusterSnapshot::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability_zones.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_cluster_snapshot_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allocated_storage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_cluster_snapshot_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_db_cluster_snapshot_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_database_authentication_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDBClusterSnapshot::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
