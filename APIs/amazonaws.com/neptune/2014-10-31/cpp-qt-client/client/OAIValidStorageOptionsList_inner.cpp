/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValidStorageOptionsList_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValidStorageOptionsList_inner::OAIValidStorageOptionsList_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValidStorageOptionsList_inner::OAIValidStorageOptionsList_inner() {
    this->initializeModel();
}

OAIValidStorageOptionsList_inner::~OAIValidStorageOptionsList_inner() {}

void OAIValidStorageOptionsList_inner::initializeModel() {

    m_storage_type_isSet = false;
    m_storage_type_isValid = false;

    m_storage_size_isSet = false;
    m_storage_size_isValid = false;

    m_provisioned_iops_isSet = false;
    m_provisioned_iops_isValid = false;

    m_iops_to_storage_ratio_isSet = false;
    m_iops_to_storage_ratio_isValid = false;
}

void OAIValidStorageOptionsList_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValidStorageOptionsList_inner::fromJsonObject(QJsonObject json) {

    m_storage_type_isValid = ::OpenAPI::fromJsonValue(m_storage_type, json[QString("StorageType")]);
    m_storage_type_isSet = !json[QString("StorageType")].isNull() && m_storage_type_isValid;

    m_storage_size_isValid = ::OpenAPI::fromJsonValue(m_storage_size, json[QString("StorageSize")]);
    m_storage_size_isSet = !json[QString("StorageSize")].isNull() && m_storage_size_isValid;

    m_provisioned_iops_isValid = ::OpenAPI::fromJsonValue(m_provisioned_iops, json[QString("ProvisionedIops")]);
    m_provisioned_iops_isSet = !json[QString("ProvisionedIops")].isNull() && m_provisioned_iops_isValid;

    m_iops_to_storage_ratio_isValid = ::OpenAPI::fromJsonValue(m_iops_to_storage_ratio, json[QString("IopsToStorageRatio")]);
    m_iops_to_storage_ratio_isSet = !json[QString("IopsToStorageRatio")].isNull() && m_iops_to_storage_ratio_isValid;
}

QString OAIValidStorageOptionsList_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValidStorageOptionsList_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_storage_type_isSet) {
        obj.insert(QString("StorageType"), ::OpenAPI::toJsonValue(m_storage_type));
    }
    if (m_storage_size.isSet()) {
        obj.insert(QString("StorageSize"), ::OpenAPI::toJsonValue(m_storage_size));
    }
    if (m_provisioned_iops.isSet()) {
        obj.insert(QString("ProvisionedIops"), ::OpenAPI::toJsonValue(m_provisioned_iops));
    }
    if (m_iops_to_storage_ratio.isSet()) {
        obj.insert(QString("IopsToStorageRatio"), ::OpenAPI::toJsonValue(m_iops_to_storage_ratio));
    }
    return obj;
}

QString OAIValidStorageOptionsList_inner::getStorageType() const {
    return m_storage_type;
}
void OAIValidStorageOptionsList_inner::setStorageType(const QString &storage_type) {
    m_storage_type = storage_type;
    m_storage_type_isSet = true;
}

bool OAIValidStorageOptionsList_inner::is_storage_type_Set() const{
    return m_storage_type_isSet;
}

bool OAIValidStorageOptionsList_inner::is_storage_type_Valid() const{
    return m_storage_type_isValid;
}

QList OAIValidStorageOptionsList_inner::getStorageSize() const {
    return m_storage_size;
}
void OAIValidStorageOptionsList_inner::setStorageSize(const QList &storage_size) {
    m_storage_size = storage_size;
    m_storage_size_isSet = true;
}

bool OAIValidStorageOptionsList_inner::is_storage_size_Set() const{
    return m_storage_size_isSet;
}

bool OAIValidStorageOptionsList_inner::is_storage_size_Valid() const{
    return m_storage_size_isValid;
}

QList OAIValidStorageOptionsList_inner::getProvisionedIops() const {
    return m_provisioned_iops;
}
void OAIValidStorageOptionsList_inner::setProvisionedIops(const QList &provisioned_iops) {
    m_provisioned_iops = provisioned_iops;
    m_provisioned_iops_isSet = true;
}

bool OAIValidStorageOptionsList_inner::is_provisioned_iops_Set() const{
    return m_provisioned_iops_isSet;
}

bool OAIValidStorageOptionsList_inner::is_provisioned_iops_Valid() const{
    return m_provisioned_iops_isValid;
}

QList OAIValidStorageOptionsList_inner::getIopsToStorageRatio() const {
    return m_iops_to_storage_ratio;
}
void OAIValidStorageOptionsList_inner::setIopsToStorageRatio(const QList &iops_to_storage_ratio) {
    m_iops_to_storage_ratio = iops_to_storage_ratio;
    m_iops_to_storage_ratio_isSet = true;
}

bool OAIValidStorageOptionsList_inner::is_iops_to_storage_ratio_Set() const{
    return m_iops_to_storage_ratio_isSet;
}

bool OAIValidStorageOptionsList_inner::is_iops_to_storage_ratio_Valid() const{
    return m_iops_to_storage_ratio_isValid;
}

bool OAIValidStorageOptionsList_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_storage_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_size.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_iops.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_iops_to_storage_ratio.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValidStorageOptionsList_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
