/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModifyDBClusterMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModifyDBClusterMessage::OAIModifyDBClusterMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModifyDBClusterMessage::OAIModifyDBClusterMessage() {
    this->initializeModel();
}

OAIModifyDBClusterMessage::~OAIModifyDBClusterMessage() {}

void OAIModifyDBClusterMessage::initializeModel() {

    m_db_cluster_identifier_isSet = false;
    m_db_cluster_identifier_isValid = false;

    m_new_db_cluster_identifier_isSet = false;
    m_new_db_cluster_identifier_isValid = false;

    m_apply_immediately_isSet = false;
    m_apply_immediately_isValid = false;

    m_backup_retention_period_isSet = false;
    m_backup_retention_period_isValid = false;

    m_db_cluster_parameter_group_name_isSet = false;
    m_db_cluster_parameter_group_name_isValid = false;

    m_vpc_security_group_ids_isSet = false;
    m_vpc_security_group_ids_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_master_user_password_isSet = false;
    m_master_user_password_isValid = false;

    m_option_group_name_isSet = false;
    m_option_group_name_isValid = false;

    m_preferred_backup_window_isSet = false;
    m_preferred_backup_window_isValid = false;

    m_preferred_maintenance_window_isSet = false;
    m_preferred_maintenance_window_isValid = false;

    m_enable_iam_database_authentication_isSet = false;
    m_enable_iam_database_authentication_isValid = false;

    m_cloudwatch_logs_export_configuration_isSet = false;
    m_cloudwatch_logs_export_configuration_isValid = false;

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_allow_major_version_upgrade_isSet = false;
    m_allow_major_version_upgrade_isValid = false;

    m_db_instance_parameter_group_name_isSet = false;
    m_db_instance_parameter_group_name_isValid = false;

    m_deletion_protection_isSet = false;
    m_deletion_protection_isValid = false;

    m_copy_tags_to_snapshot_isSet = false;
    m_copy_tags_to_snapshot_isValid = false;

    m_serverless_v2_scaling_configuration_isSet = false;
    m_serverless_v2_scaling_configuration_isValid = false;
}

void OAIModifyDBClusterMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModifyDBClusterMessage::fromJsonObject(QJsonObject json) {

    m_db_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_identifier, json[QString("DBClusterIdentifier")]);
    m_db_cluster_identifier_isSet = !json[QString("DBClusterIdentifier")].isNull() && m_db_cluster_identifier_isValid;

    m_new_db_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_new_db_cluster_identifier, json[QString("NewDBClusterIdentifier")]);
    m_new_db_cluster_identifier_isSet = !json[QString("NewDBClusterIdentifier")].isNull() && m_new_db_cluster_identifier_isValid;

    m_apply_immediately_isValid = ::OpenAPI::fromJsonValue(m_apply_immediately, json[QString("ApplyImmediately")]);
    m_apply_immediately_isSet = !json[QString("ApplyImmediately")].isNull() && m_apply_immediately_isValid;

    m_backup_retention_period_isValid = ::OpenAPI::fromJsonValue(m_backup_retention_period, json[QString("BackupRetentionPeriod")]);
    m_backup_retention_period_isSet = !json[QString("BackupRetentionPeriod")].isNull() && m_backup_retention_period_isValid;

    m_db_cluster_parameter_group_name_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_parameter_group_name, json[QString("DBClusterParameterGroupName")]);
    m_db_cluster_parameter_group_name_isSet = !json[QString("DBClusterParameterGroupName")].isNull() && m_db_cluster_parameter_group_name_isValid;

    m_vpc_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_vpc_security_group_ids, json[QString("VpcSecurityGroupIds")]);
    m_vpc_security_group_ids_isSet = !json[QString("VpcSecurityGroupIds")].isNull() && m_vpc_security_group_ids_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("Port")]);
    m_port_isSet = !json[QString("Port")].isNull() && m_port_isValid;

    m_master_user_password_isValid = ::OpenAPI::fromJsonValue(m_master_user_password, json[QString("MasterUserPassword")]);
    m_master_user_password_isSet = !json[QString("MasterUserPassword")].isNull() && m_master_user_password_isValid;

    m_option_group_name_isValid = ::OpenAPI::fromJsonValue(m_option_group_name, json[QString("OptionGroupName")]);
    m_option_group_name_isSet = !json[QString("OptionGroupName")].isNull() && m_option_group_name_isValid;

    m_preferred_backup_window_isValid = ::OpenAPI::fromJsonValue(m_preferred_backup_window, json[QString("PreferredBackupWindow")]);
    m_preferred_backup_window_isSet = !json[QString("PreferredBackupWindow")].isNull() && m_preferred_backup_window_isValid;

    m_preferred_maintenance_window_isValid = ::OpenAPI::fromJsonValue(m_preferred_maintenance_window, json[QString("PreferredMaintenanceWindow")]);
    m_preferred_maintenance_window_isSet = !json[QString("PreferredMaintenanceWindow")].isNull() && m_preferred_maintenance_window_isValid;

    m_enable_iam_database_authentication_isValid = ::OpenAPI::fromJsonValue(m_enable_iam_database_authentication, json[QString("EnableIAMDatabaseAuthentication")]);
    m_enable_iam_database_authentication_isSet = !json[QString("EnableIAMDatabaseAuthentication")].isNull() && m_enable_iam_database_authentication_isValid;

    m_cloudwatch_logs_export_configuration_isValid = ::OpenAPI::fromJsonValue(m_cloudwatch_logs_export_configuration, json[QString("CloudwatchLogsExportConfiguration")]);
    m_cloudwatch_logs_export_configuration_isSet = !json[QString("CloudwatchLogsExportConfiguration")].isNull() && m_cloudwatch_logs_export_configuration_isValid;

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("EngineVersion")]);
    m_engine_version_isSet = !json[QString("EngineVersion")].isNull() && m_engine_version_isValid;

    m_allow_major_version_upgrade_isValid = ::OpenAPI::fromJsonValue(m_allow_major_version_upgrade, json[QString("AllowMajorVersionUpgrade")]);
    m_allow_major_version_upgrade_isSet = !json[QString("AllowMajorVersionUpgrade")].isNull() && m_allow_major_version_upgrade_isValid;

    m_db_instance_parameter_group_name_isValid = ::OpenAPI::fromJsonValue(m_db_instance_parameter_group_name, json[QString("DBInstanceParameterGroupName")]);
    m_db_instance_parameter_group_name_isSet = !json[QString("DBInstanceParameterGroupName")].isNull() && m_db_instance_parameter_group_name_isValid;

    m_deletion_protection_isValid = ::OpenAPI::fromJsonValue(m_deletion_protection, json[QString("DeletionProtection")]);
    m_deletion_protection_isSet = !json[QString("DeletionProtection")].isNull() && m_deletion_protection_isValid;

    m_copy_tags_to_snapshot_isValid = ::OpenAPI::fromJsonValue(m_copy_tags_to_snapshot, json[QString("CopyTagsToSnapshot")]);
    m_copy_tags_to_snapshot_isSet = !json[QString("CopyTagsToSnapshot")].isNull() && m_copy_tags_to_snapshot_isValid;

    m_serverless_v2_scaling_configuration_isValid = ::OpenAPI::fromJsonValue(m_serverless_v2_scaling_configuration, json[QString("ServerlessV2ScalingConfiguration")]);
    m_serverless_v2_scaling_configuration_isSet = !json[QString("ServerlessV2ScalingConfiguration")].isNull() && m_serverless_v2_scaling_configuration_isValid;
}

QString OAIModifyDBClusterMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModifyDBClusterMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_db_cluster_identifier_isSet) {
        obj.insert(QString("DBClusterIdentifier"), ::OpenAPI::toJsonValue(m_db_cluster_identifier));
    }
    if (m_new_db_cluster_identifier_isSet) {
        obj.insert(QString("NewDBClusterIdentifier"), ::OpenAPI::toJsonValue(m_new_db_cluster_identifier));
    }
    if (m_apply_immediately_isSet) {
        obj.insert(QString("ApplyImmediately"), ::OpenAPI::toJsonValue(m_apply_immediately));
    }
    if (m_backup_retention_period_isSet) {
        obj.insert(QString("BackupRetentionPeriod"), ::OpenAPI::toJsonValue(m_backup_retention_period));
    }
    if (m_db_cluster_parameter_group_name_isSet) {
        obj.insert(QString("DBClusterParameterGroupName"), ::OpenAPI::toJsonValue(m_db_cluster_parameter_group_name));
    }
    if (m_vpc_security_group_ids.isSet()) {
        obj.insert(QString("VpcSecurityGroupIds"), ::OpenAPI::toJsonValue(m_vpc_security_group_ids));
    }
    if (m_port_isSet) {
        obj.insert(QString("Port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_master_user_password_isSet) {
        obj.insert(QString("MasterUserPassword"), ::OpenAPI::toJsonValue(m_master_user_password));
    }
    if (m_option_group_name_isSet) {
        obj.insert(QString("OptionGroupName"), ::OpenAPI::toJsonValue(m_option_group_name));
    }
    if (m_preferred_backup_window_isSet) {
        obj.insert(QString("PreferredBackupWindow"), ::OpenAPI::toJsonValue(m_preferred_backup_window));
    }
    if (m_preferred_maintenance_window_isSet) {
        obj.insert(QString("PreferredMaintenanceWindow"), ::OpenAPI::toJsonValue(m_preferred_maintenance_window));
    }
    if (m_enable_iam_database_authentication_isSet) {
        obj.insert(QString("EnableIAMDatabaseAuthentication"), ::OpenAPI::toJsonValue(m_enable_iam_database_authentication));
    }
    if (m_cloudwatch_logs_export_configuration.isSet()) {
        obj.insert(QString("CloudwatchLogsExportConfiguration"), ::OpenAPI::toJsonValue(m_cloudwatch_logs_export_configuration));
    }
    if (m_engine_version_isSet) {
        obj.insert(QString("EngineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_allow_major_version_upgrade_isSet) {
        obj.insert(QString("AllowMajorVersionUpgrade"), ::OpenAPI::toJsonValue(m_allow_major_version_upgrade));
    }
    if (m_db_instance_parameter_group_name_isSet) {
        obj.insert(QString("DBInstanceParameterGroupName"), ::OpenAPI::toJsonValue(m_db_instance_parameter_group_name));
    }
    if (m_deletion_protection_isSet) {
        obj.insert(QString("DeletionProtection"), ::OpenAPI::toJsonValue(m_deletion_protection));
    }
    if (m_copy_tags_to_snapshot_isSet) {
        obj.insert(QString("CopyTagsToSnapshot"), ::OpenAPI::toJsonValue(m_copy_tags_to_snapshot));
    }
    if (m_serverless_v2_scaling_configuration.isSet()) {
        obj.insert(QString("ServerlessV2ScalingConfiguration"), ::OpenAPI::toJsonValue(m_serverless_v2_scaling_configuration));
    }
    return obj;
}

QString OAIModifyDBClusterMessage::getDbClusterIdentifier() const {
    return m_db_cluster_identifier;
}
void OAIModifyDBClusterMessage::setDbClusterIdentifier(const QString &db_cluster_identifier) {
    m_db_cluster_identifier = db_cluster_identifier;
    m_db_cluster_identifier_isSet = true;
}

bool OAIModifyDBClusterMessage::is_db_cluster_identifier_Set() const{
    return m_db_cluster_identifier_isSet;
}

bool OAIModifyDBClusterMessage::is_db_cluster_identifier_Valid() const{
    return m_db_cluster_identifier_isValid;
}

QString OAIModifyDBClusterMessage::getNewDbClusterIdentifier() const {
    return m_new_db_cluster_identifier;
}
void OAIModifyDBClusterMessage::setNewDbClusterIdentifier(const QString &new_db_cluster_identifier) {
    m_new_db_cluster_identifier = new_db_cluster_identifier;
    m_new_db_cluster_identifier_isSet = true;
}

bool OAIModifyDBClusterMessage::is_new_db_cluster_identifier_Set() const{
    return m_new_db_cluster_identifier_isSet;
}

bool OAIModifyDBClusterMessage::is_new_db_cluster_identifier_Valid() const{
    return m_new_db_cluster_identifier_isValid;
}

bool OAIModifyDBClusterMessage::getApplyImmediately() const {
    return m_apply_immediately;
}
void OAIModifyDBClusterMessage::setApplyImmediately(const bool &apply_immediately) {
    m_apply_immediately = apply_immediately;
    m_apply_immediately_isSet = true;
}

bool OAIModifyDBClusterMessage::is_apply_immediately_Set() const{
    return m_apply_immediately_isSet;
}

bool OAIModifyDBClusterMessage::is_apply_immediately_Valid() const{
    return m_apply_immediately_isValid;
}

qint32 OAIModifyDBClusterMessage::getBackupRetentionPeriod() const {
    return m_backup_retention_period;
}
void OAIModifyDBClusterMessage::setBackupRetentionPeriod(const qint32 &backup_retention_period) {
    m_backup_retention_period = backup_retention_period;
    m_backup_retention_period_isSet = true;
}

bool OAIModifyDBClusterMessage::is_backup_retention_period_Set() const{
    return m_backup_retention_period_isSet;
}

bool OAIModifyDBClusterMessage::is_backup_retention_period_Valid() const{
    return m_backup_retention_period_isValid;
}

QString OAIModifyDBClusterMessage::getDbClusterParameterGroupName() const {
    return m_db_cluster_parameter_group_name;
}
void OAIModifyDBClusterMessage::setDbClusterParameterGroupName(const QString &db_cluster_parameter_group_name) {
    m_db_cluster_parameter_group_name = db_cluster_parameter_group_name;
    m_db_cluster_parameter_group_name_isSet = true;
}

bool OAIModifyDBClusterMessage::is_db_cluster_parameter_group_name_Set() const{
    return m_db_cluster_parameter_group_name_isSet;
}

bool OAIModifyDBClusterMessage::is_db_cluster_parameter_group_name_Valid() const{
    return m_db_cluster_parameter_group_name_isValid;
}

QList OAIModifyDBClusterMessage::getVpcSecurityGroupIds() const {
    return m_vpc_security_group_ids;
}
void OAIModifyDBClusterMessage::setVpcSecurityGroupIds(const QList &vpc_security_group_ids) {
    m_vpc_security_group_ids = vpc_security_group_ids;
    m_vpc_security_group_ids_isSet = true;
}

bool OAIModifyDBClusterMessage::is_vpc_security_group_ids_Set() const{
    return m_vpc_security_group_ids_isSet;
}

bool OAIModifyDBClusterMessage::is_vpc_security_group_ids_Valid() const{
    return m_vpc_security_group_ids_isValid;
}

qint32 OAIModifyDBClusterMessage::getPort() const {
    return m_port;
}
void OAIModifyDBClusterMessage::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIModifyDBClusterMessage::is_port_Set() const{
    return m_port_isSet;
}

bool OAIModifyDBClusterMessage::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIModifyDBClusterMessage::getMasterUserPassword() const {
    return m_master_user_password;
}
void OAIModifyDBClusterMessage::setMasterUserPassword(const QString &master_user_password) {
    m_master_user_password = master_user_password;
    m_master_user_password_isSet = true;
}

bool OAIModifyDBClusterMessage::is_master_user_password_Set() const{
    return m_master_user_password_isSet;
}

bool OAIModifyDBClusterMessage::is_master_user_password_Valid() const{
    return m_master_user_password_isValid;
}

QString OAIModifyDBClusterMessage::getOptionGroupName() const {
    return m_option_group_name;
}
void OAIModifyDBClusterMessage::setOptionGroupName(const QString &option_group_name) {
    m_option_group_name = option_group_name;
    m_option_group_name_isSet = true;
}

bool OAIModifyDBClusterMessage::is_option_group_name_Set() const{
    return m_option_group_name_isSet;
}

bool OAIModifyDBClusterMessage::is_option_group_name_Valid() const{
    return m_option_group_name_isValid;
}

QString OAIModifyDBClusterMessage::getPreferredBackupWindow() const {
    return m_preferred_backup_window;
}
void OAIModifyDBClusterMessage::setPreferredBackupWindow(const QString &preferred_backup_window) {
    m_preferred_backup_window = preferred_backup_window;
    m_preferred_backup_window_isSet = true;
}

bool OAIModifyDBClusterMessage::is_preferred_backup_window_Set() const{
    return m_preferred_backup_window_isSet;
}

bool OAIModifyDBClusterMessage::is_preferred_backup_window_Valid() const{
    return m_preferred_backup_window_isValid;
}

QString OAIModifyDBClusterMessage::getPreferredMaintenanceWindow() const {
    return m_preferred_maintenance_window;
}
void OAIModifyDBClusterMessage::setPreferredMaintenanceWindow(const QString &preferred_maintenance_window) {
    m_preferred_maintenance_window = preferred_maintenance_window;
    m_preferred_maintenance_window_isSet = true;
}

bool OAIModifyDBClusterMessage::is_preferred_maintenance_window_Set() const{
    return m_preferred_maintenance_window_isSet;
}

bool OAIModifyDBClusterMessage::is_preferred_maintenance_window_Valid() const{
    return m_preferred_maintenance_window_isValid;
}

bool OAIModifyDBClusterMessage::getEnableIamDatabaseAuthentication() const {
    return m_enable_iam_database_authentication;
}
void OAIModifyDBClusterMessage::setEnableIamDatabaseAuthentication(const bool &enable_iam_database_authentication) {
    m_enable_iam_database_authentication = enable_iam_database_authentication;
    m_enable_iam_database_authentication_isSet = true;
}

bool OAIModifyDBClusterMessage::is_enable_iam_database_authentication_Set() const{
    return m_enable_iam_database_authentication_isSet;
}

bool OAIModifyDBClusterMessage::is_enable_iam_database_authentication_Valid() const{
    return m_enable_iam_database_authentication_isValid;
}

OAIModifyDBClusterMessage_CloudwatchLogsExportConfiguration OAIModifyDBClusterMessage::getCloudwatchLogsExportConfiguration() const {
    return m_cloudwatch_logs_export_configuration;
}
void OAIModifyDBClusterMessage::setCloudwatchLogsExportConfiguration(const OAIModifyDBClusterMessage_CloudwatchLogsExportConfiguration &cloudwatch_logs_export_configuration) {
    m_cloudwatch_logs_export_configuration = cloudwatch_logs_export_configuration;
    m_cloudwatch_logs_export_configuration_isSet = true;
}

bool OAIModifyDBClusterMessage::is_cloudwatch_logs_export_configuration_Set() const{
    return m_cloudwatch_logs_export_configuration_isSet;
}

bool OAIModifyDBClusterMessage::is_cloudwatch_logs_export_configuration_Valid() const{
    return m_cloudwatch_logs_export_configuration_isValid;
}

QString OAIModifyDBClusterMessage::getEngineVersion() const {
    return m_engine_version;
}
void OAIModifyDBClusterMessage::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAIModifyDBClusterMessage::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAIModifyDBClusterMessage::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

bool OAIModifyDBClusterMessage::getAllowMajorVersionUpgrade() const {
    return m_allow_major_version_upgrade;
}
void OAIModifyDBClusterMessage::setAllowMajorVersionUpgrade(const bool &allow_major_version_upgrade) {
    m_allow_major_version_upgrade = allow_major_version_upgrade;
    m_allow_major_version_upgrade_isSet = true;
}

bool OAIModifyDBClusterMessage::is_allow_major_version_upgrade_Set() const{
    return m_allow_major_version_upgrade_isSet;
}

bool OAIModifyDBClusterMessage::is_allow_major_version_upgrade_Valid() const{
    return m_allow_major_version_upgrade_isValid;
}

QString OAIModifyDBClusterMessage::getDbInstanceParameterGroupName() const {
    return m_db_instance_parameter_group_name;
}
void OAIModifyDBClusterMessage::setDbInstanceParameterGroupName(const QString &db_instance_parameter_group_name) {
    m_db_instance_parameter_group_name = db_instance_parameter_group_name;
    m_db_instance_parameter_group_name_isSet = true;
}

bool OAIModifyDBClusterMessage::is_db_instance_parameter_group_name_Set() const{
    return m_db_instance_parameter_group_name_isSet;
}

bool OAIModifyDBClusterMessage::is_db_instance_parameter_group_name_Valid() const{
    return m_db_instance_parameter_group_name_isValid;
}

bool OAIModifyDBClusterMessage::getDeletionProtection() const {
    return m_deletion_protection;
}
void OAIModifyDBClusterMessage::setDeletionProtection(const bool &deletion_protection) {
    m_deletion_protection = deletion_protection;
    m_deletion_protection_isSet = true;
}

bool OAIModifyDBClusterMessage::is_deletion_protection_Set() const{
    return m_deletion_protection_isSet;
}

bool OAIModifyDBClusterMessage::is_deletion_protection_Valid() const{
    return m_deletion_protection_isValid;
}

bool OAIModifyDBClusterMessage::getCopyTagsToSnapshot() const {
    return m_copy_tags_to_snapshot;
}
void OAIModifyDBClusterMessage::setCopyTagsToSnapshot(const bool &copy_tags_to_snapshot) {
    m_copy_tags_to_snapshot = copy_tags_to_snapshot;
    m_copy_tags_to_snapshot_isSet = true;
}

bool OAIModifyDBClusterMessage::is_copy_tags_to_snapshot_Set() const{
    return m_copy_tags_to_snapshot_isSet;
}

bool OAIModifyDBClusterMessage::is_copy_tags_to_snapshot_Valid() const{
    return m_copy_tags_to_snapshot_isValid;
}

OAIServerlessV2ScalingConfiguration OAIModifyDBClusterMessage::getServerlessV2ScalingConfiguration() const {
    return m_serverless_v2_scaling_configuration;
}
void OAIModifyDBClusterMessage::setServerlessV2ScalingConfiguration(const OAIServerlessV2ScalingConfiguration &serverless_v2_scaling_configuration) {
    m_serverless_v2_scaling_configuration = serverless_v2_scaling_configuration;
    m_serverless_v2_scaling_configuration_isSet = true;
}

bool OAIModifyDBClusterMessage::is_serverless_v2_scaling_configuration_Set() const{
    return m_serverless_v2_scaling_configuration_isSet;
}

bool OAIModifyDBClusterMessage::is_serverless_v2_scaling_configuration_Valid() const{
    return m_serverless_v2_scaling_configuration_isValid;
}

bool OAIModifyDBClusterMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_db_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_db_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_apply_immediately_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_retention_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_cluster_parameter_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_user_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_option_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_backup_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_maintenance_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_iam_database_authentication_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloudwatch_logs_export_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_major_version_upgrade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_instance_parameter_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletion_protection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_tags_to_snapshot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serverless_v2_scaling_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModifyDBClusterMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_db_cluster_identifier_isValid && true;
}

} // namespace OpenAPI
