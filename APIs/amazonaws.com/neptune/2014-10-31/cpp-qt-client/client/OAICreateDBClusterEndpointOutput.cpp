/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDBClusterEndpointOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDBClusterEndpointOutput::OAICreateDBClusterEndpointOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDBClusterEndpointOutput::OAICreateDBClusterEndpointOutput() {
    this->initializeModel();
}

OAICreateDBClusterEndpointOutput::~OAICreateDBClusterEndpointOutput() {}

void OAICreateDBClusterEndpointOutput::initializeModel() {

    m_db_cluster_endpoint_identifier_isSet = false;
    m_db_cluster_endpoint_identifier_isValid = false;

    m_db_cluster_identifier_isSet = false;
    m_db_cluster_identifier_isValid = false;

    m_db_cluster_endpoint_resource_identifier_isSet = false;
    m_db_cluster_endpoint_resource_identifier_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_endpoint_type_isSet = false;
    m_endpoint_type_isValid = false;

    m_custom_endpoint_type_isSet = false;
    m_custom_endpoint_type_isValid = false;

    m_static_members_isSet = false;
    m_static_members_isValid = false;

    m_excluded_members_isSet = false;
    m_excluded_members_isValid = false;

    m_db_cluster_endpoint_arn_isSet = false;
    m_db_cluster_endpoint_arn_isValid = false;
}

void OAICreateDBClusterEndpointOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDBClusterEndpointOutput::fromJsonObject(QJsonObject json) {

    m_db_cluster_endpoint_identifier_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_endpoint_identifier, json[QString("DBClusterEndpointIdentifier")]);
    m_db_cluster_endpoint_identifier_isSet = !json[QString("DBClusterEndpointIdentifier")].isNull() && m_db_cluster_endpoint_identifier_isValid;

    m_db_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_identifier, json[QString("DBClusterIdentifier")]);
    m_db_cluster_identifier_isSet = !json[QString("DBClusterIdentifier")].isNull() && m_db_cluster_identifier_isValid;

    m_db_cluster_endpoint_resource_identifier_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_endpoint_resource_identifier, json[QString("DBClusterEndpointResourceIdentifier")]);
    m_db_cluster_endpoint_resource_identifier_isSet = !json[QString("DBClusterEndpointResourceIdentifier")].isNull() && m_db_cluster_endpoint_resource_identifier_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("Endpoint")]);
    m_endpoint_isSet = !json[QString("Endpoint")].isNull() && m_endpoint_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_endpoint_type_isValid = ::OpenAPI::fromJsonValue(m_endpoint_type, json[QString("EndpointType")]);
    m_endpoint_type_isSet = !json[QString("EndpointType")].isNull() && m_endpoint_type_isValid;

    m_custom_endpoint_type_isValid = ::OpenAPI::fromJsonValue(m_custom_endpoint_type, json[QString("CustomEndpointType")]);
    m_custom_endpoint_type_isSet = !json[QString("CustomEndpointType")].isNull() && m_custom_endpoint_type_isValid;

    m_static_members_isValid = ::OpenAPI::fromJsonValue(m_static_members, json[QString("StaticMembers")]);
    m_static_members_isSet = !json[QString("StaticMembers")].isNull() && m_static_members_isValid;

    m_excluded_members_isValid = ::OpenAPI::fromJsonValue(m_excluded_members, json[QString("ExcludedMembers")]);
    m_excluded_members_isSet = !json[QString("ExcludedMembers")].isNull() && m_excluded_members_isValid;

    m_db_cluster_endpoint_arn_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_endpoint_arn, json[QString("DBClusterEndpointArn")]);
    m_db_cluster_endpoint_arn_isSet = !json[QString("DBClusterEndpointArn")].isNull() && m_db_cluster_endpoint_arn_isValid;
}

QString OAICreateDBClusterEndpointOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDBClusterEndpointOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_db_cluster_endpoint_identifier_isSet) {
        obj.insert(QString("DBClusterEndpointIdentifier"), ::OpenAPI::toJsonValue(m_db_cluster_endpoint_identifier));
    }
    if (m_db_cluster_identifier_isSet) {
        obj.insert(QString("DBClusterIdentifier"), ::OpenAPI::toJsonValue(m_db_cluster_identifier));
    }
    if (m_db_cluster_endpoint_resource_identifier_isSet) {
        obj.insert(QString("DBClusterEndpointResourceIdentifier"), ::OpenAPI::toJsonValue(m_db_cluster_endpoint_resource_identifier));
    }
    if (m_endpoint_isSet) {
        obj.insert(QString("Endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_endpoint_type_isSet) {
        obj.insert(QString("EndpointType"), ::OpenAPI::toJsonValue(m_endpoint_type));
    }
    if (m_custom_endpoint_type_isSet) {
        obj.insert(QString("CustomEndpointType"), ::OpenAPI::toJsonValue(m_custom_endpoint_type));
    }
    if (m_static_members.isSet()) {
        obj.insert(QString("StaticMembers"), ::OpenAPI::toJsonValue(m_static_members));
    }
    if (m_excluded_members.isSet()) {
        obj.insert(QString("ExcludedMembers"), ::OpenAPI::toJsonValue(m_excluded_members));
    }
    if (m_db_cluster_endpoint_arn_isSet) {
        obj.insert(QString("DBClusterEndpointArn"), ::OpenAPI::toJsonValue(m_db_cluster_endpoint_arn));
    }
    return obj;
}

QString OAICreateDBClusterEndpointOutput::getDbClusterEndpointIdentifier() const {
    return m_db_cluster_endpoint_identifier;
}
void OAICreateDBClusterEndpointOutput::setDbClusterEndpointIdentifier(const QString &db_cluster_endpoint_identifier) {
    m_db_cluster_endpoint_identifier = db_cluster_endpoint_identifier;
    m_db_cluster_endpoint_identifier_isSet = true;
}

bool OAICreateDBClusterEndpointOutput::is_db_cluster_endpoint_identifier_Set() const{
    return m_db_cluster_endpoint_identifier_isSet;
}

bool OAICreateDBClusterEndpointOutput::is_db_cluster_endpoint_identifier_Valid() const{
    return m_db_cluster_endpoint_identifier_isValid;
}

QString OAICreateDBClusterEndpointOutput::getDbClusterIdentifier() const {
    return m_db_cluster_identifier;
}
void OAICreateDBClusterEndpointOutput::setDbClusterIdentifier(const QString &db_cluster_identifier) {
    m_db_cluster_identifier = db_cluster_identifier;
    m_db_cluster_identifier_isSet = true;
}

bool OAICreateDBClusterEndpointOutput::is_db_cluster_identifier_Set() const{
    return m_db_cluster_identifier_isSet;
}

bool OAICreateDBClusterEndpointOutput::is_db_cluster_identifier_Valid() const{
    return m_db_cluster_identifier_isValid;
}

QString OAICreateDBClusterEndpointOutput::getDbClusterEndpointResourceIdentifier() const {
    return m_db_cluster_endpoint_resource_identifier;
}
void OAICreateDBClusterEndpointOutput::setDbClusterEndpointResourceIdentifier(const QString &db_cluster_endpoint_resource_identifier) {
    m_db_cluster_endpoint_resource_identifier = db_cluster_endpoint_resource_identifier;
    m_db_cluster_endpoint_resource_identifier_isSet = true;
}

bool OAICreateDBClusterEndpointOutput::is_db_cluster_endpoint_resource_identifier_Set() const{
    return m_db_cluster_endpoint_resource_identifier_isSet;
}

bool OAICreateDBClusterEndpointOutput::is_db_cluster_endpoint_resource_identifier_Valid() const{
    return m_db_cluster_endpoint_resource_identifier_isValid;
}

QString OAICreateDBClusterEndpointOutput::getEndpoint() const {
    return m_endpoint;
}
void OAICreateDBClusterEndpointOutput::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAICreateDBClusterEndpointOutput::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAICreateDBClusterEndpointOutput::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QString OAICreateDBClusterEndpointOutput::getStatus() const {
    return m_status;
}
void OAICreateDBClusterEndpointOutput::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreateDBClusterEndpointOutput::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreateDBClusterEndpointOutput::is_status_Valid() const{
    return m_status_isValid;
}

QString OAICreateDBClusterEndpointOutput::getEndpointType() const {
    return m_endpoint_type;
}
void OAICreateDBClusterEndpointOutput::setEndpointType(const QString &endpoint_type) {
    m_endpoint_type = endpoint_type;
    m_endpoint_type_isSet = true;
}

bool OAICreateDBClusterEndpointOutput::is_endpoint_type_Set() const{
    return m_endpoint_type_isSet;
}

bool OAICreateDBClusterEndpointOutput::is_endpoint_type_Valid() const{
    return m_endpoint_type_isValid;
}

QString OAICreateDBClusterEndpointOutput::getCustomEndpointType() const {
    return m_custom_endpoint_type;
}
void OAICreateDBClusterEndpointOutput::setCustomEndpointType(const QString &custom_endpoint_type) {
    m_custom_endpoint_type = custom_endpoint_type;
    m_custom_endpoint_type_isSet = true;
}

bool OAICreateDBClusterEndpointOutput::is_custom_endpoint_type_Set() const{
    return m_custom_endpoint_type_isSet;
}

bool OAICreateDBClusterEndpointOutput::is_custom_endpoint_type_Valid() const{
    return m_custom_endpoint_type_isValid;
}

QList OAICreateDBClusterEndpointOutput::getStaticMembers() const {
    return m_static_members;
}
void OAICreateDBClusterEndpointOutput::setStaticMembers(const QList &static_members) {
    m_static_members = static_members;
    m_static_members_isSet = true;
}

bool OAICreateDBClusterEndpointOutput::is_static_members_Set() const{
    return m_static_members_isSet;
}

bool OAICreateDBClusterEndpointOutput::is_static_members_Valid() const{
    return m_static_members_isValid;
}

QList OAICreateDBClusterEndpointOutput::getExcludedMembers() const {
    return m_excluded_members;
}
void OAICreateDBClusterEndpointOutput::setExcludedMembers(const QList &excluded_members) {
    m_excluded_members = excluded_members;
    m_excluded_members_isSet = true;
}

bool OAICreateDBClusterEndpointOutput::is_excluded_members_Set() const{
    return m_excluded_members_isSet;
}

bool OAICreateDBClusterEndpointOutput::is_excluded_members_Valid() const{
    return m_excluded_members_isValid;
}

QString OAICreateDBClusterEndpointOutput::getDbClusterEndpointArn() const {
    return m_db_cluster_endpoint_arn;
}
void OAICreateDBClusterEndpointOutput::setDbClusterEndpointArn(const QString &db_cluster_endpoint_arn) {
    m_db_cluster_endpoint_arn = db_cluster_endpoint_arn;
    m_db_cluster_endpoint_arn_isSet = true;
}

bool OAICreateDBClusterEndpointOutput::is_db_cluster_endpoint_arn_Set() const{
    return m_db_cluster_endpoint_arn_isSet;
}

bool OAICreateDBClusterEndpointOutput::is_db_cluster_endpoint_arn_Valid() const{
    return m_db_cluster_endpoint_arn_isValid;
}

bool OAICreateDBClusterEndpointOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_db_cluster_endpoint_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_cluster_endpoint_resource_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_endpoint_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_static_members.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_members.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_cluster_endpoint_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDBClusterEndpointOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
