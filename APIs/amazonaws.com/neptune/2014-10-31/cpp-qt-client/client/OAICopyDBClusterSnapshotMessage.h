/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICopyDBClusterSnapshotMessage.h
 *
 * 
 */

#ifndef OAICopyDBClusterSnapshotMessage_H
#define OAICopyDBClusterSnapshotMessage_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICopyDBClusterSnapshotMessage : public OAIObject {
public:
    OAICopyDBClusterSnapshotMessage();
    OAICopyDBClusterSnapshotMessage(QString json);
    ~OAICopyDBClusterSnapshotMessage() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getSourceDbClusterSnapshotIdentifier() const;
    void setSourceDbClusterSnapshotIdentifier(const QString &source_db_cluster_snapshot_identifier);
    bool is_source_db_cluster_snapshot_identifier_Set() const;
    bool is_source_db_cluster_snapshot_identifier_Valid() const;

    QString getTargetDbClusterSnapshotIdentifier() const;
    void setTargetDbClusterSnapshotIdentifier(const QString &target_db_cluster_snapshot_identifier);
    bool is_target_db_cluster_snapshot_identifier_Set() const;
    bool is_target_db_cluster_snapshot_identifier_Valid() const;

    QString getKmsKeyId() const;
    void setKmsKeyId(const QString &kms_key_id);
    bool is_kms_key_id_Set() const;
    bool is_kms_key_id_Valid() const;

    QString getPreSignedUrl() const;
    void setPreSignedUrl(const QString &pre_signed_url);
    bool is_pre_signed_url_Set() const;
    bool is_pre_signed_url_Valid() const;

    bool getCopyTags() const;
    void setCopyTags(const bool &copy_tags);
    bool is_copy_tags_Set() const;
    bool is_copy_tags_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_source_db_cluster_snapshot_identifier;
    bool m_source_db_cluster_snapshot_identifier_isSet;
    bool m_source_db_cluster_snapshot_identifier_isValid;

    QString m_target_db_cluster_snapshot_identifier;
    bool m_target_db_cluster_snapshot_identifier_isSet;
    bool m_target_db_cluster_snapshot_identifier_isValid;

    QString m_kms_key_id;
    bool m_kms_key_id_isSet;
    bool m_kms_key_id_isValid;

    QString m_pre_signed_url;
    bool m_pre_signed_url_isSet;
    bool m_pre_signed_url_isValid;

    bool m_copy_tags;
    bool m_copy_tags_isSet;
    bool m_copy_tags_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICopyDBClusterSnapshotMessage)

#endif // OAICopyDBClusterSnapshotMessage_H
