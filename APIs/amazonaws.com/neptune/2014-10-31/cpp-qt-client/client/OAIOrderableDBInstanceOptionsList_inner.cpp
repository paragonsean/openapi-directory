/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderableDBInstanceOptionsList_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderableDBInstanceOptionsList_inner::OAIOrderableDBInstanceOptionsList_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderableDBInstanceOptionsList_inner::OAIOrderableDBInstanceOptionsList_inner() {
    this->initializeModel();
}

OAIOrderableDBInstanceOptionsList_inner::~OAIOrderableDBInstanceOptionsList_inner() {}

void OAIOrderableDBInstanceOptionsList_inner::initializeModel() {

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_db_instance_class_isSet = false;
    m_db_instance_class_isValid = false;

    m_license_model_isSet = false;
    m_license_model_isValid = false;

    m_availability_zones_isSet = false;
    m_availability_zones_isValid = false;

    m_multi_az_capable_isSet = false;
    m_multi_az_capable_isValid = false;

    m_read_replica_capable_isSet = false;
    m_read_replica_capable_isValid = false;

    m_vpc_isSet = false;
    m_vpc_isValid = false;

    m_supports_storage_encryption_isSet = false;
    m_supports_storage_encryption_isValid = false;

    m_storage_type_isSet = false;
    m_storage_type_isValid = false;

    m_supports_iops_isSet = false;
    m_supports_iops_isValid = false;

    m_supports_enhanced_monitoring_isSet = false;
    m_supports_enhanced_monitoring_isValid = false;

    m_supports_iam_database_authentication_isSet = false;
    m_supports_iam_database_authentication_isValid = false;

    m_supports_performance_insights_isSet = false;
    m_supports_performance_insights_isValid = false;

    m_min_storage_size_isSet = false;
    m_min_storage_size_isValid = false;

    m_max_storage_size_isSet = false;
    m_max_storage_size_isValid = false;

    m_min_iops_per_db_instance_isSet = false;
    m_min_iops_per_db_instance_isValid = false;

    m_max_iops_per_db_instance_isSet = false;
    m_max_iops_per_db_instance_isValid = false;

    m_min_iops_per_gib_isSet = false;
    m_min_iops_per_gib_isValid = false;

    m_max_iops_per_gib_isSet = false;
    m_max_iops_per_gib_isValid = false;

    m_supports_global_databases_isSet = false;
    m_supports_global_databases_isValid = false;
}

void OAIOrderableDBInstanceOptionsList_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderableDBInstanceOptionsList_inner::fromJsonObject(QJsonObject json) {

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("Engine")]);
    m_engine_isSet = !json[QString("Engine")].isNull() && m_engine_isValid;

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("EngineVersion")]);
    m_engine_version_isSet = !json[QString("EngineVersion")].isNull() && m_engine_version_isValid;

    m_db_instance_class_isValid = ::OpenAPI::fromJsonValue(m_db_instance_class, json[QString("DBInstanceClass")]);
    m_db_instance_class_isSet = !json[QString("DBInstanceClass")].isNull() && m_db_instance_class_isValid;

    m_license_model_isValid = ::OpenAPI::fromJsonValue(m_license_model, json[QString("LicenseModel")]);
    m_license_model_isSet = !json[QString("LicenseModel")].isNull() && m_license_model_isValid;

    m_availability_zones_isValid = ::OpenAPI::fromJsonValue(m_availability_zones, json[QString("AvailabilityZones")]);
    m_availability_zones_isSet = !json[QString("AvailabilityZones")].isNull() && m_availability_zones_isValid;

    m_multi_az_capable_isValid = ::OpenAPI::fromJsonValue(m_multi_az_capable, json[QString("MultiAZCapable")]);
    m_multi_az_capable_isSet = !json[QString("MultiAZCapable")].isNull() && m_multi_az_capable_isValid;

    m_read_replica_capable_isValid = ::OpenAPI::fromJsonValue(m_read_replica_capable, json[QString("ReadReplicaCapable")]);
    m_read_replica_capable_isSet = !json[QString("ReadReplicaCapable")].isNull() && m_read_replica_capable_isValid;

    m_vpc_isValid = ::OpenAPI::fromJsonValue(m_vpc, json[QString("Vpc")]);
    m_vpc_isSet = !json[QString("Vpc")].isNull() && m_vpc_isValid;

    m_supports_storage_encryption_isValid = ::OpenAPI::fromJsonValue(m_supports_storage_encryption, json[QString("SupportsStorageEncryption")]);
    m_supports_storage_encryption_isSet = !json[QString("SupportsStorageEncryption")].isNull() && m_supports_storage_encryption_isValid;

    m_storage_type_isValid = ::OpenAPI::fromJsonValue(m_storage_type, json[QString("StorageType")]);
    m_storage_type_isSet = !json[QString("StorageType")].isNull() && m_storage_type_isValid;

    m_supports_iops_isValid = ::OpenAPI::fromJsonValue(m_supports_iops, json[QString("SupportsIops")]);
    m_supports_iops_isSet = !json[QString("SupportsIops")].isNull() && m_supports_iops_isValid;

    m_supports_enhanced_monitoring_isValid = ::OpenAPI::fromJsonValue(m_supports_enhanced_monitoring, json[QString("SupportsEnhancedMonitoring")]);
    m_supports_enhanced_monitoring_isSet = !json[QString("SupportsEnhancedMonitoring")].isNull() && m_supports_enhanced_monitoring_isValid;

    m_supports_iam_database_authentication_isValid = ::OpenAPI::fromJsonValue(m_supports_iam_database_authentication, json[QString("SupportsIAMDatabaseAuthentication")]);
    m_supports_iam_database_authentication_isSet = !json[QString("SupportsIAMDatabaseAuthentication")].isNull() && m_supports_iam_database_authentication_isValid;

    m_supports_performance_insights_isValid = ::OpenAPI::fromJsonValue(m_supports_performance_insights, json[QString("SupportsPerformanceInsights")]);
    m_supports_performance_insights_isSet = !json[QString("SupportsPerformanceInsights")].isNull() && m_supports_performance_insights_isValid;

    m_min_storage_size_isValid = ::OpenAPI::fromJsonValue(m_min_storage_size, json[QString("MinStorageSize")]);
    m_min_storage_size_isSet = !json[QString("MinStorageSize")].isNull() && m_min_storage_size_isValid;

    m_max_storage_size_isValid = ::OpenAPI::fromJsonValue(m_max_storage_size, json[QString("MaxStorageSize")]);
    m_max_storage_size_isSet = !json[QString("MaxStorageSize")].isNull() && m_max_storage_size_isValid;

    m_min_iops_per_db_instance_isValid = ::OpenAPI::fromJsonValue(m_min_iops_per_db_instance, json[QString("MinIopsPerDbInstance")]);
    m_min_iops_per_db_instance_isSet = !json[QString("MinIopsPerDbInstance")].isNull() && m_min_iops_per_db_instance_isValid;

    m_max_iops_per_db_instance_isValid = ::OpenAPI::fromJsonValue(m_max_iops_per_db_instance, json[QString("MaxIopsPerDbInstance")]);
    m_max_iops_per_db_instance_isSet = !json[QString("MaxIopsPerDbInstance")].isNull() && m_max_iops_per_db_instance_isValid;

    m_min_iops_per_gib_isValid = ::OpenAPI::fromJsonValue(m_min_iops_per_gib, json[QString("MinIopsPerGib")]);
    m_min_iops_per_gib_isSet = !json[QString("MinIopsPerGib")].isNull() && m_min_iops_per_gib_isValid;

    m_max_iops_per_gib_isValid = ::OpenAPI::fromJsonValue(m_max_iops_per_gib, json[QString("MaxIopsPerGib")]);
    m_max_iops_per_gib_isSet = !json[QString("MaxIopsPerGib")].isNull() && m_max_iops_per_gib_isValid;

    m_supports_global_databases_isValid = ::OpenAPI::fromJsonValue(m_supports_global_databases, json[QString("SupportsGlobalDatabases")]);
    m_supports_global_databases_isSet = !json[QString("SupportsGlobalDatabases")].isNull() && m_supports_global_databases_isValid;
}

QString OAIOrderableDBInstanceOptionsList_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderableDBInstanceOptionsList_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_engine_isSet) {
        obj.insert(QString("Engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_engine_version_isSet) {
        obj.insert(QString("EngineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_db_instance_class_isSet) {
        obj.insert(QString("DBInstanceClass"), ::OpenAPI::toJsonValue(m_db_instance_class));
    }
    if (m_license_model_isSet) {
        obj.insert(QString("LicenseModel"), ::OpenAPI::toJsonValue(m_license_model));
    }
    if (m_availability_zones.isSet()) {
        obj.insert(QString("AvailabilityZones"), ::OpenAPI::toJsonValue(m_availability_zones));
    }
    if (m_multi_az_capable_isSet) {
        obj.insert(QString("MultiAZCapable"), ::OpenAPI::toJsonValue(m_multi_az_capable));
    }
    if (m_read_replica_capable_isSet) {
        obj.insert(QString("ReadReplicaCapable"), ::OpenAPI::toJsonValue(m_read_replica_capable));
    }
    if (m_vpc_isSet) {
        obj.insert(QString("Vpc"), ::OpenAPI::toJsonValue(m_vpc));
    }
    if (m_supports_storage_encryption_isSet) {
        obj.insert(QString("SupportsStorageEncryption"), ::OpenAPI::toJsonValue(m_supports_storage_encryption));
    }
    if (m_storage_type_isSet) {
        obj.insert(QString("StorageType"), ::OpenAPI::toJsonValue(m_storage_type));
    }
    if (m_supports_iops_isSet) {
        obj.insert(QString("SupportsIops"), ::OpenAPI::toJsonValue(m_supports_iops));
    }
    if (m_supports_enhanced_monitoring_isSet) {
        obj.insert(QString("SupportsEnhancedMonitoring"), ::OpenAPI::toJsonValue(m_supports_enhanced_monitoring));
    }
    if (m_supports_iam_database_authentication_isSet) {
        obj.insert(QString("SupportsIAMDatabaseAuthentication"), ::OpenAPI::toJsonValue(m_supports_iam_database_authentication));
    }
    if (m_supports_performance_insights_isSet) {
        obj.insert(QString("SupportsPerformanceInsights"), ::OpenAPI::toJsonValue(m_supports_performance_insights));
    }
    if (m_min_storage_size_isSet) {
        obj.insert(QString("MinStorageSize"), ::OpenAPI::toJsonValue(m_min_storage_size));
    }
    if (m_max_storage_size_isSet) {
        obj.insert(QString("MaxStorageSize"), ::OpenAPI::toJsonValue(m_max_storage_size));
    }
    if (m_min_iops_per_db_instance_isSet) {
        obj.insert(QString("MinIopsPerDbInstance"), ::OpenAPI::toJsonValue(m_min_iops_per_db_instance));
    }
    if (m_max_iops_per_db_instance_isSet) {
        obj.insert(QString("MaxIopsPerDbInstance"), ::OpenAPI::toJsonValue(m_max_iops_per_db_instance));
    }
    if (m_min_iops_per_gib_isSet) {
        obj.insert(QString("MinIopsPerGib"), ::OpenAPI::toJsonValue(m_min_iops_per_gib));
    }
    if (m_max_iops_per_gib_isSet) {
        obj.insert(QString("MaxIopsPerGib"), ::OpenAPI::toJsonValue(m_max_iops_per_gib));
    }
    if (m_supports_global_databases_isSet) {
        obj.insert(QString("SupportsGlobalDatabases"), ::OpenAPI::toJsonValue(m_supports_global_databases));
    }
    return obj;
}

QString OAIOrderableDBInstanceOptionsList_inner::getEngine() const {
    return m_engine;
}
void OAIOrderableDBInstanceOptionsList_inner::setEngine(const QString &engine) {
    m_engine = engine;
    m_engine_isSet = true;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_engine_Valid() const{
    return m_engine_isValid;
}

QString OAIOrderableDBInstanceOptionsList_inner::getEngineVersion() const {
    return m_engine_version;
}
void OAIOrderableDBInstanceOptionsList_inner::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

QString OAIOrderableDBInstanceOptionsList_inner::getDbInstanceClass() const {
    return m_db_instance_class;
}
void OAIOrderableDBInstanceOptionsList_inner::setDbInstanceClass(const QString &db_instance_class) {
    m_db_instance_class = db_instance_class;
    m_db_instance_class_isSet = true;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_db_instance_class_Set() const{
    return m_db_instance_class_isSet;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_db_instance_class_Valid() const{
    return m_db_instance_class_isValid;
}

QString OAIOrderableDBInstanceOptionsList_inner::getLicenseModel() const {
    return m_license_model;
}
void OAIOrderableDBInstanceOptionsList_inner::setLicenseModel(const QString &license_model) {
    m_license_model = license_model;
    m_license_model_isSet = true;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_license_model_Set() const{
    return m_license_model_isSet;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_license_model_Valid() const{
    return m_license_model_isValid;
}

QList OAIOrderableDBInstanceOptionsList_inner::getAvailabilityZones() const {
    return m_availability_zones;
}
void OAIOrderableDBInstanceOptionsList_inner::setAvailabilityZones(const QList &availability_zones) {
    m_availability_zones = availability_zones;
    m_availability_zones_isSet = true;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_availability_zones_Set() const{
    return m_availability_zones_isSet;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_availability_zones_Valid() const{
    return m_availability_zones_isValid;
}

bool OAIOrderableDBInstanceOptionsList_inner::getMultiAzCapable() const {
    return m_multi_az_capable;
}
void OAIOrderableDBInstanceOptionsList_inner::setMultiAzCapable(const bool &multi_az_capable) {
    m_multi_az_capable = multi_az_capable;
    m_multi_az_capable_isSet = true;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_multi_az_capable_Set() const{
    return m_multi_az_capable_isSet;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_multi_az_capable_Valid() const{
    return m_multi_az_capable_isValid;
}

bool OAIOrderableDBInstanceOptionsList_inner::getReadReplicaCapable() const {
    return m_read_replica_capable;
}
void OAIOrderableDBInstanceOptionsList_inner::setReadReplicaCapable(const bool &read_replica_capable) {
    m_read_replica_capable = read_replica_capable;
    m_read_replica_capable_isSet = true;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_read_replica_capable_Set() const{
    return m_read_replica_capable_isSet;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_read_replica_capable_Valid() const{
    return m_read_replica_capable_isValid;
}

bool OAIOrderableDBInstanceOptionsList_inner::getVpc() const {
    return m_vpc;
}
void OAIOrderableDBInstanceOptionsList_inner::setVpc(const bool &vpc) {
    m_vpc = vpc;
    m_vpc_isSet = true;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_vpc_Set() const{
    return m_vpc_isSet;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_vpc_Valid() const{
    return m_vpc_isValid;
}

bool OAIOrderableDBInstanceOptionsList_inner::getSupportsStorageEncryption() const {
    return m_supports_storage_encryption;
}
void OAIOrderableDBInstanceOptionsList_inner::setSupportsStorageEncryption(const bool &supports_storage_encryption) {
    m_supports_storage_encryption = supports_storage_encryption;
    m_supports_storage_encryption_isSet = true;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_supports_storage_encryption_Set() const{
    return m_supports_storage_encryption_isSet;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_supports_storage_encryption_Valid() const{
    return m_supports_storage_encryption_isValid;
}

QString OAIOrderableDBInstanceOptionsList_inner::getStorageType() const {
    return m_storage_type;
}
void OAIOrderableDBInstanceOptionsList_inner::setStorageType(const QString &storage_type) {
    m_storage_type = storage_type;
    m_storage_type_isSet = true;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_storage_type_Set() const{
    return m_storage_type_isSet;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_storage_type_Valid() const{
    return m_storage_type_isValid;
}

bool OAIOrderableDBInstanceOptionsList_inner::getSupportsIops() const {
    return m_supports_iops;
}
void OAIOrderableDBInstanceOptionsList_inner::setSupportsIops(const bool &supports_iops) {
    m_supports_iops = supports_iops;
    m_supports_iops_isSet = true;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_supports_iops_Set() const{
    return m_supports_iops_isSet;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_supports_iops_Valid() const{
    return m_supports_iops_isValid;
}

bool OAIOrderableDBInstanceOptionsList_inner::getSupportsEnhancedMonitoring() const {
    return m_supports_enhanced_monitoring;
}
void OAIOrderableDBInstanceOptionsList_inner::setSupportsEnhancedMonitoring(const bool &supports_enhanced_monitoring) {
    m_supports_enhanced_monitoring = supports_enhanced_monitoring;
    m_supports_enhanced_monitoring_isSet = true;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_supports_enhanced_monitoring_Set() const{
    return m_supports_enhanced_monitoring_isSet;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_supports_enhanced_monitoring_Valid() const{
    return m_supports_enhanced_monitoring_isValid;
}

bool OAIOrderableDBInstanceOptionsList_inner::getSupportsIamDatabaseAuthentication() const {
    return m_supports_iam_database_authentication;
}
void OAIOrderableDBInstanceOptionsList_inner::setSupportsIamDatabaseAuthentication(const bool &supports_iam_database_authentication) {
    m_supports_iam_database_authentication = supports_iam_database_authentication;
    m_supports_iam_database_authentication_isSet = true;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_supports_iam_database_authentication_Set() const{
    return m_supports_iam_database_authentication_isSet;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_supports_iam_database_authentication_Valid() const{
    return m_supports_iam_database_authentication_isValid;
}

bool OAIOrderableDBInstanceOptionsList_inner::getSupportsPerformanceInsights() const {
    return m_supports_performance_insights;
}
void OAIOrderableDBInstanceOptionsList_inner::setSupportsPerformanceInsights(const bool &supports_performance_insights) {
    m_supports_performance_insights = supports_performance_insights;
    m_supports_performance_insights_isSet = true;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_supports_performance_insights_Set() const{
    return m_supports_performance_insights_isSet;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_supports_performance_insights_Valid() const{
    return m_supports_performance_insights_isValid;
}

qint32 OAIOrderableDBInstanceOptionsList_inner::getMinStorageSize() const {
    return m_min_storage_size;
}
void OAIOrderableDBInstanceOptionsList_inner::setMinStorageSize(const qint32 &min_storage_size) {
    m_min_storage_size = min_storage_size;
    m_min_storage_size_isSet = true;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_min_storage_size_Set() const{
    return m_min_storage_size_isSet;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_min_storage_size_Valid() const{
    return m_min_storage_size_isValid;
}

qint32 OAIOrderableDBInstanceOptionsList_inner::getMaxStorageSize() const {
    return m_max_storage_size;
}
void OAIOrderableDBInstanceOptionsList_inner::setMaxStorageSize(const qint32 &max_storage_size) {
    m_max_storage_size = max_storage_size;
    m_max_storage_size_isSet = true;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_max_storage_size_Set() const{
    return m_max_storage_size_isSet;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_max_storage_size_Valid() const{
    return m_max_storage_size_isValid;
}

qint32 OAIOrderableDBInstanceOptionsList_inner::getMinIopsPerDbInstance() const {
    return m_min_iops_per_db_instance;
}
void OAIOrderableDBInstanceOptionsList_inner::setMinIopsPerDbInstance(const qint32 &min_iops_per_db_instance) {
    m_min_iops_per_db_instance = min_iops_per_db_instance;
    m_min_iops_per_db_instance_isSet = true;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_min_iops_per_db_instance_Set() const{
    return m_min_iops_per_db_instance_isSet;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_min_iops_per_db_instance_Valid() const{
    return m_min_iops_per_db_instance_isValid;
}

qint32 OAIOrderableDBInstanceOptionsList_inner::getMaxIopsPerDbInstance() const {
    return m_max_iops_per_db_instance;
}
void OAIOrderableDBInstanceOptionsList_inner::setMaxIopsPerDbInstance(const qint32 &max_iops_per_db_instance) {
    m_max_iops_per_db_instance = max_iops_per_db_instance;
    m_max_iops_per_db_instance_isSet = true;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_max_iops_per_db_instance_Set() const{
    return m_max_iops_per_db_instance_isSet;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_max_iops_per_db_instance_Valid() const{
    return m_max_iops_per_db_instance_isValid;
}

double OAIOrderableDBInstanceOptionsList_inner::getMinIopsPerGib() const {
    return m_min_iops_per_gib;
}
void OAIOrderableDBInstanceOptionsList_inner::setMinIopsPerGib(const double &min_iops_per_gib) {
    m_min_iops_per_gib = min_iops_per_gib;
    m_min_iops_per_gib_isSet = true;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_min_iops_per_gib_Set() const{
    return m_min_iops_per_gib_isSet;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_min_iops_per_gib_Valid() const{
    return m_min_iops_per_gib_isValid;
}

double OAIOrderableDBInstanceOptionsList_inner::getMaxIopsPerGib() const {
    return m_max_iops_per_gib;
}
void OAIOrderableDBInstanceOptionsList_inner::setMaxIopsPerGib(const double &max_iops_per_gib) {
    m_max_iops_per_gib = max_iops_per_gib;
    m_max_iops_per_gib_isSet = true;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_max_iops_per_gib_Set() const{
    return m_max_iops_per_gib_isSet;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_max_iops_per_gib_Valid() const{
    return m_max_iops_per_gib_isValid;
}

bool OAIOrderableDBInstanceOptionsList_inner::getSupportsGlobalDatabases() const {
    return m_supports_global_databases;
}
void OAIOrderableDBInstanceOptionsList_inner::setSupportsGlobalDatabases(const bool &supports_global_databases) {
    m_supports_global_databases = supports_global_databases;
    m_supports_global_databases_isSet = true;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_supports_global_databases_Set() const{
    return m_supports_global_databases_isSet;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_supports_global_databases_Valid() const{
    return m_supports_global_databases_isValid;
}

bool OAIOrderableDBInstanceOptionsList_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_instance_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zones.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_az_capable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_replica_capable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_storage_encryption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_iops_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_enhanced_monitoring_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_iam_database_authentication_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_performance_insights_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_storage_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_storage_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_iops_per_db_instance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_iops_per_db_instance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_iops_per_gib_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_iops_per_gib_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_global_databases_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderableDBInstanceOptionsList_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
