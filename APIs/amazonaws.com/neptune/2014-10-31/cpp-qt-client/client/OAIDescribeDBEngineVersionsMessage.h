/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeDBEngineVersionsMessage.h
 *
 * 
 */

#ifndef OAIDescribeDBEngineVersionsMessage_H
#define OAIDescribeDBEngineVersionsMessage_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDescribeDBEngineVersionsMessage : public OAIObject {
public:
    OAIDescribeDBEngineVersionsMessage();
    OAIDescribeDBEngineVersionsMessage(QString json);
    ~OAIDescribeDBEngineVersionsMessage() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getEngine() const;
    void setEngine(const QString &engine);
    bool is_engine_Set() const;
    bool is_engine_Valid() const;

    QString getEngineVersion() const;
    void setEngineVersion(const QString &engine_version);
    bool is_engine_version_Set() const;
    bool is_engine_version_Valid() const;

    QString getDbParameterGroupFamily() const;
    void setDbParameterGroupFamily(const QString &db_parameter_group_family);
    bool is_db_parameter_group_family_Set() const;
    bool is_db_parameter_group_family_Valid() const;

    QList getFilters() const;
    void setFilters(const QList &filters);
    bool is_filters_Set() const;
    bool is_filters_Valid() const;

    qint32 getMaxRecords() const;
    void setMaxRecords(const qint32 &max_records);
    bool is_max_records_Set() const;
    bool is_max_records_Valid() const;

    QString getMarker() const;
    void setMarker(const QString &marker);
    bool is_marker_Set() const;
    bool is_marker_Valid() const;

    bool getDefaultOnly() const;
    void setDefaultOnly(const bool &default_only);
    bool is_default_only_Set() const;
    bool is_default_only_Valid() const;

    bool getListSupportedCharacterSets() const;
    void setListSupportedCharacterSets(const bool &list_supported_character_sets);
    bool is_list_supported_character_sets_Set() const;
    bool is_list_supported_character_sets_Valid() const;

    bool getListSupportedTimezones() const;
    void setListSupportedTimezones(const bool &list_supported_timezones);
    bool is_list_supported_timezones_Set() const;
    bool is_list_supported_timezones_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_engine;
    bool m_engine_isSet;
    bool m_engine_isValid;

    QString m_engine_version;
    bool m_engine_version_isSet;
    bool m_engine_version_isValid;

    QString m_db_parameter_group_family;
    bool m_db_parameter_group_family_isSet;
    bool m_db_parameter_group_family_isValid;

    QList m_filters;
    bool m_filters_isSet;
    bool m_filters_isValid;

    qint32 m_max_records;
    bool m_max_records_isSet;
    bool m_max_records_isValid;

    QString m_marker;
    bool m_marker_isSet;
    bool m_marker_isValid;

    bool m_default_only;
    bool m_default_only_isSet;
    bool m_default_only_isValid;

    bool m_list_supported_character_sets;
    bool m_list_supported_character_sets_isSet;
    bool m_list_supported_character_sets_isValid;

    bool m_list_supported_timezones;
    bool m_list_supported_timezones_isSet;
    bool m_list_supported_timezones_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeDBEngineVersionsMessage)

#endif // OAIDescribeDBEngineVersionsMessage_H
