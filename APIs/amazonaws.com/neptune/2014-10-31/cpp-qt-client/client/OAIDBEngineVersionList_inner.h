/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDBEngineVersionList_inner.h
 *
 * 
 */

#ifndef OAIDBEngineVersionList_inner_H
#define OAIDBEngineVersionList_inner_H

#include <QJsonObject>

#include "OAIDBEngineVersion_DefaultCharacterSet.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDBEngineVersion_DefaultCharacterSet;

class OAIDBEngineVersionList_inner : public OAIObject {
public:
    OAIDBEngineVersionList_inner();
    OAIDBEngineVersionList_inner(QString json);
    ~OAIDBEngineVersionList_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getEngine() const;
    void setEngine(const QString &engine);
    bool is_engine_Set() const;
    bool is_engine_Valid() const;

    QString getEngineVersion() const;
    void setEngineVersion(const QString &engine_version);
    bool is_engine_version_Set() const;
    bool is_engine_version_Valid() const;

    QString getDbParameterGroupFamily() const;
    void setDbParameterGroupFamily(const QString &db_parameter_group_family);
    bool is_db_parameter_group_family_Set() const;
    bool is_db_parameter_group_family_Valid() const;

    QString getDbEngineDescription() const;
    void setDbEngineDescription(const QString &db_engine_description);
    bool is_db_engine_description_Set() const;
    bool is_db_engine_description_Valid() const;

    QString getDbEngineVersionDescription() const;
    void setDbEngineVersionDescription(const QString &db_engine_version_description);
    bool is_db_engine_version_description_Set() const;
    bool is_db_engine_version_description_Valid() const;

    OAIDBEngineVersion_DefaultCharacterSet getDefaultCharacterSet() const;
    void setDefaultCharacterSet(const OAIDBEngineVersion_DefaultCharacterSet &default_character_set);
    bool is_default_character_set_Set() const;
    bool is_default_character_set_Valid() const;

    QList getSupportedCharacterSets() const;
    void setSupportedCharacterSets(const QList &supported_character_sets);
    bool is_supported_character_sets_Set() const;
    bool is_supported_character_sets_Valid() const;

    QList getValidUpgradeTarget() const;
    void setValidUpgradeTarget(const QList &valid_upgrade_target);
    bool is_valid_upgrade_target_Set() const;
    bool is_valid_upgrade_target_Valid() const;

    QList getSupportedTimezones() const;
    void setSupportedTimezones(const QList &supported_timezones);
    bool is_supported_timezones_Set() const;
    bool is_supported_timezones_Valid() const;

    QList getExportableLogTypes() const;
    void setExportableLogTypes(const QList &exportable_log_types);
    bool is_exportable_log_types_Set() const;
    bool is_exportable_log_types_Valid() const;

    bool getSupportsLogExportsToCloudwatchLogs() const;
    void setSupportsLogExportsToCloudwatchLogs(const bool &supports_log_exports_to_cloudwatch_logs);
    bool is_supports_log_exports_to_cloudwatch_logs_Set() const;
    bool is_supports_log_exports_to_cloudwatch_logs_Valid() const;

    bool getSupportsReadReplica() const;
    void setSupportsReadReplica(const bool &supports_read_replica);
    bool is_supports_read_replica_Set() const;
    bool is_supports_read_replica_Valid() const;

    bool getSupportsGlobalDatabases() const;
    void setSupportsGlobalDatabases(const bool &supports_global_databases);
    bool is_supports_global_databases_Set() const;
    bool is_supports_global_databases_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_engine;
    bool m_engine_isSet;
    bool m_engine_isValid;

    QString m_engine_version;
    bool m_engine_version_isSet;
    bool m_engine_version_isValid;

    QString m_db_parameter_group_family;
    bool m_db_parameter_group_family_isSet;
    bool m_db_parameter_group_family_isValid;

    QString m_db_engine_description;
    bool m_db_engine_description_isSet;
    bool m_db_engine_description_isValid;

    QString m_db_engine_version_description;
    bool m_db_engine_version_description_isSet;
    bool m_db_engine_version_description_isValid;

    OAIDBEngineVersion_DefaultCharacterSet m_default_character_set;
    bool m_default_character_set_isSet;
    bool m_default_character_set_isValid;

    QList m_supported_character_sets;
    bool m_supported_character_sets_isSet;
    bool m_supported_character_sets_isValid;

    QList m_valid_upgrade_target;
    bool m_valid_upgrade_target_isSet;
    bool m_valid_upgrade_target_isValid;

    QList m_supported_timezones;
    bool m_supported_timezones_isSet;
    bool m_supported_timezones_isValid;

    QList m_exportable_log_types;
    bool m_exportable_log_types_isSet;
    bool m_exportable_log_types_isValid;

    bool m_supports_log_exports_to_cloudwatch_logs;
    bool m_supports_log_exports_to_cloudwatch_logs_isSet;
    bool m_supports_log_exports_to_cloudwatch_logs_isValid;

    bool m_supports_read_replica;
    bool m_supports_read_replica_isSet;
    bool m_supports_read_replica_isValid;

    bool m_supports_global_databases;
    bool m_supports_global_databases_isSet;
    bool m_supports_global_databases_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDBEngineVersionList_inner)

#endif // OAIDBEngineVersionList_inner_H
