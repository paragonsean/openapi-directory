/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDBClusterEndpoint.h
 *
 * &lt;p&gt;This data type represents the information you need to connect to an Amazon Neptune DB cluster. This data type is used as a response element in the following actions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CreateDBClusterEndpoint&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DescribeDBClusterEndpoints&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ModifyDBClusterEndpoint&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DeleteDBClusterEndpoint&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For the data structure that represents Amazon Neptune DB instance endpoints, see &lt;code&gt;Endpoint&lt;/code&gt;.&lt;/p&gt;
 */

#ifndef OAIDBClusterEndpoint_H
#define OAIDBClusterEndpoint_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDBClusterEndpoint : public OAIObject {
public:
    OAIDBClusterEndpoint();
    OAIDBClusterEndpoint(QString json);
    ~OAIDBClusterEndpoint() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDbClusterEndpointIdentifier() const;
    void setDbClusterEndpointIdentifier(const QString &db_cluster_endpoint_identifier);
    bool is_db_cluster_endpoint_identifier_Set() const;
    bool is_db_cluster_endpoint_identifier_Valid() const;

    QString getDbClusterIdentifier() const;
    void setDbClusterIdentifier(const QString &db_cluster_identifier);
    bool is_db_cluster_identifier_Set() const;
    bool is_db_cluster_identifier_Valid() const;

    QString getDbClusterEndpointResourceIdentifier() const;
    void setDbClusterEndpointResourceIdentifier(const QString &db_cluster_endpoint_resource_identifier);
    bool is_db_cluster_endpoint_resource_identifier_Set() const;
    bool is_db_cluster_endpoint_resource_identifier_Valid() const;

    QString getEndpoint() const;
    void setEndpoint(const QString &endpoint);
    bool is_endpoint_Set() const;
    bool is_endpoint_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getEndpointType() const;
    void setEndpointType(const QString &endpoint_type);
    bool is_endpoint_type_Set() const;
    bool is_endpoint_type_Valid() const;

    QString getCustomEndpointType() const;
    void setCustomEndpointType(const QString &custom_endpoint_type);
    bool is_custom_endpoint_type_Set() const;
    bool is_custom_endpoint_type_Valid() const;

    QList getStaticMembers() const;
    void setStaticMembers(const QList &static_members);
    bool is_static_members_Set() const;
    bool is_static_members_Valid() const;

    QList getExcludedMembers() const;
    void setExcludedMembers(const QList &excluded_members);
    bool is_excluded_members_Set() const;
    bool is_excluded_members_Valid() const;

    QString getDbClusterEndpointArn() const;
    void setDbClusterEndpointArn(const QString &db_cluster_endpoint_arn);
    bool is_db_cluster_endpoint_arn_Set() const;
    bool is_db_cluster_endpoint_arn_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_db_cluster_endpoint_identifier;
    bool m_db_cluster_endpoint_identifier_isSet;
    bool m_db_cluster_endpoint_identifier_isValid;

    QString m_db_cluster_identifier;
    bool m_db_cluster_identifier_isSet;
    bool m_db_cluster_identifier_isValid;

    QString m_db_cluster_endpoint_resource_identifier;
    bool m_db_cluster_endpoint_resource_identifier_isSet;
    bool m_db_cluster_endpoint_resource_identifier_isValid;

    QString m_endpoint;
    bool m_endpoint_isSet;
    bool m_endpoint_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_endpoint_type;
    bool m_endpoint_type_isSet;
    bool m_endpoint_type_isValid;

    QString m_custom_endpoint_type;
    bool m_custom_endpoint_type_isSet;
    bool m_custom_endpoint_type_isValid;

    QList m_static_members;
    bool m_static_members_isSet;
    bool m_static_members_isValid;

    QList m_excluded_members;
    bool m_excluded_members_isSet;
    bool m_excluded_members_isValid;

    QString m_db_cluster_endpoint_arn;
    bool m_db_cluster_endpoint_arn_isSet;
    bool m_db_cluster_endpoint_arn_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDBClusterEndpoint)

#endif // OAIDBClusterEndpoint_H
