/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDBInstance_PendingModifiedValues.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDBInstance_PendingModifiedValues::OAIDBInstance_PendingModifiedValues(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDBInstance_PendingModifiedValues::OAIDBInstance_PendingModifiedValues() {
    this->initializeModel();
}

OAIDBInstance_PendingModifiedValues::~OAIDBInstance_PendingModifiedValues() {}

void OAIDBInstance_PendingModifiedValues::initializeModel() {

    m_db_instance_class_isSet = false;
    m_db_instance_class_isValid = false;

    m_allocated_storage_isSet = false;
    m_allocated_storage_isValid = false;

    m_master_user_password_isSet = false;
    m_master_user_password_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_backup_retention_period_isSet = false;
    m_backup_retention_period_isValid = false;

    m_multi_az_isSet = false;
    m_multi_az_isValid = false;

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_license_model_isSet = false;
    m_license_model_isValid = false;

    m_iops_isSet = false;
    m_iops_isValid = false;

    m_db_instance_identifier_isSet = false;
    m_db_instance_identifier_isValid = false;

    m_storage_type_isSet = false;
    m_storage_type_isValid = false;

    m_ca_certificate_identifier_isSet = false;
    m_ca_certificate_identifier_isValid = false;

    m_db_subnet_group_name_isSet = false;
    m_db_subnet_group_name_isValid = false;

    m_pending_cloudwatch_logs_exports_isSet = false;
    m_pending_cloudwatch_logs_exports_isValid = false;
}

void OAIDBInstance_PendingModifiedValues::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDBInstance_PendingModifiedValues::fromJsonObject(QJsonObject json) {

    m_db_instance_class_isValid = ::OpenAPI::fromJsonValue(m_db_instance_class, json[QString("DBInstanceClass")]);
    m_db_instance_class_isSet = !json[QString("DBInstanceClass")].isNull() && m_db_instance_class_isValid;

    m_allocated_storage_isValid = ::OpenAPI::fromJsonValue(m_allocated_storage, json[QString("AllocatedStorage")]);
    m_allocated_storage_isSet = !json[QString("AllocatedStorage")].isNull() && m_allocated_storage_isValid;

    m_master_user_password_isValid = ::OpenAPI::fromJsonValue(m_master_user_password, json[QString("MasterUserPassword")]);
    m_master_user_password_isSet = !json[QString("MasterUserPassword")].isNull() && m_master_user_password_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("Port")]);
    m_port_isSet = !json[QString("Port")].isNull() && m_port_isValid;

    m_backup_retention_period_isValid = ::OpenAPI::fromJsonValue(m_backup_retention_period, json[QString("BackupRetentionPeriod")]);
    m_backup_retention_period_isSet = !json[QString("BackupRetentionPeriod")].isNull() && m_backup_retention_period_isValid;

    m_multi_az_isValid = ::OpenAPI::fromJsonValue(m_multi_az, json[QString("MultiAZ")]);
    m_multi_az_isSet = !json[QString("MultiAZ")].isNull() && m_multi_az_isValid;

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("EngineVersion")]);
    m_engine_version_isSet = !json[QString("EngineVersion")].isNull() && m_engine_version_isValid;

    m_license_model_isValid = ::OpenAPI::fromJsonValue(m_license_model, json[QString("LicenseModel")]);
    m_license_model_isSet = !json[QString("LicenseModel")].isNull() && m_license_model_isValid;

    m_iops_isValid = ::OpenAPI::fromJsonValue(m_iops, json[QString("Iops")]);
    m_iops_isSet = !json[QString("Iops")].isNull() && m_iops_isValid;

    m_db_instance_identifier_isValid = ::OpenAPI::fromJsonValue(m_db_instance_identifier, json[QString("DBInstanceIdentifier")]);
    m_db_instance_identifier_isSet = !json[QString("DBInstanceIdentifier")].isNull() && m_db_instance_identifier_isValid;

    m_storage_type_isValid = ::OpenAPI::fromJsonValue(m_storage_type, json[QString("StorageType")]);
    m_storage_type_isSet = !json[QString("StorageType")].isNull() && m_storage_type_isValid;

    m_ca_certificate_identifier_isValid = ::OpenAPI::fromJsonValue(m_ca_certificate_identifier, json[QString("CACertificateIdentifier")]);
    m_ca_certificate_identifier_isSet = !json[QString("CACertificateIdentifier")].isNull() && m_ca_certificate_identifier_isValid;

    m_db_subnet_group_name_isValid = ::OpenAPI::fromJsonValue(m_db_subnet_group_name, json[QString("DBSubnetGroupName")]);
    m_db_subnet_group_name_isSet = !json[QString("DBSubnetGroupName")].isNull() && m_db_subnet_group_name_isValid;

    m_pending_cloudwatch_logs_exports_isValid = ::OpenAPI::fromJsonValue(m_pending_cloudwatch_logs_exports, json[QString("PendingCloudwatchLogsExports")]);
    m_pending_cloudwatch_logs_exports_isSet = !json[QString("PendingCloudwatchLogsExports")].isNull() && m_pending_cloudwatch_logs_exports_isValid;
}

QString OAIDBInstance_PendingModifiedValues::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDBInstance_PendingModifiedValues::asJsonObject() const {
    QJsonObject obj;
    if (m_db_instance_class_isSet) {
        obj.insert(QString("DBInstanceClass"), ::OpenAPI::toJsonValue(m_db_instance_class));
    }
    if (m_allocated_storage_isSet) {
        obj.insert(QString("AllocatedStorage"), ::OpenAPI::toJsonValue(m_allocated_storage));
    }
    if (m_master_user_password_isSet) {
        obj.insert(QString("MasterUserPassword"), ::OpenAPI::toJsonValue(m_master_user_password));
    }
    if (m_port_isSet) {
        obj.insert(QString("Port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_backup_retention_period_isSet) {
        obj.insert(QString("BackupRetentionPeriod"), ::OpenAPI::toJsonValue(m_backup_retention_period));
    }
    if (m_multi_az_isSet) {
        obj.insert(QString("MultiAZ"), ::OpenAPI::toJsonValue(m_multi_az));
    }
    if (m_engine_version_isSet) {
        obj.insert(QString("EngineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_license_model_isSet) {
        obj.insert(QString("LicenseModel"), ::OpenAPI::toJsonValue(m_license_model));
    }
    if (m_iops_isSet) {
        obj.insert(QString("Iops"), ::OpenAPI::toJsonValue(m_iops));
    }
    if (m_db_instance_identifier_isSet) {
        obj.insert(QString("DBInstanceIdentifier"), ::OpenAPI::toJsonValue(m_db_instance_identifier));
    }
    if (m_storage_type_isSet) {
        obj.insert(QString("StorageType"), ::OpenAPI::toJsonValue(m_storage_type));
    }
    if (m_ca_certificate_identifier_isSet) {
        obj.insert(QString("CACertificateIdentifier"), ::OpenAPI::toJsonValue(m_ca_certificate_identifier));
    }
    if (m_db_subnet_group_name_isSet) {
        obj.insert(QString("DBSubnetGroupName"), ::OpenAPI::toJsonValue(m_db_subnet_group_name));
    }
    if (m_pending_cloudwatch_logs_exports.isSet()) {
        obj.insert(QString("PendingCloudwatchLogsExports"), ::OpenAPI::toJsonValue(m_pending_cloudwatch_logs_exports));
    }
    return obj;
}

QString OAIDBInstance_PendingModifiedValues::getDbInstanceClass() const {
    return m_db_instance_class;
}
void OAIDBInstance_PendingModifiedValues::setDbInstanceClass(const QString &db_instance_class) {
    m_db_instance_class = db_instance_class;
    m_db_instance_class_isSet = true;
}

bool OAIDBInstance_PendingModifiedValues::is_db_instance_class_Set() const{
    return m_db_instance_class_isSet;
}

bool OAIDBInstance_PendingModifiedValues::is_db_instance_class_Valid() const{
    return m_db_instance_class_isValid;
}

qint32 OAIDBInstance_PendingModifiedValues::getAllocatedStorage() const {
    return m_allocated_storage;
}
void OAIDBInstance_PendingModifiedValues::setAllocatedStorage(const qint32 &allocated_storage) {
    m_allocated_storage = allocated_storage;
    m_allocated_storage_isSet = true;
}

bool OAIDBInstance_PendingModifiedValues::is_allocated_storage_Set() const{
    return m_allocated_storage_isSet;
}

bool OAIDBInstance_PendingModifiedValues::is_allocated_storage_Valid() const{
    return m_allocated_storage_isValid;
}

QString OAIDBInstance_PendingModifiedValues::getMasterUserPassword() const {
    return m_master_user_password;
}
void OAIDBInstance_PendingModifiedValues::setMasterUserPassword(const QString &master_user_password) {
    m_master_user_password = master_user_password;
    m_master_user_password_isSet = true;
}

bool OAIDBInstance_PendingModifiedValues::is_master_user_password_Set() const{
    return m_master_user_password_isSet;
}

bool OAIDBInstance_PendingModifiedValues::is_master_user_password_Valid() const{
    return m_master_user_password_isValid;
}

qint32 OAIDBInstance_PendingModifiedValues::getPort() const {
    return m_port;
}
void OAIDBInstance_PendingModifiedValues::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIDBInstance_PendingModifiedValues::is_port_Set() const{
    return m_port_isSet;
}

bool OAIDBInstance_PendingModifiedValues::is_port_Valid() const{
    return m_port_isValid;
}

qint32 OAIDBInstance_PendingModifiedValues::getBackupRetentionPeriod() const {
    return m_backup_retention_period;
}
void OAIDBInstance_PendingModifiedValues::setBackupRetentionPeriod(const qint32 &backup_retention_period) {
    m_backup_retention_period = backup_retention_period;
    m_backup_retention_period_isSet = true;
}

bool OAIDBInstance_PendingModifiedValues::is_backup_retention_period_Set() const{
    return m_backup_retention_period_isSet;
}

bool OAIDBInstance_PendingModifiedValues::is_backup_retention_period_Valid() const{
    return m_backup_retention_period_isValid;
}

bool OAIDBInstance_PendingModifiedValues::getMultiAz() const {
    return m_multi_az;
}
void OAIDBInstance_PendingModifiedValues::setMultiAz(const bool &multi_az) {
    m_multi_az = multi_az;
    m_multi_az_isSet = true;
}

bool OAIDBInstance_PendingModifiedValues::is_multi_az_Set() const{
    return m_multi_az_isSet;
}

bool OAIDBInstance_PendingModifiedValues::is_multi_az_Valid() const{
    return m_multi_az_isValid;
}

QString OAIDBInstance_PendingModifiedValues::getEngineVersion() const {
    return m_engine_version;
}
void OAIDBInstance_PendingModifiedValues::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAIDBInstance_PendingModifiedValues::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAIDBInstance_PendingModifiedValues::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

QString OAIDBInstance_PendingModifiedValues::getLicenseModel() const {
    return m_license_model;
}
void OAIDBInstance_PendingModifiedValues::setLicenseModel(const QString &license_model) {
    m_license_model = license_model;
    m_license_model_isSet = true;
}

bool OAIDBInstance_PendingModifiedValues::is_license_model_Set() const{
    return m_license_model_isSet;
}

bool OAIDBInstance_PendingModifiedValues::is_license_model_Valid() const{
    return m_license_model_isValid;
}

qint32 OAIDBInstance_PendingModifiedValues::getIops() const {
    return m_iops;
}
void OAIDBInstance_PendingModifiedValues::setIops(const qint32 &iops) {
    m_iops = iops;
    m_iops_isSet = true;
}

bool OAIDBInstance_PendingModifiedValues::is_iops_Set() const{
    return m_iops_isSet;
}

bool OAIDBInstance_PendingModifiedValues::is_iops_Valid() const{
    return m_iops_isValid;
}

QString OAIDBInstance_PendingModifiedValues::getDbInstanceIdentifier() const {
    return m_db_instance_identifier;
}
void OAIDBInstance_PendingModifiedValues::setDbInstanceIdentifier(const QString &db_instance_identifier) {
    m_db_instance_identifier = db_instance_identifier;
    m_db_instance_identifier_isSet = true;
}

bool OAIDBInstance_PendingModifiedValues::is_db_instance_identifier_Set() const{
    return m_db_instance_identifier_isSet;
}

bool OAIDBInstance_PendingModifiedValues::is_db_instance_identifier_Valid() const{
    return m_db_instance_identifier_isValid;
}

QString OAIDBInstance_PendingModifiedValues::getStorageType() const {
    return m_storage_type;
}
void OAIDBInstance_PendingModifiedValues::setStorageType(const QString &storage_type) {
    m_storage_type = storage_type;
    m_storage_type_isSet = true;
}

bool OAIDBInstance_PendingModifiedValues::is_storage_type_Set() const{
    return m_storage_type_isSet;
}

bool OAIDBInstance_PendingModifiedValues::is_storage_type_Valid() const{
    return m_storage_type_isValid;
}

QString OAIDBInstance_PendingModifiedValues::getCaCertificateIdentifier() const {
    return m_ca_certificate_identifier;
}
void OAIDBInstance_PendingModifiedValues::setCaCertificateIdentifier(const QString &ca_certificate_identifier) {
    m_ca_certificate_identifier = ca_certificate_identifier;
    m_ca_certificate_identifier_isSet = true;
}

bool OAIDBInstance_PendingModifiedValues::is_ca_certificate_identifier_Set() const{
    return m_ca_certificate_identifier_isSet;
}

bool OAIDBInstance_PendingModifiedValues::is_ca_certificate_identifier_Valid() const{
    return m_ca_certificate_identifier_isValid;
}

QString OAIDBInstance_PendingModifiedValues::getDbSubnetGroupName() const {
    return m_db_subnet_group_name;
}
void OAIDBInstance_PendingModifiedValues::setDbSubnetGroupName(const QString &db_subnet_group_name) {
    m_db_subnet_group_name = db_subnet_group_name;
    m_db_subnet_group_name_isSet = true;
}

bool OAIDBInstance_PendingModifiedValues::is_db_subnet_group_name_Set() const{
    return m_db_subnet_group_name_isSet;
}

bool OAIDBInstance_PendingModifiedValues::is_db_subnet_group_name_Valid() const{
    return m_db_subnet_group_name_isValid;
}

OAIClusterPendingModifiedValues_PendingCloudwatchLogsExports OAIDBInstance_PendingModifiedValues::getPendingCloudwatchLogsExports() const {
    return m_pending_cloudwatch_logs_exports;
}
void OAIDBInstance_PendingModifiedValues::setPendingCloudwatchLogsExports(const OAIClusterPendingModifiedValues_PendingCloudwatchLogsExports &pending_cloudwatch_logs_exports) {
    m_pending_cloudwatch_logs_exports = pending_cloudwatch_logs_exports;
    m_pending_cloudwatch_logs_exports_isSet = true;
}

bool OAIDBInstance_PendingModifiedValues::is_pending_cloudwatch_logs_exports_Set() const{
    return m_pending_cloudwatch_logs_exports_isSet;
}

bool OAIDBInstance_PendingModifiedValues::is_pending_cloudwatch_logs_exports_Valid() const{
    return m_pending_cloudwatch_logs_exports_isValid;
}

bool OAIDBInstance_PendingModifiedValues::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_db_instance_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allocated_storage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_user_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_retention_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_az_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iops_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_instance_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ca_certificate_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_subnet_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_cloudwatch_logs_exports.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDBInstance_PendingModifiedValues::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
