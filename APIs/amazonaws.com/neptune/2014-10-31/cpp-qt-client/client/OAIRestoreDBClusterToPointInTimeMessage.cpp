/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestoreDBClusterToPointInTimeMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestoreDBClusterToPointInTimeMessage::OAIRestoreDBClusterToPointInTimeMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestoreDBClusterToPointInTimeMessage::OAIRestoreDBClusterToPointInTimeMessage() {
    this->initializeModel();
}

OAIRestoreDBClusterToPointInTimeMessage::~OAIRestoreDBClusterToPointInTimeMessage() {}

void OAIRestoreDBClusterToPointInTimeMessage::initializeModel() {

    m_db_cluster_identifier_isSet = false;
    m_db_cluster_identifier_isValid = false;

    m_restore_type_isSet = false;
    m_restore_type_isValid = false;

    m_source_db_cluster_identifier_isSet = false;
    m_source_db_cluster_identifier_isValid = false;

    m_restore_to_time_isSet = false;
    m_restore_to_time_isValid = false;

    m_use_latest_restorable_time_isSet = false;
    m_use_latest_restorable_time_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_db_subnet_group_name_isSet = false;
    m_db_subnet_group_name_isValid = false;

    m_option_group_name_isSet = false;
    m_option_group_name_isValid = false;

    m_vpc_security_group_ids_isSet = false;
    m_vpc_security_group_ids_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_enable_iam_database_authentication_isSet = false;
    m_enable_iam_database_authentication_isValid = false;

    m_enable_cloudwatch_logs_exports_isSet = false;
    m_enable_cloudwatch_logs_exports_isValid = false;

    m_db_cluster_parameter_group_name_isSet = false;
    m_db_cluster_parameter_group_name_isValid = false;

    m_deletion_protection_isSet = false;
    m_deletion_protection_isValid = false;

    m_serverless_v2_scaling_configuration_isSet = false;
    m_serverless_v2_scaling_configuration_isValid = false;
}

void OAIRestoreDBClusterToPointInTimeMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestoreDBClusterToPointInTimeMessage::fromJsonObject(QJsonObject json) {

    m_db_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_identifier, json[QString("DBClusterIdentifier")]);
    m_db_cluster_identifier_isSet = !json[QString("DBClusterIdentifier")].isNull() && m_db_cluster_identifier_isValid;

    m_restore_type_isValid = ::OpenAPI::fromJsonValue(m_restore_type, json[QString("RestoreType")]);
    m_restore_type_isSet = !json[QString("RestoreType")].isNull() && m_restore_type_isValid;

    m_source_db_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_source_db_cluster_identifier, json[QString("SourceDBClusterIdentifier")]);
    m_source_db_cluster_identifier_isSet = !json[QString("SourceDBClusterIdentifier")].isNull() && m_source_db_cluster_identifier_isValid;

    m_restore_to_time_isValid = ::OpenAPI::fromJsonValue(m_restore_to_time, json[QString("RestoreToTime")]);
    m_restore_to_time_isSet = !json[QString("RestoreToTime")].isNull() && m_restore_to_time_isValid;

    m_use_latest_restorable_time_isValid = ::OpenAPI::fromJsonValue(m_use_latest_restorable_time, json[QString("UseLatestRestorableTime")]);
    m_use_latest_restorable_time_isSet = !json[QString("UseLatestRestorableTime")].isNull() && m_use_latest_restorable_time_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("Port")]);
    m_port_isSet = !json[QString("Port")].isNull() && m_port_isValid;

    m_db_subnet_group_name_isValid = ::OpenAPI::fromJsonValue(m_db_subnet_group_name, json[QString("DBSubnetGroupName")]);
    m_db_subnet_group_name_isSet = !json[QString("DBSubnetGroupName")].isNull() && m_db_subnet_group_name_isValid;

    m_option_group_name_isValid = ::OpenAPI::fromJsonValue(m_option_group_name, json[QString("OptionGroupName")]);
    m_option_group_name_isSet = !json[QString("OptionGroupName")].isNull() && m_option_group_name_isValid;

    m_vpc_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_vpc_security_group_ids, json[QString("VpcSecurityGroupIds")]);
    m_vpc_security_group_ids_isSet = !json[QString("VpcSecurityGroupIds")].isNull() && m_vpc_security_group_ids_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_enable_iam_database_authentication_isValid = ::OpenAPI::fromJsonValue(m_enable_iam_database_authentication, json[QString("EnableIAMDatabaseAuthentication")]);
    m_enable_iam_database_authentication_isSet = !json[QString("EnableIAMDatabaseAuthentication")].isNull() && m_enable_iam_database_authentication_isValid;

    m_enable_cloudwatch_logs_exports_isValid = ::OpenAPI::fromJsonValue(m_enable_cloudwatch_logs_exports, json[QString("EnableCloudwatchLogsExports")]);
    m_enable_cloudwatch_logs_exports_isSet = !json[QString("EnableCloudwatchLogsExports")].isNull() && m_enable_cloudwatch_logs_exports_isValid;

    m_db_cluster_parameter_group_name_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_parameter_group_name, json[QString("DBClusterParameterGroupName")]);
    m_db_cluster_parameter_group_name_isSet = !json[QString("DBClusterParameterGroupName")].isNull() && m_db_cluster_parameter_group_name_isValid;

    m_deletion_protection_isValid = ::OpenAPI::fromJsonValue(m_deletion_protection, json[QString("DeletionProtection")]);
    m_deletion_protection_isSet = !json[QString("DeletionProtection")].isNull() && m_deletion_protection_isValid;

    m_serverless_v2_scaling_configuration_isValid = ::OpenAPI::fromJsonValue(m_serverless_v2_scaling_configuration, json[QString("ServerlessV2ScalingConfiguration")]);
    m_serverless_v2_scaling_configuration_isSet = !json[QString("ServerlessV2ScalingConfiguration")].isNull() && m_serverless_v2_scaling_configuration_isValid;
}

QString OAIRestoreDBClusterToPointInTimeMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestoreDBClusterToPointInTimeMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_db_cluster_identifier_isSet) {
        obj.insert(QString("DBClusterIdentifier"), ::OpenAPI::toJsonValue(m_db_cluster_identifier));
    }
    if (m_restore_type_isSet) {
        obj.insert(QString("RestoreType"), ::OpenAPI::toJsonValue(m_restore_type));
    }
    if (m_source_db_cluster_identifier_isSet) {
        obj.insert(QString("SourceDBClusterIdentifier"), ::OpenAPI::toJsonValue(m_source_db_cluster_identifier));
    }
    if (m_restore_to_time_isSet) {
        obj.insert(QString("RestoreToTime"), ::OpenAPI::toJsonValue(m_restore_to_time));
    }
    if (m_use_latest_restorable_time_isSet) {
        obj.insert(QString("UseLatestRestorableTime"), ::OpenAPI::toJsonValue(m_use_latest_restorable_time));
    }
    if (m_port_isSet) {
        obj.insert(QString("Port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_db_subnet_group_name_isSet) {
        obj.insert(QString("DBSubnetGroupName"), ::OpenAPI::toJsonValue(m_db_subnet_group_name));
    }
    if (m_option_group_name_isSet) {
        obj.insert(QString("OptionGroupName"), ::OpenAPI::toJsonValue(m_option_group_name));
    }
    if (m_vpc_security_group_ids.isSet()) {
        obj.insert(QString("VpcSecurityGroupIds"), ::OpenAPI::toJsonValue(m_vpc_security_group_ids));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_enable_iam_database_authentication_isSet) {
        obj.insert(QString("EnableIAMDatabaseAuthentication"), ::OpenAPI::toJsonValue(m_enable_iam_database_authentication));
    }
    if (m_enable_cloudwatch_logs_exports.isSet()) {
        obj.insert(QString("EnableCloudwatchLogsExports"), ::OpenAPI::toJsonValue(m_enable_cloudwatch_logs_exports));
    }
    if (m_db_cluster_parameter_group_name_isSet) {
        obj.insert(QString("DBClusterParameterGroupName"), ::OpenAPI::toJsonValue(m_db_cluster_parameter_group_name));
    }
    if (m_deletion_protection_isSet) {
        obj.insert(QString("DeletionProtection"), ::OpenAPI::toJsonValue(m_deletion_protection));
    }
    if (m_serverless_v2_scaling_configuration.isSet()) {
        obj.insert(QString("ServerlessV2ScalingConfiguration"), ::OpenAPI::toJsonValue(m_serverless_v2_scaling_configuration));
    }
    return obj;
}

QString OAIRestoreDBClusterToPointInTimeMessage::getDbClusterIdentifier() const {
    return m_db_cluster_identifier;
}
void OAIRestoreDBClusterToPointInTimeMessage::setDbClusterIdentifier(const QString &db_cluster_identifier) {
    m_db_cluster_identifier = db_cluster_identifier;
    m_db_cluster_identifier_isSet = true;
}

bool OAIRestoreDBClusterToPointInTimeMessage::is_db_cluster_identifier_Set() const{
    return m_db_cluster_identifier_isSet;
}

bool OAIRestoreDBClusterToPointInTimeMessage::is_db_cluster_identifier_Valid() const{
    return m_db_cluster_identifier_isValid;
}

QString OAIRestoreDBClusterToPointInTimeMessage::getRestoreType() const {
    return m_restore_type;
}
void OAIRestoreDBClusterToPointInTimeMessage::setRestoreType(const QString &restore_type) {
    m_restore_type = restore_type;
    m_restore_type_isSet = true;
}

bool OAIRestoreDBClusterToPointInTimeMessage::is_restore_type_Set() const{
    return m_restore_type_isSet;
}

bool OAIRestoreDBClusterToPointInTimeMessage::is_restore_type_Valid() const{
    return m_restore_type_isValid;
}

QString OAIRestoreDBClusterToPointInTimeMessage::getSourceDbClusterIdentifier() const {
    return m_source_db_cluster_identifier;
}
void OAIRestoreDBClusterToPointInTimeMessage::setSourceDbClusterIdentifier(const QString &source_db_cluster_identifier) {
    m_source_db_cluster_identifier = source_db_cluster_identifier;
    m_source_db_cluster_identifier_isSet = true;
}

bool OAIRestoreDBClusterToPointInTimeMessage::is_source_db_cluster_identifier_Set() const{
    return m_source_db_cluster_identifier_isSet;
}

bool OAIRestoreDBClusterToPointInTimeMessage::is_source_db_cluster_identifier_Valid() const{
    return m_source_db_cluster_identifier_isValid;
}

QDateTime OAIRestoreDBClusterToPointInTimeMessage::getRestoreToTime() const {
    return m_restore_to_time;
}
void OAIRestoreDBClusterToPointInTimeMessage::setRestoreToTime(const QDateTime &restore_to_time) {
    m_restore_to_time = restore_to_time;
    m_restore_to_time_isSet = true;
}

bool OAIRestoreDBClusterToPointInTimeMessage::is_restore_to_time_Set() const{
    return m_restore_to_time_isSet;
}

bool OAIRestoreDBClusterToPointInTimeMessage::is_restore_to_time_Valid() const{
    return m_restore_to_time_isValid;
}

bool OAIRestoreDBClusterToPointInTimeMessage::getUseLatestRestorableTime() const {
    return m_use_latest_restorable_time;
}
void OAIRestoreDBClusterToPointInTimeMessage::setUseLatestRestorableTime(const bool &use_latest_restorable_time) {
    m_use_latest_restorable_time = use_latest_restorable_time;
    m_use_latest_restorable_time_isSet = true;
}

bool OAIRestoreDBClusterToPointInTimeMessage::is_use_latest_restorable_time_Set() const{
    return m_use_latest_restorable_time_isSet;
}

bool OAIRestoreDBClusterToPointInTimeMessage::is_use_latest_restorable_time_Valid() const{
    return m_use_latest_restorable_time_isValid;
}

qint32 OAIRestoreDBClusterToPointInTimeMessage::getPort() const {
    return m_port;
}
void OAIRestoreDBClusterToPointInTimeMessage::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIRestoreDBClusterToPointInTimeMessage::is_port_Set() const{
    return m_port_isSet;
}

bool OAIRestoreDBClusterToPointInTimeMessage::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIRestoreDBClusterToPointInTimeMessage::getDbSubnetGroupName() const {
    return m_db_subnet_group_name;
}
void OAIRestoreDBClusterToPointInTimeMessage::setDbSubnetGroupName(const QString &db_subnet_group_name) {
    m_db_subnet_group_name = db_subnet_group_name;
    m_db_subnet_group_name_isSet = true;
}

bool OAIRestoreDBClusterToPointInTimeMessage::is_db_subnet_group_name_Set() const{
    return m_db_subnet_group_name_isSet;
}

bool OAIRestoreDBClusterToPointInTimeMessage::is_db_subnet_group_name_Valid() const{
    return m_db_subnet_group_name_isValid;
}

QString OAIRestoreDBClusterToPointInTimeMessage::getOptionGroupName() const {
    return m_option_group_name;
}
void OAIRestoreDBClusterToPointInTimeMessage::setOptionGroupName(const QString &option_group_name) {
    m_option_group_name = option_group_name;
    m_option_group_name_isSet = true;
}

bool OAIRestoreDBClusterToPointInTimeMessage::is_option_group_name_Set() const{
    return m_option_group_name_isSet;
}

bool OAIRestoreDBClusterToPointInTimeMessage::is_option_group_name_Valid() const{
    return m_option_group_name_isValid;
}

QList OAIRestoreDBClusterToPointInTimeMessage::getVpcSecurityGroupIds() const {
    return m_vpc_security_group_ids;
}
void OAIRestoreDBClusterToPointInTimeMessage::setVpcSecurityGroupIds(const QList &vpc_security_group_ids) {
    m_vpc_security_group_ids = vpc_security_group_ids;
    m_vpc_security_group_ids_isSet = true;
}

bool OAIRestoreDBClusterToPointInTimeMessage::is_vpc_security_group_ids_Set() const{
    return m_vpc_security_group_ids_isSet;
}

bool OAIRestoreDBClusterToPointInTimeMessage::is_vpc_security_group_ids_Valid() const{
    return m_vpc_security_group_ids_isValid;
}

QList OAIRestoreDBClusterToPointInTimeMessage::getTags() const {
    return m_tags;
}
void OAIRestoreDBClusterToPointInTimeMessage::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIRestoreDBClusterToPointInTimeMessage::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIRestoreDBClusterToPointInTimeMessage::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIRestoreDBClusterToPointInTimeMessage::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAIRestoreDBClusterToPointInTimeMessage::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAIRestoreDBClusterToPointInTimeMessage::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAIRestoreDBClusterToPointInTimeMessage::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

bool OAIRestoreDBClusterToPointInTimeMessage::getEnableIamDatabaseAuthentication() const {
    return m_enable_iam_database_authentication;
}
void OAIRestoreDBClusterToPointInTimeMessage::setEnableIamDatabaseAuthentication(const bool &enable_iam_database_authentication) {
    m_enable_iam_database_authentication = enable_iam_database_authentication;
    m_enable_iam_database_authentication_isSet = true;
}

bool OAIRestoreDBClusterToPointInTimeMessage::is_enable_iam_database_authentication_Set() const{
    return m_enable_iam_database_authentication_isSet;
}

bool OAIRestoreDBClusterToPointInTimeMessage::is_enable_iam_database_authentication_Valid() const{
    return m_enable_iam_database_authentication_isValid;
}

QList OAIRestoreDBClusterToPointInTimeMessage::getEnableCloudwatchLogsExports() const {
    return m_enable_cloudwatch_logs_exports;
}
void OAIRestoreDBClusterToPointInTimeMessage::setEnableCloudwatchLogsExports(const QList &enable_cloudwatch_logs_exports) {
    m_enable_cloudwatch_logs_exports = enable_cloudwatch_logs_exports;
    m_enable_cloudwatch_logs_exports_isSet = true;
}

bool OAIRestoreDBClusterToPointInTimeMessage::is_enable_cloudwatch_logs_exports_Set() const{
    return m_enable_cloudwatch_logs_exports_isSet;
}

bool OAIRestoreDBClusterToPointInTimeMessage::is_enable_cloudwatch_logs_exports_Valid() const{
    return m_enable_cloudwatch_logs_exports_isValid;
}

QString OAIRestoreDBClusterToPointInTimeMessage::getDbClusterParameterGroupName() const {
    return m_db_cluster_parameter_group_name;
}
void OAIRestoreDBClusterToPointInTimeMessage::setDbClusterParameterGroupName(const QString &db_cluster_parameter_group_name) {
    m_db_cluster_parameter_group_name = db_cluster_parameter_group_name;
    m_db_cluster_parameter_group_name_isSet = true;
}

bool OAIRestoreDBClusterToPointInTimeMessage::is_db_cluster_parameter_group_name_Set() const{
    return m_db_cluster_parameter_group_name_isSet;
}

bool OAIRestoreDBClusterToPointInTimeMessage::is_db_cluster_parameter_group_name_Valid() const{
    return m_db_cluster_parameter_group_name_isValid;
}

bool OAIRestoreDBClusterToPointInTimeMessage::getDeletionProtection() const {
    return m_deletion_protection;
}
void OAIRestoreDBClusterToPointInTimeMessage::setDeletionProtection(const bool &deletion_protection) {
    m_deletion_protection = deletion_protection;
    m_deletion_protection_isSet = true;
}

bool OAIRestoreDBClusterToPointInTimeMessage::is_deletion_protection_Set() const{
    return m_deletion_protection_isSet;
}

bool OAIRestoreDBClusterToPointInTimeMessage::is_deletion_protection_Valid() const{
    return m_deletion_protection_isValid;
}

OAIServerlessV2ScalingConfiguration OAIRestoreDBClusterToPointInTimeMessage::getServerlessV2ScalingConfiguration() const {
    return m_serverless_v2_scaling_configuration;
}
void OAIRestoreDBClusterToPointInTimeMessage::setServerlessV2ScalingConfiguration(const OAIServerlessV2ScalingConfiguration &serverless_v2_scaling_configuration) {
    m_serverless_v2_scaling_configuration = serverless_v2_scaling_configuration;
    m_serverless_v2_scaling_configuration_isSet = true;
}

bool OAIRestoreDBClusterToPointInTimeMessage::is_serverless_v2_scaling_configuration_Set() const{
    return m_serverless_v2_scaling_configuration_isSet;
}

bool OAIRestoreDBClusterToPointInTimeMessage::is_serverless_v2_scaling_configuration_Valid() const{
    return m_serverless_v2_scaling_configuration_isValid;
}

bool OAIRestoreDBClusterToPointInTimeMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_db_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restore_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_db_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restore_to_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_latest_restorable_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_subnet_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_option_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_iam_database_authentication_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_cloudwatch_logs_exports.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_cluster_parameter_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletion_protection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serverless_v2_scaling_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestoreDBClusterToPointInTimeMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_db_cluster_identifier_isValid && m_source_db_cluster_identifier_isValid && true;
}

} // namespace OpenAPI
