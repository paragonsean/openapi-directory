/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDBInstanceList_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDBInstanceList_inner::OAIDBInstanceList_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDBInstanceList_inner::OAIDBInstanceList_inner() {
    this->initializeModel();
}

OAIDBInstanceList_inner::~OAIDBInstanceList_inner() {}

void OAIDBInstanceList_inner::initializeModel() {

    m_db_instance_identifier_isSet = false;
    m_db_instance_identifier_isValid = false;

    m_db_instance_class_isSet = false;
    m_db_instance_class_isValid = false;

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_db_instance_status_isSet = false;
    m_db_instance_status_isValid = false;

    m_master_username_isSet = false;
    m_master_username_isValid = false;

    m_db_name_isSet = false;
    m_db_name_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_allocated_storage_isSet = false;
    m_allocated_storage_isValid = false;

    m_instance_create_time_isSet = false;
    m_instance_create_time_isValid = false;

    m_preferred_backup_window_isSet = false;
    m_preferred_backup_window_isValid = false;

    m_backup_retention_period_isSet = false;
    m_backup_retention_period_isValid = false;

    m_db_security_groups_isSet = false;
    m_db_security_groups_isValid = false;

    m_vpc_security_groups_isSet = false;
    m_vpc_security_groups_isValid = false;

    m_db_parameter_groups_isSet = false;
    m_db_parameter_groups_isValid = false;

    m_availability_zone_isSet = false;
    m_availability_zone_isValid = false;

    m_db_subnet_group_isSet = false;
    m_db_subnet_group_isValid = false;

    m_preferred_maintenance_window_isSet = false;
    m_preferred_maintenance_window_isValid = false;

    m_pending_modified_values_isSet = false;
    m_pending_modified_values_isValid = false;

    m_latest_restorable_time_isSet = false;
    m_latest_restorable_time_isValid = false;

    m_multi_az_isSet = false;
    m_multi_az_isValid = false;

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_auto_minor_version_upgrade_isSet = false;
    m_auto_minor_version_upgrade_isValid = false;

    m_read_replica_source_db_instance_identifier_isSet = false;
    m_read_replica_source_db_instance_identifier_isValid = false;

    m_read_replica_db_instance_identifiers_isSet = false;
    m_read_replica_db_instance_identifiers_isValid = false;

    m_read_replica_db_cluster_identifiers_isSet = false;
    m_read_replica_db_cluster_identifiers_isValid = false;

    m_license_model_isSet = false;
    m_license_model_isValid = false;

    m_iops_isSet = false;
    m_iops_isValid = false;

    m_option_group_memberships_isSet = false;
    m_option_group_memberships_isValid = false;

    m_character_set_name_isSet = false;
    m_character_set_name_isValid = false;

    m_secondary_availability_zone_isSet = false;
    m_secondary_availability_zone_isValid = false;

    m_publicly_accessible_isSet = false;
    m_publicly_accessible_isValid = false;

    m_status_infos_isSet = false;
    m_status_infos_isValid = false;

    m_storage_type_isSet = false;
    m_storage_type_isValid = false;

    m_tde_credential_arn_isSet = false;
    m_tde_credential_arn_isValid = false;

    m_db_instance_port_isSet = false;
    m_db_instance_port_isValid = false;

    m_db_cluster_identifier_isSet = false;
    m_db_cluster_identifier_isValid = false;

    m_storage_encrypted_isSet = false;
    m_storage_encrypted_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_dbi_resource_id_isSet = false;
    m_dbi_resource_id_isValid = false;

    m_ca_certificate_identifier_isSet = false;
    m_ca_certificate_identifier_isValid = false;

    m_domain_memberships_isSet = false;
    m_domain_memberships_isValid = false;

    m_copy_tags_to_snapshot_isSet = false;
    m_copy_tags_to_snapshot_isValid = false;

    m_monitoring_interval_isSet = false;
    m_monitoring_interval_isValid = false;

    m_enhanced_monitoring_resource_arn_isSet = false;
    m_enhanced_monitoring_resource_arn_isValid = false;

    m_monitoring_role_arn_isSet = false;
    m_monitoring_role_arn_isValid = false;

    m_promotion_tier_isSet = false;
    m_promotion_tier_isValid = false;

    m_db_instance_arn_isSet = false;
    m_db_instance_arn_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_iam_database_authentication_enabled_isSet = false;
    m_iam_database_authentication_enabled_isValid = false;

    m_performance_insights_enabled_isSet = false;
    m_performance_insights_enabled_isValid = false;

    m_performance_insights_kms_key_id_isSet = false;
    m_performance_insights_kms_key_id_isValid = false;

    m_enabled_cloudwatch_logs_exports_isSet = false;
    m_enabled_cloudwatch_logs_exports_isValid = false;

    m_deletion_protection_isSet = false;
    m_deletion_protection_isValid = false;
}

void OAIDBInstanceList_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDBInstanceList_inner::fromJsonObject(QJsonObject json) {

    m_db_instance_identifier_isValid = ::OpenAPI::fromJsonValue(m_db_instance_identifier, json[QString("DBInstanceIdentifier")]);
    m_db_instance_identifier_isSet = !json[QString("DBInstanceIdentifier")].isNull() && m_db_instance_identifier_isValid;

    m_db_instance_class_isValid = ::OpenAPI::fromJsonValue(m_db_instance_class, json[QString("DBInstanceClass")]);
    m_db_instance_class_isSet = !json[QString("DBInstanceClass")].isNull() && m_db_instance_class_isValid;

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("Engine")]);
    m_engine_isSet = !json[QString("Engine")].isNull() && m_engine_isValid;

    m_db_instance_status_isValid = ::OpenAPI::fromJsonValue(m_db_instance_status, json[QString("DBInstanceStatus")]);
    m_db_instance_status_isSet = !json[QString("DBInstanceStatus")].isNull() && m_db_instance_status_isValid;

    m_master_username_isValid = ::OpenAPI::fromJsonValue(m_master_username, json[QString("MasterUsername")]);
    m_master_username_isSet = !json[QString("MasterUsername")].isNull() && m_master_username_isValid;

    m_db_name_isValid = ::OpenAPI::fromJsonValue(m_db_name, json[QString("DBName")]);
    m_db_name_isSet = !json[QString("DBName")].isNull() && m_db_name_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("Endpoint")]);
    m_endpoint_isSet = !json[QString("Endpoint")].isNull() && m_endpoint_isValid;

    m_allocated_storage_isValid = ::OpenAPI::fromJsonValue(m_allocated_storage, json[QString("AllocatedStorage")]);
    m_allocated_storage_isSet = !json[QString("AllocatedStorage")].isNull() && m_allocated_storage_isValid;

    m_instance_create_time_isValid = ::OpenAPI::fromJsonValue(m_instance_create_time, json[QString("InstanceCreateTime")]);
    m_instance_create_time_isSet = !json[QString("InstanceCreateTime")].isNull() && m_instance_create_time_isValid;

    m_preferred_backup_window_isValid = ::OpenAPI::fromJsonValue(m_preferred_backup_window, json[QString("PreferredBackupWindow")]);
    m_preferred_backup_window_isSet = !json[QString("PreferredBackupWindow")].isNull() && m_preferred_backup_window_isValid;

    m_backup_retention_period_isValid = ::OpenAPI::fromJsonValue(m_backup_retention_period, json[QString("BackupRetentionPeriod")]);
    m_backup_retention_period_isSet = !json[QString("BackupRetentionPeriod")].isNull() && m_backup_retention_period_isValid;

    m_db_security_groups_isValid = ::OpenAPI::fromJsonValue(m_db_security_groups, json[QString("DBSecurityGroups")]);
    m_db_security_groups_isSet = !json[QString("DBSecurityGroups")].isNull() && m_db_security_groups_isValid;

    m_vpc_security_groups_isValid = ::OpenAPI::fromJsonValue(m_vpc_security_groups, json[QString("VpcSecurityGroups")]);
    m_vpc_security_groups_isSet = !json[QString("VpcSecurityGroups")].isNull() && m_vpc_security_groups_isValid;

    m_db_parameter_groups_isValid = ::OpenAPI::fromJsonValue(m_db_parameter_groups, json[QString("DBParameterGroups")]);
    m_db_parameter_groups_isSet = !json[QString("DBParameterGroups")].isNull() && m_db_parameter_groups_isValid;

    m_availability_zone_isValid = ::OpenAPI::fromJsonValue(m_availability_zone, json[QString("AvailabilityZone")]);
    m_availability_zone_isSet = !json[QString("AvailabilityZone")].isNull() && m_availability_zone_isValid;

    m_db_subnet_group_isValid = ::OpenAPI::fromJsonValue(m_db_subnet_group, json[QString("DBSubnetGroup")]);
    m_db_subnet_group_isSet = !json[QString("DBSubnetGroup")].isNull() && m_db_subnet_group_isValid;

    m_preferred_maintenance_window_isValid = ::OpenAPI::fromJsonValue(m_preferred_maintenance_window, json[QString("PreferredMaintenanceWindow")]);
    m_preferred_maintenance_window_isSet = !json[QString("PreferredMaintenanceWindow")].isNull() && m_preferred_maintenance_window_isValid;

    m_pending_modified_values_isValid = ::OpenAPI::fromJsonValue(m_pending_modified_values, json[QString("PendingModifiedValues")]);
    m_pending_modified_values_isSet = !json[QString("PendingModifiedValues")].isNull() && m_pending_modified_values_isValid;

    m_latest_restorable_time_isValid = ::OpenAPI::fromJsonValue(m_latest_restorable_time, json[QString("LatestRestorableTime")]);
    m_latest_restorable_time_isSet = !json[QString("LatestRestorableTime")].isNull() && m_latest_restorable_time_isValid;

    m_multi_az_isValid = ::OpenAPI::fromJsonValue(m_multi_az, json[QString("MultiAZ")]);
    m_multi_az_isSet = !json[QString("MultiAZ")].isNull() && m_multi_az_isValid;

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("EngineVersion")]);
    m_engine_version_isSet = !json[QString("EngineVersion")].isNull() && m_engine_version_isValid;

    m_auto_minor_version_upgrade_isValid = ::OpenAPI::fromJsonValue(m_auto_minor_version_upgrade, json[QString("AutoMinorVersionUpgrade")]);
    m_auto_minor_version_upgrade_isSet = !json[QString("AutoMinorVersionUpgrade")].isNull() && m_auto_minor_version_upgrade_isValid;

    m_read_replica_source_db_instance_identifier_isValid = ::OpenAPI::fromJsonValue(m_read_replica_source_db_instance_identifier, json[QString("ReadReplicaSourceDBInstanceIdentifier")]);
    m_read_replica_source_db_instance_identifier_isSet = !json[QString("ReadReplicaSourceDBInstanceIdentifier")].isNull() && m_read_replica_source_db_instance_identifier_isValid;

    m_read_replica_db_instance_identifiers_isValid = ::OpenAPI::fromJsonValue(m_read_replica_db_instance_identifiers, json[QString("ReadReplicaDBInstanceIdentifiers")]);
    m_read_replica_db_instance_identifiers_isSet = !json[QString("ReadReplicaDBInstanceIdentifiers")].isNull() && m_read_replica_db_instance_identifiers_isValid;

    m_read_replica_db_cluster_identifiers_isValid = ::OpenAPI::fromJsonValue(m_read_replica_db_cluster_identifiers, json[QString("ReadReplicaDBClusterIdentifiers")]);
    m_read_replica_db_cluster_identifiers_isSet = !json[QString("ReadReplicaDBClusterIdentifiers")].isNull() && m_read_replica_db_cluster_identifiers_isValid;

    m_license_model_isValid = ::OpenAPI::fromJsonValue(m_license_model, json[QString("LicenseModel")]);
    m_license_model_isSet = !json[QString("LicenseModel")].isNull() && m_license_model_isValid;

    m_iops_isValid = ::OpenAPI::fromJsonValue(m_iops, json[QString("Iops")]);
    m_iops_isSet = !json[QString("Iops")].isNull() && m_iops_isValid;

    m_option_group_memberships_isValid = ::OpenAPI::fromJsonValue(m_option_group_memberships, json[QString("OptionGroupMemberships")]);
    m_option_group_memberships_isSet = !json[QString("OptionGroupMemberships")].isNull() && m_option_group_memberships_isValid;

    m_character_set_name_isValid = ::OpenAPI::fromJsonValue(m_character_set_name, json[QString("CharacterSetName")]);
    m_character_set_name_isSet = !json[QString("CharacterSetName")].isNull() && m_character_set_name_isValid;

    m_secondary_availability_zone_isValid = ::OpenAPI::fromJsonValue(m_secondary_availability_zone, json[QString("SecondaryAvailabilityZone")]);
    m_secondary_availability_zone_isSet = !json[QString("SecondaryAvailabilityZone")].isNull() && m_secondary_availability_zone_isValid;

    m_publicly_accessible_isValid = ::OpenAPI::fromJsonValue(m_publicly_accessible, json[QString("PubliclyAccessible")]);
    m_publicly_accessible_isSet = !json[QString("PubliclyAccessible")].isNull() && m_publicly_accessible_isValid;

    m_status_infos_isValid = ::OpenAPI::fromJsonValue(m_status_infos, json[QString("StatusInfos")]);
    m_status_infos_isSet = !json[QString("StatusInfos")].isNull() && m_status_infos_isValid;

    m_storage_type_isValid = ::OpenAPI::fromJsonValue(m_storage_type, json[QString("StorageType")]);
    m_storage_type_isSet = !json[QString("StorageType")].isNull() && m_storage_type_isValid;

    m_tde_credential_arn_isValid = ::OpenAPI::fromJsonValue(m_tde_credential_arn, json[QString("TdeCredentialArn")]);
    m_tde_credential_arn_isSet = !json[QString("TdeCredentialArn")].isNull() && m_tde_credential_arn_isValid;

    m_db_instance_port_isValid = ::OpenAPI::fromJsonValue(m_db_instance_port, json[QString("DbInstancePort")]);
    m_db_instance_port_isSet = !json[QString("DbInstancePort")].isNull() && m_db_instance_port_isValid;

    m_db_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_identifier, json[QString("DBClusterIdentifier")]);
    m_db_cluster_identifier_isSet = !json[QString("DBClusterIdentifier")].isNull() && m_db_cluster_identifier_isValid;

    m_storage_encrypted_isValid = ::OpenAPI::fromJsonValue(m_storage_encrypted, json[QString("StorageEncrypted")]);
    m_storage_encrypted_isSet = !json[QString("StorageEncrypted")].isNull() && m_storage_encrypted_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_dbi_resource_id_isValid = ::OpenAPI::fromJsonValue(m_dbi_resource_id, json[QString("DbiResourceId")]);
    m_dbi_resource_id_isSet = !json[QString("DbiResourceId")].isNull() && m_dbi_resource_id_isValid;

    m_ca_certificate_identifier_isValid = ::OpenAPI::fromJsonValue(m_ca_certificate_identifier, json[QString("CACertificateIdentifier")]);
    m_ca_certificate_identifier_isSet = !json[QString("CACertificateIdentifier")].isNull() && m_ca_certificate_identifier_isValid;

    m_domain_memberships_isValid = ::OpenAPI::fromJsonValue(m_domain_memberships, json[QString("DomainMemberships")]);
    m_domain_memberships_isSet = !json[QString("DomainMemberships")].isNull() && m_domain_memberships_isValid;

    m_copy_tags_to_snapshot_isValid = ::OpenAPI::fromJsonValue(m_copy_tags_to_snapshot, json[QString("CopyTagsToSnapshot")]);
    m_copy_tags_to_snapshot_isSet = !json[QString("CopyTagsToSnapshot")].isNull() && m_copy_tags_to_snapshot_isValid;

    m_monitoring_interval_isValid = ::OpenAPI::fromJsonValue(m_monitoring_interval, json[QString("MonitoringInterval")]);
    m_monitoring_interval_isSet = !json[QString("MonitoringInterval")].isNull() && m_monitoring_interval_isValid;

    m_enhanced_monitoring_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_enhanced_monitoring_resource_arn, json[QString("EnhancedMonitoringResourceArn")]);
    m_enhanced_monitoring_resource_arn_isSet = !json[QString("EnhancedMonitoringResourceArn")].isNull() && m_enhanced_monitoring_resource_arn_isValid;

    m_monitoring_role_arn_isValid = ::OpenAPI::fromJsonValue(m_monitoring_role_arn, json[QString("MonitoringRoleArn")]);
    m_monitoring_role_arn_isSet = !json[QString("MonitoringRoleArn")].isNull() && m_monitoring_role_arn_isValid;

    m_promotion_tier_isValid = ::OpenAPI::fromJsonValue(m_promotion_tier, json[QString("PromotionTier")]);
    m_promotion_tier_isSet = !json[QString("PromotionTier")].isNull() && m_promotion_tier_isValid;

    m_db_instance_arn_isValid = ::OpenAPI::fromJsonValue(m_db_instance_arn, json[QString("DBInstanceArn")]);
    m_db_instance_arn_isSet = !json[QString("DBInstanceArn")].isNull() && m_db_instance_arn_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("Timezone")]);
    m_timezone_isSet = !json[QString("Timezone")].isNull() && m_timezone_isValid;

    m_iam_database_authentication_enabled_isValid = ::OpenAPI::fromJsonValue(m_iam_database_authentication_enabled, json[QString("IAMDatabaseAuthenticationEnabled")]);
    m_iam_database_authentication_enabled_isSet = !json[QString("IAMDatabaseAuthenticationEnabled")].isNull() && m_iam_database_authentication_enabled_isValid;

    m_performance_insights_enabled_isValid = ::OpenAPI::fromJsonValue(m_performance_insights_enabled, json[QString("PerformanceInsightsEnabled")]);
    m_performance_insights_enabled_isSet = !json[QString("PerformanceInsightsEnabled")].isNull() && m_performance_insights_enabled_isValid;

    m_performance_insights_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_performance_insights_kms_key_id, json[QString("PerformanceInsightsKMSKeyId")]);
    m_performance_insights_kms_key_id_isSet = !json[QString("PerformanceInsightsKMSKeyId")].isNull() && m_performance_insights_kms_key_id_isValid;

    m_enabled_cloudwatch_logs_exports_isValid = ::OpenAPI::fromJsonValue(m_enabled_cloudwatch_logs_exports, json[QString("EnabledCloudwatchLogsExports")]);
    m_enabled_cloudwatch_logs_exports_isSet = !json[QString("EnabledCloudwatchLogsExports")].isNull() && m_enabled_cloudwatch_logs_exports_isValid;

    m_deletion_protection_isValid = ::OpenAPI::fromJsonValue(m_deletion_protection, json[QString("DeletionProtection")]);
    m_deletion_protection_isSet = !json[QString("DeletionProtection")].isNull() && m_deletion_protection_isValid;
}

QString OAIDBInstanceList_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDBInstanceList_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_db_instance_identifier_isSet) {
        obj.insert(QString("DBInstanceIdentifier"), ::OpenAPI::toJsonValue(m_db_instance_identifier));
    }
    if (m_db_instance_class_isSet) {
        obj.insert(QString("DBInstanceClass"), ::OpenAPI::toJsonValue(m_db_instance_class));
    }
    if (m_engine_isSet) {
        obj.insert(QString("Engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_db_instance_status_isSet) {
        obj.insert(QString("DBInstanceStatus"), ::OpenAPI::toJsonValue(m_db_instance_status));
    }
    if (m_master_username_isSet) {
        obj.insert(QString("MasterUsername"), ::OpenAPI::toJsonValue(m_master_username));
    }
    if (m_db_name_isSet) {
        obj.insert(QString("DBName"), ::OpenAPI::toJsonValue(m_db_name));
    }
    if (m_endpoint.isSet()) {
        obj.insert(QString("Endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_allocated_storage_isSet) {
        obj.insert(QString("AllocatedStorage"), ::OpenAPI::toJsonValue(m_allocated_storage));
    }
    if (m_instance_create_time_isSet) {
        obj.insert(QString("InstanceCreateTime"), ::OpenAPI::toJsonValue(m_instance_create_time));
    }
    if (m_preferred_backup_window_isSet) {
        obj.insert(QString("PreferredBackupWindow"), ::OpenAPI::toJsonValue(m_preferred_backup_window));
    }
    if (m_backup_retention_period_isSet) {
        obj.insert(QString("BackupRetentionPeriod"), ::OpenAPI::toJsonValue(m_backup_retention_period));
    }
    if (m_db_security_groups.isSet()) {
        obj.insert(QString("DBSecurityGroups"), ::OpenAPI::toJsonValue(m_db_security_groups));
    }
    if (m_vpc_security_groups.isSet()) {
        obj.insert(QString("VpcSecurityGroups"), ::OpenAPI::toJsonValue(m_vpc_security_groups));
    }
    if (m_db_parameter_groups.isSet()) {
        obj.insert(QString("DBParameterGroups"), ::OpenAPI::toJsonValue(m_db_parameter_groups));
    }
    if (m_availability_zone_isSet) {
        obj.insert(QString("AvailabilityZone"), ::OpenAPI::toJsonValue(m_availability_zone));
    }
    if (m_db_subnet_group.isSet()) {
        obj.insert(QString("DBSubnetGroup"), ::OpenAPI::toJsonValue(m_db_subnet_group));
    }
    if (m_preferred_maintenance_window_isSet) {
        obj.insert(QString("PreferredMaintenanceWindow"), ::OpenAPI::toJsonValue(m_preferred_maintenance_window));
    }
    if (m_pending_modified_values.isSet()) {
        obj.insert(QString("PendingModifiedValues"), ::OpenAPI::toJsonValue(m_pending_modified_values));
    }
    if (m_latest_restorable_time_isSet) {
        obj.insert(QString("LatestRestorableTime"), ::OpenAPI::toJsonValue(m_latest_restorable_time));
    }
    if (m_multi_az_isSet) {
        obj.insert(QString("MultiAZ"), ::OpenAPI::toJsonValue(m_multi_az));
    }
    if (m_engine_version_isSet) {
        obj.insert(QString("EngineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_auto_minor_version_upgrade_isSet) {
        obj.insert(QString("AutoMinorVersionUpgrade"), ::OpenAPI::toJsonValue(m_auto_minor_version_upgrade));
    }
    if (m_read_replica_source_db_instance_identifier_isSet) {
        obj.insert(QString("ReadReplicaSourceDBInstanceIdentifier"), ::OpenAPI::toJsonValue(m_read_replica_source_db_instance_identifier));
    }
    if (m_read_replica_db_instance_identifiers.isSet()) {
        obj.insert(QString("ReadReplicaDBInstanceIdentifiers"), ::OpenAPI::toJsonValue(m_read_replica_db_instance_identifiers));
    }
    if (m_read_replica_db_cluster_identifiers.isSet()) {
        obj.insert(QString("ReadReplicaDBClusterIdentifiers"), ::OpenAPI::toJsonValue(m_read_replica_db_cluster_identifiers));
    }
    if (m_license_model_isSet) {
        obj.insert(QString("LicenseModel"), ::OpenAPI::toJsonValue(m_license_model));
    }
    if (m_iops_isSet) {
        obj.insert(QString("Iops"), ::OpenAPI::toJsonValue(m_iops));
    }
    if (m_option_group_memberships.isSet()) {
        obj.insert(QString("OptionGroupMemberships"), ::OpenAPI::toJsonValue(m_option_group_memberships));
    }
    if (m_character_set_name_isSet) {
        obj.insert(QString("CharacterSetName"), ::OpenAPI::toJsonValue(m_character_set_name));
    }
    if (m_secondary_availability_zone_isSet) {
        obj.insert(QString("SecondaryAvailabilityZone"), ::OpenAPI::toJsonValue(m_secondary_availability_zone));
    }
    if (m_publicly_accessible_isSet) {
        obj.insert(QString("PubliclyAccessible"), ::OpenAPI::toJsonValue(m_publicly_accessible));
    }
    if (m_status_infos.isSet()) {
        obj.insert(QString("StatusInfos"), ::OpenAPI::toJsonValue(m_status_infos));
    }
    if (m_storage_type_isSet) {
        obj.insert(QString("StorageType"), ::OpenAPI::toJsonValue(m_storage_type));
    }
    if (m_tde_credential_arn_isSet) {
        obj.insert(QString("TdeCredentialArn"), ::OpenAPI::toJsonValue(m_tde_credential_arn));
    }
    if (m_db_instance_port_isSet) {
        obj.insert(QString("DbInstancePort"), ::OpenAPI::toJsonValue(m_db_instance_port));
    }
    if (m_db_cluster_identifier_isSet) {
        obj.insert(QString("DBClusterIdentifier"), ::OpenAPI::toJsonValue(m_db_cluster_identifier));
    }
    if (m_storage_encrypted_isSet) {
        obj.insert(QString("StorageEncrypted"), ::OpenAPI::toJsonValue(m_storage_encrypted));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_dbi_resource_id_isSet) {
        obj.insert(QString("DbiResourceId"), ::OpenAPI::toJsonValue(m_dbi_resource_id));
    }
    if (m_ca_certificate_identifier_isSet) {
        obj.insert(QString("CACertificateIdentifier"), ::OpenAPI::toJsonValue(m_ca_certificate_identifier));
    }
    if (m_domain_memberships.isSet()) {
        obj.insert(QString("DomainMemberships"), ::OpenAPI::toJsonValue(m_domain_memberships));
    }
    if (m_copy_tags_to_snapshot_isSet) {
        obj.insert(QString("CopyTagsToSnapshot"), ::OpenAPI::toJsonValue(m_copy_tags_to_snapshot));
    }
    if (m_monitoring_interval_isSet) {
        obj.insert(QString("MonitoringInterval"), ::OpenAPI::toJsonValue(m_monitoring_interval));
    }
    if (m_enhanced_monitoring_resource_arn_isSet) {
        obj.insert(QString("EnhancedMonitoringResourceArn"), ::OpenAPI::toJsonValue(m_enhanced_monitoring_resource_arn));
    }
    if (m_monitoring_role_arn_isSet) {
        obj.insert(QString("MonitoringRoleArn"), ::OpenAPI::toJsonValue(m_monitoring_role_arn));
    }
    if (m_promotion_tier_isSet) {
        obj.insert(QString("PromotionTier"), ::OpenAPI::toJsonValue(m_promotion_tier));
    }
    if (m_db_instance_arn_isSet) {
        obj.insert(QString("DBInstanceArn"), ::OpenAPI::toJsonValue(m_db_instance_arn));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("Timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_iam_database_authentication_enabled_isSet) {
        obj.insert(QString("IAMDatabaseAuthenticationEnabled"), ::OpenAPI::toJsonValue(m_iam_database_authentication_enabled));
    }
    if (m_performance_insights_enabled_isSet) {
        obj.insert(QString("PerformanceInsightsEnabled"), ::OpenAPI::toJsonValue(m_performance_insights_enabled));
    }
    if (m_performance_insights_kms_key_id_isSet) {
        obj.insert(QString("PerformanceInsightsKMSKeyId"), ::OpenAPI::toJsonValue(m_performance_insights_kms_key_id));
    }
    if (m_enabled_cloudwatch_logs_exports.isSet()) {
        obj.insert(QString("EnabledCloudwatchLogsExports"), ::OpenAPI::toJsonValue(m_enabled_cloudwatch_logs_exports));
    }
    if (m_deletion_protection_isSet) {
        obj.insert(QString("DeletionProtection"), ::OpenAPI::toJsonValue(m_deletion_protection));
    }
    return obj;
}

QString OAIDBInstanceList_inner::getDbInstanceIdentifier() const {
    return m_db_instance_identifier;
}
void OAIDBInstanceList_inner::setDbInstanceIdentifier(const QString &db_instance_identifier) {
    m_db_instance_identifier = db_instance_identifier;
    m_db_instance_identifier_isSet = true;
}

bool OAIDBInstanceList_inner::is_db_instance_identifier_Set() const{
    return m_db_instance_identifier_isSet;
}

bool OAIDBInstanceList_inner::is_db_instance_identifier_Valid() const{
    return m_db_instance_identifier_isValid;
}

QString OAIDBInstanceList_inner::getDbInstanceClass() const {
    return m_db_instance_class;
}
void OAIDBInstanceList_inner::setDbInstanceClass(const QString &db_instance_class) {
    m_db_instance_class = db_instance_class;
    m_db_instance_class_isSet = true;
}

bool OAIDBInstanceList_inner::is_db_instance_class_Set() const{
    return m_db_instance_class_isSet;
}

bool OAIDBInstanceList_inner::is_db_instance_class_Valid() const{
    return m_db_instance_class_isValid;
}

QString OAIDBInstanceList_inner::getEngine() const {
    return m_engine;
}
void OAIDBInstanceList_inner::setEngine(const QString &engine) {
    m_engine = engine;
    m_engine_isSet = true;
}

bool OAIDBInstanceList_inner::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAIDBInstanceList_inner::is_engine_Valid() const{
    return m_engine_isValid;
}

QString OAIDBInstanceList_inner::getDbInstanceStatus() const {
    return m_db_instance_status;
}
void OAIDBInstanceList_inner::setDbInstanceStatus(const QString &db_instance_status) {
    m_db_instance_status = db_instance_status;
    m_db_instance_status_isSet = true;
}

bool OAIDBInstanceList_inner::is_db_instance_status_Set() const{
    return m_db_instance_status_isSet;
}

bool OAIDBInstanceList_inner::is_db_instance_status_Valid() const{
    return m_db_instance_status_isValid;
}

QString OAIDBInstanceList_inner::getMasterUsername() const {
    return m_master_username;
}
void OAIDBInstanceList_inner::setMasterUsername(const QString &master_username) {
    m_master_username = master_username;
    m_master_username_isSet = true;
}

bool OAIDBInstanceList_inner::is_master_username_Set() const{
    return m_master_username_isSet;
}

bool OAIDBInstanceList_inner::is_master_username_Valid() const{
    return m_master_username_isValid;
}

QString OAIDBInstanceList_inner::getDbName() const {
    return m_db_name;
}
void OAIDBInstanceList_inner::setDbName(const QString &db_name) {
    m_db_name = db_name;
    m_db_name_isSet = true;
}

bool OAIDBInstanceList_inner::is_db_name_Set() const{
    return m_db_name_isSet;
}

bool OAIDBInstanceList_inner::is_db_name_Valid() const{
    return m_db_name_isValid;
}

OAIDBInstance_Endpoint OAIDBInstanceList_inner::getEndpoint() const {
    return m_endpoint;
}
void OAIDBInstanceList_inner::setEndpoint(const OAIDBInstance_Endpoint &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIDBInstanceList_inner::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIDBInstanceList_inner::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

qint32 OAIDBInstanceList_inner::getAllocatedStorage() const {
    return m_allocated_storage;
}
void OAIDBInstanceList_inner::setAllocatedStorage(const qint32 &allocated_storage) {
    m_allocated_storage = allocated_storage;
    m_allocated_storage_isSet = true;
}

bool OAIDBInstanceList_inner::is_allocated_storage_Set() const{
    return m_allocated_storage_isSet;
}

bool OAIDBInstanceList_inner::is_allocated_storage_Valid() const{
    return m_allocated_storage_isValid;
}

QDateTime OAIDBInstanceList_inner::getInstanceCreateTime() const {
    return m_instance_create_time;
}
void OAIDBInstanceList_inner::setInstanceCreateTime(const QDateTime &instance_create_time) {
    m_instance_create_time = instance_create_time;
    m_instance_create_time_isSet = true;
}

bool OAIDBInstanceList_inner::is_instance_create_time_Set() const{
    return m_instance_create_time_isSet;
}

bool OAIDBInstanceList_inner::is_instance_create_time_Valid() const{
    return m_instance_create_time_isValid;
}

QString OAIDBInstanceList_inner::getPreferredBackupWindow() const {
    return m_preferred_backup_window;
}
void OAIDBInstanceList_inner::setPreferredBackupWindow(const QString &preferred_backup_window) {
    m_preferred_backup_window = preferred_backup_window;
    m_preferred_backup_window_isSet = true;
}

bool OAIDBInstanceList_inner::is_preferred_backup_window_Set() const{
    return m_preferred_backup_window_isSet;
}

bool OAIDBInstanceList_inner::is_preferred_backup_window_Valid() const{
    return m_preferred_backup_window_isValid;
}

qint32 OAIDBInstanceList_inner::getBackupRetentionPeriod() const {
    return m_backup_retention_period;
}
void OAIDBInstanceList_inner::setBackupRetentionPeriod(const qint32 &backup_retention_period) {
    m_backup_retention_period = backup_retention_period;
    m_backup_retention_period_isSet = true;
}

bool OAIDBInstanceList_inner::is_backup_retention_period_Set() const{
    return m_backup_retention_period_isSet;
}

bool OAIDBInstanceList_inner::is_backup_retention_period_Valid() const{
    return m_backup_retention_period_isValid;
}

QList OAIDBInstanceList_inner::getDbSecurityGroups() const {
    return m_db_security_groups;
}
void OAIDBInstanceList_inner::setDbSecurityGroups(const QList &db_security_groups) {
    m_db_security_groups = db_security_groups;
    m_db_security_groups_isSet = true;
}

bool OAIDBInstanceList_inner::is_db_security_groups_Set() const{
    return m_db_security_groups_isSet;
}

bool OAIDBInstanceList_inner::is_db_security_groups_Valid() const{
    return m_db_security_groups_isValid;
}

QList OAIDBInstanceList_inner::getVpcSecurityGroups() const {
    return m_vpc_security_groups;
}
void OAIDBInstanceList_inner::setVpcSecurityGroups(const QList &vpc_security_groups) {
    m_vpc_security_groups = vpc_security_groups;
    m_vpc_security_groups_isSet = true;
}

bool OAIDBInstanceList_inner::is_vpc_security_groups_Set() const{
    return m_vpc_security_groups_isSet;
}

bool OAIDBInstanceList_inner::is_vpc_security_groups_Valid() const{
    return m_vpc_security_groups_isValid;
}

QList OAIDBInstanceList_inner::getDbParameterGroups() const {
    return m_db_parameter_groups;
}
void OAIDBInstanceList_inner::setDbParameterGroups(const QList &db_parameter_groups) {
    m_db_parameter_groups = db_parameter_groups;
    m_db_parameter_groups_isSet = true;
}

bool OAIDBInstanceList_inner::is_db_parameter_groups_Set() const{
    return m_db_parameter_groups_isSet;
}

bool OAIDBInstanceList_inner::is_db_parameter_groups_Valid() const{
    return m_db_parameter_groups_isValid;
}

QString OAIDBInstanceList_inner::getAvailabilityZone() const {
    return m_availability_zone;
}
void OAIDBInstanceList_inner::setAvailabilityZone(const QString &availability_zone) {
    m_availability_zone = availability_zone;
    m_availability_zone_isSet = true;
}

bool OAIDBInstanceList_inner::is_availability_zone_Set() const{
    return m_availability_zone_isSet;
}

bool OAIDBInstanceList_inner::is_availability_zone_Valid() const{
    return m_availability_zone_isValid;
}

OAIDBInstance_DBSubnetGroup OAIDBInstanceList_inner::getDbSubnetGroup() const {
    return m_db_subnet_group;
}
void OAIDBInstanceList_inner::setDbSubnetGroup(const OAIDBInstance_DBSubnetGroup &db_subnet_group) {
    m_db_subnet_group = db_subnet_group;
    m_db_subnet_group_isSet = true;
}

bool OAIDBInstanceList_inner::is_db_subnet_group_Set() const{
    return m_db_subnet_group_isSet;
}

bool OAIDBInstanceList_inner::is_db_subnet_group_Valid() const{
    return m_db_subnet_group_isValid;
}

QString OAIDBInstanceList_inner::getPreferredMaintenanceWindow() const {
    return m_preferred_maintenance_window;
}
void OAIDBInstanceList_inner::setPreferredMaintenanceWindow(const QString &preferred_maintenance_window) {
    m_preferred_maintenance_window = preferred_maintenance_window;
    m_preferred_maintenance_window_isSet = true;
}

bool OAIDBInstanceList_inner::is_preferred_maintenance_window_Set() const{
    return m_preferred_maintenance_window_isSet;
}

bool OAIDBInstanceList_inner::is_preferred_maintenance_window_Valid() const{
    return m_preferred_maintenance_window_isValid;
}

OAIDBInstance_PendingModifiedValues OAIDBInstanceList_inner::getPendingModifiedValues() const {
    return m_pending_modified_values;
}
void OAIDBInstanceList_inner::setPendingModifiedValues(const OAIDBInstance_PendingModifiedValues &pending_modified_values) {
    m_pending_modified_values = pending_modified_values;
    m_pending_modified_values_isSet = true;
}

bool OAIDBInstanceList_inner::is_pending_modified_values_Set() const{
    return m_pending_modified_values_isSet;
}

bool OAIDBInstanceList_inner::is_pending_modified_values_Valid() const{
    return m_pending_modified_values_isValid;
}

QDateTime OAIDBInstanceList_inner::getLatestRestorableTime() const {
    return m_latest_restorable_time;
}
void OAIDBInstanceList_inner::setLatestRestorableTime(const QDateTime &latest_restorable_time) {
    m_latest_restorable_time = latest_restorable_time;
    m_latest_restorable_time_isSet = true;
}

bool OAIDBInstanceList_inner::is_latest_restorable_time_Set() const{
    return m_latest_restorable_time_isSet;
}

bool OAIDBInstanceList_inner::is_latest_restorable_time_Valid() const{
    return m_latest_restorable_time_isValid;
}

bool OAIDBInstanceList_inner::getMultiAz() const {
    return m_multi_az;
}
void OAIDBInstanceList_inner::setMultiAz(const bool &multi_az) {
    m_multi_az = multi_az;
    m_multi_az_isSet = true;
}

bool OAIDBInstanceList_inner::is_multi_az_Set() const{
    return m_multi_az_isSet;
}

bool OAIDBInstanceList_inner::is_multi_az_Valid() const{
    return m_multi_az_isValid;
}

QString OAIDBInstanceList_inner::getEngineVersion() const {
    return m_engine_version;
}
void OAIDBInstanceList_inner::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAIDBInstanceList_inner::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAIDBInstanceList_inner::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

bool OAIDBInstanceList_inner::getAutoMinorVersionUpgrade() const {
    return m_auto_minor_version_upgrade;
}
void OAIDBInstanceList_inner::setAutoMinorVersionUpgrade(const bool &auto_minor_version_upgrade) {
    m_auto_minor_version_upgrade = auto_minor_version_upgrade;
    m_auto_minor_version_upgrade_isSet = true;
}

bool OAIDBInstanceList_inner::is_auto_minor_version_upgrade_Set() const{
    return m_auto_minor_version_upgrade_isSet;
}

bool OAIDBInstanceList_inner::is_auto_minor_version_upgrade_Valid() const{
    return m_auto_minor_version_upgrade_isValid;
}

QString OAIDBInstanceList_inner::getReadReplicaSourceDbInstanceIdentifier() const {
    return m_read_replica_source_db_instance_identifier;
}
void OAIDBInstanceList_inner::setReadReplicaSourceDbInstanceIdentifier(const QString &read_replica_source_db_instance_identifier) {
    m_read_replica_source_db_instance_identifier = read_replica_source_db_instance_identifier;
    m_read_replica_source_db_instance_identifier_isSet = true;
}

bool OAIDBInstanceList_inner::is_read_replica_source_db_instance_identifier_Set() const{
    return m_read_replica_source_db_instance_identifier_isSet;
}

bool OAIDBInstanceList_inner::is_read_replica_source_db_instance_identifier_Valid() const{
    return m_read_replica_source_db_instance_identifier_isValid;
}

QList OAIDBInstanceList_inner::getReadReplicaDbInstanceIdentifiers() const {
    return m_read_replica_db_instance_identifiers;
}
void OAIDBInstanceList_inner::setReadReplicaDbInstanceIdentifiers(const QList &read_replica_db_instance_identifiers) {
    m_read_replica_db_instance_identifiers = read_replica_db_instance_identifiers;
    m_read_replica_db_instance_identifiers_isSet = true;
}

bool OAIDBInstanceList_inner::is_read_replica_db_instance_identifiers_Set() const{
    return m_read_replica_db_instance_identifiers_isSet;
}

bool OAIDBInstanceList_inner::is_read_replica_db_instance_identifiers_Valid() const{
    return m_read_replica_db_instance_identifiers_isValid;
}

QList OAIDBInstanceList_inner::getReadReplicaDbClusterIdentifiers() const {
    return m_read_replica_db_cluster_identifiers;
}
void OAIDBInstanceList_inner::setReadReplicaDbClusterIdentifiers(const QList &read_replica_db_cluster_identifiers) {
    m_read_replica_db_cluster_identifiers = read_replica_db_cluster_identifiers;
    m_read_replica_db_cluster_identifiers_isSet = true;
}

bool OAIDBInstanceList_inner::is_read_replica_db_cluster_identifiers_Set() const{
    return m_read_replica_db_cluster_identifiers_isSet;
}

bool OAIDBInstanceList_inner::is_read_replica_db_cluster_identifiers_Valid() const{
    return m_read_replica_db_cluster_identifiers_isValid;
}

QString OAIDBInstanceList_inner::getLicenseModel() const {
    return m_license_model;
}
void OAIDBInstanceList_inner::setLicenseModel(const QString &license_model) {
    m_license_model = license_model;
    m_license_model_isSet = true;
}

bool OAIDBInstanceList_inner::is_license_model_Set() const{
    return m_license_model_isSet;
}

bool OAIDBInstanceList_inner::is_license_model_Valid() const{
    return m_license_model_isValid;
}

qint32 OAIDBInstanceList_inner::getIops() const {
    return m_iops;
}
void OAIDBInstanceList_inner::setIops(const qint32 &iops) {
    m_iops = iops;
    m_iops_isSet = true;
}

bool OAIDBInstanceList_inner::is_iops_Set() const{
    return m_iops_isSet;
}

bool OAIDBInstanceList_inner::is_iops_Valid() const{
    return m_iops_isValid;
}

QList OAIDBInstanceList_inner::getOptionGroupMemberships() const {
    return m_option_group_memberships;
}
void OAIDBInstanceList_inner::setOptionGroupMemberships(const QList &option_group_memberships) {
    m_option_group_memberships = option_group_memberships;
    m_option_group_memberships_isSet = true;
}

bool OAIDBInstanceList_inner::is_option_group_memberships_Set() const{
    return m_option_group_memberships_isSet;
}

bool OAIDBInstanceList_inner::is_option_group_memberships_Valid() const{
    return m_option_group_memberships_isValid;
}

QString OAIDBInstanceList_inner::getCharacterSetName() const {
    return m_character_set_name;
}
void OAIDBInstanceList_inner::setCharacterSetName(const QString &character_set_name) {
    m_character_set_name = character_set_name;
    m_character_set_name_isSet = true;
}

bool OAIDBInstanceList_inner::is_character_set_name_Set() const{
    return m_character_set_name_isSet;
}

bool OAIDBInstanceList_inner::is_character_set_name_Valid() const{
    return m_character_set_name_isValid;
}

QString OAIDBInstanceList_inner::getSecondaryAvailabilityZone() const {
    return m_secondary_availability_zone;
}
void OAIDBInstanceList_inner::setSecondaryAvailabilityZone(const QString &secondary_availability_zone) {
    m_secondary_availability_zone = secondary_availability_zone;
    m_secondary_availability_zone_isSet = true;
}

bool OAIDBInstanceList_inner::is_secondary_availability_zone_Set() const{
    return m_secondary_availability_zone_isSet;
}

bool OAIDBInstanceList_inner::is_secondary_availability_zone_Valid() const{
    return m_secondary_availability_zone_isValid;
}

bool OAIDBInstanceList_inner::getPubliclyAccessible() const {
    return m_publicly_accessible;
}
void OAIDBInstanceList_inner::setPubliclyAccessible(const bool &publicly_accessible) {
    m_publicly_accessible = publicly_accessible;
    m_publicly_accessible_isSet = true;
}

bool OAIDBInstanceList_inner::is_publicly_accessible_Set() const{
    return m_publicly_accessible_isSet;
}

bool OAIDBInstanceList_inner::is_publicly_accessible_Valid() const{
    return m_publicly_accessible_isValid;
}

QList OAIDBInstanceList_inner::getStatusInfos() const {
    return m_status_infos;
}
void OAIDBInstanceList_inner::setStatusInfos(const QList &status_infos) {
    m_status_infos = status_infos;
    m_status_infos_isSet = true;
}

bool OAIDBInstanceList_inner::is_status_infos_Set() const{
    return m_status_infos_isSet;
}

bool OAIDBInstanceList_inner::is_status_infos_Valid() const{
    return m_status_infos_isValid;
}

QString OAIDBInstanceList_inner::getStorageType() const {
    return m_storage_type;
}
void OAIDBInstanceList_inner::setStorageType(const QString &storage_type) {
    m_storage_type = storage_type;
    m_storage_type_isSet = true;
}

bool OAIDBInstanceList_inner::is_storage_type_Set() const{
    return m_storage_type_isSet;
}

bool OAIDBInstanceList_inner::is_storage_type_Valid() const{
    return m_storage_type_isValid;
}

QString OAIDBInstanceList_inner::getTdeCredentialArn() const {
    return m_tde_credential_arn;
}
void OAIDBInstanceList_inner::setTdeCredentialArn(const QString &tde_credential_arn) {
    m_tde_credential_arn = tde_credential_arn;
    m_tde_credential_arn_isSet = true;
}

bool OAIDBInstanceList_inner::is_tde_credential_arn_Set() const{
    return m_tde_credential_arn_isSet;
}

bool OAIDBInstanceList_inner::is_tde_credential_arn_Valid() const{
    return m_tde_credential_arn_isValid;
}

qint32 OAIDBInstanceList_inner::getDbInstancePort() const {
    return m_db_instance_port;
}
void OAIDBInstanceList_inner::setDbInstancePort(const qint32 &db_instance_port) {
    m_db_instance_port = db_instance_port;
    m_db_instance_port_isSet = true;
}

bool OAIDBInstanceList_inner::is_db_instance_port_Set() const{
    return m_db_instance_port_isSet;
}

bool OAIDBInstanceList_inner::is_db_instance_port_Valid() const{
    return m_db_instance_port_isValid;
}

QString OAIDBInstanceList_inner::getDbClusterIdentifier() const {
    return m_db_cluster_identifier;
}
void OAIDBInstanceList_inner::setDbClusterIdentifier(const QString &db_cluster_identifier) {
    m_db_cluster_identifier = db_cluster_identifier;
    m_db_cluster_identifier_isSet = true;
}

bool OAIDBInstanceList_inner::is_db_cluster_identifier_Set() const{
    return m_db_cluster_identifier_isSet;
}

bool OAIDBInstanceList_inner::is_db_cluster_identifier_Valid() const{
    return m_db_cluster_identifier_isValid;
}

bool OAIDBInstanceList_inner::getStorageEncrypted() const {
    return m_storage_encrypted;
}
void OAIDBInstanceList_inner::setStorageEncrypted(const bool &storage_encrypted) {
    m_storage_encrypted = storage_encrypted;
    m_storage_encrypted_isSet = true;
}

bool OAIDBInstanceList_inner::is_storage_encrypted_Set() const{
    return m_storage_encrypted_isSet;
}

bool OAIDBInstanceList_inner::is_storage_encrypted_Valid() const{
    return m_storage_encrypted_isValid;
}

QString OAIDBInstanceList_inner::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAIDBInstanceList_inner::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAIDBInstanceList_inner::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAIDBInstanceList_inner::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

QString OAIDBInstanceList_inner::getDbiResourceId() const {
    return m_dbi_resource_id;
}
void OAIDBInstanceList_inner::setDbiResourceId(const QString &dbi_resource_id) {
    m_dbi_resource_id = dbi_resource_id;
    m_dbi_resource_id_isSet = true;
}

bool OAIDBInstanceList_inner::is_dbi_resource_id_Set() const{
    return m_dbi_resource_id_isSet;
}

bool OAIDBInstanceList_inner::is_dbi_resource_id_Valid() const{
    return m_dbi_resource_id_isValid;
}

QString OAIDBInstanceList_inner::getCaCertificateIdentifier() const {
    return m_ca_certificate_identifier;
}
void OAIDBInstanceList_inner::setCaCertificateIdentifier(const QString &ca_certificate_identifier) {
    m_ca_certificate_identifier = ca_certificate_identifier;
    m_ca_certificate_identifier_isSet = true;
}

bool OAIDBInstanceList_inner::is_ca_certificate_identifier_Set() const{
    return m_ca_certificate_identifier_isSet;
}

bool OAIDBInstanceList_inner::is_ca_certificate_identifier_Valid() const{
    return m_ca_certificate_identifier_isValid;
}

QList OAIDBInstanceList_inner::getDomainMemberships() const {
    return m_domain_memberships;
}
void OAIDBInstanceList_inner::setDomainMemberships(const QList &domain_memberships) {
    m_domain_memberships = domain_memberships;
    m_domain_memberships_isSet = true;
}

bool OAIDBInstanceList_inner::is_domain_memberships_Set() const{
    return m_domain_memberships_isSet;
}

bool OAIDBInstanceList_inner::is_domain_memberships_Valid() const{
    return m_domain_memberships_isValid;
}

bool OAIDBInstanceList_inner::getCopyTagsToSnapshot() const {
    return m_copy_tags_to_snapshot;
}
void OAIDBInstanceList_inner::setCopyTagsToSnapshot(const bool &copy_tags_to_snapshot) {
    m_copy_tags_to_snapshot = copy_tags_to_snapshot;
    m_copy_tags_to_snapshot_isSet = true;
}

bool OAIDBInstanceList_inner::is_copy_tags_to_snapshot_Set() const{
    return m_copy_tags_to_snapshot_isSet;
}

bool OAIDBInstanceList_inner::is_copy_tags_to_snapshot_Valid() const{
    return m_copy_tags_to_snapshot_isValid;
}

qint32 OAIDBInstanceList_inner::getMonitoringInterval() const {
    return m_monitoring_interval;
}
void OAIDBInstanceList_inner::setMonitoringInterval(const qint32 &monitoring_interval) {
    m_monitoring_interval = monitoring_interval;
    m_monitoring_interval_isSet = true;
}

bool OAIDBInstanceList_inner::is_monitoring_interval_Set() const{
    return m_monitoring_interval_isSet;
}

bool OAIDBInstanceList_inner::is_monitoring_interval_Valid() const{
    return m_monitoring_interval_isValid;
}

QString OAIDBInstanceList_inner::getEnhancedMonitoringResourceArn() const {
    return m_enhanced_monitoring_resource_arn;
}
void OAIDBInstanceList_inner::setEnhancedMonitoringResourceArn(const QString &enhanced_monitoring_resource_arn) {
    m_enhanced_monitoring_resource_arn = enhanced_monitoring_resource_arn;
    m_enhanced_monitoring_resource_arn_isSet = true;
}

bool OAIDBInstanceList_inner::is_enhanced_monitoring_resource_arn_Set() const{
    return m_enhanced_monitoring_resource_arn_isSet;
}

bool OAIDBInstanceList_inner::is_enhanced_monitoring_resource_arn_Valid() const{
    return m_enhanced_monitoring_resource_arn_isValid;
}

QString OAIDBInstanceList_inner::getMonitoringRoleArn() const {
    return m_monitoring_role_arn;
}
void OAIDBInstanceList_inner::setMonitoringRoleArn(const QString &monitoring_role_arn) {
    m_monitoring_role_arn = monitoring_role_arn;
    m_monitoring_role_arn_isSet = true;
}

bool OAIDBInstanceList_inner::is_monitoring_role_arn_Set() const{
    return m_monitoring_role_arn_isSet;
}

bool OAIDBInstanceList_inner::is_monitoring_role_arn_Valid() const{
    return m_monitoring_role_arn_isValid;
}

qint32 OAIDBInstanceList_inner::getPromotionTier() const {
    return m_promotion_tier;
}
void OAIDBInstanceList_inner::setPromotionTier(const qint32 &promotion_tier) {
    m_promotion_tier = promotion_tier;
    m_promotion_tier_isSet = true;
}

bool OAIDBInstanceList_inner::is_promotion_tier_Set() const{
    return m_promotion_tier_isSet;
}

bool OAIDBInstanceList_inner::is_promotion_tier_Valid() const{
    return m_promotion_tier_isValid;
}

QString OAIDBInstanceList_inner::getDbInstanceArn() const {
    return m_db_instance_arn;
}
void OAIDBInstanceList_inner::setDbInstanceArn(const QString &db_instance_arn) {
    m_db_instance_arn = db_instance_arn;
    m_db_instance_arn_isSet = true;
}

bool OAIDBInstanceList_inner::is_db_instance_arn_Set() const{
    return m_db_instance_arn_isSet;
}

bool OAIDBInstanceList_inner::is_db_instance_arn_Valid() const{
    return m_db_instance_arn_isValid;
}

QString OAIDBInstanceList_inner::getTimezone() const {
    return m_timezone;
}
void OAIDBInstanceList_inner::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIDBInstanceList_inner::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIDBInstanceList_inner::is_timezone_Valid() const{
    return m_timezone_isValid;
}

bool OAIDBInstanceList_inner::getIamDatabaseAuthenticationEnabled() const {
    return m_iam_database_authentication_enabled;
}
void OAIDBInstanceList_inner::setIamDatabaseAuthenticationEnabled(const bool &iam_database_authentication_enabled) {
    m_iam_database_authentication_enabled = iam_database_authentication_enabled;
    m_iam_database_authentication_enabled_isSet = true;
}

bool OAIDBInstanceList_inner::is_iam_database_authentication_enabled_Set() const{
    return m_iam_database_authentication_enabled_isSet;
}

bool OAIDBInstanceList_inner::is_iam_database_authentication_enabled_Valid() const{
    return m_iam_database_authentication_enabled_isValid;
}

bool OAIDBInstanceList_inner::getPerformanceInsightsEnabled() const {
    return m_performance_insights_enabled;
}
void OAIDBInstanceList_inner::setPerformanceInsightsEnabled(const bool &performance_insights_enabled) {
    m_performance_insights_enabled = performance_insights_enabled;
    m_performance_insights_enabled_isSet = true;
}

bool OAIDBInstanceList_inner::is_performance_insights_enabled_Set() const{
    return m_performance_insights_enabled_isSet;
}

bool OAIDBInstanceList_inner::is_performance_insights_enabled_Valid() const{
    return m_performance_insights_enabled_isValid;
}

QString OAIDBInstanceList_inner::getPerformanceInsightsKmsKeyId() const {
    return m_performance_insights_kms_key_id;
}
void OAIDBInstanceList_inner::setPerformanceInsightsKmsKeyId(const QString &performance_insights_kms_key_id) {
    m_performance_insights_kms_key_id = performance_insights_kms_key_id;
    m_performance_insights_kms_key_id_isSet = true;
}

bool OAIDBInstanceList_inner::is_performance_insights_kms_key_id_Set() const{
    return m_performance_insights_kms_key_id_isSet;
}

bool OAIDBInstanceList_inner::is_performance_insights_kms_key_id_Valid() const{
    return m_performance_insights_kms_key_id_isValid;
}

QList OAIDBInstanceList_inner::getEnabledCloudwatchLogsExports() const {
    return m_enabled_cloudwatch_logs_exports;
}
void OAIDBInstanceList_inner::setEnabledCloudwatchLogsExports(const QList &enabled_cloudwatch_logs_exports) {
    m_enabled_cloudwatch_logs_exports = enabled_cloudwatch_logs_exports;
    m_enabled_cloudwatch_logs_exports_isSet = true;
}

bool OAIDBInstanceList_inner::is_enabled_cloudwatch_logs_exports_Set() const{
    return m_enabled_cloudwatch_logs_exports_isSet;
}

bool OAIDBInstanceList_inner::is_enabled_cloudwatch_logs_exports_Valid() const{
    return m_enabled_cloudwatch_logs_exports_isValid;
}

bool OAIDBInstanceList_inner::getDeletionProtection() const {
    return m_deletion_protection;
}
void OAIDBInstanceList_inner::setDeletionProtection(const bool &deletion_protection) {
    m_deletion_protection = deletion_protection;
    m_deletion_protection_isSet = true;
}

bool OAIDBInstanceList_inner::is_deletion_protection_Set() const{
    return m_deletion_protection_isSet;
}

bool OAIDBInstanceList_inner::is_deletion_protection_Valid() const{
    return m_deletion_protection_isValid;
}

bool OAIDBInstanceList_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_db_instance_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_instance_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_instance_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allocated_storage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_backup_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_retention_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_security_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_security_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_parameter_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_subnet_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_maintenance_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_modified_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_restorable_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_az_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_minor_version_upgrade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_replica_source_db_instance_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_replica_db_instance_identifiers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_replica_db_cluster_identifiers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iops_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_option_group_memberships.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_character_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_availability_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publicly_accessible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_infos.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tde_credential_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_instance_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dbi_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ca_certificate_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_memberships.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_tags_to_snapshot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enhanced_monitoring_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotion_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_instance_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_database_authentication_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_performance_insights_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_performance_insights_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_cloudwatch_logs_exports.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletion_protection_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDBInstanceList_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
