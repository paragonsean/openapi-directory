/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEventSubscription.h
 *
 * Contains the results of a successful invocation of the &lt;a&gt;DescribeEventSubscriptions&lt;/a&gt; action.
 */

#ifndef OAIEventSubscription_H
#define OAIEventSubscription_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEventSubscription : public OAIObject {
public:
    OAIEventSubscription();
    OAIEventSubscription(QString json);
    ~OAIEventSubscription() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCustomerAwsId() const;
    void setCustomerAwsId(const QString &customer_aws_id);
    bool is_customer_aws_id_Set() const;
    bool is_customer_aws_id_Valid() const;

    QString getCustSubscriptionId() const;
    void setCustSubscriptionId(const QString &cust_subscription_id);
    bool is_cust_subscription_id_Set() const;
    bool is_cust_subscription_id_Valid() const;

    QString getSnsTopicArn() const;
    void setSnsTopicArn(const QString &sns_topic_arn);
    bool is_sns_topic_arn_Set() const;
    bool is_sns_topic_arn_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getSubscriptionCreationTime() const;
    void setSubscriptionCreationTime(const QString &subscription_creation_time);
    bool is_subscription_creation_time_Set() const;
    bool is_subscription_creation_time_Valid() const;

    QString getSourceType() const;
    void setSourceType(const QString &source_type);
    bool is_source_type_Set() const;
    bool is_source_type_Valid() const;

    QList getSourceIdsList() const;
    void setSourceIdsList(const QList &source_ids_list);
    bool is_source_ids_list_Set() const;
    bool is_source_ids_list_Valid() const;

    QList getEventCategoriesList() const;
    void setEventCategoriesList(const QList &event_categories_list);
    bool is_event_categories_list_Set() const;
    bool is_event_categories_list_Valid() const;

    bool getEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    QString getEventSubscriptionArn() const;
    void setEventSubscriptionArn(const QString &event_subscription_arn);
    bool is_event_subscription_arn_Set() const;
    bool is_event_subscription_arn_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_customer_aws_id;
    bool m_customer_aws_id_isSet;
    bool m_customer_aws_id_isValid;

    QString m_cust_subscription_id;
    bool m_cust_subscription_id_isSet;
    bool m_cust_subscription_id_isValid;

    QString m_sns_topic_arn;
    bool m_sns_topic_arn_isSet;
    bool m_sns_topic_arn_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_subscription_creation_time;
    bool m_subscription_creation_time_isSet;
    bool m_subscription_creation_time_isValid;

    QString m_source_type;
    bool m_source_type_isSet;
    bool m_source_type_isValid;

    QList m_source_ids_list;
    bool m_source_ids_list_isSet;
    bool m_source_ids_list_isValid;

    QList m_event_categories_list;
    bool m_event_categories_list_isSet;
    bool m_event_categories_list_isValid;

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    QString m_event_subscription_arn;
    bool m_event_subscription_arn_isSet;
    bool m_event_subscription_arn_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEventSubscription)

#endif // OAIEventSubscription_H
