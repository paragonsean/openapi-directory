/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGlobalCluster.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGlobalCluster::OAIGlobalCluster(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGlobalCluster::OAIGlobalCluster() {
    this->initializeModel();
}

OAIGlobalCluster::~OAIGlobalCluster() {}

void OAIGlobalCluster::initializeModel() {

    m_global_cluster_identifier_isSet = false;
    m_global_cluster_identifier_isValid = false;

    m_global_cluster_resource_id_isSet = false;
    m_global_cluster_resource_id_isValid = false;

    m_global_cluster_arn_isSet = false;
    m_global_cluster_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_storage_encrypted_isSet = false;
    m_storage_encrypted_isValid = false;

    m_deletion_protection_isSet = false;
    m_deletion_protection_isValid = false;

    m_global_cluster_members_isSet = false;
    m_global_cluster_members_isValid = false;
}

void OAIGlobalCluster::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGlobalCluster::fromJsonObject(QJsonObject json) {

    m_global_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_global_cluster_identifier, json[QString("GlobalClusterIdentifier")]);
    m_global_cluster_identifier_isSet = !json[QString("GlobalClusterIdentifier")].isNull() && m_global_cluster_identifier_isValid;

    m_global_cluster_resource_id_isValid = ::OpenAPI::fromJsonValue(m_global_cluster_resource_id, json[QString("GlobalClusterResourceId")]);
    m_global_cluster_resource_id_isSet = !json[QString("GlobalClusterResourceId")].isNull() && m_global_cluster_resource_id_isValid;

    m_global_cluster_arn_isValid = ::OpenAPI::fromJsonValue(m_global_cluster_arn, json[QString("GlobalClusterArn")]);
    m_global_cluster_arn_isSet = !json[QString("GlobalClusterArn")].isNull() && m_global_cluster_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("Engine")]);
    m_engine_isSet = !json[QString("Engine")].isNull() && m_engine_isValid;

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("EngineVersion")]);
    m_engine_version_isSet = !json[QString("EngineVersion")].isNull() && m_engine_version_isValid;

    m_storage_encrypted_isValid = ::OpenAPI::fromJsonValue(m_storage_encrypted, json[QString("StorageEncrypted")]);
    m_storage_encrypted_isSet = !json[QString("StorageEncrypted")].isNull() && m_storage_encrypted_isValid;

    m_deletion_protection_isValid = ::OpenAPI::fromJsonValue(m_deletion_protection, json[QString("DeletionProtection")]);
    m_deletion_protection_isSet = !json[QString("DeletionProtection")].isNull() && m_deletion_protection_isValid;

    m_global_cluster_members_isValid = ::OpenAPI::fromJsonValue(m_global_cluster_members, json[QString("GlobalClusterMembers")]);
    m_global_cluster_members_isSet = !json[QString("GlobalClusterMembers")].isNull() && m_global_cluster_members_isValid;
}

QString OAIGlobalCluster::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGlobalCluster::asJsonObject() const {
    QJsonObject obj;
    if (m_global_cluster_identifier_isSet) {
        obj.insert(QString("GlobalClusterIdentifier"), ::OpenAPI::toJsonValue(m_global_cluster_identifier));
    }
    if (m_global_cluster_resource_id_isSet) {
        obj.insert(QString("GlobalClusterResourceId"), ::OpenAPI::toJsonValue(m_global_cluster_resource_id));
    }
    if (m_global_cluster_arn_isSet) {
        obj.insert(QString("GlobalClusterArn"), ::OpenAPI::toJsonValue(m_global_cluster_arn));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_engine_isSet) {
        obj.insert(QString("Engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_engine_version_isSet) {
        obj.insert(QString("EngineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_storage_encrypted_isSet) {
        obj.insert(QString("StorageEncrypted"), ::OpenAPI::toJsonValue(m_storage_encrypted));
    }
    if (m_deletion_protection_isSet) {
        obj.insert(QString("DeletionProtection"), ::OpenAPI::toJsonValue(m_deletion_protection));
    }
    if (m_global_cluster_members.isSet()) {
        obj.insert(QString("GlobalClusterMembers"), ::OpenAPI::toJsonValue(m_global_cluster_members));
    }
    return obj;
}

QString OAIGlobalCluster::getGlobalClusterIdentifier() const {
    return m_global_cluster_identifier;
}
void OAIGlobalCluster::setGlobalClusterIdentifier(const QString &global_cluster_identifier) {
    m_global_cluster_identifier = global_cluster_identifier;
    m_global_cluster_identifier_isSet = true;
}

bool OAIGlobalCluster::is_global_cluster_identifier_Set() const{
    return m_global_cluster_identifier_isSet;
}

bool OAIGlobalCluster::is_global_cluster_identifier_Valid() const{
    return m_global_cluster_identifier_isValid;
}

QString OAIGlobalCluster::getGlobalClusterResourceId() const {
    return m_global_cluster_resource_id;
}
void OAIGlobalCluster::setGlobalClusterResourceId(const QString &global_cluster_resource_id) {
    m_global_cluster_resource_id = global_cluster_resource_id;
    m_global_cluster_resource_id_isSet = true;
}

bool OAIGlobalCluster::is_global_cluster_resource_id_Set() const{
    return m_global_cluster_resource_id_isSet;
}

bool OAIGlobalCluster::is_global_cluster_resource_id_Valid() const{
    return m_global_cluster_resource_id_isValid;
}

QString OAIGlobalCluster::getGlobalClusterArn() const {
    return m_global_cluster_arn;
}
void OAIGlobalCluster::setGlobalClusterArn(const QString &global_cluster_arn) {
    m_global_cluster_arn = global_cluster_arn;
    m_global_cluster_arn_isSet = true;
}

bool OAIGlobalCluster::is_global_cluster_arn_Set() const{
    return m_global_cluster_arn_isSet;
}

bool OAIGlobalCluster::is_global_cluster_arn_Valid() const{
    return m_global_cluster_arn_isValid;
}

QString OAIGlobalCluster::getStatus() const {
    return m_status;
}
void OAIGlobalCluster::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGlobalCluster::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGlobalCluster::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGlobalCluster::getEngine() const {
    return m_engine;
}
void OAIGlobalCluster::setEngine(const QString &engine) {
    m_engine = engine;
    m_engine_isSet = true;
}

bool OAIGlobalCluster::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAIGlobalCluster::is_engine_Valid() const{
    return m_engine_isValid;
}

QString OAIGlobalCluster::getEngineVersion() const {
    return m_engine_version;
}
void OAIGlobalCluster::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAIGlobalCluster::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAIGlobalCluster::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

bool OAIGlobalCluster::getStorageEncrypted() const {
    return m_storage_encrypted;
}
void OAIGlobalCluster::setStorageEncrypted(const bool &storage_encrypted) {
    m_storage_encrypted = storage_encrypted;
    m_storage_encrypted_isSet = true;
}

bool OAIGlobalCluster::is_storage_encrypted_Set() const{
    return m_storage_encrypted_isSet;
}

bool OAIGlobalCluster::is_storage_encrypted_Valid() const{
    return m_storage_encrypted_isValid;
}

bool OAIGlobalCluster::getDeletionProtection() const {
    return m_deletion_protection;
}
void OAIGlobalCluster::setDeletionProtection(const bool &deletion_protection) {
    m_deletion_protection = deletion_protection;
    m_deletion_protection_isSet = true;
}

bool OAIGlobalCluster::is_deletion_protection_Set() const{
    return m_deletion_protection_isSet;
}

bool OAIGlobalCluster::is_deletion_protection_Valid() const{
    return m_deletion_protection_isValid;
}

QList OAIGlobalCluster::getGlobalClusterMembers() const {
    return m_global_cluster_members;
}
void OAIGlobalCluster::setGlobalClusterMembers(const QList &global_cluster_members) {
    m_global_cluster_members = global_cluster_members;
    m_global_cluster_members_isSet = true;
}

bool OAIGlobalCluster::is_global_cluster_members_Set() const{
    return m_global_cluster_members_isSet;
}

bool OAIGlobalCluster::is_global_cluster_members_Valid() const{
    return m_global_cluster_members_isValid;
}

bool OAIGlobalCluster::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_global_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_cluster_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_cluster_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletion_protection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_cluster_members.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGlobalCluster::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
