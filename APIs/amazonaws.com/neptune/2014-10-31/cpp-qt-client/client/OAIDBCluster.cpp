/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDBCluster.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDBCluster::OAIDBCluster(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDBCluster::OAIDBCluster() {
    this->initializeModel();
}

OAIDBCluster::~OAIDBCluster() {}

void OAIDBCluster::initializeModel() {

    m_allocated_storage_isSet = false;
    m_allocated_storage_isValid = false;

    m_availability_zones_isSet = false;
    m_availability_zones_isValid = false;

    m_backup_retention_period_isSet = false;
    m_backup_retention_period_isValid = false;

    m_character_set_name_isSet = false;
    m_character_set_name_isValid = false;

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_db_cluster_identifier_isSet = false;
    m_db_cluster_identifier_isValid = false;

    m_db_cluster_parameter_group_isSet = false;
    m_db_cluster_parameter_group_isValid = false;

    m_db_subnet_group_isSet = false;
    m_db_subnet_group_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_percent_progress_isSet = false;
    m_percent_progress_isValid = false;

    m_earliest_restorable_time_isSet = false;
    m_earliest_restorable_time_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_reader_endpoint_isSet = false;
    m_reader_endpoint_isValid = false;

    m_multi_az_isSet = false;
    m_multi_az_isValid = false;

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_latest_restorable_time_isSet = false;
    m_latest_restorable_time_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_master_username_isSet = false;
    m_master_username_isValid = false;

    m_db_cluster_option_group_memberships_isSet = false;
    m_db_cluster_option_group_memberships_isValid = false;

    m_preferred_backup_window_isSet = false;
    m_preferred_backup_window_isValid = false;

    m_preferred_maintenance_window_isSet = false;
    m_preferred_maintenance_window_isValid = false;

    m_replication_source_identifier_isSet = false;
    m_replication_source_identifier_isValid = false;

    m_read_replica_identifiers_isSet = false;
    m_read_replica_identifiers_isValid = false;

    m_db_cluster_members_isSet = false;
    m_db_cluster_members_isValid = false;

    m_vpc_security_groups_isSet = false;
    m_vpc_security_groups_isValid = false;

    m_hosted_zone_id_isSet = false;
    m_hosted_zone_id_isValid = false;

    m_storage_encrypted_isSet = false;
    m_storage_encrypted_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_db_cluster_resource_id_isSet = false;
    m_db_cluster_resource_id_isValid = false;

    m_db_cluster_arn_isSet = false;
    m_db_cluster_arn_isValid = false;

    m_associated_roles_isSet = false;
    m_associated_roles_isValid = false;

    m_iam_database_authentication_enabled_isSet = false;
    m_iam_database_authentication_enabled_isValid = false;

    m_clone_group_id_isSet = false;
    m_clone_group_id_isValid = false;

    m_cluster_create_time_isSet = false;
    m_cluster_create_time_isValid = false;

    m_copy_tags_to_snapshot_isSet = false;
    m_copy_tags_to_snapshot_isValid = false;

    m_enabled_cloudwatch_logs_exports_isSet = false;
    m_enabled_cloudwatch_logs_exports_isValid = false;

    m_pending_modified_values_isSet = false;
    m_pending_modified_values_isValid = false;

    m_deletion_protection_isSet = false;
    m_deletion_protection_isValid = false;

    m_cross_account_clone_isSet = false;
    m_cross_account_clone_isValid = false;

    m_automatic_restart_time_isSet = false;
    m_automatic_restart_time_isValid = false;

    m_serverless_v2_scaling_configuration_isSet = false;
    m_serverless_v2_scaling_configuration_isValid = false;

    m_global_cluster_identifier_isSet = false;
    m_global_cluster_identifier_isValid = false;
}

void OAIDBCluster::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDBCluster::fromJsonObject(QJsonObject json) {

    m_allocated_storage_isValid = ::OpenAPI::fromJsonValue(m_allocated_storage, json[QString("AllocatedStorage")]);
    m_allocated_storage_isSet = !json[QString("AllocatedStorage")].isNull() && m_allocated_storage_isValid;

    m_availability_zones_isValid = ::OpenAPI::fromJsonValue(m_availability_zones, json[QString("AvailabilityZones")]);
    m_availability_zones_isSet = !json[QString("AvailabilityZones")].isNull() && m_availability_zones_isValid;

    m_backup_retention_period_isValid = ::OpenAPI::fromJsonValue(m_backup_retention_period, json[QString("BackupRetentionPeriod")]);
    m_backup_retention_period_isSet = !json[QString("BackupRetentionPeriod")].isNull() && m_backup_retention_period_isValid;

    m_character_set_name_isValid = ::OpenAPI::fromJsonValue(m_character_set_name, json[QString("CharacterSetName")]);
    m_character_set_name_isSet = !json[QString("CharacterSetName")].isNull() && m_character_set_name_isValid;

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("DatabaseName")]);
    m_database_name_isSet = !json[QString("DatabaseName")].isNull() && m_database_name_isValid;

    m_db_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_identifier, json[QString("DBClusterIdentifier")]);
    m_db_cluster_identifier_isSet = !json[QString("DBClusterIdentifier")].isNull() && m_db_cluster_identifier_isValid;

    m_db_cluster_parameter_group_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_parameter_group, json[QString("DBClusterParameterGroup")]);
    m_db_cluster_parameter_group_isSet = !json[QString("DBClusterParameterGroup")].isNull() && m_db_cluster_parameter_group_isValid;

    m_db_subnet_group_isValid = ::OpenAPI::fromJsonValue(m_db_subnet_group, json[QString("DBSubnetGroup")]);
    m_db_subnet_group_isSet = !json[QString("DBSubnetGroup")].isNull() && m_db_subnet_group_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_percent_progress_isValid = ::OpenAPI::fromJsonValue(m_percent_progress, json[QString("PercentProgress")]);
    m_percent_progress_isSet = !json[QString("PercentProgress")].isNull() && m_percent_progress_isValid;

    m_earliest_restorable_time_isValid = ::OpenAPI::fromJsonValue(m_earliest_restorable_time, json[QString("EarliestRestorableTime")]);
    m_earliest_restorable_time_isSet = !json[QString("EarliestRestorableTime")].isNull() && m_earliest_restorable_time_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("Endpoint")]);
    m_endpoint_isSet = !json[QString("Endpoint")].isNull() && m_endpoint_isValid;

    m_reader_endpoint_isValid = ::OpenAPI::fromJsonValue(m_reader_endpoint, json[QString("ReaderEndpoint")]);
    m_reader_endpoint_isSet = !json[QString("ReaderEndpoint")].isNull() && m_reader_endpoint_isValid;

    m_multi_az_isValid = ::OpenAPI::fromJsonValue(m_multi_az, json[QString("MultiAZ")]);
    m_multi_az_isSet = !json[QString("MultiAZ")].isNull() && m_multi_az_isValid;

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("Engine")]);
    m_engine_isSet = !json[QString("Engine")].isNull() && m_engine_isValid;

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("EngineVersion")]);
    m_engine_version_isSet = !json[QString("EngineVersion")].isNull() && m_engine_version_isValid;

    m_latest_restorable_time_isValid = ::OpenAPI::fromJsonValue(m_latest_restorable_time, json[QString("LatestRestorableTime")]);
    m_latest_restorable_time_isSet = !json[QString("LatestRestorableTime")].isNull() && m_latest_restorable_time_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("Port")]);
    m_port_isSet = !json[QString("Port")].isNull() && m_port_isValid;

    m_master_username_isValid = ::OpenAPI::fromJsonValue(m_master_username, json[QString("MasterUsername")]);
    m_master_username_isSet = !json[QString("MasterUsername")].isNull() && m_master_username_isValid;

    m_db_cluster_option_group_memberships_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_option_group_memberships, json[QString("DBClusterOptionGroupMemberships")]);
    m_db_cluster_option_group_memberships_isSet = !json[QString("DBClusterOptionGroupMemberships")].isNull() && m_db_cluster_option_group_memberships_isValid;

    m_preferred_backup_window_isValid = ::OpenAPI::fromJsonValue(m_preferred_backup_window, json[QString("PreferredBackupWindow")]);
    m_preferred_backup_window_isSet = !json[QString("PreferredBackupWindow")].isNull() && m_preferred_backup_window_isValid;

    m_preferred_maintenance_window_isValid = ::OpenAPI::fromJsonValue(m_preferred_maintenance_window, json[QString("PreferredMaintenanceWindow")]);
    m_preferred_maintenance_window_isSet = !json[QString("PreferredMaintenanceWindow")].isNull() && m_preferred_maintenance_window_isValid;

    m_replication_source_identifier_isValid = ::OpenAPI::fromJsonValue(m_replication_source_identifier, json[QString("ReplicationSourceIdentifier")]);
    m_replication_source_identifier_isSet = !json[QString("ReplicationSourceIdentifier")].isNull() && m_replication_source_identifier_isValid;

    m_read_replica_identifiers_isValid = ::OpenAPI::fromJsonValue(m_read_replica_identifiers, json[QString("ReadReplicaIdentifiers")]);
    m_read_replica_identifiers_isSet = !json[QString("ReadReplicaIdentifiers")].isNull() && m_read_replica_identifiers_isValid;

    m_db_cluster_members_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_members, json[QString("DBClusterMembers")]);
    m_db_cluster_members_isSet = !json[QString("DBClusterMembers")].isNull() && m_db_cluster_members_isValid;

    m_vpc_security_groups_isValid = ::OpenAPI::fromJsonValue(m_vpc_security_groups, json[QString("VpcSecurityGroups")]);
    m_vpc_security_groups_isSet = !json[QString("VpcSecurityGroups")].isNull() && m_vpc_security_groups_isValid;

    m_hosted_zone_id_isValid = ::OpenAPI::fromJsonValue(m_hosted_zone_id, json[QString("HostedZoneId")]);
    m_hosted_zone_id_isSet = !json[QString("HostedZoneId")].isNull() && m_hosted_zone_id_isValid;

    m_storage_encrypted_isValid = ::OpenAPI::fromJsonValue(m_storage_encrypted, json[QString("StorageEncrypted")]);
    m_storage_encrypted_isSet = !json[QString("StorageEncrypted")].isNull() && m_storage_encrypted_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_db_cluster_resource_id_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_resource_id, json[QString("DbClusterResourceId")]);
    m_db_cluster_resource_id_isSet = !json[QString("DbClusterResourceId")].isNull() && m_db_cluster_resource_id_isValid;

    m_db_cluster_arn_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_arn, json[QString("DBClusterArn")]);
    m_db_cluster_arn_isSet = !json[QString("DBClusterArn")].isNull() && m_db_cluster_arn_isValid;

    m_associated_roles_isValid = ::OpenAPI::fromJsonValue(m_associated_roles, json[QString("AssociatedRoles")]);
    m_associated_roles_isSet = !json[QString("AssociatedRoles")].isNull() && m_associated_roles_isValid;

    m_iam_database_authentication_enabled_isValid = ::OpenAPI::fromJsonValue(m_iam_database_authentication_enabled, json[QString("IAMDatabaseAuthenticationEnabled")]);
    m_iam_database_authentication_enabled_isSet = !json[QString("IAMDatabaseAuthenticationEnabled")].isNull() && m_iam_database_authentication_enabled_isValid;

    m_clone_group_id_isValid = ::OpenAPI::fromJsonValue(m_clone_group_id, json[QString("CloneGroupId")]);
    m_clone_group_id_isSet = !json[QString("CloneGroupId")].isNull() && m_clone_group_id_isValid;

    m_cluster_create_time_isValid = ::OpenAPI::fromJsonValue(m_cluster_create_time, json[QString("ClusterCreateTime")]);
    m_cluster_create_time_isSet = !json[QString("ClusterCreateTime")].isNull() && m_cluster_create_time_isValid;

    m_copy_tags_to_snapshot_isValid = ::OpenAPI::fromJsonValue(m_copy_tags_to_snapshot, json[QString("CopyTagsToSnapshot")]);
    m_copy_tags_to_snapshot_isSet = !json[QString("CopyTagsToSnapshot")].isNull() && m_copy_tags_to_snapshot_isValid;

    m_enabled_cloudwatch_logs_exports_isValid = ::OpenAPI::fromJsonValue(m_enabled_cloudwatch_logs_exports, json[QString("EnabledCloudwatchLogsExports")]);
    m_enabled_cloudwatch_logs_exports_isSet = !json[QString("EnabledCloudwatchLogsExports")].isNull() && m_enabled_cloudwatch_logs_exports_isValid;

    m_pending_modified_values_isValid = ::OpenAPI::fromJsonValue(m_pending_modified_values, json[QString("PendingModifiedValues")]);
    m_pending_modified_values_isSet = !json[QString("PendingModifiedValues")].isNull() && m_pending_modified_values_isValid;

    m_deletion_protection_isValid = ::OpenAPI::fromJsonValue(m_deletion_protection, json[QString("DeletionProtection")]);
    m_deletion_protection_isSet = !json[QString("DeletionProtection")].isNull() && m_deletion_protection_isValid;

    m_cross_account_clone_isValid = ::OpenAPI::fromJsonValue(m_cross_account_clone, json[QString("CrossAccountClone")]);
    m_cross_account_clone_isSet = !json[QString("CrossAccountClone")].isNull() && m_cross_account_clone_isValid;

    m_automatic_restart_time_isValid = ::OpenAPI::fromJsonValue(m_automatic_restart_time, json[QString("AutomaticRestartTime")]);
    m_automatic_restart_time_isSet = !json[QString("AutomaticRestartTime")].isNull() && m_automatic_restart_time_isValid;

    m_serverless_v2_scaling_configuration_isValid = ::OpenAPI::fromJsonValue(m_serverless_v2_scaling_configuration, json[QString("ServerlessV2ScalingConfiguration")]);
    m_serverless_v2_scaling_configuration_isSet = !json[QString("ServerlessV2ScalingConfiguration")].isNull() && m_serverless_v2_scaling_configuration_isValid;

    m_global_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_global_cluster_identifier, json[QString("GlobalClusterIdentifier")]);
    m_global_cluster_identifier_isSet = !json[QString("GlobalClusterIdentifier")].isNull() && m_global_cluster_identifier_isValid;
}

QString OAIDBCluster::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDBCluster::asJsonObject() const {
    QJsonObject obj;
    if (m_allocated_storage_isSet) {
        obj.insert(QString("AllocatedStorage"), ::OpenAPI::toJsonValue(m_allocated_storage));
    }
    if (m_availability_zones.isSet()) {
        obj.insert(QString("AvailabilityZones"), ::OpenAPI::toJsonValue(m_availability_zones));
    }
    if (m_backup_retention_period_isSet) {
        obj.insert(QString("BackupRetentionPeriod"), ::OpenAPI::toJsonValue(m_backup_retention_period));
    }
    if (m_character_set_name_isSet) {
        obj.insert(QString("CharacterSetName"), ::OpenAPI::toJsonValue(m_character_set_name));
    }
    if (m_database_name_isSet) {
        obj.insert(QString("DatabaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_db_cluster_identifier_isSet) {
        obj.insert(QString("DBClusterIdentifier"), ::OpenAPI::toJsonValue(m_db_cluster_identifier));
    }
    if (m_db_cluster_parameter_group_isSet) {
        obj.insert(QString("DBClusterParameterGroup"), ::OpenAPI::toJsonValue(m_db_cluster_parameter_group));
    }
    if (m_db_subnet_group_isSet) {
        obj.insert(QString("DBSubnetGroup"), ::OpenAPI::toJsonValue(m_db_subnet_group));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_percent_progress_isSet) {
        obj.insert(QString("PercentProgress"), ::OpenAPI::toJsonValue(m_percent_progress));
    }
    if (m_earliest_restorable_time_isSet) {
        obj.insert(QString("EarliestRestorableTime"), ::OpenAPI::toJsonValue(m_earliest_restorable_time));
    }
    if (m_endpoint_isSet) {
        obj.insert(QString("Endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_reader_endpoint_isSet) {
        obj.insert(QString("ReaderEndpoint"), ::OpenAPI::toJsonValue(m_reader_endpoint));
    }
    if (m_multi_az_isSet) {
        obj.insert(QString("MultiAZ"), ::OpenAPI::toJsonValue(m_multi_az));
    }
    if (m_engine_isSet) {
        obj.insert(QString("Engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_engine_version_isSet) {
        obj.insert(QString("EngineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_latest_restorable_time_isSet) {
        obj.insert(QString("LatestRestorableTime"), ::OpenAPI::toJsonValue(m_latest_restorable_time));
    }
    if (m_port_isSet) {
        obj.insert(QString("Port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_master_username_isSet) {
        obj.insert(QString("MasterUsername"), ::OpenAPI::toJsonValue(m_master_username));
    }
    if (m_db_cluster_option_group_memberships.isSet()) {
        obj.insert(QString("DBClusterOptionGroupMemberships"), ::OpenAPI::toJsonValue(m_db_cluster_option_group_memberships));
    }
    if (m_preferred_backup_window_isSet) {
        obj.insert(QString("PreferredBackupWindow"), ::OpenAPI::toJsonValue(m_preferred_backup_window));
    }
    if (m_preferred_maintenance_window_isSet) {
        obj.insert(QString("PreferredMaintenanceWindow"), ::OpenAPI::toJsonValue(m_preferred_maintenance_window));
    }
    if (m_replication_source_identifier_isSet) {
        obj.insert(QString("ReplicationSourceIdentifier"), ::OpenAPI::toJsonValue(m_replication_source_identifier));
    }
    if (m_read_replica_identifiers.isSet()) {
        obj.insert(QString("ReadReplicaIdentifiers"), ::OpenAPI::toJsonValue(m_read_replica_identifiers));
    }
    if (m_db_cluster_members.isSet()) {
        obj.insert(QString("DBClusterMembers"), ::OpenAPI::toJsonValue(m_db_cluster_members));
    }
    if (m_vpc_security_groups.isSet()) {
        obj.insert(QString("VpcSecurityGroups"), ::OpenAPI::toJsonValue(m_vpc_security_groups));
    }
    if (m_hosted_zone_id_isSet) {
        obj.insert(QString("HostedZoneId"), ::OpenAPI::toJsonValue(m_hosted_zone_id));
    }
    if (m_storage_encrypted_isSet) {
        obj.insert(QString("StorageEncrypted"), ::OpenAPI::toJsonValue(m_storage_encrypted));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_db_cluster_resource_id_isSet) {
        obj.insert(QString("DbClusterResourceId"), ::OpenAPI::toJsonValue(m_db_cluster_resource_id));
    }
    if (m_db_cluster_arn_isSet) {
        obj.insert(QString("DBClusterArn"), ::OpenAPI::toJsonValue(m_db_cluster_arn));
    }
    if (m_associated_roles.isSet()) {
        obj.insert(QString("AssociatedRoles"), ::OpenAPI::toJsonValue(m_associated_roles));
    }
    if (m_iam_database_authentication_enabled_isSet) {
        obj.insert(QString("IAMDatabaseAuthenticationEnabled"), ::OpenAPI::toJsonValue(m_iam_database_authentication_enabled));
    }
    if (m_clone_group_id_isSet) {
        obj.insert(QString("CloneGroupId"), ::OpenAPI::toJsonValue(m_clone_group_id));
    }
    if (m_cluster_create_time_isSet) {
        obj.insert(QString("ClusterCreateTime"), ::OpenAPI::toJsonValue(m_cluster_create_time));
    }
    if (m_copy_tags_to_snapshot_isSet) {
        obj.insert(QString("CopyTagsToSnapshot"), ::OpenAPI::toJsonValue(m_copy_tags_to_snapshot));
    }
    if (m_enabled_cloudwatch_logs_exports.isSet()) {
        obj.insert(QString("EnabledCloudwatchLogsExports"), ::OpenAPI::toJsonValue(m_enabled_cloudwatch_logs_exports));
    }
    if (m_pending_modified_values.isSet()) {
        obj.insert(QString("PendingModifiedValues"), ::OpenAPI::toJsonValue(m_pending_modified_values));
    }
    if (m_deletion_protection_isSet) {
        obj.insert(QString("DeletionProtection"), ::OpenAPI::toJsonValue(m_deletion_protection));
    }
    if (m_cross_account_clone_isSet) {
        obj.insert(QString("CrossAccountClone"), ::OpenAPI::toJsonValue(m_cross_account_clone));
    }
    if (m_automatic_restart_time_isSet) {
        obj.insert(QString("AutomaticRestartTime"), ::OpenAPI::toJsonValue(m_automatic_restart_time));
    }
    if (m_serverless_v2_scaling_configuration.isSet()) {
        obj.insert(QString("ServerlessV2ScalingConfiguration"), ::OpenAPI::toJsonValue(m_serverless_v2_scaling_configuration));
    }
    if (m_global_cluster_identifier_isSet) {
        obj.insert(QString("GlobalClusterIdentifier"), ::OpenAPI::toJsonValue(m_global_cluster_identifier));
    }
    return obj;
}

qint32 OAIDBCluster::getAllocatedStorage() const {
    return m_allocated_storage;
}
void OAIDBCluster::setAllocatedStorage(const qint32 &allocated_storage) {
    m_allocated_storage = allocated_storage;
    m_allocated_storage_isSet = true;
}

bool OAIDBCluster::is_allocated_storage_Set() const{
    return m_allocated_storage_isSet;
}

bool OAIDBCluster::is_allocated_storage_Valid() const{
    return m_allocated_storage_isValid;
}

QList OAIDBCluster::getAvailabilityZones() const {
    return m_availability_zones;
}
void OAIDBCluster::setAvailabilityZones(const QList &availability_zones) {
    m_availability_zones = availability_zones;
    m_availability_zones_isSet = true;
}

bool OAIDBCluster::is_availability_zones_Set() const{
    return m_availability_zones_isSet;
}

bool OAIDBCluster::is_availability_zones_Valid() const{
    return m_availability_zones_isValid;
}

qint32 OAIDBCluster::getBackupRetentionPeriod() const {
    return m_backup_retention_period;
}
void OAIDBCluster::setBackupRetentionPeriod(const qint32 &backup_retention_period) {
    m_backup_retention_period = backup_retention_period;
    m_backup_retention_period_isSet = true;
}

bool OAIDBCluster::is_backup_retention_period_Set() const{
    return m_backup_retention_period_isSet;
}

bool OAIDBCluster::is_backup_retention_period_Valid() const{
    return m_backup_retention_period_isValid;
}

QString OAIDBCluster::getCharacterSetName() const {
    return m_character_set_name;
}
void OAIDBCluster::setCharacterSetName(const QString &character_set_name) {
    m_character_set_name = character_set_name;
    m_character_set_name_isSet = true;
}

bool OAIDBCluster::is_character_set_name_Set() const{
    return m_character_set_name_isSet;
}

bool OAIDBCluster::is_character_set_name_Valid() const{
    return m_character_set_name_isValid;
}

QString OAIDBCluster::getDatabaseName() const {
    return m_database_name;
}
void OAIDBCluster::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAIDBCluster::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAIDBCluster::is_database_name_Valid() const{
    return m_database_name_isValid;
}

QString OAIDBCluster::getDbClusterIdentifier() const {
    return m_db_cluster_identifier;
}
void OAIDBCluster::setDbClusterIdentifier(const QString &db_cluster_identifier) {
    m_db_cluster_identifier = db_cluster_identifier;
    m_db_cluster_identifier_isSet = true;
}

bool OAIDBCluster::is_db_cluster_identifier_Set() const{
    return m_db_cluster_identifier_isSet;
}

bool OAIDBCluster::is_db_cluster_identifier_Valid() const{
    return m_db_cluster_identifier_isValid;
}

QString OAIDBCluster::getDbClusterParameterGroup() const {
    return m_db_cluster_parameter_group;
}
void OAIDBCluster::setDbClusterParameterGroup(const QString &db_cluster_parameter_group) {
    m_db_cluster_parameter_group = db_cluster_parameter_group;
    m_db_cluster_parameter_group_isSet = true;
}

bool OAIDBCluster::is_db_cluster_parameter_group_Set() const{
    return m_db_cluster_parameter_group_isSet;
}

bool OAIDBCluster::is_db_cluster_parameter_group_Valid() const{
    return m_db_cluster_parameter_group_isValid;
}

QString OAIDBCluster::getDbSubnetGroup() const {
    return m_db_subnet_group;
}
void OAIDBCluster::setDbSubnetGroup(const QString &db_subnet_group) {
    m_db_subnet_group = db_subnet_group;
    m_db_subnet_group_isSet = true;
}

bool OAIDBCluster::is_db_subnet_group_Set() const{
    return m_db_subnet_group_isSet;
}

bool OAIDBCluster::is_db_subnet_group_Valid() const{
    return m_db_subnet_group_isValid;
}

QString OAIDBCluster::getStatus() const {
    return m_status;
}
void OAIDBCluster::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDBCluster::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDBCluster::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDBCluster::getPercentProgress() const {
    return m_percent_progress;
}
void OAIDBCluster::setPercentProgress(const QString &percent_progress) {
    m_percent_progress = percent_progress;
    m_percent_progress_isSet = true;
}

bool OAIDBCluster::is_percent_progress_Set() const{
    return m_percent_progress_isSet;
}

bool OAIDBCluster::is_percent_progress_Valid() const{
    return m_percent_progress_isValid;
}

QDateTime OAIDBCluster::getEarliestRestorableTime() const {
    return m_earliest_restorable_time;
}
void OAIDBCluster::setEarliestRestorableTime(const QDateTime &earliest_restorable_time) {
    m_earliest_restorable_time = earliest_restorable_time;
    m_earliest_restorable_time_isSet = true;
}

bool OAIDBCluster::is_earliest_restorable_time_Set() const{
    return m_earliest_restorable_time_isSet;
}

bool OAIDBCluster::is_earliest_restorable_time_Valid() const{
    return m_earliest_restorable_time_isValid;
}

QString OAIDBCluster::getEndpoint() const {
    return m_endpoint;
}
void OAIDBCluster::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIDBCluster::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIDBCluster::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QString OAIDBCluster::getReaderEndpoint() const {
    return m_reader_endpoint;
}
void OAIDBCluster::setReaderEndpoint(const QString &reader_endpoint) {
    m_reader_endpoint = reader_endpoint;
    m_reader_endpoint_isSet = true;
}

bool OAIDBCluster::is_reader_endpoint_Set() const{
    return m_reader_endpoint_isSet;
}

bool OAIDBCluster::is_reader_endpoint_Valid() const{
    return m_reader_endpoint_isValid;
}

bool OAIDBCluster::getMultiAz() const {
    return m_multi_az;
}
void OAIDBCluster::setMultiAz(const bool &multi_az) {
    m_multi_az = multi_az;
    m_multi_az_isSet = true;
}

bool OAIDBCluster::is_multi_az_Set() const{
    return m_multi_az_isSet;
}

bool OAIDBCluster::is_multi_az_Valid() const{
    return m_multi_az_isValid;
}

QString OAIDBCluster::getEngine() const {
    return m_engine;
}
void OAIDBCluster::setEngine(const QString &engine) {
    m_engine = engine;
    m_engine_isSet = true;
}

bool OAIDBCluster::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAIDBCluster::is_engine_Valid() const{
    return m_engine_isValid;
}

QString OAIDBCluster::getEngineVersion() const {
    return m_engine_version;
}
void OAIDBCluster::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAIDBCluster::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAIDBCluster::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

QDateTime OAIDBCluster::getLatestRestorableTime() const {
    return m_latest_restorable_time;
}
void OAIDBCluster::setLatestRestorableTime(const QDateTime &latest_restorable_time) {
    m_latest_restorable_time = latest_restorable_time;
    m_latest_restorable_time_isSet = true;
}

bool OAIDBCluster::is_latest_restorable_time_Set() const{
    return m_latest_restorable_time_isSet;
}

bool OAIDBCluster::is_latest_restorable_time_Valid() const{
    return m_latest_restorable_time_isValid;
}

qint32 OAIDBCluster::getPort() const {
    return m_port;
}
void OAIDBCluster::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIDBCluster::is_port_Set() const{
    return m_port_isSet;
}

bool OAIDBCluster::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIDBCluster::getMasterUsername() const {
    return m_master_username;
}
void OAIDBCluster::setMasterUsername(const QString &master_username) {
    m_master_username = master_username;
    m_master_username_isSet = true;
}

bool OAIDBCluster::is_master_username_Set() const{
    return m_master_username_isSet;
}

bool OAIDBCluster::is_master_username_Valid() const{
    return m_master_username_isValid;
}

QList OAIDBCluster::getDbClusterOptionGroupMemberships() const {
    return m_db_cluster_option_group_memberships;
}
void OAIDBCluster::setDbClusterOptionGroupMemberships(const QList &db_cluster_option_group_memberships) {
    m_db_cluster_option_group_memberships = db_cluster_option_group_memberships;
    m_db_cluster_option_group_memberships_isSet = true;
}

bool OAIDBCluster::is_db_cluster_option_group_memberships_Set() const{
    return m_db_cluster_option_group_memberships_isSet;
}

bool OAIDBCluster::is_db_cluster_option_group_memberships_Valid() const{
    return m_db_cluster_option_group_memberships_isValid;
}

QString OAIDBCluster::getPreferredBackupWindow() const {
    return m_preferred_backup_window;
}
void OAIDBCluster::setPreferredBackupWindow(const QString &preferred_backup_window) {
    m_preferred_backup_window = preferred_backup_window;
    m_preferred_backup_window_isSet = true;
}

bool OAIDBCluster::is_preferred_backup_window_Set() const{
    return m_preferred_backup_window_isSet;
}

bool OAIDBCluster::is_preferred_backup_window_Valid() const{
    return m_preferred_backup_window_isValid;
}

QString OAIDBCluster::getPreferredMaintenanceWindow() const {
    return m_preferred_maintenance_window;
}
void OAIDBCluster::setPreferredMaintenanceWindow(const QString &preferred_maintenance_window) {
    m_preferred_maintenance_window = preferred_maintenance_window;
    m_preferred_maintenance_window_isSet = true;
}

bool OAIDBCluster::is_preferred_maintenance_window_Set() const{
    return m_preferred_maintenance_window_isSet;
}

bool OAIDBCluster::is_preferred_maintenance_window_Valid() const{
    return m_preferred_maintenance_window_isValid;
}

QString OAIDBCluster::getReplicationSourceIdentifier() const {
    return m_replication_source_identifier;
}
void OAIDBCluster::setReplicationSourceIdentifier(const QString &replication_source_identifier) {
    m_replication_source_identifier = replication_source_identifier;
    m_replication_source_identifier_isSet = true;
}

bool OAIDBCluster::is_replication_source_identifier_Set() const{
    return m_replication_source_identifier_isSet;
}

bool OAIDBCluster::is_replication_source_identifier_Valid() const{
    return m_replication_source_identifier_isValid;
}

QList OAIDBCluster::getReadReplicaIdentifiers() const {
    return m_read_replica_identifiers;
}
void OAIDBCluster::setReadReplicaIdentifiers(const QList &read_replica_identifiers) {
    m_read_replica_identifiers = read_replica_identifiers;
    m_read_replica_identifiers_isSet = true;
}

bool OAIDBCluster::is_read_replica_identifiers_Set() const{
    return m_read_replica_identifiers_isSet;
}

bool OAIDBCluster::is_read_replica_identifiers_Valid() const{
    return m_read_replica_identifiers_isValid;
}

QList OAIDBCluster::getDbClusterMembers() const {
    return m_db_cluster_members;
}
void OAIDBCluster::setDbClusterMembers(const QList &db_cluster_members) {
    m_db_cluster_members = db_cluster_members;
    m_db_cluster_members_isSet = true;
}

bool OAIDBCluster::is_db_cluster_members_Set() const{
    return m_db_cluster_members_isSet;
}

bool OAIDBCluster::is_db_cluster_members_Valid() const{
    return m_db_cluster_members_isValid;
}

QList OAIDBCluster::getVpcSecurityGroups() const {
    return m_vpc_security_groups;
}
void OAIDBCluster::setVpcSecurityGroups(const QList &vpc_security_groups) {
    m_vpc_security_groups = vpc_security_groups;
    m_vpc_security_groups_isSet = true;
}

bool OAIDBCluster::is_vpc_security_groups_Set() const{
    return m_vpc_security_groups_isSet;
}

bool OAIDBCluster::is_vpc_security_groups_Valid() const{
    return m_vpc_security_groups_isValid;
}

QString OAIDBCluster::getHostedZoneId() const {
    return m_hosted_zone_id;
}
void OAIDBCluster::setHostedZoneId(const QString &hosted_zone_id) {
    m_hosted_zone_id = hosted_zone_id;
    m_hosted_zone_id_isSet = true;
}

bool OAIDBCluster::is_hosted_zone_id_Set() const{
    return m_hosted_zone_id_isSet;
}

bool OAIDBCluster::is_hosted_zone_id_Valid() const{
    return m_hosted_zone_id_isValid;
}

bool OAIDBCluster::getStorageEncrypted() const {
    return m_storage_encrypted;
}
void OAIDBCluster::setStorageEncrypted(const bool &storage_encrypted) {
    m_storage_encrypted = storage_encrypted;
    m_storage_encrypted_isSet = true;
}

bool OAIDBCluster::is_storage_encrypted_Set() const{
    return m_storage_encrypted_isSet;
}

bool OAIDBCluster::is_storage_encrypted_Valid() const{
    return m_storage_encrypted_isValid;
}

QString OAIDBCluster::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAIDBCluster::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAIDBCluster::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAIDBCluster::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

QString OAIDBCluster::getDbClusterResourceId() const {
    return m_db_cluster_resource_id;
}
void OAIDBCluster::setDbClusterResourceId(const QString &db_cluster_resource_id) {
    m_db_cluster_resource_id = db_cluster_resource_id;
    m_db_cluster_resource_id_isSet = true;
}

bool OAIDBCluster::is_db_cluster_resource_id_Set() const{
    return m_db_cluster_resource_id_isSet;
}

bool OAIDBCluster::is_db_cluster_resource_id_Valid() const{
    return m_db_cluster_resource_id_isValid;
}

QString OAIDBCluster::getDbClusterArn() const {
    return m_db_cluster_arn;
}
void OAIDBCluster::setDbClusterArn(const QString &db_cluster_arn) {
    m_db_cluster_arn = db_cluster_arn;
    m_db_cluster_arn_isSet = true;
}

bool OAIDBCluster::is_db_cluster_arn_Set() const{
    return m_db_cluster_arn_isSet;
}

bool OAIDBCluster::is_db_cluster_arn_Valid() const{
    return m_db_cluster_arn_isValid;
}

QList OAIDBCluster::getAssociatedRoles() const {
    return m_associated_roles;
}
void OAIDBCluster::setAssociatedRoles(const QList &associated_roles) {
    m_associated_roles = associated_roles;
    m_associated_roles_isSet = true;
}

bool OAIDBCluster::is_associated_roles_Set() const{
    return m_associated_roles_isSet;
}

bool OAIDBCluster::is_associated_roles_Valid() const{
    return m_associated_roles_isValid;
}

bool OAIDBCluster::getIamDatabaseAuthenticationEnabled() const {
    return m_iam_database_authentication_enabled;
}
void OAIDBCluster::setIamDatabaseAuthenticationEnabled(const bool &iam_database_authentication_enabled) {
    m_iam_database_authentication_enabled = iam_database_authentication_enabled;
    m_iam_database_authentication_enabled_isSet = true;
}

bool OAIDBCluster::is_iam_database_authentication_enabled_Set() const{
    return m_iam_database_authentication_enabled_isSet;
}

bool OAIDBCluster::is_iam_database_authentication_enabled_Valid() const{
    return m_iam_database_authentication_enabled_isValid;
}

QString OAIDBCluster::getCloneGroupId() const {
    return m_clone_group_id;
}
void OAIDBCluster::setCloneGroupId(const QString &clone_group_id) {
    m_clone_group_id = clone_group_id;
    m_clone_group_id_isSet = true;
}

bool OAIDBCluster::is_clone_group_id_Set() const{
    return m_clone_group_id_isSet;
}

bool OAIDBCluster::is_clone_group_id_Valid() const{
    return m_clone_group_id_isValid;
}

QDateTime OAIDBCluster::getClusterCreateTime() const {
    return m_cluster_create_time;
}
void OAIDBCluster::setClusterCreateTime(const QDateTime &cluster_create_time) {
    m_cluster_create_time = cluster_create_time;
    m_cluster_create_time_isSet = true;
}

bool OAIDBCluster::is_cluster_create_time_Set() const{
    return m_cluster_create_time_isSet;
}

bool OAIDBCluster::is_cluster_create_time_Valid() const{
    return m_cluster_create_time_isValid;
}

bool OAIDBCluster::getCopyTagsToSnapshot() const {
    return m_copy_tags_to_snapshot;
}
void OAIDBCluster::setCopyTagsToSnapshot(const bool &copy_tags_to_snapshot) {
    m_copy_tags_to_snapshot = copy_tags_to_snapshot;
    m_copy_tags_to_snapshot_isSet = true;
}

bool OAIDBCluster::is_copy_tags_to_snapshot_Set() const{
    return m_copy_tags_to_snapshot_isSet;
}

bool OAIDBCluster::is_copy_tags_to_snapshot_Valid() const{
    return m_copy_tags_to_snapshot_isValid;
}

QList OAIDBCluster::getEnabledCloudwatchLogsExports() const {
    return m_enabled_cloudwatch_logs_exports;
}
void OAIDBCluster::setEnabledCloudwatchLogsExports(const QList &enabled_cloudwatch_logs_exports) {
    m_enabled_cloudwatch_logs_exports = enabled_cloudwatch_logs_exports;
    m_enabled_cloudwatch_logs_exports_isSet = true;
}

bool OAIDBCluster::is_enabled_cloudwatch_logs_exports_Set() const{
    return m_enabled_cloudwatch_logs_exports_isSet;
}

bool OAIDBCluster::is_enabled_cloudwatch_logs_exports_Valid() const{
    return m_enabled_cloudwatch_logs_exports_isValid;
}

OAIDBCluster_PendingModifiedValues OAIDBCluster::getPendingModifiedValues() const {
    return m_pending_modified_values;
}
void OAIDBCluster::setPendingModifiedValues(const OAIDBCluster_PendingModifiedValues &pending_modified_values) {
    m_pending_modified_values = pending_modified_values;
    m_pending_modified_values_isSet = true;
}

bool OAIDBCluster::is_pending_modified_values_Set() const{
    return m_pending_modified_values_isSet;
}

bool OAIDBCluster::is_pending_modified_values_Valid() const{
    return m_pending_modified_values_isValid;
}

bool OAIDBCluster::getDeletionProtection() const {
    return m_deletion_protection;
}
void OAIDBCluster::setDeletionProtection(const bool &deletion_protection) {
    m_deletion_protection = deletion_protection;
    m_deletion_protection_isSet = true;
}

bool OAIDBCluster::is_deletion_protection_Set() const{
    return m_deletion_protection_isSet;
}

bool OAIDBCluster::is_deletion_protection_Valid() const{
    return m_deletion_protection_isValid;
}

bool OAIDBCluster::getCrossAccountClone() const {
    return m_cross_account_clone;
}
void OAIDBCluster::setCrossAccountClone(const bool &cross_account_clone) {
    m_cross_account_clone = cross_account_clone;
    m_cross_account_clone_isSet = true;
}

bool OAIDBCluster::is_cross_account_clone_Set() const{
    return m_cross_account_clone_isSet;
}

bool OAIDBCluster::is_cross_account_clone_Valid() const{
    return m_cross_account_clone_isValid;
}

QDateTime OAIDBCluster::getAutomaticRestartTime() const {
    return m_automatic_restart_time;
}
void OAIDBCluster::setAutomaticRestartTime(const QDateTime &automatic_restart_time) {
    m_automatic_restart_time = automatic_restart_time;
    m_automatic_restart_time_isSet = true;
}

bool OAIDBCluster::is_automatic_restart_time_Set() const{
    return m_automatic_restart_time_isSet;
}

bool OAIDBCluster::is_automatic_restart_time_Valid() const{
    return m_automatic_restart_time_isValid;
}

OAIServerlessV2ScalingConfigurationInfo OAIDBCluster::getServerlessV2ScalingConfiguration() const {
    return m_serverless_v2_scaling_configuration;
}
void OAIDBCluster::setServerlessV2ScalingConfiguration(const OAIServerlessV2ScalingConfigurationInfo &serverless_v2_scaling_configuration) {
    m_serverless_v2_scaling_configuration = serverless_v2_scaling_configuration;
    m_serverless_v2_scaling_configuration_isSet = true;
}

bool OAIDBCluster::is_serverless_v2_scaling_configuration_Set() const{
    return m_serverless_v2_scaling_configuration_isSet;
}

bool OAIDBCluster::is_serverless_v2_scaling_configuration_Valid() const{
    return m_serverless_v2_scaling_configuration_isValid;
}

QString OAIDBCluster::getGlobalClusterIdentifier() const {
    return m_global_cluster_identifier;
}
void OAIDBCluster::setGlobalClusterIdentifier(const QString &global_cluster_identifier) {
    m_global_cluster_identifier = global_cluster_identifier;
    m_global_cluster_identifier_isSet = true;
}

bool OAIDBCluster::is_global_cluster_identifier_Set() const{
    return m_global_cluster_identifier_isSet;
}

bool OAIDBCluster::is_global_cluster_identifier_Valid() const{
    return m_global_cluster_identifier_isValid;
}

bool OAIDBCluster::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allocated_storage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zones.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_retention_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_character_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_cluster_parameter_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_subnet_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_earliest_restorable_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reader_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_az_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_restorable_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_cluster_option_group_memberships.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_backup_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_maintenance_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_source_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_replica_identifiers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_cluster_members.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_security_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hosted_zone_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_cluster_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_cluster_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_associated_roles.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_database_authentication_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clone_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_tags_to_snapshot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_cloudwatch_logs_exports.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_modified_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletion_protection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cross_account_clone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_automatic_restart_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serverless_v2_scaling_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDBCluster::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
